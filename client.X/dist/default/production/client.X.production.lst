

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jan 25 16:48:16 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           ; Version 1.41
    69                           ; Generated 25/01/2017 GMT
    70                           ; 
    71                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4520 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     
   103                           	psect	mediumconst
   104  007DFA                     __pmediumconst:
   105                           	opt stack 0
   106  007DFA  00                 	db	0
   107  007DFB                     _octpowers:
   108                           	opt stack 0
   109  007DFB  0001               	dw	1
   110  007DFD  0008               	dw	8
   111  007DFF  0040               	dw	64
   112  007E01  0200               	dw	512
   113  007E03  1000               	dw	4096
   114  007E05  8000               	dw	32768
   115  007E07                     __end_of_octpowers:
   116                           	opt stack 0
   117  007E07                     _dpowers:
   118                           	opt stack 0
   119  007E07  0001               	dw	1
   120  007E09  000A               	dw	10
   121  007E0B  0064               	dw	100
   122  007E0D  03E8               	dw	1000
   123  007E0F  2710               	dw	10000
   124  007E11                     __end_of_dpowers:
   125                           	opt stack 0
   126  007E11                     _hexpowers:
   127                           	opt stack 0
   128  007E11  0001               	dw	1
   129  007E13  0010               	dw	16
   130  007E15  0100               	dw	256
   131  007E17  1000               	dw	4096
   132  007E19                     __end_of_hexpowers:
   133                           	opt stack 0
   134  0000                     _LATCbits	set	3979
   135  0000                     _TRISCbits	set	3988
   136  0000                     _PORTDbits	set	3971
   137  0000                     _TRISDbits	set	3989
   138  0000                     _ADRESH	set	4036
   139  0000                     _ADRESL	set	4035
   140  0000                     _RCREG	set	4014
   141  0000                     _TXREG	set	4013
   142  0000                     _SPBRG	set	4015
   143  0000                     _SPBRGH	set	4016
   144  0000                     _BAUDCONbits	set	4024
   145  0000                     _RCSTAbits	set	4011
   146  0000                     _TXSTAbits	set	4012
   147  0000                     _ADCON2bits	set	4032
   148  0000                     _ADCON1bits	set	4033
   149  0000                     _PIR1bits	set	3998
   150  0000                     _PIE1bits	set	3997
   151  0000                     _INTCONbits	set	4082
   152  0000                     _RCONbits	set	4048
   153  0000                     _T0CONbits	set	4053
   154  0000                     _T2CONbits	set	4042
   155  0000                     _PR2	set	4043
   156  0000                     _OSCCONbits	set	4051
   157  0000                     _TRISC	set	3988
   158  0000                     _LATD	set	3980
   159  0000                     _PORTD	set	3971
   160  0000                     _TRISD	set	3989
   161  0000                     _ADCON0bits	set	4034
   162  0000                     _TRMT	set	32097
   163  0000                     _TXIF	set	31988
   164  007E19                     STR_20:
   165  007E19  41                 	db	65	;'A'
   166  007E1A  54                 	db	84	;'T'
   167  007E1B  2B                 	db	43
   168  007E1C  43                 	db	67	;'C'
   169  007E1D  57                 	db	87	;'W'
   170  007E1E  53                 	db	83	;'S'
   171  007E1F  41                 	db	65	;'A'
   172  007E20  50                 	db	80	;'P'
   173  007E21  3D                 	db	61	;'='
   174  007E22  22                 	db	34
   175  007E23  25                 	db	37
   176  007E24  73                 	db	115	;'s'
   177  007E25  22                 	db	34
   178  007E26  2C                 	db	44
   179  007E27  22                 	db	34
   180  007E28  25                 	db	37
   181  007E29  73                 	db	115	;'s'
   182  007E2A  22                 	db	34
   183  007E2B  2C                 	db	44
   184  007E2C  31                 	db	49	;'1'
   185  007E2D  2C                 	db	44
   186  007E2E  25                 	db	37
   187  007E2F  73                 	db	115	;'s'
   188  007E30  0D                 	db	13
   189  007E31  0A                 	db	10
   190  007E32  00                 	db	0
   191  007E33  41                 	db	65	;'A'
   192  007E34  54                 	db	84	;'T'
   193  007E35  2B                 	db	43
   194  007E36  55                 	db	85	;'U'
   195  007E37  41                 	db	65	;'A'
   196  007E38  52                 	db	82	;'R'
   197  007E39  54                 	db	84	;'T'
   198  007E3A  3D                 	db	61	;'='
   199  007E3B  31                 	db	49	;'1'
   200  007E3C  31                 	db	49	;'1'
   201  007E3D  35                 	db	53	;'5'
   202  007E3E  32                 	db	50	;'2'
   203  007E3F  30                 	db	48	;'0'
   204  007E40  30                 	db	48	;'0'
   205  007E41  2C                 	db	44
   206  007E42  38                 	db	56	;'8'
   207  007E43  2C                 	db	44
   208  007E44  31                 	db	49	;'1'
   209  007E45  2C                 	db	44
   210  007E46  30                 	db	48	;'0'
   211  007E47  2C                 	db	44
   212  007E48  30                 	db	48	;'0'
   213  007E49  0D                 	db	13
   214  007E4A  0A                 	db	10
   215  007E4B  00                 	db	0
   216  007E4C  41                 	db	65	;'A'
   217  007E4D  54                 	db	84	;'T'
   218  007E4E  2B                 	db	43
   219  007E4F  55                 	db	85	;'U'
   220  007E50  41                 	db	65	;'A'
   221  007E51  52                 	db	82	;'R'
   222  007E52  54                 	db	84	;'T'
   223  007E53  3D                 	db	61	;'='
   224  007E54  39                 	db	57	;'9'
   225  007E55  36                 	db	54	;'6'
   226  007E56  30                 	db	48	;'0'
   227  007E57  30                 	db	48	;'0'
   228  007E58  2C                 	db	44
   229  007E59  38                 	db	56	;'8'
   230  007E5A  2C                 	db	44
   231  007E5B  31                 	db	49	;'1'
   232  007E5C  2C                 	db	44
   233  007E5D  30                 	db	48	;'0'
   234  007E5E  2C                 	db	44
   235  007E5F  30                 	db	48	;'0'
   236  007E60  0D                 	db	13
   237  007E61  0A                 	db	10
   238  007E62  00                 	db	0
   239  007E63                     STR_45:
   240  007E63  41                 	db	65	;'A'
   241  007E64  54                 	db	84	;'T'
   242  007E65  2B                 	db	43
   243  007E66  43                 	db	67	;'C'
   244  007E67  49                 	db	73	;'I'
   245  007E68  50                 	db	80	;'P'
   246  007E69  53                 	db	83	;'S'
   247  007E6A  45                 	db	69	;'E'
   248  007E6B  52                 	db	82	;'R'
   249  007E6C  56                 	db	86	;'V'
   250  007E6D  45                 	db	69	;'E'
   251  007E6E  52                 	db	82	;'R'
   252  007E6F  3D                 	db	61	;'='
   253  007E70  31                 	db	49	;'1'
   254  007E71  2C                 	db	44
   255  007E72  35                 	db	53	;'5'
   256  007E73  30                 	db	48	;'0'
   257  007E74  30                 	db	48	;'0'
   258  007E75  30                 	db	48	;'0'
   259  007E76  0D                 	db	13
   260  007E77  0A                 	db	10
   261  007E78  00                 	db	0
   262  007E79  41                 	db	65	;'A'
   263  007E7A  54                 	db	84	;'T'
   264  007E7B  2B                 	db	43
   265  007E7C  43                 	db	67	;'C'
   266  007E7D  57                 	db	87	;'W'
   267  007E7E  4A                 	db	74	;'J'
   268  007E7F  41                 	db	65	;'A'
   269  007E80  50                 	db	80	;'P'
   270  007E81  3D                 	db	61	;'='
   271  007E82  22                 	db	34
   272  007E83  25                 	db	37
   273  007E84  73                 	db	115	;'s'
   274  007E85  22                 	db	34
   275  007E86  2C                 	db	44
   276  007E87  22                 	db	34
   277  007E88  25                 	db	37
   278  007E89  73                 	db	115	;'s'
   279  007E8A  22                 	db	34
   280  007E8B  0D                 	db	13
   281  007E8C  0A                 	db	10
   282  007E8D  00                 	db	0
   283  007E8E  41                 	db	65	;'A'
   284  007E8F  54                 	db	84	;'T'
   285  007E90  2B                 	db	43
   286  007E91  43                 	db	67	;'C'
   287  007E92  49                 	db	73	;'I'
   288  007E93  50                 	db	80	;'P'
   289  007E94  53                 	db	83	;'S'
   290  007E95  54                 	db	84	;'T'
   291  007E96  41                 	db	65	;'A'
   292  007E97  52                 	db	82	;'R'
   293  007E98  54                 	db	84	;'T'
   294  007E99  3D                 	db	61	;'='
   295  007E9A  25                 	db	37
   296  007E9B  64                 	db	100	;'d'
   297  007E9C  2C                 	db	44
   298  007E9D  25                 	db	37
   299  007E9E  73                 	db	115	;'s'
   300  007E9F  0D                 	db	13
   301  007EA0  0A                 	db	10
   302  007EA1  00                 	db	0
   303  007EA2                     STR_1:
   304  007EA2  41                 	db	65	;'A'
   305  007EA3  54                 	db	84	;'T'
   306  007EA4  2B                 	db	43
   307  007EA5  43                 	db	67	;'C'
   308  007EA6  49                 	db	73	;'I'
   309  007EA7  50                 	db	80	;'P'
   310  007EA8  53                 	db	83	;'S'
   311  007EA9  45                 	db	69	;'E'
   312  007EAA  4E                 	db	78	;'N'
   313  007EAB  44                 	db	68	;'D'
   314  007EAC  3D                 	db	61	;'='
   315  007EAD  25                 	db	37
   316  007EAE  64                 	db	100	;'d'
   317  007EAF  2C                 	db	44
   318  007EB0  25                 	db	37
   319  007EB1  64                 	db	100	;'d'
   320  007EB2  0D                 	db	13
   321  007EB3  0A                 	db	10
   322  007EB4  00                 	db	0
   323  007EB5                     STR_65:
   324  007EB5  30                 	db	48	;'0'
   325  007EB6  31                 	db	49	;'1'
   326  007EB7  32                 	db	50	;'2'
   327  007EB8  33                 	db	51	;'3'
   328  007EB9  34                 	db	52	;'4'
   329  007EBA  35                 	db	53	;'5'
   330  007EBB  36                 	db	54	;'6'
   331  007EBC  37                 	db	55	;'7'
   332  007EBD  38                 	db	56	;'8'
   333  007EBE  39                 	db	57	;'9'
   334  007EBF  41                 	db	65	;'A'
   335  007EC0  42                 	db	66	;'B'
   336  007EC1  43                 	db	67	;'C'
   337  007EC2  44                 	db	68	;'D'
   338  007EC3  45                 	db	69	;'E'
   339  007EC4  46                 	db	70	;'F'
   340  007EC5  00                 	db	0
   341  007EC6                     STR_66:
   342  007EC6  30                 	db	48	;'0'
   343  007EC7  31                 	db	49	;'1'
   344  007EC8  32                 	db	50	;'2'
   345  007EC9  33                 	db	51	;'3'
   346  007ECA  34                 	db	52	;'4'
   347  007ECB  35                 	db	53	;'5'
   348  007ECC  36                 	db	54	;'6'
   349  007ECD  37                 	db	55	;'7'
   350  007ECE  38                 	db	56	;'8'
   351  007ECF  39                 	db	57	;'9'
   352  007ED0  61                 	db	97	;'a'
   353  007ED1  62                 	db	98	;'b'
   354  007ED2  63                 	db	99	;'c'
   355  007ED3  64                 	db	100	;'d'
   356  007ED4  65                 	db	101	;'e'
   357  007ED5  66                 	db	102	;'f'
   358  007ED6  00                 	db	0
   359  007ED7  41                 	db	65	;'A'
   360  007ED8  54                 	db	84	;'T'
   361  007ED9  2B                 	db	43
   362  007EDA  43                 	db	67	;'C'
   363  007EDB  49                 	db	73	;'I'
   364  007EDC  50                 	db	80	;'P'
   365  007EDD  53                 	db	83	;'S'
   366  007EDE  54                 	db	84	;'T'
   367  007EDF  41                 	db	65	;'A'
   368  007EE0  52                 	db	82	;'R'
   369  007EE1  54                 	db	84	;'T'
   370  007EE2  3D                 	db	61	;'='
   371  007EE3  25                 	db	37
   372  007EE4  73                 	db	115	;'s'
   373  007EE5  0D                 	db	13
   374  007EE6  0A                 	db	10
   375  007EE7  00                 	db	0
   376  007EE8                     STR_41:
   377  007EE8  41                 	db	65	;'A'
   378  007EE9  54                 	db	84	;'T'
   379  007EEA  2B                 	db	43
   380  007EEB  43                 	db	67	;'C'
   381  007EEC  49                 	db	73	;'I'
   382  007EED  50                 	db	80	;'P'
   383  007EEE  4D                 	db	77	;'M'
   384  007EEF  4F                 	db	79	;'O'
   385  007EF0  44                 	db	68	;'D'
   386  007EF1  45                 	db	69	;'E'
   387  007EF2  3D                 	db	61	;'='
   388  007EF3  30                 	db	48	;'0'
   389  007EF4  0D                 	db	13
   390  007EF5  0A                 	db	10
   391  007EF6  00                 	db	0
   392  007EF7  41                 	db	65	;'A'
   393  007EF8  54                 	db	84	;'T'
   394  007EF9  2B                 	db	43
   395  007EFA  43                 	db	67	;'C'
   396  007EFB  49                 	db	73	;'I'
   397  007EFC  50                 	db	80	;'P'
   398  007EFD  4D                 	db	77	;'M'
   399  007EFE  4F                 	db	79	;'O'
   400  007EFF  44                 	db	68	;'D'
   401  007F00  45                 	db	69	;'E'
   402  007F01  3D                 	db	61	;'='
   403  007F02  31                 	db	49	;'1'
   404  007F03  0D                 	db	13
   405  007F04  0A                 	db	10
   406  007F05  00                 	db	0
   407  007F06                     STR_22:
   408  007F06  22                 	db	34
   409  007F07  25                 	db	37
   410  007F08  73                 	db	115	;'s'
   411  007F09  22                 	db	34
   412  007F0A  2C                 	db	44
   413  007F0B  22                 	db	34
   414  007F0C  25                 	db	37
   415  007F0D  73                 	db	115	;'s'
   416  007F0E  22                 	db	34
   417  007F0F  2C                 	db	44
   418  007F10  25                 	db	37
   419  007F11  73                 	db	115	;'s'
   420  007F12  0D                 	db	13
   421  007F13  0A                 	db	10
   422  007F14  00                 	db	0
   423  007F15  30                 	db	48	;'0'
   424  007F16  2C                 	db	44
   425  007F17  43                 	db	67	;'C'
   426  007F18  4F                 	db	79	;'O'
   427  007F19  4E                 	db	78	;'N'
   428  007F1A  4E                 	db	78	;'N'
   429  007F1B  45                 	db	69	;'E'
   430  007F1C  43                 	db	67	;'C'
   431  007F1D  54                 	db	84	;'T'
   432  007F1E  20                 	db	32
   433  007F1F  46                 	db	70	;'F'
   434  007F20  41                 	db	65	;'A'
   435  007F21  49                 	db	73	;'I'
   436  007F22  4C                 	db	76	;'L'
   437  007F23  00                 	db	0
   438  007F24                     STR_39:
   439  007F24  41                 	db	65	;'A'
   440  007F25  54                 	db	84	;'T'
   441  007F26  2B                 	db	43
   442  007F27  43                 	db	67	;'C'
   443  007F28  49                 	db	73	;'I'
   444  007F29  50                 	db	80	;'P'
   445  007F2A  4D                 	db	77	;'M'
   446  007F2B  55                 	db	85	;'U'
   447  007F2C  58                 	db	88	;'X'
   448  007F2D  3D                 	db	61	;'='
   449  007F2E  30                 	db	48	;'0'
   450  007F2F  0D                 	db	13
   451  007F30  0A                 	db	10
   452  007F31  00                 	db	0
   453  007F32                     STR_9:
   454  007F32  41                 	db	65	;'A'
   455  007F33  54                 	db	84	;'T'
   456  007F34  2B                 	db	43
   457  007F35  43                 	db	67	;'C'
   458  007F36  57                 	db	87	;'W'
   459  007F37  4D                 	db	77	;'M'
   460  007F38  4F                 	db	79	;'O'
   461  007F39  44                 	db	68	;'D'
   462  007F3A  45                 	db	69	;'E'
   463  007F3B  3D                 	db	61	;'='
   464  007F3C  31                 	db	49	;'1'
   465  007F3D  0D                 	db	13
   466  007F3E  0A                 	db	10
   467  007F3F  00                 	db	0
   468  007F40                     STR_43:
   469  007F40  41                 	db	65	;'A'
   470  007F41  54                 	db	84	;'T'
   471  007F42  2B                 	db	43
   472  007F43  43                 	db	67	;'C'
   473  007F44  49                 	db	73	;'I'
   474  007F45  50                 	db	80	;'P'
   475  007F46  4D                 	db	77	;'M'
   476  007F47  55                 	db	85	;'U'
   477  007F48  58                 	db	88	;'X'
   478  007F49  3D                 	db	61	;'='
   479  007F4A  31                 	db	49	;'1'
   480  007F4B  0D                 	db	13
   481  007F4C  0A                 	db	10
   482  007F4D  00                 	db	0
   483  007F4E                     STR_12:
   484  007F4E  41                 	db	65	;'A'
   485  007F4F  54                 	db	84	;'T'
   486  007F50  2B                 	db	43
   487  007F51  43                 	db	67	;'C'
   488  007F52  57                 	db	87	;'W'
   489  007F53  4D                 	db	77	;'M'
   490  007F54  4F                 	db	79	;'O'
   491  007F55  44                 	db	68	;'D'
   492  007F56  45                 	db	69	;'E'
   493  007F57  3D                 	db	61	;'='
   494  007F58  32                 	db	50	;'2'
   495  007F59  0D                 	db	13
   496  007F5A  0A                 	db	10
   497  007F5B  00                 	db	0
   498  007F5C                     STR_15:
   499  007F5C  41                 	db	65	;'A'
   500  007F5D  54                 	db	84	;'T'
   501  007F5E  2B                 	db	43
   502  007F5F  43                 	db	67	;'C'
   503  007F60  57                 	db	87	;'W'
   504  007F61  4D                 	db	77	;'M'
   505  007F62  4F                 	db	79	;'O'
   506  007F63  44                 	db	68	;'D'
   507  007F64  45                 	db	69	;'E'
   508  007F65  3D                 	db	61	;'='
   509  007F66  33                 	db	51	;'3'
   510  007F67  0D                 	db	13
   511  007F68  0A                 	db	10
   512  007F69  00                 	db	0
   513  007F6A                     STR_30:
   514  007F6A  41                 	db	65	;'A'
   515  007F6B  54                 	db	84	;'T'
   516  007F6C  2B                 	db	43
   517  007F6D  43                 	db	67	;'C'
   518  007F6E  57                 	db	87	;'W'
   519  007F6F  4D                 	db	77	;'M'
   520  007F70  4F                 	db	79	;'O'
   521  007F71  44                 	db	68	;'D'
   522  007F72  45                 	db	69	;'E'
   523  007F73  3F                 	db	63	;'?'
   524  007F74  0D                 	db	13
   525  007F75  0A                 	db	10
   526  007F76  00                 	db	0
   527  007F77  31                 	db	49	;'1'
   528  007F78  39                 	db	57	;'9'
   529  007F79  32                 	db	50	;'2'
   530  007F7A  2E                 	db	46
   531  007F7B  31                 	db	49	;'1'
   532  007F7C  36                 	db	54	;'6'
   533  007F7D  38                 	db	56	;'8'
   534  007F7E  2E                 	db	46
   535  007F7F  34                 	db	52	;'4'
   536  007F80  2E                 	db	46
   537  007F81  31                 	db	49	;'1'
   538  007F82  00                 	db	0
   539  007F83  41                 	db	65	;'A'
   540  007F84  54                 	db	84	;'T'
   541  007F85  2B                 	db	43
   542  007F86  43                 	db	67	;'C'
   543  007F87  57                 	db	87	;'W'
   544  007F88  51                 	db	81	;'Q'
   545  007F89  41                 	db	65	;'A'
   546  007F8A  50                 	db	80	;'P'
   547  007F8B  0D                 	db	13
   548  007F8C  0A                 	db	10
   549  007F8D  00                 	db	0
   550  007F8E                     STR_37:
   551  007F8E  7A                 	db	122	;'z'
   552  007F8F  78                 	db	120	;'x'
   553  007F90  34                 	db	52	;'4'
   554  007F91  35                 	db	53	;'5'
   555  007F92  32                 	db	50	;'2'
   556  007F93  32                 	db	50	;'2'
   557  007F94  33                 	db	51	;'3'
   558  007F95  33                 	db	51	;'3'
   559  007F96  31                 	db	49	;'1'
   560  007F97  00                 	db	0
   561  007F98  2B                 	db	43
   562  007F99  43                 	db	67	;'C'
   563  007F9A  57                 	db	87	;'W'
   564  007F9B  4D                 	db	77	;'M'
   565  007F9C  4F                 	db	79	;'O'
   566  007F9D  44                 	db	68	;'D'
   567  007F9E  45                 	db	69	;'E'
   568  007F9F  3A                 	db	58	;':'
   569  007FA0  31                 	db	49	;'1'
   570  007FA1  00                 	db	0
   571  007FA2                     STR_31:
   572  007FA2  2B                 	db	43
   573  007FA3  43                 	db	67	;'C'
   574  007FA4  57                 	db	87	;'W'
   575  007FA5  4D                 	db	77	;'M'
   576  007FA6  4F                 	db	79	;'O'
   577  007FA7  44                 	db	68	;'D'
   578  007FA8  45                 	db	69	;'E'
   579  007FA9  3A                 	db	58	;':'
   580  007FAA  32                 	db	50	;'2'
   581  007FAB  00                 	db	0
   582  007FAC                     STR_52:
   583  007FAC  30                 	db	48	;'0'
   584  007FAD  2C                 	db	44
   585  007FAE  43                 	db	67	;'C'
   586  007FAF  4F                 	db	79	;'O'
   587  007FB0  4E                 	db	78	;'N'
   588  007FB1  4E                 	db	78	;'N'
   589  007FB2  45                 	db	69	;'E'
   590  007FB3  43                 	db	67	;'C'
   591  007FB4  54                 	db	84	;'T'
   592  007FB5  00                 	db	0
   593  007FB6                     STR_11:
   594  007FB6  6E                 	db	110	;'n'
   595  007FB7  6F                 	db	111	;'o'
   596  007FB8  20                 	db	32
   597  007FB9  63                 	db	99	;'c'
   598  007FBA  68                 	db	104	;'h'
   599  007FBB  61                 	db	97	;'a'
   600  007FBC  6E                 	db	110	;'n'
   601  007FBD  67                 	db	103	;'g'
   602  007FBE  65                 	db	101	;'e'
   603  007FBF  00                 	db	0
   604  007FC0                     STR_6:
   605  007FC0  41                 	db	65	;'A'
   606  007FC1  54                 	db	84	;'T'
   607  007FC2  2B                 	db	43
   608  007FC3  52                 	db	82	;'R'
   609  007FC4  53                 	db	83	;'S'
   610  007FC5  54                 	db	84	;'T'
   611  007FC6  0D                 	db	13
   612  007FC7  0A                 	db	10
   613  007FC8  00                 	db	0
   614  007FC9                     STR_3:
   615  007FC9  53                 	db	83	;'S'
   616  007FCA  45                 	db	69	;'E'
   617  007FCB  4E                 	db	78	;'N'
   618  007FCC  44                 	db	68	;'D'
   619  007FCD  20                 	db	32
   620  007FCE  4F                 	db	79	;'O'
   621  007FCF  4B                 	db	75	;'K'
   622  007FD0  00                 	db	0
   623  007FD1                     STR_64:
   624  007FD1  28                 	db	40
   625  007FD2  6E                 	db	110	;'n'
   626  007FD3  75                 	db	117	;'u'
   627  007FD4  6C                 	db	108	;'l'
   628  007FD5  6C                 	db	108	;'l'
   629  007FD6  29                 	db	41
   630  007FD7  00                 	db	0
   631  007FD8                     STR_8:
   632  007FD8  72                 	db	114	;'r'
   633  007FD9  65                 	db	101	;'e'
   634  007FDA  61                 	db	97	;'a'
   635  007FDB  64                 	db	100	;'d'
   636  007FDC  79                 	db	121	;'y'
   637  007FDD  00                 	db	0
   638  007FDE                     STR_4:
   639  007FDE  41                 	db	65	;'A'
   640  007FDF  54                 	db	84	;'T'
   641  007FE0  0D                 	db	13
   642  007FE1  0A                 	db	10
   643  007FE2  00                 	db	0
   644  007FE3  35                 	db	53	;'5'
   645  007FE4  30                 	db	48	;'0'
   646  007FE5  30                 	db	48	;'0'
   647  007FE6  30                 	db	48	;'0'
   648  007FE7  00                 	db	0
   649  007FE8  4B                 	db	75	;'K'
   650  007FE9  65                 	db	101	;'e'
   651  007FEA  6E                 	db	110	;'n'
   652  007FEB  67                 	db	103	;'g'
   653  007FEC  00                 	db	0
   654  007FED                     STR_36:
   655  007FED  4B                 	db	75	;'K'
   656  007FEE  45                 	db	69	;'E'
   657  007FEF  4E                 	db	78	;'N'
   658  007FF0  00                 	db	0
   659  007FF1  54                 	db	84	;'T'
   660  007FF2  43                 	db	67	;'C'
   661  007FF3  50                 	db	80	;'P'
   662  007FF4  00                 	db	0
   663  007FF5  55                 	db	85	;'U'
   664  007FF6  44                 	db	68	;'D'
   665  007FF7  50                 	db	80	;'P'
   666  007FF8  00                 	db	0
   667  007FF9                     STR_2:
   668  007FF9  3E                 	db	62	;'>'
   669  007FFA  20                 	db	32
   670  007FFB  00                 	db	0
   671  007FFC                     STR_38:
   672  007FFC  34                 	db	52	;'4'
   673  007FFD  00                 	db	0
   674  0000                     
   675                           ; #config settings
   676  007FFE  00                 	db	0	; dummy byte at the end
   677  0000                     
   678                           	psect	cinit
   679  002978                     __pcinit:
   680                           	opt stack 0
   681  002978                     start_initialization:
   682                           	opt stack 0
   683  002978                     __initialization:
   684                           	opt stack 0
   685                           
   686                           ; Clear objects allocated to BANK2 (152 bytes)
   687  002978  EE02  F000         	lfsr	0,__pbssBANK2
   688  00297C  0E98               	movlw	152
   689  00297E                     clear_0:
   690  00297E  6AEE               	clrf	postinc0,c
   691  002980  06E8               	decf	wreg,f,c
   692  002982  E1FD               	bnz	clear_0
   693                           
   694                           ; Clear objects allocated to BANK1 (220 bytes)
   695  002984  EE01  F000         	lfsr	0,__pbssBANK1
   696  002988  0EDC               	movlw	220
   697  00298A                     clear_1:
   698  00298A  6AEE               	clrf	postinc0,c
   699  00298C  06E8               	decf	wreg,f,c
   700  00298E  E1FD               	bnz	clear_1
   701                           
   702                           ; Clear objects allocated to BANK0 (6 bytes)
   703  002990  0100               	movlb	0
   704  002992  6BFF               	clrf	(__pbssBANK0+5)& (0+255),b
   705  002994  6BFE               	clrf	(__pbssBANK0+4)& (0+255),b
   706  002996  6BFD               	clrf	(__pbssBANK0+3)& (0+255),b
   707  002998  6BFC               	clrf	(__pbssBANK0+2)& (0+255),b
   708  00299A  6BFB               	clrf	(__pbssBANK0+1)& (0+255),b
   709  00299C  6BFA               	clrf	__pbssBANK0& (0+255),b
   710                           
   711                           ; Clear objects allocated to COMRAM (18 bytes)
   712  00299E  EE00  F05C         	lfsr	0,__pbssCOMRAM
   713  0029A2  0E12               	movlw	18
   714  0029A4                     clear_2:
   715  0029A4  6AEE               	clrf	postinc0,c
   716  0029A6  06E8               	decf	wreg,f,c
   717  0029A8  E1FD               	bnz	clear_2
   718  0029AA                     end_of_initialization:
   719                           	opt stack 0
   720  0029AA                     __end_of__initialization:
   721                           	opt stack 0
   722  0029AA  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   723  0029AC  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   724  0029AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   725  0029B0  6EF8               	movwf	tblptru,c
   726  0029B2  0100               	movlb	0
   727  0029B4  EF5A  F00F         	goto	_main	;jump to C main() function
   728                           tblptru	equ	0xFF8
   729                           postinc0	equ	0xFEE
   730                           wreg	equ	0xFE8
   731                           
   732                           	psect	bssCOMRAM
   733  00005C                     __pbssCOMRAM:
   734                           	opt stack 0
   735  00005C                     KalmanFilter_2@x_last_2:
   736                           	opt stack 0
   737  00005C                     	ds	3
   738  00005F                     KalmanFilter_1@x_last_1:
   739                           	opt stack 0
   740  00005F                     	ds	3
   741  000062                     KalmanFilter_0@x_last_0:
   742                           	opt stack 0
   743  000062                     	ds	3
   744  000065                     _write:
   745                           	opt stack 0
   746  000065                     	ds	1
   747  000066                     _AD_L:
   748                           	opt stack 0
   749  000066                     	ds	1
   750  000067                     _time:
   751                           	opt stack 0
   752  000067                     	ds	1
   753  000068                     _count:
   754                           	opt stack 0
   755  000068                     	ds	1
   756  000069                     _bounce_time:
   757                           	opt stack 0
   758  000069                     	ds	1
   759  00006A                     _L_max:
   760                           	opt stack 0
   761  00006A                     	ds	1
   762  00006B                     _H_max:
   763                           	opt stack 0
   764  00006B                     	ds	1
   765  00006C                     _L:
   766                           	opt stack 0
   767  00006C                     	ds	1
   768  00006D                     _H:
   769                           	opt stack 0
   770  00006D                     	ds	1
   771                           tblptru	equ	0xFF8
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           
   775                           	psect	bssBANK0
   776  0000FA                     __pbssBANK0:
   777                           	opt stack 0
   778  0000FA                     KalmanFilter_4@x_last_4:
   779                           	opt stack 0
   780  0000FA                     	ds	3
   781  0000FD                     KalmanFilter_3@x_last_3:
   782                           	opt stack 0
   783  0000FD                     	ds	3
   784                           tblptru	equ	0xFF8
   785                           postinc0	equ	0xFEE
   786                           wreg	equ	0xFE8
   787                           
   788                           	psect	bssBANK1
   789  000100                     __pbssBANK1:
   790                           	opt stack 0
   791  000100                     _str1_1esp8266:
   792                           	opt stack 0
   793  000100                     	ds	51
   794  000133                     _strPc1_1_Fram_Record:
   795                           	opt stack 0
   796  000133                     	ds	51
   797  000166                     ESP8266_SendString@F4007:
   798                           	opt stack 0
   799  000166                     	ds	20
   800  00017A                     KalmanFilter_9@p_last_9:
   801                           	opt stack 0
   802  00017A                     	ds	3
   803  00017D                     KalmanFilter_9@x_last_9:
   804                           	opt stack 0
   805  00017D                     	ds	3
   806  000180                     KalmanFilter_8@p_last_8:
   807                           	opt stack 0
   808  000180                     	ds	3
   809  000183                     KalmanFilter_8@x_last_8:
   810                           	opt stack 0
   811  000183                     	ds	3
   812  000186                     KalmanFilter_7@p_last_7:
   813                           	opt stack 0
   814  000186                     	ds	3
   815  000189                     KalmanFilter_7@x_last_7:
   816                           	opt stack 0
   817  000189                     	ds	3
   818  00018C                     KalmanFilter_6@p_last_6:
   819                           	opt stack 0
   820  00018C                     	ds	3
   821  00018F                     KalmanFilter_6@x_last_6:
   822                           	opt stack 0
   823  00018F                     	ds	3
   824  000192                     KalmanFilter_5@p_last_5:
   825                           	opt stack 0
   826  000192                     	ds	3
   827  000195                     KalmanFilter_5@x_last_5:
   828                           	opt stack 0
   829  000195                     	ds	3
   830  000198                     KalmanFilter_4@p_last_4:
   831                           	opt stack 0
   832  000198                     	ds	3
   833  00019B                     KalmanFilter_3@p_last_3:
   834                           	opt stack 0
   835  00019B                     	ds	3
   836  00019E                     KalmanFilter_2@p_last_2:
   837                           	opt stack 0
   838  00019E                     	ds	3
   839  0001A1                     KalmanFilter_1@p_last_1:
   840                           	opt stack 0
   841  0001A1                     	ds	3
   842  0001A4                     KalmanFilter_0@p_last_0:
   843                           	opt stack 0
   844  0001A4                     	ds	3
   845  0001A7                     _AD_H:
   846                           	opt stack 0
   847  0001A7                     	ds	1
   848  0001A8                     _strEsp8266_Fram_Record:
   849                           	opt stack 0
   850  0001A8                     	ds	52
   851                           tblptru	equ	0xFF8
   852                           postinc0	equ	0xFEE
   853                           wreg	equ	0xFE8
   854                           
   855                           	psect	bssBANK2
   856  000200                     __pbssBANK2:
   857                           	opt stack 0
   858  000200                     ESP8266_Link_Server@F4045:
   859                           	opt stack 0
   860  000200                     	ds	100
   861  000264                     _strPc_Fram_Record:
   862                           	opt stack 0
   863  000264                     	ds	52
   864                           tblptru	equ	0xFF8
   865                           postinc0	equ	0xFEE
   866                           wreg	equ	0xFE8
   867                           
   868                           	psect	cstackBANK1
   869  0001DC                     __pcstackBANK1:
   870                           	opt stack 0
   871  0001DC                     main@tem:
   872                           	opt stack 0
   873                           
   874                           ; 11 bytes @ 0x0
   875  0001DC                     	ds	11
   876  0001E7                     main@AD_total:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0xB
   880  0001E7                     	ds	2
   881                           tblptru	equ	0xFF8
   882                           postinc0	equ	0xFEE
   883                           wreg	equ	0xFE8
   884                           
   885                           	psect	cstackBANK0
   886  000080                     __pcstackBANK0:
   887                           	opt stack 0
   888  000080                     ??___fttol:
   889  000080                     ESP8266_SendString@tem:
   890                           	opt stack 0
   891  000080                     ESP8266_BuildAP@cCmd:
   892                           	opt stack 0
   893                           
   894                           ; 120 bytes @ 0x0
   895  000080                     	ds	5
   896  000085                     ___fttol@sign1:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x5
   900  000085                     	ds	1
   901  000086                     ___fttol@lval:
   902                           	opt stack 0
   903                           
   904                           ; 4 bytes @ 0x6
   905  000086                     	ds	4
   906  00008A                     ___fttol@exp1:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0xA
   910  00008A                     	ds	1
   911  00008B                     ??_translate_flex:
   912                           
   913                           ; 1 bytes @ 0xB
   914  00008B                     	ds	1
   915  00008C                     translate_flex@temp:
   916                           	opt stack 0
   917  00008C                     ESP8266_SendString@cStr:
   918                           	opt stack 0
   919                           
   920                           ; 20 bytes @ 0xC
   921  00008C                     	ds	1
   922  00008D                     translate_flex@Value:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0xD
   926  00008D                     	ds	19
   927  0000A0                     ESP8266_SendString@bRet:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x20
   931  0000A0                     	ds	2
   932  0000A2                     ESP8266_SendString@ucId:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x22
   936  0000A2                     	ds	86
   937  0000F8                     ??_main:
   938                           
   939                           ; 1 bytes @ 0x78
   940  0000F8                     	ds	2
   941                           tblptru	equ	0xFF8
   942                           postinc0	equ	0xFEE
   943                           wreg	equ	0xFE8
   944                           
   945                           	psect	cstackCOMRAM
   946  000001                     __pcstackCOMRAM:
   947                           	opt stack 0
   948  000001                     ??_UART:
   949  000001                     
   950                           ; 1 bytes @ 0x0
   951  000001                     	ds	16
   952  000011                     UART@ch:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x10
   956  000011                     	ds	1
   957  000012                     ??_Delay10KTCYx:
   958  000012                     ??_isdigit:
   959  000012                     ?_strlen:
   960                           	opt stack 0
   961  000012                     ?_strchr:
   962                           	opt stack 0
   963  000012                     ?___wmul:
   964                           	opt stack 0
   965  000012                     ?___awdiv:
   966                           	opt stack 0
   967  000012                     ?___awmod:
   968                           	opt stack 0
   969  000012                     ?___lwdiv:
   970                           	opt stack 0
   971  000012                     ?___ftpack:
   972                           	opt stack 0
   973  000012                     ?___ftneg:
   974                           	opt stack 0
   975  000012                     ESP8266_Uart@cmd:
   976                           	opt stack 0
   977  000012                     ___wmul@multiplier:
   978                           	opt stack 0
   979  000012                     ___awdiv@dividend:
   980                           	opt stack 0
   981  000012                     ___awmod@dividend:
   982                           	opt stack 0
   983  000012                     ___lwdiv@dividend:
   984                           	opt stack 0
   985  000012                     strcpy@to:
   986                           	opt stack 0
   987  000012                     strchr@ptr:
   988                           	opt stack 0
   989  000012                     strlen@s:
   990                           	opt stack 0
   991  000012                     ___ftpack@arg:
   992                           	opt stack 0
   993  000012                     ___ftneg@f1:
   994                           	opt stack 0
   995                           
   996                           ; 3 bytes @ 0x11
   997  000012                     	ds	1
   998  000013                     Delay10KTCYx@unit:
   999                           	opt stack 0
  1000  000013                     _isdigit$1762:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x12
  1004  000013                     	ds	1
  1005  000014                     ??_strlen:
  1006  000014                     ??_ESP8266_Uart:
  1007  000014                     isdigit@c:
  1008                           	opt stack 0
  1009  000014                     delay_ms@ms:
  1010                           	opt stack 0
  1011  000014                     ___wmul@multiplicand:
  1012                           	opt stack 0
  1013  000014                     ___awdiv@divisor:
  1014                           	opt stack 0
  1015  000014                     ___awmod@divisor:
  1016                           	opt stack 0
  1017  000014                     ___lwdiv@divisor:
  1018                           	opt stack 0
  1019  000014                     strcpy@from:
  1020                           	opt stack 0
  1021  000014                     strchr@chr:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x13
  1025  000014                     	ds	1
  1026  000015                     ___ftpack@exp:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x14
  1030  000015                     	ds	1
  1031  000016                     ___awdiv@counter:
  1032                           	opt stack 0
  1033  000016                     ___awmod@counter:
  1034                           	opt stack 0
  1035  000016                     ___ftpack@sign:
  1036                           	opt stack 0
  1037  000016                     ___lwdiv@counter:
  1038                           	opt stack 0
  1039  000016                     ESP8266_Uart@index:
  1040                           	opt stack 0
  1041  000016                     ___wmul@product:
  1042                           	opt stack 0
  1043  000016                     strcpy@cp:
  1044                           	opt stack 0
  1045  000016                     strlen@cp:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x15
  1049  000016                     	ds	1
  1050  000017                     ??___ftpack:
  1051  000017                     ___awdiv@sign:
  1052                           	opt stack 0
  1053  000017                     ___awmod@sign:
  1054                           	opt stack 0
  1055  000017                     ___lwdiv@quotient:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x16
  1059  000017                     	ds	1
  1060  000018                     ?_strncmp:
  1061                           	opt stack 0
  1062  000018                     ___awdiv@quotient:
  1063                           	opt stack 0
  1064  000018                     strncmp@s1:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x17
  1068  000018                     	ds	1
  1069  000019                     ?___lwmod:
  1070                           	opt stack 0
  1071  000019                     ___lwmod@dividend:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x18
  1075  000019                     	ds	1
  1076  00001A                     ?___ftadd:
  1077                           	opt stack 0
  1078  00001A                     ?___lwtoft:
  1079                           	opt stack 0
  1080  00001A                     ___lwtoft@c:
  1081                           	opt stack 0
  1082  00001A                     strncmp@s2:
  1083                           	opt stack 0
  1084  00001A                     ___ftadd@f1:
  1085                           	opt stack 0
  1086                           
  1087                           ; 3 bytes @ 0x19
  1088  00001A                     	ds	1
  1089  00001B                     ___lwmod@divisor:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x1A
  1093  00001B                     	ds	1
  1094  00001C                     strncmp@len:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x1B
  1098  00001C                     	ds	1
  1099  00001D                     ___lwmod@counter:
  1100                           	opt stack 0
  1101  00001D                     ___ftadd@f2:
  1102                           	opt stack 0
  1103                           
  1104                           ; 3 bytes @ 0x1C
  1105  00001D                     	ds	1
  1106  00001E                     ??_strncmp:
  1107  00001E                     ?_sprintf:
  1108                           	opt stack 0
  1109  00001E                     sprintf@sp:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x1D
  1113  00001E                     	ds	2
  1114  000020                     ??___ftadd:
  1115  000020                     sprintf@f:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x1F
  1119  000020                     	ds	1
  1120  000021                     ?_strstr:
  1121                           	opt stack 0
  1122  000021                     strstr@s1:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x20
  1126  000021                     	ds	2
  1127  000023                     ___ftadd@sign:
  1128                           	opt stack 0
  1129  000023                     strstr@s2:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x22
  1133  000023                     	ds	1
  1134  000024                     ___ftadd@exp2:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x23
  1138  000024                     	ds	1
  1139  000025                     ___ftadd@exp1:
  1140                           	opt stack 0
  1141  000025                     ESP8266_Cmd@cmd:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x24
  1145  000025                     	ds	1
  1146  000026                     ?___ftdiv:
  1147                           	opt stack 0
  1148  000026                     ?___ftmul:
  1149                           	opt stack 0
  1150  000026                     ___ftdiv@f1:
  1151                           	opt stack 0
  1152  000026                     ___ftmul@f1:
  1153                           	opt stack 0
  1154                           
  1155                           ; 3 bytes @ 0x25
  1156  000026                     	ds	1
  1157  000027                     ESP8266_Cmd@reply1:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x26
  1161  000027                     	ds	1
  1162  000028                     ??_sprintf:
  1163                           
  1164                           ; 1 bytes @ 0x27
  1165  000028                     	ds	1
  1166  000029                     ESP8266_Cmd@reply2:
  1167                           	opt stack 0
  1168  000029                     ___ftdiv@f2:
  1169                           	opt stack 0
  1170  000029                     ___ftmul@f2:
  1171                           	opt stack 0
  1172                           
  1173                           ; 3 bytes @ 0x28
  1174  000029                     	ds	2
  1175  00002B                     ESP8266_Cmd@waittime:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x2A
  1179  00002B                     	ds	1
  1180  00002C                     ??___ftdiv:
  1181  00002C                     ??___ftmul:
  1182  00002C                     sprintf@idx:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x2B
  1186  00002C                     	ds	1
  1187  00002D                     _ESP8266_Cmd$1046:
  1188                           	opt stack 0
  1189  00002D                     _sprintf$1533:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x2C
  1193  00002D                     	ds	1
  1194  00002E                     ESP8266_Net_Mode_Choose@MODE:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x2D
  1198  00002E                     	ds	1
  1199  00002F                     ___ftdiv@cntr:
  1200                           	opt stack 0
  1201  00002F                     ___ftmul@exp:
  1202                           	opt stack 0
  1203  00002F                     _sprintf$1534:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x2E
  1207  00002F                     	ds	1
  1208  000030                     ___ftdiv@f3:
  1209                           	opt stack 0
  1210  000030                     ___ftmul@f3_as_product:
  1211                           	opt stack 0
  1212                           
  1213                           ; 3 bytes @ 0x2F
  1214  000030                     	ds	1
  1215  000031                     _sprintf$1540:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x30
  1219  000031                     	ds	2
  1220  000033                     ___ftdiv@exp:
  1221                           	opt stack 0
  1222  000033                     ___ftmul@cntr:
  1223                           	opt stack 0
  1224  000033                     sprintf@cp:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x32
  1228  000033                     	ds	1
  1229  000034                     ___ftdiv@sign:
  1230                           	opt stack 0
  1231  000034                     ___ftmul@sign:
  1232                           	opt stack 0
  1233                           
  1234                           ; 1 bytes @ 0x33
  1235  000034                     	ds	1
  1236  000035                     ?_KalmanFilter_0:
  1237                           	opt stack 0
  1238  000035                     ?_KalmanFilter_1:
  1239                           	opt stack 0
  1240  000035                     ?_KalmanFilter_2:
  1241                           	opt stack 0
  1242  000035                     ?_KalmanFilter_3:
  1243                           	opt stack 0
  1244  000035                     ?_KalmanFilter_4:
  1245                           	opt stack 0
  1246  000035                     ?_KalmanFilter_5:
  1247                           	opt stack 0
  1248  000035                     ?_KalmanFilter_6:
  1249                           	opt stack 0
  1250  000035                     ?_KalmanFilter_7:
  1251                           	opt stack 0
  1252  000035                     ?_KalmanFilter_8:
  1253                           	opt stack 0
  1254  000035                     ?_KalmanFilter_9:
  1255                           	opt stack 0
  1256  000035                     sprintf@len:
  1257                           	opt stack 0
  1258  000035                     KalmanFilter_0@ResrcData_0:
  1259                           	opt stack 0
  1260  000035                     KalmanFilter_1@ResrcData_1:
  1261                           	opt stack 0
  1262  000035                     KalmanFilter_2@ResrcData_2:
  1263                           	opt stack 0
  1264  000035                     KalmanFilter_3@ResrcData_3:
  1265                           	opt stack 0
  1266  000035                     KalmanFilter_4@ResrcData_4:
  1267                           	opt stack 0
  1268  000035                     KalmanFilter_5@ResrcData_5:
  1269                           	opt stack 0
  1270  000035                     KalmanFilter_6@ResrcData_6:
  1271                           	opt stack 0
  1272  000035                     KalmanFilter_7@ResrcData_7:
  1273                           	opt stack 0
  1274  000035                     KalmanFilter_8@ResrcData_8:
  1275                           	opt stack 0
  1276  000035                     KalmanFilter_9@ResrcData_9:
  1277                           	opt stack 0
  1278                           
  1279                           ; 3 bytes @ 0x34
  1280  000035                     	ds	2
  1281  000037                     sprintf@ap:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x36
  1285  000037                     	ds	1
  1286  000038                     KalmanFilter_0@ProcessNiose_Q_0:
  1287                           	opt stack 0
  1288  000038                     KalmanFilter_1@ProcessNiose_Q_1:
  1289                           	opt stack 0
  1290  000038                     KalmanFilter_2@ProcessNiose_Q_2:
  1291                           	opt stack 0
  1292  000038                     KalmanFilter_3@ProcessNiose_Q_3:
  1293                           	opt stack 0
  1294  000038                     KalmanFilter_4@ProcessNiose_Q_4:
  1295                           	opt stack 0
  1296  000038                     KalmanFilter_5@ProcessNiose_Q_5:
  1297                           	opt stack 0
  1298  000038                     KalmanFilter_6@ProcessNiose_Q_6:
  1299                           	opt stack 0
  1300  000038                     KalmanFilter_7@ProcessNiose_Q_7:
  1301                           	opt stack 0
  1302  000038                     KalmanFilter_8@ProcessNiose_Q_8:
  1303                           	opt stack 0
  1304  000038                     KalmanFilter_9@ProcessNiose_Q_9:
  1305                           	opt stack 0
  1306                           
  1307                           ; 3 bytes @ 0x37
  1308  000038                     	ds	1
  1309  000039                     sprintf@val:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x38
  1313  000039                     	ds	2
  1314  00003B                     sprintf@prec:
  1315                           	opt stack 0
  1316  00003B                     KalmanFilter_0@MeasureNoise_R_0:
  1317                           	opt stack 0
  1318  00003B                     KalmanFilter_1@MeasureNoise_R_1:
  1319                           	opt stack 0
  1320  00003B                     KalmanFilter_2@MeasureNoise_R_2:
  1321                           	opt stack 0
  1322  00003B                     KalmanFilter_3@MeasureNoise_R_3:
  1323                           	opt stack 0
  1324  00003B                     KalmanFilter_4@MeasureNoise_R_4:
  1325                           	opt stack 0
  1326  00003B                     KalmanFilter_5@MeasureNoise_R_5:
  1327                           	opt stack 0
  1328  00003B                     KalmanFilter_6@MeasureNoise_R_6:
  1329                           	opt stack 0
  1330  00003B                     KalmanFilter_7@MeasureNoise_R_7:
  1331                           	opt stack 0
  1332  00003B                     KalmanFilter_8@MeasureNoise_R_8:
  1333                           	opt stack 0
  1334  00003B                     KalmanFilter_9@MeasureNoise_R_9:
  1335                           	opt stack 0
  1336                           
  1337                           ; 3 bytes @ 0x3A
  1338  00003B                     	ds	1
  1339  00003C                     sprintf@width:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x3B
  1343  00003C                     	ds	2
  1344  00003E                     sprintf@c:
  1345                           	opt stack 0
  1346  00003E                     KalmanFilter_0@R:
  1347                           	opt stack 0
  1348  00003E                     KalmanFilter_1@R:
  1349                           	opt stack 0
  1350  00003E                     KalmanFilter_2@R:
  1351                           	opt stack 0
  1352  00003E                     KalmanFilter_3@R:
  1353                           	opt stack 0
  1354  00003E                     KalmanFilter_4@R:
  1355                           	opt stack 0
  1356  00003E                     KalmanFilter_5@R:
  1357                           	opt stack 0
  1358  00003E                     KalmanFilter_6@R:
  1359                           	opt stack 0
  1360  00003E                     KalmanFilter_7@R:
  1361                           	opt stack 0
  1362  00003E                     KalmanFilter_8@R:
  1363                           	opt stack 0
  1364  00003E                     KalmanFilter_9@R:
  1365                           	opt stack 0
  1366                           
  1367                           ; 3 bytes @ 0x3D
  1368  00003E                     	ds	1
  1369  00003F                     sprintf@flag:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x3E
  1373  00003F                     	ds	2
  1374  000041                     ESP8266_SendString@pStr:
  1375                           	opt stack 0
  1376  000041                     ESP8266_BuildAP@pSSID:
  1377                           	opt stack 0
  1378  000041                     KalmanFilter_0@Q:
  1379                           	opt stack 0
  1380  000041                     KalmanFilter_1@Q:
  1381                           	opt stack 0
  1382  000041                     KalmanFilter_2@Q:
  1383                           	opt stack 0
  1384  000041                     KalmanFilter_3@Q:
  1385                           	opt stack 0
  1386  000041                     KalmanFilter_4@Q:
  1387                           	opt stack 0
  1388  000041                     KalmanFilter_5@Q:
  1389                           	opt stack 0
  1390  000041                     KalmanFilter_6@Q:
  1391                           	opt stack 0
  1392  000041                     KalmanFilter_7@Q:
  1393                           	opt stack 0
  1394  000041                     KalmanFilter_8@Q:
  1395                           	opt stack 0
  1396  000041                     KalmanFilter_9@Q:
  1397                           	opt stack 0
  1398                           
  1399                           ; 3 bytes @ 0x40
  1400  000041                     	ds	2
  1401  000043                     ESP8266_SendString@ulStrLength:
  1402                           	opt stack 0
  1403  000043                     ESP8266_BuildAP@pPassWord:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x42
  1407  000043                     	ds	1
  1408  000044                     KalmanFilter_0@p_now:
  1409                           	opt stack 0
  1410  000044                     KalmanFilter_1@p_now:
  1411                           	opt stack 0
  1412  000044                     KalmanFilter_2@p_now:
  1413                           	opt stack 0
  1414  000044                     KalmanFilter_3@p_now:
  1415                           	opt stack 0
  1416  000044                     KalmanFilter_4@p_now:
  1417                           	opt stack 0
  1418  000044                     KalmanFilter_5@p_now:
  1419                           	opt stack 0
  1420  000044                     KalmanFilter_6@p_now:
  1421                           	opt stack 0
  1422  000044                     KalmanFilter_7@p_now:
  1423                           	opt stack 0
  1424  000044                     KalmanFilter_8@p_now:
  1425                           	opt stack 0
  1426  000044                     KalmanFilter_9@p_now:
  1427                           	opt stack 0
  1428                           
  1429                           ; 3 bytes @ 0x43
  1430  000044                     	ds	1
  1431  000045                     ??_ESP8266_SendString:
  1432  000045                     ESP8266_BuildAP@enunPsdMode:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x44
  1436  000045                     	ds	2
  1437  000047                     _KalmanFilter_0$2183:
  1438                           	opt stack 0
  1439  000047                     _KalmanFilter_1$2184:
  1440                           	opt stack 0
  1441  000047                     _KalmanFilter_2$2185:
  1442                           	opt stack 0
  1443  000047                     _KalmanFilter_3$2186:
  1444                           	opt stack 0
  1445  000047                     _KalmanFilter_4$2187:
  1446                           	opt stack 0
  1447  000047                     _KalmanFilter_5$2188:
  1448                           	opt stack 0
  1449  000047                     _KalmanFilter_6$2189:
  1450                           	opt stack 0
  1451  000047                     _KalmanFilter_7$2190:
  1452                           	opt stack 0
  1453  000047                     _KalmanFilter_8$2191:
  1454                           	opt stack 0
  1455  000047                     _KalmanFilter_9$2192:
  1456                           	opt stack 0
  1457                           
  1458                           ; 3 bytes @ 0x46
  1459  000047                     	ds	3
  1460  00004A                     KalmanFilter_0@x_now:
  1461                           	opt stack 0
  1462  00004A                     KalmanFilter_1@x_now:
  1463                           	opt stack 0
  1464  00004A                     KalmanFilter_2@x_now:
  1465                           	opt stack 0
  1466  00004A                     KalmanFilter_3@x_now:
  1467                           	opt stack 0
  1468  00004A                     KalmanFilter_4@x_now:
  1469                           	opt stack 0
  1470  00004A                     KalmanFilter_5@x_now:
  1471                           	opt stack 0
  1472  00004A                     KalmanFilter_6@x_now:
  1473                           	opt stack 0
  1474  00004A                     KalmanFilter_7@x_now:
  1475                           	opt stack 0
  1476  00004A                     KalmanFilter_8@x_now:
  1477                           	opt stack 0
  1478  00004A                     KalmanFilter_9@x_now:
  1479                           	opt stack 0
  1480                           
  1481                           ; 3 bytes @ 0x49
  1482  00004A                     	ds	3
  1483  00004D                     KalmanFilter_0@kg:
  1484                           	opt stack 0
  1485  00004D                     KalmanFilter_1@kg:
  1486                           	opt stack 0
  1487  00004D                     KalmanFilter_2@kg:
  1488                           	opt stack 0
  1489  00004D                     KalmanFilter_3@kg:
  1490                           	opt stack 0
  1491  00004D                     KalmanFilter_4@kg:
  1492                           	opt stack 0
  1493  00004D                     KalmanFilter_5@kg:
  1494                           	opt stack 0
  1495  00004D                     KalmanFilter_6@kg:
  1496                           	opt stack 0
  1497  00004D                     KalmanFilter_7@kg:
  1498                           	opt stack 0
  1499  00004D                     KalmanFilter_8@kg:
  1500                           	opt stack 0
  1501  00004D                     KalmanFilter_9@kg:
  1502                           	opt stack 0
  1503                           
  1504                           ; 3 bytes @ 0x4C
  1505  00004D                     	ds	3
  1506  000050                     KalmanFilter_0@x_mid:
  1507                           	opt stack 0
  1508  000050                     KalmanFilter_1@x_mid:
  1509                           	opt stack 0
  1510  000050                     KalmanFilter_2@x_mid:
  1511                           	opt stack 0
  1512  000050                     KalmanFilter_3@x_mid:
  1513                           	opt stack 0
  1514  000050                     KalmanFilter_4@x_mid:
  1515                           	opt stack 0
  1516  000050                     KalmanFilter_5@x_mid:
  1517                           	opt stack 0
  1518  000050                     KalmanFilter_6@x_mid:
  1519                           	opt stack 0
  1520  000050                     KalmanFilter_7@x_mid:
  1521                           	opt stack 0
  1522  000050                     KalmanFilter_8@x_mid:
  1523                           	opt stack 0
  1524  000050                     KalmanFilter_9@x_mid:
  1525                           	opt stack 0
  1526                           
  1527                           ; 3 bytes @ 0x4F
  1528  000050                     	ds	3
  1529  000053                     KalmanFilter_0@p_mid:
  1530                           	opt stack 0
  1531  000053                     KalmanFilter_1@p_mid:
  1532                           	opt stack 0
  1533  000053                     KalmanFilter_2@p_mid:
  1534                           	opt stack 0
  1535  000053                     KalmanFilter_3@p_mid:
  1536                           	opt stack 0
  1537  000053                     KalmanFilter_4@p_mid:
  1538                           	opt stack 0
  1539  000053                     KalmanFilter_5@p_mid:
  1540                           	opt stack 0
  1541  000053                     KalmanFilter_6@p_mid:
  1542                           	opt stack 0
  1543  000053                     KalmanFilter_7@p_mid:
  1544                           	opt stack 0
  1545  000053                     KalmanFilter_8@p_mid:
  1546                           	opt stack 0
  1547  000053                     KalmanFilter_9@p_mid:
  1548                           	opt stack 0
  1549                           
  1550                           ; 3 bytes @ 0x52
  1551  000053                     	ds	3
  1552  000056                     ?___fttol:
  1553                           	opt stack 0
  1554  000056                     ___fttol@f1:
  1555                           	opt stack 0
  1556                           
  1557                           ; 3 bytes @ 0x55
  1558  000056                     	ds	4
  1559  00005A                     translate_flex@AD_total:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x59
  1563  00005A                     	ds	2
  1564                           tblptru	equ	0xFF8
  1565                           postinc0	equ	0xFEE
  1566                           wreg	equ	0xFE8
  1567                           
  1568 ;;
  1569 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1570 ;;
  1571 ;; *************** function _main *****************
  1572 ;; Defined at:
  1573 ;;		line 150 in file "main.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;		None
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  tem            11    0[BANK1 ] unsigned char [11]
  1578 ;;  temp           11    0        unsigned char [11]
  1579 ;;  AD_total        2   11[BANK1 ] unsigned int 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  1    wreg      void 
  1582 ;; Registers used:
  1583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1589 ;;      Params:         0       0       0       0       0       0       0
  1590 ;;      Locals:         0       0      13       0       0       0       0
  1591 ;;      Temps:          0       2       0       0       0       0       0
  1592 ;;      Totals:         0       2      13       0       0       0       0
  1593 ;;Total ram usage:       15 bytes
  1594 ;; Hardware stack levels required when called:    7
  1595 ;; This function calls:
  1596 ;;		_ESP8266_SendString
  1597 ;;		_ESP8266_Server
  1598 ;;		_GPIO_initial
  1599 ;;		___awmod
  1600 ;;		_adc_initial
  1601 ;;		_initial_UART
  1602 ;;		_oclillator_initial
  1603 ;;		_strstr
  1604 ;;		_timer_0_initial
  1605 ;;		_timer_intrrupt_initinal
  1606 ;;		_translate_flex
  1607 ;; This function is called by:
  1608 ;;		Startup code after reset
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text0
  1613  001EB4                     __ptext0:
  1614                           	opt stack 0
  1615  001EB4                     _main:
  1616                           	opt stack 24
  1617                           
  1618                           ;main.c: 152: oclillator_initial();
  1619                           
  1620                           ;incstack = 0
  1621  001EB4  EC0C  F016         	call	_oclillator_initial	;wreg free
  1622                           
  1623                           ;main.c: 153: GPIO_initial();
  1624  001EB8  ECF3  F015         	call	_GPIO_initial	;wreg free
  1625                           
  1626                           ;main.c: 154: initial_UART();
  1627  001EBC  ECBA  F015         	call	_initial_UART	;wreg free
  1628                           
  1629                           ;main.c: 155: adc_initial();
  1630  001EC0  EC5C  F015         	call	_adc_initial	;wreg free
  1631                           
  1632                           ;main.c: 156: ESP8266_Server();
  1633  001EC4  EC52  F011         	call	_ESP8266_Server	;wreg free
  1634  001EC8                     l4906:
  1635  001EC8  0EA8               	movlw	low _strEsp8266_Fram_Record
  1636  001ECA  6E21               	movwf	strstr@s1,c
  1637  001ECC  0E01               	movlw	high _strEsp8266_Fram_Record
  1638  001ECE  6E22               	movwf	strstr@s1+1,c
  1639  001ED0  0EAC               	movlw	low STR_52
  1640  001ED2  6E23               	movwf	strstr@s2,c
  1641  001ED4  0E7F               	movlw	high STR_52
  1642  001ED6  6E24               	movwf	strstr@s2+1,c
  1643  001ED8  EC55  F013         	call	_strstr	;wreg free
  1644  001EDC  5021               	movf	?_strstr,w,c
  1645  001EDE  B4D8               	btfsc	status,2,c
  1646  001EE0  D7F3               	goto	l4906
  1647                           
  1648                           ;main.c: 158: timer_0_initial();
  1649  001EE2  EC04  F016         	call	_timer_0_initial	;wreg free
  1650                           
  1651                           ;main.c: 159: timer_intrrupt_initinal();
  1652  001EE6  ECFC  F015         	call	_timer_intrrupt_initinal	;wreg free
  1653                           
  1654                           ;main.c: 160: TRISDbits.RD1=1;
  1655  001EEA  8295               	bsf	3989,1,c	;volatile
  1656  001EEC                     l393:
  1657  001EEC  A283               	btfss	3971,1,c	;volatile
  1658  001EEE  D7FE               	goto	l393
  1659                           
  1660                           ;main.c: 162: u16 AD_total;
  1661                           ;main.c: 163: u8 temp[11];
  1662                           ;main.c: 164: u8 tem[11];
  1663                           ;main.c: 165: ADCON0bits.CHS=0;
  1664  001EF0  94C2               	bcf	4034,2,c	;volatile
  1665  001EF2  96C2               	bcf	4034,3,c	;volatile
  1666  001EF4  98C2               	bcf	4034,4,c	;volatile
  1667  001EF6  9AC2               	bcf	4034,5,c	;volatile
  1668                           
  1669                           ;main.c: 166: TRISCbits.TRISC5=0;
  1670  001EF8  9A94               	bcf	3988,5,c	;volatile
  1671                           
  1672                           ;main.c: 167: LATCbits.LATC5=1;
  1673  001EFA  8A8B               	bsf	3979,5,c	;volatile
  1674  001EFC  D05F               	goto	l4928
  1675  001EFE                     l4914:
  1676                           
  1677                           ;main.c: 179: ADCON0bits.CHS=(ADCON0bits.CHS+1)%10;
  1678  001EFE  30C2               	rrcf	4034,w,c	;volatile
  1679  001F00  32E8               	rrcf	wreg,f,c
  1680  001F02  0B0F               	andlw	15
  1681  001F04  0100               	movlb	0	; () banked
  1682  001F06  6FF8               	movwf	??_main& (0+255),b
  1683  001F08  0E01               	movlw	1
  1684  001F0A  0100               	movlb	0	; () banked
  1685  001F0C  25F8               	addwf	??_main& (0+255),w,b
  1686  001F0E  6E12               	movwf	___awmod@dividend,c
  1687  001F10  6A13               	clrf	___awmod@dividend+1,c
  1688  001F12  0E00               	movlw	0
  1689  001F14  2213               	addwfc	___awmod@dividend+1,f,c
  1690  001F16  0E00               	movlw	0
  1691  001F18  6E15               	movwf	___awmod@divisor+1,c
  1692  001F1A  0E0A               	movlw	10
  1693  001F1C  6E14               	movwf	___awmod@divisor,c
  1694  001F1E  EC11  F014         	call	___awmod	;wreg free
  1695  001F22  4612               	rlncf	?___awmod,f,c
  1696  001F24  4612               	rlncf	?___awmod,f,c
  1697  001F26  50C2               	movf	4034,w,c	;volatile
  1698  001F28  1812               	xorwf	?___awmod,w,c
  1699  001F2A  0BC3               	andlw	-61
  1700  001F2C  1812               	xorwf	?___awmod,w,c
  1701  001F2E  6EC2               	movwf	4034,c	;volatile
  1702  001F30                     l4916:
  1703  001F30  5065               	movf	_write,w,c
  1704  001F32  B4D8               	btfsc	status,2,c
  1705  001F34  D7FD               	goto	l4916
  1706                           
  1707                           ;main.c: 181: AD_total=AD_H;
  1708  001F36  C1A7  F1E7         	movff	_AD_H,main@AD_total
  1709  001F3A  0101               	movlb	1	; () banked
  1710  001F3C  6BE8               	clrf	(main@AD_total+1)& (0+255),b
  1711                           
  1712                           ; BSR set to: 1
  1713                           ;main.c: 182: tem[ADCON0bits.CHS+1]=translate_flex(AD_total);
  1714  001F3E  30C2               	rrcf	4034,w,c	;volatile
  1715  001F40  32E8               	rrcf	wreg,f,c
  1716  001F42  0B0F               	andlw	15
  1717  001F44  0100               	movlb	0	; () banked
  1718  001F46  6FF8               	movwf	??_main& (0+255),b
  1719  001F48  6BF9               	clrf	(??_main+1)& (0+255),b
  1720  001F4A  0E01               	movlw	1
  1721  001F4C  0100               	movlb	0	; () banked
  1722  001F4E  27F8               	addwf	??_main& (0+255),f,b
  1723  001F50  0E00               	movlw	0
  1724  001F52  23F9               	addwfc	(??_main+1)& (0+255),f,b
  1725  001F54  0EDC               	movlw	low main@tem
  1726  001F56  0100               	movlb	0	; () banked
  1727  001F58  25F8               	addwf	??_main& (0+255),w,b
  1728  001F5A  6ED9               	movwf	fsr2l,c
  1729  001F5C  0E01               	movlw	high main@tem
  1730  001F5E  0100               	movlb	0	; () banked
  1731  001F60  21F9               	addwfc	(??_main+1)& (0+255),w,b
  1732  001F62  6EDA               	movwf	fsr2h,c
  1733  001F64  C1E7  F05A         	movff	main@AD_total,translate_flex@AD_total
  1734  001F68  C1E8  F05B         	movff	main@AD_total+1,translate_flex@AD_total+1
  1735  001F6C  EC5A  F004         	call	_translate_flex	;wreg free
  1736  001F70  6EDF               	movwf	indf2,c
  1737                           
  1738                           ;main.c: 183: if(ADCON0bits.CHS==0){
  1739  001F72  30C2               	rrcf	4034,w,c	;volatile
  1740  001F74  32E8               	rrcf	wreg,f,c
  1741  001F76  0B0F               	andlw	15
  1742  001F78  0900               	iorlw	0
  1743  001F7A  A4D8               	btfss	status,2,c
  1744  001F7C  D01F               	goto	l4928
  1745                           
  1746                           ;main.c: 184: tem[0]='!';
  1747  001F7E  0E21               	movlw	33
  1748  001F80  0101               	movlb	1	; () banked
  1749  001F82  6FDC               	movwf	main@tem& (0+255),b
  1750                           
  1751                           ; BSR set to: 1
  1752                           ;main.c: 185: ESP8266_SendString(0,tem,12);
  1753  001F84  0EDC               	movlw	low main@tem
  1754  001F86  6E41               	movwf	ESP8266_SendString@pStr,c
  1755  001F88  0E01               	movlw	high main@tem
  1756  001F8A  6E42               	movwf	ESP8266_SendString@pStr+1,c
  1757  001F8C  0E00               	movlw	0
  1758  001F8E  6E44               	movwf	ESP8266_SendString@ulStrLength+1,c
  1759  001F90  0E0C               	movlw	12
  1760  001F92  6E43               	movwf	ESP8266_SendString@ulStrLength,c
  1761  001F94  0E00               	movlw	0
  1762  001F96  EC1E  F012         	call	_ESP8266_SendString
  1763                           
  1764                           ;main.c: 186: LATCbits.LATC5=!LATCbits.LATC5;
  1765  001F9A  BA8B               	btfsc	3979,5,c	;volatile
  1766  001F9C  D004               	goto	u5720
  1767  001F9E  0100               	movlb	0	; () banked
  1768  001FA0  6BF8               	clrf	??_main& (0+255),b
  1769  001FA2  2BF8               	incf	??_main& (0+255),f,b
  1770  001FA4  D002               	goto	u5738
  1771  001FA6                     u5720:
  1772  001FA6  0100               	movlb	0	; () banked
  1773  001FA8  6BF8               	clrf	??_main& (0+255),b
  1774  001FAA                     u5738:
  1775  001FAA  0100               	movlb	0	; () banked
  1776  001FAC  3BF8               	swapf	??_main& (0+255),f,b
  1777  001FAE  47F8               	rlncf	??_main& (0+255),f,b
  1778  001FB0  508B               	movf	3979,w,c	;volatile
  1779  001FB2  0100               	movlb	0	; () banked
  1780  001FB4  19F8               	xorwf	??_main& (0+255),w,b
  1781  001FB6  0BDF               	andlw	-33
  1782  001FB8  19F8               	xorwf	??_main& (0+255),w,b
  1783  001FBA  6E8B               	movwf	3979,c	;volatile
  1784  001FBC                     l4928:
  1785                           
  1786                           ;main.c: 187: }
  1787                           ;main.c: 188: write=0;
  1788  001FBC  0E00               	movlw	0
  1789  001FBE  6E65               	movwf	_write,c
  1790  001FC0  D79E               	goto	l4914
  1791  001FC2                     __end_of_main:
  1792                           	opt stack 0
  1793                           tblptru	equ	0xFF8
  1794                           postinc0	equ	0xFEE
  1795                           wreg	equ	0xFE8
  1796                           indf2	equ	0xFDF
  1797                           fsr2h	equ	0xFDA
  1798                           fsr2l	equ	0xFD9
  1799                           status	equ	0xFD8
  1800                           
  1801 ;; *************** function _translate_flex *****************
  1802 ;; Defined at:
  1803 ;;		line 374 in file "harwave/flex.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  AD_total        2   89[COMRAM] unsigned int 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  temp1           4    0        unsigned char [4]
  1808 ;;  Value           1   13[BANK0 ] unsigned char 
  1809 ;;  temp            1   12[BANK0 ] unsigned char 
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  1    wreg      unsigned char 
  1812 ;; Registers used:
  1813 ;;		wreg, status,2, status,0, cstack
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1819 ;;      Params:         2       0       0       0       0       0       0
  1820 ;;      Locals:         0       2       0       0       0       0       0
  1821 ;;      Temps:          0       1       0       0       0       0       0
  1822 ;;      Totals:         2       3       0       0       0       0       0
  1823 ;;Total ram usage:        5 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:    4
  1826 ;; This function calls:
  1827 ;;		_KalmanFilter_0
  1828 ;;		_KalmanFilter_1
  1829 ;;		_KalmanFilter_2
  1830 ;;		_KalmanFilter_3
  1831 ;;		_KalmanFilter_4
  1832 ;;		_KalmanFilter_5
  1833 ;;		_KalmanFilter_6
  1834 ;;		_KalmanFilter_7
  1835 ;;		_KalmanFilter_8
  1836 ;;		_KalmanFilter_9
  1837 ;;		___awdiv
  1838 ;;		___fttol
  1839 ;;		___lwtoft
  1840 ;; This function is called by:
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text1
  1846  0008B4                     __ptext1:
  1847                           	opt stack 0
  1848  0008B4                     _translate_flex:
  1849                           	opt stack 26
  1850                           
  1851                           ;flex.c: 375: u8 Value;
  1852                           ;flex.c: 376: u8 temp;
  1853                           ;flex.c: 377: u8 temp1[4];
  1854                           ;flex.c: 379: switch ( ADCON0bits.CHS / 2 ){
  1855                           
  1856                           ;incstack = 0
  1857  0008B4  D192               	goto	l4804
  1858  0008B6                     l4750:
  1859                           
  1860                           ;flex.c: 381: if( !(ADCON0bits.CHS%2) ){
  1861  0008B6  30C2               	rrcf	4034,w,c	;volatile
  1862  0008B8  32E8               	rrcf	wreg,f,c
  1863  0008BA  0B0F               	andlw	15
  1864  0008BC  0100               	movlb	0	; () banked
  1865  0008BE  6F8B               	movwf	??_translate_flex& (0+255),b
  1866  0008C0  0100               	movlb	0	; () banked
  1867  0008C2  B18B               	btfsc	??_translate_flex& (0+255),0,b
  1868  0008C4  D026               	goto	l4756
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;flex.c: 382: Value=(u8)KalmanFilter_0((double)AD_total,1,1.5);
  1872  0008C6  0E00               	movlw	0
  1873  0008C8  6E3B               	movwf	KalmanFilter_0@MeasureNoise_R_0,c
  1874  0008CA  0EC0               	movlw	192
  1875  0008CC  6E3C               	movwf	KalmanFilter_0@MeasureNoise_R_0+1,c
  1876  0008CE  0E3F               	movlw	63
  1877  0008D0  6E3D               	movwf	KalmanFilter_0@MeasureNoise_R_0+2,c
  1878  0008D2  0E00               	movlw	0
  1879  0008D4  6E38               	movwf	KalmanFilter_0@ProcessNiose_Q_0,c
  1880  0008D6  0E80               	movlw	128
  1881  0008D8  6E39               	movwf	KalmanFilter_0@ProcessNiose_Q_0+1,c
  1882  0008DA  0E3F               	movlw	63
  1883  0008DC  6E3A               	movwf	KalmanFilter_0@ProcessNiose_Q_0+2,c
  1884  0008DE  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  1885  0008E2  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  1886  0008E6  EC96  F015         	call	___lwtoft	;wreg free
  1887  0008EA  C01A  F035         	movff	?___lwtoft,KalmanFilter_0@ResrcData_0
  1888  0008EE  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_0@ResrcData_0+1
  1889  0008F2  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_0@ResrcData_0+2
  1890  0008F6  ECFA  F00D         	call	_KalmanFilter_0	;wreg free
  1891  0008FA  C035  F056         	movff	?_KalmanFilter_0,___fttol@f1
  1892  0008FE  C036  F057         	movff	?_KalmanFilter_0+1,___fttol@f1+1
  1893  000902  C037  F058         	movff	?_KalmanFilter_0+2,___fttol@f1+2
  1894  000906  ECC3  F00E         	call	___fttol	;wreg free
  1895  00090A  D163               	goto	L9
  1896  00090C                     l4754:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;flex.c: 383: temp=Value;
  1900  00090C  C08D  F08C         	movff	translate_flex@Value,translate_flex@temp
  1901                           
  1902                           ;flex.c: 384: }
  1903  000910  D187               	goto	l4806
  1904  000912                     l4756:
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;flex.c: 385: else{
  1908                           ;flex.c: 386: Value=(u8)KalmanFilter_1((double)AD_total,1,1.5);
  1909  000912  0E00               	movlw	0
  1910  000914  6E3B               	movwf	KalmanFilter_1@MeasureNoise_R_1,c
  1911  000916  0EC0               	movlw	192
  1912  000918  6E3C               	movwf	KalmanFilter_1@MeasureNoise_R_1+1,c
  1913  00091A  0E3F               	movlw	63
  1914  00091C  6E3D               	movwf	KalmanFilter_1@MeasureNoise_R_1+2,c
  1915  00091E  0E00               	movlw	0
  1916  000920  6E38               	movwf	KalmanFilter_1@ProcessNiose_Q_1,c
  1917  000922  0E80               	movlw	128
  1918  000924  6E39               	movwf	KalmanFilter_1@ProcessNiose_Q_1+1,c
  1919  000926  0E3F               	movlw	63
  1920  000928  6E3A               	movwf	KalmanFilter_1@ProcessNiose_Q_1+2,c
  1921  00092A  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  1922  00092E  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  1923  000932  EC96  F015         	call	___lwtoft	;wreg free
  1924  000936  C01A  F035         	movff	?___lwtoft,KalmanFilter_1@ResrcData_1
  1925  00093A  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_1@ResrcData_1+1
  1926  00093E  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_1@ResrcData_1+2
  1927  000942  EC31  F00D         	call	_KalmanFilter_1	;wreg free
  1928  000946  C035  F056         	movff	?_KalmanFilter_1,___fttol@f1
  1929  00094A  C036  F057         	movff	?_KalmanFilter_1+1,___fttol@f1+1
  1930  00094E  C037  F058         	movff	?_KalmanFilter_1+2,___fttol@f1+2
  1931  000952  ECC3  F00E         	call	___fttol	;wreg free
  1932  000956  D13D               	goto	L9
  1933  000958                     l4760:
  1934                           
  1935                           ;flex.c: 391: if( !(ADCON0bits.CHS%2) ){
  1936  000958  30C2               	rrcf	4034,w,c	;volatile
  1937  00095A  32E8               	rrcf	wreg,f,c
  1938  00095C  0B0F               	andlw	15
  1939  00095E  0100               	movlb	0	; () banked
  1940  000960  6F8B               	movwf	??_translate_flex& (0+255),b
  1941  000962  0100               	movlb	0	; () banked
  1942  000964  B18B               	btfsc	??_translate_flex& (0+255),0,b
  1943  000966  D029               	goto	l4768
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;flex.c: 392: if(ADCON0bits.CHS== 2){
  1947  000968  30C2               	rrcf	4034,w,c	;volatile
  1948  00096A  32E8               	rrcf	wreg,f,c
  1949  00096C  0B0F               	andlw	15
  1950  00096E  0A02               	xorlw	2
  1951  000970  A4D8               	btfss	status,2,c
  1952  000972  D156               	goto	l4806
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;flex.c: 393: Value=(u8)KalmanFilter_2((double)AD_total,1,1.5);
  1956  000974  0E00               	movlw	0
  1957  000976  6E3B               	movwf	KalmanFilter_2@MeasureNoise_R_2,c
  1958  000978  0EC0               	movlw	192
  1959  00097A  6E3C               	movwf	KalmanFilter_2@MeasureNoise_R_2+1,c
  1960  00097C  0E3F               	movlw	63
  1961  00097E  6E3D               	movwf	KalmanFilter_2@MeasureNoise_R_2+2,c
  1962  000980  0E00               	movlw	0
  1963  000982  6E38               	movwf	KalmanFilter_2@ProcessNiose_Q_2,c
  1964  000984  0E80               	movlw	128
  1965  000986  6E39               	movwf	KalmanFilter_2@ProcessNiose_Q_2+1,c
  1966  000988  0E3F               	movlw	63
  1967  00098A  6E3A               	movwf	KalmanFilter_2@ProcessNiose_Q_2+2,c
  1968  00098C  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  1969  000990  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  1970  000994  EC96  F015         	call	___lwtoft	;wreg free
  1971  000998  C01A  F035         	movff	?___lwtoft,KalmanFilter_2@ResrcData_2
  1972  00099C  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_2@ResrcData_2+1
  1973  0009A0  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_2@ResrcData_2+2
  1974  0009A4  EC68  F00C         	call	_KalmanFilter_2	;wreg free
  1975  0009A8  C035  F056         	movff	?_KalmanFilter_2,___fttol@f1
  1976  0009AC  C036  F057         	movff	?_KalmanFilter_2+1,___fttol@f1+1
  1977  0009B0  C037  F058         	movff	?_KalmanFilter_2+2,___fttol@f1+2
  1978  0009B4  ECC3  F00E         	call	___fttol	;wreg free
  1979  0009B8  D10C               	goto	L9
  1980  0009BA                     l4768:
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;flex.c: 397: else{
  1984                           ;flex.c: 398: Value=(u8)KalmanFilter_3((double)AD_total,1,1.5);
  1985  0009BA  0E00               	movlw	0
  1986  0009BC  6E3B               	movwf	KalmanFilter_3@MeasureNoise_R_3,c
  1987  0009BE  0EC0               	movlw	192
  1988  0009C0  6E3C               	movwf	KalmanFilter_3@MeasureNoise_R_3+1,c
  1989  0009C2  0E3F               	movlw	63
  1990  0009C4  6E3D               	movwf	KalmanFilter_3@MeasureNoise_R_3+2,c
  1991  0009C6  0E00               	movlw	0
  1992  0009C8  6E38               	movwf	KalmanFilter_3@ProcessNiose_Q_3,c
  1993  0009CA  0E80               	movlw	128
  1994  0009CC  6E39               	movwf	KalmanFilter_3@ProcessNiose_Q_3+1,c
  1995  0009CE  0E3F               	movlw	63
  1996  0009D0  6E3A               	movwf	KalmanFilter_3@ProcessNiose_Q_3+2,c
  1997  0009D2  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  1998  0009D6  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  1999  0009DA  EC96  F015         	call	___lwtoft	;wreg free
  2000  0009DE  C01A  F035         	movff	?___lwtoft,KalmanFilter_3@ResrcData_3
  2001  0009E2  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_3@ResrcData_3+1
  2002  0009E6  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_3@ResrcData_3+2
  2003  0009EA  EC9F  F00B         	call	_KalmanFilter_3	;wreg free
  2004  0009EE  C035  F056         	movff	?_KalmanFilter_3,___fttol@f1
  2005  0009F2  C036  F057         	movff	?_KalmanFilter_3+1,___fttol@f1+1
  2006  0009F6  C037  F058         	movff	?_KalmanFilter_3+2,___fttol@f1+2
  2007  0009FA  ECC3  F00E         	call	___fttol	;wreg free
  2008  0009FE  D0E9               	goto	L9
  2009  000A00                     l4772:
  2010                           
  2011                           ;flex.c: 403: if( !(ADCON0bits.CHS%2) ){
  2012  000A00  30C2               	rrcf	4034,w,c	;volatile
  2013  000A02  32E8               	rrcf	wreg,f,c
  2014  000A04  0B0F               	andlw	15
  2015  000A06  0100               	movlb	0	; () banked
  2016  000A08  6F8B               	movwf	??_translate_flex& (0+255),b
  2017  000A0A  0100               	movlb	0	; () banked
  2018  000A0C  B18B               	btfsc	??_translate_flex& (0+255),0,b
  2019  000A0E  D023               	goto	l4778
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;flex.c: 404: Value=(u8)KalmanFilter_4((double)AD_total,1,1.5);
  2023  000A10  0E00               	movlw	0
  2024  000A12  6E3B               	movwf	KalmanFilter_4@MeasureNoise_R_4,c
  2025  000A14  0EC0               	movlw	192
  2026  000A16  6E3C               	movwf	KalmanFilter_4@MeasureNoise_R_4+1,c
  2027  000A18  0E3F               	movlw	63
  2028  000A1A  6E3D               	movwf	KalmanFilter_4@MeasureNoise_R_4+2,c
  2029  000A1C  0E00               	movlw	0
  2030  000A1E  6E38               	movwf	KalmanFilter_4@ProcessNiose_Q_4,c
  2031  000A20  0E80               	movlw	128
  2032  000A22  6E39               	movwf	KalmanFilter_4@ProcessNiose_Q_4+1,c
  2033  000A24  0E3F               	movlw	63
  2034  000A26  6E3A               	movwf	KalmanFilter_4@ProcessNiose_Q_4+2,c
  2035  000A28  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2036  000A2C  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2037  000A30  EC96  F015         	call	___lwtoft	;wreg free
  2038  000A34  C01A  F035         	movff	?___lwtoft,KalmanFilter_4@ResrcData_4
  2039  000A38  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_4@ResrcData_4+1
  2040  000A3C  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_4@ResrcData_4+2
  2041  000A40  ECD6  F00A         	call	_KalmanFilter_4	;wreg free
  2042  000A44  C035  F056         	movff	?_KalmanFilter_4,___fttol@f1
  2043  000A48  C036  F057         	movff	?_KalmanFilter_4+1,___fttol@f1+1
  2044  000A4C  C037  F058         	movff	?_KalmanFilter_4+2,___fttol@f1+2
  2045  000A50  ECC3  F00E         	call	___fttol	;wreg free
  2046  000A54  D0BE               	goto	L9
  2047  000A56                     l4778:
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;flex.c: 407: else{
  2051                           ;flex.c: 408: Value=(u8)KalmanFilter_5((double)AD_total,1,1.5);
  2052  000A56  0E00               	movlw	0
  2053  000A58  6E3B               	movwf	KalmanFilter_5@MeasureNoise_R_5,c
  2054  000A5A  0EC0               	movlw	192
  2055  000A5C  6E3C               	movwf	KalmanFilter_5@MeasureNoise_R_5+1,c
  2056  000A5E  0E3F               	movlw	63
  2057  000A60  6E3D               	movwf	KalmanFilter_5@MeasureNoise_R_5+2,c
  2058  000A62  0E00               	movlw	0
  2059  000A64  6E38               	movwf	KalmanFilter_5@ProcessNiose_Q_5,c
  2060  000A66  0E80               	movlw	128
  2061  000A68  6E39               	movwf	KalmanFilter_5@ProcessNiose_Q_5+1,c
  2062  000A6A  0E3F               	movlw	63
  2063  000A6C  6E3A               	movwf	KalmanFilter_5@ProcessNiose_Q_5+2,c
  2064  000A6E  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2065  000A72  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2066  000A76  EC96  F015         	call	___lwtoft	;wreg free
  2067  000A7A  C01A  F035         	movff	?___lwtoft,KalmanFilter_5@ResrcData_5
  2068  000A7E  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_5@ResrcData_5+1
  2069  000A82  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_5@ResrcData_5+2
  2070  000A86  EC0D  F00A         	call	_KalmanFilter_5	;wreg free
  2071  000A8A  C035  F056         	movff	?_KalmanFilter_5,___fttol@f1
  2072  000A8E  C036  F057         	movff	?_KalmanFilter_5+1,___fttol@f1+1
  2073  000A92  C037  F058         	movff	?_KalmanFilter_5+2,___fttol@f1+2
  2074  000A96  ECC3  F00E         	call	___fttol	;wreg free
  2075  000A9A  D09B               	goto	L9
  2076  000A9C                     l4782:
  2077                           
  2078                           ;flex.c: 413: if( !(ADCON0bits.CHS%2) ){
  2079  000A9C  30C2               	rrcf	4034,w,c	;volatile
  2080  000A9E  32E8               	rrcf	wreg,f,c
  2081  000AA0  0B0F               	andlw	15
  2082  000AA2  0100               	movlb	0	; () banked
  2083  000AA4  6F8B               	movwf	??_translate_flex& (0+255),b
  2084  000AA6  0100               	movlb	0	; () banked
  2085  000AA8  B18B               	btfsc	??_translate_flex& (0+255),0,b
  2086  000AAA  D023               	goto	l4788
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;flex.c: 414: Value=(u8)KalmanFilter_6((double)AD_total,1,1.5);
  2090  000AAC  0E00               	movlw	0
  2091  000AAE  6E3B               	movwf	KalmanFilter_6@MeasureNoise_R_6,c
  2092  000AB0  0EC0               	movlw	192
  2093  000AB2  6E3C               	movwf	KalmanFilter_6@MeasureNoise_R_6+1,c
  2094  000AB4  0E3F               	movlw	63
  2095  000AB6  6E3D               	movwf	KalmanFilter_6@MeasureNoise_R_6+2,c
  2096  000AB8  0E00               	movlw	0
  2097  000ABA  6E38               	movwf	KalmanFilter_6@ProcessNiose_Q_6,c
  2098  000ABC  0E80               	movlw	128
  2099  000ABE  6E39               	movwf	KalmanFilter_6@ProcessNiose_Q_6+1,c
  2100  000AC0  0E3F               	movlw	63
  2101  000AC2  6E3A               	movwf	KalmanFilter_6@ProcessNiose_Q_6+2,c
  2102  000AC4  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2103  000AC8  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2104  000ACC  EC96  F015         	call	___lwtoft	;wreg free
  2105  000AD0  C01A  F035         	movff	?___lwtoft,KalmanFilter_6@ResrcData_6
  2106  000AD4  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_6@ResrcData_6+1
  2107  000AD8  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_6@ResrcData_6+2
  2108  000ADC  EC44  F009         	call	_KalmanFilter_6	;wreg free
  2109  000AE0  C035  F056         	movff	?_KalmanFilter_6,___fttol@f1
  2110  000AE4  C036  F057         	movff	?_KalmanFilter_6+1,___fttol@f1+1
  2111  000AE8  C037  F058         	movff	?_KalmanFilter_6+2,___fttol@f1+2
  2112  000AEC  ECC3  F00E         	call	___fttol	;wreg free
  2113  000AF0  D070               	goto	L9
  2114  000AF2                     l4788:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;flex.c: 417: else{
  2118                           ;flex.c: 418: Value=(u8)KalmanFilter_7((double)AD_total,1,1.5);
  2119  000AF2  0E00               	movlw	0
  2120  000AF4  6E3B               	movwf	KalmanFilter_7@MeasureNoise_R_7,c
  2121  000AF6  0EC0               	movlw	192
  2122  000AF8  6E3C               	movwf	KalmanFilter_7@MeasureNoise_R_7+1,c
  2123  000AFA  0E3F               	movlw	63
  2124  000AFC  6E3D               	movwf	KalmanFilter_7@MeasureNoise_R_7+2,c
  2125  000AFE  0E00               	movlw	0
  2126  000B00  6E38               	movwf	KalmanFilter_7@ProcessNiose_Q_7,c
  2127  000B02  0E80               	movlw	128
  2128  000B04  6E39               	movwf	KalmanFilter_7@ProcessNiose_Q_7+1,c
  2129  000B06  0E3F               	movlw	63
  2130  000B08  6E3A               	movwf	KalmanFilter_7@ProcessNiose_Q_7+2,c
  2131  000B0A  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2132  000B0E  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2133  000B12  EC96  F015         	call	___lwtoft	;wreg free
  2134  000B16  C01A  F035         	movff	?___lwtoft,KalmanFilter_7@ResrcData_7
  2135  000B1A  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_7@ResrcData_7+1
  2136  000B1E  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_7@ResrcData_7+2
  2137  000B22  EC7B  F008         	call	_KalmanFilter_7	;wreg free
  2138  000B26  C035  F056         	movff	?_KalmanFilter_7,___fttol@f1
  2139  000B2A  C036  F057         	movff	?_KalmanFilter_7+1,___fttol@f1+1
  2140  000B2E  C037  F058         	movff	?_KalmanFilter_7+2,___fttol@f1+2
  2141  000B32  ECC3  F00E         	call	___fttol	;wreg free
  2142  000B36  D04D               	goto	L9
  2143  000B38                     l4792:
  2144                           
  2145                           ;flex.c: 423: if( !(ADCON0bits.CHS%2) ){
  2146  000B38  30C2               	rrcf	4034,w,c	;volatile
  2147  000B3A  32E8               	rrcf	wreg,f,c
  2148  000B3C  0B0F               	andlw	15
  2149  000B3E  0100               	movlb	0	; () banked
  2150  000B40  6F8B               	movwf	??_translate_flex& (0+255),b
  2151  000B42  0100               	movlb	0	; () banked
  2152  000B44  B18B               	btfsc	??_translate_flex& (0+255),0,b
  2153  000B46  D023               	goto	l4798
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;flex.c: 424: Value=(u8)KalmanFilter_8((double)AD_total,1,1.5);
  2157  000B48  0E00               	movlw	0
  2158  000B4A  6E3B               	movwf	KalmanFilter_8@MeasureNoise_R_8,c
  2159  000B4C  0EC0               	movlw	192
  2160  000B4E  6E3C               	movwf	KalmanFilter_8@MeasureNoise_R_8+1,c
  2161  000B50  0E3F               	movlw	63
  2162  000B52  6E3D               	movwf	KalmanFilter_8@MeasureNoise_R_8+2,c
  2163  000B54  0E00               	movlw	0
  2164  000B56  6E38               	movwf	KalmanFilter_8@ProcessNiose_Q_8,c
  2165  000B58  0E80               	movlw	128
  2166  000B5A  6E39               	movwf	KalmanFilter_8@ProcessNiose_Q_8+1,c
  2167  000B5C  0E3F               	movlw	63
  2168  000B5E  6E3A               	movwf	KalmanFilter_8@ProcessNiose_Q_8+2,c
  2169  000B60  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2170  000B64  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2171  000B68  EC96  F015         	call	___lwtoft	;wreg free
  2172  000B6C  C01A  F035         	movff	?___lwtoft,KalmanFilter_8@ResrcData_8
  2173  000B70  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_8@ResrcData_8+1
  2174  000B74  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_8@ResrcData_8+2
  2175  000B78  ECB2  F007         	call	_KalmanFilter_8	;wreg free
  2176  000B7C  C035  F056         	movff	?_KalmanFilter_8,___fttol@f1
  2177  000B80  C036  F057         	movff	?_KalmanFilter_8+1,___fttol@f1+1
  2178  000B84  C037  F058         	movff	?_KalmanFilter_8+2,___fttol@f1+2
  2179  000B88  ECC3  F00E         	call	___fttol	;wreg free
  2180  000B8C  D022               	goto	L9
  2181  000B8E                     l4798:
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;flex.c: 427: else{
  2185                           ;flex.c: 428: Value=(u8)KalmanFilter_9((double)AD_total,1,1.5);
  2186  000B8E  0E00               	movlw	0
  2187  000B90  6E3B               	movwf	KalmanFilter_9@MeasureNoise_R_9,c
  2188  000B92  0EC0               	movlw	192
  2189  000B94  6E3C               	movwf	KalmanFilter_9@MeasureNoise_R_9+1,c
  2190  000B96  0E3F               	movlw	63
  2191  000B98  6E3D               	movwf	KalmanFilter_9@MeasureNoise_R_9+2,c
  2192  000B9A  0E00               	movlw	0
  2193  000B9C  6E38               	movwf	KalmanFilter_9@ProcessNiose_Q_9,c
  2194  000B9E  0E80               	movlw	128
  2195  000BA0  6E39               	movwf	KalmanFilter_9@ProcessNiose_Q_9+1,c
  2196  000BA2  0E3F               	movlw	63
  2197  000BA4  6E3A               	movwf	KalmanFilter_9@ProcessNiose_Q_9+2,c
  2198  000BA6  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2199  000BAA  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2200  000BAE  EC96  F015         	call	___lwtoft	;wreg free
  2201  000BB2  C01A  F035         	movff	?___lwtoft,KalmanFilter_9@ResrcData_9
  2202  000BB6  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_9@ResrcData_9+1
  2203  000BBA  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_9@ResrcData_9+2
  2204  000BBE  ECE9  F006         	call	_KalmanFilter_9	;wreg free
  2205  000BC2  C035  F056         	movff	?_KalmanFilter_9,___fttol@f1
  2206  000BC6  C036  F057         	movff	?_KalmanFilter_9+1,___fttol@f1+1
  2207  000BCA  C037  F058         	movff	?_KalmanFilter_9+2,___fttol@f1+2
  2208  000BCE  ECC3  F00E         	call	___fttol	;wreg free
  2209  000BD2                     L9:
  2210  000BD2  5056               	movf	?___fttol,w,c
  2211  000BD4  0100               	movlb	0	; () banked
  2212  000BD6  6F8D               	movwf	translate_flex@Value& (0+255),b
  2213  000BD8  D699               	goto	l4754
  2214  000BDA                     l4804:
  2215  000BDA  30C2               	rrcf	4034,w,c	;volatile
  2216  000BDC  32E8               	rrcf	wreg,f,c
  2217  000BDE  0B0F               	andlw	15
  2218  000BE0  0100               	movlb	0	; () banked
  2219  000BE2  6F8B               	movwf	??_translate_flex& (0+255),b
  2220  000BE4  0100               	movlb	0	; () banked
  2221  000BE6  518B               	movf	??_translate_flex& (0+255),w,b
  2222  000BE8  6E12               	movwf	___awdiv@dividend,c
  2223  000BEA  6A13               	clrf	___awdiv@dividend+1,c
  2224  000BEC  0E00               	movlw	0
  2225  000BEE  6E15               	movwf	___awdiv@divisor+1,c
  2226  000BF0  0E02               	movlw	2
  2227  000BF2  6E14               	movwf	___awdiv@divisor,c
  2228  000BF4  EC13  F013         	call	___awdiv	;wreg free
  2229                           
  2230                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2231                           ; Switch size 1, requested type "space"
  2232                           ; Number of cases is 1, Range of values is 0 to 0
  2233                           ; switch strategies available:
  2234                           ; Name         Instructions Cycles
  2235                           ; simple_byte            4     3 (average)
  2236                           ;	Chosen strategy is simple_byte
  2237  000BF8  5013               	movf	?___awdiv+1,w,c
  2238  000BFA  0A00               	xorlw	0	; case 0
  2239  000BFC  A4D8               	btfss	status,2,c
  2240  000BFE  D010               	goto	l4806
  2241                           
  2242                           ; Switch size 1, requested type "space"
  2243                           ; Number of cases is 5, Range of values is 0 to 4
  2244                           ; switch strategies available:
  2245                           ; Name         Instructions Cycles
  2246                           ; simple_byte           16     9 (average)
  2247                           ;	Chosen strategy is simple_byte
  2248  000C00  5012               	movf	?___awdiv,w,c
  2249  000C02  0A00               	xorlw	0	; case 0
  2250  000C04  B4D8               	btfsc	status,2,c
  2251  000C06  D657               	goto	l4750
  2252  000C08  0A01               	xorlw	1	; case 1
  2253  000C0A  B4D8               	btfsc	status,2,c
  2254  000C0C  D6A5               	goto	l4760
  2255  000C0E  0A03               	xorlw	3	; case 2
  2256  000C10  B4D8               	btfsc	status,2,c
  2257  000C12  D6F6               	goto	l4772
  2258  000C14  0A01               	xorlw	1	; case 3
  2259  000C16  B4D8               	btfsc	status,2,c
  2260  000C18  D741               	goto	l4782
  2261  000C1A  0A07               	xorlw	7	; case 4
  2262  000C1C  B4D8               	btfsc	status,2,c
  2263  000C1E  D78C               	goto	l4792
  2264  000C20                     l4806:
  2265                           
  2266                           ;flex.c: 437: return temp;
  2267  000C20  0100               	movlb	0	; () banked
  2268  000C22  518C               	movf	translate_flex@temp& (0+255),w,b
  2269  000C24  0012               	return	
  2270  000C26                     __end_of_translate_flex:
  2271                           	opt stack 0
  2272                           tblptru	equ	0xFF8
  2273                           postinc0	equ	0xFEE
  2274                           wreg	equ	0xFE8
  2275                           indf2	equ	0xFDF
  2276                           fsr2h	equ	0xFDA
  2277                           fsr2l	equ	0xFD9
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function ___lwtoft *****************
  2281 ;; Defined at:
  2282 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  c               2   25[COMRAM] unsigned int 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  3   25[COMRAM] float 
  2289 ;; Registers used:
  2290 ;;		wreg, status,2, status,0, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2296 ;;      Params:         3       0       0       0       0       0       0
  2297 ;;      Locals:         0       0       0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0       0       0
  2299 ;;      Totals:         3       0       0       0       0       0       0
  2300 ;;Total ram usage:        3 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    2
  2303 ;; This function calls:
  2304 ;;		___ftpack
  2305 ;; This function is called by:
  2306 ;;		_translate_flex
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text2
  2311  002B2C                     __ptext2:
  2312                           	opt stack 0
  2313  002B2C                     ___lwtoft:
  2314                           	opt stack 27
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;incstack = 0
  2318  002B2C  C01A  F012         	movff	___lwtoft@c,___ftpack@arg
  2319  002B30  C01B  F013         	movff	___lwtoft@c+1,___ftpack@arg+1
  2320  002B34  6A14               	clrf	___ftpack@arg+2,c
  2321  002B36  0E8E               	movlw	142
  2322  002B38  6E15               	movwf	___ftpack@exp,c
  2323  002B3A  0E00               	movlw	0
  2324  002B3C  6E16               	movwf	___ftpack@sign,c
  2325  002B3E  EC76  F012         	call	___ftpack	;wreg free
  2326  002B42  C012  F01A         	movff	?___ftpack,?___lwtoft
  2327  002B46  C013  F01B         	movff	?___ftpack+1,?___lwtoft+1
  2328  002B4A  C014  F01C         	movff	?___ftpack+2,?___lwtoft+2
  2329  002B4E  0012               	return	
  2330  002B50                     __end_of___lwtoft:
  2331                           	opt stack 0
  2332                           tblptru	equ	0xFF8
  2333                           postinc0	equ	0xFEE
  2334                           wreg	equ	0xFE8
  2335                           indf2	equ	0xFDF
  2336                           fsr2h	equ	0xFDA
  2337                           fsr2l	equ	0xFD9
  2338                           status	equ	0xFD8
  2339                           
  2340 ;; *************** function ___fttol *****************
  2341 ;; Defined at:
  2342 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  f1              3   85[COMRAM] float 
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;  lval            4    6[BANK0 ] unsigned long 
  2347 ;;  exp1            1   10[BANK0 ] unsigned char 
  2348 ;;  sign1           1    5[BANK0 ] unsigned char 
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  4   85[COMRAM] long 
  2351 ;; Registers used:
  2352 ;;		wreg, status,2, status,0
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 0/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2358 ;;      Params:         4       0       0       0       0       0       0
  2359 ;;      Locals:         0       6       0       0       0       0       0
  2360 ;;      Temps:          0       5       0       0       0       0       0
  2361 ;;      Totals:         4      11       0       0       0       0       0
  2362 ;;Total ram usage:       15 bytes
  2363 ;; Hardware stack levels used:    1
  2364 ;; Hardware stack levels required when called:    1
  2365 ;; This function calls:
  2366 ;;		Nothing
  2367 ;; This function is called by:
  2368 ;;		_translate_flex
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           	psect	text3
  2373  001D86                     __ptext3:
  2374                           	opt stack 0
  2375  001D86                     ___fttol:
  2376                           	opt stack 28
  2377                           
  2378                           ;incstack = 0
  2379  001D86  C058  F080         	movff	___fttol@f1+2,??___fttol
  2380  001D8A  0100               	movlb	0	; () banked
  2381  001D8C  6B81               	clrf	(??___fttol+1)& (0+255),b
  2382  001D8E  6B82               	clrf	(??___fttol+2)& (0+255),b
  2383  001D90  3457               	rlcf	___fttol@f1+1,w,c
  2384  001D92  0100               	movlb	0	; () banked
  2385  001D94  3780               	rlcf	??___fttol& (0+255),f,b
  2386  001D96  E301               	bnc	u5371
  2387  001D98  8181               	bsf	(??___fttol+1)& (0+255),0,b
  2388  001D9A                     u5371:
  2389  001D9A  0100               	movlb	0	; () banked
  2390  001D9C  5180               	movf	??___fttol& (0+255),w,b
  2391  001D9E  0100               	movlb	0	; () banked
  2392  001DA0  6F8A               	movwf	___fttol@exp1& (0+255),b
  2393  001DA2  0100               	movlb	0	; () banked
  2394  001DA4  518A               	movf	___fttol@exp1& (0+255),w,b
  2395  001DA6  A4D8               	btfss	status,2,c
  2396  001DA8  D009               	goto	l4704
  2397                           
  2398                           ; BSR set to: 0
  2399  001DAA  0E00               	movlw	0
  2400  001DAC  6E56               	movwf	?___fttol,c
  2401  001DAE  0E00               	movlw	0
  2402  001DB0  6E57               	movwf	?___fttol+1,c
  2403  001DB2  0E00               	movlw	0
  2404  001DB4  6E58               	movwf	?___fttol+2,c
  2405  001DB6  0E00               	movlw	0
  2406  001DB8  6E59               	movwf	?___fttol+3,c
  2407                           
  2408                           ; BSR set to: 0
  2409  001DBA  0012               	return	
  2410  001DBC                     l4704:
  2411                           
  2412                           ; BSR set to: 0
  2413  001DBC  0E17               	movlw	23
  2414  001DBE  0100               	movlb	0	; () banked
  2415  001DC0  6F80               	movwf	??___fttol& (0+255),b
  2416  001DC2  C056  F081         	movff	___fttol@f1,??___fttol+1
  2417  001DC6  C057  F082         	movff	___fttol@f1+1,??___fttol+2
  2418  001DCA  C058  F083         	movff	___fttol@f1+2,??___fttol+3
  2419  001DCE  0100               	movlb	0	; () banked
  2420  001DD0  2980               	incf	??___fttol& (0+255),w,b
  2421  001DD2  0100               	movlb	0	; () banked
  2422  001DD4  6F84               	movwf	(??___fttol+4)& (0+255),b
  2423  001DD6  D005               	goto	u5390
  2424  001DD8                     u5395:
  2425  001DD8  0100               	movlb	0	; () banked
  2426  001DDA  90D8               	bcf	status,0,c
  2427  001DDC  3383               	rrcf	(??___fttol+3)& (0+255),f,b
  2428  001DDE  3382               	rrcf	(??___fttol+2)& (0+255),f,b
  2429  001DE0  3381               	rrcf	(??___fttol+1)& (0+255),f,b
  2430  001DE2                     u5390:
  2431  001DE2  0100               	movlb	0	; () banked
  2432  001DE4  2F84               	decfsz	(??___fttol+4)& (0+255),f,b
  2433  001DE6  D7F8               	goto	u5395
  2434  001DE8  0100               	movlb	0	; () banked
  2435  001DEA  5181               	movf	(??___fttol+1)& (0+255),w,b
  2436  001DEC  0100               	movlb	0	; () banked
  2437  001DEE  6F85               	movwf	___fttol@sign1& (0+255),b
  2438                           
  2439                           ; BSR set to: 0
  2440  001DF0  8E57               	bsf	___fttol@f1+1,7,c
  2441                           
  2442                           ; BSR set to: 0
  2443  001DF2  0EFF               	movlw	255
  2444  001DF4  1656               	andwf	___fttol@f1,f,c
  2445  001DF6  0EFF               	movlw	255
  2446  001DF8  1657               	andwf	___fttol@f1+1,f,c
  2447  001DFA  0E00               	movlw	0
  2448  001DFC  1658               	andwf	___fttol@f1+2,f,c
  2449                           
  2450                           ; BSR set to: 0
  2451  001DFE  5056               	movf	___fttol@f1,w,c
  2452  001E00  0100               	movlb	0	; () banked
  2453  001E02  6F86               	movwf	___fttol@lval& (0+255),b
  2454  001E04  5057               	movf	___fttol@f1+1,w,c
  2455  001E06  0100               	movlb	0	; () banked
  2456  001E08  6F87               	movwf	(___fttol@lval+1)& (0+255),b
  2457  001E0A  5058               	movf	___fttol@f1+2,w,c
  2458  001E0C  0100               	movlb	0	; () banked
  2459  001E0E  6F88               	movwf	(___fttol@lval+2)& (0+255),b
  2460  001E10  0100               	movlb	0	; () banked
  2461  001E12  6B89               	clrf	(___fttol@lval+3)& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464  001E14  0E8E               	movlw	142
  2465  001E16  0100               	movlb	0	; () banked
  2466  001E18  5F8A               	subwf	___fttol@exp1& (0+255),f,b
  2467                           
  2468                           ; BSR set to: 0
  2469  001E1A  0100               	movlb	0	; () banked
  2470  001E1C  AF8A               	btfss	___fttol@exp1& (0+255),7,b
  2471  001E1E  D019               	goto	l4726
  2472                           
  2473                           ; BSR set to: 0
  2474  001E20  0100               	movlb	0	; () banked
  2475  001E22  518A               	movf	___fttol@exp1& (0+255),w,b
  2476  001E24  0A80               	xorlw	128
  2477  001E26  0F8F               	addlw	143
  2478  001E28  B0D8               	btfsc	status,0,c
  2479  001E2A  D009               	goto	l4722
  2480                           
  2481                           ; BSR set to: 0
  2482  001E2C  0E00               	movlw	0
  2483  001E2E  6E56               	movwf	?___fttol,c
  2484  001E30  0E00               	movlw	0
  2485  001E32  6E57               	movwf	?___fttol+1,c
  2486  001E34  0E00               	movlw	0
  2487  001E36  6E58               	movwf	?___fttol+2,c
  2488  001E38  0E00               	movlw	0
  2489  001E3A  6E59               	movwf	?___fttol+3,c
  2490                           
  2491                           ; BSR set to: 0
  2492  001E3C  0012               	return	
  2493  001E3E                     l4722:
  2494                           
  2495                           ; BSR set to: 0
  2496  001E3E  0100               	movlb	0	; () banked
  2497  001E40  90D8               	bcf	status,0,c
  2498  001E42  3389               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2499  001E44  3388               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2500  001E46  3387               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2501  001E48  3386               	rrcf	___fttol@lval& (0+255),f,b
  2502                           
  2503                           ; BSR set to: 0
  2504  001E4A  0100               	movlb	0	; () banked
  2505  001E4C  3F8A               	incfsz	___fttol@exp1& (0+255),f,b
  2506  001E4E  D7F7               	goto	l4722
  2507                           
  2508                           ; BSR set to: 0
  2509  001E50  D01A               	goto	l4736
  2510  001E52                     l4726:
  2511                           
  2512                           ; BSR set to: 0
  2513  001E52  0E17               	movlw	23
  2514  001E54  0100               	movlb	0	; () banked
  2515  001E56  658A               	cpfsgt	___fttol@exp1& (0+255),b
  2516  001E58  D011               	goto	l4734
  2517                           
  2518                           ; BSR set to: 0
  2519  001E5A  0E00               	movlw	0
  2520  001E5C  6E56               	movwf	?___fttol,c
  2521  001E5E  0E00               	movlw	0
  2522  001E60  6E57               	movwf	?___fttol+1,c
  2523  001E62  0E00               	movlw	0
  2524  001E64  6E58               	movwf	?___fttol+2,c
  2525  001E66  0E00               	movlw	0
  2526  001E68  6E59               	movwf	?___fttol+3,c
  2527                           
  2528                           ; BSR set to: 0
  2529  001E6A  0012               	return	
  2530  001E6C                     l4732:
  2531                           
  2532                           ; BSR set to: 0
  2533  001E6C  0100               	movlb	0	; () banked
  2534  001E6E  90D8               	bcf	status,0,c
  2535  001E70  3786               	rlcf	___fttol@lval& (0+255),f,b
  2536  001E72  3787               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2537  001E74  3788               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2538  001E76  3789               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2539  001E78  0100               	movlb	0	; () banked
  2540  001E7A  078A               	decf	___fttol@exp1& (0+255),f,b
  2541  001E7C                     l4734:
  2542                           
  2543                           ; BSR set to: 0
  2544  001E7C  0100               	movlb	0	; () banked
  2545  001E7E  518A               	movf	___fttol@exp1& (0+255),w,b
  2546  001E80  0100               	movlb	0	; () banked
  2547  001E82  A4D8               	btfss	status,2,c
  2548  001E84  D7F3               	goto	l4732
  2549  001E86                     l4736:
  2550                           
  2551                           ; BSR set to: 0
  2552  001E86  0100               	movlb	0	; () banked
  2553  001E88  5185               	movf	___fttol@sign1& (0+255),w,b
  2554  001E8A  0100               	movlb	0	; () banked
  2555  001E8C  B4D8               	btfsc	status,2,c
  2556  001E8E  D009               	goto	l4740
  2557                           
  2558                           ; BSR set to: 0
  2559  001E90  0100               	movlb	0	; () banked
  2560  001E92  1F89               	comf	(___fttol@lval+3)& (0+255),f,b
  2561  001E94  1F88               	comf	(___fttol@lval+2)& (0+255),f,b
  2562  001E96  1F87               	comf	(___fttol@lval+1)& (0+255),f,b
  2563  001E98  6D86               	negf	___fttol@lval& (0+255),b
  2564  001E9A  0E00               	movlw	0
  2565  001E9C  2387               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2566  001E9E  2388               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2567  001EA0  2389               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2568  001EA2                     l4740:
  2569                           
  2570                           ; BSR set to: 0
  2571  001EA2  C086  F056         	movff	___fttol@lval,?___fttol
  2572  001EA6  C087  F057         	movff	___fttol@lval+1,?___fttol+1
  2573  001EAA  C088  F058         	movff	___fttol@lval+2,?___fttol+2
  2574  001EAE  C089  F059         	movff	___fttol@lval+3,?___fttol+3
  2575  001EB2  0012               	return	
  2576  001EB4                     __end_of___fttol:
  2577                           	opt stack 0
  2578                           tblptru	equ	0xFF8
  2579                           postinc0	equ	0xFEE
  2580                           wreg	equ	0xFE8
  2581                           indf2	equ	0xFDF
  2582                           fsr2h	equ	0xFDA
  2583                           fsr2l	equ	0xFD9
  2584                           status	equ	0xFD8
  2585                           
  2586 ;; *************** function ___awdiv *****************
  2587 ;; Defined at:
  2588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  dividend        2   17[COMRAM] int 
  2591 ;;  divisor         2   19[COMRAM] int 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  quotient        2   23[COMRAM] int 
  2594 ;;  sign            1   22[COMRAM] unsigned char 
  2595 ;;  counter         1   21[COMRAM] unsigned char 
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  2   17[COMRAM] int 
  2598 ;; Registers used:
  2599 ;;		wreg, status,2, status,0
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2605 ;;      Params:         4       0       0       0       0       0       0
  2606 ;;      Locals:         4       0       0       0       0       0       0
  2607 ;;      Temps:          0       0       0       0       0       0       0
  2608 ;;      Totals:         8       0       0       0       0       0       0
  2609 ;;Total ram usage:        8 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    1
  2612 ;; This function calls:
  2613 ;;		Nothing
  2614 ;; This function is called by:
  2615 ;;		_translate_flex
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text4
  2620  002626                     __ptext4:
  2621                           	opt stack 0
  2622  002626                     ___awdiv:
  2623                           	opt stack 28
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;incstack = 0
  2627  002626  0E00               	movlw	0
  2628  002628  6E17               	movwf	___awdiv@sign,c
  2629  00262A  AE15               	btfss	___awdiv@divisor+1,7,c
  2630  00262C  D006               	goto	l4662
  2631  00262E  6C14               	negf	___awdiv@divisor,c
  2632  002630  1E15               	comf	___awdiv@divisor+1,f,c
  2633  002632  B0D8               	btfsc	status,0,c
  2634  002634  2A15               	incf	___awdiv@divisor+1,f,c
  2635  002636  0E01               	movlw	1
  2636  002638  6E17               	movwf	___awdiv@sign,c
  2637  00263A                     l4662:
  2638  00263A  AE13               	btfss	___awdiv@dividend+1,7,c
  2639  00263C  D006               	goto	l4668
  2640  00263E  6C12               	negf	___awdiv@dividend,c
  2641  002640  1E13               	comf	___awdiv@dividend+1,f,c
  2642  002642  B0D8               	btfsc	status,0,c
  2643  002644  2A13               	incf	___awdiv@dividend+1,f,c
  2644  002646  0E01               	movlw	1
  2645  002648  1A17               	xorwf	___awdiv@sign,f,c
  2646  00264A                     l4668:
  2647  00264A  0E00               	movlw	0
  2648  00264C  6E19               	movwf	___awdiv@quotient+1,c
  2649  00264E  0E00               	movlw	0
  2650  002650  6E18               	movwf	___awdiv@quotient,c
  2651  002652  5014               	movf	___awdiv@divisor,w,c
  2652  002654  1015               	iorwf	___awdiv@divisor+1,w,c
  2653  002656  B4D8               	btfsc	status,2,c
  2654  002658  D01C               	goto	l4690
  2655  00265A  0E01               	movlw	1
  2656  00265C  6E16               	movwf	___awdiv@counter,c
  2657  00265E  D004               	goto	l4676
  2658  002660                     l4674:
  2659  002660  90D8               	bcf	status,0,c
  2660  002662  3614               	rlcf	___awdiv@divisor,f,c
  2661  002664  3615               	rlcf	___awdiv@divisor+1,f,c
  2662  002666  2A16               	incf	___awdiv@counter,f,c
  2663  002668                     l4676:
  2664  002668  AE15               	btfss	___awdiv@divisor+1,7,c
  2665  00266A  D7FA               	goto	l4674
  2666  00266C                     l4678:
  2667  00266C  90D8               	bcf	status,0,c
  2668  00266E  3618               	rlcf	___awdiv@quotient,f,c
  2669  002670  3619               	rlcf	___awdiv@quotient+1,f,c
  2670  002672  5014               	movf	___awdiv@divisor,w,c
  2671  002674  5C12               	subwf	___awdiv@dividend,w,c
  2672  002676  5015               	movf	___awdiv@divisor+1,w,c
  2673  002678  5813               	subwfb	___awdiv@dividend+1,w,c
  2674  00267A  A0D8               	btfss	status,0,c
  2675  00267C  D005               	goto	l4686
  2676  00267E  5014               	movf	___awdiv@divisor,w,c
  2677  002680  5E12               	subwf	___awdiv@dividend,f,c
  2678  002682  5015               	movf	___awdiv@divisor+1,w,c
  2679  002684  5A13               	subwfb	___awdiv@dividend+1,f,c
  2680  002686  8018               	bsf	___awdiv@quotient,0,c
  2681  002688                     l4686:
  2682  002688  90D8               	bcf	status,0,c
  2683  00268A  3215               	rrcf	___awdiv@divisor+1,f,c
  2684  00268C  3214               	rrcf	___awdiv@divisor,f,c
  2685  00268E  2E16               	decfsz	___awdiv@counter,f,c
  2686  002690  D7ED               	goto	l4678
  2687  002692                     l4690:
  2688  002692  5017               	movf	___awdiv@sign,w,c
  2689  002694  B4D8               	btfsc	status,2,c
  2690  002696  D004               	goto	l4694
  2691  002698  6C18               	negf	___awdiv@quotient,c
  2692  00269A  1E19               	comf	___awdiv@quotient+1,f,c
  2693  00269C  B0D8               	btfsc	status,0,c
  2694  00269E  2A19               	incf	___awdiv@quotient+1,f,c
  2695  0026A0                     l4694:
  2696  0026A0  C018  F012         	movff	___awdiv@quotient,?___awdiv
  2697  0026A4  C019  F013         	movff	___awdiv@quotient+1,?___awdiv+1
  2698  0026A8  0012               	return	
  2699  0026AA                     __end_of___awdiv:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           postinc0	equ	0xFEE
  2703                           wreg	equ	0xFE8
  2704                           indf2	equ	0xFDF
  2705                           fsr2h	equ	0xFDA
  2706                           fsr2l	equ	0xFD9
  2707                           status	equ	0xFD8
  2708                           
  2709 ;; *************** function _KalmanFilter_9 *****************
  2710 ;; Defined at:
  2711 ;;		line 269 in file "harwave/flex.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  ResrcData_9     3   52[COMRAM] const 
  2714 ;;  ProcessNiose    3   55[COMRAM] const 
  2715 ;;  MeasureNoise    3   58[COMRAM] const 
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  p_mid           3   82[COMRAM] const 
  2718 ;;  x_mid           3   79[COMRAM] const 
  2719 ;;  kg              3   76[COMRAM] const 
  2720 ;;  x_now           3   73[COMRAM] const 
  2721 ;;  p_now           3   67[COMRAM] const 
  2722 ;;  Q               3   64[COMRAM] const 
  2723 ;;  R               3   61[COMRAM] const 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  3   52[COMRAM] const 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2733 ;;      Params:         9       0       0       0       0       0       0
  2734 ;;      Locals:        24       0       0       0       0       0       0
  2735 ;;      Temps:          0       0       0       0       0       0       0
  2736 ;;      Totals:        33       0       0       0       0       0       0
  2737 ;;Total ram usage:       33 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:    3
  2740 ;; This function calls:
  2741 ;;		___ftadd
  2742 ;;		___ftdiv
  2743 ;;		___ftmul
  2744 ;;		___ftneg
  2745 ;; This function is called by:
  2746 ;;		_translate_flex
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           	psect	text5
  2751  000DD2                     __ptext5:
  2752                           	opt stack 0
  2753  000DD2                     _KalmanFilter_9:
  2754                           	opt stack 26
  2755                           
  2756                           ;flex.c: 272: double R = MeasureNoise_R_9;
  2757                           
  2758                           ;incstack = 0
  2759  000DD2  C03B  F03E         	movff	KalmanFilter_9@MeasureNoise_R_9,KalmanFilter_9@R
  2760  000DD6  C03C  F03F         	movff	KalmanFilter_9@MeasureNoise_R_9+1,KalmanFilter_9@R+1
  2761  000DDA  C03D  F040         	movff	KalmanFilter_9@MeasureNoise_R_9+2,KalmanFilter_9@R+2
  2762                           
  2763                           ;flex.c: 273: double Q = ProcessNiose_Q_9;
  2764  000DDE  C038  F041         	movff	KalmanFilter_9@ProcessNiose_Q_9,KalmanFilter_9@Q
  2765  000DE2  C039  F042         	movff	KalmanFilter_9@ProcessNiose_Q_9+1,KalmanFilter_9@Q+1
  2766  000DE6  C03A  F043         	movff	KalmanFilter_9@ProcessNiose_Q_9+2,KalmanFilter_9@Q+2
  2767                           
  2768                           ;flex.c: 275: static double x_last_9;
  2769                           ;flex.c: 276: double x_mid = x_last_9;
  2770  000DEA  C17D  F050         	movff	KalmanFilter_9@x_last_9,KalmanFilter_9@x_mid
  2771  000DEE  C17E  F051         	movff	KalmanFilter_9@x_last_9+1,KalmanFilter_9@x_mid+1
  2772  000DF2  C17F  F052         	movff	KalmanFilter_9@x_last_9+2,KalmanFilter_9@x_mid+2
  2773                           
  2774                           ;flex.c: 277: double x_now;
  2775                           ;flex.c: 279: static double p_last_9;
  2776                           ;flex.c: 280: double p_mid ;
  2777                           ;flex.c: 281: double p_now;
  2778                           ;flex.c: 283: double kg;
  2779                           ;flex.c: 285: x_mid=x_last_9;
  2780  000DF6  C17D  F050         	movff	KalmanFilter_9@x_last_9,KalmanFilter_9@x_mid
  2781  000DFA  C17E  F051         	movff	KalmanFilter_9@x_last_9+1,KalmanFilter_9@x_mid+1
  2782  000DFE  C17F  F052         	movff	KalmanFilter_9@x_last_9+2,KalmanFilter_9@x_mid+2
  2783                           
  2784                           ;flex.c: 286: p_mid=p_last_9+Q;
  2785  000E02  C17A  F01A         	movff	KalmanFilter_9@p_last_9,___ftadd@f1
  2786  000E06  C17B  F01B         	movff	KalmanFilter_9@p_last_9+1,___ftadd@f1+1
  2787  000E0A  C17C  F01C         	movff	KalmanFilter_9@p_last_9+2,___ftadd@f1+2
  2788  000E0E  C041  F01D         	movff	KalmanFilter_9@Q,___ftadd@f2
  2789  000E12  C042  F01E         	movff	KalmanFilter_9@Q+1,___ftadd@f2+1
  2790  000E16  C043  F01F         	movff	KalmanFilter_9@Q+2,___ftadd@f2+2
  2791  000E1A  EC13  F006         	call	___ftadd	;wreg free
  2792  000E1E  C01A  F053         	movff	?___ftadd,KalmanFilter_9@p_mid
  2793  000E22  C01B  F054         	movff	?___ftadd+1,KalmanFilter_9@p_mid+1
  2794  000E26  C01C  F055         	movff	?___ftadd+2,KalmanFilter_9@p_mid+2
  2795                           
  2796                           ;flex.c: 291: kg=p_mid/(p_mid+R);
  2797  000E2A  C053  F026         	movff	KalmanFilter_9@p_mid,___ftdiv@f1
  2798  000E2E  C054  F027         	movff	KalmanFilter_9@p_mid+1,___ftdiv@f1+1
  2799  000E32  C055  F028         	movff	KalmanFilter_9@p_mid+2,___ftdiv@f1+2
  2800  000E36  C03E  F01D         	movff	KalmanFilter_9@R,___ftadd@f2
  2801  000E3A  C03F  F01E         	movff	KalmanFilter_9@R+1,___ftadd@f2+1
  2802  000E3E  C040  F01F         	movff	KalmanFilter_9@R+2,___ftadd@f2+2
  2803  000E42  C053  F01A         	movff	KalmanFilter_9@p_mid,___ftadd@f1
  2804  000E46  C054  F01B         	movff	KalmanFilter_9@p_mid+1,___ftadd@f1+1
  2805  000E4A  C055  F01C         	movff	KalmanFilter_9@p_mid+2,___ftadd@f1+2
  2806  000E4E  EC13  F006         	call	___ftadd	;wreg free
  2807  000E52  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  2808  000E56  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  2809  000E5A  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  2810  000E5E  ECDF  F010         	call	___ftdiv	;wreg free
  2811  000E62  C026  F04D         	movff	?___ftdiv,KalmanFilter_9@kg
  2812  000E66  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_9@kg+1
  2813  000E6A  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_9@kg+2
  2814                           
  2815                           ;flex.c: 292: x_now=x_mid+kg*(ResrcData_9-x_mid);
  2816  000E6E  C04D  F029         	movff	KalmanFilter_9@kg,___ftmul@f2
  2817  000E72  C04E  F02A         	movff	KalmanFilter_9@kg+1,___ftmul@f2+1
  2818  000E76  C04F  F02B         	movff	KalmanFilter_9@kg+2,___ftmul@f2+2
  2819  000E7A  C035  F01D         	movff	KalmanFilter_9@ResrcData_9,___ftadd@f2
  2820  000E7E  C036  F01E         	movff	KalmanFilter_9@ResrcData_9+1,___ftadd@f2+1
  2821  000E82  C037  F01F         	movff	KalmanFilter_9@ResrcData_9+2,___ftadd@f2+2
  2822  000E86  C050  F012         	movff	KalmanFilter_9@x_mid,___ftneg@f1
  2823  000E8A  C051  F013         	movff	KalmanFilter_9@x_mid+1,___ftneg@f1+1
  2824  000E8E  C052  F014         	movff	KalmanFilter_9@x_mid+2,___ftneg@f1+2
  2825  000E92  ECA8  F015         	call	___ftneg	;wreg free
  2826  000E96  C012  F01A         	movff	?___ftneg,___ftadd@f1
  2827  000E9A  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  2828  000E9E  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  2829  000EA2  EC13  F006         	call	___ftadd	;wreg free
  2830  000EA6  C01A  F026         	movff	?___ftadd,___ftmul@f1
  2831  000EAA  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  2832  000EAE  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  2833  000EB2  EC65  F010         	call	___ftmul	;wreg free
  2834  000EB6  C026  F047         	movff	?___ftmul,_KalmanFilter_9$2192
  2835  000EBA  C027  F048         	movff	?___ftmul+1,_KalmanFilter_9$2192+1
  2836  000EBE  C028  F049         	movff	?___ftmul+2,_KalmanFilter_9$2192+2
  2837                           
  2838                           ;flex.c: 292: x_now=x_mid+kg*(ResrcData_9-x_mid);
  2839  000EC2  C047  F01A         	movff	_KalmanFilter_9$2192,___ftadd@f1
  2840  000EC6  C048  F01B         	movff	_KalmanFilter_9$2192+1,___ftadd@f1+1
  2841  000ECA  C049  F01C         	movff	_KalmanFilter_9$2192+2,___ftadd@f1+2
  2842  000ECE  C050  F01D         	movff	KalmanFilter_9@x_mid,___ftadd@f2
  2843  000ED2  C051  F01E         	movff	KalmanFilter_9@x_mid+1,___ftadd@f2+1
  2844  000ED6  C052  F01F         	movff	KalmanFilter_9@x_mid+2,___ftadd@f2+2
  2845  000EDA  EC13  F006         	call	___ftadd	;wreg free
  2846  000EDE  C01A  F04A         	movff	?___ftadd,KalmanFilter_9@x_now
  2847  000EE2  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_9@x_now+1
  2848  000EE6  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_9@x_now+2
  2849                           
  2850                           ;flex.c: 293: p_now=(1-kg)*p_mid;
  2851  000EEA  0E00               	movlw	0
  2852  000EEC  6E1D               	movwf	___ftadd@f2,c
  2853  000EEE  0E80               	movlw	128
  2854  000EF0  6E1E               	movwf	___ftadd@f2+1,c
  2855  000EF2  0E3F               	movlw	63
  2856  000EF4  6E1F               	movwf	___ftadd@f2+2,c
  2857  000EF6  C04D  F012         	movff	KalmanFilter_9@kg,___ftneg@f1
  2858  000EFA  C04E  F013         	movff	KalmanFilter_9@kg+1,___ftneg@f1+1
  2859  000EFE  C04F  F014         	movff	KalmanFilter_9@kg+2,___ftneg@f1+2
  2860  000F02  ECA8  F015         	call	___ftneg	;wreg free
  2861  000F06  C012  F01A         	movff	?___ftneg,___ftadd@f1
  2862  000F0A  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  2863  000F0E  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  2864  000F12  EC13  F006         	call	___ftadd	;wreg free
  2865  000F16  C01A  F026         	movff	?___ftadd,___ftmul@f1
  2866  000F1A  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  2867  000F1E  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  2868  000F22  C053  F029         	movff	KalmanFilter_9@p_mid,___ftmul@f2
  2869  000F26  C054  F02A         	movff	KalmanFilter_9@p_mid+1,___ftmul@f2+1
  2870  000F2A  C055  F02B         	movff	KalmanFilter_9@p_mid+2,___ftmul@f2+2
  2871  000F2E  EC65  F010         	call	___ftmul	;wreg free
  2872  000F32  C026  F044         	movff	?___ftmul,KalmanFilter_9@p_now
  2873  000F36  C027  F045         	movff	?___ftmul+1,KalmanFilter_9@p_now+1
  2874  000F3A  C028  F046         	movff	?___ftmul+2,KalmanFilter_9@p_now+2
  2875                           
  2876                           ;flex.c: 294: p_last_9 = p_now;
  2877  000F3E  C044  F17A         	movff	KalmanFilter_9@p_now,KalmanFilter_9@p_last_9
  2878  000F42  C045  F17B         	movff	KalmanFilter_9@p_now+1,KalmanFilter_9@p_last_9+1
  2879  000F46  C046  F17C         	movff	KalmanFilter_9@p_now+2,KalmanFilter_9@p_last_9+2
  2880                           
  2881                           ;flex.c: 295: x_last_9 = x_now;
  2882  000F4A  C04A  F17D         	movff	KalmanFilter_9@x_now,KalmanFilter_9@x_last_9
  2883  000F4E  C04B  F17E         	movff	KalmanFilter_9@x_now+1,KalmanFilter_9@x_last_9+1
  2884  000F52  C04C  F17F         	movff	KalmanFilter_9@x_now+2,KalmanFilter_9@x_last_9+2
  2885                           
  2886                           ;flex.c: 296: return x_now;
  2887  000F56  C04A  F035         	movff	KalmanFilter_9@x_now,?_KalmanFilter_9
  2888  000F5A  C04B  F036         	movff	KalmanFilter_9@x_now+1,?_KalmanFilter_9+1
  2889  000F5E  C04C  F037         	movff	KalmanFilter_9@x_now+2,?_KalmanFilter_9+2
  2890  000F62  0012               	return	
  2891  000F64                     __end_of_KalmanFilter_9:
  2892                           	opt stack 0
  2893                           tblptru	equ	0xFF8
  2894                           postinc0	equ	0xFEE
  2895                           wreg	equ	0xFE8
  2896                           indf2	equ	0xFDF
  2897                           fsr2h	equ	0xFDA
  2898                           fsr2l	equ	0xFD9
  2899                           status	equ	0xFD8
  2900                           
  2901 ;; *************** function _KalmanFilter_8 *****************
  2902 ;; Defined at:
  2903 ;;		line 240 in file "harwave/flex.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  ResrcData_8     3   52[COMRAM] const 
  2906 ;;  ProcessNiose    3   55[COMRAM] const 
  2907 ;;  MeasureNoise    3   58[COMRAM] const 
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;  p_mid           3   82[COMRAM] const 
  2910 ;;  x_mid           3   79[COMRAM] const 
  2911 ;;  kg              3   76[COMRAM] const 
  2912 ;;  x_now           3   73[COMRAM] const 
  2913 ;;  p_now           3   67[COMRAM] const 
  2914 ;;  Q               3   64[COMRAM] const 
  2915 ;;  R               3   61[COMRAM] const 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  3   52[COMRAM] const 
  2918 ;; Registers used:
  2919 ;;		wreg, status,2, status,0, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2925 ;;      Params:         9       0       0       0       0       0       0
  2926 ;;      Locals:        24       0       0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0
  2928 ;;      Totals:        33       0       0       0       0       0       0
  2929 ;;Total ram usage:       33 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    3
  2932 ;; This function calls:
  2933 ;;		___ftadd
  2934 ;;		___ftdiv
  2935 ;;		___ftmul
  2936 ;;		___ftneg
  2937 ;; This function is called by:
  2938 ;;		_translate_flex
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text6
  2943  000F64                     __ptext6:
  2944                           	opt stack 0
  2945  000F64                     _KalmanFilter_8:
  2946                           	opt stack 26
  2947                           
  2948                           ;flex.c: 243: double R = MeasureNoise_R_8;
  2949                           
  2950                           ;incstack = 0
  2951  000F64  C03B  F03E         	movff	KalmanFilter_8@MeasureNoise_R_8,KalmanFilter_8@R
  2952  000F68  C03C  F03F         	movff	KalmanFilter_8@MeasureNoise_R_8+1,KalmanFilter_8@R+1
  2953  000F6C  C03D  F040         	movff	KalmanFilter_8@MeasureNoise_R_8+2,KalmanFilter_8@R+2
  2954                           
  2955                           ;flex.c: 244: double Q = ProcessNiose_Q_8;
  2956  000F70  C038  F041         	movff	KalmanFilter_8@ProcessNiose_Q_8,KalmanFilter_8@Q
  2957  000F74  C039  F042         	movff	KalmanFilter_8@ProcessNiose_Q_8+1,KalmanFilter_8@Q+1
  2958  000F78  C03A  F043         	movff	KalmanFilter_8@ProcessNiose_Q_8+2,KalmanFilter_8@Q+2
  2959                           
  2960                           ;flex.c: 246: static double x_last_8;
  2961                           ;flex.c: 247: double x_mid = x_last_8;
  2962  000F7C  C183  F050         	movff	KalmanFilter_8@x_last_8,KalmanFilter_8@x_mid
  2963  000F80  C184  F051         	movff	KalmanFilter_8@x_last_8+1,KalmanFilter_8@x_mid+1
  2964  000F84  C185  F052         	movff	KalmanFilter_8@x_last_8+2,KalmanFilter_8@x_mid+2
  2965                           
  2966                           ;flex.c: 248: double x_now;
  2967                           ;flex.c: 250: static double p_last_8;
  2968                           ;flex.c: 251: double p_mid ;
  2969                           ;flex.c: 252: double p_now;
  2970                           ;flex.c: 254: double kg;
  2971                           ;flex.c: 256: x_mid=x_last_8;
  2972  000F88  C183  F050         	movff	KalmanFilter_8@x_last_8,KalmanFilter_8@x_mid
  2973  000F8C  C184  F051         	movff	KalmanFilter_8@x_last_8+1,KalmanFilter_8@x_mid+1
  2974  000F90  C185  F052         	movff	KalmanFilter_8@x_last_8+2,KalmanFilter_8@x_mid+2
  2975                           
  2976                           ;flex.c: 257: p_mid=p_last_8+Q;
  2977  000F94  C180  F01A         	movff	KalmanFilter_8@p_last_8,___ftadd@f1
  2978  000F98  C181  F01B         	movff	KalmanFilter_8@p_last_8+1,___ftadd@f1+1
  2979  000F9C  C182  F01C         	movff	KalmanFilter_8@p_last_8+2,___ftadd@f1+2
  2980  000FA0  C041  F01D         	movff	KalmanFilter_8@Q,___ftadd@f2
  2981  000FA4  C042  F01E         	movff	KalmanFilter_8@Q+1,___ftadd@f2+1
  2982  000FA8  C043  F01F         	movff	KalmanFilter_8@Q+2,___ftadd@f2+2
  2983  000FAC  EC13  F006         	call	___ftadd	;wreg free
  2984  000FB0  C01A  F053         	movff	?___ftadd,KalmanFilter_8@p_mid
  2985  000FB4  C01B  F054         	movff	?___ftadd+1,KalmanFilter_8@p_mid+1
  2986  000FB8  C01C  F055         	movff	?___ftadd+2,KalmanFilter_8@p_mid+2
  2987                           
  2988                           ;flex.c: 262: kg=p_mid/(p_mid+R);
  2989  000FBC  C053  F026         	movff	KalmanFilter_8@p_mid,___ftdiv@f1
  2990  000FC0  C054  F027         	movff	KalmanFilter_8@p_mid+1,___ftdiv@f1+1
  2991  000FC4  C055  F028         	movff	KalmanFilter_8@p_mid+2,___ftdiv@f1+2
  2992  000FC8  C03E  F01D         	movff	KalmanFilter_8@R,___ftadd@f2
  2993  000FCC  C03F  F01E         	movff	KalmanFilter_8@R+1,___ftadd@f2+1
  2994  000FD0  C040  F01F         	movff	KalmanFilter_8@R+2,___ftadd@f2+2
  2995  000FD4  C053  F01A         	movff	KalmanFilter_8@p_mid,___ftadd@f1
  2996  000FD8  C054  F01B         	movff	KalmanFilter_8@p_mid+1,___ftadd@f1+1
  2997  000FDC  C055  F01C         	movff	KalmanFilter_8@p_mid+2,___ftadd@f1+2
  2998  000FE0  EC13  F006         	call	___ftadd	;wreg free
  2999  000FE4  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3000  000FE8  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3001  000FEC  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3002  000FF0  ECDF  F010         	call	___ftdiv	;wreg free
  3003  000FF4  C026  F04D         	movff	?___ftdiv,KalmanFilter_8@kg
  3004  000FF8  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_8@kg+1
  3005  000FFC  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_8@kg+2
  3006                           
  3007                           ;flex.c: 263: x_now=x_mid+kg*(ResrcData_8-x_mid);
  3008  001000  C04D  F029         	movff	KalmanFilter_8@kg,___ftmul@f2
  3009  001004  C04E  F02A         	movff	KalmanFilter_8@kg+1,___ftmul@f2+1
  3010  001008  C04F  F02B         	movff	KalmanFilter_8@kg+2,___ftmul@f2+2
  3011  00100C  C035  F01D         	movff	KalmanFilter_8@ResrcData_8,___ftadd@f2
  3012  001010  C036  F01E         	movff	KalmanFilter_8@ResrcData_8+1,___ftadd@f2+1
  3013  001014  C037  F01F         	movff	KalmanFilter_8@ResrcData_8+2,___ftadd@f2+2
  3014  001018  C050  F012         	movff	KalmanFilter_8@x_mid,___ftneg@f1
  3015  00101C  C051  F013         	movff	KalmanFilter_8@x_mid+1,___ftneg@f1+1
  3016  001020  C052  F014         	movff	KalmanFilter_8@x_mid+2,___ftneg@f1+2
  3017  001024  ECA8  F015         	call	___ftneg	;wreg free
  3018  001028  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3019  00102C  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3020  001030  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3021  001034  EC13  F006         	call	___ftadd	;wreg free
  3022  001038  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3023  00103C  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3024  001040  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3025  001044  EC65  F010         	call	___ftmul	;wreg free
  3026  001048  C026  F047         	movff	?___ftmul,_KalmanFilter_8$2191
  3027  00104C  C027  F048         	movff	?___ftmul+1,_KalmanFilter_8$2191+1
  3028  001050  C028  F049         	movff	?___ftmul+2,_KalmanFilter_8$2191+2
  3029                           
  3030                           ;flex.c: 263: x_now=x_mid+kg*(ResrcData_8-x_mid);
  3031  001054  C047  F01A         	movff	_KalmanFilter_8$2191,___ftadd@f1
  3032  001058  C048  F01B         	movff	_KalmanFilter_8$2191+1,___ftadd@f1+1
  3033  00105C  C049  F01C         	movff	_KalmanFilter_8$2191+2,___ftadd@f1+2
  3034  001060  C050  F01D         	movff	KalmanFilter_8@x_mid,___ftadd@f2
  3035  001064  C051  F01E         	movff	KalmanFilter_8@x_mid+1,___ftadd@f2+1
  3036  001068  C052  F01F         	movff	KalmanFilter_8@x_mid+2,___ftadd@f2+2
  3037  00106C  EC13  F006         	call	___ftadd	;wreg free
  3038  001070  C01A  F04A         	movff	?___ftadd,KalmanFilter_8@x_now
  3039  001074  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_8@x_now+1
  3040  001078  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_8@x_now+2
  3041                           
  3042                           ;flex.c: 264: p_now=(1-kg)*p_mid;
  3043  00107C  0E00               	movlw	0
  3044  00107E  6E1D               	movwf	___ftadd@f2,c
  3045  001080  0E80               	movlw	128
  3046  001082  6E1E               	movwf	___ftadd@f2+1,c
  3047  001084  0E3F               	movlw	63
  3048  001086  6E1F               	movwf	___ftadd@f2+2,c
  3049  001088  C04D  F012         	movff	KalmanFilter_8@kg,___ftneg@f1
  3050  00108C  C04E  F013         	movff	KalmanFilter_8@kg+1,___ftneg@f1+1
  3051  001090  C04F  F014         	movff	KalmanFilter_8@kg+2,___ftneg@f1+2
  3052  001094  ECA8  F015         	call	___ftneg	;wreg free
  3053  001098  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3054  00109C  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3055  0010A0  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3056  0010A4  EC13  F006         	call	___ftadd	;wreg free
  3057  0010A8  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3058  0010AC  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3059  0010B0  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3060  0010B4  C053  F029         	movff	KalmanFilter_8@p_mid,___ftmul@f2
  3061  0010B8  C054  F02A         	movff	KalmanFilter_8@p_mid+1,___ftmul@f2+1
  3062  0010BC  C055  F02B         	movff	KalmanFilter_8@p_mid+2,___ftmul@f2+2
  3063  0010C0  EC65  F010         	call	___ftmul	;wreg free
  3064  0010C4  C026  F044         	movff	?___ftmul,KalmanFilter_8@p_now
  3065  0010C8  C027  F045         	movff	?___ftmul+1,KalmanFilter_8@p_now+1
  3066  0010CC  C028  F046         	movff	?___ftmul+2,KalmanFilter_8@p_now+2
  3067                           
  3068                           ;flex.c: 265: p_last_8 = p_now;
  3069  0010D0  C044  F180         	movff	KalmanFilter_8@p_now,KalmanFilter_8@p_last_8
  3070  0010D4  C045  F181         	movff	KalmanFilter_8@p_now+1,KalmanFilter_8@p_last_8+1
  3071  0010D8  C046  F182         	movff	KalmanFilter_8@p_now+2,KalmanFilter_8@p_last_8+2
  3072                           
  3073                           ;flex.c: 266: x_last_8 = x_now;
  3074  0010DC  C04A  F183         	movff	KalmanFilter_8@x_now,KalmanFilter_8@x_last_8
  3075  0010E0  C04B  F184         	movff	KalmanFilter_8@x_now+1,KalmanFilter_8@x_last_8+1
  3076  0010E4  C04C  F185         	movff	KalmanFilter_8@x_now+2,KalmanFilter_8@x_last_8+2
  3077                           
  3078                           ;flex.c: 267: return x_now;
  3079  0010E8  C04A  F035         	movff	KalmanFilter_8@x_now,?_KalmanFilter_8
  3080  0010EC  C04B  F036         	movff	KalmanFilter_8@x_now+1,?_KalmanFilter_8+1
  3081  0010F0  C04C  F037         	movff	KalmanFilter_8@x_now+2,?_KalmanFilter_8+2
  3082  0010F4  0012               	return	
  3083  0010F6                     __end_of_KalmanFilter_8:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           postinc0	equ	0xFEE
  3087                           wreg	equ	0xFE8
  3088                           indf2	equ	0xFDF
  3089                           fsr2h	equ	0xFDA
  3090                           fsr2l	equ	0xFD9
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function _KalmanFilter_7 *****************
  3094 ;; Defined at:
  3095 ;;		line 211 in file "harwave/flex.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  ResrcData_7     3   52[COMRAM] const 
  3098 ;;  ProcessNiose    3   55[COMRAM] const 
  3099 ;;  MeasureNoise    3   58[COMRAM] const 
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  p_mid           3   82[COMRAM] const 
  3102 ;;  x_mid           3   79[COMRAM] const 
  3103 ;;  kg              3   76[COMRAM] const 
  3104 ;;  x_now           3   73[COMRAM] const 
  3105 ;;  p_now           3   67[COMRAM] const 
  3106 ;;  Q               3   64[COMRAM] const 
  3107 ;;  R               3   61[COMRAM] const 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  3   52[COMRAM] const 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3117 ;;      Params:         9       0       0       0       0       0       0
  3118 ;;      Locals:        24       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0
  3120 ;;      Totals:        33       0       0       0       0       0       0
  3121 ;;Total ram usage:       33 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    3
  3124 ;; This function calls:
  3125 ;;		___ftadd
  3126 ;;		___ftdiv
  3127 ;;		___ftmul
  3128 ;;		___ftneg
  3129 ;; This function is called by:
  3130 ;;		_translate_flex
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text7
  3135  0010F6                     __ptext7:
  3136                           	opt stack 0
  3137  0010F6                     _KalmanFilter_7:
  3138                           	opt stack 26
  3139                           
  3140                           ;flex.c: 214: double R = MeasureNoise_R_7;
  3141                           
  3142                           ;incstack = 0
  3143  0010F6  C03B  F03E         	movff	KalmanFilter_7@MeasureNoise_R_7,KalmanFilter_7@R
  3144  0010FA  C03C  F03F         	movff	KalmanFilter_7@MeasureNoise_R_7+1,KalmanFilter_7@R+1
  3145  0010FE  C03D  F040         	movff	KalmanFilter_7@MeasureNoise_R_7+2,KalmanFilter_7@R+2
  3146                           
  3147                           ;flex.c: 215: double Q = ProcessNiose_Q_7;
  3148  001102  C038  F041         	movff	KalmanFilter_7@ProcessNiose_Q_7,KalmanFilter_7@Q
  3149  001106  C039  F042         	movff	KalmanFilter_7@ProcessNiose_Q_7+1,KalmanFilter_7@Q+1
  3150  00110A  C03A  F043         	movff	KalmanFilter_7@ProcessNiose_Q_7+2,KalmanFilter_7@Q+2
  3151                           
  3152                           ;flex.c: 217: static double x_last_7;
  3153                           ;flex.c: 218: double x_mid = x_last_7;
  3154  00110E  C189  F050         	movff	KalmanFilter_7@x_last_7,KalmanFilter_7@x_mid
  3155  001112  C18A  F051         	movff	KalmanFilter_7@x_last_7+1,KalmanFilter_7@x_mid+1
  3156  001116  C18B  F052         	movff	KalmanFilter_7@x_last_7+2,KalmanFilter_7@x_mid+2
  3157                           
  3158                           ;flex.c: 219: double x_now;
  3159                           ;flex.c: 221: static double p_last_7;
  3160                           ;flex.c: 222: double p_mid ;
  3161                           ;flex.c: 223: double p_now;
  3162                           ;flex.c: 225: double kg;
  3163                           ;flex.c: 227: x_mid=x_last_7;
  3164  00111A  C189  F050         	movff	KalmanFilter_7@x_last_7,KalmanFilter_7@x_mid
  3165  00111E  C18A  F051         	movff	KalmanFilter_7@x_last_7+1,KalmanFilter_7@x_mid+1
  3166  001122  C18B  F052         	movff	KalmanFilter_7@x_last_7+2,KalmanFilter_7@x_mid+2
  3167                           
  3168                           ;flex.c: 228: p_mid=p_last_7+Q;
  3169  001126  C186  F01A         	movff	KalmanFilter_7@p_last_7,___ftadd@f1
  3170  00112A  C187  F01B         	movff	KalmanFilter_7@p_last_7+1,___ftadd@f1+1
  3171  00112E  C188  F01C         	movff	KalmanFilter_7@p_last_7+2,___ftadd@f1+2
  3172  001132  C041  F01D         	movff	KalmanFilter_7@Q,___ftadd@f2
  3173  001136  C042  F01E         	movff	KalmanFilter_7@Q+1,___ftadd@f2+1
  3174  00113A  C043  F01F         	movff	KalmanFilter_7@Q+2,___ftadd@f2+2
  3175  00113E  EC13  F006         	call	___ftadd	;wreg free
  3176  001142  C01A  F053         	movff	?___ftadd,KalmanFilter_7@p_mid
  3177  001146  C01B  F054         	movff	?___ftadd+1,KalmanFilter_7@p_mid+1
  3178  00114A  C01C  F055         	movff	?___ftadd+2,KalmanFilter_7@p_mid+2
  3179                           
  3180                           ;flex.c: 233: kg=p_mid/(p_mid+R);
  3181  00114E  C053  F026         	movff	KalmanFilter_7@p_mid,___ftdiv@f1
  3182  001152  C054  F027         	movff	KalmanFilter_7@p_mid+1,___ftdiv@f1+1
  3183  001156  C055  F028         	movff	KalmanFilter_7@p_mid+2,___ftdiv@f1+2
  3184  00115A  C03E  F01D         	movff	KalmanFilter_7@R,___ftadd@f2
  3185  00115E  C03F  F01E         	movff	KalmanFilter_7@R+1,___ftadd@f2+1
  3186  001162  C040  F01F         	movff	KalmanFilter_7@R+2,___ftadd@f2+2
  3187  001166  C053  F01A         	movff	KalmanFilter_7@p_mid,___ftadd@f1
  3188  00116A  C054  F01B         	movff	KalmanFilter_7@p_mid+1,___ftadd@f1+1
  3189  00116E  C055  F01C         	movff	KalmanFilter_7@p_mid+2,___ftadd@f1+2
  3190  001172  EC13  F006         	call	___ftadd	;wreg free
  3191  001176  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3192  00117A  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3193  00117E  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3194  001182  ECDF  F010         	call	___ftdiv	;wreg free
  3195  001186  C026  F04D         	movff	?___ftdiv,KalmanFilter_7@kg
  3196  00118A  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_7@kg+1
  3197  00118E  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_7@kg+2
  3198                           
  3199                           ;flex.c: 234: x_now=x_mid+kg*(ResrcData_7-x_mid);
  3200  001192  C04D  F029         	movff	KalmanFilter_7@kg,___ftmul@f2
  3201  001196  C04E  F02A         	movff	KalmanFilter_7@kg+1,___ftmul@f2+1
  3202  00119A  C04F  F02B         	movff	KalmanFilter_7@kg+2,___ftmul@f2+2
  3203  00119E  C035  F01D         	movff	KalmanFilter_7@ResrcData_7,___ftadd@f2
  3204  0011A2  C036  F01E         	movff	KalmanFilter_7@ResrcData_7+1,___ftadd@f2+1
  3205  0011A6  C037  F01F         	movff	KalmanFilter_7@ResrcData_7+2,___ftadd@f2+2
  3206  0011AA  C050  F012         	movff	KalmanFilter_7@x_mid,___ftneg@f1
  3207  0011AE  C051  F013         	movff	KalmanFilter_7@x_mid+1,___ftneg@f1+1
  3208  0011B2  C052  F014         	movff	KalmanFilter_7@x_mid+2,___ftneg@f1+2
  3209  0011B6  ECA8  F015         	call	___ftneg	;wreg free
  3210  0011BA  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3211  0011BE  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3212  0011C2  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3213  0011C6  EC13  F006         	call	___ftadd	;wreg free
  3214  0011CA  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3215  0011CE  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3216  0011D2  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3217  0011D6  EC65  F010         	call	___ftmul	;wreg free
  3218  0011DA  C026  F047         	movff	?___ftmul,_KalmanFilter_7$2190
  3219  0011DE  C027  F048         	movff	?___ftmul+1,_KalmanFilter_7$2190+1
  3220  0011E2  C028  F049         	movff	?___ftmul+2,_KalmanFilter_7$2190+2
  3221                           
  3222                           ;flex.c: 234: x_now=x_mid+kg*(ResrcData_7-x_mid);
  3223  0011E6  C047  F01A         	movff	_KalmanFilter_7$2190,___ftadd@f1
  3224  0011EA  C048  F01B         	movff	_KalmanFilter_7$2190+1,___ftadd@f1+1
  3225  0011EE  C049  F01C         	movff	_KalmanFilter_7$2190+2,___ftadd@f1+2
  3226  0011F2  C050  F01D         	movff	KalmanFilter_7@x_mid,___ftadd@f2
  3227  0011F6  C051  F01E         	movff	KalmanFilter_7@x_mid+1,___ftadd@f2+1
  3228  0011FA  C052  F01F         	movff	KalmanFilter_7@x_mid+2,___ftadd@f2+2
  3229  0011FE  EC13  F006         	call	___ftadd	;wreg free
  3230  001202  C01A  F04A         	movff	?___ftadd,KalmanFilter_7@x_now
  3231  001206  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_7@x_now+1
  3232  00120A  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_7@x_now+2
  3233                           
  3234                           ;flex.c: 235: p_now=(1-kg)*p_mid;
  3235  00120E  0E00               	movlw	0
  3236  001210  6E1D               	movwf	___ftadd@f2,c
  3237  001212  0E80               	movlw	128
  3238  001214  6E1E               	movwf	___ftadd@f2+1,c
  3239  001216  0E3F               	movlw	63
  3240  001218  6E1F               	movwf	___ftadd@f2+2,c
  3241  00121A  C04D  F012         	movff	KalmanFilter_7@kg,___ftneg@f1
  3242  00121E  C04E  F013         	movff	KalmanFilter_7@kg+1,___ftneg@f1+1
  3243  001222  C04F  F014         	movff	KalmanFilter_7@kg+2,___ftneg@f1+2
  3244  001226  ECA8  F015         	call	___ftneg	;wreg free
  3245  00122A  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3246  00122E  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3247  001232  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3248  001236  EC13  F006         	call	___ftadd	;wreg free
  3249  00123A  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3250  00123E  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3251  001242  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3252  001246  C053  F029         	movff	KalmanFilter_7@p_mid,___ftmul@f2
  3253  00124A  C054  F02A         	movff	KalmanFilter_7@p_mid+1,___ftmul@f2+1
  3254  00124E  C055  F02B         	movff	KalmanFilter_7@p_mid+2,___ftmul@f2+2
  3255  001252  EC65  F010         	call	___ftmul	;wreg free
  3256  001256  C026  F044         	movff	?___ftmul,KalmanFilter_7@p_now
  3257  00125A  C027  F045         	movff	?___ftmul+1,KalmanFilter_7@p_now+1
  3258  00125E  C028  F046         	movff	?___ftmul+2,KalmanFilter_7@p_now+2
  3259                           
  3260                           ;flex.c: 236: p_last_7 = p_now;
  3261  001262  C044  F186         	movff	KalmanFilter_7@p_now,KalmanFilter_7@p_last_7
  3262  001266  C045  F187         	movff	KalmanFilter_7@p_now+1,KalmanFilter_7@p_last_7+1
  3263  00126A  C046  F188         	movff	KalmanFilter_7@p_now+2,KalmanFilter_7@p_last_7+2
  3264                           
  3265                           ;flex.c: 237: x_last_7 = x_now;
  3266  00126E  C04A  F189         	movff	KalmanFilter_7@x_now,KalmanFilter_7@x_last_7
  3267  001272  C04B  F18A         	movff	KalmanFilter_7@x_now+1,KalmanFilter_7@x_last_7+1
  3268  001276  C04C  F18B         	movff	KalmanFilter_7@x_now+2,KalmanFilter_7@x_last_7+2
  3269                           
  3270                           ;flex.c: 238: return x_now;
  3271  00127A  C04A  F035         	movff	KalmanFilter_7@x_now,?_KalmanFilter_7
  3272  00127E  C04B  F036         	movff	KalmanFilter_7@x_now+1,?_KalmanFilter_7+1
  3273  001282  C04C  F037         	movff	KalmanFilter_7@x_now+2,?_KalmanFilter_7+2
  3274  001286  0012               	return	
  3275  001288                     __end_of_KalmanFilter_7:
  3276                           	opt stack 0
  3277                           tblptru	equ	0xFF8
  3278                           postinc0	equ	0xFEE
  3279                           wreg	equ	0xFE8
  3280                           indf2	equ	0xFDF
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _KalmanFilter_6 *****************
  3286 ;; Defined at:
  3287 ;;		line 182 in file "harwave/flex.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  ResrcData_6     3   52[COMRAM] const 
  3290 ;;  ProcessNiose    3   55[COMRAM] const 
  3291 ;;  MeasureNoise    3   58[COMRAM] const 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  p_mid           3   82[COMRAM] const 
  3294 ;;  x_mid           3   79[COMRAM] const 
  3295 ;;  kg              3   76[COMRAM] const 
  3296 ;;  x_now           3   73[COMRAM] const 
  3297 ;;  p_now           3   67[COMRAM] const 
  3298 ;;  Q               3   64[COMRAM] const 
  3299 ;;  R               3   61[COMRAM] const 
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  3   52[COMRAM] const 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3309 ;;      Params:         9       0       0       0       0       0       0
  3310 ;;      Locals:        24       0       0       0       0       0       0
  3311 ;;      Temps:          0       0       0       0       0       0       0
  3312 ;;      Totals:        33       0       0       0       0       0       0
  3313 ;;Total ram usage:       33 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    3
  3316 ;; This function calls:
  3317 ;;		___ftadd
  3318 ;;		___ftdiv
  3319 ;;		___ftmul
  3320 ;;		___ftneg
  3321 ;; This function is called by:
  3322 ;;		_translate_flex
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text8
  3327  001288                     __ptext8:
  3328                           	opt stack 0
  3329  001288                     _KalmanFilter_6:
  3330                           	opt stack 26
  3331                           
  3332                           ;flex.c: 185: double R = MeasureNoise_R_6;
  3333                           
  3334                           ;incstack = 0
  3335  001288  C03B  F03E         	movff	KalmanFilter_6@MeasureNoise_R_6,KalmanFilter_6@R
  3336  00128C  C03C  F03F         	movff	KalmanFilter_6@MeasureNoise_R_6+1,KalmanFilter_6@R+1
  3337  001290  C03D  F040         	movff	KalmanFilter_6@MeasureNoise_R_6+2,KalmanFilter_6@R+2
  3338                           
  3339                           ;flex.c: 186: double Q = ProcessNiose_Q_6;
  3340  001294  C038  F041         	movff	KalmanFilter_6@ProcessNiose_Q_6,KalmanFilter_6@Q
  3341  001298  C039  F042         	movff	KalmanFilter_6@ProcessNiose_Q_6+1,KalmanFilter_6@Q+1
  3342  00129C  C03A  F043         	movff	KalmanFilter_6@ProcessNiose_Q_6+2,KalmanFilter_6@Q+2
  3343                           
  3344                           ;flex.c: 188: static double x_last_6;
  3345                           ;flex.c: 189: double x_mid = x_last_6;
  3346  0012A0  C18F  F050         	movff	KalmanFilter_6@x_last_6,KalmanFilter_6@x_mid
  3347  0012A4  C190  F051         	movff	KalmanFilter_6@x_last_6+1,KalmanFilter_6@x_mid+1
  3348  0012A8  C191  F052         	movff	KalmanFilter_6@x_last_6+2,KalmanFilter_6@x_mid+2
  3349                           
  3350                           ;flex.c: 190: double x_now;
  3351                           ;flex.c: 192: static double p_last_6;
  3352                           ;flex.c: 193: double p_mid ;
  3353                           ;flex.c: 194: double p_now;
  3354                           ;flex.c: 196: double kg;
  3355                           ;flex.c: 198: x_mid=x_last_6;
  3356  0012AC  C18F  F050         	movff	KalmanFilter_6@x_last_6,KalmanFilter_6@x_mid
  3357  0012B0  C190  F051         	movff	KalmanFilter_6@x_last_6+1,KalmanFilter_6@x_mid+1
  3358  0012B4  C191  F052         	movff	KalmanFilter_6@x_last_6+2,KalmanFilter_6@x_mid+2
  3359                           
  3360                           ;flex.c: 199: p_mid=p_last_6+Q;
  3361  0012B8  C18C  F01A         	movff	KalmanFilter_6@p_last_6,___ftadd@f1
  3362  0012BC  C18D  F01B         	movff	KalmanFilter_6@p_last_6+1,___ftadd@f1+1
  3363  0012C0  C18E  F01C         	movff	KalmanFilter_6@p_last_6+2,___ftadd@f1+2
  3364  0012C4  C041  F01D         	movff	KalmanFilter_6@Q,___ftadd@f2
  3365  0012C8  C042  F01E         	movff	KalmanFilter_6@Q+1,___ftadd@f2+1
  3366  0012CC  C043  F01F         	movff	KalmanFilter_6@Q+2,___ftadd@f2+2
  3367  0012D0  EC13  F006         	call	___ftadd	;wreg free
  3368  0012D4  C01A  F053         	movff	?___ftadd,KalmanFilter_6@p_mid
  3369  0012D8  C01B  F054         	movff	?___ftadd+1,KalmanFilter_6@p_mid+1
  3370  0012DC  C01C  F055         	movff	?___ftadd+2,KalmanFilter_6@p_mid+2
  3371                           
  3372                           ;flex.c: 204: kg=p_mid/(p_mid+R);
  3373  0012E0  C053  F026         	movff	KalmanFilter_6@p_mid,___ftdiv@f1
  3374  0012E4  C054  F027         	movff	KalmanFilter_6@p_mid+1,___ftdiv@f1+1
  3375  0012E8  C055  F028         	movff	KalmanFilter_6@p_mid+2,___ftdiv@f1+2
  3376  0012EC  C03E  F01D         	movff	KalmanFilter_6@R,___ftadd@f2
  3377  0012F0  C03F  F01E         	movff	KalmanFilter_6@R+1,___ftadd@f2+1
  3378  0012F4  C040  F01F         	movff	KalmanFilter_6@R+2,___ftadd@f2+2
  3379  0012F8  C053  F01A         	movff	KalmanFilter_6@p_mid,___ftadd@f1
  3380  0012FC  C054  F01B         	movff	KalmanFilter_6@p_mid+1,___ftadd@f1+1
  3381  001300  C055  F01C         	movff	KalmanFilter_6@p_mid+2,___ftadd@f1+2
  3382  001304  EC13  F006         	call	___ftadd	;wreg free
  3383  001308  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3384  00130C  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3385  001310  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3386  001314  ECDF  F010         	call	___ftdiv	;wreg free
  3387  001318  C026  F04D         	movff	?___ftdiv,KalmanFilter_6@kg
  3388  00131C  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_6@kg+1
  3389  001320  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_6@kg+2
  3390                           
  3391                           ;flex.c: 205: x_now=x_mid+kg*(ResrcData_6-x_mid);
  3392  001324  C04D  F029         	movff	KalmanFilter_6@kg,___ftmul@f2
  3393  001328  C04E  F02A         	movff	KalmanFilter_6@kg+1,___ftmul@f2+1
  3394  00132C  C04F  F02B         	movff	KalmanFilter_6@kg+2,___ftmul@f2+2
  3395  001330  C035  F01D         	movff	KalmanFilter_6@ResrcData_6,___ftadd@f2
  3396  001334  C036  F01E         	movff	KalmanFilter_6@ResrcData_6+1,___ftadd@f2+1
  3397  001338  C037  F01F         	movff	KalmanFilter_6@ResrcData_6+2,___ftadd@f2+2
  3398  00133C  C050  F012         	movff	KalmanFilter_6@x_mid,___ftneg@f1
  3399  001340  C051  F013         	movff	KalmanFilter_6@x_mid+1,___ftneg@f1+1
  3400  001344  C052  F014         	movff	KalmanFilter_6@x_mid+2,___ftneg@f1+2
  3401  001348  ECA8  F015         	call	___ftneg	;wreg free
  3402  00134C  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3403  001350  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3404  001354  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3405  001358  EC13  F006         	call	___ftadd	;wreg free
  3406  00135C  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3407  001360  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3408  001364  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3409  001368  EC65  F010         	call	___ftmul	;wreg free
  3410  00136C  C026  F047         	movff	?___ftmul,_KalmanFilter_6$2189
  3411  001370  C027  F048         	movff	?___ftmul+1,_KalmanFilter_6$2189+1
  3412  001374  C028  F049         	movff	?___ftmul+2,_KalmanFilter_6$2189+2
  3413                           
  3414                           ;flex.c: 205: x_now=x_mid+kg*(ResrcData_6-x_mid);
  3415  001378  C047  F01A         	movff	_KalmanFilter_6$2189,___ftadd@f1
  3416  00137C  C048  F01B         	movff	_KalmanFilter_6$2189+1,___ftadd@f1+1
  3417  001380  C049  F01C         	movff	_KalmanFilter_6$2189+2,___ftadd@f1+2
  3418  001384  C050  F01D         	movff	KalmanFilter_6@x_mid,___ftadd@f2
  3419  001388  C051  F01E         	movff	KalmanFilter_6@x_mid+1,___ftadd@f2+1
  3420  00138C  C052  F01F         	movff	KalmanFilter_6@x_mid+2,___ftadd@f2+2
  3421  001390  EC13  F006         	call	___ftadd	;wreg free
  3422  001394  C01A  F04A         	movff	?___ftadd,KalmanFilter_6@x_now
  3423  001398  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_6@x_now+1
  3424  00139C  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_6@x_now+2
  3425                           
  3426                           ;flex.c: 206: p_now=(1-kg)*p_mid;
  3427  0013A0  0E00               	movlw	0
  3428  0013A2  6E1D               	movwf	___ftadd@f2,c
  3429  0013A4  0E80               	movlw	128
  3430  0013A6  6E1E               	movwf	___ftadd@f2+1,c
  3431  0013A8  0E3F               	movlw	63
  3432  0013AA  6E1F               	movwf	___ftadd@f2+2,c
  3433  0013AC  C04D  F012         	movff	KalmanFilter_6@kg,___ftneg@f1
  3434  0013B0  C04E  F013         	movff	KalmanFilter_6@kg+1,___ftneg@f1+1
  3435  0013B4  C04F  F014         	movff	KalmanFilter_6@kg+2,___ftneg@f1+2
  3436  0013B8  ECA8  F015         	call	___ftneg	;wreg free
  3437  0013BC  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3438  0013C0  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3439  0013C4  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3440  0013C8  EC13  F006         	call	___ftadd	;wreg free
  3441  0013CC  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3442  0013D0  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3443  0013D4  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3444  0013D8  C053  F029         	movff	KalmanFilter_6@p_mid,___ftmul@f2
  3445  0013DC  C054  F02A         	movff	KalmanFilter_6@p_mid+1,___ftmul@f2+1
  3446  0013E0  C055  F02B         	movff	KalmanFilter_6@p_mid+2,___ftmul@f2+2
  3447  0013E4  EC65  F010         	call	___ftmul	;wreg free
  3448  0013E8  C026  F044         	movff	?___ftmul,KalmanFilter_6@p_now
  3449  0013EC  C027  F045         	movff	?___ftmul+1,KalmanFilter_6@p_now+1
  3450  0013F0  C028  F046         	movff	?___ftmul+2,KalmanFilter_6@p_now+2
  3451                           
  3452                           ;flex.c: 207: p_last_6 = p_now;
  3453  0013F4  C044  F18C         	movff	KalmanFilter_6@p_now,KalmanFilter_6@p_last_6
  3454  0013F8  C045  F18D         	movff	KalmanFilter_6@p_now+1,KalmanFilter_6@p_last_6+1
  3455  0013FC  C046  F18E         	movff	KalmanFilter_6@p_now+2,KalmanFilter_6@p_last_6+2
  3456                           
  3457                           ;flex.c: 208: x_last_6 = x_now;
  3458  001400  C04A  F18F         	movff	KalmanFilter_6@x_now,KalmanFilter_6@x_last_6
  3459  001404  C04B  F190         	movff	KalmanFilter_6@x_now+1,KalmanFilter_6@x_last_6+1
  3460  001408  C04C  F191         	movff	KalmanFilter_6@x_now+2,KalmanFilter_6@x_last_6+2
  3461                           
  3462                           ;flex.c: 209: return x_now;
  3463  00140C  C04A  F035         	movff	KalmanFilter_6@x_now,?_KalmanFilter_6
  3464  001410  C04B  F036         	movff	KalmanFilter_6@x_now+1,?_KalmanFilter_6+1
  3465  001414  C04C  F037         	movff	KalmanFilter_6@x_now+2,?_KalmanFilter_6+2
  3466  001418  0012               	return	
  3467  00141A                     __end_of_KalmanFilter_6:
  3468                           	opt stack 0
  3469                           tblptru	equ	0xFF8
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           indf2	equ	0xFDF
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477 ;; *************** function _KalmanFilter_5 *****************
  3478 ;; Defined at:
  3479 ;;		line 153 in file "harwave/flex.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  ResrcData_5     3   52[COMRAM] const 
  3482 ;;  ProcessNiose    3   55[COMRAM] const 
  3483 ;;  MeasureNoise    3   58[COMRAM] const 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  p_mid           3   82[COMRAM] const 
  3486 ;;  x_mid           3   79[COMRAM] const 
  3487 ;;  kg              3   76[COMRAM] const 
  3488 ;;  x_now           3   73[COMRAM] const 
  3489 ;;  p_now           3   67[COMRAM] const 
  3490 ;;  Q               3   64[COMRAM] const 
  3491 ;;  R               3   61[COMRAM] const 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  3   52[COMRAM] const 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3501 ;;      Params:         9       0       0       0       0       0       0
  3502 ;;      Locals:        24       0       0       0       0       0       0
  3503 ;;      Temps:          0       0       0       0       0       0       0
  3504 ;;      Totals:        33       0       0       0       0       0       0
  3505 ;;Total ram usage:       33 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    3
  3508 ;; This function calls:
  3509 ;;		___ftadd
  3510 ;;		___ftdiv
  3511 ;;		___ftmul
  3512 ;;		___ftneg
  3513 ;; This function is called by:
  3514 ;;		_translate_flex
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text9
  3519  00141A                     __ptext9:
  3520                           	opt stack 0
  3521  00141A                     _KalmanFilter_5:
  3522                           	opt stack 26
  3523                           
  3524                           ;flex.c: 156: double R = MeasureNoise_R_5;
  3525                           
  3526                           ;incstack = 0
  3527  00141A  C03B  F03E         	movff	KalmanFilter_5@MeasureNoise_R_5,KalmanFilter_5@R
  3528  00141E  C03C  F03F         	movff	KalmanFilter_5@MeasureNoise_R_5+1,KalmanFilter_5@R+1
  3529  001422  C03D  F040         	movff	KalmanFilter_5@MeasureNoise_R_5+2,KalmanFilter_5@R+2
  3530                           
  3531                           ;flex.c: 157: double Q = ProcessNiose_Q_5;
  3532  001426  C038  F041         	movff	KalmanFilter_5@ProcessNiose_Q_5,KalmanFilter_5@Q
  3533  00142A  C039  F042         	movff	KalmanFilter_5@ProcessNiose_Q_5+1,KalmanFilter_5@Q+1
  3534  00142E  C03A  F043         	movff	KalmanFilter_5@ProcessNiose_Q_5+2,KalmanFilter_5@Q+2
  3535                           
  3536                           ;flex.c: 159: static double x_last_5;
  3537                           ;flex.c: 160: double x_mid = x_last_5;
  3538  001432  C195  F050         	movff	KalmanFilter_5@x_last_5,KalmanFilter_5@x_mid
  3539  001436  C196  F051         	movff	KalmanFilter_5@x_last_5+1,KalmanFilter_5@x_mid+1
  3540  00143A  C197  F052         	movff	KalmanFilter_5@x_last_5+2,KalmanFilter_5@x_mid+2
  3541                           
  3542                           ;flex.c: 161: double x_now;
  3543                           ;flex.c: 163: static double p_last_5;
  3544                           ;flex.c: 164: double p_mid ;
  3545                           ;flex.c: 165: double p_now;
  3546                           ;flex.c: 167: double kg;
  3547                           ;flex.c: 169: x_mid=x_last_5;
  3548  00143E  C195  F050         	movff	KalmanFilter_5@x_last_5,KalmanFilter_5@x_mid
  3549  001442  C196  F051         	movff	KalmanFilter_5@x_last_5+1,KalmanFilter_5@x_mid+1
  3550  001446  C197  F052         	movff	KalmanFilter_5@x_last_5+2,KalmanFilter_5@x_mid+2
  3551                           
  3552                           ;flex.c: 170: p_mid=p_last_5+Q;
  3553  00144A  C192  F01A         	movff	KalmanFilter_5@p_last_5,___ftadd@f1
  3554  00144E  C193  F01B         	movff	KalmanFilter_5@p_last_5+1,___ftadd@f1+1
  3555  001452  C194  F01C         	movff	KalmanFilter_5@p_last_5+2,___ftadd@f1+2
  3556  001456  C041  F01D         	movff	KalmanFilter_5@Q,___ftadd@f2
  3557  00145A  C042  F01E         	movff	KalmanFilter_5@Q+1,___ftadd@f2+1
  3558  00145E  C043  F01F         	movff	KalmanFilter_5@Q+2,___ftadd@f2+2
  3559  001462  EC13  F006         	call	___ftadd	;wreg free
  3560  001466  C01A  F053         	movff	?___ftadd,KalmanFilter_5@p_mid
  3561  00146A  C01B  F054         	movff	?___ftadd+1,KalmanFilter_5@p_mid+1
  3562  00146E  C01C  F055         	movff	?___ftadd+2,KalmanFilter_5@p_mid+2
  3563                           
  3564                           ;flex.c: 175: kg=p_mid/(p_mid+R);
  3565  001472  C053  F026         	movff	KalmanFilter_5@p_mid,___ftdiv@f1
  3566  001476  C054  F027         	movff	KalmanFilter_5@p_mid+1,___ftdiv@f1+1
  3567  00147A  C055  F028         	movff	KalmanFilter_5@p_mid+2,___ftdiv@f1+2
  3568  00147E  C03E  F01D         	movff	KalmanFilter_5@R,___ftadd@f2
  3569  001482  C03F  F01E         	movff	KalmanFilter_5@R+1,___ftadd@f2+1
  3570  001486  C040  F01F         	movff	KalmanFilter_5@R+2,___ftadd@f2+2
  3571  00148A  C053  F01A         	movff	KalmanFilter_5@p_mid,___ftadd@f1
  3572  00148E  C054  F01B         	movff	KalmanFilter_5@p_mid+1,___ftadd@f1+1
  3573  001492  C055  F01C         	movff	KalmanFilter_5@p_mid+2,___ftadd@f1+2
  3574  001496  EC13  F006         	call	___ftadd	;wreg free
  3575  00149A  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3576  00149E  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3577  0014A2  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3578  0014A6  ECDF  F010         	call	___ftdiv	;wreg free
  3579  0014AA  C026  F04D         	movff	?___ftdiv,KalmanFilter_5@kg
  3580  0014AE  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_5@kg+1
  3581  0014B2  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_5@kg+2
  3582                           
  3583                           ;flex.c: 176: x_now=x_mid+kg*(ResrcData_5-x_mid);
  3584  0014B6  C04D  F029         	movff	KalmanFilter_5@kg,___ftmul@f2
  3585  0014BA  C04E  F02A         	movff	KalmanFilter_5@kg+1,___ftmul@f2+1
  3586  0014BE  C04F  F02B         	movff	KalmanFilter_5@kg+2,___ftmul@f2+2
  3587  0014C2  C035  F01D         	movff	KalmanFilter_5@ResrcData_5,___ftadd@f2
  3588  0014C6  C036  F01E         	movff	KalmanFilter_5@ResrcData_5+1,___ftadd@f2+1
  3589  0014CA  C037  F01F         	movff	KalmanFilter_5@ResrcData_5+2,___ftadd@f2+2
  3590  0014CE  C050  F012         	movff	KalmanFilter_5@x_mid,___ftneg@f1
  3591  0014D2  C051  F013         	movff	KalmanFilter_5@x_mid+1,___ftneg@f1+1
  3592  0014D6  C052  F014         	movff	KalmanFilter_5@x_mid+2,___ftneg@f1+2
  3593  0014DA  ECA8  F015         	call	___ftneg	;wreg free
  3594  0014DE  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3595  0014E2  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3596  0014E6  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3597  0014EA  EC13  F006         	call	___ftadd	;wreg free
  3598  0014EE  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3599  0014F2  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3600  0014F6  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3601  0014FA  EC65  F010         	call	___ftmul	;wreg free
  3602  0014FE  C026  F047         	movff	?___ftmul,_KalmanFilter_5$2188
  3603  001502  C027  F048         	movff	?___ftmul+1,_KalmanFilter_5$2188+1
  3604  001506  C028  F049         	movff	?___ftmul+2,_KalmanFilter_5$2188+2
  3605                           
  3606                           ;flex.c: 176: x_now=x_mid+kg*(ResrcData_5-x_mid);
  3607  00150A  C047  F01A         	movff	_KalmanFilter_5$2188,___ftadd@f1
  3608  00150E  C048  F01B         	movff	_KalmanFilter_5$2188+1,___ftadd@f1+1
  3609  001512  C049  F01C         	movff	_KalmanFilter_5$2188+2,___ftadd@f1+2
  3610  001516  C050  F01D         	movff	KalmanFilter_5@x_mid,___ftadd@f2
  3611  00151A  C051  F01E         	movff	KalmanFilter_5@x_mid+1,___ftadd@f2+1
  3612  00151E  C052  F01F         	movff	KalmanFilter_5@x_mid+2,___ftadd@f2+2
  3613  001522  EC13  F006         	call	___ftadd	;wreg free
  3614  001526  C01A  F04A         	movff	?___ftadd,KalmanFilter_5@x_now
  3615  00152A  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_5@x_now+1
  3616  00152E  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_5@x_now+2
  3617                           
  3618                           ;flex.c: 177: p_now=(1-kg)*p_mid;
  3619  001532  0E00               	movlw	0
  3620  001534  6E1D               	movwf	___ftadd@f2,c
  3621  001536  0E80               	movlw	128
  3622  001538  6E1E               	movwf	___ftadd@f2+1,c
  3623  00153A  0E3F               	movlw	63
  3624  00153C  6E1F               	movwf	___ftadd@f2+2,c
  3625  00153E  C04D  F012         	movff	KalmanFilter_5@kg,___ftneg@f1
  3626  001542  C04E  F013         	movff	KalmanFilter_5@kg+1,___ftneg@f1+1
  3627  001546  C04F  F014         	movff	KalmanFilter_5@kg+2,___ftneg@f1+2
  3628  00154A  ECA8  F015         	call	___ftneg	;wreg free
  3629  00154E  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3630  001552  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3631  001556  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3632  00155A  EC13  F006         	call	___ftadd	;wreg free
  3633  00155E  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3634  001562  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3635  001566  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3636  00156A  C053  F029         	movff	KalmanFilter_5@p_mid,___ftmul@f2
  3637  00156E  C054  F02A         	movff	KalmanFilter_5@p_mid+1,___ftmul@f2+1
  3638  001572  C055  F02B         	movff	KalmanFilter_5@p_mid+2,___ftmul@f2+2
  3639  001576  EC65  F010         	call	___ftmul	;wreg free
  3640  00157A  C026  F044         	movff	?___ftmul,KalmanFilter_5@p_now
  3641  00157E  C027  F045         	movff	?___ftmul+1,KalmanFilter_5@p_now+1
  3642  001582  C028  F046         	movff	?___ftmul+2,KalmanFilter_5@p_now+2
  3643                           
  3644                           ;flex.c: 178: p_last_5= p_now;
  3645  001586  C044  F192         	movff	KalmanFilter_5@p_now,KalmanFilter_5@p_last_5
  3646  00158A  C045  F193         	movff	KalmanFilter_5@p_now+1,KalmanFilter_5@p_last_5+1
  3647  00158E  C046  F194         	movff	KalmanFilter_5@p_now+2,KalmanFilter_5@p_last_5+2
  3648                           
  3649                           ;flex.c: 179: x_last_5 = x_now;
  3650  001592  C04A  F195         	movff	KalmanFilter_5@x_now,KalmanFilter_5@x_last_5
  3651  001596  C04B  F196         	movff	KalmanFilter_5@x_now+1,KalmanFilter_5@x_last_5+1
  3652  00159A  C04C  F197         	movff	KalmanFilter_5@x_now+2,KalmanFilter_5@x_last_5+2
  3653                           
  3654                           ;flex.c: 180: return x_now;
  3655  00159E  C04A  F035         	movff	KalmanFilter_5@x_now,?_KalmanFilter_5
  3656  0015A2  C04B  F036         	movff	KalmanFilter_5@x_now+1,?_KalmanFilter_5+1
  3657  0015A6  C04C  F037         	movff	KalmanFilter_5@x_now+2,?_KalmanFilter_5+2
  3658  0015AA  0012               	return	
  3659  0015AC                     __end_of_KalmanFilter_5:
  3660                           	opt stack 0
  3661                           tblptru	equ	0xFF8
  3662                           postinc0	equ	0xFEE
  3663                           wreg	equ	0xFE8
  3664                           indf2	equ	0xFDF
  3665                           fsr2h	equ	0xFDA
  3666                           fsr2l	equ	0xFD9
  3667                           status	equ	0xFD8
  3668                           
  3669 ;; *************** function _KalmanFilter_4 *****************
  3670 ;; Defined at:
  3671 ;;		line 124 in file "harwave/flex.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  ResrcData_4     3   52[COMRAM] const 
  3674 ;;  ProcessNiose    3   55[COMRAM] const 
  3675 ;;  MeasureNoise    3   58[COMRAM] const 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;  p_mid           3   82[COMRAM] const 
  3678 ;;  x_mid           3   79[COMRAM] const 
  3679 ;;  kg              3   76[COMRAM] const 
  3680 ;;  x_now           3   73[COMRAM] const 
  3681 ;;  p_now           3   67[COMRAM] const 
  3682 ;;  Q               3   64[COMRAM] const 
  3683 ;;  R               3   61[COMRAM] const 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  3   52[COMRAM] const 
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3693 ;;      Params:         9       0       0       0       0       0       0
  3694 ;;      Locals:        24       0       0       0       0       0       0
  3695 ;;      Temps:          0       0       0       0       0       0       0
  3696 ;;      Totals:        33       0       0       0       0       0       0
  3697 ;;Total ram usage:       33 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    3
  3700 ;; This function calls:
  3701 ;;		___ftadd
  3702 ;;		___ftdiv
  3703 ;;		___ftmul
  3704 ;;		___ftneg
  3705 ;; This function is called by:
  3706 ;;		_translate_flex
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text10
  3711  0015AC                     __ptext10:
  3712                           	opt stack 0
  3713  0015AC                     _KalmanFilter_4:
  3714                           	opt stack 26
  3715                           
  3716                           ;flex.c: 127: double R = MeasureNoise_R_4;
  3717                           
  3718                           ;incstack = 0
  3719  0015AC  C03B  F03E         	movff	KalmanFilter_4@MeasureNoise_R_4,KalmanFilter_4@R
  3720  0015B0  C03C  F03F         	movff	KalmanFilter_4@MeasureNoise_R_4+1,KalmanFilter_4@R+1
  3721  0015B4  C03D  F040         	movff	KalmanFilter_4@MeasureNoise_R_4+2,KalmanFilter_4@R+2
  3722                           
  3723                           ;flex.c: 128: double Q = ProcessNiose_Q_4;
  3724  0015B8  C038  F041         	movff	KalmanFilter_4@ProcessNiose_Q_4,KalmanFilter_4@Q
  3725  0015BC  C039  F042         	movff	KalmanFilter_4@ProcessNiose_Q_4+1,KalmanFilter_4@Q+1
  3726  0015C0  C03A  F043         	movff	KalmanFilter_4@ProcessNiose_Q_4+2,KalmanFilter_4@Q+2
  3727                           
  3728                           ;flex.c: 130: static double x_last_4;
  3729                           ;flex.c: 131: double x_mid = x_last_4;
  3730  0015C4  C0FA  F050         	movff	KalmanFilter_4@x_last_4,KalmanFilter_4@x_mid
  3731  0015C8  C0FB  F051         	movff	KalmanFilter_4@x_last_4+1,KalmanFilter_4@x_mid+1
  3732  0015CC  C0FC  F052         	movff	KalmanFilter_4@x_last_4+2,KalmanFilter_4@x_mid+2
  3733                           
  3734                           ;flex.c: 132: double x_now;
  3735                           ;flex.c: 134: static double p_last_4;
  3736                           ;flex.c: 135: double p_mid ;
  3737                           ;flex.c: 136: double p_now;
  3738                           ;flex.c: 138: double kg;
  3739                           ;flex.c: 140: x_mid=x_last_4;
  3740  0015D0  C0FA  F050         	movff	KalmanFilter_4@x_last_4,KalmanFilter_4@x_mid
  3741  0015D4  C0FB  F051         	movff	KalmanFilter_4@x_last_4+1,KalmanFilter_4@x_mid+1
  3742  0015D8  C0FC  F052         	movff	KalmanFilter_4@x_last_4+2,KalmanFilter_4@x_mid+2
  3743                           
  3744                           ;flex.c: 141: p_mid=p_last_4+Q;
  3745  0015DC  C198  F01A         	movff	KalmanFilter_4@p_last_4,___ftadd@f1
  3746  0015E0  C199  F01B         	movff	KalmanFilter_4@p_last_4+1,___ftadd@f1+1
  3747  0015E4  C19A  F01C         	movff	KalmanFilter_4@p_last_4+2,___ftadd@f1+2
  3748  0015E8  C041  F01D         	movff	KalmanFilter_4@Q,___ftadd@f2
  3749  0015EC  C042  F01E         	movff	KalmanFilter_4@Q+1,___ftadd@f2+1
  3750  0015F0  C043  F01F         	movff	KalmanFilter_4@Q+2,___ftadd@f2+2
  3751  0015F4  EC13  F006         	call	___ftadd	;wreg free
  3752  0015F8  C01A  F053         	movff	?___ftadd,KalmanFilter_4@p_mid
  3753  0015FC  C01B  F054         	movff	?___ftadd+1,KalmanFilter_4@p_mid+1
  3754  001600  C01C  F055         	movff	?___ftadd+2,KalmanFilter_4@p_mid+2
  3755                           
  3756                           ;flex.c: 146: kg=p_mid/(p_mid+R);
  3757  001604  C053  F026         	movff	KalmanFilter_4@p_mid,___ftdiv@f1
  3758  001608  C054  F027         	movff	KalmanFilter_4@p_mid+1,___ftdiv@f1+1
  3759  00160C  C055  F028         	movff	KalmanFilter_4@p_mid+2,___ftdiv@f1+2
  3760  001610  C03E  F01D         	movff	KalmanFilter_4@R,___ftadd@f2
  3761  001614  C03F  F01E         	movff	KalmanFilter_4@R+1,___ftadd@f2+1
  3762  001618  C040  F01F         	movff	KalmanFilter_4@R+2,___ftadd@f2+2
  3763  00161C  C053  F01A         	movff	KalmanFilter_4@p_mid,___ftadd@f1
  3764  001620  C054  F01B         	movff	KalmanFilter_4@p_mid+1,___ftadd@f1+1
  3765  001624  C055  F01C         	movff	KalmanFilter_4@p_mid+2,___ftadd@f1+2
  3766  001628  EC13  F006         	call	___ftadd	;wreg free
  3767  00162C  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3768  001630  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3769  001634  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3770  001638  ECDF  F010         	call	___ftdiv	;wreg free
  3771  00163C  C026  F04D         	movff	?___ftdiv,KalmanFilter_4@kg
  3772  001640  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_4@kg+1
  3773  001644  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_4@kg+2
  3774                           
  3775                           ;flex.c: 147: x_now=x_mid+kg*(ResrcData_4-x_mid);
  3776  001648  C04D  F029         	movff	KalmanFilter_4@kg,___ftmul@f2
  3777  00164C  C04E  F02A         	movff	KalmanFilter_4@kg+1,___ftmul@f2+1
  3778  001650  C04F  F02B         	movff	KalmanFilter_4@kg+2,___ftmul@f2+2
  3779  001654  C035  F01D         	movff	KalmanFilter_4@ResrcData_4,___ftadd@f2
  3780  001658  C036  F01E         	movff	KalmanFilter_4@ResrcData_4+1,___ftadd@f2+1
  3781  00165C  C037  F01F         	movff	KalmanFilter_4@ResrcData_4+2,___ftadd@f2+2
  3782  001660  C050  F012         	movff	KalmanFilter_4@x_mid,___ftneg@f1
  3783  001664  C051  F013         	movff	KalmanFilter_4@x_mid+1,___ftneg@f1+1
  3784  001668  C052  F014         	movff	KalmanFilter_4@x_mid+2,___ftneg@f1+2
  3785  00166C  ECA8  F015         	call	___ftneg	;wreg free
  3786  001670  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3787  001674  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3788  001678  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3789  00167C  EC13  F006         	call	___ftadd	;wreg free
  3790  001680  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3791  001684  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3792  001688  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3793  00168C  EC65  F010         	call	___ftmul	;wreg free
  3794  001690  C026  F047         	movff	?___ftmul,_KalmanFilter_4$2187
  3795  001694  C027  F048         	movff	?___ftmul+1,_KalmanFilter_4$2187+1
  3796  001698  C028  F049         	movff	?___ftmul+2,_KalmanFilter_4$2187+2
  3797                           
  3798                           ;flex.c: 147: x_now=x_mid+kg*(ResrcData_4-x_mid);
  3799  00169C  C047  F01A         	movff	_KalmanFilter_4$2187,___ftadd@f1
  3800  0016A0  C048  F01B         	movff	_KalmanFilter_4$2187+1,___ftadd@f1+1
  3801  0016A4  C049  F01C         	movff	_KalmanFilter_4$2187+2,___ftadd@f1+2
  3802  0016A8  C050  F01D         	movff	KalmanFilter_4@x_mid,___ftadd@f2
  3803  0016AC  C051  F01E         	movff	KalmanFilter_4@x_mid+1,___ftadd@f2+1
  3804  0016B0  C052  F01F         	movff	KalmanFilter_4@x_mid+2,___ftadd@f2+2
  3805  0016B4  EC13  F006         	call	___ftadd	;wreg free
  3806  0016B8  C01A  F04A         	movff	?___ftadd,KalmanFilter_4@x_now
  3807  0016BC  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_4@x_now+1
  3808  0016C0  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_4@x_now+2
  3809                           
  3810                           ;flex.c: 148: p_now=(1-kg)*p_mid;
  3811  0016C4  0E00               	movlw	0
  3812  0016C6  6E1D               	movwf	___ftadd@f2,c
  3813  0016C8  0E80               	movlw	128
  3814  0016CA  6E1E               	movwf	___ftadd@f2+1,c
  3815  0016CC  0E3F               	movlw	63
  3816  0016CE  6E1F               	movwf	___ftadd@f2+2,c
  3817  0016D0  C04D  F012         	movff	KalmanFilter_4@kg,___ftneg@f1
  3818  0016D4  C04E  F013         	movff	KalmanFilter_4@kg+1,___ftneg@f1+1
  3819  0016D8  C04F  F014         	movff	KalmanFilter_4@kg+2,___ftneg@f1+2
  3820  0016DC  ECA8  F015         	call	___ftneg	;wreg free
  3821  0016E0  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3822  0016E4  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3823  0016E8  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3824  0016EC  EC13  F006         	call	___ftadd	;wreg free
  3825  0016F0  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3826  0016F4  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3827  0016F8  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3828  0016FC  C053  F029         	movff	KalmanFilter_4@p_mid,___ftmul@f2
  3829  001700  C054  F02A         	movff	KalmanFilter_4@p_mid+1,___ftmul@f2+1
  3830  001704  C055  F02B         	movff	KalmanFilter_4@p_mid+2,___ftmul@f2+2
  3831  001708  EC65  F010         	call	___ftmul	;wreg free
  3832  00170C  C026  F044         	movff	?___ftmul,KalmanFilter_4@p_now
  3833  001710  C027  F045         	movff	?___ftmul+1,KalmanFilter_4@p_now+1
  3834  001714  C028  F046         	movff	?___ftmul+2,KalmanFilter_4@p_now+2
  3835                           
  3836                           ;flex.c: 149: p_last_4 = p_now;
  3837  001718  C044  F198         	movff	KalmanFilter_4@p_now,KalmanFilter_4@p_last_4
  3838  00171C  C045  F199         	movff	KalmanFilter_4@p_now+1,KalmanFilter_4@p_last_4+1
  3839  001720  C046  F19A         	movff	KalmanFilter_4@p_now+2,KalmanFilter_4@p_last_4+2
  3840                           
  3841                           ;flex.c: 150: x_last_4 = x_now;
  3842  001724  C04A  F0FA         	movff	KalmanFilter_4@x_now,KalmanFilter_4@x_last_4
  3843  001728  C04B  F0FB         	movff	KalmanFilter_4@x_now+1,KalmanFilter_4@x_last_4+1
  3844  00172C  C04C  F0FC         	movff	KalmanFilter_4@x_now+2,KalmanFilter_4@x_last_4+2
  3845                           
  3846                           ;flex.c: 151: return x_now;
  3847  001730  C04A  F035         	movff	KalmanFilter_4@x_now,?_KalmanFilter_4
  3848  001734  C04B  F036         	movff	KalmanFilter_4@x_now+1,?_KalmanFilter_4+1
  3849  001738  C04C  F037         	movff	KalmanFilter_4@x_now+2,?_KalmanFilter_4+2
  3850  00173C  0012               	return	
  3851  00173E                     __end_of_KalmanFilter_4:
  3852                           	opt stack 0
  3853                           tblptru	equ	0xFF8
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           indf2	equ	0xFDF
  3857                           fsr2h	equ	0xFDA
  3858                           fsr2l	equ	0xFD9
  3859                           status	equ	0xFD8
  3860                           
  3861 ;; *************** function _KalmanFilter_3 *****************
  3862 ;; Defined at:
  3863 ;;		line 95 in file "harwave/flex.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  ResrcData_3     3   52[COMRAM] const 
  3866 ;;  ProcessNiose    3   55[COMRAM] const 
  3867 ;;  MeasureNoise    3   58[COMRAM] const 
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  p_mid           3   82[COMRAM] const 
  3870 ;;  x_mid           3   79[COMRAM] const 
  3871 ;;  kg              3   76[COMRAM] const 
  3872 ;;  x_now           3   73[COMRAM] const 
  3873 ;;  p_now           3   67[COMRAM] const 
  3874 ;;  Q               3   64[COMRAM] const 
  3875 ;;  R               3   61[COMRAM] const 
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  3   52[COMRAM] const 
  3878 ;; Registers used:
  3879 ;;		wreg, status,2, status,0, cstack
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3885 ;;      Params:         9       0       0       0       0       0       0
  3886 ;;      Locals:        24       0       0       0       0       0       0
  3887 ;;      Temps:          0       0       0       0       0       0       0
  3888 ;;      Totals:        33       0       0       0       0       0       0
  3889 ;;Total ram usage:       33 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    3
  3892 ;; This function calls:
  3893 ;;		___ftadd
  3894 ;;		___ftdiv
  3895 ;;		___ftmul
  3896 ;;		___ftneg
  3897 ;; This function is called by:
  3898 ;;		_translate_flex
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text11
  3903  00173E                     __ptext11:
  3904                           	opt stack 0
  3905  00173E                     _KalmanFilter_3:
  3906                           	opt stack 26
  3907                           
  3908                           ;flex.c: 98: double R = MeasureNoise_R_3;
  3909                           
  3910                           ;incstack = 0
  3911  00173E  C03B  F03E         	movff	KalmanFilter_3@MeasureNoise_R_3,KalmanFilter_3@R
  3912  001742  C03C  F03F         	movff	KalmanFilter_3@MeasureNoise_R_3+1,KalmanFilter_3@R+1
  3913  001746  C03D  F040         	movff	KalmanFilter_3@MeasureNoise_R_3+2,KalmanFilter_3@R+2
  3914                           
  3915                           ;flex.c: 99: double Q = ProcessNiose_Q_3;
  3916  00174A  C038  F041         	movff	KalmanFilter_3@ProcessNiose_Q_3,KalmanFilter_3@Q
  3917  00174E  C039  F042         	movff	KalmanFilter_3@ProcessNiose_Q_3+1,KalmanFilter_3@Q+1
  3918  001752  C03A  F043         	movff	KalmanFilter_3@ProcessNiose_Q_3+2,KalmanFilter_3@Q+2
  3919                           
  3920                           ;flex.c: 101: static double x_last_3;
  3921                           ;flex.c: 102: double x_mid = x_last_3;
  3922  001756  C0FD  F050         	movff	KalmanFilter_3@x_last_3,KalmanFilter_3@x_mid
  3923  00175A  C0FE  F051         	movff	KalmanFilter_3@x_last_3+1,KalmanFilter_3@x_mid+1
  3924  00175E  C0FF  F052         	movff	KalmanFilter_3@x_last_3+2,KalmanFilter_3@x_mid+2
  3925                           
  3926                           ;flex.c: 103: double x_now;
  3927                           ;flex.c: 105: static double p_last_3;
  3928                           ;flex.c: 106: double p_mid ;
  3929                           ;flex.c: 107: double p_now;
  3930                           ;flex.c: 109: double kg;
  3931                           ;flex.c: 111: x_mid=x_last_3;
  3932  001762  C0FD  F050         	movff	KalmanFilter_3@x_last_3,KalmanFilter_3@x_mid
  3933  001766  C0FE  F051         	movff	KalmanFilter_3@x_last_3+1,KalmanFilter_3@x_mid+1
  3934  00176A  C0FF  F052         	movff	KalmanFilter_3@x_last_3+2,KalmanFilter_3@x_mid+2
  3935                           
  3936                           ;flex.c: 112: p_mid=p_last_3+Q;
  3937  00176E  C19B  F01A         	movff	KalmanFilter_3@p_last_3,___ftadd@f1
  3938  001772  C19C  F01B         	movff	KalmanFilter_3@p_last_3+1,___ftadd@f1+1
  3939  001776  C19D  F01C         	movff	KalmanFilter_3@p_last_3+2,___ftadd@f1+2
  3940  00177A  C041  F01D         	movff	KalmanFilter_3@Q,___ftadd@f2
  3941  00177E  C042  F01E         	movff	KalmanFilter_3@Q+1,___ftadd@f2+1
  3942  001782  C043  F01F         	movff	KalmanFilter_3@Q+2,___ftadd@f2+2
  3943  001786  EC13  F006         	call	___ftadd	;wreg free
  3944  00178A  C01A  F053         	movff	?___ftadd,KalmanFilter_3@p_mid
  3945  00178E  C01B  F054         	movff	?___ftadd+1,KalmanFilter_3@p_mid+1
  3946  001792  C01C  F055         	movff	?___ftadd+2,KalmanFilter_3@p_mid+2
  3947                           
  3948                           ;flex.c: 117: kg=p_mid/(p_mid+R);
  3949  001796  C053  F026         	movff	KalmanFilter_3@p_mid,___ftdiv@f1
  3950  00179A  C054  F027         	movff	KalmanFilter_3@p_mid+1,___ftdiv@f1+1
  3951  00179E  C055  F028         	movff	KalmanFilter_3@p_mid+2,___ftdiv@f1+2
  3952  0017A2  C03E  F01D         	movff	KalmanFilter_3@R,___ftadd@f2
  3953  0017A6  C03F  F01E         	movff	KalmanFilter_3@R+1,___ftadd@f2+1
  3954  0017AA  C040  F01F         	movff	KalmanFilter_3@R+2,___ftadd@f2+2
  3955  0017AE  C053  F01A         	movff	KalmanFilter_3@p_mid,___ftadd@f1
  3956  0017B2  C054  F01B         	movff	KalmanFilter_3@p_mid+1,___ftadd@f1+1
  3957  0017B6  C055  F01C         	movff	KalmanFilter_3@p_mid+2,___ftadd@f1+2
  3958  0017BA  EC13  F006         	call	___ftadd	;wreg free
  3959  0017BE  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3960  0017C2  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3961  0017C6  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3962  0017CA  ECDF  F010         	call	___ftdiv	;wreg free
  3963  0017CE  C026  F04D         	movff	?___ftdiv,KalmanFilter_3@kg
  3964  0017D2  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_3@kg+1
  3965  0017D6  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_3@kg+2
  3966                           
  3967                           ;flex.c: 118: x_now=x_mid+kg*(ResrcData_3-x_mid);
  3968  0017DA  C04D  F029         	movff	KalmanFilter_3@kg,___ftmul@f2
  3969  0017DE  C04E  F02A         	movff	KalmanFilter_3@kg+1,___ftmul@f2+1
  3970  0017E2  C04F  F02B         	movff	KalmanFilter_3@kg+2,___ftmul@f2+2
  3971  0017E6  C035  F01D         	movff	KalmanFilter_3@ResrcData_3,___ftadd@f2
  3972  0017EA  C036  F01E         	movff	KalmanFilter_3@ResrcData_3+1,___ftadd@f2+1
  3973  0017EE  C037  F01F         	movff	KalmanFilter_3@ResrcData_3+2,___ftadd@f2+2
  3974  0017F2  C050  F012         	movff	KalmanFilter_3@x_mid,___ftneg@f1
  3975  0017F6  C051  F013         	movff	KalmanFilter_3@x_mid+1,___ftneg@f1+1
  3976  0017FA  C052  F014         	movff	KalmanFilter_3@x_mid+2,___ftneg@f1+2
  3977  0017FE  ECA8  F015         	call	___ftneg	;wreg free
  3978  001802  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3979  001806  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3980  00180A  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3981  00180E  EC13  F006         	call	___ftadd	;wreg free
  3982  001812  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3983  001816  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3984  00181A  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3985  00181E  EC65  F010         	call	___ftmul	;wreg free
  3986  001822  C026  F047         	movff	?___ftmul,_KalmanFilter_3$2186
  3987  001826  C027  F048         	movff	?___ftmul+1,_KalmanFilter_3$2186+1
  3988  00182A  C028  F049         	movff	?___ftmul+2,_KalmanFilter_3$2186+2
  3989                           
  3990                           ;flex.c: 118: x_now=x_mid+kg*(ResrcData_3-x_mid);
  3991  00182E  C047  F01A         	movff	_KalmanFilter_3$2186,___ftadd@f1
  3992  001832  C048  F01B         	movff	_KalmanFilter_3$2186+1,___ftadd@f1+1
  3993  001836  C049  F01C         	movff	_KalmanFilter_3$2186+2,___ftadd@f1+2
  3994  00183A  C050  F01D         	movff	KalmanFilter_3@x_mid,___ftadd@f2
  3995  00183E  C051  F01E         	movff	KalmanFilter_3@x_mid+1,___ftadd@f2+1
  3996  001842  C052  F01F         	movff	KalmanFilter_3@x_mid+2,___ftadd@f2+2
  3997  001846  EC13  F006         	call	___ftadd	;wreg free
  3998  00184A  C01A  F04A         	movff	?___ftadd,KalmanFilter_3@x_now
  3999  00184E  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_3@x_now+1
  4000  001852  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_3@x_now+2
  4001                           
  4002                           ;flex.c: 119: p_now=(1-kg)*p_mid;
  4003  001856  0E00               	movlw	0
  4004  001858  6E1D               	movwf	___ftadd@f2,c
  4005  00185A  0E80               	movlw	128
  4006  00185C  6E1E               	movwf	___ftadd@f2+1,c
  4007  00185E  0E3F               	movlw	63
  4008  001860  6E1F               	movwf	___ftadd@f2+2,c
  4009  001862  C04D  F012         	movff	KalmanFilter_3@kg,___ftneg@f1
  4010  001866  C04E  F013         	movff	KalmanFilter_3@kg+1,___ftneg@f1+1
  4011  00186A  C04F  F014         	movff	KalmanFilter_3@kg+2,___ftneg@f1+2
  4012  00186E  ECA8  F015         	call	___ftneg	;wreg free
  4013  001872  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4014  001876  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4015  00187A  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4016  00187E  EC13  F006         	call	___ftadd	;wreg free
  4017  001882  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4018  001886  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4019  00188A  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4020  00188E  C053  F029         	movff	KalmanFilter_3@p_mid,___ftmul@f2
  4021  001892  C054  F02A         	movff	KalmanFilter_3@p_mid+1,___ftmul@f2+1
  4022  001896  C055  F02B         	movff	KalmanFilter_3@p_mid+2,___ftmul@f2+2
  4023  00189A  EC65  F010         	call	___ftmul	;wreg free
  4024  00189E  C026  F044         	movff	?___ftmul,KalmanFilter_3@p_now
  4025  0018A2  C027  F045         	movff	?___ftmul+1,KalmanFilter_3@p_now+1
  4026  0018A6  C028  F046         	movff	?___ftmul+2,KalmanFilter_3@p_now+2
  4027                           
  4028                           ;flex.c: 120: p_last_3 = p_now;
  4029  0018AA  C044  F19B         	movff	KalmanFilter_3@p_now,KalmanFilter_3@p_last_3
  4030  0018AE  C045  F19C         	movff	KalmanFilter_3@p_now+1,KalmanFilter_3@p_last_3+1
  4031  0018B2  C046  F19D         	movff	KalmanFilter_3@p_now+2,KalmanFilter_3@p_last_3+2
  4032                           
  4033                           ;flex.c: 121: x_last_3 = x_now;
  4034  0018B6  C04A  F0FD         	movff	KalmanFilter_3@x_now,KalmanFilter_3@x_last_3
  4035  0018BA  C04B  F0FE         	movff	KalmanFilter_3@x_now+1,KalmanFilter_3@x_last_3+1
  4036  0018BE  C04C  F0FF         	movff	KalmanFilter_3@x_now+2,KalmanFilter_3@x_last_3+2
  4037                           
  4038                           ;flex.c: 122: return x_now;
  4039  0018C2  C04A  F035         	movff	KalmanFilter_3@x_now,?_KalmanFilter_3
  4040  0018C6  C04B  F036         	movff	KalmanFilter_3@x_now+1,?_KalmanFilter_3+1
  4041  0018CA  C04C  F037         	movff	KalmanFilter_3@x_now+2,?_KalmanFilter_3+2
  4042  0018CE  0012               	return	
  4043  0018D0                     __end_of_KalmanFilter_3:
  4044                           	opt stack 0
  4045                           tblptru	equ	0xFF8
  4046                           postinc0	equ	0xFEE
  4047                           wreg	equ	0xFE8
  4048                           indf2	equ	0xFDF
  4049                           fsr2h	equ	0xFDA
  4050                           fsr2l	equ	0xFD9
  4051                           status	equ	0xFD8
  4052                           
  4053 ;; *************** function _KalmanFilter_2 *****************
  4054 ;; Defined at:
  4055 ;;		line 66 in file "harwave/flex.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  ResrcData_2     3   52[COMRAM] const 
  4058 ;;  ProcessNiose    3   55[COMRAM] const 
  4059 ;;  MeasureNoise    3   58[COMRAM] const 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  p_mid           3   82[COMRAM] const 
  4062 ;;  x_mid           3   79[COMRAM] const 
  4063 ;;  kg              3   76[COMRAM] const 
  4064 ;;  x_now           3   73[COMRAM] const 
  4065 ;;  p_now           3   67[COMRAM] const 
  4066 ;;  Q               3   64[COMRAM] const 
  4067 ;;  R               3   61[COMRAM] const 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  3   52[COMRAM] const 
  4070 ;; Registers used:
  4071 ;;		wreg, status,2, status,0, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4077 ;;      Params:         9       0       0       0       0       0       0
  4078 ;;      Locals:        24       0       0       0       0       0       0
  4079 ;;      Temps:          0       0       0       0       0       0       0
  4080 ;;      Totals:        33       0       0       0       0       0       0
  4081 ;;Total ram usage:       33 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    3
  4084 ;; This function calls:
  4085 ;;		___ftadd
  4086 ;;		___ftdiv
  4087 ;;		___ftmul
  4088 ;;		___ftneg
  4089 ;; This function is called by:
  4090 ;;		_translate_flex
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           	psect	text12
  4095  0018D0                     __ptext12:
  4096                           	opt stack 0
  4097  0018D0                     _KalmanFilter_2:
  4098                           	opt stack 26
  4099                           
  4100                           ;flex.c: 69: double R = MeasureNoise_R_2;
  4101                           
  4102                           ;incstack = 0
  4103  0018D0  C03B  F03E         	movff	KalmanFilter_2@MeasureNoise_R_2,KalmanFilter_2@R
  4104  0018D4  C03C  F03F         	movff	KalmanFilter_2@MeasureNoise_R_2+1,KalmanFilter_2@R+1
  4105  0018D8  C03D  F040         	movff	KalmanFilter_2@MeasureNoise_R_2+2,KalmanFilter_2@R+2
  4106                           
  4107                           ;flex.c: 70: double Q = ProcessNiose_Q_2;
  4108  0018DC  C038  F041         	movff	KalmanFilter_2@ProcessNiose_Q_2,KalmanFilter_2@Q
  4109  0018E0  C039  F042         	movff	KalmanFilter_2@ProcessNiose_Q_2+1,KalmanFilter_2@Q+1
  4110  0018E4  C03A  F043         	movff	KalmanFilter_2@ProcessNiose_Q_2+2,KalmanFilter_2@Q+2
  4111                           
  4112                           ;flex.c: 72: static double x_last_2;
  4113                           ;flex.c: 73: double x_mid = x_last_2;
  4114  0018E8  C05C  F050         	movff	KalmanFilter_2@x_last_2,KalmanFilter_2@x_mid
  4115  0018EC  C05D  F051         	movff	KalmanFilter_2@x_last_2+1,KalmanFilter_2@x_mid+1
  4116  0018F0  C05E  F052         	movff	KalmanFilter_2@x_last_2+2,KalmanFilter_2@x_mid+2
  4117                           
  4118                           ;flex.c: 74: double x_now;
  4119                           ;flex.c: 76: static double p_last_2;
  4120                           ;flex.c: 77: double p_mid ;
  4121                           ;flex.c: 78: double p_now;
  4122                           ;flex.c: 80: double kg;
  4123                           ;flex.c: 82: x_mid=x_last_2;
  4124  0018F4  C05C  F050         	movff	KalmanFilter_2@x_last_2,KalmanFilter_2@x_mid
  4125  0018F8  C05D  F051         	movff	KalmanFilter_2@x_last_2+1,KalmanFilter_2@x_mid+1
  4126  0018FC  C05E  F052         	movff	KalmanFilter_2@x_last_2+2,KalmanFilter_2@x_mid+2
  4127                           
  4128                           ;flex.c: 83: p_mid=p_last_2+Q;
  4129  001900  C19E  F01A         	movff	KalmanFilter_2@p_last_2,___ftadd@f1
  4130  001904  C19F  F01B         	movff	KalmanFilter_2@p_last_2+1,___ftadd@f1+1
  4131  001908  C1A0  F01C         	movff	KalmanFilter_2@p_last_2+2,___ftadd@f1+2
  4132  00190C  C041  F01D         	movff	KalmanFilter_2@Q,___ftadd@f2
  4133  001910  C042  F01E         	movff	KalmanFilter_2@Q+1,___ftadd@f2+1
  4134  001914  C043  F01F         	movff	KalmanFilter_2@Q+2,___ftadd@f2+2
  4135  001918  EC13  F006         	call	___ftadd	;wreg free
  4136  00191C  C01A  F053         	movff	?___ftadd,KalmanFilter_2@p_mid
  4137  001920  C01B  F054         	movff	?___ftadd+1,KalmanFilter_2@p_mid+1
  4138  001924  C01C  F055         	movff	?___ftadd+2,KalmanFilter_2@p_mid+2
  4139                           
  4140                           ;flex.c: 88: kg=p_mid/(p_mid+R);
  4141  001928  C053  F026         	movff	KalmanFilter_2@p_mid,___ftdiv@f1
  4142  00192C  C054  F027         	movff	KalmanFilter_2@p_mid+1,___ftdiv@f1+1
  4143  001930  C055  F028         	movff	KalmanFilter_2@p_mid+2,___ftdiv@f1+2
  4144  001934  C03E  F01D         	movff	KalmanFilter_2@R,___ftadd@f2
  4145  001938  C03F  F01E         	movff	KalmanFilter_2@R+1,___ftadd@f2+1
  4146  00193C  C040  F01F         	movff	KalmanFilter_2@R+2,___ftadd@f2+2
  4147  001940  C053  F01A         	movff	KalmanFilter_2@p_mid,___ftadd@f1
  4148  001944  C054  F01B         	movff	KalmanFilter_2@p_mid+1,___ftadd@f1+1
  4149  001948  C055  F01C         	movff	KalmanFilter_2@p_mid+2,___ftadd@f1+2
  4150  00194C  EC13  F006         	call	___ftadd	;wreg free
  4151  001950  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  4152  001954  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  4153  001958  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  4154  00195C  ECDF  F010         	call	___ftdiv	;wreg free
  4155  001960  C026  F04D         	movff	?___ftdiv,KalmanFilter_2@kg
  4156  001964  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_2@kg+1
  4157  001968  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_2@kg+2
  4158                           
  4159                           ;flex.c: 89: x_now=x_mid+kg*(ResrcData_2-x_mid);
  4160  00196C  C04D  F029         	movff	KalmanFilter_2@kg,___ftmul@f2
  4161  001970  C04E  F02A         	movff	KalmanFilter_2@kg+1,___ftmul@f2+1
  4162  001974  C04F  F02B         	movff	KalmanFilter_2@kg+2,___ftmul@f2+2
  4163  001978  C035  F01D         	movff	KalmanFilter_2@ResrcData_2,___ftadd@f2
  4164  00197C  C036  F01E         	movff	KalmanFilter_2@ResrcData_2+1,___ftadd@f2+1
  4165  001980  C037  F01F         	movff	KalmanFilter_2@ResrcData_2+2,___ftadd@f2+2
  4166  001984  C050  F012         	movff	KalmanFilter_2@x_mid,___ftneg@f1
  4167  001988  C051  F013         	movff	KalmanFilter_2@x_mid+1,___ftneg@f1+1
  4168  00198C  C052  F014         	movff	KalmanFilter_2@x_mid+2,___ftneg@f1+2
  4169  001990  ECA8  F015         	call	___ftneg	;wreg free
  4170  001994  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4171  001998  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4172  00199C  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4173  0019A0  EC13  F006         	call	___ftadd	;wreg free
  4174  0019A4  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4175  0019A8  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4176  0019AC  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4177  0019B0  EC65  F010         	call	___ftmul	;wreg free
  4178  0019B4  C026  F047         	movff	?___ftmul,_KalmanFilter_2$2185
  4179  0019B8  C027  F048         	movff	?___ftmul+1,_KalmanFilter_2$2185+1
  4180  0019BC  C028  F049         	movff	?___ftmul+2,_KalmanFilter_2$2185+2
  4181                           
  4182                           ;flex.c: 89: x_now=x_mid+kg*(ResrcData_2-x_mid);
  4183  0019C0  C047  F01A         	movff	_KalmanFilter_2$2185,___ftadd@f1
  4184  0019C4  C048  F01B         	movff	_KalmanFilter_2$2185+1,___ftadd@f1+1
  4185  0019C8  C049  F01C         	movff	_KalmanFilter_2$2185+2,___ftadd@f1+2
  4186  0019CC  C050  F01D         	movff	KalmanFilter_2@x_mid,___ftadd@f2
  4187  0019D0  C051  F01E         	movff	KalmanFilter_2@x_mid+1,___ftadd@f2+1
  4188  0019D4  C052  F01F         	movff	KalmanFilter_2@x_mid+2,___ftadd@f2+2
  4189  0019D8  EC13  F006         	call	___ftadd	;wreg free
  4190  0019DC  C01A  F04A         	movff	?___ftadd,KalmanFilter_2@x_now
  4191  0019E0  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_2@x_now+1
  4192  0019E4  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_2@x_now+2
  4193                           
  4194                           ;flex.c: 90: p_now=(1-kg)*p_mid;
  4195  0019E8  0E00               	movlw	0
  4196  0019EA  6E1D               	movwf	___ftadd@f2,c
  4197  0019EC  0E80               	movlw	128
  4198  0019EE  6E1E               	movwf	___ftadd@f2+1,c
  4199  0019F0  0E3F               	movlw	63
  4200  0019F2  6E1F               	movwf	___ftadd@f2+2,c
  4201  0019F4  C04D  F012         	movff	KalmanFilter_2@kg,___ftneg@f1
  4202  0019F8  C04E  F013         	movff	KalmanFilter_2@kg+1,___ftneg@f1+1
  4203  0019FC  C04F  F014         	movff	KalmanFilter_2@kg+2,___ftneg@f1+2
  4204  001A00  ECA8  F015         	call	___ftneg	;wreg free
  4205  001A04  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4206  001A08  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4207  001A0C  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4208  001A10  EC13  F006         	call	___ftadd	;wreg free
  4209  001A14  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4210  001A18  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4211  001A1C  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4212  001A20  C053  F029         	movff	KalmanFilter_2@p_mid,___ftmul@f2
  4213  001A24  C054  F02A         	movff	KalmanFilter_2@p_mid+1,___ftmul@f2+1
  4214  001A28  C055  F02B         	movff	KalmanFilter_2@p_mid+2,___ftmul@f2+2
  4215  001A2C  EC65  F010         	call	___ftmul	;wreg free
  4216  001A30  C026  F044         	movff	?___ftmul,KalmanFilter_2@p_now
  4217  001A34  C027  F045         	movff	?___ftmul+1,KalmanFilter_2@p_now+1
  4218  001A38  C028  F046         	movff	?___ftmul+2,KalmanFilter_2@p_now+2
  4219                           
  4220                           ;flex.c: 91: p_last_2 = p_now;
  4221  001A3C  C044  F19E         	movff	KalmanFilter_2@p_now,KalmanFilter_2@p_last_2
  4222  001A40  C045  F19F         	movff	KalmanFilter_2@p_now+1,KalmanFilter_2@p_last_2+1
  4223  001A44  C046  F1A0         	movff	KalmanFilter_2@p_now+2,KalmanFilter_2@p_last_2+2
  4224                           
  4225                           ;flex.c: 92: x_last_2 = x_now;
  4226  001A48  C04A  F05C         	movff	KalmanFilter_2@x_now,KalmanFilter_2@x_last_2
  4227  001A4C  C04B  F05D         	movff	KalmanFilter_2@x_now+1,KalmanFilter_2@x_last_2+1
  4228  001A50  C04C  F05E         	movff	KalmanFilter_2@x_now+2,KalmanFilter_2@x_last_2+2
  4229                           
  4230                           ;flex.c: 93: return x_now;
  4231  001A54  C04A  F035         	movff	KalmanFilter_2@x_now,?_KalmanFilter_2
  4232  001A58  C04B  F036         	movff	KalmanFilter_2@x_now+1,?_KalmanFilter_2+1
  4233  001A5C  C04C  F037         	movff	KalmanFilter_2@x_now+2,?_KalmanFilter_2+2
  4234  001A60  0012               	return	
  4235  001A62                     __end_of_KalmanFilter_2:
  4236                           	opt stack 0
  4237                           tblptru	equ	0xFF8
  4238                           postinc0	equ	0xFEE
  4239                           wreg	equ	0xFE8
  4240                           indf2	equ	0xFDF
  4241                           fsr2h	equ	0xFDA
  4242                           fsr2l	equ	0xFD9
  4243                           status	equ	0xFD8
  4244                           
  4245 ;; *************** function _KalmanFilter_1 *****************
  4246 ;; Defined at:
  4247 ;;		line 37 in file "harwave/flex.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;  ResrcData_1     3   52[COMRAM] const 
  4250 ;;  ProcessNiose    3   55[COMRAM] const 
  4251 ;;  MeasureNoise    3   58[COMRAM] const 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  p_mid           3   82[COMRAM] const 
  4254 ;;  x_mid           3   79[COMRAM] const 
  4255 ;;  kg              3   76[COMRAM] const 
  4256 ;;  x_now           3   73[COMRAM] const 
  4257 ;;  p_now           3   67[COMRAM] const 
  4258 ;;  Q               3   64[COMRAM] const 
  4259 ;;  R               3   61[COMRAM] const 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  3   52[COMRAM] const 
  4262 ;; Registers used:
  4263 ;;		wreg, status,2, status,0, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4269 ;;      Params:         9       0       0       0       0       0       0
  4270 ;;      Locals:        24       0       0       0       0       0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0
  4272 ;;      Totals:        33       0       0       0       0       0       0
  4273 ;;Total ram usage:       33 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    3
  4276 ;; This function calls:
  4277 ;;		___ftadd
  4278 ;;		___ftdiv
  4279 ;;		___ftmul
  4280 ;;		___ftneg
  4281 ;; This function is called by:
  4282 ;;		_translate_flex
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text13
  4287  001A62                     __ptext13:
  4288                           	opt stack 0
  4289  001A62                     _KalmanFilter_1:
  4290                           	opt stack 26
  4291                           
  4292                           ;flex.c: 40: double R = MeasureNoise_R_1;
  4293                           
  4294                           ;incstack = 0
  4295  001A62  C03B  F03E         	movff	KalmanFilter_1@MeasureNoise_R_1,KalmanFilter_1@R
  4296  001A66  C03C  F03F         	movff	KalmanFilter_1@MeasureNoise_R_1+1,KalmanFilter_1@R+1
  4297  001A6A  C03D  F040         	movff	KalmanFilter_1@MeasureNoise_R_1+2,KalmanFilter_1@R+2
  4298                           
  4299                           ;flex.c: 41: double Q = ProcessNiose_Q_1;
  4300  001A6E  C038  F041         	movff	KalmanFilter_1@ProcessNiose_Q_1,KalmanFilter_1@Q
  4301  001A72  C039  F042         	movff	KalmanFilter_1@ProcessNiose_Q_1+1,KalmanFilter_1@Q+1
  4302  001A76  C03A  F043         	movff	KalmanFilter_1@ProcessNiose_Q_1+2,KalmanFilter_1@Q+2
  4303                           
  4304                           ;flex.c: 43: static double x_last_1;
  4305                           ;flex.c: 44: double x_mid = x_last_1;
  4306  001A7A  C05F  F050         	movff	KalmanFilter_1@x_last_1,KalmanFilter_1@x_mid
  4307  001A7E  C060  F051         	movff	KalmanFilter_1@x_last_1+1,KalmanFilter_1@x_mid+1
  4308  001A82  C061  F052         	movff	KalmanFilter_1@x_last_1+2,KalmanFilter_1@x_mid+2
  4309                           
  4310                           ;flex.c: 45: double x_now;
  4311                           ;flex.c: 47: static double p_last_1;
  4312                           ;flex.c: 48: double p_mid ;
  4313                           ;flex.c: 49: double p_now;
  4314                           ;flex.c: 51: double kg;
  4315                           ;flex.c: 53: x_mid=x_last_1;
  4316  001A86  C05F  F050         	movff	KalmanFilter_1@x_last_1,KalmanFilter_1@x_mid
  4317  001A8A  C060  F051         	movff	KalmanFilter_1@x_last_1+1,KalmanFilter_1@x_mid+1
  4318  001A8E  C061  F052         	movff	KalmanFilter_1@x_last_1+2,KalmanFilter_1@x_mid+2
  4319                           
  4320                           ;flex.c: 54: p_mid=p_last_1+Q;
  4321  001A92  C1A1  F01A         	movff	KalmanFilter_1@p_last_1,___ftadd@f1
  4322  001A96  C1A2  F01B         	movff	KalmanFilter_1@p_last_1+1,___ftadd@f1+1
  4323  001A9A  C1A3  F01C         	movff	KalmanFilter_1@p_last_1+2,___ftadd@f1+2
  4324  001A9E  C041  F01D         	movff	KalmanFilter_1@Q,___ftadd@f2
  4325  001AA2  C042  F01E         	movff	KalmanFilter_1@Q+1,___ftadd@f2+1
  4326  001AA6  C043  F01F         	movff	KalmanFilter_1@Q+2,___ftadd@f2+2
  4327  001AAA  EC13  F006         	call	___ftadd	;wreg free
  4328  001AAE  C01A  F053         	movff	?___ftadd,KalmanFilter_1@p_mid
  4329  001AB2  C01B  F054         	movff	?___ftadd+1,KalmanFilter_1@p_mid+1
  4330  001AB6  C01C  F055         	movff	?___ftadd+2,KalmanFilter_1@p_mid+2
  4331                           
  4332                           ;flex.c: 59: kg=p_mid/(p_mid+R);
  4333  001ABA  C053  F026         	movff	KalmanFilter_1@p_mid,___ftdiv@f1
  4334  001ABE  C054  F027         	movff	KalmanFilter_1@p_mid+1,___ftdiv@f1+1
  4335  001AC2  C055  F028         	movff	KalmanFilter_1@p_mid+2,___ftdiv@f1+2
  4336  001AC6  C03E  F01D         	movff	KalmanFilter_1@R,___ftadd@f2
  4337  001ACA  C03F  F01E         	movff	KalmanFilter_1@R+1,___ftadd@f2+1
  4338  001ACE  C040  F01F         	movff	KalmanFilter_1@R+2,___ftadd@f2+2
  4339  001AD2  C053  F01A         	movff	KalmanFilter_1@p_mid,___ftadd@f1
  4340  001AD6  C054  F01B         	movff	KalmanFilter_1@p_mid+1,___ftadd@f1+1
  4341  001ADA  C055  F01C         	movff	KalmanFilter_1@p_mid+2,___ftadd@f1+2
  4342  001ADE  EC13  F006         	call	___ftadd	;wreg free
  4343  001AE2  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  4344  001AE6  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  4345  001AEA  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  4346  001AEE  ECDF  F010         	call	___ftdiv	;wreg free
  4347  001AF2  C026  F04D         	movff	?___ftdiv,KalmanFilter_1@kg
  4348  001AF6  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_1@kg+1
  4349  001AFA  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_1@kg+2
  4350                           
  4351                           ;flex.c: 60: x_now=x_mid+kg*(ResrcData_1-x_mid);
  4352  001AFE  C04D  F029         	movff	KalmanFilter_1@kg,___ftmul@f2
  4353  001B02  C04E  F02A         	movff	KalmanFilter_1@kg+1,___ftmul@f2+1
  4354  001B06  C04F  F02B         	movff	KalmanFilter_1@kg+2,___ftmul@f2+2
  4355  001B0A  C035  F01D         	movff	KalmanFilter_1@ResrcData_1,___ftadd@f2
  4356  001B0E  C036  F01E         	movff	KalmanFilter_1@ResrcData_1+1,___ftadd@f2+1
  4357  001B12  C037  F01F         	movff	KalmanFilter_1@ResrcData_1+2,___ftadd@f2+2
  4358  001B16  C050  F012         	movff	KalmanFilter_1@x_mid,___ftneg@f1
  4359  001B1A  C051  F013         	movff	KalmanFilter_1@x_mid+1,___ftneg@f1+1
  4360  001B1E  C052  F014         	movff	KalmanFilter_1@x_mid+2,___ftneg@f1+2
  4361  001B22  ECA8  F015         	call	___ftneg	;wreg free
  4362  001B26  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4363  001B2A  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4364  001B2E  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4365  001B32  EC13  F006         	call	___ftadd	;wreg free
  4366  001B36  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4367  001B3A  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4368  001B3E  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4369  001B42  EC65  F010         	call	___ftmul	;wreg free
  4370  001B46  C026  F047         	movff	?___ftmul,_KalmanFilter_1$2184
  4371  001B4A  C027  F048         	movff	?___ftmul+1,_KalmanFilter_1$2184+1
  4372  001B4E  C028  F049         	movff	?___ftmul+2,_KalmanFilter_1$2184+2
  4373                           
  4374                           ;flex.c: 60: x_now=x_mid+kg*(ResrcData_1-x_mid);
  4375  001B52  C047  F01A         	movff	_KalmanFilter_1$2184,___ftadd@f1
  4376  001B56  C048  F01B         	movff	_KalmanFilter_1$2184+1,___ftadd@f1+1
  4377  001B5A  C049  F01C         	movff	_KalmanFilter_1$2184+2,___ftadd@f1+2
  4378  001B5E  C050  F01D         	movff	KalmanFilter_1@x_mid,___ftadd@f2
  4379  001B62  C051  F01E         	movff	KalmanFilter_1@x_mid+1,___ftadd@f2+1
  4380  001B66  C052  F01F         	movff	KalmanFilter_1@x_mid+2,___ftadd@f2+2
  4381  001B6A  EC13  F006         	call	___ftadd	;wreg free
  4382  001B6E  C01A  F04A         	movff	?___ftadd,KalmanFilter_1@x_now
  4383  001B72  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_1@x_now+1
  4384  001B76  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_1@x_now+2
  4385                           
  4386                           ;flex.c: 61: p_now=(1-kg)*p_mid;
  4387  001B7A  0E00               	movlw	0
  4388  001B7C  6E1D               	movwf	___ftadd@f2,c
  4389  001B7E  0E80               	movlw	128
  4390  001B80  6E1E               	movwf	___ftadd@f2+1,c
  4391  001B82  0E3F               	movlw	63
  4392  001B84  6E1F               	movwf	___ftadd@f2+2,c
  4393  001B86  C04D  F012         	movff	KalmanFilter_1@kg,___ftneg@f1
  4394  001B8A  C04E  F013         	movff	KalmanFilter_1@kg+1,___ftneg@f1+1
  4395  001B8E  C04F  F014         	movff	KalmanFilter_1@kg+2,___ftneg@f1+2
  4396  001B92  ECA8  F015         	call	___ftneg	;wreg free
  4397  001B96  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4398  001B9A  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4399  001B9E  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4400  001BA2  EC13  F006         	call	___ftadd	;wreg free
  4401  001BA6  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4402  001BAA  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4403  001BAE  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4404  001BB2  C053  F029         	movff	KalmanFilter_1@p_mid,___ftmul@f2
  4405  001BB6  C054  F02A         	movff	KalmanFilter_1@p_mid+1,___ftmul@f2+1
  4406  001BBA  C055  F02B         	movff	KalmanFilter_1@p_mid+2,___ftmul@f2+2
  4407  001BBE  EC65  F010         	call	___ftmul	;wreg free
  4408  001BC2  C026  F044         	movff	?___ftmul,KalmanFilter_1@p_now
  4409  001BC6  C027  F045         	movff	?___ftmul+1,KalmanFilter_1@p_now+1
  4410  001BCA  C028  F046         	movff	?___ftmul+2,KalmanFilter_1@p_now+2
  4411                           
  4412                           ;flex.c: 62: p_last_1 = p_now;
  4413  001BCE  C044  F1A1         	movff	KalmanFilter_1@p_now,KalmanFilter_1@p_last_1
  4414  001BD2  C045  F1A2         	movff	KalmanFilter_1@p_now+1,KalmanFilter_1@p_last_1+1
  4415  001BD6  C046  F1A3         	movff	KalmanFilter_1@p_now+2,KalmanFilter_1@p_last_1+2
  4416                           
  4417                           ;flex.c: 63: x_last_1 = x_now;
  4418  001BDA  C04A  F05F         	movff	KalmanFilter_1@x_now,KalmanFilter_1@x_last_1
  4419  001BDE  C04B  F060         	movff	KalmanFilter_1@x_now+1,KalmanFilter_1@x_last_1+1
  4420  001BE2  C04C  F061         	movff	KalmanFilter_1@x_now+2,KalmanFilter_1@x_last_1+2
  4421                           
  4422                           ;flex.c: 64: return x_now;
  4423  001BE6  C04A  F035         	movff	KalmanFilter_1@x_now,?_KalmanFilter_1
  4424  001BEA  C04B  F036         	movff	KalmanFilter_1@x_now+1,?_KalmanFilter_1+1
  4425  001BEE  C04C  F037         	movff	KalmanFilter_1@x_now+2,?_KalmanFilter_1+2
  4426  001BF2  0012               	return	
  4427  001BF4                     __end_of_KalmanFilter_1:
  4428                           	opt stack 0
  4429                           tblptru	equ	0xFF8
  4430                           postinc0	equ	0xFEE
  4431                           wreg	equ	0xFE8
  4432                           indf2	equ	0xFDF
  4433                           fsr2h	equ	0xFDA
  4434                           fsr2l	equ	0xFD9
  4435                           status	equ	0xFD8
  4436                           
  4437 ;; *************** function _KalmanFilter_0 *****************
  4438 ;; Defined at:
  4439 ;;		line 8 in file "harwave/flex.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  ResrcData_0     3   52[COMRAM] const 
  4442 ;;  ProcessNiose    3   55[COMRAM] const 
  4443 ;;  MeasureNoise    3   58[COMRAM] const 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  p_mid           3   82[COMRAM] const 
  4446 ;;  x_mid           3   79[COMRAM] const 
  4447 ;;  kg              3   76[COMRAM] const 
  4448 ;;  x_now           3   73[COMRAM] const 
  4449 ;;  p_now           3   67[COMRAM] const 
  4450 ;;  Q               3   64[COMRAM] const 
  4451 ;;  R               3   61[COMRAM] const 
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  3   52[COMRAM] const 
  4454 ;; Registers used:
  4455 ;;		wreg, status,2, status,0, cstack
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4461 ;;      Params:         9       0       0       0       0       0       0
  4462 ;;      Locals:        24       0       0       0       0       0       0
  4463 ;;      Temps:          0       0       0       0       0       0       0
  4464 ;;      Totals:        33       0       0       0       0       0       0
  4465 ;;Total ram usage:       33 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; Hardware stack levels required when called:    3
  4468 ;; This function calls:
  4469 ;;		___ftadd
  4470 ;;		___ftdiv
  4471 ;;		___ftmul
  4472 ;;		___ftneg
  4473 ;; This function is called by:
  4474 ;;		_translate_flex
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text14
  4479  001BF4                     __ptext14:
  4480                           	opt stack 0
  4481  001BF4                     _KalmanFilter_0:
  4482                           	opt stack 26
  4483                           
  4484                           ;flex.c: 11: double R = MeasureNoise_R_0;
  4485                           
  4486                           ;incstack = 0
  4487  001BF4  C03B  F03E         	movff	KalmanFilter_0@MeasureNoise_R_0,KalmanFilter_0@R
  4488  001BF8  C03C  F03F         	movff	KalmanFilter_0@MeasureNoise_R_0+1,KalmanFilter_0@R+1
  4489  001BFC  C03D  F040         	movff	KalmanFilter_0@MeasureNoise_R_0+2,KalmanFilter_0@R+2
  4490                           
  4491                           ;flex.c: 12: double Q = ProcessNiose_Q_0;
  4492  001C00  C038  F041         	movff	KalmanFilter_0@ProcessNiose_Q_0,KalmanFilter_0@Q
  4493  001C04  C039  F042         	movff	KalmanFilter_0@ProcessNiose_Q_0+1,KalmanFilter_0@Q+1
  4494  001C08  C03A  F043         	movff	KalmanFilter_0@ProcessNiose_Q_0+2,KalmanFilter_0@Q+2
  4495                           
  4496                           ;flex.c: 14: static double x_last_0;
  4497                           ;flex.c: 15: double x_mid = x_last_0;
  4498  001C0C  C062  F050         	movff	KalmanFilter_0@x_last_0,KalmanFilter_0@x_mid
  4499  001C10  C063  F051         	movff	KalmanFilter_0@x_last_0+1,KalmanFilter_0@x_mid+1
  4500  001C14  C064  F052         	movff	KalmanFilter_0@x_last_0+2,KalmanFilter_0@x_mid+2
  4501                           
  4502                           ;flex.c: 16: double x_now;
  4503                           ;flex.c: 18: static double p_last_0;
  4504                           ;flex.c: 19: double p_mid ;
  4505                           ;flex.c: 20: double p_now;
  4506                           ;flex.c: 22: double kg;
  4507                           ;flex.c: 24: x_mid=x_last_0;
  4508  001C18  C062  F050         	movff	KalmanFilter_0@x_last_0,KalmanFilter_0@x_mid
  4509  001C1C  C063  F051         	movff	KalmanFilter_0@x_last_0+1,KalmanFilter_0@x_mid+1
  4510  001C20  C064  F052         	movff	KalmanFilter_0@x_last_0+2,KalmanFilter_0@x_mid+2
  4511                           
  4512                           ;flex.c: 25: p_mid=p_last_0+Q;
  4513  001C24  C1A4  F01A         	movff	KalmanFilter_0@p_last_0,___ftadd@f1
  4514  001C28  C1A5  F01B         	movff	KalmanFilter_0@p_last_0+1,___ftadd@f1+1
  4515  001C2C  C1A6  F01C         	movff	KalmanFilter_0@p_last_0+2,___ftadd@f1+2
  4516  001C30  C041  F01D         	movff	KalmanFilter_0@Q,___ftadd@f2
  4517  001C34  C042  F01E         	movff	KalmanFilter_0@Q+1,___ftadd@f2+1
  4518  001C38  C043  F01F         	movff	KalmanFilter_0@Q+2,___ftadd@f2+2
  4519  001C3C  EC13  F006         	call	___ftadd	;wreg free
  4520  001C40  C01A  F053         	movff	?___ftadd,KalmanFilter_0@p_mid
  4521  001C44  C01B  F054         	movff	?___ftadd+1,KalmanFilter_0@p_mid+1
  4522  001C48  C01C  F055         	movff	?___ftadd+2,KalmanFilter_0@p_mid+2
  4523                           
  4524                           ;flex.c: 30: kg=p_mid/(p_mid+R);
  4525  001C4C  C053  F026         	movff	KalmanFilter_0@p_mid,___ftdiv@f1
  4526  001C50  C054  F027         	movff	KalmanFilter_0@p_mid+1,___ftdiv@f1+1
  4527  001C54  C055  F028         	movff	KalmanFilter_0@p_mid+2,___ftdiv@f1+2
  4528  001C58  C03E  F01D         	movff	KalmanFilter_0@R,___ftadd@f2
  4529  001C5C  C03F  F01E         	movff	KalmanFilter_0@R+1,___ftadd@f2+1
  4530  001C60  C040  F01F         	movff	KalmanFilter_0@R+2,___ftadd@f2+2
  4531  001C64  C053  F01A         	movff	KalmanFilter_0@p_mid,___ftadd@f1
  4532  001C68  C054  F01B         	movff	KalmanFilter_0@p_mid+1,___ftadd@f1+1
  4533  001C6C  C055  F01C         	movff	KalmanFilter_0@p_mid+2,___ftadd@f1+2
  4534  001C70  EC13  F006         	call	___ftadd	;wreg free
  4535  001C74  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  4536  001C78  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  4537  001C7C  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  4538  001C80  ECDF  F010         	call	___ftdiv	;wreg free
  4539  001C84  C026  F04D         	movff	?___ftdiv,KalmanFilter_0@kg
  4540  001C88  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_0@kg+1
  4541  001C8C  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_0@kg+2
  4542                           
  4543                           ;flex.c: 31: x_now=x_mid+kg*(ResrcData_0-x_mid);
  4544  001C90  C04D  F029         	movff	KalmanFilter_0@kg,___ftmul@f2
  4545  001C94  C04E  F02A         	movff	KalmanFilter_0@kg+1,___ftmul@f2+1
  4546  001C98  C04F  F02B         	movff	KalmanFilter_0@kg+2,___ftmul@f2+2
  4547  001C9C  C035  F01D         	movff	KalmanFilter_0@ResrcData_0,___ftadd@f2
  4548  001CA0  C036  F01E         	movff	KalmanFilter_0@ResrcData_0+1,___ftadd@f2+1
  4549  001CA4  C037  F01F         	movff	KalmanFilter_0@ResrcData_0+2,___ftadd@f2+2
  4550  001CA8  C050  F012         	movff	KalmanFilter_0@x_mid,___ftneg@f1
  4551  001CAC  C051  F013         	movff	KalmanFilter_0@x_mid+1,___ftneg@f1+1
  4552  001CB0  C052  F014         	movff	KalmanFilter_0@x_mid+2,___ftneg@f1+2
  4553  001CB4  ECA8  F015         	call	___ftneg	;wreg free
  4554  001CB8  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4555  001CBC  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4556  001CC0  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4557  001CC4  EC13  F006         	call	___ftadd	;wreg free
  4558  001CC8  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4559  001CCC  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4560  001CD0  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4561  001CD4  EC65  F010         	call	___ftmul	;wreg free
  4562  001CD8  C026  F047         	movff	?___ftmul,_KalmanFilter_0$2183
  4563  001CDC  C027  F048         	movff	?___ftmul+1,_KalmanFilter_0$2183+1
  4564  001CE0  C028  F049         	movff	?___ftmul+2,_KalmanFilter_0$2183+2
  4565                           
  4566                           ;flex.c: 31: x_now=x_mid+kg*(ResrcData_0-x_mid);
  4567  001CE4  C047  F01A         	movff	_KalmanFilter_0$2183,___ftadd@f1
  4568  001CE8  C048  F01B         	movff	_KalmanFilter_0$2183+1,___ftadd@f1+1
  4569  001CEC  C049  F01C         	movff	_KalmanFilter_0$2183+2,___ftadd@f1+2
  4570  001CF0  C050  F01D         	movff	KalmanFilter_0@x_mid,___ftadd@f2
  4571  001CF4  C051  F01E         	movff	KalmanFilter_0@x_mid+1,___ftadd@f2+1
  4572  001CF8  C052  F01F         	movff	KalmanFilter_0@x_mid+2,___ftadd@f2+2
  4573  001CFC  EC13  F006         	call	___ftadd	;wreg free
  4574  001D00  C01A  F04A         	movff	?___ftadd,KalmanFilter_0@x_now
  4575  001D04  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_0@x_now+1
  4576  001D08  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_0@x_now+2
  4577                           
  4578                           ;flex.c: 32: p_now=(1-kg)*p_mid;
  4579  001D0C  0E00               	movlw	0
  4580  001D0E  6E1D               	movwf	___ftadd@f2,c
  4581  001D10  0E80               	movlw	128
  4582  001D12  6E1E               	movwf	___ftadd@f2+1,c
  4583  001D14  0E3F               	movlw	63
  4584  001D16  6E1F               	movwf	___ftadd@f2+2,c
  4585  001D18  C04D  F012         	movff	KalmanFilter_0@kg,___ftneg@f1
  4586  001D1C  C04E  F013         	movff	KalmanFilter_0@kg+1,___ftneg@f1+1
  4587  001D20  C04F  F014         	movff	KalmanFilter_0@kg+2,___ftneg@f1+2
  4588  001D24  ECA8  F015         	call	___ftneg	;wreg free
  4589  001D28  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4590  001D2C  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4591  001D30  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4592  001D34  EC13  F006         	call	___ftadd	;wreg free
  4593  001D38  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4594  001D3C  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4595  001D40  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4596  001D44  C053  F029         	movff	KalmanFilter_0@p_mid,___ftmul@f2
  4597  001D48  C054  F02A         	movff	KalmanFilter_0@p_mid+1,___ftmul@f2+1
  4598  001D4C  C055  F02B         	movff	KalmanFilter_0@p_mid+2,___ftmul@f2+2
  4599  001D50  EC65  F010         	call	___ftmul	;wreg free
  4600  001D54  C026  F044         	movff	?___ftmul,KalmanFilter_0@p_now
  4601  001D58  C027  F045         	movff	?___ftmul+1,KalmanFilter_0@p_now+1
  4602  001D5C  C028  F046         	movff	?___ftmul+2,KalmanFilter_0@p_now+2
  4603                           
  4604                           ;flex.c: 33: p_last_0 = p_now;
  4605  001D60  C044  F1A4         	movff	KalmanFilter_0@p_now,KalmanFilter_0@p_last_0
  4606  001D64  C045  F1A5         	movff	KalmanFilter_0@p_now+1,KalmanFilter_0@p_last_0+1
  4607  001D68  C046  F1A6         	movff	KalmanFilter_0@p_now+2,KalmanFilter_0@p_last_0+2
  4608                           
  4609                           ;flex.c: 34: x_last_0 = x_now;
  4610  001D6C  C04A  F062         	movff	KalmanFilter_0@x_now,KalmanFilter_0@x_last_0
  4611  001D70  C04B  F063         	movff	KalmanFilter_0@x_now+1,KalmanFilter_0@x_last_0+1
  4612  001D74  C04C  F064         	movff	KalmanFilter_0@x_now+2,KalmanFilter_0@x_last_0+2
  4613                           
  4614                           ;flex.c: 35: return x_now;
  4615  001D78  C04A  F035         	movff	KalmanFilter_0@x_now,?_KalmanFilter_0
  4616  001D7C  C04B  F036         	movff	KalmanFilter_0@x_now+1,?_KalmanFilter_0+1
  4617  001D80  C04C  F037         	movff	KalmanFilter_0@x_now+2,?_KalmanFilter_0+2
  4618  001D84  0012               	return	
  4619  001D86                     __end_of_KalmanFilter_0:
  4620                           	opt stack 0
  4621                           tblptru	equ	0xFF8
  4622                           postinc0	equ	0xFEE
  4623                           wreg	equ	0xFE8
  4624                           indf2	equ	0xFDF
  4625                           fsr2h	equ	0xFDA
  4626                           fsr2l	equ	0xFD9
  4627                           status	equ	0xFD8
  4628                           
  4629 ;; *************** function ___ftneg *****************
  4630 ;; Defined at:
  4631 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;  f1              3   17[COMRAM] float 
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;		None
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  3   17[COMRAM] float 
  4638 ;; Registers used:
  4639 ;;		wreg, status,2, status,0
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4645 ;;      Params:         3       0       0       0       0       0       0
  4646 ;;      Locals:         0       0       0       0       0       0       0
  4647 ;;      Temps:          0       0       0       0       0       0       0
  4648 ;;      Totals:         3       0       0       0       0       0       0
  4649 ;;Total ram usage:        3 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    1
  4652 ;; This function calls:
  4653 ;;		Nothing
  4654 ;; This function is called by:
  4655 ;;		_KalmanFilter_0
  4656 ;;		_KalmanFilter_1
  4657 ;;		_KalmanFilter_2
  4658 ;;		_KalmanFilter_3
  4659 ;;		_KalmanFilter_4
  4660 ;;		_KalmanFilter_5
  4661 ;;		_KalmanFilter_6
  4662 ;;		_KalmanFilter_7
  4663 ;;		_KalmanFilter_8
  4664 ;;		_KalmanFilter_9
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text15
  4669  002B50                     __ptext15:
  4670                           	opt stack 0
  4671  002B50                     ___ftneg:
  4672                           	opt stack 27
  4673                           
  4674                           ;incstack = 0
  4675  002B50  5012               	movf	___ftneg@f1,w,c
  4676  002B52  1013               	iorwf	___ftneg@f1+1,w,c
  4677  002B54  1014               	iorwf	___ftneg@f1+2,w,c
  4678  002B56  B4D8               	btfsc	status,2,c
  4679  002B58  D006               	goto	l866
  4680  002B5A  0E00               	movlw	0
  4681  002B5C  1A12               	xorwf	___ftneg@f1,f,c
  4682  002B5E  0E00               	movlw	0
  4683  002B60  1A13               	xorwf	___ftneg@f1+1,f,c
  4684  002B62  0E80               	movlw	128
  4685  002B64  1A14               	xorwf	___ftneg@f1+2,f,c
  4686  002B66                     l866:
  4687  002B66  C012  F012         	movff	___ftneg@f1,?___ftneg
  4688  002B6A  C013  F013         	movff	___ftneg@f1+1,?___ftneg+1
  4689  002B6E  C014  F014         	movff	___ftneg@f1+2,?___ftneg+2
  4690  002B72  0012               	return		;funcret
  4691  002B74                     __end_of___ftneg:
  4692                           	opt stack 0
  4693                           tblptru	equ	0xFF8
  4694                           postinc0	equ	0xFEE
  4695                           wreg	equ	0xFE8
  4696                           indf2	equ	0xFDF
  4697                           fsr2h	equ	0xFDA
  4698                           fsr2l	equ	0xFD9
  4699                           status	equ	0xFD8
  4700                           
  4701 ;; *************** function ___ftmul *****************
  4702 ;; Defined at:
  4703 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;  f1              3   37[COMRAM] float 
  4706 ;;  f2              3   40[COMRAM] float 
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  f3_as_produc    3   47[COMRAM] unsigned um
  4709 ;;  sign            1   51[COMRAM] unsigned char 
  4710 ;;  cntr            1   50[COMRAM] unsigned char 
  4711 ;;  exp             1   46[COMRAM] unsigned char 
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  3   37[COMRAM] float 
  4714 ;; Registers used:
  4715 ;;		wreg, status,2, status,0, cstack
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4721 ;;      Params:         6       0       0       0       0       0       0
  4722 ;;      Locals:         6       0       0       0       0       0       0
  4723 ;;      Temps:          3       0       0       0       0       0       0
  4724 ;;      Totals:        15       0       0       0       0       0       0
  4725 ;;Total ram usage:       15 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    2
  4728 ;; This function calls:
  4729 ;;		___ftpack
  4730 ;; This function is called by:
  4731 ;;		_KalmanFilter_0
  4732 ;;		_KalmanFilter_1
  4733 ;;		_KalmanFilter_2
  4734 ;;		_KalmanFilter_3
  4735 ;;		_KalmanFilter_4
  4736 ;;		_KalmanFilter_5
  4737 ;;		_KalmanFilter_6
  4738 ;;		_KalmanFilter_7
  4739 ;;		_KalmanFilter_8
  4740 ;;		_KalmanFilter_9
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text16
  4745  0020CA                     __ptext16:
  4746                           	opt stack 0
  4747  0020CA                     ___ftmul:
  4748                           	opt stack 26
  4749                           
  4750                           ;incstack = 0
  4751  0020CA  C028  F02C         	movff	___ftmul@f1+2,??___ftmul
  4752  0020CE  6A2D               	clrf	(??___ftmul+1)& (0+255),c
  4753  0020D0  6A2E               	clrf	(??___ftmul+2)& (0+255),c
  4754  0020D2  3427               	rlcf	___ftmul@f1+1,w,c
  4755  0020D4  362C               	rlcf	??___ftmul& (0+255),f,c
  4756  0020D6  E301               	bnc	u5211
  4757  0020D8  802D               	bsf	(??___ftmul+1)& (0+255),0,c
  4758  0020DA                     u5211:
  4759  0020DA  502C               	movf	??___ftmul,w,c
  4760  0020DC  6E2F               	movwf	___ftmul@exp,c
  4761  0020DE  502F               	movf	___ftmul@exp,w,c
  4762  0020E0  A4D8               	btfss	status,2,c
  4763  0020E2  D007               	goto	l4466
  4764  0020E4  0E00               	movlw	0
  4765  0020E6  6E26               	movwf	?___ftmul,c
  4766  0020E8  0E00               	movlw	0
  4767  0020EA  6E27               	movwf	?___ftmul+1,c
  4768  0020EC  0E00               	movlw	0
  4769  0020EE  6E28               	movwf	?___ftmul+2,c
  4770  0020F0  0012               	return	
  4771  0020F2                     l4466:
  4772  0020F2  C02B  F02C         	movff	___ftmul@f2+2,??___ftmul
  4773  0020F6  6A2D               	clrf	(??___ftmul+1)& (0+255),c
  4774  0020F8  6A2E               	clrf	(??___ftmul+2)& (0+255),c
  4775  0020FA  342A               	rlcf	___ftmul@f2+1,w,c
  4776  0020FC  362C               	rlcf	??___ftmul& (0+255),f,c
  4777  0020FE  E301               	bnc	u5231
  4778  002100  802D               	bsf	(??___ftmul+1)& (0+255),0,c
  4779  002102                     u5231:
  4780  002102  502C               	movf	??___ftmul,w,c
  4781  002104  6E34               	movwf	___ftmul@sign,c
  4782  002106  5034               	movf	___ftmul@sign,w,c
  4783  002108  A4D8               	btfss	status,2,c
  4784  00210A  D007               	goto	l4472
  4785  00210C  0E00               	movlw	0
  4786  00210E  6E26               	movwf	?___ftmul,c
  4787  002110  0E00               	movlw	0
  4788  002112  6E27               	movwf	?___ftmul+1,c
  4789  002114  0E00               	movlw	0
  4790  002116  6E28               	movwf	?___ftmul+2,c
  4791  002118  0012               	return	
  4792  00211A                     l4472:
  4793  00211A  5034               	movf	___ftmul@sign,w,c
  4794  00211C  0F7B               	addlw	123
  4795  00211E  262F               	addwf	___ftmul@exp,f,c
  4796  002120  C028  F034         	movff	___ftmul@f1+2,___ftmul@sign
  4797  002124  502B               	movf	___ftmul@f2+2,w,c
  4798  002126  1A34               	xorwf	___ftmul@sign,f,c
  4799  002128  0E80               	movlw	128
  4800  00212A  1634               	andwf	___ftmul@sign,f,c
  4801  00212C  8E27               	bsf	___ftmul@f1+1,7,c
  4802  00212E  8E2A               	bsf	___ftmul@f2+1,7,c
  4803  002130  0EFF               	movlw	255
  4804  002132  1629               	andwf	___ftmul@f2,f,c
  4805  002134  0EFF               	movlw	255
  4806  002136  162A               	andwf	___ftmul@f2+1,f,c
  4807  002138  0E00               	movlw	0
  4808  00213A  162B               	andwf	___ftmul@f2+2,f,c
  4809  00213C  0E00               	movlw	0
  4810  00213E  6E30               	movwf	___ftmul@f3_as_product,c
  4811  002140  0E00               	movlw	0
  4812  002142  6E31               	movwf	___ftmul@f3_as_product+1,c
  4813  002144  0E00               	movlw	0
  4814  002146  6E32               	movwf	___ftmul@f3_as_product+2,c
  4815  002148  0E07               	movlw	7
  4816  00214A  6E33               	movwf	___ftmul@cntr,c
  4817  00214C                     l4486:
  4818  00214C  A026               	btfss	___ftmul@f1,0,c
  4819  00214E  D006               	goto	l4490
  4820  002150  5029               	movf	___ftmul@f2,w,c
  4821  002152  2630               	addwf	___ftmul@f3_as_product,f,c
  4822  002154  502A               	movf	___ftmul@f2+1,w,c
  4823  002156  2231               	addwfc	___ftmul@f3_as_product+1,f,c
  4824  002158  502B               	movf	___ftmul@f2+2,w,c
  4825  00215A  2232               	addwfc	___ftmul@f3_as_product+2,f,c
  4826  00215C                     l4490:
  4827  00215C  90D8               	bcf	status,0,c
  4828  00215E  3228               	rrcf	___ftmul@f1+2,f,c
  4829  002160  3227               	rrcf	___ftmul@f1+1,f,c
  4830  002162  3226               	rrcf	___ftmul@f1,f,c
  4831  002164  90D8               	bcf	status,0,c
  4832  002166  3629               	rlcf	___ftmul@f2,f,c
  4833  002168  362A               	rlcf	___ftmul@f2+1,f,c
  4834  00216A  362B               	rlcf	___ftmul@f2+2,f,c
  4835  00216C  2E33               	decfsz	___ftmul@cntr,f,c
  4836  00216E  D7EE               	goto	l4486
  4837  002170  0E09               	movlw	9
  4838  002172  6E33               	movwf	___ftmul@cntr,c
  4839  002174                     l4496:
  4840  002174  A026               	btfss	___ftmul@f1,0,c
  4841  002176  D006               	goto	l4500
  4842  002178  5029               	movf	___ftmul@f2,w,c
  4843  00217A  2630               	addwf	___ftmul@f3_as_product,f,c
  4844  00217C  502A               	movf	___ftmul@f2+1,w,c
  4845  00217E  2231               	addwfc	___ftmul@f3_as_product+1,f,c
  4846  002180  502B               	movf	___ftmul@f2+2,w,c
  4847  002182  2232               	addwfc	___ftmul@f3_as_product+2,f,c
  4848  002184                     l4500:
  4849  002184  90D8               	bcf	status,0,c
  4850  002186  3228               	rrcf	___ftmul@f1+2,f,c
  4851  002188  3227               	rrcf	___ftmul@f1+1,f,c
  4852  00218A  3226               	rrcf	___ftmul@f1,f,c
  4853  00218C  90D8               	bcf	status,0,c
  4854  00218E  3232               	rrcf	___ftmul@f3_as_product+2,f,c
  4855  002190  3231               	rrcf	___ftmul@f3_as_product+1,f,c
  4856  002192  3230               	rrcf	___ftmul@f3_as_product,f,c
  4857  002194  2E33               	decfsz	___ftmul@cntr,f,c
  4858  002196  D7EE               	goto	l4496
  4859  002198  C030  F012         	movff	___ftmul@f3_as_product,___ftpack@arg
  4860  00219C  C031  F013         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4861  0021A0  C032  F014         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4862  0021A4  C02F  F015         	movff	___ftmul@exp,___ftpack@exp
  4863  0021A8  C034  F016         	movff	___ftmul@sign,___ftpack@sign
  4864  0021AC  EC76  F012         	call	___ftpack	;wreg free
  4865  0021B0  C012  F026         	movff	?___ftpack,?___ftmul
  4866  0021B4  C013  F027         	movff	?___ftpack+1,?___ftmul+1
  4867  0021B8  C014  F028         	movff	?___ftpack+2,?___ftmul+2
  4868  0021BC  0012               	return	
  4869  0021BE                     __end_of___ftmul:
  4870                           	opt stack 0
  4871                           tblptru	equ	0xFF8
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           indf2	equ	0xFDF
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function ___ftdiv *****************
  4880 ;; Defined at:
  4881 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;  f1              3   37[COMRAM] float 
  4884 ;;  f2              3   40[COMRAM] float 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;  f3              3   47[COMRAM] float 
  4887 ;;  sign            1   51[COMRAM] unsigned char 
  4888 ;;  exp             1   50[COMRAM] unsigned char 
  4889 ;;  cntr            1   46[COMRAM] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  3   37[COMRAM] float 
  4892 ;; Registers used:
  4893 ;;		wreg, status,2, status,0, cstack
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4899 ;;      Params:         6       0       0       0       0       0       0
  4900 ;;      Locals:         6       0       0       0       0       0       0
  4901 ;;      Temps:          3       0       0       0       0       0       0
  4902 ;;      Totals:        15       0       0       0       0       0       0
  4903 ;;Total ram usage:       15 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    2
  4906 ;; This function calls:
  4907 ;;		___ftpack
  4908 ;; This function is called by:
  4909 ;;		_KalmanFilter_0
  4910 ;;		_KalmanFilter_1
  4911 ;;		_KalmanFilter_2
  4912 ;;		_KalmanFilter_3
  4913 ;;		_KalmanFilter_4
  4914 ;;		_KalmanFilter_5
  4915 ;;		_KalmanFilter_6
  4916 ;;		_KalmanFilter_7
  4917 ;;		_KalmanFilter_8
  4918 ;;		_KalmanFilter_9
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           	psect	text17
  4923  0021BE                     __ptext17:
  4924                           	opt stack 0
  4925  0021BE                     ___ftdiv:
  4926                           	opt stack 26
  4927                           
  4928                           ;incstack = 0
  4929  0021BE  C028  F02C         	movff	___ftdiv@f1+2,??___ftdiv
  4930  0021C2  6A2D               	clrf	(??___ftdiv+1)& (0+255),c
  4931  0021C4  6A2E               	clrf	(??___ftdiv+2)& (0+255),c
  4932  0021C6  3427               	rlcf	___ftdiv@f1+1,w,c
  4933  0021C8  362C               	rlcf	??___ftdiv& (0+255),f,c
  4934  0021CA  E301               	bnc	u5161
  4935  0021CC  802D               	bsf	(??___ftdiv+1)& (0+255),0,c
  4936  0021CE                     u5161:
  4937  0021CE  502C               	movf	??___ftdiv,w,c
  4938  0021D0  6E33               	movwf	___ftdiv@exp,c
  4939  0021D2  5033               	movf	___ftdiv@exp,w,c
  4940  0021D4  A4D8               	btfss	status,2,c
  4941  0021D6  D007               	goto	l4420
  4942  0021D8  0E00               	movlw	0
  4943  0021DA  6E26               	movwf	?___ftdiv,c
  4944  0021DC  0E00               	movlw	0
  4945  0021DE  6E27               	movwf	?___ftdiv+1,c
  4946  0021E0  0E00               	movlw	0
  4947  0021E2  6E28               	movwf	?___ftdiv+2,c
  4948  0021E4  0012               	return	
  4949  0021E6                     l4420:
  4950  0021E6  C02B  F02C         	movff	___ftdiv@f2+2,??___ftdiv
  4951  0021EA  6A2D               	clrf	(??___ftdiv+1)& (0+255),c
  4952  0021EC  6A2E               	clrf	(??___ftdiv+2)& (0+255),c
  4953  0021EE  342A               	rlcf	___ftdiv@f2+1,w,c
  4954  0021F0  362C               	rlcf	??___ftdiv& (0+255),f,c
  4955  0021F2  E301               	bnc	u5181
  4956  0021F4  802D               	bsf	(??___ftdiv+1)& (0+255),0,c
  4957  0021F6                     u5181:
  4958  0021F6  502C               	movf	??___ftdiv,w,c
  4959  0021F8  6E34               	movwf	___ftdiv@sign,c
  4960  0021FA  5034               	movf	___ftdiv@sign,w,c
  4961  0021FC  A4D8               	btfss	status,2,c
  4962  0021FE  D007               	goto	l4426
  4963  002200  0E00               	movlw	0
  4964  002202  6E26               	movwf	?___ftdiv,c
  4965  002204  0E00               	movlw	0
  4966  002206  6E27               	movwf	?___ftdiv+1,c
  4967  002208  0E00               	movlw	0
  4968  00220A  6E28               	movwf	?___ftdiv+2,c
  4969  00220C  0012               	return	
  4970  00220E                     l4426:
  4971  00220E  0E00               	movlw	0
  4972  002210  6E30               	movwf	___ftdiv@f3,c
  4973  002212  0E00               	movlw	0
  4974  002214  6E31               	movwf	___ftdiv@f3+1,c
  4975  002216  0E00               	movlw	0
  4976  002218  6E32               	movwf	___ftdiv@f3+2,c
  4977  00221A  5034               	movf	___ftdiv@sign,w,c
  4978  00221C  0F89               	addlw	137
  4979  00221E  5E33               	subwf	___ftdiv@exp,f,c
  4980  002220  C028  F034         	movff	___ftdiv@f1+2,___ftdiv@sign
  4981  002224  502B               	movf	___ftdiv@f2+2,w,c
  4982  002226  1A34               	xorwf	___ftdiv@sign,f,c
  4983  002228  0E80               	movlw	128
  4984  00222A  1634               	andwf	___ftdiv@sign,f,c
  4985  00222C  8E27               	bsf	___ftdiv@f1+1,7,c
  4986  00222E  0EFF               	movlw	255
  4987  002230  1626               	andwf	___ftdiv@f1,f,c
  4988  002232  0EFF               	movlw	255
  4989  002234  1627               	andwf	___ftdiv@f1+1,f,c
  4990  002236  0E00               	movlw	0
  4991  002238  1628               	andwf	___ftdiv@f1+2,f,c
  4992  00223A  8E2A               	bsf	___ftdiv@f2+1,7,c
  4993  00223C  0EFF               	movlw	255
  4994  00223E  1629               	andwf	___ftdiv@f2,f,c
  4995  002240  0EFF               	movlw	255
  4996  002242  162A               	andwf	___ftdiv@f2+1,f,c
  4997  002244  0E00               	movlw	0
  4998  002246  162B               	andwf	___ftdiv@f2+2,f,c
  4999  002248  0E18               	movlw	24
  5000  00224A  6E2F               	movwf	___ftdiv@cntr,c
  5001  00224C                     l4446:
  5002  00224C  90D8               	bcf	status,0,c
  5003  00224E  3630               	rlcf	___ftdiv@f3,f,c
  5004  002250  3631               	rlcf	___ftdiv@f3+1,f,c
  5005  002252  3632               	rlcf	___ftdiv@f3+2,f,c
  5006  002254  5029               	movf	___ftdiv@f2,w,c
  5007  002256  5C26               	subwf	___ftdiv@f1,w,c
  5008  002258  502A               	movf	___ftdiv@f2+1,w,c
  5009  00225A  5827               	subwfb	___ftdiv@f1+1,w,c
  5010  00225C  502B               	movf	___ftdiv@f2+2,w,c
  5011  00225E  5828               	subwfb	___ftdiv@f1+2,w,c
  5012  002260  A0D8               	btfss	status,0,c
  5013  002262  D007               	goto	l844
  5014  002264  5029               	movf	___ftdiv@f2,w,c
  5015  002266  5E26               	subwf	___ftdiv@f1,f,c
  5016  002268  502A               	movf	___ftdiv@f2+1,w,c
  5017  00226A  5A27               	subwfb	___ftdiv@f1+1,f,c
  5018  00226C  502B               	movf	___ftdiv@f2+2,w,c
  5019  00226E  5A28               	subwfb	___ftdiv@f1+2,f,c
  5020  002270  8030               	bsf	___ftdiv@f3,0,c
  5021  002272                     l844:
  5022  002272  90D8               	bcf	status,0,c
  5023  002274  3626               	rlcf	___ftdiv@f1,f,c
  5024  002276  3627               	rlcf	___ftdiv@f1+1,f,c
  5025  002278  3628               	rlcf	___ftdiv@f1+2,f,c
  5026  00227A  2E2F               	decfsz	___ftdiv@cntr,f,c
  5027  00227C  D7E7               	goto	l4446
  5028  00227E  C030  F012         	movff	___ftdiv@f3,___ftpack@arg
  5029  002282  C031  F013         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5030  002286  C032  F014         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5031  00228A  C033  F015         	movff	___ftdiv@exp,___ftpack@exp
  5032  00228E  C034  F016         	movff	___ftdiv@sign,___ftpack@sign
  5033  002292  EC76  F012         	call	___ftpack	;wreg free
  5034  002296  C012  F026         	movff	?___ftpack,?___ftdiv
  5035  00229A  C013  F027         	movff	?___ftpack+1,?___ftdiv+1
  5036  00229E  C014  F028         	movff	?___ftpack+2,?___ftdiv+2
  5037  0022A2  0012               	return	
  5038  0022A4                     __end_of___ftdiv:
  5039                           	opt stack 0
  5040                           tblptru	equ	0xFF8
  5041                           postinc0	equ	0xFEE
  5042                           wreg	equ	0xFE8
  5043                           indf2	equ	0xFDF
  5044                           fsr2h	equ	0xFDA
  5045                           fsr2l	equ	0xFD9
  5046                           status	equ	0xFD8
  5047                           
  5048 ;; *************** function ___ftadd *****************
  5049 ;; Defined at:
  5050 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;  f1              3   25[COMRAM] float 
  5053 ;;  f2              3   28[COMRAM] float 
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;  exp1            1   36[COMRAM] unsigned char 
  5056 ;;  exp2            1   35[COMRAM] unsigned char 
  5057 ;;  sign            1   34[COMRAM] unsigned char 
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  3   25[COMRAM] float 
  5060 ;; Registers used:
  5061 ;;		wreg, status,2, status,0, cstack
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5067 ;;      Params:         6       0       0       0       0       0       0
  5068 ;;      Locals:         3       0       0       0       0       0       0
  5069 ;;      Temps:          3       0       0       0       0       0       0
  5070 ;;      Totals:        12       0       0       0       0       0       0
  5071 ;;Total ram usage:       12 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    2
  5074 ;; This function calls:
  5075 ;;		___ftpack
  5076 ;; This function is called by:
  5077 ;;		_KalmanFilter_0
  5078 ;;		_KalmanFilter_1
  5079 ;;		_KalmanFilter_2
  5080 ;;		_KalmanFilter_3
  5081 ;;		_KalmanFilter_4
  5082 ;;		_KalmanFilter_5
  5083 ;;		_KalmanFilter_6
  5084 ;;		_KalmanFilter_7
  5085 ;;		_KalmanFilter_8
  5086 ;;		_KalmanFilter_9
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text18
  5091  000C26                     __ptext18:
  5092                           	opt stack 0
  5093  000C26                     ___ftadd:
  5094                           	opt stack 26
  5095                           
  5096                           ;incstack = 0
  5097  000C26  C01C  F020         	movff	___ftadd@f1+2,??___ftadd
  5098  000C2A  6A21               	clrf	(??___ftadd+1)& (0+255),c
  5099  000C2C  6A22               	clrf	(??___ftadd+2)& (0+255),c
  5100  000C2E  341B               	rlcf	___ftadd@f1+1,w,c
  5101  000C30  3620               	rlcf	??___ftadd& (0+255),f,c
  5102  000C32  E301               	bnc	u4951
  5103  000C34  8021               	bsf	(??___ftadd+1)& (0+255),0,c
  5104  000C36                     u4951:
  5105  000C36  5020               	movf	??___ftadd,w,c
  5106  000C38  6E25               	movwf	___ftadd@exp1,c
  5107  000C3A  C01F  F020         	movff	___ftadd@f2+2,??___ftadd
  5108  000C3E  6A21               	clrf	(??___ftadd+1)& (0+255),c
  5109  000C40  6A22               	clrf	(??___ftadd+2)& (0+255),c
  5110  000C42  341E               	rlcf	___ftadd@f2+1,w,c
  5111  000C44  3620               	rlcf	??___ftadd& (0+255),f,c
  5112  000C46  E301               	bnc	u4961
  5113  000C48  8021               	bsf	(??___ftadd+1)& (0+255),0,c
  5114  000C4A                     u4961:
  5115  000C4A  5020               	movf	??___ftadd,w,c
  5116  000C4C  6E24               	movwf	___ftadd@exp2,c
  5117  000C4E  5025               	movf	___ftadd@exp1,w,c
  5118  000C50  B4D8               	btfsc	status,2,c
  5119  000C52  D00B               	goto	l809
  5120  000C54  5024               	movf	___ftadd@exp2,w,c
  5121  000C56  5C25               	subwf	___ftadd@exp1,w,c
  5122  000C58  B0D8               	btfsc	status,0,c
  5123  000C5A  D00E               	goto	l4352
  5124  000C5C  5025               	movf	___ftadd@exp1,w,c
  5125  000C5E  0800               	sublw	0
  5126  000C60  2424               	addwf	___ftadd@exp2,w,c
  5127  000C62  6E20               	movwf	??___ftadd& (0+255),c
  5128  000C64  0E18               	movlw	24
  5129  000C66  6420               	cpfsgt	??___ftadd,c
  5130  000C68  D007               	goto	l4352
  5131  000C6A                     l809:
  5132  000C6A  C01D  F01A         	movff	___ftadd@f2,?___ftadd
  5133  000C6E  C01E  F01B         	movff	___ftadd@f2+1,?___ftadd+1
  5134  000C72  C01F  F01C         	movff	___ftadd@f2+2,?___ftadd+2
  5135  000C76  0012               	return	
  5136  000C78                     l4352:
  5137  000C78  5024               	movf	___ftadd@exp2,w,c
  5138  000C7A  B4D8               	btfsc	status,2,c
  5139  000C7C  D00B               	goto	l813
  5140  000C7E  5025               	movf	___ftadd@exp1,w,c
  5141  000C80  5C24               	subwf	___ftadd@exp2,w,c
  5142  000C82  B0D8               	btfsc	status,0,c
  5143  000C84  D00E               	goto	l4358
  5144  000C86  5024               	movf	___ftadd@exp2,w,c
  5145  000C88  0800               	sublw	0
  5146  000C8A  2425               	addwf	___ftadd@exp1,w,c
  5147  000C8C  6E20               	movwf	??___ftadd& (0+255),c
  5148  000C8E  0E18               	movlw	24
  5149  000C90  6420               	cpfsgt	??___ftadd,c
  5150  000C92  D007               	goto	l4358
  5151  000C94                     l813:
  5152  000C94  C01A  F01A         	movff	___ftadd@f1,?___ftadd
  5153  000C98  C01B  F01B         	movff	___ftadd@f1+1,?___ftadd+1
  5154  000C9C  C01C  F01C         	movff	___ftadd@f1+2,?___ftadd+2
  5155  000CA0  0012               	return	
  5156  000CA2                     l4358:
  5157  000CA2  0E06               	movlw	6
  5158  000CA4  6E23               	movwf	___ftadd@sign,c
  5159  000CA6  BE1C               	btfsc	___ftadd@f1+2,7,c
  5160  000CA8  8E23               	bsf	___ftadd@sign,7,c
  5161  000CAA  BE1F               	btfsc	___ftadd@f2+2,7,c
  5162  000CAC  8C23               	bsf	___ftadd@sign,6,c
  5163  000CAE  8E1B               	bsf	___ftadd@f1+1,7,c
  5164  000CB0  0EFF               	movlw	255
  5165  000CB2  161A               	andwf	___ftadd@f1,f,c
  5166  000CB4  0EFF               	movlw	255
  5167  000CB6  161B               	andwf	___ftadd@f1+1,f,c
  5168  000CB8  0E00               	movlw	0
  5169  000CBA  161C               	andwf	___ftadd@f1+2,f,c
  5170  000CBC  8E1E               	bsf	___ftadd@f2+1,7,c
  5171  000CBE  0EFF               	movlw	255
  5172  000CC0  161D               	andwf	___ftadd@f2,f,c
  5173  000CC2  0EFF               	movlw	255
  5174  000CC4  161E               	andwf	___ftadd@f2+1,f,c
  5175  000CC6  0E00               	movlw	0
  5176  000CC8  161F               	andwf	___ftadd@f2+2,f,c
  5177  000CCA  5024               	movf	___ftadd@exp2,w,c
  5178  000CCC  5C25               	subwf	___ftadd@exp1,w,c
  5179  000CCE  B0D8               	btfsc	status,0,c
  5180  000CD0  D01B               	goto	l4384
  5181  000CD2                     l4374:
  5182  000CD2  90D8               	bcf	status,0,c
  5183  000CD4  361D               	rlcf	___ftadd@f2,f,c
  5184  000CD6  361E               	rlcf	___ftadd@f2+1,f,c
  5185  000CD8  361F               	rlcf	___ftadd@f2+2,f,c
  5186  000CDA  0624               	decf	___ftadd@exp2,f,c
  5187  000CDC  5025               	movf	___ftadd@exp1,w,c
  5188  000CDE  1824               	xorwf	___ftadd@exp2,w,c
  5189  000CE0  B4D8               	btfsc	status,2,c
  5190  000CE2  D00D               	goto	l4382
  5191  000CE4  0623               	decf	___ftadd@sign,f,c
  5192  000CE6  C023  F020         	movff	___ftadd@sign,??___ftadd
  5193  000CEA  0E07               	movlw	7
  5194  000CEC  1620               	andwf	??___ftadd,f,c
  5195  000CEE  B4D8               	btfsc	status,2,c
  5196  000CF0  D006               	goto	l4382
  5197  000CF2  D7EF               	goto	l4374
  5198  000CF4                     l4380:
  5199  000CF4  90D8               	bcf	status,0,c
  5200  000CF6  321C               	rrcf	___ftadd@f1+2,f,c
  5201  000CF8  321B               	rrcf	___ftadd@f1+1,f,c
  5202  000CFA  321A               	rrcf	___ftadd@f1,f,c
  5203  000CFC  2A25               	incf	___ftadd@exp1,f,c
  5204  000CFE                     l4382:
  5205  000CFE  5024               	movf	___ftadd@exp2,w,c
  5206  000D00  1825               	xorwf	___ftadd@exp1,w,c
  5207  000D02  B4D8               	btfsc	status,2,c
  5208  000D04  D01F               	goto	l824
  5209  000D06  D7F6               	goto	l4380
  5210  000D08                     l4384:
  5211  000D08  5025               	movf	___ftadd@exp1,w,c
  5212  000D0A  5C24               	subwf	___ftadd@exp2,w,c
  5213  000D0C  B0D8               	btfsc	status,0,c
  5214  000D0E  D01A               	goto	l824
  5215  000D10                     l4386:
  5216  000D10  90D8               	bcf	status,0,c
  5217  000D12  361A               	rlcf	___ftadd@f1,f,c
  5218  000D14  361B               	rlcf	___ftadd@f1+1,f,c
  5219  000D16  361C               	rlcf	___ftadd@f1+2,f,c
  5220  000D18  0625               	decf	___ftadd@exp1,f,c
  5221  000D1A  5025               	movf	___ftadd@exp1,w,c
  5222  000D1C  1824               	xorwf	___ftadd@exp2,w,c
  5223  000D1E  B4D8               	btfsc	status,2,c
  5224  000D20  D00D               	goto	l4394
  5225  000D22  0623               	decf	___ftadd@sign,f,c
  5226  000D24  C023  F020         	movff	___ftadd@sign,??___ftadd
  5227  000D28  0E07               	movlw	7
  5228  000D2A  1620               	andwf	??___ftadd,f,c
  5229  000D2C  B4D8               	btfsc	status,2,c
  5230  000D2E  D006               	goto	l4394
  5231  000D30  D7EF               	goto	l4386
  5232  000D32                     l4392:
  5233  000D32  90D8               	bcf	status,0,c
  5234  000D34  321F               	rrcf	___ftadd@f2+2,f,c
  5235  000D36  321E               	rrcf	___ftadd@f2+1,f,c
  5236  000D38  321D               	rrcf	___ftadd@f2,f,c
  5237  000D3A  2A24               	incf	___ftadd@exp2,f,c
  5238  000D3C                     l4394:
  5239  000D3C  5024               	movf	___ftadd@exp2,w,c
  5240  000D3E  1825               	xorwf	___ftadd@exp1,w,c
  5241  000D40  A4D8               	btfss	status,2,c
  5242  000D42  D7F7               	goto	l4392
  5243  000D44                     l824:
  5244  000D44  AE23               	btfss	___ftadd@sign,7,c
  5245  000D46  D00C               	goto	l833
  5246  000D48  0EFF               	movlw	255
  5247  000D4A  1A1A               	xorwf	___ftadd@f1,f,c
  5248  000D4C  0EFF               	movlw	255
  5249  000D4E  1A1B               	xorwf	___ftadd@f1+1,f,c
  5250  000D50  0EFF               	movlw	255
  5251  000D52  1A1C               	xorwf	___ftadd@f1+2,f,c
  5252  000D54  0E01               	movlw	1
  5253  000D56  261A               	addwf	___ftadd@f1,f,c
  5254  000D58  0E00               	movlw	0
  5255  000D5A  221B               	addwfc	___ftadd@f1+1,f,c
  5256  000D5C  0E00               	movlw	0
  5257  000D5E  221C               	addwfc	___ftadd@f1+2,f,c
  5258  000D60                     l833:
  5259  000D60  AC23               	btfss	___ftadd@sign,6,c
  5260  000D62  D00C               	goto	l4400
  5261  000D64  0EFF               	movlw	255
  5262  000D66  1A1D               	xorwf	___ftadd@f2,f,c
  5263  000D68  0EFF               	movlw	255
  5264  000D6A  1A1E               	xorwf	___ftadd@f2+1,f,c
  5265  000D6C  0EFF               	movlw	255
  5266  000D6E  1A1F               	xorwf	___ftadd@f2+2,f,c
  5267  000D70  0E01               	movlw	1
  5268  000D72  261D               	addwf	___ftadd@f2,f,c
  5269  000D74  0E00               	movlw	0
  5270  000D76  221E               	addwfc	___ftadd@f2+1,f,c
  5271  000D78  0E00               	movlw	0
  5272  000D7A  221F               	addwfc	___ftadd@f2+2,f,c
  5273  000D7C                     l4400:
  5274  000D7C  0E00               	movlw	0
  5275  000D7E  6E23               	movwf	___ftadd@sign,c
  5276  000D80  501A               	movf	___ftadd@f1,w,c
  5277  000D82  261D               	addwf	___ftadd@f2,f,c
  5278  000D84  501B               	movf	___ftadd@f1+1,w,c
  5279  000D86  221E               	addwfc	___ftadd@f2+1,f,c
  5280  000D88  501C               	movf	___ftadd@f1+2,w,c
  5281  000D8A  221F               	addwfc	___ftadd@f2+2,f,c
  5282  000D8C  AE1F               	btfss	___ftadd@f2+2,7,c
  5283  000D8E  D00E               	goto	l4410
  5284  000D90  0EFF               	movlw	255
  5285  000D92  1A1D               	xorwf	___ftadd@f2,f,c
  5286  000D94  0EFF               	movlw	255
  5287  000D96  1A1E               	xorwf	___ftadd@f2+1,f,c
  5288  000D98  0EFF               	movlw	255
  5289  000D9A  1A1F               	xorwf	___ftadd@f2+2,f,c
  5290  000D9C  0E01               	movlw	1
  5291  000D9E  261D               	addwf	___ftadd@f2,f,c
  5292  000DA0  0E00               	movlw	0
  5293  000DA2  221E               	addwfc	___ftadd@f2+1,f,c
  5294  000DA4  0E00               	movlw	0
  5295  000DA6  221F               	addwfc	___ftadd@f2+2,f,c
  5296  000DA8  0E01               	movlw	1
  5297  000DAA  6E23               	movwf	___ftadd@sign,c
  5298  000DAC                     l4410:
  5299  000DAC  C01D  F012         	movff	___ftadd@f2,___ftpack@arg
  5300  000DB0  C01E  F013         	movff	___ftadd@f2+1,___ftpack@arg+1
  5301  000DB4  C01F  F014         	movff	___ftadd@f2+2,___ftpack@arg+2
  5302  000DB8  C025  F015         	movff	___ftadd@exp1,___ftpack@exp
  5303  000DBC  C023  F016         	movff	___ftadd@sign,___ftpack@sign
  5304  000DC0  EC76  F012         	call	___ftpack	;wreg free
  5305  000DC4  C012  F01A         	movff	?___ftpack,?___ftadd
  5306  000DC8  C013  F01B         	movff	?___ftpack+1,?___ftadd+1
  5307  000DCC  C014  F01C         	movff	?___ftpack+2,?___ftadd+2
  5308  000DD0  0012               	return	
  5309  000DD2                     __end_of___ftadd:
  5310                           	opt stack 0
  5311                           tblptru	equ	0xFF8
  5312                           postinc0	equ	0xFEE
  5313                           wreg	equ	0xFE8
  5314                           indf2	equ	0xFDF
  5315                           fsr2h	equ	0xFDA
  5316                           fsr2l	equ	0xFD9
  5317                           status	equ	0xFD8
  5318                           
  5319 ;; *************** function ___ftpack *****************
  5320 ;; Defined at:
  5321 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  arg             3   17[COMRAM] unsigned um
  5324 ;;  exp             1   20[COMRAM] unsigned char 
  5325 ;;  sign            1   21[COMRAM] unsigned char 
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;		None
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  3   17[COMRAM] float 
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, status,0
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5337 ;;      Params:         5       0       0       0       0       0       0
  5338 ;;      Locals:         0       0       0       0       0       0       0
  5339 ;;      Temps:          3       0       0       0       0       0       0
  5340 ;;      Totals:         8       0       0       0       0       0       0
  5341 ;;Total ram usage:        8 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:    1
  5344 ;; This function calls:
  5345 ;;		Nothing
  5346 ;; This function is called by:
  5347 ;;		___ftadd
  5348 ;;		___ftdiv
  5349 ;;		___ftmul
  5350 ;;		___lwtoft
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text19
  5355  0024EC                     __ptext19:
  5356                           	opt stack 0
  5357  0024EC                     ___ftpack:
  5358                           	opt stack 27
  5359                           
  5360                           ;incstack = 0
  5361  0024EC  5015               	movf	___ftpack@exp,w,c
  5362  0024EE  B4D8               	btfsc	status,2,c
  5363  0024F0  D005               	goto	l3894
  5364  0024F2  5012               	movf	___ftpack@arg,w,c
  5365  0024F4  1013               	iorwf	___ftpack@arg+1,w,c
  5366  0024F6  1014               	iorwf	___ftpack@arg+2,w,c
  5367  0024F8  A4D8               	btfss	status,2,c
  5368  0024FA  D00C               	goto	l3900
  5369  0024FC                     l3894:
  5370  0024FC  0E00               	movlw	0
  5371  0024FE  6E12               	movwf	?___ftpack,c
  5372  002500  0E00               	movlw	0
  5373  002502  6E13               	movwf	?___ftpack+1,c
  5374  002504  0E00               	movlw	0
  5375  002506  6E14               	movwf	?___ftpack+2,c
  5376  002508  0012               	return	
  5377  00250A                     l3898:
  5378  00250A  2A15               	incf	___ftpack@exp,f,c
  5379  00250C  90D8               	bcf	status,0,c
  5380  00250E  3214               	rrcf	___ftpack@arg+2,f,c
  5381  002510  3213               	rrcf	___ftpack@arg+1,f,c
  5382  002512  3212               	rrcf	___ftpack@arg,f,c
  5383  002514                     l3900:
  5384  002514  0E00               	movlw	0
  5385  002516  1412               	andwf	___ftpack@arg,w,c
  5386  002518  6E17               	movwf	??___ftpack& (0+255),c
  5387  00251A  0E00               	movlw	0
  5388  00251C  1413               	andwf	___ftpack@arg+1,w,c
  5389  00251E  6E18               	movwf	(??___ftpack+1)& (0+255),c
  5390  002520  0EFE               	movlw	254
  5391  002522  1414               	andwf	___ftpack@arg+2,w,c
  5392  002524  6E19               	movwf	(??___ftpack+2)& (0+255),c
  5393  002526  5017               	movf	??___ftpack,w,c
  5394  002528  1018               	iorwf	??___ftpack+1,w,c
  5395  00252A  1019               	iorwf	??___ftpack+2,w,c
  5396  00252C  B4D8               	btfsc	status,2,c
  5397  00252E  D00C               	goto	l3906
  5398  002530  D7EC               	goto	l3898
  5399  002532                     l3902:
  5400  002532  2A15               	incf	___ftpack@exp,f,c
  5401  002534  0E01               	movlw	1
  5402  002536  2612               	addwf	___ftpack@arg,f,c
  5403  002538  0E00               	movlw	0
  5404  00253A  2213               	addwfc	___ftpack@arg+1,f,c
  5405  00253C  0E00               	movlw	0
  5406  00253E  2214               	addwfc	___ftpack@arg+2,f,c
  5407  002540  90D8               	bcf	status,0,c
  5408  002542  3214               	rrcf	___ftpack@arg+2,f,c
  5409  002544  3213               	rrcf	___ftpack@arg+1,f,c
  5410  002546  3212               	rrcf	___ftpack@arg,f,c
  5411  002548                     l3906:
  5412  002548  0E00               	movlw	0
  5413  00254A  1412               	andwf	___ftpack@arg,w,c
  5414  00254C  6E17               	movwf	??___ftpack& (0+255),c
  5415  00254E  0E00               	movlw	0
  5416  002550  1413               	andwf	___ftpack@arg+1,w,c
  5417  002552  6E18               	movwf	(??___ftpack+1)& (0+255),c
  5418  002554  0EFF               	movlw	255
  5419  002556  1414               	andwf	___ftpack@arg+2,w,c
  5420  002558  6E19               	movwf	(??___ftpack+2)& (0+255),c
  5421  00255A  5017               	movf	??___ftpack,w,c
  5422  00255C  1018               	iorwf	??___ftpack+1,w,c
  5423  00255E  1019               	iorwf	??___ftpack+2,w,c
  5424  002560  B4D8               	btfsc	status,2,c
  5425  002562  D006               	goto	l3910
  5426  002564  D7E6               	goto	l3902
  5427  002566                     l3908:
  5428  002566  0615               	decf	___ftpack@exp,f,c
  5429  002568  90D8               	bcf	status,0,c
  5430  00256A  3612               	rlcf	___ftpack@arg,f,c
  5431  00256C  3613               	rlcf	___ftpack@arg+1,f,c
  5432  00256E  3614               	rlcf	___ftpack@arg+2,f,c
  5433  002570                     l3910:
  5434  002570  BE13               	btfsc	___ftpack@arg+1,7,c
  5435  002572  D003               	goto	l786
  5436  002574  0E02               	movlw	2
  5437  002576  6015               	cpfslt	___ftpack@exp,c
  5438  002578  D7F6               	goto	l3908
  5439  00257A                     l786:
  5440  00257A  A015               	btfss	___ftpack@exp,0,c
  5441  00257C  9E13               	bcf	___ftpack@arg+1,7,c
  5442  00257E  90D8               	bcf	status,0,c
  5443  002580  3215               	rrcf	___ftpack@exp,f,c
  5444  002582  5015               	movf	___ftpack@exp,w,c
  5445  002584  1214               	iorwf	___ftpack@arg+2,f,c
  5446  002586  5016               	movf	___ftpack@sign,w,c
  5447  002588  A4D8               	btfss	status,2,c
  5448  00258A  8E14               	bsf	___ftpack@arg+2,7,c
  5449  00258C  C012  F012         	movff	___ftpack@arg,?___ftpack
  5450  002590  C013  F013         	movff	___ftpack@arg+1,?___ftpack+1
  5451  002594  C014  F014         	movff	___ftpack@arg+2,?___ftpack+2
  5452  002598  0012               	return	
  5453  00259A                     __end_of___ftpack:
  5454                           	opt stack 0
  5455                           tblptru	equ	0xFF8
  5456                           postinc0	equ	0xFEE
  5457                           wreg	equ	0xFE8
  5458                           indf2	equ	0xFDF
  5459                           fsr2h	equ	0xFDA
  5460                           fsr2l	equ	0xFD9
  5461                           status	equ	0xFD8
  5462                           
  5463 ;; *************** function _timer_intrrupt_initinal *****************
  5464 ;; Defined at:
  5465 ;;		line 35 in file "harwave/initial.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;		None
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;		None
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  1    wreg      void 
  5472 ;; Registers used:
  5473 ;;		None
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5479 ;;      Params:         0       0       0       0       0       0       0
  5480 ;;      Locals:         0       0       0       0       0       0       0
  5481 ;;      Temps:          0       0       0       0       0       0       0
  5482 ;;      Totals:         0       0       0       0       0       0       0
  5483 ;;Total ram usage:        0 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    1
  5486 ;; This function calls:
  5487 ;;		Nothing
  5488 ;; This function is called by:
  5489 ;;		_main
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text20
  5494  002BF8                     __ptext20:
  5495                           	opt stack 0
  5496  002BF8                     _timer_intrrupt_initinal:
  5497                           	opt stack 29
  5498                           
  5499                           ;initial.c: 37: RCONbits.IPEN=1;
  5500                           
  5501                           ;incstack = 0
  5502  002BF8  8ED0               	bsf	4048,7,c	;volatile
  5503                           
  5504                           ;initial.c: 38: INTCONbits.GIE=1;
  5505  002BFA  8EF2               	bsf	intcon,7,c	;volatile
  5506                           
  5507                           ;initial.c: 39: INTCONbits.PEIE=1;
  5508  002BFC  8CF2               	bsf	intcon,6,c	;volatile
  5509                           
  5510                           ;initial.c: 40: INTCONbits.TMR0IE=1;
  5511  002BFE  8AF2               	bsf	intcon,5,c	;volatile
  5512                           
  5513                           ;initial.c: 41: INTCONbits.TMR0IF=0;
  5514  002C00  94F2               	bcf	intcon,2,c	;volatile
  5515                           
  5516                           ;initial.c: 42: PIE1bits.TMR2IE=0;
  5517  002C02  929D               	bcf	3997,1,c	;volatile
  5518                           
  5519                           ;initial.c: 43: PIR1bits.TMR2IF=0;
  5520  002C04  929E               	bcf	3998,1,c	;volatile
  5521  002C06  0012               	return		;funcret
  5522  002C08                     __end_of_timer_intrrupt_initinal:
  5523                           	opt stack 0
  5524                           tblptru	equ	0xFF8
  5525                           intcon	equ	0xFF2
  5526                           postinc0	equ	0xFEE
  5527                           wreg	equ	0xFE8
  5528                           indf2	equ	0xFDF
  5529                           fsr2h	equ	0xFDA
  5530                           fsr2l	equ	0xFD9
  5531                           status	equ	0xFD8
  5532                           
  5533 ;; *************** function _timer_0_initial *****************
  5534 ;; Defined at:
  5535 ;;		line 24 in file "harwave/initial.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;		None
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;		None
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  1    wreg      void 
  5542 ;; Registers used:
  5543 ;;		None
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5549 ;;      Params:         0       0       0       0       0       0       0
  5550 ;;      Locals:         0       0       0       0       0       0       0
  5551 ;;      Temps:          0       0       0       0       0       0       0
  5552 ;;      Totals:         0       0       0       0       0       0       0
  5553 ;;Total ram usage:        0 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:    1
  5556 ;; This function calls:
  5557 ;;		Nothing
  5558 ;; This function is called by:
  5559 ;;		_main
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           	psect	text21
  5564  002C08                     __ptext21:
  5565                           	opt stack 0
  5566  002C08                     _timer_0_initial:
  5567                           	opt stack 29
  5568                           
  5569                           ;initial.c: 27: T0CONbits.T08BIT=1;
  5570                           
  5571                           ;incstack = 0
  5572  002C08  8CD5               	bsf	4053,6,c	;volatile
  5573                           
  5574                           ;initial.c: 28: T0CONbits.T0CS=0;
  5575  002C0A  9AD5               	bcf	4053,5,c	;volatile
  5576                           
  5577                           ;initial.c: 29: T0CONbits.PSA=0;
  5578  002C0C  96D5               	bcf	4053,3,c	;volatile
  5579                           
  5580                           ;initial.c: 30: T0CONbits.T0PS2=1;
  5581  002C0E  84D5               	bsf	4053,2,c	;volatile
  5582                           
  5583                           ;initial.c: 31: T0CONbits.T0PS1=0;
  5584  002C10  92D5               	bcf	4053,1,c	;volatile
  5585                           
  5586                           ;initial.c: 32: T0CONbits.T0PS0=1;
  5587  002C12  80D5               	bsf	4053,0,c	;volatile
  5588                           
  5589                           ;initial.c: 33: T0CONbits.TMR0ON=1;
  5590  002C14  8ED5               	bsf	4053,7,c	;volatile
  5591  002C16  0012               	return		;funcret
  5592  002C18                     __end_of_timer_0_initial:
  5593                           	opt stack 0
  5594                           tblptru	equ	0xFF8
  5595                           intcon	equ	0xFF2
  5596                           postinc0	equ	0xFEE
  5597                           wreg	equ	0xFE8
  5598                           indf2	equ	0xFDF
  5599                           fsr2h	equ	0xFDA
  5600                           fsr2l	equ	0xFD9
  5601                           status	equ	0xFD8
  5602                           
  5603 ;; *************** function _oclillator_initial *****************
  5604 ;; Defined at:
  5605 ;;		line 11 in file "harwave/initial.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;		None
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;		None
  5610 ;; Return value:  Size  Location     Type
  5611 ;;                  1    wreg      void 
  5612 ;; Registers used:
  5613 ;;		None
  5614 ;; Tracked objects:
  5615 ;;		On entry : 0/0
  5616 ;;		On exit  : 0/0
  5617 ;;		Unchanged: 0/0
  5618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5619 ;;      Params:         0       0       0       0       0       0       0
  5620 ;;      Locals:         0       0       0       0       0       0       0
  5621 ;;      Temps:          0       0       0       0       0       0       0
  5622 ;;      Totals:         0       0       0       0       0       0       0
  5623 ;;Total ram usage:        0 bytes
  5624 ;; Hardware stack levels used:    1
  5625 ;; Hardware stack levels required when called:    1
  5626 ;; This function calls:
  5627 ;;		Nothing
  5628 ;; This function is called by:
  5629 ;;		_main
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633                           	psect	text22
  5634  002C18                     __ptext22:
  5635                           	opt stack 0
  5636  002C18                     _oclillator_initial:
  5637                           	opt stack 29
  5638                           
  5639                           ;initial.c: 13: OSCCONbits.IOFS=0;
  5640                           
  5641                           ;incstack = 0
  5642  002C18  94D3               	bcf	4051,2,c	;volatile
  5643                           
  5644                           ;initial.c: 14: OSCCONbits.SCS0=0;
  5645  002C1A  90D3               	bcf	4051,0,c	;volatile
  5646                           
  5647                           ;initial.c: 15: OSCCONbits.SCS1=0;
  5648  002C1C  92D3               	bcf	4051,1,c	;volatile
  5649  002C1E  0012               	return		;funcret
  5650  002C20                     __end_of_oclillator_initial:
  5651                           	opt stack 0
  5652                           tblptru	equ	0xFF8
  5653                           intcon	equ	0xFF2
  5654                           postinc0	equ	0xFEE
  5655                           wreg	equ	0xFE8
  5656                           indf2	equ	0xFDF
  5657                           fsr2h	equ	0xFDA
  5658                           fsr2l	equ	0xFD9
  5659                           status	equ	0xFD8
  5660                           
  5661 ;; *************** function _initial_UART *****************
  5662 ;; Defined at:
  5663 ;;		line 36 in file "harwave/UART.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;		None
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;		None
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      void 
  5670 ;; Registers used:
  5671 ;;		wreg, status,2
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5677 ;;      Params:         0       0       0       0       0       0       0
  5678 ;;      Locals:         0       0       0       0       0       0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0
  5680 ;;      Totals:         0       0       0       0       0       0       0
  5681 ;;Total ram usage:        0 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    1
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_main
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           	psect	text23
  5692  002B74                     __ptext23:
  5693                           	opt stack 0
  5694  002B74                     _initial_UART:
  5695                           	opt stack 29
  5696                           
  5697                           ;UART.c: 37: TXSTAbits.SYNC=0;
  5698                           
  5699                           ;incstack = 0
  5700  002B74  98AC               	bcf	4012,4,c	;volatile
  5701                           
  5702                           ;UART.c: 38: TXSTAbits.TX9=0;
  5703  002B76  9CAC               	bcf	4012,6,c	;volatile
  5704                           
  5705                           ;UART.c: 39: RCSTAbits.SPEN=1;
  5706  002B78  8EAB               	bsf	4011,7,c	;volatile
  5707                           
  5708                           ;UART.c: 40: PIE1bits.TX1IE=0;
  5709  002B7A  989D               	bcf	3997,4,c	;volatile
  5710                           
  5711                           ;UART.c: 41: TXSTAbits.TXEN=1;
  5712  002B7C  8AAC               	bsf	4012,5,c	;volatile
  5713                           
  5714                           ;UART.c: 43: INTCONbits.GIE=1;
  5715  002B7E  8EF2               	bsf	intcon,7,c	;volatile
  5716                           
  5717                           ;UART.c: 44: INTCONbits.PEIE=1;
  5718  002B80  8CF2               	bsf	intcon,6,c	;volatile
  5719                           
  5720                           ;UART.c: 45: RCSTAbits.CREN=1;
  5721  002B82  88AB               	bsf	4011,4,c	;volatile
  5722                           
  5723                           ;UART.c: 46: PIE1bits.RCIE=1;
  5724  002B84  8A9D               	bsf	3997,5,c	;volatile
  5725                           
  5726                           ;UART.c: 47: RCSTAbits.RC9 = 0;
  5727  002B86  9CAB               	bcf	4011,6,c	;volatile
  5728                           
  5729                           ;UART.c: 48: TXSTAbits.BRGH=1;
  5730  002B88  84AC               	bsf	4012,2,c	;volatile
  5731                           
  5732                           ;UART.c: 49: BAUDCONbits.BRG16=1;
  5733  002B8A  86B8               	bsf	4024,3,c	;volatile
  5734                           
  5735                           ;UART.c: 50: SPBRGH=0;
  5736  002B8C  0E00               	movlw	0
  5737  002B8E  6EB0               	movwf	4016,c	;volatile
  5738                           
  5739                           ;UART.c: 51: SPBRG=86;
  5740  002B90  0E56               	movlw	86
  5741  002B92  6EAF               	movwf	4015,c	;volatile
  5742  002B94  0012               	return		;funcret
  5743  002B96                     __end_of_initial_UART:
  5744                           	opt stack 0
  5745                           tblptru	equ	0xFF8
  5746                           intcon	equ	0xFF2
  5747                           postinc0	equ	0xFEE
  5748                           wreg	equ	0xFE8
  5749                           indf2	equ	0xFDF
  5750                           fsr2h	equ	0xFDA
  5751                           fsr2l	equ	0xFD9
  5752                           status	equ	0xFD8
  5753                           
  5754 ;; *************** function _adc_initial *****************
  5755 ;; Defined at:
  5756 ;;		line 46 in file "harwave/initial.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;		None
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;		None
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      void 
  5763 ;; Registers used:
  5764 ;;		None
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5770 ;;      Params:         0       0       0       0       0       0       0
  5771 ;;      Locals:         0       0       0       0       0       0       0
  5772 ;;      Temps:          0       0       0       0       0       0       0
  5773 ;;      Totals:         0       0       0       0       0       0       0
  5774 ;;Total ram usage:        0 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    1
  5777 ;; This function calls:
  5778 ;;		Nothing
  5779 ;; This function is called by:
  5780 ;;		_main
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           	psect	text24
  5785  002AB8                     __ptext24:
  5786                           	opt stack 0
  5787  002AB8                     _adc_initial:
  5788                           	opt stack 29
  5789                           
  5790                           ;initial.c: 47: ADCON0bits.ADON=1;
  5791                           
  5792                           ;incstack = 0
  5793  002AB8  80C2               	bsf	4034,0,c	;volatile
  5794                           
  5795                           ;initial.c: 48: ADCON1bits.VCFG1=0;
  5796  002ABA  9AC1               	bcf	4033,5,c	;volatile
  5797                           
  5798                           ;initial.c: 49: ADCON1bits.VCFG0=0;
  5799  002ABC  98C1               	bcf	4033,4,c	;volatile
  5800                           
  5801                           ;initial.c: 50: ADCON1bits.PCFG3=0;
  5802  002ABE  96C1               	bcf	4033,3,c	;volatile
  5803                           
  5804                           ;initial.c: 51: ADCON1bits.PCFG2=1;
  5805  002AC0  84C1               	bsf	4033,2,c	;volatile
  5806                           
  5807                           ;initial.c: 52: ADCON1bits.PCFG1=0;
  5808  002AC2  92C1               	bcf	4033,1,c	;volatile
  5809                           
  5810                           ;initial.c: 53: ADCON1bits.PCFG0=1;
  5811  002AC4  80C1               	bsf	4033,0,c	;volatile
  5812                           
  5813                           ;initial.c: 54: ADCON0bits.CHS3=0;
  5814  002AC6  9AC2               	bcf	4034,5,c	;volatile
  5815                           
  5816                           ;initial.c: 55: ADCON0bits.CHS2=0;
  5817  002AC8  98C2               	bcf	4034,4,c	;volatile
  5818                           
  5819                           ;initial.c: 56: ADCON0bits.CHS1=0;
  5820  002ACA  96C2               	bcf	4034,3,c	;volatile
  5821                           
  5822                           ;initial.c: 57: ADCON0bits.CHS0=0;
  5823  002ACC  94C2               	bcf	4034,2,c	;volatile
  5824                           
  5825                           ;initial.c: 58: ADCON2bits.ADFM=0;
  5826  002ACE  9EC0               	bcf	4032,7,c	;volatile
  5827                           
  5828                           ;initial.c: 59: ADCON2bits.ACQT2=1;
  5829  002AD0  8AC0               	bsf	4032,5,c	;volatile
  5830                           
  5831                           ;initial.c: 60: ADCON2bits.ACQT1=1;
  5832  002AD2  88C0               	bsf	4032,4,c	;volatile
  5833                           
  5834                           ;initial.c: 61: ADCON2bits.ACQT0=1;
  5835  002AD4  86C0               	bsf	4032,3,c	;volatile
  5836                           
  5837                           ;initial.c: 62: ADCON2bits.ADCS2=0;
  5838  002AD6  94C0               	bcf	4032,2,c	;volatile
  5839                           
  5840                           ;initial.c: 63: ADCON2bits.ADCS1=1;
  5841  002AD8  82C0               	bsf	4032,1,c	;volatile
  5842                           
  5843                           ;initial.c: 64: ADCON2bits.ADCS0=0;
  5844  002ADA  90C0               	bcf	4032,0,c	;volatile
  5845                           
  5846                           ;initial.c: 65: PIE1bits.ADIE=1;
  5847  002ADC  8C9D               	bsf	3997,6,c	;volatile
  5848  002ADE  0012               	return		;funcret
  5849  002AE0                     __end_of_adc_initial:
  5850                           	opt stack 0
  5851                           tblptru	equ	0xFF8
  5852                           intcon	equ	0xFF2
  5853                           postinc0	equ	0xFEE
  5854                           wreg	equ	0xFE8
  5855                           indf2	equ	0xFDF
  5856                           fsr2h	equ	0xFDA
  5857                           fsr2l	equ	0xFD9
  5858                           status	equ	0xFD8
  5859                           
  5860 ;; *************** function ___awmod *****************
  5861 ;; Defined at:
  5862 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;  dividend        2   17[COMRAM] int 
  5865 ;;  divisor         2   19[COMRAM] int 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  sign            1   22[COMRAM] unsigned char 
  5868 ;;  counter         1   21[COMRAM] unsigned char 
  5869 ;; Return value:  Size  Location     Type
  5870 ;;                  2   17[COMRAM] int 
  5871 ;; Registers used:
  5872 ;;		wreg, status,2, status,0
  5873 ;; Tracked objects:
  5874 ;;		On entry : 0/0
  5875 ;;		On exit  : 0/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5878 ;;      Params:         4       0       0       0       0       0       0
  5879 ;;      Locals:         2       0       0       0       0       0       0
  5880 ;;      Temps:          0       0       0       0       0       0       0
  5881 ;;      Totals:         6       0       0       0       0       0       0
  5882 ;;Total ram usage:        6 bytes
  5883 ;; Hardware stack levels used:    1
  5884 ;; Hardware stack levels required when called:    1
  5885 ;; This function calls:
  5886 ;;		Nothing
  5887 ;; This function is called by:
  5888 ;;		_main
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           	psect	text25
  5893  002822                     __ptext25:
  5894                           	opt stack 0
  5895  002822                     ___awmod:
  5896                           	opt stack 29
  5897                           
  5898                           ;incstack = 0
  5899  002822  0E00               	movlw	0
  5900  002824  6E17               	movwf	___awmod@sign,c
  5901  002826  AE13               	btfss	___awmod@dividend+1,7,c
  5902  002828  D006               	goto	l3624
  5903  00282A  6C12               	negf	___awmod@dividend,c
  5904  00282C  1E13               	comf	___awmod@dividend+1,f,c
  5905  00282E  B0D8               	btfsc	status,0,c
  5906  002830  2A13               	incf	___awmod@dividend+1,f,c
  5907  002832  0E01               	movlw	1
  5908  002834  6E17               	movwf	___awmod@sign,c
  5909  002836                     l3624:
  5910  002836  AE15               	btfss	___awmod@divisor+1,7,c
  5911  002838  D004               	goto	l3628
  5912  00283A  6C14               	negf	___awmod@divisor,c
  5913  00283C  1E15               	comf	___awmod@divisor+1,f,c
  5914  00283E  B0D8               	btfsc	status,0,c
  5915  002840  2A15               	incf	___awmod@divisor+1,f,c
  5916  002842                     l3628:
  5917  002842  5014               	movf	___awmod@divisor,w,c
  5918  002844  1015               	iorwf	___awmod@divisor+1,w,c
  5919  002846  B4D8               	btfsc	status,2,c
  5920  002848  D018               	goto	l3644
  5921  00284A  0E01               	movlw	1
  5922  00284C  6E16               	movwf	___awmod@counter,c
  5923  00284E  D004               	goto	l3634
  5924  002850                     l3632:
  5925  002850  90D8               	bcf	status,0,c
  5926  002852  3614               	rlcf	___awmod@divisor,f,c
  5927  002854  3615               	rlcf	___awmod@divisor+1,f,c
  5928  002856  2A16               	incf	___awmod@counter,f,c
  5929  002858                     l3634:
  5930  002858  AE15               	btfss	___awmod@divisor+1,7,c
  5931  00285A  D7FA               	goto	l3632
  5932  00285C                     l3636:
  5933  00285C  5014               	movf	___awmod@divisor,w,c
  5934  00285E  5C12               	subwf	___awmod@dividend,w,c
  5935  002860  5015               	movf	___awmod@divisor+1,w,c
  5936  002862  5813               	subwfb	___awmod@dividend+1,w,c
  5937  002864  A0D8               	btfss	status,0,c
  5938  002866  D004               	goto	l3640
  5939  002868  5014               	movf	___awmod@divisor,w,c
  5940  00286A  5E12               	subwf	___awmod@dividend,f,c
  5941  00286C  5015               	movf	___awmod@divisor+1,w,c
  5942  00286E  5A13               	subwfb	___awmod@dividend+1,f,c
  5943  002870                     l3640:
  5944  002870  90D8               	bcf	status,0,c
  5945  002872  3215               	rrcf	___awmod@divisor+1,f,c
  5946  002874  3214               	rrcf	___awmod@divisor,f,c
  5947  002876  2E16               	decfsz	___awmod@counter,f,c
  5948  002878  D7F1               	goto	l3636
  5949  00287A                     l3644:
  5950  00287A  5017               	movf	___awmod@sign,w,c
  5951  00287C  B4D8               	btfsc	status,2,c
  5952  00287E  D004               	goto	l3648
  5953  002880  6C12               	negf	___awmod@dividend,c
  5954  002882  1E13               	comf	___awmod@dividend+1,f,c
  5955  002884  B0D8               	btfsc	status,0,c
  5956  002886  2A13               	incf	___awmod@dividend+1,f,c
  5957  002888                     l3648:
  5958  002888  C012  F012         	movff	___awmod@dividend,?___awmod
  5959  00288C  C013  F013         	movff	___awmod@dividend+1,?___awmod+1
  5960  002890  0012               	return	
  5961  002892                     __end_of___awmod:
  5962                           	opt stack 0
  5963                           tblptru	equ	0xFF8
  5964                           intcon	equ	0xFF2
  5965                           postinc0	equ	0xFEE
  5966                           wreg	equ	0xFE8
  5967                           indf2	equ	0xFDF
  5968                           fsr2h	equ	0xFDA
  5969                           fsr2l	equ	0xFD9
  5970                           status	equ	0xFD8
  5971                           
  5972 ;; *************** function _GPIO_initial *****************
  5973 ;; Defined at:
  5974 ;;		line 3 in file "harwave/initial.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;		None
  5977 ;; Auto vars:     Size  Location     Type
  5978 ;;		None
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  1    wreg      void 
  5981 ;; Registers used:
  5982 ;;		wreg, status,2
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5988 ;;      Params:         0       0       0       0       0       0       0
  5989 ;;      Locals:         0       0       0       0       0       0       0
  5990 ;;      Temps:          0       0       0       0       0       0       0
  5991 ;;      Totals:         0       0       0       0       0       0       0
  5992 ;;Total ram usage:        0 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:    1
  5995 ;; This function calls:
  5996 ;;		Nothing
  5997 ;; This function is called by:
  5998 ;;		_main
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text26
  6003  002BE6                     __ptext26:
  6004                           	opt stack 0
  6005  002BE6                     _GPIO_initial:
  6006                           	opt stack 29
  6007                           
  6008                           ;initial.c: 6: TRISD = 0X00;
  6009                           
  6010                           ;incstack = 0
  6011  002BE6  0E00               	movlw	0
  6012  002BE8  6E95               	movwf	3989,c	;volatile
  6013                           
  6014                           ;initial.c: 7: PORTD = 0X00;
  6015  002BEA  0E00               	movlw	0
  6016  002BEC  6E83               	movwf	3971,c	;volatile
  6017                           
  6018                           ;initial.c: 8: LATD =0X00;
  6019  002BEE  0E00               	movlw	0
  6020  002BF0  6E8C               	movwf	3980,c	;volatile
  6021                           
  6022                           ;initial.c: 9: TRISC = 0xF0;
  6023  002BF2  0EF0               	movlw	240
  6024  002BF4  6E94               	movwf	3988,c	;volatile
  6025  002BF6  0012               	return		;funcret
  6026  002BF8                     __end_of_GPIO_initial:
  6027                           	opt stack 0
  6028                           tblptru	equ	0xFF8
  6029                           intcon	equ	0xFF2
  6030                           postinc0	equ	0xFEE
  6031                           wreg	equ	0xFE8
  6032                           indf2	equ	0xFDF
  6033                           fsr2h	equ	0xFDA
  6034                           fsr2l	equ	0xFD9
  6035                           status	equ	0xFD8
  6036                           
  6037 ;; *************** function _ESP8266_Server *****************
  6038 ;; Defined at:
  6039 ;;		line 192 in file "harwave/UART.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;		None
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;		None
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      void 
  6046 ;; Registers used:
  6047 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6053 ;;      Params:         0       0       0       0       0       0       0
  6054 ;;      Locals:         0       0       0       0       0       0       0
  6055 ;;      Temps:          0       0       0       0       0       0       0
  6056 ;;      Totals:         0       0       0       0       0       0       0
  6057 ;;Total ram usage:        0 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    6
  6060 ;; This function calls:
  6061 ;;		_AP_MODE
  6062 ;;		_ESP8266_AT_Test
  6063 ;;		_ESP8266_BuildAP
  6064 ;;		_ESP8266_Cmd
  6065 ;;		_ESP8266_Rst
  6066 ;; This function is called by:
  6067 ;;		_main
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           	psect	text27
  6072  0022A4                     __ptext27:
  6073                           	opt stack 0
  6074  0022A4                     _ESP8266_Server:
  6075                           	opt stack 24
  6076                           
  6077                           ;UART.c: 193: ESP8266_AT_Test () ;
  6078                           
  6079                           ;incstack = 0
  6080  0022A4  EC46  F015         	call	_ESP8266_AT_Test	;wreg free
  6081                           
  6082                           ;UART.c: 194: ESP8266_Rst ( );
  6083  0022A8  EC70  F015         	call	_ESP8266_Rst	;wreg free
  6084                           
  6085                           ;UART.c: 195: AP_MODE();
  6086  0022AC  EC16  F015         	call	_AP_MODE	;wreg free
  6087  0022B0                     l4862:
  6088  0022B0  0EED               	movlw	low STR_36
  6089  0022B2  6E41               	movwf	ESP8266_BuildAP@pSSID,c
  6090  0022B4  0E7F               	movlw	high STR_36
  6091  0022B6  6E42               	movwf	ESP8266_BuildAP@pSSID+1,c
  6092  0022B8  0E8E               	movlw	low STR_37
  6093  0022BA  6E43               	movwf	ESP8266_BuildAP@pPassWord,c
  6094  0022BC  0E7F               	movlw	high STR_37
  6095  0022BE  6E44               	movwf	ESP8266_BuildAP@pPassWord+1,c
  6096  0022C0  0EFC               	movlw	low STR_38
  6097  0022C2  6E45               	movwf	ESP8266_BuildAP@enunPsdMode,c
  6098  0022C4  0E7F               	movlw	high STR_38
  6099  0022C6  6E46               	movwf	ESP8266_BuildAP@enunPsdMode+1,c
  6100  0022C8  EC49  F014         	call	_ESP8266_BuildAP	;wreg free
  6101  0022CC  0900               	iorlw	0
  6102  0022CE  B4D8               	btfsc	status,2,c
  6103  0022D0  D7EF               	goto	l4862
  6104  0022D2                     l4864:
  6105  0022D2  0E24               	movlw	low STR_39
  6106  0022D4  6E25               	movwf	ESP8266_Cmd@cmd,c
  6107  0022D6  0E7F               	movlw	high STR_39
  6108  0022D8  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6109  0022DA  0ECE               	movlw	low (STR_3+5)
  6110  0022DC  6E27               	movwf	ESP8266_Cmd@reply1,c
  6111  0022DE  0E7F               	movlw	high (STR_3+5)
  6112  0022E0  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6113  0022E2  0E00               	movlw	0
  6114  0022E4  6E29               	movwf	ESP8266_Cmd@reply2,c
  6115  0022E6  0E00               	movlw	0
  6116  0022E8  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6117  0022EA  0E01               	movlw	1
  6118  0022EC  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6119  0022EE  0EF4               	movlw	244
  6120  0022F0  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6121  0022F2  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6122  0022F6  0900               	iorlw	0
  6123  0022F8  B4D8               	btfsc	status,2,c
  6124  0022FA  D7EB               	goto	l4864
  6125  0022FC                     l4866:
  6126  0022FC  0EE8               	movlw	low STR_41
  6127  0022FE  6E25               	movwf	ESP8266_Cmd@cmd,c
  6128  002300  0E7E               	movlw	high STR_41
  6129  002302  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6130  002304  0ECE               	movlw	low (STR_3+5)
  6131  002306  6E27               	movwf	ESP8266_Cmd@reply1,c
  6132  002308  0E7F               	movlw	high (STR_3+5)
  6133  00230A  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6134  00230C  0E00               	movlw	0
  6135  00230E  6E29               	movwf	ESP8266_Cmd@reply2,c
  6136  002310  0E00               	movlw	0
  6137  002312  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6138  002314  0E03               	movlw	3
  6139  002316  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6140  002318  0EE8               	movlw	232
  6141  00231A  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6142  00231C  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6143  002320  0900               	iorlw	0
  6144  002322  B4D8               	btfsc	status,2,c
  6145  002324  D7EB               	goto	l4866
  6146  002326                     l4868:
  6147  002326  0E40               	movlw	low STR_43
  6148  002328  6E25               	movwf	ESP8266_Cmd@cmd,c
  6149  00232A  0E7F               	movlw	high STR_43
  6150  00232C  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6151  00232E  0ECE               	movlw	low (STR_3+5)
  6152  002330  6E27               	movwf	ESP8266_Cmd@reply1,c
  6153  002332  0E7F               	movlw	high (STR_3+5)
  6154  002334  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6155  002336  0E00               	movlw	0
  6156  002338  6E29               	movwf	ESP8266_Cmd@reply2,c
  6157  00233A  0E00               	movlw	0
  6158  00233C  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6159  00233E  0E01               	movlw	1
  6160  002340  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6161  002342  0EF4               	movlw	244
  6162  002344  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6163  002346  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6164  00234A  0900               	iorlw	0
  6165  00234C  B4D8               	btfsc	status,2,c
  6166  00234E  D7EB               	goto	l4868
  6167  002350                     l4870:
  6168  002350  0E63               	movlw	low STR_45
  6169  002352  6E25               	movwf	ESP8266_Cmd@cmd,c
  6170  002354  0E7E               	movlw	high STR_45
  6171  002356  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6172  002358  0ECE               	movlw	low (STR_3+5)
  6173  00235A  6E27               	movwf	ESP8266_Cmd@reply1,c
  6174  00235C  0E7F               	movlw	high (STR_3+5)
  6175  00235E  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6176  002360  0E00               	movlw	0
  6177  002362  6E29               	movwf	ESP8266_Cmd@reply2,c
  6178  002364  0E00               	movlw	0
  6179  002366  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6180  002368  0E01               	movlw	1
  6181  00236A  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6182  00236C  0EF4               	movlw	244
  6183  00236E  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6184  002370  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6185  002374  0900               	iorlw	0
  6186  002376  A4D8               	btfss	status,2,c
  6187  002378  0012               	return	
  6188  00237A  D7EA               	goto	l4870
  6189  00237C                     __end_of_ESP8266_Server:
  6190                           	opt stack 0
  6191                           tblptru	equ	0xFF8
  6192                           intcon	equ	0xFF2
  6193                           postinc0	equ	0xFEE
  6194                           wreg	equ	0xFE8
  6195                           indf2	equ	0xFDF
  6196                           fsr2h	equ	0xFDA
  6197                           fsr2l	equ	0xFD9
  6198                           status	equ	0xFD8
  6199                           
  6200 ;; *************** function _ESP8266_Rst *****************
  6201 ;; Defined at:
  6202 ;;		line 107 in file "harwave/UART.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;		None
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;		None
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      void 
  6209 ;; Registers used:
  6210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6216 ;;      Params:         0       0       0       0       0       0       0
  6217 ;;      Locals:         0       0       0       0       0       0       0
  6218 ;;      Temps:          0       0       0       0       0       0       0
  6219 ;;      Totals:         0       0       0       0       0       0       0
  6220 ;;Total ram usage:        0 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    4
  6223 ;; This function calls:
  6224 ;;		_ESP8266_Cmd
  6225 ;; This function is called by:
  6226 ;;		_ESP8266_Server
  6227 ;;		_ESP8266_client
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           	psect	text28
  6232  002AE0                     __ptext28:
  6233                           	opt stack 0
  6234  002AE0                     _ESP8266_Rst:
  6235                           	opt stack 25
  6236                           
  6237                           ;UART.c: 110: ESP8266_Cmd ( (void*)"AT+RST\r\n", (void*)"OK",(void*) "ready", 6000 );
  6238                           
  6239                           ;incstack = 0
  6240  002AE0  0EC0               	movlw	low STR_6
  6241  002AE2  6E25               	movwf	ESP8266_Cmd@cmd,c
  6242  002AE4  0E7F               	movlw	high STR_6
  6243  002AE6  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6244  002AE8  0ECE               	movlw	low (STR_3+5)
  6245  002AEA  6E27               	movwf	ESP8266_Cmd@reply1,c
  6246  002AEC  0E7F               	movlw	high (STR_3+5)
  6247  002AEE  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6248  002AF0  0ED8               	movlw	low STR_8
  6249  002AF2  6E29               	movwf	ESP8266_Cmd@reply2,c
  6250  002AF4  0E7F               	movlw	high STR_8
  6251  002AF6  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6252  002AF8  0E17               	movlw	23
  6253  002AFA  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6254  002AFC  0E70               	movlw	112
  6255  002AFE  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6256  002B00  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6257  002B04  0012               	return		;funcret
  6258  002B06                     __end_of_ESP8266_Rst:
  6259                           	opt stack 0
  6260                           tblptru	equ	0xFF8
  6261                           intcon	equ	0xFF2
  6262                           postinc0	equ	0xFEE
  6263                           wreg	equ	0xFE8
  6264                           indf2	equ	0xFDF
  6265                           fsr2h	equ	0xFDA
  6266                           fsr2l	equ	0xFD9
  6267                           status	equ	0xFD8
  6268                           
  6269 ;; *************** function _ESP8266_BuildAP *****************
  6270 ;; Defined at:
  6271 ;;		line 148 in file "harwave/UART.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;  pSSID           2   64[COMRAM] PTR unsigned char 
  6274 ;;		 -> STR_36(4), 
  6275 ;;  pPassWord       2   66[COMRAM] PTR unsigned char 
  6276 ;;		 -> STR_37(10), 
  6277 ;;  enunPsdMode     2   68[COMRAM] PTR unsigned char 
  6278 ;;		 -> STR_38(2), 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  cCmd          120    0[BANK0 ] unsigned char [120]
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      unsigned char 
  6283 ;; Registers used:
  6284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6290 ;;      Params:         6       0       0       0       0       0       0
  6291 ;;      Locals:         0     120       0       0       0       0       0
  6292 ;;      Temps:          0       0       0       0       0       0       0
  6293 ;;      Totals:         6     120       0       0       0       0       0
  6294 ;;Total ram usage:      126 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    4
  6297 ;; This function calls:
  6298 ;;		_ESP8266_Cmd
  6299 ;;		_sprintf
  6300 ;; This function is called by:
  6301 ;;		_ESP8266_Server
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           	psect	text29
  6306  002892                     __ptext29:
  6307                           	opt stack 0
  6308  002892                     _ESP8266_BuildAP:
  6309                           	opt stack 25
  6310                           
  6311                           ;UART.c: 150: char cCmd [120];
  6312                           ;UART.c: 152: sprintf ( cCmd, (void*)"AT+CWSAP=\"%s\",\"%s\",1,%s\r\n", pSSID, pPassWord
      +                          , enunPsdMode );
  6313                           
  6314                           ;incstack = 0
  6315  002892  0E80               	movlw	low ESP8266_BuildAP@cCmd
  6316  002894  6E1E               	movwf	sprintf@sp,c
  6317  002896  0E00               	movlw	high ESP8266_BuildAP@cCmd
  6318  002898  6E1F               	movwf	sprintf@sp+1,c
  6319  00289A  0E19               	movlw	low STR_20
  6320  00289C  6E20               	movwf	sprintf@f,c
  6321  00289E  0E7E               	movlw	high STR_20
  6322  0028A0  6E21               	movwf	sprintf@f+1,c
  6323  0028A2  C041  F022         	movff	ESP8266_BuildAP@pSSID,?_sprintf+4
  6324  0028A6  C042  F023         	movff	ESP8266_BuildAP@pSSID+1,?_sprintf+5
  6325  0028AA  C043  F024         	movff	ESP8266_BuildAP@pPassWord,?_sprintf+6
  6326  0028AE  C044  F025         	movff	ESP8266_BuildAP@pPassWord+1,?_sprintf+7
  6327  0028B2  C045  F026         	movff	ESP8266_BuildAP@enunPsdMode,?_sprintf+8
  6328  0028B6  C046  F027         	movff	ESP8266_BuildAP@enunPsdMode+1,?_sprintf+9
  6329  0028BA  EC09  F000         	call	_sprintf	;wreg free
  6330                           
  6331                           ;UART.c: 154: return ESP8266_Cmd ( cCmd, (void*)"OK", 0, 1000 );
  6332  0028BE  0E80               	movlw	low ESP8266_BuildAP@cCmd
  6333  0028C0  6E25               	movwf	ESP8266_Cmd@cmd,c
  6334  0028C2  0E00               	movlw	high ESP8266_BuildAP@cCmd
  6335  0028C4  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6336  0028C6  0ECE               	movlw	low (STR_3+5)
  6337  0028C8  6E27               	movwf	ESP8266_Cmd@reply1,c
  6338  0028CA  0E7F               	movlw	high (STR_3+5)
  6339  0028CC  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6340  0028CE  0E00               	movlw	0
  6341  0028D0  6E29               	movwf	ESP8266_Cmd@reply2,c
  6342  0028D2  0E00               	movlw	0
  6343  0028D4  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6344  0028D6  0E03               	movlw	3
  6345  0028D8  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6346  0028DA  0EE8               	movlw	232
  6347  0028DC  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6348  0028DE  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6349  0028E2  0012               	return	
  6350  0028E4                     __end_of_ESP8266_BuildAP:
  6351                           	opt stack 0
  6352                           tblptru	equ	0xFF8
  6353                           intcon	equ	0xFF2
  6354                           postinc0	equ	0xFEE
  6355                           wreg	equ	0xFE8
  6356                           indf2	equ	0xFDF
  6357                           fsr2h	equ	0xFDA
  6358                           fsr2l	equ	0xFD9
  6359                           status	equ	0xFD8
  6360                           
  6361 ;; *************** function _ESP8266_AT_Test *****************
  6362 ;; Defined at:
  6363 ;;		line 100 in file "harwave/UART.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;		None
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;		None
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1    wreg      void 
  6370 ;; Registers used:
  6371 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6377 ;;      Params:         0       0       0       0       0       0       0
  6378 ;;      Locals:         0       0       0       0       0       0       0
  6379 ;;      Temps:          0       0       0       0       0       0       0
  6380 ;;      Totals:         0       0       0       0       0       0       0
  6381 ;;Total ram usage:        0 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    4
  6384 ;; This function calls:
  6385 ;;		_ESP8266_Cmd
  6386 ;; This function is called by:
  6387 ;;		_ESP8266_Server
  6388 ;;		_ESP8266_client
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text30
  6393  002A8C                     __ptext30:
  6394                           	opt stack 0
  6395  002A8C                     _ESP8266_AT_Test:
  6396                           	opt stack 25
  6397  002A8C                     l4640:
  6398  002A8C  0EDE               	movlw	low STR_4
  6399  002A8E  6E25               	movwf	ESP8266_Cmd@cmd,c
  6400  002A90  0E7F               	movlw	high STR_4
  6401  002A92  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6402  002A94  0ECE               	movlw	low (STR_3+5)
  6403  002A96  6E27               	movwf	ESP8266_Cmd@reply1,c
  6404  002A98  0E7F               	movlw	high (STR_3+5)
  6405  002A9A  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6406  002A9C  0E00               	movlw	0
  6407  002A9E  6E29               	movwf	ESP8266_Cmd@reply2,c
  6408  002AA0  0E00               	movlw	0
  6409  002AA2  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6410  002AA4  0E01               	movlw	1
  6411  002AA6  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6412  002AA8  0EF4               	movlw	244
  6413  002AAA  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6414  002AAC  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6415  002AB0  0900               	iorlw	0
  6416  002AB2  A4D8               	btfss	status,2,c
  6417  002AB4  0012               	return	
  6418  002AB6  D7EA               	goto	l4640
  6419  002AB8                     __end_of_ESP8266_AT_Test:
  6420                           	opt stack 0
  6421                           tblptru	equ	0xFF8
  6422                           intcon	equ	0xFF2
  6423                           postinc0	equ	0xFEE
  6424                           wreg	equ	0xFE8
  6425                           indf2	equ	0xFDF
  6426                           fsr2h	equ	0xFDA
  6427                           fsr2l	equ	0xFD9
  6428                           status	equ	0xFD8
  6429                           
  6430 ;; *************** function _AP_MODE *****************
  6431 ;; Defined at:
  6432 ;;		line 184 in file "harwave/UART.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;		None
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;		None
  6437 ;; Return value:  Size  Location     Type
  6438 ;;                  1    wreg      void 
  6439 ;; Registers used:
  6440 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6446 ;;      Params:         0       0       0       0       0       0       0
  6447 ;;      Locals:         0       0       0       0       0       0       0
  6448 ;;      Temps:          0       0       0       0       0       0       0
  6449 ;;      Totals:         0       0       0       0       0       0       0
  6450 ;;Total ram usage:        0 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; Hardware stack levels required when called:    5
  6453 ;; This function calls:
  6454 ;;		_ESP8266_Cmd
  6455 ;;		_ESP8266_Net_Mode_Choose
  6456 ;; This function is called by:
  6457 ;;		_ESP8266_Server
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text31
  6462  002A2C                     __ptext31:
  6463                           	opt stack 0
  6464  002A2C                     _AP_MODE:
  6465                           	opt stack 24
  6466                           
  6467                           ;UART.c: 185: ESP8266_Net_Mode_Choose ( AP ) ;
  6468                           
  6469                           ;incstack = 0
  6470  002A2C  0E01               	movlw	1
  6471  002A2E  ECCD  F012         	call	_ESP8266_Net_Mode_Choose
  6472  002A32                     l4652:
  6473  002A32  0E6A               	movlw	low STR_30
  6474  002A34  6E25               	movwf	ESP8266_Cmd@cmd,c
  6475  002A36  0E7F               	movlw	high STR_30
  6476  002A38  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6477  002A3A  0EA2               	movlw	low STR_31
  6478  002A3C  6E27               	movwf	ESP8266_Cmd@reply1,c
  6479  002A3E  0E7F               	movlw	high STR_31
  6480  002A40  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6481  002A42  0ECE               	movlw	low (STR_3+5)
  6482  002A44  6E29               	movwf	ESP8266_Cmd@reply2,c
  6483  002A46  0E7F               	movlw	high (STR_3+5)
  6484  002A48  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6485  002A4A  0E00               	movlw	0
  6486  002A4C  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6487  002A4E  0E64               	movlw	100
  6488  002A50  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6489  002A52  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6490  002A56  0900               	iorlw	0
  6491  002A58  A4D8               	btfss	status,2,c
  6492  002A5A  0012               	return	
  6493  002A5C  D7EA               	goto	l4652
  6494  002A5E                     __end_of_AP_MODE:
  6495                           	opt stack 0
  6496                           tblptru	equ	0xFF8
  6497                           intcon	equ	0xFF2
  6498                           postinc0	equ	0xFEE
  6499                           wreg	equ	0xFE8
  6500                           indf2	equ	0xFDF
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505 ;; *************** function _ESP8266_Net_Mode_Choose *****************
  6506 ;; Defined at:
  6507 ;;		line 120 in file "harwave/UART.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  MODE            1    wreg     enum E3773
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  MODE            1   45[COMRAM] enum E3773
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      unsigned char 
  6514 ;; Registers used:
  6515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6521 ;;      Params:         0       0       0       0       0       0       0
  6522 ;;      Locals:         1       0       0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0
  6524 ;;      Totals:         1       0       0       0       0       0       0
  6525 ;;Total ram usage:        1 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    4
  6528 ;; This function calls:
  6529 ;;		_ESP8266_Cmd
  6530 ;; This function is called by:
  6531 ;;		_AP_MODE
  6532 ;;		_STA_MODE
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text32
  6537  00259A                     __ptext32:
  6538                           	opt stack 0
  6539  00259A                     _ESP8266_Net_Mode_Choose:
  6540                           	opt stack 24
  6541                           
  6542                           ;incstack = 0
  6543                           ;ESP8266_Net_Mode_Choose@MODE stored from wreg
  6544  00259A  6E2E               	movwf	ESP8266_Net_Mode_Choose@MODE,c
  6545                           
  6546                           ;UART.c: 123: switch ( MODE )
  6547  00259C  D039               	goto	l4342
  6548  00259E                     l4328:
  6549                           
  6550                           ;UART.c: 126: return ESP8266_Cmd ( (void*)"AT+CWMODE=1\r\n", (void*)"OK", (void*)"no cha
      +                          nge", 2500 );
  6551                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  6552  00259E  0E32               	movlw	low STR_9
  6553  0025A0  6E25               	movwf	ESP8266_Cmd@cmd,c
  6554  0025A2  0E7F               	movlw	high STR_9
  6555  0025A4  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6556  0025A6  0ECE               	movlw	low (STR_3+5)
  6557  0025A8  6E27               	movwf	ESP8266_Cmd@reply1,c
  6558  0025AA  0E7F               	movlw	high (STR_3+5)
  6559  0025AC  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6560  0025AE  0EB6               	movlw	low STR_11
  6561  0025B0  6E29               	movwf	ESP8266_Cmd@reply2,c
  6562  0025B2  0E7F               	movlw	high STR_11
  6563  0025B4  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6564  0025B6  0E09               	movlw	9
  6565  0025B8  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6566  0025BA  0EC4               	movlw	196
  6567  0025BC  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6568  0025BE  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6569  0025C2  0012               	return	
  6570  0025C4                     l4332:
  6571                           
  6572                           ;UART.c: 129: return ESP8266_Cmd ( (void*)"AT+CWMODE=2\r\n",(void*) "OK", (void*)"no cha
      +                          nge", 2500 );
  6573                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  6574  0025C4  0E4E               	movlw	low STR_12
  6575  0025C6  6E25               	movwf	ESP8266_Cmd@cmd,c
  6576  0025C8  0E7F               	movlw	high STR_12
  6577  0025CA  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6578  0025CC  0ECE               	movlw	low (STR_3+5)
  6579  0025CE  6E27               	movwf	ESP8266_Cmd@reply1,c
  6580  0025D0  0E7F               	movlw	high (STR_3+5)
  6581  0025D2  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6582  0025D4  0EB6               	movlw	low STR_11
  6583  0025D6  6E29               	movwf	ESP8266_Cmd@reply2,c
  6584  0025D8  0E7F               	movlw	high STR_11
  6585  0025DA  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6586  0025DC  0E09               	movlw	9
  6587  0025DE  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6588  0025E0  0EC4               	movlw	196
  6589  0025E2  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6590  0025E4  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6591  0025E8  0012               	return	
  6592  0025EA                     l4336:
  6593                           
  6594                           ;UART.c: 132: return ESP8266_Cmd ( (void*)"AT+CWMODE=3\r\n", (void*)"OK", (void*)"no cha
      +                          nge", 2500 );
  6595                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  6596  0025EA  0E5C               	movlw	low STR_15
  6597  0025EC  6E25               	movwf	ESP8266_Cmd@cmd,c
  6598  0025EE  0E7F               	movlw	high STR_15
  6599  0025F0  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6600  0025F2  0ECE               	movlw	low (STR_3+5)
  6601  0025F4  6E27               	movwf	ESP8266_Cmd@reply1,c
  6602  0025F6  0E7F               	movlw	high (STR_3+5)
  6603  0025F8  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6604  0025FA  0EB6               	movlw	low STR_11
  6605  0025FC  6E29               	movwf	ESP8266_Cmd@reply2,c
  6606  0025FE  0E7F               	movlw	high STR_11
  6607  002600  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6608  002602  0E09               	movlw	9
  6609  002604  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6610  002606  0EC4               	movlw	196
  6611  002608  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6612  00260A  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6613                           
  6614                           ;UART.c: 136: }
  6615                           
  6616                           ;UART.c: 135: return 0;
  6617                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  6618                           
  6619                           ;UART.c: 134: default:
  6620  00260E  0012               	return	
  6621  002610                     l4342:
  6622  002610  502E               	movf	ESP8266_Net_Mode_Choose@MODE,w,c
  6623                           
  6624                           ; Switch size 1, requested type "space"
  6625                           ; Number of cases is 3, Range of values is 0 to 2
  6626                           ; switch strategies available:
  6627                           ; Name         Instructions Cycles
  6628                           ; simple_byte           10     6 (average)
  6629                           ;	Chosen strategy is simple_byte
  6630  002612  0A00               	xorlw	0	; case 0
  6631  002614  B4D8               	btfsc	status,2,c
  6632  002616  D7C3               	goto	l4328
  6633  002618  0A01               	xorlw	1	; case 1
  6634  00261A  B4D8               	btfsc	status,2,c
  6635  00261C  D7D3               	goto	l4332
  6636  00261E  0A03               	xorlw	3	; case 2
  6637  002620  A4D8               	btfss	status,2,c
  6638  002622  0012               	return	
  6639  002624  D7E2               	goto	l4336
  6640  002626                     __end_of_ESP8266_Net_Mode_Choose:
  6641                           	opt stack 0
  6642                           tblptru	equ	0xFF8
  6643                           intcon	equ	0xFF2
  6644                           postinc0	equ	0xFEE
  6645                           wreg	equ	0xFE8
  6646                           indf2	equ	0xFDF
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function _ESP8266_SendString *****************
  6652 ;; Defined at:
  6653 ;;		line 84 in file "harwave/UART.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;  ucId            1    wreg     unsigned char 
  6656 ;;  pStr            2   64[COMRAM] PTR unsigned char 
  6657 ;;		 -> main@tem(11), 
  6658 ;;  ulStrLength     2   66[COMRAM] unsigned int 
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  ucId            1   34[BANK0 ] unsigned char 
  6661 ;;  cStr           20   12[BANK0 ] unsigned char [20]
  6662 ;;  tem            12    0[BANK0 ] unsigned char [12]
  6663 ;;  bRet            2   32[BANK0 ] int 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;                  1    wreg      unsigned char 
  6666 ;; Registers used:
  6667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6668 ;; Tracked objects:
  6669 ;;		On entry : 0/0
  6670 ;;		On exit  : 0/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6673 ;;      Params:         4       0       0       0       0       0       0
  6674 ;;      Locals:         0      35       0       0       0       0       0
  6675 ;;      Temps:          1       0       0       0       0       0       0
  6676 ;;      Totals:         5      35       0       0       0       0       0
  6677 ;;Total ram usage:       40 bytes
  6678 ;; Hardware stack levels used:    1
  6679 ;; Hardware stack levels required when called:    4
  6680 ;; This function calls:
  6681 ;;		_ESP8266_Cmd
  6682 ;;		_sprintf
  6683 ;;		_strcpy
  6684 ;; This function is called by:
  6685 ;;		_main
  6686 ;; This function uses a non-reentrant model
  6687 ;;
  6688                           
  6689                           	psect	text33
  6690  00243C                     __ptext33:
  6691                           	opt stack 0
  6692  00243C                     _ESP8266_SendString:
  6693                           	opt stack 26
  6694                           
  6695                           ;incstack = 0
  6696                           ;ESP8266_SendString@ucId stored from wreg
  6697  00243C  0100               	movlb	0	; () banked
  6698  00243E  6FA2               	movwf	ESP8266_SendString@ucId& (0+255),b
  6699                           
  6700                           ;UART.c: 86: char cStr [20]={0};
  6701  002440  EE21  F066         	lfsr	2,ESP8266_SendString@F4007
  6702  002444  EE10  F08C         	lfsr	1,ESP8266_SendString@cStr
  6703  002448  0E13               	movlw	19
  6704  00244A                     u5511:
  6705  00244A  CFDB FFE3          	movff	plusw2,plusw1
  6706  00244E  06E8               	decf	wreg,f,c
  6707  002450  E2FC               	bc	u5511
  6708                           
  6709                           ;UART.c: 87: int bRet = 0;
  6710  002452  0E00               	movlw	0
  6711  002454  0100               	movlb	0	; () banked
  6712  002456  6FA1               	movwf	(ESP8266_SendString@bRet+1)& (0+255),b
  6713  002458  0E00               	movlw	0
  6714  00245A  6FA0               	movwf	ESP8266_SendString@bRet& (0+255),b
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;UART.c: 88: char tem[12];
  6718                           ;UART.c: 91: strcpy(tem,pStr);
  6719  00245C  0E80               	movlw	low ESP8266_SendString@tem
  6720  00245E  6E12               	movwf	strcpy@to,c
  6721  002460  0E00               	movlw	high ESP8266_SendString@tem
  6722  002462  6E13               	movwf	strcpy@to+1,c
  6723  002464  C041  F014         	movff	ESP8266_SendString@pStr,strcpy@from
  6724  002468  C042  F015         	movff	ESP8266_SendString@pStr+1,strcpy@from+1
  6725  00246C  EC2F  F015         	call	_strcpy	;wreg free
  6726                           
  6727                           ;UART.c: 92: tem[11]='\0';
  6728  002470  0E00               	movlw	0
  6729  002472  0100               	movlb	0	; () banked
  6730  002474  6F8B               	movwf	(ESP8266_SendString@tem+11)& (0+255),b
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;UART.c: 93: sprintf ( cStr,"AT+CIPSEND=%d,%d\r\n", ucId, ulStrLength);
  6734  002476  0E8C               	movlw	low ESP8266_SendString@cStr
  6735  002478  6E1E               	movwf	sprintf@sp,c
  6736  00247A  0E00               	movlw	high ESP8266_SendString@cStr
  6737  00247C  6E1F               	movwf	sprintf@sp+1,c
  6738  00247E  0EA2               	movlw	low STR_1
  6739  002480  6E20               	movwf	sprintf@f,c
  6740  002482  0E7E               	movlw	high STR_1
  6741  002484  6E21               	movwf	sprintf@f+1,c
  6742  002486  C0A2  F022         	movff	ESP8266_SendString@ucId,?_sprintf+4
  6743  00248A  6A23               	clrf	?_sprintf+5,c
  6744  00248C  C043  F024         	movff	ESP8266_SendString@ulStrLength,?_sprintf+6
  6745  002490  C044  F025         	movff	ESP8266_SendString@ulStrLength+1,?_sprintf+7
  6746  002494  EC09  F000         	call	_sprintf	;wreg free
  6747                           
  6748                           ;UART.c: 94: ESP8266_Cmd ( cStr,(void*)"> ",0, 30 ) ;
  6749  002498  0E8C               	movlw	low ESP8266_SendString@cStr
  6750  00249A  6E25               	movwf	ESP8266_Cmd@cmd,c
  6751  00249C  0E00               	movlw	high ESP8266_SendString@cStr
  6752  00249E  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6753  0024A0  0EF9               	movlw	low STR_2
  6754  0024A2  6E27               	movwf	ESP8266_Cmd@reply1,c
  6755  0024A4  0E7F               	movlw	high STR_2
  6756  0024A6  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6757  0024A8  0E00               	movlw	0
  6758  0024AA  6E29               	movwf	ESP8266_Cmd@reply2,c
  6759  0024AC  0E00               	movlw	0
  6760  0024AE  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6761  0024B0  0E00               	movlw	0
  6762  0024B2  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6763  0024B4  0E1E               	movlw	30
  6764  0024B6  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6765  0024B8  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6766                           
  6767                           ;UART.c: 95: bRet = ESP8266_Cmd ( tem, (void*)"SEND OK", 0, 30 );
  6768  0024BC  0E80               	movlw	low ESP8266_SendString@tem
  6769  0024BE  6E25               	movwf	ESP8266_Cmd@cmd,c
  6770  0024C0  0E00               	movlw	high ESP8266_SendString@tem
  6771  0024C2  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6772  0024C4  0EC9               	movlw	low STR_3
  6773  0024C6  6E27               	movwf	ESP8266_Cmd@reply1,c
  6774  0024C8  0E7F               	movlw	high STR_3
  6775  0024CA  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6776  0024CC  0E00               	movlw	0
  6777  0024CE  6E29               	movwf	ESP8266_Cmd@reply2,c
  6778  0024D0  0E00               	movlw	0
  6779  0024D2  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6780  0024D4  0E00               	movlw	0
  6781  0024D6  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6782  0024D8  0E1E               	movlw	30
  6783  0024DA  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6784  0024DC  ECBE  F011         	call	_ESP8266_Cmd	;wreg free
  6785  0024E0  6E45               	movwf	??_ESP8266_SendString& (0+255),c
  6786  0024E2  5045               	movf	??_ESP8266_SendString,w,c
  6787  0024E4  0100               	movlb	0	; () banked
  6788  0024E6  6FA0               	movwf	ESP8266_SendString@bRet& (0+255),b
  6789  0024E8  6BA1               	clrf	(ESP8266_SendString@bRet+1)& (0+255),b
  6790  0024EA  0012               	return	
  6791  0024EC                     __end_of_ESP8266_SendString:
  6792                           	opt stack 0
  6793                           tblptru	equ	0xFF8
  6794                           intcon	equ	0xFF2
  6795                           postinc0	equ	0xFEE
  6796                           wreg	equ	0xFE8
  6797                           plusw1	equ	0xFE3
  6798                           indf2	equ	0xFDF
  6799                           plusw2	equ	0xFDB
  6800                           fsr2h	equ	0xFDA
  6801                           fsr2l	equ	0xFD9
  6802                           status	equ	0xFD8
  6803                           
  6804 ;; *************** function _strcpy *****************
  6805 ;; Defined at:
  6806 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;  to              2   17[COMRAM] PTR unsigned char 
  6809 ;;		 -> ESP8266_SendString@tem(12), 
  6810 ;;  from            2   19[COMRAM] PTR const unsigned char 
  6811 ;;		 -> main@tem(11), 
  6812 ;; Auto vars:     Size  Location     Type
  6813 ;;  cp              2   21[COMRAM] PTR unsigned char 
  6814 ;;		 -> ESP8266_SendString@tem(12), 
  6815 ;; Return value:  Size  Location     Type
  6816 ;;                  2   17[COMRAM] PTR unsigned char 
  6817 ;; Registers used:
  6818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6824 ;;      Params:         4       0       0       0       0       0       0
  6825 ;;      Locals:         2       0       0       0       0       0       0
  6826 ;;      Temps:          0       0       0       0       0       0       0
  6827 ;;      Totals:         6       0       0       0       0       0       0
  6828 ;;Total ram usage:        6 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    1
  6831 ;; This function calls:
  6832 ;;		Nothing
  6833 ;; This function is called by:
  6834 ;;		_ESP8266_SendString
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           	psect	text34
  6839  002A5E                     __ptext34:
  6840                           	opt stack 0
  6841  002A5E                     _strcpy:
  6842                           	opt stack 28
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;incstack = 0
  6846  002A5E  C012  F016         	movff	strcpy@to,strcpy@cp
  6847  002A62  C013  F017         	movff	strcpy@to+1,strcpy@cp+1
  6848  002A66  D004               	goto	l4636
  6849  002A68                     l4634:
  6850  002A68  4A16               	infsnz	strcpy@cp,f,c
  6851  002A6A  2A17               	incf	strcpy@cp+1,f,c
  6852  002A6C  4A14               	infsnz	strcpy@from,f,c
  6853  002A6E  2A15               	incf	strcpy@from+1,f,c
  6854  002A70                     l4636:
  6855  002A70  C014  FFD9         	movff	strcpy@from,fsr2l
  6856  002A74  C015  FFDA         	movff	strcpy@from+1,fsr2h
  6857  002A78  C016  FFE1         	movff	strcpy@cp,fsr1l
  6858  002A7C  C017  FFE2         	movff	strcpy@cp+1,fsr1h
  6859  002A80  CFDF FFE7          	movff	indf2,indf1
  6860  002A84  50E7               	movf	indf1,w,c
  6861  002A86  B4D8               	btfsc	status,2,c
  6862  002A88  0012               	return	
  6863  002A8A  D7EE               	goto	l4634
  6864  002A8C                     __end_of_strcpy:
  6865                           	opt stack 0
  6866                           tblptru	equ	0xFF8
  6867                           intcon	equ	0xFF2
  6868                           postinc0	equ	0xFEE
  6869                           wreg	equ	0xFE8
  6870                           indf1	equ	0xFE7
  6871                           plusw1	equ	0xFE3
  6872                           fsr1h	equ	0xFE2
  6873                           fsr1l	equ	0xFE1
  6874                           indf2	equ	0xFDF
  6875                           plusw2	equ	0xFDB
  6876                           fsr2h	equ	0xFDA
  6877                           fsr2l	equ	0xFD9
  6878                           status	equ	0xFD8
  6879                           
  6880 ;; *************** function _sprintf *****************
  6881 ;; Defined at:
  6882 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;  sp              2   29[COMRAM] PTR unsigned char 
  6885 ;;		 -> ESP8266_Link_Server@cCmd(120), ESP8266_Link_Server@cStr(100), ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120
      +), 
  6886 ;;		 -> ESP8266_SendString@cStr(20), 
  6887 ;;  f               2   31[COMRAM] PTR const unsigned char 
  6888 ;;		 -> STR_27(17), STR_26(20), STR_24(15), STR_22(15), 
  6889 ;;		 -> STR_20(26), STR_18(21), STR_1(19), 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;  idx             1   43[COMRAM] unsigned char 
  6892 ;;  tmpval          4    0        struct .
  6893 ;;  flag            2   62[COMRAM] unsigned short 
  6894 ;;  width           2   59[COMRAM] int 
  6895 ;;  val             2   56[COMRAM] unsigned int 
  6896 ;;  ap              2   54[COMRAM] PTR void [1]
  6897 ;;		 -> ?_sprintf(2), 
  6898 ;;  len             2   52[COMRAM] unsigned int 
  6899 ;;  cp              2   50[COMRAM] PTR const unsigned char 
  6900 ;;		 -> STR_64(7), sprintf@c(1), STR_62(5), STR_61(12), 
  6901 ;;		 -> STR_56(10), STR_55(5), STR_38(2), STR_37(10), 
  6902 ;;		 -> STR_36(4), STR_25(4), STR_23(4), ESP8266_Link_Server@cStr(100), 
  6903 ;;  c               1   61[COMRAM] char 
  6904 ;;  prec            1   58[COMRAM] char 
  6905 ;; Return value:  Size  Location     Type
  6906 ;;                  2   29[COMRAM] int 
  6907 ;; Registers used:
  6908 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6909 ;; Tracked objects:
  6910 ;;		On entry : 0/0
  6911 ;;		On exit  : 0/0
  6912 ;;		Unchanged: 0/0
  6913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6914 ;;      Params:        10       0       0       0       0       0       0
  6915 ;;      Locals:        21       0       0       0       0       0       0
  6916 ;;      Temps:          4       0       0       0       0       0       0
  6917 ;;      Totals:        35       0       0       0       0       0       0
  6918 ;;Total ram usage:       35 bytes
  6919 ;; Hardware stack levels used:    1
  6920 ;; Hardware stack levels required when called:    2
  6921 ;; This function calls:
  6922 ;;		___lwdiv
  6923 ;;		___lwmod
  6924 ;;		___wmul
  6925 ;;		_isdigit
  6926 ;; This function is called by:
  6927 ;;		_ESP8266_SendString
  6928 ;;		_ESP8266_BuildAP
  6929 ;;		_ESP8266_JoinAP
  6930 ;;		_ESP8266_Link_Server
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text35
  6935  000012                     __ptext35:
  6936                           	opt stack 0
  6937  000012                     _sprintf:
  6938                           	opt stack 26
  6939                           
  6940                           ;doprnt.c: 494: va_list ap;
  6941                           ;doprnt.c: 499: signed char c;
  6942                           ;doprnt.c: 501: int width;
  6943                           ;doprnt.c: 506: signed char prec;
  6944                           ;doprnt.c: 508: unsigned short flag;
  6945                           ;doprnt.c: 523: union {
  6946                           ;doprnt.c: 524: unsigned long vd;
  6947                           ;doprnt.c: 525: double integ;
  6948                           ;doprnt.c: 526: } tmpval;
  6949                           ;doprnt.c: 528: unsigned int val;
  6950                           ;doprnt.c: 529: unsigned len;
  6951                           ;doprnt.c: 530: const char * cp;
  6952                           ;doprnt.c: 533: *ap = __va_start();
  6953                           
  6954                           ;incstack = 0
  6955  000012  0E22               	movlw	low (?_sprintf+4)
  6956  000014  6E37               	movwf	sprintf@ap,c
  6957  000016  0E00               	movlw	high (?_sprintf+4)
  6958  000018  6E38               	movwf	sprintf@ap+1,c
  6959                           
  6960                           ;doprnt.c: 536: while(c = *f++) {
  6961  00001A  EF46  F004         	goto	l4320
  6962  00001E                     l3966:
  6963                           
  6964                           ;doprnt.c: 538: if(c != '%')
  6965  00001E  0E25               	movlw	37
  6966  000020  183E               	xorwf	sprintf@c,w,c
  6967  000022  B4D8               	btfsc	status,2,c
  6968  000024  D00A               	goto	l3972
  6969                           
  6970                           ;doprnt.c: 540: {
  6971                           ;doprnt.c: 541: ((*sp++ = (c)));
  6972  000026  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6973  00002A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6974  00002E  C03E  FFDF         	movff	sprintf@c,indf2
  6975  000032  4A1E               	infsnz	sprintf@sp,f,c
  6976  000034  2A1F               	incf	sprintf@sp+1,f,c
  6977                           
  6978                           ;doprnt.c: 542: continue;
  6979  000036  EF46  F004         	goto	l4320
  6980  00003A                     l3972:
  6981                           
  6982                           ;doprnt.c: 543: }
  6983                           ;doprnt.c: 546: width = 0;
  6984  00003A  0E00               	movlw	0
  6985  00003C  6E3D               	movwf	sprintf@width+1,c
  6986  00003E  0E00               	movlw	0
  6987  000040  6E3C               	movwf	sprintf@width,c
  6988                           
  6989                           ;doprnt.c: 548: flag = 0;
  6990  000042  0E00               	movlw	0
  6991  000044  6E40               	movwf	sprintf@flag+1,c
  6992  000046  0E00               	movlw	0
  6993  000048  6E3F               	movwf	sprintf@flag,c
  6994                           
  6995                           ;doprnt.c: 551: switch(*f) {
  6996                           
  6997                           ;doprnt.c: 550: for(;;) {
  6998  00004A  D009               	goto	l3984
  6999  00004C                     l3974:
  7000                           
  7001                           ;doprnt.c: 554: flag |= 0x08;
  7002  00004C  863F               	bsf	sprintf@flag,3,c
  7003  00004E  D005               	goto	L12
  7004  000050                     l3976:
  7005                           
  7006                           ;doprnt.c: 561: flag |= 0x01;
  7007  000050  803F               	bsf	sprintf@flag,0,c
  7008  000052  D003               	goto	L12
  7009  000054                     l3978:
  7010                           
  7011                           ;doprnt.c: 574: flag |= 0x800;
  7012  000054  8640               	bsf	sprintf@flag+1,3,c
  7013  000056  D001               	goto	L12
  7014  000058                     l3980:
  7015                           
  7016                           ;doprnt.c: 580: flag |= 0x04;
  7017  000058  843F               	bsf	sprintf@flag,2,c
  7018  00005A                     L12:
  7019                           
  7020                           ;doprnt.c: 581: f++;
  7021  00005A  4A20               	infsnz	sprintf@f,f,c
  7022  00005C  2A21               	incf	sprintf@f+1,f,c
  7023  00005E                     l3984:
  7024  00005E  C020  FFF6         	movff	sprintf@f,tblptrl
  7025  000062  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7026  000066                     	if	0	;tblptru may be non-zero
  7027  000066                     	endif
  7028  000066                     	if	0	;tblptru may be non-zero
  7029  000066                     	endif
  7030  000066  0008               	tblrd		*
  7031  000068  50F5               	movf	tablat,w,c
  7032                           
  7033                           ; Switch size 1, requested type "space"
  7034                           ; Number of cases is 4, Range of values is 32 to 48
  7035                           ; switch strategies available:
  7036                           ; Name         Instructions Cycles
  7037                           ; simple_byte           13     7 (average)
  7038                           ;	Chosen strategy is simple_byte
  7039  00006A  0A20               	xorlw	32	; case 32
  7040  00006C  B4D8               	btfsc	status,2,c
  7041  00006E  D7F0               	goto	l3976
  7042  000070  0A03               	xorlw	3	; case 35
  7043  000072  B4D8               	btfsc	status,2,c
  7044  000074  D7EF               	goto	l3978
  7045  000076  0A0E               	xorlw	14	; case 45
  7046  000078  B4D8               	btfsc	status,2,c
  7047  00007A  D7E8               	goto	l3974
  7048  00007C  0A1D               	xorlw	29	; case 48
  7049  00007E  B4D8               	btfsc	status,2,c
  7050  000080  D7EB               	goto	l3980
  7051                           
  7052                           ;doprnt.c: 593: if(flag & 0x08)
  7053                           
  7054                           ;doprnt.c: 586: }
  7055                           
  7056                           ;doprnt.c: 585: break;
  7057  000082  B63F               	btfsc	sprintf@flag,3,c
  7058                           
  7059                           ;doprnt.c: 594: flag &= ~0x04;
  7060  000084  943F               	bcf	sprintf@flag,2,c
  7061                           
  7062                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7063  000086  C020  FFF6         	movff	sprintf@f,tblptrl
  7064  00008A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7065  00008E                     	if	0	;tblptru may be non-zero
  7066  00008E                     	endif
  7067  00008E                     	if	0	;tblptru may be non-zero
  7068  00008E                     	endif
  7069  00008E  0008               	tblrd		*
  7070  000090  50F5               	movf	tablat,w,c
  7071  000092  ECCB  F015         	call	_isdigit
  7072  000096  A0D8               	btfss	status,0,c
  7073  000098  D033               	goto	l4000
  7074                           
  7075                           ;doprnt.c: 598: width = 0;
  7076  00009A  0E00               	movlw	0
  7077  00009C  6E3D               	movwf	sprintf@width+1,c
  7078  00009E  0E00               	movlw	0
  7079  0000A0  6E3C               	movwf	sprintf@width,c
  7080  0000A2                     l3992:
  7081                           
  7082                           ;doprnt.c: 600: width *= 10;
  7083  0000A2  C03C  F012         	movff	sprintf@width,___wmul@multiplier
  7084  0000A6  C03D  F013         	movff	sprintf@width+1,___wmul@multiplier+1
  7085  0000AA  0E00               	movlw	0
  7086  0000AC  6E15               	movwf	___wmul@multiplicand+1,c
  7087  0000AE  0E0A               	movlw	10
  7088  0000B0  6E14               	movwf	___wmul@multiplicand,c
  7089  0000B2  EC83  F015         	call	___wmul	;wreg free
  7090  0000B6  C012  F03C         	movff	?___wmul,sprintf@width
  7091  0000BA  C013  F03D         	movff	?___wmul+1,sprintf@width+1
  7092                           
  7093                           ;doprnt.c: 601: width += *f++ - '0';
  7094  0000BE  0ED0               	movlw	208
  7095  0000C0  6E28               	movwf	??_sprintf& (0+255),c
  7096  0000C2  0EFF               	movlw	255
  7097  0000C4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7098  0000C6  C020  FFF6         	movff	sprintf@f,tblptrl
  7099  0000CA  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7100  0000CE                     	if	0	;tblptru may be non-zero
  7101  0000CE                     	endif
  7102  0000CE                     	if	0	;tblptru may be non-zero
  7103  0000CE                     	endif
  7104  0000CE  0008               	tblrd		*
  7105  0000D0  50F5               	movf	tablat,w,c
  7106  0000D2  6E2A               	movwf	(??_sprintf+2)& (0+255),c
  7107  0000D4  6A2B               	clrf	(??_sprintf+3)& (0+255),c
  7108  0000D6  5028               	movf	??_sprintf,w,c
  7109  0000D8  262A               	addwf	??_sprintf+2,f,c
  7110  0000DA  5029               	movf	??_sprintf+1,w,c
  7111  0000DC  222B               	addwfc	??_sprintf+3,f,c
  7112  0000DE  502A               	movf	??_sprintf+2,w,c
  7113  0000E0  263C               	addwf	sprintf@width,f,c
  7114  0000E2  502B               	movf	??_sprintf+3,w,c
  7115  0000E4  223D               	addwfc	sprintf@width+1,f,c
  7116  0000E6  4A20               	infsnz	sprintf@f,f,c
  7117  0000E8  2A21               	incf	sprintf@f+1,f,c
  7118                           
  7119                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7120  0000EA  C020  FFF6         	movff	sprintf@f,tblptrl
  7121  0000EE  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7122  0000F2                     	if	0	;tblptru may be non-zero
  7123  0000F2                     	endif
  7124  0000F2                     	if	0	;tblptru may be non-zero
  7125  0000F2                     	endif
  7126  0000F2  0008               	tblrd		*
  7127  0000F4  50F5               	movf	tablat,w,c
  7128  0000F6  ECCB  F015         	call	_isdigit
  7129  0000FA  A0D8               	btfss	status,0,c
  7130  0000FC  D018               	goto	l4008
  7131  0000FE  D7D1               	goto	l3992
  7132  000100                     l4000:
  7133  000100  C020  FFF6         	movff	sprintf@f,tblptrl
  7134  000104  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7135  000108                     	if	0	;tblptru may be non-zero
  7136  000108                     	endif
  7137  000108                     	if	0	;tblptru may be non-zero
  7138  000108                     	endif
  7139  000108  0008               	tblrd		*
  7140  00010A  50F5               	movf	tablat,w,c
  7141  00010C  0A2A               	xorlw	42
  7142  00010E  A4D8               	btfss	status,2,c
  7143  000110  D00E               	goto	l4008
  7144                           
  7145                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  7146  000112  C037  FFD9         	movff	sprintf@ap,fsr2l
  7147  000116  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7148  00011A  CFDE F03C          	movff	postinc2,sprintf@width
  7149  00011E  CFDD F03D          	movff	postdec2,sprintf@width+1
  7150  000122  0E02               	movlw	2
  7151  000124  2637               	addwf	sprintf@ap,f,c
  7152  000126  0E00               	movlw	0
  7153  000128  2238               	addwfc	sprintf@ap+1,f,c
  7154                           
  7155                           ;doprnt.c: 606: f++;
  7156  00012A  4A20               	infsnz	sprintf@f,f,c
  7157  00012C  2A21               	incf	sprintf@f+1,f,c
  7158  00012E                     l4008:
  7159                           
  7160                           ;doprnt.c: 608: }
  7161                           ;doprnt.c: 611: if(*f == '.') {
  7162  00012E  C020  FFF6         	movff	sprintf@f,tblptrl
  7163  000132  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7164  000136                     	if	0	;tblptru may be non-zero
  7165  000136                     	endif
  7166  000136                     	if	0	;tblptru may be non-zero
  7167  000136                     	endif
  7168  000136  0008               	tblrd		*
  7169  000138  50F5               	movf	tablat,w,c
  7170  00013A  0A2E               	xorlw	46
  7171  00013C  A4D8               	btfss	status,2,c
  7172  00013E  D036               	goto	l4028
  7173                           
  7174                           ;doprnt.c: 612: flag |= 0x4000;
  7175  000140  8C40               	bsf	sprintf@flag+1,6,c
  7176                           
  7177                           ;doprnt.c: 613: f++;
  7178  000142  4A20               	infsnz	sprintf@f,f,c
  7179  000144  2A21               	incf	sprintf@f+1,f,c
  7180                           
  7181                           ;doprnt.c: 615: if(*f == '*') {
  7182  000146  C020  FFF6         	movff	sprintf@f,tblptrl
  7183  00014A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7184  00014E                     	if	0	;tblptru may be non-zero
  7185  00014E                     	endif
  7186  00014E                     	if	0	;tblptru may be non-zero
  7187  00014E                     	endif
  7188  00014E  0008               	tblrd		*
  7189  000150  50F5               	movf	tablat,w,c
  7190  000152  0A2A               	xorlw	42
  7191  000154  A4D8               	btfss	status,2,c
  7192  000156  D00D               	goto	l4020
  7193                           
  7194                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  7195  000158  C037  FFD9         	movff	sprintf@ap,fsr2l
  7196  00015C  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7197  000160  50DF               	movf	indf2,w,c
  7198  000162  6E3B               	movwf	sprintf@prec,c
  7199  000164  0E02               	movlw	2
  7200  000166  2637               	addwf	sprintf@ap,f,c
  7201  000168  0E00               	movlw	0
  7202  00016A  2238               	addwfc	sprintf@ap+1,f,c
  7203                           
  7204                           ;doprnt.c: 617: f++;
  7205  00016C  4A20               	infsnz	sprintf@f,f,c
  7206  00016E  2A21               	incf	sprintf@f+1,f,c
  7207                           
  7208                           ;doprnt.c: 618: } else
  7209  000170  D0DB               	goto	l4098
  7210  000172                     l4020:
  7211                           
  7212                           ;doprnt.c: 620: {
  7213                           ;doprnt.c: 621: prec = 0;
  7214  000172  0E00               	movlw	0
  7215  000174  6E3B               	movwf	sprintf@prec,c
  7216                           
  7217                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  7218  000176  D00F               	goto	l4026
  7219  000178                     l4022:
  7220                           
  7221                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  7222  000178  C020  FFF6         	movff	sprintf@f,tblptrl
  7223  00017C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7224  000180                     	if	0	;tblptru may be non-zero
  7225  000180                     	endif
  7226  000180                     	if	0	;tblptru may be non-zero
  7227  000180                     	endif
  7228  000180  0008               	tblrd		*
  7229  000182  CFF5 F028          	movff	tablat,??_sprintf
  7230  000186  503B               	movf	sprintf@prec,w,c
  7231  000188  0D0A               	mullw	10
  7232  00018A  50F3               	movf	prodl,w,c
  7233  00018C  2428               	addwf	??_sprintf,w,c
  7234  00018E  0FD0               	addlw	208
  7235  000190  6E3B               	movwf	sprintf@prec,c
  7236  000192  4A20               	infsnz	sprintf@f,f,c
  7237  000194  2A21               	incf	sprintf@f+1,f,c
  7238  000196                     l4026:
  7239  000196  C020  FFF6         	movff	sprintf@f,tblptrl
  7240  00019A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7241  00019E                     	if	0	;tblptru may be non-zero
  7242  00019E                     	endif
  7243  00019E                     	if	0	;tblptru may be non-zero
  7244  00019E                     	endif
  7245  00019E  0008               	tblrd		*
  7246  0001A0  50F5               	movf	tablat,w,c
  7247  0001A2  ECCB  F015         	call	_isdigit
  7248  0001A6  A0D8               	btfss	status,0,c
  7249  0001A8  D0BF               	goto	l4098
  7250  0001AA  D7E6               	goto	l4022
  7251  0001AC                     l4028:
  7252                           
  7253                           ;doprnt.c: 626: prec = 0;
  7254  0001AC  0E00               	movlw	0
  7255  0001AE  6E3B               	movwf	sprintf@prec,c
  7256                           
  7257                           ;doprnt.c: 630: }
  7258                           ;doprnt.c: 635: switch(c = *f++) {
  7259  0001B0  D0BB               	goto	l4098
  7260  0001B2                     l4030:
  7261                           
  7262                           ;doprnt.c: 691: flag |= 0x40;
  7263  0001B2  8C3F               	bsf	sprintf@flag,6,c
  7264                           
  7265                           ;doprnt.c: 698: case 'i':
  7266                           ;doprnt.c: 699: break;
  7267                           
  7268                           ;doprnt.c: 697: case 'd':
  7269                           
  7270                           ;doprnt.c: 693: break;
  7271  0001B4  D0E2               	goto	l4100
  7272  0001B6                     l4032:
  7273                           
  7274                           ;doprnt.c: 707: flag |= 0x2000;
  7275  0001B6  8A40               	bsf	sprintf@flag+1,5,c
  7276  0001B8                     l451:
  7277                           
  7278                           ;doprnt.c: 714: flag |= 0x20;
  7279  0001B8  8A3F               	bsf	sprintf@flag,5,c
  7280  0001BA                     l452:
  7281                           
  7282                           ;doprnt.c: 721: flag |= 0x80;
  7283  0001BA  8E3F               	bsf	sprintf@flag,7,c
  7284                           
  7285                           ;doprnt.c: 723: break;
  7286  0001BC  D0DE               	goto	l4100
  7287  0001BE                     l4034:
  7288                           
  7289                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7290  0001BE  C037  FFD9         	movff	sprintf@ap,fsr2l
  7291  0001C2  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7292  0001C6  CFDE F033          	movff	postinc2,sprintf@cp
  7293  0001CA  CFDD F034          	movff	postdec2,sprintf@cp+1
  7294  0001CE  0E02               	movlw	2
  7295  0001D0  2637               	addwf	sprintf@ap,f,c
  7296  0001D2  0E00               	movlw	0
  7297  0001D4  2238               	addwfc	sprintf@ap+1,f,c
  7298                           
  7299                           ;doprnt.c: 740: if(!cp)
  7300  0001D6  5033               	movf	sprintf@cp,w,c
  7301  0001D8  1034               	iorwf	sprintf@cp+1,w,c
  7302  0001DA  A4D8               	btfss	status,2,c
  7303  0001DC  D004               	goto	l4042
  7304                           
  7305                           ;doprnt.c: 741: cp = "(null)";
  7306  0001DE  0ED1               	movlw	low STR_64
  7307  0001E0  6E33               	movwf	sprintf@cp,c
  7308  0001E2  0E7F               	movlw	high STR_64
  7309  0001E4  6E34               	movwf	sprintf@cp+1,c
  7310  0001E6                     l4042:
  7311                           
  7312                           ;doprnt.c: 745: len = 0;
  7313  0001E6  0E00               	movlw	0
  7314  0001E8  6E36               	movwf	sprintf@len+1,c
  7315  0001EA  0E00               	movlw	0
  7316  0001EC  6E35               	movwf	sprintf@len,c
  7317                           
  7318                           ;doprnt.c: 746: while(cp[len])
  7319  0001EE  D002               	goto	l4046
  7320  0001F0                     l4044:
  7321                           
  7322                           ;doprnt.c: 747: len++;
  7323  0001F0  4A35               	infsnz	sprintf@len,f,c
  7324  0001F2  2A36               	incf	sprintf@len+1,f,c
  7325  0001F4                     l4046:
  7326  0001F4  5035               	movf	sprintf@len,w,c
  7327  0001F6  2433               	addwf	sprintf@cp,w,c
  7328  0001F8  6E28               	movwf	??_sprintf& (0+255),c
  7329  0001FA  5036               	movf	sprintf@len+1,w,c
  7330  0001FC  2034               	addwfc	sprintf@cp+1,w,c
  7331  0001FE  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7332  000200  C028  FFF6         	movff	??_sprintf,tblptrl
  7333  000204  C029  FFF7         	movff	??_sprintf+1,tblptrh
  7334  000208  6AF8               	clrf	tblptru,c
  7335  00020A  0E05               	movlw	(high __ramtop+-1)
  7336  00020C  64F7               	cpfsgt	tblptrh,c
  7337  00020E  D003               	bra	u4397
  7338  000210  0008               	tblrd		*
  7339  000212  50F5               	movf	tablat,w,c
  7340  000214  D005               	bra	u4390
  7341  000216                     u4397:
  7342  000216  CFF6 FFE1          	movff	tblptrl,fsr1l
  7343  00021A  CFF7 FFE2          	movff	tblptrh,fsr1h
  7344  00021E  50E7               	movf	indf1,w,c
  7345  000220                     u4390:
  7346  000220  0900               	iorlw	0
  7347  000222  A4D8               	btfss	status,2,c
  7348  000224  D7E5               	goto	l4044
  7349  000226                     l4048:
  7350                           
  7351                           ;doprnt.c: 753: if(prec && prec < len)
  7352  000226  503B               	movf	sprintf@prec,w,c
  7353  000228  B4D8               	btfsc	status,2,c
  7354  00022A  D010               	goto	l4054
  7355  00022C  C03B  F028         	movff	sprintf@prec,??_sprintf
  7356  000230  6A29               	clrf	(??_sprintf+1)& (0+255),c
  7357  000232  BE28               	btfsc	??_sprintf& (0+255),7,c
  7358  000234  0629               	decf	(??_sprintf+1)& (0+255),f,c
  7359  000236  5035               	movf	sprintf@len,w,c
  7360  000238  5C28               	subwf	??_sprintf,w,c
  7361  00023A  5036               	movf	sprintf@len+1,w,c
  7362  00023C  5829               	subwfb	??_sprintf+1,w,c
  7363  00023E  B0D8               	btfsc	status,0,c
  7364  000240  D005               	goto	l4054
  7365                           
  7366                           ;doprnt.c: 754: len = prec;
  7367  000242  503B               	movf	sprintf@prec,w,c
  7368  000244  6E35               	movwf	sprintf@len,c
  7369  000246  6A36               	clrf	sprintf@len+1,c
  7370  000248  BE35               	btfsc	sprintf@len,7,c
  7371  00024A  0636               	decf	sprintf@len+1,f,c
  7372  00024C                     l4054:
  7373                           
  7374                           ;doprnt.c: 757: if(width > len)
  7375  00024C  503C               	movf	sprintf@width,w,c
  7376  00024E  5C35               	subwf	sprintf@len,w,c
  7377  000250  503D               	movf	sprintf@width+1,w,c
  7378  000252  5836               	subwfb	sprintf@len+1,w,c
  7379  000254  B0D8               	btfsc	status,0,c
  7380  000256  D005               	goto	l4058
  7381                           
  7382                           ;doprnt.c: 758: width -= len;
  7383  000258  5035               	movf	sprintf@len,w,c
  7384  00025A  5E3C               	subwf	sprintf@width,f,c
  7385  00025C  5036               	movf	sprintf@len+1,w,c
  7386  00025E  5A3D               	subwfb	sprintf@width+1,f,c
  7387  000260  D004               	goto	l4060
  7388  000262                     l4058:
  7389                           
  7390                           ;doprnt.c: 759: else
  7391                           ;doprnt.c: 760: width = 0;
  7392  000262  0E00               	movlw	0
  7393  000264  6E3D               	movwf	sprintf@width+1,c
  7394  000266  0E00               	movlw	0
  7395  000268  6E3C               	movwf	sprintf@width,c
  7396  00026A                     l4060:
  7397                           
  7398                           ;doprnt.c: 762: if(!(flag & 0x08))
  7399  00026A  A63F               	btfss	sprintf@flag,3,c
  7400  00026C  D009               	goto	l4068
  7401  00026E  D02A               	goto	l4076
  7402  000270                     l4064:
  7403                           
  7404                           ;doprnt.c: 765: ((*sp++ = (' ')));
  7405  000270  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7406  000274  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7407  000278  0E20               	movlw	32
  7408  00027A  6EDF               	movwf	indf2,c
  7409  00027C  4A1E               	infsnz	sprintf@sp,f,c
  7410  00027E  2A1F               	incf	sprintf@sp+1,f,c
  7411  000280                     l4068:
  7412  000280  063C               	decf	sprintf@width,f,c
  7413  000282  A0D8               	btfss	status,0,c
  7414  000284  063D               	decf	sprintf@width+1,f,c
  7415  000286  283C               	incf	sprintf@width,w,c
  7416  000288  E1F3               	bnz	l4064
  7417  00028A  283D               	incf	sprintf@width+1,w,c
  7418  00028C  B4D8               	btfsc	status,2,c
  7419  00028E  D01A               	goto	l4076
  7420  000290  D7EF               	goto	l4064
  7421  000292                     l4070:
  7422                           
  7423                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  7424  000292  C033  FFF6         	movff	sprintf@cp,tblptrl
  7425  000296  C034  FFF7         	movff	sprintf@cp+1,tblptrh
  7426  00029A  6AF8               	clrf	tblptru,c
  7427  00029C  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7428  0002A0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7429  0002A4  0E05               	movlw	(high __ramtop+-1)
  7430  0002A6  64F7               	cpfsgt	tblptrh,c
  7431  0002A8  D003               	bra	u4467
  7432  0002AA  0008               	tblrd		*
  7433  0002AC  50F5               	movf	tablat,w,c
  7434  0002AE  D005               	bra	u4460
  7435  0002B0                     u4467:
  7436  0002B0  CFF6 FFE1          	movff	tblptrl,fsr1l
  7437  0002B4  CFF7 FFE2          	movff	tblptrh,fsr1h
  7438  0002B8  50E7               	movf	indf1,w,c
  7439  0002BA                     u4460:
  7440  0002BA  6EDF               	movwf	indf2,c
  7441  0002BC  4A33               	infsnz	sprintf@cp,f,c
  7442  0002BE  2A34               	incf	sprintf@cp+1,f,c
  7443  0002C0  4A1E               	infsnz	sprintf@sp,f,c
  7444  0002C2  2A1F               	incf	sprintf@sp+1,f,c
  7445  0002C4                     l4076:
  7446  0002C4  0635               	decf	sprintf@len,f,c
  7447  0002C6  A0D8               	btfss	status,0,c
  7448  0002C8  0636               	decf	sprintf@len+1,f,c
  7449  0002CA  2835               	incf	sprintf@len,w,c
  7450  0002CC  E1E2               	bnz	l4070
  7451  0002CE  2836               	incf	sprintf@len+1,w,c
  7452  0002D0  A4D8               	btfss	status,2,c
  7453  0002D2  D7DF               	goto	l4070
  7454                           
  7455                           ;doprnt.c: 770: if(flag & 0x08)
  7456  0002D4  B63F               	btfsc	sprintf@flag,3,c
  7457  0002D6  D009               	goto	l4084
  7458  0002D8  D2D9               	goto	l4320
  7459  0002DA                     l4080:
  7460                           
  7461                           ;doprnt.c: 772: ((*sp++ = (' ')));
  7462  0002DA  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7463  0002DE  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7464  0002E2  0E20               	movlw	32
  7465  0002E4  6EDF               	movwf	indf2,c
  7466  0002E6  4A1E               	infsnz	sprintf@sp,f,c
  7467  0002E8  2A1F               	incf	sprintf@sp+1,f,c
  7468  0002EA                     l4084:
  7469  0002EA  063C               	decf	sprintf@width,f,c
  7470  0002EC  A0D8               	btfss	status,0,c
  7471  0002EE  063D               	decf	sprintf@width+1,f,c
  7472  0002F0  283C               	incf	sprintf@width,w,c
  7473  0002F2  E1F3               	bnz	l4080
  7474  0002F4  283D               	incf	sprintf@width+1,w,c
  7475  0002F6  B4D8               	btfsc	status,2,c
  7476  0002F8  D2C9               	goto	l4320
  7477  0002FA  D7EF               	goto	l4080
  7478  0002FC                     l4086:
  7479                           
  7480                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7481  0002FC  C037  FFD9         	movff	sprintf@ap,fsr2l
  7482  000300  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7483  000304  50DF               	movf	indf2,w,c
  7484  000306  6E3E               	movwf	sprintf@c,c
  7485  000308  0E02               	movlw	2
  7486  00030A  2637               	addwf	sprintf@ap,f,c
  7487  00030C  0E00               	movlw	0
  7488  00030E  2238               	addwfc	sprintf@ap+1,f,c
  7489  000310                     l4090:
  7490                           
  7491                           ;doprnt.c: 805: cp = (char *)&c;
  7492  000310  0E3E               	movlw	low sprintf@c
  7493  000312  6E33               	movwf	sprintf@cp,c
  7494  000314  0E00               	movlw	high sprintf@c
  7495  000316  6E34               	movwf	sprintf@cp+1,c
  7496                           
  7497                           ;doprnt.c: 806: len = 1;
  7498  000318  0E00               	movlw	0
  7499  00031A  6E36               	movwf	sprintf@len+1,c
  7500  00031C  0E01               	movlw	1
  7501  00031E  6E35               	movwf	sprintf@len,c
  7502                           
  7503                           ;doprnt.c: 807: goto dostring;
  7504  000320  D782               	goto	l4048
  7505  000322                     l4094:
  7506                           
  7507                           ;doprnt.c: 818: flag |= 0xC0;
  7508  000322  0EC0               	movlw	192
  7509  000324  123F               	iorwf	sprintf@flag,f,c
  7510                           
  7511                           ;doprnt.c: 822: }
  7512                           
  7513                           ;doprnt.c: 819: break;
  7514  000326  D029               	goto	l4100
  7515  000328                     l4098:
  7516  000328  C020  FFF6         	movff	sprintf@f,tblptrl
  7517  00032C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7518  000330  4A20               	infsnz	sprintf@f,f,c
  7519  000332  2A21               	incf	sprintf@f+1,f,c
  7520  000334                     	if	0	;tblptru may be non-zero
  7521  000334                     	endif
  7522  000334                     	if	0	;tblptru may be non-zero
  7523  000334                     	endif
  7524  000334  0008               	tblrd		*
  7525  000336  CFF5 F03E          	movff	tablat,sprintf@c
  7526  00033A  503E               	movf	sprintf@c,w,c
  7527                           
  7528                           ; Switch size 1, requested type "space"
  7529                           ; Number of cases is 10, Range of values is 0 to 120
  7530                           ; switch strategies available:
  7531                           ; Name         Instructions Cycles
  7532                           ; simple_byte           31    16 (average)
  7533                           ;	Chosen strategy is simple_byte
  7534  00033C  0A00               	xorlw	0	; case 0
  7535  00033E  B4D8               	btfsc	status,2,c
  7536  000340  D2B2               	goto	l4322
  7537  000342  0A58               	xorlw	88	; case 88
  7538  000344  B4D8               	btfsc	status,2,c
  7539  000346  D738               	goto	l451
  7540  000348  0A3B               	xorlw	59	; case 99
  7541  00034A  B4D8               	btfsc	status,2,c
  7542  00034C  D7D7               	goto	l4086
  7543  00034E  0A07               	xorlw	7	; case 100
  7544  000350  B4D8               	btfsc	status,2,c
  7545  000352  D013               	goto	l4100
  7546  000354  0A0D               	xorlw	13	; case 105
  7547  000356  B4D8               	btfsc	status,2,c
  7548  000358  D010               	goto	l4100
  7549  00035A  0A06               	xorlw	6	; case 111
  7550  00035C  B4D8               	btfsc	status,2,c
  7551  00035E  D729               	goto	l4030
  7552  000360  0A1F               	xorlw	31	; case 112
  7553  000362  B4D8               	btfsc	status,2,c
  7554  000364  D728               	goto	l4032
  7555  000366  0A03               	xorlw	3	; case 115
  7556  000368  B4D8               	btfsc	status,2,c
  7557  00036A  D729               	goto	l4034
  7558  00036C  0A06               	xorlw	6	; case 117
  7559  00036E  B4D8               	btfsc	status,2,c
  7560  000370  D7D8               	goto	l4094
  7561  000372  0A0D               	xorlw	13	; case 120
  7562  000374  B4D8               	btfsc	status,2,c
  7563  000376  D721               	goto	l452
  7564  000378  D7CB               	goto	l4090
  7565  00037A                     l4100:
  7566                           
  7567                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7568  00037A  0EC0               	movlw	192
  7569  00037C  143F               	andwf	sprintf@flag,w,c
  7570  00037E  6E28               	movwf	??_sprintf& (0+255),c
  7571  000380  0E00               	movlw	0
  7572  000382  1440               	andwf	sprintf@flag+1,w,c
  7573  000384  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7574  000386  5028               	movf	??_sprintf,w,c
  7575  000388  1029               	iorwf	??_sprintf+1,w,c
  7576  00038A  A4D8               	btfss	status,2,c
  7577  00038C  D015               	goto	l4112
  7578                           
  7579                           ;doprnt.c: 1253: {
  7580                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7581  00038E  C037  FFD9         	movff	sprintf@ap,fsr2l
  7582  000392  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7583  000396  CFDE F039          	movff	postinc2,sprintf@val
  7584  00039A  CFDD F03A          	movff	postdec2,sprintf@val+1
  7585  00039E  0E02               	movlw	2
  7586  0003A0  2637               	addwf	sprintf@ap,f,c
  7587  0003A2  0E00               	movlw	0
  7588  0003A4  2238               	addwfc	sprintf@ap+1,f,c
  7589                           
  7590                           ;doprnt.c: 1261: if((int)val < 0) {
  7591  0003A6  AE3A               	btfss	sprintf@val+1,7,c
  7592  0003A8  D013               	goto	l4116
  7593                           
  7594                           ;doprnt.c: 1262: flag |= 0x03;
  7595  0003AA  0E03               	movlw	3
  7596  0003AC  123F               	iorwf	sprintf@flag,f,c
  7597                           
  7598                           ;doprnt.c: 1263: val = -val;
  7599  0003AE  6C39               	negf	sprintf@val,c
  7600  0003B0  1E3A               	comf	sprintf@val+1,f,c
  7601  0003B2  B0D8               	btfsc	status,0,c
  7602  0003B4  2A3A               	incf	sprintf@val+1,f,c
  7603                           
  7604                           ;doprnt.c: 1264: }
  7605                           ;doprnt.c: 1266: }
  7606  0003B6  D00C               	goto	l4116
  7607  0003B8                     l4112:
  7608                           
  7609                           ;doprnt.c: 1268: else
  7610                           ;doprnt.c: 1273: {
  7611                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7612  0003B8  C037  FFD9         	movff	sprintf@ap,fsr2l
  7613  0003BC  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7614  0003C0  CFDE F039          	movff	postinc2,sprintf@val
  7615  0003C4  CFDD F03A          	movff	postdec2,sprintf@val+1
  7616  0003C8  0E02               	movlw	2
  7617  0003CA  2637               	addwf	sprintf@ap,f,c
  7618  0003CC  0E00               	movlw	0
  7619  0003CE  2238               	addwfc	sprintf@ap+1,f,c
  7620  0003D0                     l4116:
  7621                           
  7622                           ;doprnt.c: 1287: }
  7623                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7624  0003D0  503B               	movf	sprintf@prec,w,c
  7625  0003D2  A4D8               	btfss	status,2,c
  7626  0003D4  D04E               	goto	l4166
  7627  0003D6  5039               	movf	sprintf@val,w,c
  7628  0003D8  103A               	iorwf	sprintf@val+1,w,c
  7629  0003DA  A4D8               	btfss	status,2,c
  7630  0003DC  D04A               	goto	l4166
  7631                           
  7632                           ;doprnt.c: 1291: prec++;
  7633  0003DE  2A3B               	incf	sprintf@prec,f,c
  7634                           
  7635                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7636  0003E0  D048               	goto	l4166
  7637  0003E2                     l4122:
  7638                           
  7639                           ;doprnt.c: 1302: case 0xC0:
  7640                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7641  0003E2  0E01               	movlw	1
  7642  0003E4  6E3E               	movwf	sprintf@c,c
  7643  0003E6                     l4124:
  7644  0003E6  0E05               	movlw	5
  7645  0003E8  183E               	xorwf	sprintf@c,w,c
  7646  0003EA  B4D8               	btfsc	status,2,c
  7647  0003EC  D050               	goto	l4168
  7648                           
  7649                           ;doprnt.c: 1306: if(val < dpowers[c])
  7650  0003EE  503E               	movf	sprintf@c,w,c
  7651  0003F0  0D02               	mullw	2
  7652  0003F2  0E07               	movlw	low _dpowers
  7653  0003F4  24F3               	addwf	prodl,w,c
  7654  0003F6  6EF6               	movwf	tblptrl,c
  7655  0003F8  0E7E               	movlw	high _dpowers
  7656  0003FA  20F4               	addwfc	prodh,w,c
  7657  0003FC  6EF7               	movwf	tblptrh,c
  7658  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  7659  0003FE                     	endif
  7660  0003FE  0009               	tblrd		*+
  7661  000400  50F5               	movf	tablat,w,c
  7662  000402  5C39               	subwf	sprintf@val,w,c
  7663  000404  0009               	tblrd		*+
  7664  000406  50F5               	movf	tablat,w,c
  7665  000408  583A               	subwfb	sprintf@val+1,w,c
  7666  00040A  A0D8               	btfss	status,0,c
  7667  00040C  D040               	goto	l4168
  7668                           
  7669                           ;doprnt.c: 1307: break;
  7670  00040E  2A3E               	incf	sprintf@c,f,c
  7671  000410  D7EA               	goto	l4124
  7672  000412                     l4136:
  7673                           
  7674                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7675  000412  0E01               	movlw	1
  7676  000414  6E3E               	movwf	sprintf@c,c
  7677  000416                     l4138:
  7678  000416  0E04               	movlw	4
  7679  000418  183E               	xorwf	sprintf@c,w,c
  7680  00041A  B4D8               	btfsc	status,2,c
  7681  00041C  D038               	goto	l4168
  7682                           
  7683                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7684  00041E  503E               	movf	sprintf@c,w,c
  7685  000420  0D02               	mullw	2
  7686  000422  0E11               	movlw	low _hexpowers
  7687  000424  24F3               	addwf	prodl,w,c
  7688  000426  6EF6               	movwf	tblptrl,c
  7689  000428  0E7E               	movlw	high _hexpowers
  7690  00042A  20F4               	addwfc	prodh,w,c
  7691  00042C  6EF7               	movwf	tblptrh,c
  7692  00042E                     	if	0	;There are less than 3 active tblptr bytes
  7693  00042E                     	endif
  7694  00042E  0009               	tblrd		*+
  7695  000430  50F5               	movf	tablat,w,c
  7696  000432  5C39               	subwf	sprintf@val,w,c
  7697  000434  0009               	tblrd		*+
  7698  000436  50F5               	movf	tablat,w,c
  7699  000438  583A               	subwfb	sprintf@val+1,w,c
  7700  00043A  A0D8               	btfss	status,0,c
  7701  00043C  D028               	goto	l4168
  7702                           
  7703                           ;doprnt.c: 1318: break;
  7704  00043E  2A3E               	incf	sprintf@c,f,c
  7705  000440  D7EA               	goto	l4138
  7706  000442                     l4150:
  7707                           
  7708                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  7709  000442  0E01               	movlw	1
  7710  000444  6E3E               	movwf	sprintf@c,c
  7711  000446                     l4152:
  7712  000446  0E06               	movlw	6
  7713  000448  183E               	xorwf	sprintf@c,w,c
  7714  00044A  B4D8               	btfsc	status,2,c
  7715  00044C  D020               	goto	l4168
  7716                           
  7717                           ;doprnt.c: 1329: if(val < octpowers[c])
  7718  00044E  503E               	movf	sprintf@c,w,c
  7719  000450  0D02               	mullw	2
  7720  000452  0EFB               	movlw	low _octpowers
  7721  000454  24F3               	addwf	prodl,w,c
  7722  000456  6EF6               	movwf	tblptrl,c
  7723  000458  0E7D               	movlw	high _octpowers
  7724  00045A  20F4               	addwfc	prodh,w,c
  7725  00045C  6EF7               	movwf	tblptrh,c
  7726  00045E                     	if	0	;There are less than 3 active tblptr bytes
  7727  00045E                     	endif
  7728  00045E  0009               	tblrd		*+
  7729  000460  50F5               	movf	tablat,w,c
  7730  000462  5C39               	subwf	sprintf@val,w,c
  7731  000464  0009               	tblrd		*+
  7732  000466  50F5               	movf	tablat,w,c
  7733  000468  583A               	subwfb	sprintf@val+1,w,c
  7734  00046A  A0D8               	btfss	status,0,c
  7735  00046C  D010               	goto	l4168
  7736                           
  7737                           ;doprnt.c: 1330: break;
  7738  00046E  2A3E               	incf	sprintf@c,f,c
  7739  000470  D7EA               	goto	l4152
  7740  000472                     l4166:
  7741  000472  503F               	movf	sprintf@flag,w,c
  7742  000474  0BC0               	andlw	192
  7743                           
  7744                           ; Switch size 1, requested type "space"
  7745                           ; Number of cases is 4, Range of values is 0 to 192
  7746                           ; switch strategies available:
  7747                           ; Name         Instructions Cycles
  7748                           ; simple_byte           13     7 (average)
  7749                           ;	Chosen strategy is simple_byte
  7750  000476  0A00               	xorlw	0	; case 0
  7751  000478  B4D8               	btfsc	status,2,c
  7752  00047A  D7B3               	goto	l4122
  7753  00047C  0A40               	xorlw	64	; case 64
  7754  00047E  B4D8               	btfsc	status,2,c
  7755  000480  D7E0               	goto	l4150
  7756  000482  0AC0               	xorlw	192	; case 128
  7757  000484  B4D8               	btfsc	status,2,c
  7758  000486  D7C5               	goto	l4136
  7759  000488  0A40               	xorlw	64	; case 192
  7760  00048A  B4D8               	btfsc	status,2,c
  7761  00048C  D7AA               	goto	l4122
  7762  00048E                     l4168:
  7763                           
  7764                           ;doprnt.c: 1339: if(c < prec)
  7765  00048E  503E               	movf	sprintf@c,w,c
  7766  000490  0A80               	xorlw	128
  7767  000492  6E28               	movwf	??_sprintf& (0+255),c
  7768  000494  503B               	movf	sprintf@prec,w,c
  7769  000496  0A80               	xorlw	128
  7770  000498  5C28               	subwf	??_sprintf& (0+255),w,c
  7771  00049A  B0D8               	btfsc	status,0,c
  7772  00049C  D003               	goto	l4172
  7773                           
  7774                           ;doprnt.c: 1340: c = prec;
  7775  00049E  C03B  F03E         	movff	sprintf@prec,sprintf@c
  7776  0004A2  D009               	goto	l4176
  7777  0004A4                     l4172:
  7778                           
  7779                           ;doprnt.c: 1341: else if(prec < c)
  7780  0004A4  503B               	movf	sprintf@prec,w,c
  7781  0004A6  0A80               	xorlw	128
  7782  0004A8  6E28               	movwf	??_sprintf& (0+255),c
  7783  0004AA  503E               	movf	sprintf@c,w,c
  7784  0004AC  0A80               	xorlw	128
  7785  0004AE  5C28               	subwf	??_sprintf& (0+255),w,c
  7786  0004B0  A0D8               	btfss	status,0,c
  7787                           
  7788                           ;doprnt.c: 1342: prec = c;
  7789  0004B2  C03E  F03B         	movff	sprintf@c,sprintf@prec
  7790  0004B6                     l4176:
  7791                           
  7792                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7793  0004B6  503C               	movf	sprintf@width,w,c
  7794  0004B8  103D               	iorwf	sprintf@width+1,w,c
  7795  0004BA  B4D8               	btfsc	status,2,c
  7796  0004BC  D00D               	goto	l4182
  7797  0004BE  0E03               	movlw	3
  7798  0004C0  143F               	andwf	sprintf@flag,w,c
  7799  0004C2  6E28               	movwf	??_sprintf& (0+255),c
  7800  0004C4  0E00               	movlw	0
  7801  0004C6  1440               	andwf	sprintf@flag+1,w,c
  7802  0004C8  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7803  0004CA  5028               	movf	??_sprintf,w,c
  7804  0004CC  1029               	iorwf	??_sprintf+1,w,c
  7805  0004CE  B4D8               	btfsc	status,2,c
  7806  0004D0  D003               	goto	l4182
  7807                           
  7808                           ;doprnt.c: 1346: width--;
  7809  0004D2  063C               	decf	sprintf@width,f,c
  7810  0004D4  A0D8               	btfss	status,0,c
  7811  0004D6  063D               	decf	sprintf@width+1,f,c
  7812  0004D8                     l4182:
  7813                           
  7814                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7815  0004D8  AC40               	btfss	sprintf@flag+1,6,c
  7816  0004DA  D016               	goto	l4190
  7817                           
  7818                           ;doprnt.c: 1349: if(width > prec)
  7819  0004DC  0E80               	movlw	128
  7820  0004DE  BE3B               	btfsc	sprintf@prec,7,c
  7821  0004E0  0E7F               	movlw	127
  7822  0004E2  6E28               	movwf	??_sprintf& (0+255),c
  7823  0004E4  503C               	movf	sprintf@width,w,c
  7824  0004E6  5C3B               	subwf	sprintf@prec,w,c
  7825  0004E8  503D               	movf	sprintf@width+1,w,c
  7826  0004EA  0A80               	xorlw	128
  7827  0004EC  5828               	subwfb	??_sprintf& (0+255),w,c
  7828  0004EE  B0D8               	btfsc	status,0,c
  7829  0004F0  D007               	goto	l4188
  7830                           
  7831                           ;doprnt.c: 1350: width -= prec;
  7832  0004F2  503B               	movf	sprintf@prec,w,c
  7833  0004F4  5E3C               	subwf	sprintf@width,f,c
  7834  0004F6  0E00               	movlw	0
  7835  0004F8  BE3B               	btfsc	sprintf@prec,7,c
  7836  0004FA  0EFF               	movlw	255
  7837  0004FC  5A3D               	subwfb	sprintf@width+1,f,c
  7838  0004FE  D004               	goto	l4190
  7839  000500                     l4188:
  7840                           
  7841                           ;doprnt.c: 1351: else
  7842                           ;doprnt.c: 1352: width = 0;
  7843  000500  0E00               	movlw	0
  7844  000502  6E3D               	movwf	sprintf@width+1,c
  7845  000504  0E00               	movlw	0
  7846  000506  6E3C               	movwf	sprintf@width,c
  7847  000508                     l4190:
  7848                           
  7849                           ;doprnt.c: 1353: }
  7850                           ;doprnt.c: 1357: if((flag & (
  7851                           ;doprnt.c: 1359: 0x04|
  7852                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  7853  000508  0EC4               	movlw	196
  7854  00050A  6E28               	movwf	??_sprintf& (0+255),c
  7855  00050C  0E08               	movlw	8
  7856  00050E  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7857  000510  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  7858  000514  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  7859  000518  5028               	movf	??_sprintf,w,c
  7860  00051A  162A               	andwf	??_sprintf+2,f,c
  7861  00051C  5029               	movf	??_sprintf+1,w,c
  7862  00051E  162B               	andwf	??_sprintf+3,f,c
  7863  000520  0E40               	movlw	64
  7864  000522  182A               	xorwf	??_sprintf+2,w,c
  7865  000524  E10C               	bnz	l4196
  7866  000526  0E08               	movlw	8
  7867  000528  182B               	xorwf	??_sprintf+3,w,c
  7868  00052A  A4D8               	btfss	status,2,c
  7869  00052C  D008               	goto	l4196
  7870                           
  7871                           ;doprnt.c: 1362: if(width)
  7872  00052E  503C               	movf	sprintf@width,w,c
  7873  000530  103D               	iorwf	sprintf@width+1,w,c
  7874  000532  B4D8               	btfsc	status,2,c
  7875  000534  D028               	goto	l4204
  7876                           
  7877                           ;doprnt.c: 1363: width--;
  7878  000536  063C               	decf	sprintf@width,f,c
  7879  000538  A0D8               	btfss	status,0,c
  7880  00053A  063D               	decf	sprintf@width+1,f,c
  7881                           
  7882                           ;doprnt.c: 1364: } else
  7883  00053C  D024               	goto	l4204
  7884  00053E                     l4196:
  7885                           
  7886                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  7887  00053E  0EC0               	movlw	192
  7888  000540  6E28               	movwf	??_sprintf& (0+255),c
  7889  000542  0E08               	movlw	8
  7890  000544  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7891  000546  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  7892  00054A  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  7893  00054E  5028               	movf	??_sprintf,w,c
  7894  000550  162A               	andwf	??_sprintf+2,f,c
  7895  000552  5029               	movf	??_sprintf+1,w,c
  7896  000554  162B               	andwf	??_sprintf+3,f,c
  7897  000556  0E80               	movlw	128
  7898  000558  182A               	xorwf	??_sprintf+2,w,c
  7899  00055A  E115               	bnz	l4204
  7900  00055C  0E08               	movlw	8
  7901  00055E  182B               	xorwf	??_sprintf+3,w,c
  7902  000560  A4D8               	btfss	status,2,c
  7903  000562  D011               	goto	l4204
  7904                           
  7905                           ;doprnt.c: 1372: if(width > 2)
  7906  000564  BE3D               	btfsc	sprintf@width+1,7,c
  7907  000566  D00B               	goto	l4202
  7908  000568  503D               	movf	sprintf@width+1,w,c
  7909  00056A  E104               	bnz	u4720
  7910  00056C  0E03               	movlw	3
  7911  00056E  5C3C               	subwf	sprintf@width,w,c
  7912  000570  A0D8               	btfss	status,0,c
  7913  000572  D005               	goto	l4202
  7914  000574                     u4720:
  7915                           
  7916                           ;doprnt.c: 1373: width -= 2;
  7917  000574  0EFE               	movlw	254
  7918  000576  263C               	addwf	sprintf@width,f,c
  7919  000578  0EFF               	movlw	255
  7920  00057A  223D               	addwfc	sprintf@width+1,f,c
  7921  00057C  D004               	goto	l4204
  7922  00057E                     l4202:
  7923                           
  7924                           ;doprnt.c: 1374: else
  7925                           ;doprnt.c: 1375: width = 0;
  7926  00057E  0E00               	movlw	0
  7927  000580  6E3D               	movwf	sprintf@width+1,c
  7928  000582  0E00               	movlw	0
  7929  000584  6E3C               	movwf	sprintf@width,c
  7930  000586                     l4204:
  7931                           
  7932                           ;doprnt.c: 1376: }
  7933                           ;doprnt.c: 1381: if(width > c)
  7934  000586  0E80               	movlw	128
  7935  000588  BE3E               	btfsc	sprintf@c,7,c
  7936  00058A  0E7F               	movlw	127
  7937  00058C  6E28               	movwf	??_sprintf& (0+255),c
  7938  00058E  503C               	movf	sprintf@width,w,c
  7939  000590  5C3E               	subwf	sprintf@c,w,c
  7940  000592  503D               	movf	sprintf@width+1,w,c
  7941  000594  0A80               	xorlw	128
  7942  000596  5828               	subwfb	??_sprintf& (0+255),w,c
  7943  000598  B0D8               	btfsc	status,0,c
  7944  00059A  D007               	goto	l4208
  7945                           
  7946                           ;doprnt.c: 1382: width -= c;
  7947  00059C  503E               	movf	sprintf@c,w,c
  7948  00059E  5E3C               	subwf	sprintf@width,f,c
  7949  0005A0  0E00               	movlw	0
  7950  0005A2  BE3E               	btfsc	sprintf@c,7,c
  7951  0005A4  0EFF               	movlw	255
  7952  0005A6  5A3D               	subwfb	sprintf@width+1,f,c
  7953  0005A8  D004               	goto	l4210
  7954  0005AA                     l4208:
  7955                           
  7956                           ;doprnt.c: 1383: else
  7957                           ;doprnt.c: 1384: width = 0;
  7958  0005AA  0E00               	movlw	0
  7959  0005AC  6E3D               	movwf	sprintf@width+1,c
  7960  0005AE  0E00               	movlw	0
  7961  0005B0  6E3C               	movwf	sprintf@width,c
  7962  0005B2                     l4210:
  7963                           
  7964                           ;doprnt.c: 1387: if(flag & 0x04) {
  7965  0005B2  A43F               	btfss	sprintf@flag,2,c
  7966  0005B4  D058               	goto	l4246
  7967                           
  7968                           ;doprnt.c: 1392: if(flag & 0x03)
  7969  0005B6  0E03               	movlw	3
  7970  0005B8  143F               	andwf	sprintf@flag,w,c
  7971  0005BA  6E28               	movwf	??_sprintf& (0+255),c
  7972  0005BC  0E00               	movlw	0
  7973  0005BE  1440               	andwf	sprintf@flag+1,w,c
  7974  0005C0  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7975  0005C2  5028               	movf	??_sprintf,w,c
  7976  0005C4  1029               	iorwf	??_sprintf+1,w,c
  7977  0005C6  B4D8               	btfsc	status,2,c
  7978  0005C8  D009               	goto	l511
  7979                           
  7980                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  7981  0005CA  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7982  0005CE  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7983  0005D2  0E2D               	movlw	45
  7984  0005D4  D00A               	goto	L13
  7985  0005D6                     l4216:
  7986  0005D6  4A1E               	infsnz	sprintf@sp,f,c
  7987  0005D8  2A1F               	incf	sprintf@sp+1,f,c
  7988  0005DA  D035               	goto	l4238
  7989  0005DC                     l511:
  7990                           
  7991                           ;doprnt.c: 1396: else
  7992                           ;doprnt.c: 1399: if(flag & 0x01)
  7993  0005DC  A03F               	btfss	sprintf@flag,0,c
  7994  0005DE  D007               	goto	l4222
  7995                           
  7996                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  7997  0005E0  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7998  0005E4  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7999  0005E8  0E20               	movlw	32
  8000  0005EA                     L13:
  8001  0005EA  6EDF               	movwf	indf2,c
  8002  0005EC  D7F4               	goto	l4216
  8003  0005EE                     l4222:
  8004                           
  8005                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  8006  0005EE  0EC0               	movlw	192
  8007  0005F0  6E28               	movwf	??_sprintf& (0+255),c
  8008  0005F2  0E08               	movlw	8
  8009  0005F4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  8010  0005F6  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  8011  0005FA  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  8012  0005FE  5028               	movf	??_sprintf,w,c
  8013  000600  162A               	andwf	??_sprintf+2,f,c
  8014  000602  5029               	movf	??_sprintf+1,w,c
  8015  000604  162B               	andwf	??_sprintf+3,f,c
  8016  000606  0E80               	movlw	128
  8017  000608  182A               	xorwf	??_sprintf+2,w,c
  8018  00060A  E11D               	bnz	l4238
  8019  00060C  0E08               	movlw	8
  8020  00060E  182B               	xorwf	??_sprintf+3,w,c
  8021  000610  A4D8               	btfss	status,2,c
  8022  000612  D019               	goto	l4238
  8023                           
  8024                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  8025  000614  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8026  000618  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8027  00061C  0E30               	movlw	48
  8028  00061E  6EDF               	movwf	indf2,c
  8029  000620  4A1E               	infsnz	sprintf@sp,f,c
  8030  000622  2A1F               	incf	sprintf@sp+1,f,c
  8031                           
  8032                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  8033  000624  BA3F               	btfsc	sprintf@flag,5,c
  8034  000626  D004               	goto	l4232
  8035  000628  0E00               	movlw	0
  8036  00062A  6E2E               	movwf	_sprintf$1533+1,c
  8037  00062C  0E78               	movlw	120
  8038  00062E  D003               	goto	L14
  8039  000630                     l4232:
  8040  000630  0E00               	movlw	0
  8041  000632  6E2E               	movwf	_sprintf$1533+1,c
  8042  000634  0E58               	movlw	88
  8043  000636                     L14:
  8044  000636  6E2D               	movwf	_sprintf$1533,c
  8045  000638  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8046  00063C  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8047  000640  C02D  FFDF         	movff	_sprintf$1533,indf2
  8048  000644  D7C8               	goto	l4216
  8049  000646                     l4238:
  8050                           
  8051                           ;doprnt.c: 1412: }
  8052                           ;doprnt.c: 1415: if(width)
  8053  000646  503C               	movf	sprintf@width,w,c
  8054  000648  103D               	iorwf	sprintf@width+1,w,c
  8055  00064A  B4D8               	btfsc	status,2,c
  8056  00064C  D104               	goto	l4310
  8057                           
  8058                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  8059                           
  8060                           ;doprnt.c: 1416: do
  8061  00064E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8062  000652  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8063  000656  0E30               	movlw	48
  8064  000658  6EDF               	movwf	indf2,c
  8065  00065A  4A1E               	infsnz	sprintf@sp,f,c
  8066  00065C  2A1F               	incf	sprintf@sp+1,f,c
  8067                           
  8068                           ;doprnt.c: 1418: while(--width);
  8069  00065E  063C               	decf	sprintf@width,f,c
  8070  000660  A0D8               	btfss	status,0,c
  8071  000662  063D               	decf	sprintf@width+1,f,c
  8072  000664  D7F0               	goto	l4238
  8073  000666                     l4246:
  8074                           
  8075                           ;doprnt.c: 1422: {
  8076                           ;doprnt.c: 1424: if(width
  8077                           ;doprnt.c: 1426: && !(flag & 0x08)
  8078                           ;doprnt.c: 1428: )
  8079  000666  503C               	movf	sprintf@width,w,c
  8080  000668  103D               	iorwf	sprintf@width+1,w,c
  8081  00066A  A4D8               	btfss	status,2,c
  8082  00066C  B63F               	btfsc	sprintf@flag,3,c
  8083  00066E  D00F               	goto	l4256
  8084  000670                     l4250:
  8085                           
  8086                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  8087  000670  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8088  000674  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8089  000678  0E20               	movlw	32
  8090  00067A  6EDF               	movwf	indf2,c
  8091  00067C  4A1E               	infsnz	sprintf@sp,f,c
  8092  00067E  2A1F               	incf	sprintf@sp+1,f,c
  8093                           
  8094                           ;doprnt.c: 1431: while(--width);
  8095  000680  063C               	decf	sprintf@width,f,c
  8096  000682  A0D8               	btfss	status,0,c
  8097  000684  063D               	decf	sprintf@width+1,f,c
  8098  000686  503C               	movf	sprintf@width,w,c
  8099  000688  103D               	iorwf	sprintf@width+1,w,c
  8100  00068A  A4D8               	btfss	status,2,c
  8101  00068C  D7F1               	goto	l4250
  8102  00068E                     l4256:
  8103                           
  8104                           ;doprnt.c: 1438: if(flag & 0x03)
  8105  00068E  0E03               	movlw	3
  8106  000690  143F               	andwf	sprintf@flag,w,c
  8107  000692  6E28               	movwf	??_sprintf& (0+255),c
  8108  000694  0E00               	movlw	0
  8109  000696  1440               	andwf	sprintf@flag+1,w,c
  8110  000698  6E29               	movwf	(??_sprintf+1)& (0+255),c
  8111  00069A  5028               	movf	??_sprintf,w,c
  8112  00069C  1029               	iorwf	??_sprintf+1,w,c
  8113  00069E  B4D8               	btfsc	status,2,c
  8114  0006A0  D009               	goto	l527
  8115                           
  8116                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8117  0006A2  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8118  0006A6  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8119  0006AA  0E2D               	movlw	45
  8120  0006AC  D00A               	goto	L15
  8121  0006AE                     l4260:
  8122  0006AE  4A1E               	infsnz	sprintf@sp,f,c
  8123  0006B0  2A1F               	incf	sprintf@sp+1,f,c
  8124  0006B2  D009               	goto	l4266
  8125  0006B4                     l527:
  8126                           
  8127                           ;doprnt.c: 1443: else if(flag & 0x01)
  8128  0006B4  A03F               	btfss	sprintf@flag,0,c
  8129  0006B6  D007               	goto	l4266
  8130                           
  8131                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  8132  0006B8  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8133  0006BC  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8134  0006C0  0E20               	movlw	32
  8135  0006C2                     L15:
  8136  0006C2  6EDF               	movwf	indf2,c
  8137  0006C4  D7F4               	goto	l4260
  8138  0006C6                     l4266:
  8139                           
  8140                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  8141  0006C6  0EC0               	movlw	192
  8142  0006C8  6E28               	movwf	??_sprintf& (0+255),c
  8143  0006CA  0E08               	movlw	8
  8144  0006CC  6E29               	movwf	(??_sprintf+1)& (0+255),c
  8145  0006CE  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  8146  0006D2  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  8147  0006D6  5028               	movf	??_sprintf,w,c
  8148  0006D8  162A               	andwf	??_sprintf+2,f,c
  8149  0006DA  5029               	movf	??_sprintf+1,w,c
  8150  0006DC  162B               	andwf	??_sprintf+3,f,c
  8151  0006DE  0E40               	movlw	64
  8152  0006E0  182A               	xorwf	??_sprintf+2,w,c
  8153  0006E2  E10B               	bnz	l4272
  8154  0006E4  0E08               	movlw	8
  8155  0006E6  182B               	xorwf	??_sprintf+3,w,c
  8156  0006E8  A4D8               	btfss	status,2,c
  8157  0006EA  D007               	goto	l4272
  8158                           
  8159                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  8160  0006EC  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8161  0006F0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8162  0006F4  0E30               	movlw	48
  8163  0006F6  6EDF               	movwf	indf2,c
  8164  0006F8  D0AC               	goto	l4308
  8165  0006FA                     l4272:
  8166                           
  8167                           ;doprnt.c: 1450: else
  8168                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  8169  0006FA  0EC0               	movlw	192
  8170  0006FC  6E28               	movwf	??_sprintf& (0+255),c
  8171  0006FE  0E08               	movlw	8
  8172  000700  6E29               	movwf	(??_sprintf+1)& (0+255),c
  8173  000702  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  8174  000706  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  8175  00070A  5028               	movf	??_sprintf,w,c
  8176  00070C  162A               	andwf	??_sprintf+2,f,c
  8177  00070E  5029               	movf	??_sprintf+1,w,c
  8178  000710  162B               	andwf	??_sprintf+3,f,c
  8179  000712  0E80               	movlw	128
  8180  000714  182A               	xorwf	??_sprintf+2,w,c
  8181  000716  E103               	bnz	u4871
  8182  000718  0E08               	movlw	8
  8183  00071A  182B               	xorwf	??_sprintf+3,w,c
  8184  00071C  A4D8               	btfss	status,2,c
  8185  00071E                     u4871:
  8186  00071E  D09B               	goto	l4310
  8187                           
  8188                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  8189  000720  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8190  000724  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8191  000728  0E30               	movlw	48
  8192  00072A  6EDF               	movwf	indf2,c
  8193  00072C  4A1E               	infsnz	sprintf@sp,f,c
  8194  00072E  2A1F               	incf	sprintf@sp+1,f,c
  8195                           
  8196                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  8197  000730  BA3F               	btfsc	sprintf@flag,5,c
  8198  000732  D004               	goto	l4282
  8199  000734  0E00               	movlw	0
  8200  000736  6E30               	movwf	_sprintf$1534+1,c
  8201  000738  0E78               	movlw	120
  8202  00073A  D003               	goto	L16
  8203  00073C                     l4282:
  8204  00073C  0E00               	movlw	0
  8205  00073E  6E30               	movwf	_sprintf$1534+1,c
  8206  000740  0E58               	movlw	88
  8207  000742                     L16:
  8208  000742  6E2F               	movwf	_sprintf$1534,c
  8209  000744  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8210  000748  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8211  00074C  C02F  FFDF         	movff	_sprintf$1534,indf2
  8212  000750  D080               	goto	l4308
  8213  000752                     l4288:
  8214                           
  8215                           ;doprnt.c: 1486: case 0xC0:
  8216                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8217  000752  503B               	movf	sprintf@prec,w,c
  8218  000754  0D02               	mullw	2
  8219  000756  0E07               	movlw	low _dpowers
  8220  000758  24F3               	addwf	prodl,w,c
  8221  00075A  6EF6               	movwf	tblptrl,c
  8222  00075C  0E7E               	movlw	high _dpowers
  8223  00075E  20F4               	addwfc	prodh,w,c
  8224  000760  6EF7               	movwf	tblptrh,c
  8225  000762                     	if	0	;There are less than 3 active tblptr bytes
  8226  000762                     	endif
  8227  000762  0009               	tblrd		*+
  8228  000764  CFF5 F014          	movff	tablat,___lwdiv@divisor
  8229  000768  000A               	tblrd		*-
  8230  00076A  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  8231  00076E  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  8232  000772  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  8233  000776  EC72  F014         	call	___lwdiv	;wreg free
  8234  00077A  C012  F019         	movff	?___lwdiv,___lwmod@dividend
  8235  00077E  C013  F01A         	movff	?___lwdiv+1,___lwmod@dividend+1
  8236  000782  0E00               	movlw	0
  8237  000784  6E1C               	movwf	___lwmod@divisor+1,c
  8238  000786  0E0A               	movlw	10
  8239  000788  6E1B               	movwf	___lwmod@divisor,c
  8240  00078A  EC9B  F014         	call	___lwmod	;wreg free
  8241  00078E  5019               	movf	?___lwmod,w,c
  8242  000790  D049               	goto	L17
  8243  000792                     l4290:
  8244                           
  8245                           ;doprnt.c: 1499: {
  8246                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8247  000792  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  8248  000796  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  8249  00079A  503B               	movf	sprintf@prec,w,c
  8250  00079C  0D02               	mullw	2
  8251  00079E  0E11               	movlw	low _hexpowers
  8252  0007A0  24F3               	addwf	prodl,w,c
  8253  0007A2  6EF6               	movwf	tblptrl,c
  8254  0007A4  0E7E               	movlw	high _hexpowers
  8255  0007A6  20F4               	addwfc	prodh,w,c
  8256  0007A8  6EF7               	movwf	tblptrh,c
  8257  0007AA                     	if	0	;There are less than 3 active tblptr bytes
  8258  0007AA                     	endif
  8259  0007AA  0009               	tblrd		*+
  8260  0007AC  CFF5 F014          	movff	tablat,___lwdiv@divisor
  8261  0007B0  000A               	tblrd		*-
  8262  0007B2  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  8263  0007B6  EC72  F014         	call	___lwdiv	;wreg free
  8264  0007BA  5012               	movf	?___lwdiv,w,c
  8265  0007BC  0B0F               	andlw	15
  8266  0007BE  6E2C               	movwf	sprintf@idx,c
  8267                           
  8268                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  8269  0007C0  BA3F               	btfsc	sprintf@flag,5,c
  8270  0007C2  D004               	goto	l4296
  8271  0007C4  0EC6               	movlw	low STR_66
  8272  0007C6  6E31               	movwf	_sprintf$1540,c
  8273  0007C8  0E7E               	movlw	high STR_66
  8274  0007CA  D003               	goto	L18
  8275  0007CC                     l4296:
  8276  0007CC  0EB5               	movlw	low STR_65
  8277  0007CE  6E31               	movwf	_sprintf$1540,c
  8278  0007D0  0E7E               	movlw	high STR_65
  8279  0007D2                     L18:
  8280  0007D2  6E32               	movwf	_sprintf$1540+1,c
  8281  0007D4  502C               	movf	sprintf@idx,w,c
  8282  0007D6  0D01               	mullw	1
  8283  0007D8  C031  F028         	movff	_sprintf$1540,??_sprintf
  8284  0007DC  C032  F029         	movff	_sprintf$1540+1,??_sprintf+1
  8285  0007E0  50F3               	movf	prodl,w,c
  8286  0007E2  2628               	addwf	??_sprintf,f,c
  8287  0007E4  50F4               	movf	prodh,w,c
  8288  0007E6  2229               	addwfc	??_sprintf+1,f,c
  8289  0007E8  C028  FFF6         	movff	??_sprintf,tblptrl
  8290  0007EC  C029  FFF7         	movff	??_sprintf+1,tblptrh
  8291  0007F0                     	if	0	;tblptru may be non-zero
  8292  0007F0                     	endif
  8293  0007F0                     	if	0	;tblptru may be non-zero
  8294  0007F0                     	endif
  8295  0007F0  0008               	tblrd		*
  8296  0007F2  CFF5 F03E          	movff	tablat,sprintf@c
  8297                           
  8298                           ;doprnt.c: 1508: }
  8299                           ;doprnt.c: 1510: break;
  8300  0007F6  D027               	goto	l4306
  8301  0007F8                     l4300:
  8302                           
  8303                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  8304  0007F8  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  8305  0007FC  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  8306  000800  503B               	movf	sprintf@prec,w,c
  8307  000802  0D02               	mullw	2
  8308  000804  0EFB               	movlw	low _octpowers
  8309  000806  24F3               	addwf	prodl,w,c
  8310  000808  6EF6               	movwf	tblptrl,c
  8311  00080A  0E7D               	movlw	high _octpowers
  8312  00080C  20F4               	addwfc	prodh,w,c
  8313  00080E  6EF7               	movwf	tblptrh,c
  8314  000810                     	if	0	;There are less than 3 active tblptr bytes
  8315  000810                     	endif
  8316  000810  0009               	tblrd		*+
  8317  000812  CFF5 F014          	movff	tablat,___lwdiv@divisor
  8318  000816  000A               	tblrd		*-
  8319  000818  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  8320  00081C  EC72  F014         	call	___lwdiv	;wreg free
  8321  000820  5012               	movf	?___lwdiv,w,c
  8322  000822  0B07               	andlw	7
  8323  000824                     L17:
  8324  000824  0F30               	addlw	48
  8325  000826  6E3E               	movwf	sprintf@c,c
  8326                           
  8327                           ;doprnt.c: 1523: }
  8328                           
  8329                           ;doprnt.c: 1520: break;
  8330  000828  D00E               	goto	l4306
  8331  00082A                     l4304:
  8332  00082A  503F               	movf	sprintf@flag,w,c
  8333  00082C  0BC0               	andlw	192
  8334                           
  8335                           ; Switch size 1, requested type "space"
  8336                           ; Number of cases is 4, Range of values is 0 to 192
  8337                           ; switch strategies available:
  8338                           ; Name         Instructions Cycles
  8339                           ; simple_byte           13     7 (average)
  8340                           ;	Chosen strategy is simple_byte
  8341  00082E  0A00               	xorlw	0	; case 0
  8342  000830  B4D8               	btfsc	status,2,c
  8343  000832  D78F               	goto	l4288
  8344  000834  0A40               	xorlw	64	; case 64
  8345  000836  B4D8               	btfsc	status,2,c
  8346  000838  D7DF               	goto	l4300
  8347  00083A  0AC0               	xorlw	192	; case 128
  8348  00083C  B4D8               	btfsc	status,2,c
  8349  00083E  D7A9               	goto	l4290
  8350  000840  0A40               	xorlw	64	; case 192
  8351  000842  B4D8               	btfsc	status,2,c
  8352  000844  D786               	goto	l4288
  8353  000846                     l4306:
  8354                           
  8355                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8356  000846  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8357  00084A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8358  00084E  C03E  FFDF         	movff	sprintf@c,indf2
  8359  000852                     l4308:
  8360  000852  4A1E               	infsnz	sprintf@sp,f,c
  8361  000854  2A1F               	incf	sprintf@sp+1,f,c
  8362  000856                     l4310:
  8363  000856  063B               	decf	sprintf@prec,f,c
  8364  000858  283B               	incf	sprintf@prec,w,c
  8365  00085A  A4D8               	btfss	status,2,c
  8366  00085C  D7E6               	goto	l4304
  8367                           
  8368                           ;doprnt.c: 1525: }
  8369                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  8370  00085E  B63F               	btfsc	sprintf@flag,3,c
  8371  000860  BE3D               	btfsc	sprintf@width+1,7,c
  8372  000862  D014               	goto	l4320
  8373  000864  503D               	movf	sprintf@width+1,w,c
  8374  000866  E103               	bnz	l4314
  8375  000868  043C               	decf	sprintf@width,w,c
  8376  00086A  A0D8               	btfss	status,0,c
  8377  00086C  D00F               	goto	l4320
  8378  00086E                     l4314:
  8379                           
  8380                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  8381  00086E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8382  000872  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8383  000876  0E20               	movlw	32
  8384  000878  6EDF               	movwf	indf2,c
  8385  00087A  4A1E               	infsnz	sprintf@sp,f,c
  8386  00087C  2A1F               	incf	sprintf@sp+1,f,c
  8387                           
  8388                           ;doprnt.c: 1531: while(--width);
  8389  00087E  063C               	decf	sprintf@width,f,c
  8390  000880  A0D8               	btfss	status,0,c
  8391  000882  063D               	decf	sprintf@width+1,f,c
  8392  000884  503C               	movf	sprintf@width,w,c
  8393  000886  103D               	iorwf	sprintf@width+1,w,c
  8394  000888  A4D8               	btfss	status,2,c
  8395  00088A  D7F1               	goto	l4314
  8396  00088C                     l4320:
  8397  00088C  C020  FFF6         	movff	sprintf@f,tblptrl
  8398  000890  C021  FFF7         	movff	sprintf@f+1,tblptrh
  8399  000894  4A20               	infsnz	sprintf@f,f,c
  8400  000896  2A21               	incf	sprintf@f+1,f,c
  8401  000898                     	if	0	;tblptru may be non-zero
  8402  000898                     	endif
  8403  000898                     	if	0	;tblptru may be non-zero
  8404  000898                     	endif
  8405  000898  0008               	tblrd		*
  8406  00089A  CFF5 F03E          	movff	tablat,sprintf@c
  8407  00089E  503E               	movf	sprintf@c,w,c
  8408  0008A0  A4D8               	btfss	status,2,c
  8409  0008A2  EF0F  F000         	goto	l3966
  8410  0008A6                     l4322:
  8411                           
  8412                           ;doprnt.c: 1538: *sp = 0;
  8413  0008A6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8414  0008AA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8415  0008AE  0E00               	movlw	0
  8416  0008B0  6EDF               	movwf	indf2,c
  8417  0008B2  0012               	return	
  8418  0008B4                     __end_of_sprintf:
  8419                           	opt stack 0
  8420                           tblptru	equ	0xFF8
  8421                           tblptrh	equ	0xFF7
  8422                           tblptrl	equ	0xFF6
  8423                           tablat	equ	0xFF5
  8424                           prodh	equ	0xFF4
  8425                           prodl	equ	0xFF3
  8426                           intcon	equ	0xFF2
  8427                           postinc0	equ	0xFEE
  8428                           wreg	equ	0xFE8
  8429                           indf1	equ	0xFE7
  8430                           plusw1	equ	0xFE3
  8431                           fsr1h	equ	0xFE2
  8432                           fsr1l	equ	0xFE1
  8433                           indf2	equ	0xFDF
  8434                           postinc2	equ	0xFDE
  8435                           postdec2	equ	0xFDD
  8436                           plusw2	equ	0xFDB
  8437                           fsr2h	equ	0xFDA
  8438                           fsr2l	equ	0xFD9
  8439                           status	equ	0xFD8
  8440                           
  8441 ;; *************** function _isdigit *****************
  8442 ;; Defined at:
  8443 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;  c               1    wreg     unsigned char 
  8446 ;; Auto vars:     Size  Location     Type
  8447 ;;  c               1   19[COMRAM] unsigned char 
  8448 ;; Return value:  Size  Location     Type
  8449 ;;		None               void
  8450 ;; Registers used:
  8451 ;;		wreg, status,2, status,0
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8457 ;;      Params:         0       0       0       0       0       0       0
  8458 ;;      Locals:         2       0       0       0       0       0       0
  8459 ;;      Temps:          1       0       0       0       0       0       0
  8460 ;;      Totals:         3       0       0       0       0       0       0
  8461 ;;Total ram usage:        3 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    1
  8464 ;; This function calls:
  8465 ;;		Nothing
  8466 ;; This function is called by:
  8467 ;;		_sprintf
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           	psect	text36
  8472  002B96                     __ptext36:
  8473                           	opt stack 0
  8474  002B96                     _isdigit:
  8475                           	opt stack 26
  8476                           
  8477                           ;incstack = 0
  8478                           ;isdigit@c stored from wreg
  8479  002B96  6E14               	movwf	isdigit@c,c
  8480  002B98  0E00               	movlw	0
  8481  002B9A  6E13               	movwf	_isdigit$1762,c
  8482  002B9C  0E3A               	movlw	58
  8483  002B9E  6014               	cpfslt	isdigit@c,c
  8484  002BA0  D005               	goto	l3880
  8485  002BA2  0E2F               	movlw	47
  8486  002BA4  6414               	cpfsgt	isdigit@c,c
  8487  002BA6  D002               	goto	l3880
  8488  002BA8  0E01               	movlw	1
  8489  002BAA  6E13               	movwf	_isdigit$1762,c
  8490  002BAC                     l3880:
  8491  002BAC  C013  F012         	movff	_isdigit$1762,??_isdigit
  8492  002BB0  3012               	rrcf	??_isdigit,w,c
  8493  002BB2  0012               	return	
  8494  002BB4                     __end_of_isdigit:
  8495                           	opt stack 0
  8496                           tblptru	equ	0xFF8
  8497                           tblptrh	equ	0xFF7
  8498                           tblptrl	equ	0xFF6
  8499                           tablat	equ	0xFF5
  8500                           prodh	equ	0xFF4
  8501                           prodl	equ	0xFF3
  8502                           intcon	equ	0xFF2
  8503                           postinc0	equ	0xFEE
  8504                           wreg	equ	0xFE8
  8505                           indf1	equ	0xFE7
  8506                           plusw1	equ	0xFE3
  8507                           fsr1h	equ	0xFE2
  8508                           fsr1l	equ	0xFE1
  8509                           indf2	equ	0xFDF
  8510                           postinc2	equ	0xFDE
  8511                           postdec2	equ	0xFDD
  8512                           plusw2	equ	0xFDB
  8513                           fsr2h	equ	0xFDA
  8514                           fsr2l	equ	0xFD9
  8515                           status	equ	0xFD8
  8516                           
  8517 ;; *************** function ___wmul *****************
  8518 ;; Defined at:
  8519 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  8520 ;; Parameters:    Size  Location     Type
  8521 ;;  multiplier      2   17[COMRAM] unsigned int 
  8522 ;;  multiplicand    2   19[COMRAM] unsigned int 
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;  product         2   21[COMRAM] unsigned int 
  8525 ;; Return value:  Size  Location     Type
  8526 ;;                  2   17[COMRAM] unsigned int 
  8527 ;; Registers used:
  8528 ;;		wreg, status,2, status,0, prodl, prodh
  8529 ;; Tracked objects:
  8530 ;;		On entry : 0/0
  8531 ;;		On exit  : 0/0
  8532 ;;		Unchanged: 0/0
  8533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8534 ;;      Params:         4       0       0       0       0       0       0
  8535 ;;      Locals:         2       0       0       0       0       0       0
  8536 ;;      Temps:          0       0       0       0       0       0       0
  8537 ;;      Totals:         6       0       0       0       0       0       0
  8538 ;;Total ram usage:        6 bytes
  8539 ;; Hardware stack levels used:    1
  8540 ;; Hardware stack levels required when called:    1
  8541 ;; This function calls:
  8542 ;;		Nothing
  8543 ;; This function is called by:
  8544 ;;		_sprintf
  8545 ;; This function uses a non-reentrant model
  8546 ;;
  8547                           
  8548                           	psect	text37
  8549  002B06                     __ptext37:
  8550                           	opt stack 0
  8551  002B06                     ___wmul:
  8552                           	opt stack 26
  8553                           
  8554                           ;incstack = 0
  8555  002B06  5012               	movf	___wmul@multiplier,w,c
  8556  002B08  0214               	mulwf	___wmul@multiplicand,c
  8557  002B0A  CFF3 F016          	movff	prodl,___wmul@product
  8558  002B0E  CFF4 F017          	movff	prodh,___wmul@product+1
  8559  002B12  5012               	movf	___wmul@multiplier,w,c
  8560  002B14  0215               	mulwf	___wmul@multiplicand+1,c
  8561  002B16  50F3               	movf	prodl,w,c
  8562  002B18  2617               	addwf	___wmul@product+1,f,c
  8563  002B1A  5013               	movf	___wmul@multiplier+1,w,c
  8564  002B1C  0214               	mulwf	___wmul@multiplicand,c
  8565  002B1E  50F3               	movf	prodl,w,c
  8566  002B20  2617               	addwf	___wmul@product+1,f,c
  8567  002B22  C016  F012         	movff	___wmul@product,?___wmul
  8568  002B26  C017  F013         	movff	___wmul@product+1,?___wmul+1
  8569  002B2A  0012               	return	
  8570  002B2C                     __end_of___wmul:
  8571                           	opt stack 0
  8572                           tblptru	equ	0xFF8
  8573                           tblptrh	equ	0xFF7
  8574                           tblptrl	equ	0xFF6
  8575                           tablat	equ	0xFF5
  8576                           prodh	equ	0xFF4
  8577                           prodl	equ	0xFF3
  8578                           intcon	equ	0xFF2
  8579                           postinc0	equ	0xFEE
  8580                           wreg	equ	0xFE8
  8581                           indf1	equ	0xFE7
  8582                           plusw1	equ	0xFE3
  8583                           fsr1h	equ	0xFE2
  8584                           fsr1l	equ	0xFE1
  8585                           indf2	equ	0xFDF
  8586                           postinc2	equ	0xFDE
  8587                           postdec2	equ	0xFDD
  8588                           plusw2	equ	0xFDB
  8589                           fsr2h	equ	0xFDA
  8590                           fsr2l	equ	0xFD9
  8591                           status	equ	0xFD8
  8592                           
  8593 ;; *************** function ___lwmod *****************
  8594 ;; Defined at:
  8595 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  8596 ;; Parameters:    Size  Location     Type
  8597 ;;  dividend        2   24[COMRAM] unsigned int 
  8598 ;;  divisor         2   26[COMRAM] unsigned int 
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;  counter         1   28[COMRAM] unsigned char 
  8601 ;; Return value:  Size  Location     Type
  8602 ;;                  2   24[COMRAM] unsigned int 
  8603 ;; Registers used:
  8604 ;;		wreg, status,2, status,0
  8605 ;; Tracked objects:
  8606 ;;		On entry : 0/0
  8607 ;;		On exit  : 0/0
  8608 ;;		Unchanged: 0/0
  8609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8610 ;;      Params:         4       0       0       0       0       0       0
  8611 ;;      Locals:         1       0       0       0       0       0       0
  8612 ;;      Temps:          0       0       0       0       0       0       0
  8613 ;;      Totals:         5       0       0       0       0       0       0
  8614 ;;Total ram usage:        5 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; Hardware stack levels required when called:    1
  8617 ;; This function calls:
  8618 ;;		Nothing
  8619 ;; This function is called by:
  8620 ;;		_sprintf
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           	psect	text38
  8625  002936                     __ptext38:
  8626                           	opt stack 0
  8627  002936                     ___lwmod:
  8628                           	opt stack 26
  8629                           
  8630                           ;incstack = 0
  8631  002936  501B               	movf	___lwmod@divisor,w,c
  8632  002938  101C               	iorwf	___lwmod@divisor+1,w,c
  8633  00293A  B4D8               	btfsc	status,2,c
  8634  00293C  D018               	goto	l979
  8635  00293E  0E01               	movlw	1
  8636  002940  6E1D               	movwf	___lwmod@counter,c
  8637  002942  D004               	goto	l3954
  8638  002944                     l3952:
  8639  002944  90D8               	bcf	status,0,c
  8640  002946  361B               	rlcf	___lwmod@divisor,f,c
  8641  002948  361C               	rlcf	___lwmod@divisor+1,f,c
  8642  00294A  2A1D               	incf	___lwmod@counter,f,c
  8643  00294C                     l3954:
  8644  00294C  AE1C               	btfss	___lwmod@divisor+1,7,c
  8645  00294E  D7FA               	goto	l3952
  8646  002950                     l3956:
  8647  002950  501B               	movf	___lwmod@divisor,w,c
  8648  002952  5C19               	subwf	___lwmod@dividend,w,c
  8649  002954  501C               	movf	___lwmod@divisor+1,w,c
  8650  002956  581A               	subwfb	___lwmod@dividend+1,w,c
  8651  002958  A0D8               	btfss	status,0,c
  8652  00295A  D004               	goto	l3960
  8653  00295C  501B               	movf	___lwmod@divisor,w,c
  8654  00295E  5E19               	subwf	___lwmod@dividend,f,c
  8655  002960  501C               	movf	___lwmod@divisor+1,w,c
  8656  002962  5A1A               	subwfb	___lwmod@dividend+1,f,c
  8657  002964                     l3960:
  8658  002964  90D8               	bcf	status,0,c
  8659  002966  321C               	rrcf	___lwmod@divisor+1,f,c
  8660  002968  321B               	rrcf	___lwmod@divisor,f,c
  8661  00296A  2E1D               	decfsz	___lwmod@counter,f,c
  8662  00296C  D7F1               	goto	l3956
  8663  00296E                     l979:
  8664  00296E  C019  F019         	movff	___lwmod@dividend,?___lwmod
  8665  002972  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  8666  002976  0012               	return		;funcret
  8667  002978                     __end_of___lwmod:
  8668                           	opt stack 0
  8669                           tblptru	equ	0xFF8
  8670                           tblptrh	equ	0xFF7
  8671                           tblptrl	equ	0xFF6
  8672                           tablat	equ	0xFF5
  8673                           prodh	equ	0xFF4
  8674                           prodl	equ	0xFF3
  8675                           intcon	equ	0xFF2
  8676                           postinc0	equ	0xFEE
  8677                           wreg	equ	0xFE8
  8678                           indf1	equ	0xFE7
  8679                           plusw1	equ	0xFE3
  8680                           fsr1h	equ	0xFE2
  8681                           fsr1l	equ	0xFE1
  8682                           indf2	equ	0xFDF
  8683                           postinc2	equ	0xFDE
  8684                           postdec2	equ	0xFDD
  8685                           plusw2	equ	0xFDB
  8686                           fsr2h	equ	0xFDA
  8687                           fsr2l	equ	0xFD9
  8688                           status	equ	0xFD8
  8689                           
  8690 ;; *************** function ___lwdiv *****************
  8691 ;; Defined at:
  8692 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;  dividend        2   17[COMRAM] unsigned int 
  8695 ;;  divisor         2   19[COMRAM] unsigned int 
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;  quotient        2   22[COMRAM] unsigned int 
  8698 ;;  counter         1   21[COMRAM] unsigned char 
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  2   17[COMRAM] unsigned int 
  8701 ;; Registers used:
  8702 ;;		wreg, status,2, status,0
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8708 ;;      Params:         4       0       0       0       0       0       0
  8709 ;;      Locals:         3       0       0       0       0       0       0
  8710 ;;      Temps:          0       0       0       0       0       0       0
  8711 ;;      Totals:         7       0       0       0       0       0       0
  8712 ;;Total ram usage:        7 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    1
  8715 ;; This function calls:
  8716 ;;		Nothing
  8717 ;; This function is called by:
  8718 ;;		_sprintf
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           	psect	text39
  8723  0028E4                     __ptext39:
  8724                           	opt stack 0
  8725  0028E4                     ___lwdiv:
  8726                           	opt stack 26
  8727                           
  8728                           ;incstack = 0
  8729  0028E4  0E00               	movlw	0
  8730  0028E6  6E18               	movwf	___lwdiv@quotient+1,c
  8731  0028E8  0E00               	movlw	0
  8732  0028EA  6E17               	movwf	___lwdiv@quotient,c
  8733  0028EC  5014               	movf	___lwdiv@divisor,w,c
  8734  0028EE  1015               	iorwf	___lwdiv@divisor+1,w,c
  8735  0028F0  B4D8               	btfsc	status,2,c
  8736  0028F2  D01C               	goto	l969
  8737  0028F4  0E01               	movlw	1
  8738  0028F6  6E16               	movwf	___lwdiv@counter,c
  8739  0028F8  D004               	goto	l3934
  8740  0028FA                     l3932:
  8741  0028FA  90D8               	bcf	status,0,c
  8742  0028FC  3614               	rlcf	___lwdiv@divisor,f,c
  8743  0028FE  3615               	rlcf	___lwdiv@divisor+1,f,c
  8744  002900  2A16               	incf	___lwdiv@counter,f,c
  8745  002902                     l3934:
  8746  002902  AE15               	btfss	___lwdiv@divisor+1,7,c
  8747  002904  D7FA               	goto	l3932
  8748  002906                     l3936:
  8749  002906  90D8               	bcf	status,0,c
  8750  002908  3617               	rlcf	___lwdiv@quotient,f,c
  8751  00290A  3618               	rlcf	___lwdiv@quotient+1,f,c
  8752  00290C  5014               	movf	___lwdiv@divisor,w,c
  8753  00290E  5C12               	subwf	___lwdiv@dividend,w,c
  8754  002910  5015               	movf	___lwdiv@divisor+1,w,c
  8755  002912  5813               	subwfb	___lwdiv@dividend+1,w,c
  8756  002914  A0D8               	btfss	status,0,c
  8757  002916  D005               	goto	l3944
  8758  002918  5014               	movf	___lwdiv@divisor,w,c
  8759  00291A  5E12               	subwf	___lwdiv@dividend,f,c
  8760  00291C  5015               	movf	___lwdiv@divisor+1,w,c
  8761  00291E  5A13               	subwfb	___lwdiv@dividend+1,f,c
  8762  002920  8017               	bsf	___lwdiv@quotient,0,c
  8763  002922                     l3944:
  8764  002922  90D8               	bcf	status,0,c
  8765  002924  3215               	rrcf	___lwdiv@divisor+1,f,c
  8766  002926  3214               	rrcf	___lwdiv@divisor,f,c
  8767  002928  2E16               	decfsz	___lwdiv@counter,f,c
  8768  00292A  D7ED               	goto	l3936
  8769  00292C                     l969:
  8770  00292C  C017  F012         	movff	___lwdiv@quotient,?___lwdiv
  8771  002930  C018  F013         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8772  002934  0012               	return		;funcret
  8773  002936                     __end_of___lwdiv:
  8774                           	opt stack 0
  8775                           tblptru	equ	0xFF8
  8776                           tblptrh	equ	0xFF7
  8777                           tblptrl	equ	0xFF6
  8778                           tablat	equ	0xFF5
  8779                           prodh	equ	0xFF4
  8780                           prodl	equ	0xFF3
  8781                           intcon	equ	0xFF2
  8782                           postinc0	equ	0xFEE
  8783                           wreg	equ	0xFE8
  8784                           indf1	equ	0xFE7
  8785                           plusw1	equ	0xFE3
  8786                           fsr1h	equ	0xFE2
  8787                           fsr1l	equ	0xFE1
  8788                           indf2	equ	0xFDF
  8789                           postinc2	equ	0xFDE
  8790                           postdec2	equ	0xFDD
  8791                           plusw2	equ	0xFDB
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796 ;; *************** function _ESP8266_Cmd *****************
  8797 ;; Defined at:
  8798 ;;		line 63 in file "harwave/UART.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;  cmd             2   36[COMRAM] PTR unsigned char 
  8801 ;;		 -> STR_59(14), STR_57(15), STR_53(11), STR_49(25), 
  8802 ;;		 -> STR_47(23), STR_45(22), STR_43(14), STR_41(15), 
  8803 ;;		 -> STR_39(14), STR_33(13), STR_30(13), ESP8266_Link_Server@cCmd(120), 
  8804 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_15(14), STR_12(14), 
  8805 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@tem(12), 
  8806 ;;		 -> ESP8266_SendString@cStr(20), 
  8807 ;;  reply1          2   38[COMRAM] PTR unsigned char 
  8808 ;;		 -> STR_60(3), STR_58(3), STR_54(3), STR_50(3), 
  8809 ;;		 -> STR_48(3), STR_46(3), STR_44(3), STR_42(3), 
  8810 ;;		 -> STR_40(3), STR_34(10), STR_31(10), STR_28(8), 
  8811 ;;		 -> STR_21(3), STR_19(3), STR_16(3), STR_13(3), 
  8812 ;;		 -> STR_10(3), STR_7(3), STR_5(3), STR_3(8), 
  8813 ;;		 -> STR_2(3), 
  8814 ;;  reply2          2   40[COMRAM] PTR unsigned char 
  8815 ;;		 -> STR_35(3), STR_32(3), STR_29(3), STR_17(10), 
  8816 ;;		 -> STR_14(10), STR_11(10), STR_8(6), NULL(0), 
  8817 ;;  waittime        2   42[COMRAM] unsigned int 
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;		None
  8820 ;; Return value:  Size  Location     Type
  8821 ;;                  1    wreg      unsigned char 
  8822 ;; Registers used:
  8823 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8824 ;; Tracked objects:
  8825 ;;		On entry : 0/0
  8826 ;;		On exit  : 0/0
  8827 ;;		Unchanged: 0/0
  8828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8829 ;;      Params:         8       0       0       0       0       0       0
  8830 ;;      Locals:         1       0       0       0       0       0       0
  8831 ;;      Temps:          0       0       0       0       0       0       0
  8832 ;;      Totals:         9       0       0       0       0       0       0
  8833 ;;Total ram usage:        9 bytes
  8834 ;; Hardware stack levels used:    1
  8835 ;; Hardware stack levels required when called:    3
  8836 ;; This function calls:
  8837 ;;		_ESP8266_Uart
  8838 ;;		_delay_ms
  8839 ;;		_strstr
  8840 ;; This function is called by:
  8841 ;;		_ESP8266_SendString
  8842 ;;		_ESP8266_AT_Test
  8843 ;;		_ESP8266_Rst
  8844 ;;		_ESP8266_Net_Mode_Choose
  8845 ;;		_ESP8266_BuildAP
  8846 ;;		_AP_MODE
  8847 ;;		_ESP8266_Server
  8848 ;;		_ESP8266_JoinAP
  8849 ;;		_ESP8266_Link_Server
  8850 ;;		_STA_MODE
  8851 ;;		_set_baudrate
  8852 ;;		_ESP8266_client
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           	psect	text40
  8857  00237C                     __ptext40:
  8858                           	opt stack 0
  8859  00237C                     _ESP8266_Cmd:
  8860                           	opt stack 25
  8861                           
  8862                           ;UART.c: 65: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  8863                           
  8864                           ;incstack = 0
  8865  00237C  0101               	movlb	1	; () banked
  8866  00237E  91DA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  8867  002380  93DA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  8868  002382  95DA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  8869  002384  97DA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  8870  002386  99DA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  8871  002388  9BDA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  8872  00238A  9DDA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  8873                           
  8874                           ; BSR set to: 1
  8875                           ;UART.c: 67: ESP8266_Uart (cmd);
  8876  00238C  C025  F012         	movff	ESP8266_Cmd@cmd,ESP8266_Uart@cmd
  8877  002390  C026  F013         	movff	ESP8266_Cmd@cmd+1,ESP8266_Uart@cmd+1
  8878  002394  ECD8  F013         	call	_ESP8266_Uart	;wreg free
  8879                           
  8880                           ;UART.c: 69: if ( ( reply1 == 0 ) && ( reply2 == 0 ) )
  8881  002398  5027               	movf	ESP8266_Cmd@reply1,w,c
  8882  00239A  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  8883  00239C  A4D8               	btfss	status,2,c
  8884  00239E  D006               	goto	l3842
  8885  0023A0  5029               	movf	ESP8266_Cmd@reply2,w,c
  8886  0023A2  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  8887  0023A4  A4D8               	btfss	status,2,c
  8888  0023A6  D002               	goto	l3842
  8889                           
  8890                           ;UART.c: 70: return 1;
  8891  0023A8  0E01               	movlw	1
  8892  0023AA  0012               	return	
  8893  0023AC                     l3842:
  8894                           
  8895                           ;UART.c: 72: delay_ms ( waittime );
  8896  0023AC  C02B  F014         	movff	ESP8266_Cmd@waittime,delay_ms@ms
  8897  0023B0  C02C  F015         	movff	ESP8266_Cmd@waittime+1,delay_ms@ms+1
  8898  0023B4  ECDA  F015         	call	_delay_ms	;wreg free
  8899                           
  8900                           ;UART.c: 74: if ( ( reply1 != 0 ) && ( reply2 != 0 ) )
  8901  0023B8  5027               	movf	ESP8266_Cmd@reply1,w,c
  8902  0023BA  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  8903  0023BC  B4D8               	btfsc	status,2,c
  8904  0023BE  D022               	goto	l3860
  8905  0023C0  5029               	movf	ESP8266_Cmd@reply2,w,c
  8906  0023C2  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  8907  0023C4  B4D8               	btfsc	status,2,c
  8908  0023C6  D01E               	goto	l3860
  8909                           
  8910                           ;UART.c: 75: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) || (u8
      +                          ) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  8911  0023C8  0E01               	movlw	1
  8912  0023CA  6E2D               	movwf	_ESP8266_Cmd$1046,c
  8913  0023CC  0EA8               	movlw	low _strEsp8266_Fram_Record
  8914  0023CE  6E21               	movwf	strstr@s1,c
  8915  0023D0  0E01               	movlw	high _strEsp8266_Fram_Record
  8916  0023D2  6E22               	movwf	strstr@s1+1,c
  8917  0023D4  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  8918  0023D8  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  8919  0023DC  EC55  F013         	call	_strstr	;wreg free
  8920  0023E0  6621               	tstfsz	?_strstr,c
  8921  0023E2  D00E               	goto	l206
  8922  0023E4  0EA8               	movlw	low _strEsp8266_Fram_Record
  8923  0023E6  6E21               	movwf	strstr@s1,c
  8924  0023E8  0E01               	movlw	high _strEsp8266_Fram_Record
  8925  0023EA  6E22               	movwf	strstr@s1+1,c
  8926  0023EC  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  8927  0023F0  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  8928  0023F4  EC55  F013         	call	_strstr	;wreg free
  8929  0023F8  6621               	tstfsz	?_strstr,c
  8930  0023FA  D002               	goto	l206
  8931  0023FC  0E00               	movlw	0
  8932  0023FE  6E2D               	movwf	_ESP8266_Cmd$1046,c
  8933  002400                     l206:
  8934  002400  502D               	movf	_ESP8266_Cmd$1046,w,c
  8935  002402  0012               	return	
  8936  002404                     l3860:
  8937                           
  8938                           ;UART.c: 76: else if ( reply1 != 0 )
  8939  002404  5027               	movf	ESP8266_Cmd@reply1,w,c
  8940  002406  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  8941  002408  B4D8               	btfsc	status,2,c
  8942  00240A  D00C               	goto	l3868
  8943                           
  8944                           ;UART.c: 77: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) );
  8945  00240C  0EA8               	movlw	low _strEsp8266_Fram_Record
  8946  00240E  6E21               	movwf	strstr@s1,c
  8947  002410  0E01               	movlw	high _strEsp8266_Fram_Record
  8948  002412  6E22               	movwf	strstr@s1+1,c
  8949  002414  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  8950  002418  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  8951  00241C  EC55  F013         	call	_strstr	;wreg free
  8952  002420  5021               	movf	?_strstr,w,c
  8953  002422  0012               	return	
  8954  002424                     l3868:
  8955                           
  8956                           ;UART.c: 79: else
  8957                           ;UART.c: 80: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  8958  002424  0EA8               	movlw	low _strEsp8266_Fram_Record
  8959  002426  6E21               	movwf	strstr@s1,c
  8960  002428  0E01               	movlw	high _strEsp8266_Fram_Record
  8961  00242A  6E22               	movwf	strstr@s1+1,c
  8962  00242C  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  8963  002430  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  8964  002434  EC55  F013         	call	_strstr	;wreg free
  8965  002438  5021               	movf	?_strstr,w,c
  8966  00243A  0012               	return	
  8967  00243C                     __end_of_ESP8266_Cmd:
  8968                           	opt stack 0
  8969                           tblptru	equ	0xFF8
  8970                           tblptrh	equ	0xFF7
  8971                           tblptrl	equ	0xFF6
  8972                           tablat	equ	0xFF5
  8973                           prodh	equ	0xFF4
  8974                           prodl	equ	0xFF3
  8975                           intcon	equ	0xFF2
  8976                           postinc0	equ	0xFEE
  8977                           wreg	equ	0xFE8
  8978                           indf1	equ	0xFE7
  8979                           plusw1	equ	0xFE3
  8980                           fsr1h	equ	0xFE2
  8981                           fsr1l	equ	0xFE1
  8982                           indf2	equ	0xFDF
  8983                           postinc2	equ	0xFDE
  8984                           postdec2	equ	0xFDD
  8985                           plusw2	equ	0xFDB
  8986                           fsr2h	equ	0xFDA
  8987                           fsr2l	equ	0xFD9
  8988                           status	equ	0xFD8
  8989                           
  8990 ;; *************** function _strstr *****************
  8991 ;; Defined at:
  8992 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strstr.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;  s1              2   32[COMRAM] PTR const unsigned char 
  8995 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8996 ;;  s2              2   34[COMRAM] PTR const unsigned char 
  8997 ;;		 -> STR_63(10), STR_60(3), STR_58(3), STR_54(3), 
  8998 ;;		 -> STR_52(10), STR_51(15), STR_50(3), STR_48(3), 
  8999 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_40(3), 
  9000 ;;		 -> STR_35(3), STR_34(10), STR_32(3), STR_31(10), 
  9001 ;;		 -> STR_29(3), STR_28(8), STR_21(3), STR_19(3), 
  9002 ;;		 -> STR_17(10), STR_16(3), STR_14(10), STR_13(3), 
  9003 ;;		 -> STR_11(10), STR_10(3), STR_8(6), STR_7(3), 
  9004 ;;		 -> STR_5(3), STR_3(8), STR_2(3), NULL(0), 
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;		None
  9007 ;; Return value:  Size  Location     Type
  9008 ;;                  2   32[COMRAM] PTR unsigned char 
  9009 ;; Registers used:
  9010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9016 ;;      Params:         4       0       0       0       0       0       0
  9017 ;;      Locals:         0       0       0       0       0       0       0
  9018 ;;      Temps:          0       0       0       0       0       0       0
  9019 ;;      Totals:         4       0       0       0       0       0       0
  9020 ;;Total ram usage:        4 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; Hardware stack levels required when called:    2
  9023 ;; This function calls:
  9024 ;;		_strchr
  9025 ;;		_strlen
  9026 ;;		_strncmp
  9027 ;; This function is called by:
  9028 ;;		_ESP8266_Cmd
  9029 ;;		_main
  9030 ;;		_detect_connect
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           	psect	text41
  9035  0026AA                     __ptext41:
  9036                           	opt stack 0
  9037  0026AA                     _strstr:
  9038                           	opt stack 28
  9039                           
  9040                           ;incstack = 0
  9041  0026AA  D031               	goto	l3822
  9042  0026AC                     l3814:
  9043  0026AC  C021  F018         	movff	strstr@s1,strncmp@s1
  9044  0026B0  C022  F019         	movff	strstr@s1+1,strncmp@s1+1
  9045  0026B4  C023  F01A         	movff	strstr@s2,strncmp@s2
  9046  0026B8  C024  F01B         	movff	strstr@s2+1,strncmp@s2+1
  9047  0026BC  C023  F012         	movff	strstr@s2,strlen@s
  9048  0026C0  C024  F013         	movff	strstr@s2+1,strlen@s+1
  9049  0026C4  ECDC  F014         	call	_strlen	;wreg free
  9050  0026C8  C012  F01C         	movff	?_strlen,strncmp@len
  9051  0026CC  C013  F01D         	movff	?_strlen+1,strncmp@len+1
  9052  0026D0  EC97  F013         	call	_strncmp	;wreg free
  9053  0026D4  5018               	movf	?_strncmp,w,c
  9054  0026D6  1019               	iorwf	?_strncmp+1,w,c
  9055  0026D8  A4D8               	btfss	status,2,c
  9056  0026DA  D005               	goto	l3820
  9057  0026DC  C021  F021         	movff	strstr@s1,?_strstr
  9058  0026E0  C022  F022         	movff	strstr@s1+1,?_strstr+1
  9059  0026E4  0012               	return	
  9060  0026E6                     l3820:
  9061  0026E6  0E01               	movlw	1
  9062  0026E8  2421               	addwf	strstr@s1,w,c
  9063  0026EA  6E12               	movwf	strchr@ptr,c
  9064  0026EC  0E00               	movlw	0
  9065  0026EE  2022               	addwfc	strstr@s1+1,w,c
  9066  0026F0  6E13               	movwf	strchr@ptr+1,c
  9067  0026F2  C023  FFF6         	movff	strstr@s2,tblptrl
  9068  0026F6  C024  FFF7         	movff	strstr@s2+1,tblptrh
  9069  0026FA                     	if	0	;tblptru may be non-zero
  9070  0026FA                     	endif
  9071  0026FA                     	if	0	;tblptru may be non-zero
  9072  0026FA                     	endif
  9073  0026FA  0008               	tblrd		*
  9074  0026FC  50F5               	movf	tablat,w,c
  9075  0026FE  6E14               	movwf	strchr@chr,c
  9076  002700  6A15               	clrf	strchr@chr+1,c
  9077  002702  ECFB  F014         	call	_strchr	;wreg free
  9078  002706  C012  F021         	movff	?_strchr,strstr@s1
  9079  00270A  C013  F022         	movff	?_strchr+1,strstr@s1+1
  9080  00270E                     l3822:
  9081  00270E  5021               	movf	strstr@s1,w,c
  9082  002710  1022               	iorwf	strstr@s1+1,w,c
  9083  002712  B4D8               	btfsc	status,2,c
  9084  002714  D007               	goto	l3826
  9085  002716  C021  FFD9         	movff	strstr@s1,fsr2l
  9086  00271A  C022  FFDA         	movff	strstr@s1+1,fsr2h
  9087  00271E  50DF               	movf	indf2,w,c
  9088  002720  A4D8               	btfss	status,2,c
  9089  002722  D7C4               	goto	l3814
  9090  002724                     l3826:
  9091  002724  0E00               	movlw	0
  9092  002726  6E21               	movwf	?_strstr,c
  9093  002728  0E00               	movlw	0
  9094  00272A  6E22               	movwf	?_strstr+1,c
  9095  00272C  0012               	return	
  9096  00272E                     __end_of_strstr:
  9097                           	opt stack 0
  9098                           tblptru	equ	0xFF8
  9099                           tblptrh	equ	0xFF7
  9100                           tblptrl	equ	0xFF6
  9101                           tablat	equ	0xFF5
  9102                           prodh	equ	0xFF4
  9103                           prodl	equ	0xFF3
  9104                           intcon	equ	0xFF2
  9105                           postinc0	equ	0xFEE
  9106                           wreg	equ	0xFE8
  9107                           indf1	equ	0xFE7
  9108                           plusw1	equ	0xFE3
  9109                           fsr1h	equ	0xFE2
  9110                           fsr1l	equ	0xFE1
  9111                           indf2	equ	0xFDF
  9112                           postinc2	equ	0xFDE
  9113                           postdec2	equ	0xFDD
  9114                           plusw2	equ	0xFDB
  9115                           fsr2h	equ	0xFDA
  9116                           fsr2l	equ	0xFD9
  9117                           status	equ	0xFD8
  9118                           
  9119 ;; *************** function _strncmp *****************
  9120 ;; Defined at:
  9121 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  9122 ;; Parameters:    Size  Location     Type
  9123 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  9124 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  9125 ;;  s2              2   25[COMRAM] PTR const unsigned char 
  9126 ;;		 -> STR_63(10), STR_60(3), STR_58(3), STR_54(3), 
  9127 ;;		 -> STR_52(10), STR_51(15), STR_50(3), STR_48(3), 
  9128 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_40(3), 
  9129 ;;		 -> STR_35(3), STR_34(10), STR_32(3), STR_31(10), 
  9130 ;;		 -> STR_29(3), STR_28(8), STR_21(3), STR_19(3), 
  9131 ;;		 -> STR_17(10), STR_16(3), STR_14(10), STR_13(3), 
  9132 ;;		 -> STR_11(10), STR_10(3), STR_8(6), STR_7(3), 
  9133 ;;		 -> STR_5(3), STR_3(8), STR_2(3), NULL(0), 
  9134 ;;  len             2   27[COMRAM] unsigned int 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;		None
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  2   23[COMRAM] int 
  9139 ;; Registers used:
  9140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9146 ;;      Params:         6       0       0       0       0       0       0
  9147 ;;      Locals:         0       0       0       0       0       0       0
  9148 ;;      Temps:          3       0       0       0       0       0       0
  9149 ;;      Totals:         9       0       0       0       0       0       0
  9150 ;;Total ram usage:        9 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    1
  9153 ;; This function calls:
  9154 ;;		Nothing
  9155 ;; This function is called by:
  9156 ;;		_strstr
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           	psect	text42
  9161  00272E                     __ptext42:
  9162                           	opt stack 0
  9163  00272E                     _strncmp:
  9164                           	opt stack 28
  9165                           
  9166                           ;incstack = 0
  9167  00272E  D033               	goto	l3778
  9168  002730                     l3768:
  9169  002730  C018  FFD9         	movff	strncmp@s1,fsr2l
  9170  002734  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  9171  002738  50DF               	movf	indf2,w,c
  9172  00273A  B4D8               	btfsc	status,2,c
  9173  00273C  D00F               	goto	l3772
  9174  00273E  C018  FFD9         	movff	strncmp@s1,fsr2l
  9175  002742  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  9176  002746  50DF               	movf	indf2,w,c
  9177  002748  6E1E               	movwf	??_strncmp& (0+255),c
  9178  00274A  C01A  FFF6         	movff	strncmp@s2,tblptrl
  9179  00274E  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  9180  002752                     	if	0	;tblptru may be non-zero
  9181  002752                     	endif
  9182  002752                     	if	0	;tblptru may be non-zero
  9183  002752                     	endif
  9184  002752  0008               	tblrd		*
  9185  002754  50F5               	movf	tablat,w,c
  9186  002756  181E               	xorwf	??_strncmp,w,c
  9187  002758  B4D8               	btfsc	status,2,c
  9188  00275A  D019               	goto	l3776
  9189  00275C                     l3772:
  9190  00275C  C01A  FFF6         	movff	strncmp@s2,tblptrl
  9191  002760  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  9192  002764                     	if	0	;tblptru may be non-zero
  9193  002764                     	endif
  9194  002764                     	if	0	;tblptru may be non-zero
  9195  002764                     	endif
  9196  002764  0008               	tblrd		*
  9197  002766  50F5               	movf	tablat,w,c
  9198  002768  6E1E               	movwf	??_strncmp& (0+255),c
  9199  00276A  6A1F               	clrf	(??_strncmp+1)& (0+255),c
  9200  00276C  1E1E               	comf	??_strncmp,f,c
  9201  00276E  1E1F               	comf	??_strncmp+1,f,c
  9202  002770  4A1E               	infsnz	??_strncmp,f,c
  9203  002772  2A1F               	incf	??_strncmp+1,f,c
  9204  002774  C018  FFD9         	movff	strncmp@s1,fsr2l
  9205  002778  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  9206  00277C  50DF               	movf	indf2,w,c
  9207  00277E  6E20               	movwf	(??_strncmp+2)& (0+255),c
  9208  002780  5020               	movf	??_strncmp+2,w,c
  9209  002782  241E               	addwf	??_strncmp,w,c
  9210  002784  6E18               	movwf	?_strncmp,c
  9211  002786  0E00               	movlw	0
  9212  002788  201F               	addwfc	??_strncmp+1,w,c
  9213  00278A  6E19               	movwf	?_strncmp+1,c
  9214  00278C  0012               	return	
  9215  00278E                     l3776:
  9216  00278E  4A18               	infsnz	strncmp@s1,f,c
  9217  002790  2A19               	incf	strncmp@s1+1,f,c
  9218  002792  4A1A               	infsnz	strncmp@s2,f,c
  9219  002794  2A1B               	incf	strncmp@s2+1,f,c
  9220  002796                     l3778:
  9221  002796  061C               	decf	strncmp@len,f,c
  9222  002798  A0D8               	btfss	status,0,c
  9223  00279A  061D               	decf	strncmp@len+1,f,c
  9224  00279C  281C               	incf	strncmp@len,w,c
  9225  00279E  E1C8               	bnz	l3768
  9226  0027A0  281D               	incf	strncmp@len+1,w,c
  9227  0027A2  A4D8               	btfss	status,2,c
  9228  0027A4  D7C5               	goto	l3768
  9229  0027A6  0E00               	movlw	0
  9230  0027A8  6E19               	movwf	?_strncmp+1,c
  9231  0027AA  0E00               	movlw	0
  9232  0027AC  6E18               	movwf	?_strncmp,c
  9233  0027AE  0012               	return	
  9234  0027B0                     __end_of_strncmp:
  9235                           	opt stack 0
  9236                           tblptru	equ	0xFF8
  9237                           tblptrh	equ	0xFF7
  9238                           tblptrl	equ	0xFF6
  9239                           tablat	equ	0xFF5
  9240                           prodh	equ	0xFF4
  9241                           prodl	equ	0xFF3
  9242                           intcon	equ	0xFF2
  9243                           postinc0	equ	0xFEE
  9244                           wreg	equ	0xFE8
  9245                           indf1	equ	0xFE7
  9246                           plusw1	equ	0xFE3
  9247                           fsr1h	equ	0xFE2
  9248                           fsr1l	equ	0xFE1
  9249                           indf2	equ	0xFDF
  9250                           postinc2	equ	0xFDE
  9251                           postdec2	equ	0xFDD
  9252                           plusw2	equ	0xFDB
  9253                           fsr2h	equ	0xFDA
  9254                           fsr2l	equ	0xFD9
  9255                           status	equ	0xFD8
  9256                           
  9257 ;; *************** function _strlen *****************
  9258 ;; Defined at:
  9259 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  9260 ;; Parameters:    Size  Location     Type
  9261 ;;  s               2   17[COMRAM] PTR const unsigned char 
  9262 ;;		 -> STR_63(10), STR_60(3), STR_58(3), STR_54(3), 
  9263 ;;		 -> STR_52(10), STR_51(15), STR_50(3), STR_48(3), 
  9264 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_40(3), 
  9265 ;;		 -> STR_35(3), STR_34(10), STR_32(3), STR_31(10), 
  9266 ;;		 -> STR_29(3), STR_28(8), STR_21(3), STR_19(3), 
  9267 ;;		 -> STR_17(10), STR_16(3), STR_14(10), STR_13(3), 
  9268 ;;		 -> STR_11(10), STR_10(3), STR_8(6), STR_7(3), 
  9269 ;;		 -> STR_5(3), STR_3(8), STR_2(3), NULL(0), 
  9270 ;; Auto vars:     Size  Location     Type
  9271 ;;  cp              2   21[COMRAM] PTR const unsigned char 
  9272 ;;		 -> STR_63(10), STR_60(3), STR_58(3), STR_54(3), 
  9273 ;;		 -> STR_52(10), STR_51(15), STR_50(3), STR_48(3), 
  9274 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_40(3), 
  9275 ;;		 -> STR_35(3), STR_34(10), STR_32(3), STR_31(10), 
  9276 ;;		 -> STR_29(3), STR_28(8), STR_21(3), STR_19(3), 
  9277 ;;		 -> STR_17(10), STR_16(3), STR_14(10), STR_13(3), 
  9278 ;;		 -> STR_11(10), STR_10(3), STR_8(6), STR_7(3), 
  9279 ;;		 -> STR_5(3), STR_3(8), STR_2(3), NULL(0), 
  9280 ;; Return value:  Size  Location     Type
  9281 ;;                  2   17[COMRAM] unsigned int 
  9282 ;; Registers used:
  9283 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9289 ;;      Params:         2       0       0       0       0       0       0
  9290 ;;      Locals:         2       0       0       0       0       0       0
  9291 ;;      Temps:          2       0       0       0       0       0       0
  9292 ;;      Totals:         6       0       0       0       0       0       0
  9293 ;;Total ram usage:        6 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; Hardware stack levels required when called:    1
  9296 ;; This function calls:
  9297 ;;		Nothing
  9298 ;; This function is called by:
  9299 ;;		_strstr
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           	psect	text43
  9304  0029B8                     __ptext43:
  9305                           	opt stack 0
  9306  0029B8                     _strlen:
  9307                           	opt stack 28
  9308                           
  9309                           ;incstack = 0
  9310  0029B8  C012  F016         	movff	strlen@s,strlen@cp
  9311  0029BC  C013  F017         	movff	strlen@s+1,strlen@cp+1
  9312  0029C0  D002               	goto	l3760
  9313  0029C2                     l3758:
  9314  0029C2  4A16               	infsnz	strlen@cp,f,c
  9315  0029C4  2A17               	incf	strlen@cp+1,f,c
  9316  0029C6                     l3760:
  9317  0029C6  C016  FFF6         	movff	strlen@cp,tblptrl
  9318  0029CA  C017  FFF7         	movff	strlen@cp+1,tblptrh
  9319  0029CE                     	if	0	;tblptru may be non-zero
  9320  0029CE                     	endif
  9321  0029CE                     	if	0	;tblptru may be non-zero
  9322  0029CE                     	endif
  9323  0029CE  0008               	tblrd		*
  9324  0029D0  50F5               	movf	tablat,w,c
  9325  0029D2  0900               	iorlw	0
  9326  0029D4  A4D8               	btfss	status,2,c
  9327  0029D6  D7F5               	goto	l3758
  9328  0029D8  C012  F014         	movff	strlen@s,??_strlen
  9329  0029DC  C013  F015         	movff	strlen@s+1,??_strlen+1
  9330  0029E0  1E14               	comf	??_strlen,f,c
  9331  0029E2  1E15               	comf	??_strlen+1,f,c
  9332  0029E4  4A14               	infsnz	??_strlen,f,c
  9333  0029E6  2A15               	incf	??_strlen+1,f,c
  9334  0029E8  5016               	movf	strlen@cp,w,c
  9335  0029EA  2414               	addwf	??_strlen,w,c
  9336  0029EC  6E12               	movwf	?_strlen,c
  9337  0029EE  5017               	movf	strlen@cp+1,w,c
  9338  0029F0  2015               	addwfc	??_strlen+1,w,c
  9339  0029F2  6E13               	movwf	?_strlen+1,c
  9340  0029F4  0012               	return	
  9341  0029F6                     __end_of_strlen:
  9342                           	opt stack 0
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           intcon	equ	0xFF2
  9350                           postinc0	equ	0xFEE
  9351                           wreg	equ	0xFE8
  9352                           indf1	equ	0xFE7
  9353                           plusw1	equ	0xFE3
  9354                           fsr1h	equ	0xFE2
  9355                           fsr1l	equ	0xFE1
  9356                           indf2	equ	0xFDF
  9357                           postinc2	equ	0xFDE
  9358                           postdec2	equ	0xFDD
  9359                           plusw2	equ	0xFDB
  9360                           fsr2h	equ	0xFDA
  9361                           fsr2l	equ	0xFD9
  9362                           status	equ	0xFD8
  9363                           
  9364 ;; *************** function _strchr *****************
  9365 ;; Defined at:
  9366 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strchr.c"
  9367 ;; Parameters:    Size  Location     Type
  9368 ;;  ptr             2   17[COMRAM] PTR const unsigned char 
  9369 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  9370 ;;  chr             2   19[COMRAM] int 
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;		None
  9373 ;; Return value:  Size  Location     Type
  9374 ;;                  2   17[COMRAM] PTR unsigned char 
  9375 ;; Registers used:
  9376 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9377 ;; Tracked objects:
  9378 ;;		On entry : 0/0
  9379 ;;		On exit  : 0/0
  9380 ;;		Unchanged: 0/0
  9381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9382 ;;      Params:         4       0       0       0       0       0       0
  9383 ;;      Locals:         0       0       0       0       0       0       0
  9384 ;;      Temps:          1       0       0       0       0       0       0
  9385 ;;      Totals:         5       0       0       0       0       0       0
  9386 ;;Total ram usage:        5 bytes
  9387 ;; Hardware stack levels used:    1
  9388 ;; Hardware stack levels required when called:    1
  9389 ;; This function calls:
  9390 ;;		Nothing
  9391 ;; This function is called by:
  9392 ;;		_strstr
  9393 ;; This function uses a non-reentrant model
  9394 ;;
  9395                           
  9396                           	psect	text44
  9397  0029F6                     __ptext44:
  9398                           	opt stack 0
  9399  0029F6                     _strchr:
  9400                           	opt stack 28
  9401  0029F6  C012  FFD9         	movff	strchr@ptr,fsr2l
  9402  0029FA  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  9403  0029FE  5014               	movf	strchr@chr,w,c
  9404  002A00  18DE               	xorwf	postinc2,w,c
  9405  002A02  A4D8               	btfss	status,2,c
  9406  002A04  D005               	goto	l3790
  9407  002A06  C012  F012         	movff	strchr@ptr,?_strchr
  9408  002A0A  C013  F013         	movff	strchr@ptr+1,?_strchr+1
  9409  002A0E  0012               	return	
  9410  002A10                     l3790:
  9411  002A10  C012  FFD9         	movff	strchr@ptr,fsr2l
  9412  002A14  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  9413  002A18  4A12               	infsnz	strchr@ptr,f,c
  9414  002A1A  2A13               	incf	strchr@ptr+1,f,c
  9415  002A1C  50DF               	movf	indf2,w,c
  9416  002A1E  A4D8               	btfss	status,2,c
  9417  002A20  D7EA               	goto	l3784
  9418  002A22  0E00               	movlw	0
  9419  002A24  6E12               	movwf	?_strchr,c
  9420  002A26  0E00               	movlw	0
  9421  002A28  6E13               	movwf	?_strchr+1,c
  9422  002A2A  0012               	return	
  9423  002A2C                     __end_of_strchr:
  9424                           	opt stack 0
  9425                           tblptru	equ	0xFF8
  9426                           tblptrh	equ	0xFF7
  9427                           tblptrl	equ	0xFF6
  9428                           tablat	equ	0xFF5
  9429                           prodh	equ	0xFF4
  9430                           prodl	equ	0xFF3
  9431                           intcon	equ	0xFF2
  9432                           postinc0	equ	0xFEE
  9433                           wreg	equ	0xFE8
  9434                           indf1	equ	0xFE7
  9435                           plusw1	equ	0xFE3
  9436                           fsr1h	equ	0xFE2
  9437                           fsr1l	equ	0xFE1
  9438                           indf2	equ	0xFDF
  9439                           postinc2	equ	0xFDE
  9440                           postdec2	equ	0xFDD
  9441                           plusw2	equ	0xFDB
  9442                           fsr2h	equ	0xFDA
  9443                           fsr2l	equ	0xFD9
  9444                           status	equ	0xFD8
  9445                           
  9446 ;; *************** function _delay_ms *****************
  9447 ;; Defined at:
  9448 ;;		line 4 in file "harwave/delay.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;  ms              2   19[COMRAM] int 
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;		None
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      void 
  9455 ;; Registers used:
  9456 ;;		wreg, status,2, status,0, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9462 ;;      Params:         2       0       0       0       0       0       0
  9463 ;;      Locals:         0       0       0       0       0       0       0
  9464 ;;      Temps:          0       0       0       0       0       0       0
  9465 ;;      Totals:         2       0       0       0       0       0       0
  9466 ;;Total ram usage:        2 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    2
  9469 ;; This function calls:
  9470 ;;		_Delay10KTCYx
  9471 ;; This function is called by:
  9472 ;;		_ESP8266_Cmd
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476                           	psect	text45
  9477  002BB4                     __ptext45:
  9478                           	opt stack 0
  9479  002BB4                     _delay_ms:
  9480                           	opt stack 25
  9481  002BB4                     l3796:
  9482                           
  9483                           ;delay.c: 6: for(;ms>0;ms--)
  9484  002BB4  BE15               	btfsc	delay_ms@ms+1,7,c
  9485  002BB6  0012               	return	
  9486  002BB8  5015               	movf	delay_ms@ms+1,w,c
  9487  002BBA  E103               	bnz	l3800
  9488  002BBC  0414               	decf	delay_ms@ms,w,c
  9489  002BBE  A0D8               	btfss	status,0,c
  9490  002BC0  0012               	return	
  9491  002BC2                     l3800:
  9492                           
  9493                           ;delay.c: 7: {
  9494                           ;delay.c: 8: Delay10KTCYx(1);
  9495  002BC2  0E01               	movlw	1
  9496  002BC4  ECE8  F015         	call	_Delay10KTCYx
  9497  002BC8  0614               	decf	delay_ms@ms,f,c
  9498  002BCA  A0D8               	btfss	status,0,c
  9499  002BCC  0615               	decf	delay_ms@ms+1,f,c
  9500  002BCE  D7F2               	goto	l3796
  9501  002BD0                     __end_of_delay_ms:
  9502                           	opt stack 0
  9503                           tblptru	equ	0xFF8
  9504                           tblptrh	equ	0xFF7
  9505                           tblptrl	equ	0xFF6
  9506                           tablat	equ	0xFF5
  9507                           prodh	equ	0xFF4
  9508                           prodl	equ	0xFF3
  9509                           intcon	equ	0xFF2
  9510                           postinc0	equ	0xFEE
  9511                           wreg	equ	0xFE8
  9512                           indf1	equ	0xFE7
  9513                           plusw1	equ	0xFE3
  9514                           fsr1h	equ	0xFE2
  9515                           fsr1l	equ	0xFE1
  9516                           indf2	equ	0xFDF
  9517                           postinc2	equ	0xFDE
  9518                           postdec2	equ	0xFDD
  9519                           plusw2	equ	0xFDB
  9520                           fsr2h	equ	0xFDA
  9521                           fsr2l	equ	0xFD9
  9522                           status	equ	0xFD8
  9523                           
  9524 ;; *************** function _Delay10KTCYx *****************
  9525 ;; Defined at:
  9526 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10ktcyx.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;  unit            1    wreg     unsigned char 
  9529 ;; Auto vars:     Size  Location     Type
  9530 ;;  unit            1   18[COMRAM] unsigned char 
  9531 ;; Return value:  Size  Location     Type
  9532 ;;                  1    wreg      void 
  9533 ;; Registers used:
  9534 ;;		wreg
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9540 ;;      Params:         0       0       0       0       0       0       0
  9541 ;;      Locals:         1       0       0       0       0       0       0
  9542 ;;      Temps:          1       0       0       0       0       0       0
  9543 ;;      Totals:         2       0       0       0       0       0       0
  9544 ;;Total ram usage:        2 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    1
  9547 ;; This function calls:
  9548 ;;		Nothing
  9549 ;; This function is called by:
  9550 ;;		_delay_ms
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           	psect	text46
  9555  002BD0                     __ptext46:
  9556                           	opt stack 0
  9557  002BD0                     _Delay10KTCYx:
  9558                           	opt stack 25
  9559                           
  9560                           ;incstack = 0
  9561                           ;Delay10KTCYx@unit stored from wreg
  9562  002BD0  6E13               	movwf	Delay10KTCYx@unit,c
  9563  002BD2  0E0D               	movlw	13
  9564  002BD4  6E12               	movwf	??_Delay10KTCYx& (0+255),c
  9565  002BD6  0EFC               	movlw	252
  9566  002BD8                     u5747:
  9567  002BD8  2EE8               	decfsz	wreg,f,c
  9568  002BDA  D7FE               	bra	u5747
  9569  002BDC  2E12               	decfsz	??_Delay10KTCYx& (0+255),f,c
  9570  002BDE  D7FC               	bra	u5747
  9571  002BE0  2E13               	decfsz	Delay10KTCYx@unit,f,c
  9572  002BE2  D7F7               	goto	l3752
  9573  002BE4  0012               	return	
  9574  002BE6                     __end_of_Delay10KTCYx:
  9575                           	opt stack 0
  9576                           tblptru	equ	0xFF8
  9577                           tblptrh	equ	0xFF7
  9578                           tblptrl	equ	0xFF6
  9579                           tablat	equ	0xFF5
  9580                           prodh	equ	0xFF4
  9581                           prodl	equ	0xFF3
  9582                           intcon	equ	0xFF2
  9583                           postinc0	equ	0xFEE
  9584                           wreg	equ	0xFE8
  9585                           indf1	equ	0xFE7
  9586                           plusw1	equ	0xFE3
  9587                           fsr1h	equ	0xFE2
  9588                           fsr1l	equ	0xFE1
  9589                           indf2	equ	0xFDF
  9590                           postinc2	equ	0xFDE
  9591                           postdec2	equ	0xFDD
  9592                           plusw2	equ	0xFDB
  9593                           fsr2h	equ	0xFDA
  9594                           fsr2l	equ	0xFD9
  9595                           status	equ	0xFD8
  9596                           
  9597 ;; *************** function _ESP8266_Uart *****************
  9598 ;; Defined at:
  9599 ;;		line 53 in file "harwave/UART.c"
  9600 ;; Parameters:    Size  Location     Type
  9601 ;;  cmd             2   17[COMRAM] PTR unsigned char 
  9602 ;;		 -> STR_59(14), STR_57(15), STR_53(11), STR_49(25), 
  9603 ;;		 -> STR_47(23), STR_45(22), STR_43(14), STR_41(15), 
  9604 ;;		 -> STR_39(14), STR_33(13), STR_30(13), ESP8266_Link_Server@cCmd(120), 
  9605 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_15(14), STR_12(14), 
  9606 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@tem(12), 
  9607 ;;		 -> ESP8266_SendString@cStr(20), 
  9608 ;; Auto vars:     Size  Location     Type
  9609 ;;  index           2   21[COMRAM] int 
  9610 ;; Return value:  Size  Location     Type
  9611 ;;                  1    wreg      void 
  9612 ;; Registers used:
  9613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  9614 ;; Tracked objects:
  9615 ;;		On entry : 0/0
  9616 ;;		On exit  : 0/0
  9617 ;;		Unchanged: 0/0
  9618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9619 ;;      Params:         2       0       0       0       0       0       0
  9620 ;;      Locals:         2       0       0       0       0       0       0
  9621 ;;      Temps:          2       0       0       0       0       0       0
  9622 ;;      Totals:         6       0       0       0       0       0       0
  9623 ;;Total ram usage:        6 bytes
  9624 ;; Hardware stack levels used:    1
  9625 ;; Hardware stack levels required when called:    1
  9626 ;; This function calls:
  9627 ;;		Nothing
  9628 ;; This function is called by:
  9629 ;;		_ESP8266_Cmd
  9630 ;; This function uses a non-reentrant model
  9631 ;;
  9632                           
  9633                           	psect	text47
  9634  0027B0                     __ptext47:
  9635                           	opt stack 0
  9636  0027B0                     _ESP8266_Uart:
  9637                           	opt stack 26
  9638                           
  9639                           ;UART.c: 54: int index=-1;
  9640                           
  9641                           ;incstack = 0
  9642  0027B0  6816               	setf	ESP8266_Uart@index,c
  9643  0027B2  6817               	setf	ESP8266_Uart@index+1,c
  9644  0027B4                     l3808:
  9645                           
  9646                           ;UART.c: 56: {
  9647                           ;UART.c: 57: index++;
  9648  0027B4  4A16               	infsnz	ESP8266_Uart@index,f,c
  9649  0027B6  2A17               	incf	ESP8266_Uart@index+1,f,c
  9650  0027B8                     l192:
  9651  0027B8  A89E               	btfss	3998,4,c	;volatile
  9652  0027BA  D7FE               	goto	l192
  9653                           
  9654                           ;UART.c: 59: TXREG=cmd[index];
  9655  0027BC  5016               	movf	ESP8266_Uart@index,w,c
  9656  0027BE  2412               	addwf	ESP8266_Uart@cmd,w,c
  9657  0027C0  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  9658  0027C2  5017               	movf	ESP8266_Uart@index+1,w,c
  9659  0027C4  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  9660  0027C6  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  9661  0027C8  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  9662  0027CC  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  9663  0027D0  6AF8               	clrf	tblptru,c
  9664  0027D2  0E05               	movlw	(high __ramtop+-1)
  9665  0027D4  64F7               	cpfsgt	tblptrh,c
  9666  0027D6  D003               	bra	u4007
  9667  0027D8  0008               	tblrd		*
  9668  0027DA  50F5               	movf	tablat,w,c
  9669  0027DC  D005               	bra	u4000
  9670  0027DE                     u4007:
  9671  0027DE  CFF6 FFE1          	movff	tblptrl,fsr1l
  9672  0027E2  CFF7 FFE2          	movff	tblptrh,fsr1h
  9673  0027E6  50E7               	movf	indf1,w,c
  9674  0027E8                     u4000:
  9675  0027E8  6EAD               	movwf	4013,c	;volatile
  9676                           
  9677                           ;UART.c: 60: }while(cmd[index]!='\0');
  9678  0027EA  5016               	movf	ESP8266_Uart@index,w,c
  9679  0027EC  2412               	addwf	ESP8266_Uart@cmd,w,c
  9680  0027EE  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  9681  0027F0  5017               	movf	ESP8266_Uart@index+1,w,c
  9682  0027F2  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  9683  0027F4  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  9684  0027F6  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  9685  0027FA  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  9686  0027FE  6AF8               	clrf	tblptru,c
  9687  002800  0E05               	movlw	(high __ramtop+-1)
  9688  002802  64F7               	cpfsgt	tblptrh,c
  9689  002804  D003               	bra	u4017
  9690  002806  0008               	tblrd		*
  9691  002808  50F5               	movf	tablat,w,c
  9692  00280A  D005               	bra	u4010
  9693  00280C                     u4017:
  9694  00280C  CFF6 FFE1          	movff	tblptrl,fsr1l
  9695  002810  CFF7 FFE2          	movff	tblptrh,fsr1h
  9696  002814  50E7               	movf	indf1,w,c
  9697  002816                     u4010:
  9698  002816  0900               	iorlw	0
  9699  002818  A4D8               	btfss	status,2,c
  9700  00281A  D7CC               	goto	l3808
  9701  00281C                     l196:
  9702  00281C  B2AC               	btfsc	4012,1,c	;volatile
  9703  00281E  0012               	return	
  9704  002820  D7FD               	goto	l196
  9705  002822                     __end_of_ESP8266_Uart:
  9706                           	opt stack 0
  9707                           tblptru	equ	0xFF8
  9708                           tblptrh	equ	0xFF7
  9709                           tblptrl	equ	0xFF6
  9710                           tablat	equ	0xFF5
  9711                           prodh	equ	0xFF4
  9712                           prodl	equ	0xFF3
  9713                           intcon	equ	0xFF2
  9714                           postinc0	equ	0xFEE
  9715                           wreg	equ	0xFE8
  9716                           indf1	equ	0xFE7
  9717                           plusw1	equ	0xFE3
  9718                           fsr1h	equ	0xFE2
  9719                           fsr1l	equ	0xFE1
  9720                           indf2	equ	0xFDF
  9721                           postinc2	equ	0xFDE
  9722                           postdec2	equ	0xFDD
  9723                           plusw2	equ	0xFDB
  9724                           fsr2h	equ	0xFDA
  9725                           fsr2l	equ	0xFD9
  9726                           status	equ	0xFD8
  9727                           
  9728 ;; *************** function _UART *****************
  9729 ;; Defined at:
  9730 ;;		line 120 in file "main.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;		None
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;  ch              1   16[COMRAM] unsigned char 
  9735 ;; Return value:  Size  Location     Type
  9736 ;;                  1    wreg      void 
  9737 ;; Registers used:
  9738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9744 ;;      Params:         0       0       0       0       0       0       0
  9745 ;;      Locals:         1       0       0       0       0       0       0
  9746 ;;      Temps:         16       0       0       0       0       0       0
  9747 ;;      Totals:        17       0       0       0       0       0       0
  9748 ;;Total ram usage:       17 bytes
  9749 ;; Hardware stack levels used:    1
  9750 ;; This function calls:
  9751 ;;		Nothing
  9752 ;; This function is called by:
  9753 ;;		Interrupt level 2
  9754 ;; This function uses a non-reentrant model
  9755 ;;
  9756                           
  9757                           	psect	intcode
  9758  000008                     __pintcode:
  9759                           	opt stack 0
  9760  000008                     _UART:
  9761                           	opt stack 24
  9762                           
  9763                           ;incstack = 0
  9764  000008  826E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9765  00000A  EDE1  F00F         	call	int_func,f	;refresh shadow registers
  9766                           tblptru	equ	0xFF8
  9767                           tblptrh	equ	0xFF7
  9768                           tblptrl	equ	0xFF6
  9769                           tablat	equ	0xFF5
  9770                           prodh	equ	0xFF4
  9771                           prodl	equ	0xFF3
  9772                           intcon	equ	0xFF2
  9773                           postinc0	equ	0xFEE
  9774                           wreg	equ	0xFE8
  9775                           indf1	equ	0xFE7
  9776                           plusw1	equ	0xFE3
  9777                           fsr1h	equ	0xFE2
  9778                           fsr1l	equ	0xFE1
  9779                           indf2	equ	0xFDF
  9780                           postinc2	equ	0xFDE
  9781                           postdec2	equ	0xFDD
  9782                           plusw2	equ	0xFDB
  9783                           fsr2h	equ	0xFDA
  9784                           fsr2l	equ	0xFD9
  9785                           status	equ	0xFD8
  9786                           
  9787                           	psect	intcode_body
  9788  001FC2                     __pintcode_body:
  9789                           	opt stack 24
  9790  001FC2                     int_func:
  9791                           	opt stack 24
  9792  001FC2  0006               	pop		; remove dummy address from shadow register refresh
  9793  001FC4  CFFA F003          	movff	pclath,??_UART+2
  9794  001FC8  CFFB F004          	movff	pclatu,??_UART+3
  9795  001FCC  CFE9 F005          	movff	fsr0l,??_UART+4
  9796  001FD0  CFEA F006          	movff	fsr0h,??_UART+5
  9797  001FD4  CFE1 F007          	movff	fsr1l,??_UART+6
  9798  001FD8  CFE2 F008          	movff	fsr1h,??_UART+7
  9799  001FDC  CFD9 F009          	movff	fsr2l,??_UART+8
  9800  001FE0  CFDA F00A          	movff	fsr2h,??_UART+9
  9801  001FE4  CFF3 F00B          	movff	prodl,??_UART+10
  9802  001FE8  CFF4 F00C          	movff	prodh,??_UART+11
  9803  001FEC  CFF6 F00D          	movff	tblptrl,??_UART+12
  9804  001FF0  CFF7 F00E          	movff	tblptrh,??_UART+13
  9805  001FF4  CFF8 F00F          	movff	tblptru,??_UART+14
  9806  001FF8  CFF5 F010          	movff	tablat,??_UART+15
  9807                           
  9808                           ;main.c: 121: if( INTCONbits.TMR0IF )
  9809  001FFC  A4F2               	btfss	intcon,2,c	;volatile
  9810  001FFE  D004               	goto	i2l381
  9811                           
  9812                           ;main.c: 122: {
  9813                           ;main.c: 123: if(!write)
  9814  002000  5065               	movf	_write,w,c
  9815  002002  B4D8               	btfsc	status,2,c
  9816                           
  9817                           ;main.c: 124: ADCON0bits.GO=1;
  9818  002004  82C2               	bsf	4034,1,c	;volatile
  9819                           
  9820                           ;main.c: 125: INTCONbits.TMR0IF=0;
  9821  002006  94F2               	bcf	intcon,2,c	;volatile
  9822  002008                     i2l381:
  9823                           
  9824                           ;main.c: 126: }
  9825                           ;main.c: 127: if(PIR1bits.RCIF){
  9826  002008  AA9E               	btfss	3998,5,c	;volatile
  9827  00200A  D038               	goto	i2l383
  9828                           
  9829                           ;main.c: 128: char ch;
  9830                           ;main.c: 129: ch = RCREG;
  9831  00200C  CFAE F011          	movff	4014,UART@ch	;volatile
  9832                           
  9833                           ;main.c: 130: if( strEsp8266_Fram_Record .InfBit .FramLength < ( 50 - 1 ) ) {
  9834  002010  0101               	movlb	1	; () banked
  9835  002012  51DA               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9836  002014  0B7F               	andlw	127
  9837  002016  6E01               	movwf	??_UART& (0+255),c
  9838  002018  0E31               	movlw	49
  9839  00201A  6001               	cpfslt	??_UART,c
  9840  00201C  D02E               	goto	i2l384
  9841                           
  9842                           ; BSR set to: 1
  9843                           ;main.c: 131: strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .Fram
      +                          Length ++ ] = ch;
  9844  00201E  0101               	movlb	1	; () banked
  9845  002020  51DA               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9846  002022  0B7F               	andlw	127
  9847  002024  6E01               	movwf	??_UART& (0+255),c
  9848  002026  5001               	movf	??_UART,w,c
  9849  002028  0D01               	mullw	1
  9850  00202A  0EA8               	movlw	low _strEsp8266_Fram_Record
  9851  00202C  24F3               	addwf	prodl,w,c
  9852  00202E  6ED9               	movwf	fsr2l,c
  9853  002030  0E01               	movlw	high _strEsp8266_Fram_Record
  9854  002032  20F4               	addwfc	prodh,w,c
  9855  002034  6EDA               	movwf	fsr2h,c
  9856  002036  C011  FFDF         	movff	UART@ch,indf2
  9857                           
  9858                           ; BSR set to: 1
  9859  00203A  0E01               	movlw	1
  9860  00203C  6E01               	movwf	??_UART& (0+255),c
  9861  00203E  0101               	movlb	1	; () banked
  9862  002040  51DA               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9863  002042  0B7F               	andlw	127
  9864  002044  6E02               	movwf	(??_UART+1)& (0+255),c
  9865  002046  5001               	movf	??_UART,w,c
  9866  002048  2602               	addwf	??_UART+1,f,c
  9867  00204A  0101               	movlb	1	; () banked
  9868  00204C  51DA               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9869  00204E  1802               	xorwf	(??_UART+1)& (0+255),w,c
  9870  002050  0B80               	andlw	-128
  9871  002052  1802               	xorwf	(??_UART+1)& (0+255),w,c
  9872  002054  0101               	movlb	1	; () banked
  9873  002056  6FDA               	movwf	(_strEsp8266_Fram_Record+50)& (0+255),b
  9874                           
  9875                           ; BSR set to: 1
  9876                           ;main.c: 132: if(strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .F
      +                          ramLength] == '\0')
  9877  002058  0101               	movlb	1	; () banked
  9878  00205A  51DA               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9879  00205C  0B7F               	andlw	127
  9880  00205E  6E01               	movwf	??_UART& (0+255),c
  9881  002060  5001               	movf	??_UART,w,c
  9882  002062  0D01               	mullw	1
  9883  002064  0EA8               	movlw	low _strEsp8266_Fram_Record
  9884  002066  24F3               	addwf	prodl,w,c
  9885  002068  6ED9               	movwf	fsr2l,c
  9886  00206A  0E01               	movlw	high _strEsp8266_Fram_Record
  9887  00206C  20F4               	addwfc	prodh,w,c
  9888  00206E  6EDA               	movwf	fsr2h,c
  9889  002070  50DF               	movf	indf2,w,c
  9890  002072  A4D8               	btfss	status,2,c
  9891  002074  D002               	goto	i2l384
  9892                           
  9893                           ; BSR set to: 1
  9894                           ;main.c: 133: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 1;
  9895  002076  0101               	movlb	1	; () banked
  9896  002078  8FDA               	bsf	(_strEsp8266_Fram_Record+50)& (0+255),7,b
  9897  00207A                     i2l384:
  9898                           
  9899                           ; BSR set to: 1
  9900                           ;main.c: 134: }
  9901                           ;main.c: 135: PIR1bits.RCIF=0;
  9902  00207A  9A9E               	bcf	3998,5,c	;volatile
  9903  00207C                     i2l383:
  9904                           
  9905                           ;main.c: 140: }
  9906                           ;main.c: 141: if(PIR1bits.ADIF){
  9907  00207C  AC9E               	btfss	3998,6,c	;volatile
  9908  00207E  D007               	goto	i2l387
  9909                           
  9910                           ;main.c: 142: PIR1bits.ADIF=0;
  9911  002080  9C9E               	bcf	3998,6,c	;volatile
  9912                           
  9913                           ;main.c: 143: AD_L=ADRESL;
  9914  002082  CFC3 F066          	movff	4035,_AD_L	;volatile
  9915                           
  9916                           ;main.c: 144: AD_H=ADRESH;
  9917  002086  CFC4 F1A7          	movff	4036,_AD_H	;volatile
  9918                           
  9919                           ;main.c: 145: write=1;
  9920  00208A  0E01               	movlw	1
  9921  00208C  6E65               	movwf	_write,c
  9922  00208E                     i2l387:
  9923  00208E  C010  FFF5         	movff	??_UART+15,tablat
  9924  002092  C00F  FFF8         	movff	??_UART+14,tblptru
  9925  002096  C00E  FFF7         	movff	??_UART+13,tblptrh
  9926  00209A  C00D  FFF6         	movff	??_UART+12,tblptrl
  9927  00209E  C00C  FFF4         	movff	??_UART+11,prodh
  9928  0020A2  C00B  FFF3         	movff	??_UART+10,prodl
  9929  0020A6  C00A  FFDA         	movff	??_UART+9,fsr2h
  9930  0020AA  C009  FFD9         	movff	??_UART+8,fsr2l
  9931  0020AE  C008  FFE2         	movff	??_UART+7,fsr1h
  9932  0020B2  C007  FFE1         	movff	??_UART+6,fsr1l
  9933  0020B6  C006  FFEA         	movff	??_UART+5,fsr0h
  9934  0020BA  C005  FFE9         	movff	??_UART+4,fsr0l
  9935  0020BE  C004  FFFB         	movff	??_UART+3,pclatu
  9936  0020C2  C003  FFFA         	movff	??_UART+2,pclath
  9937  0020C6  926E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9938  0020C8  0011               	retfie		f
  9939  0020CA                     __end_of_UART:
  9940                           	opt stack 0
  9941                           pclatu	equ	0xFFB
  9942                           pclath	equ	0xFFA
  9943                           tblptru	equ	0xFF8
  9944                           tblptrh	equ	0xFF7
  9945                           tblptrl	equ	0xFF6
  9946                           tablat	equ	0xFF5
  9947                           prodh	equ	0xFF4
  9948                           prodl	equ	0xFF3
  9949                           intcon	equ	0xFF2
  9950                           postinc0	equ	0xFEE
  9951                           fsr0h	equ	0xFEA
  9952                           fsr0l	equ	0xFE9
  9953                           wreg	equ	0xFE8
  9954                           indf1	equ	0xFE7
  9955                           plusw1	equ	0xFE3
  9956                           fsr1h	equ	0xFE2
  9957                           fsr1l	equ	0xFE1
  9958                           indf2	equ	0xFDF
  9959                           postinc2	equ	0xFDE
  9960                           postdec2	equ	0xFDD
  9961                           plusw2	equ	0xFDB
  9962                           fsr2h	equ	0xFDA
  9963                           fsr2l	equ	0xFD9
  9964                           status	equ	0xFD8
  9965                           pclatu	equ	0xFFB
  9966                           pclath	equ	0xFFA
  9967                           tblptru	equ	0xFF8
  9968                           tblptrh	equ	0xFF7
  9969                           tblptrl	equ	0xFF6
  9970                           tablat	equ	0xFF5
  9971                           prodh	equ	0xFF4
  9972                           prodl	equ	0xFF3
  9973                           intcon	equ	0xFF2
  9974                           postinc0	equ	0xFEE
  9975                           fsr0h	equ	0xFEA
  9976                           fsr0l	equ	0xFE9
  9977                           wreg	equ	0xFE8
  9978                           indf1	equ	0xFE7
  9979                           plusw1	equ	0xFE3
  9980                           fsr1h	equ	0xFE2
  9981                           fsr1l	equ	0xFE1
  9982                           indf2	equ	0xFDF
  9983                           postinc2	equ	0xFDE
  9984                           postdec2	equ	0xFDD
  9985                           plusw2	equ	0xFDB
  9986                           fsr2h	equ	0xFDA
  9987                           fsr2l	equ	0xFD9
  9988                           status	equ	0xFD8
  9989                           
  9990                           	psect	rparam
  9991  0000                     pclatu	equ	0xFFB
  9992                           pclath	equ	0xFFA
  9993                           tblptru	equ	0xFF8
  9994                           tblptrh	equ	0xFF7
  9995                           tblptrl	equ	0xFF6
  9996                           tablat	equ	0xFF5
  9997                           prodh	equ	0xFF4
  9998                           prodl	equ	0xFF3
  9999                           intcon	equ	0xFF2
 10000                           postinc0	equ	0xFEE
 10001                           fsr0h	equ	0xFEA
 10002                           fsr0l	equ	0xFE9
 10003                           wreg	equ	0xFE8
 10004                           indf1	equ	0xFE7
 10005                           plusw1	equ	0xFE3
 10006                           fsr1h	equ	0xFE2
 10007                           fsr1l	equ	0xFE1
 10008                           indf2	equ	0xFDF
 10009                           postinc2	equ	0xFDE
 10010                           postdec2	equ	0xFDD
 10011                           plusw2	equ	0xFDB
 10012                           fsr2h	equ	0xFDA
 10013                           fsr2l	equ	0xFD9
 10014                           status	equ	0xFD8
 10015                           
 10016                           	psect	temp
 10017  00006E                     btemp:
 10018                           	opt stack 0
 10019  00006E                     	ds	1
 10020  0000                     int$flags	set	btemp
 10021                           pclatu	equ	0xFFB
 10022                           pclath	equ	0xFFA
 10023                           tblptru	equ	0xFF8
 10024                           tblptrh	equ	0xFF7
 10025                           tblptrl	equ	0xFF6
 10026                           tablat	equ	0xFF5
 10027                           prodh	equ	0xFF4
 10028                           prodl	equ	0xFF3
 10029                           intcon	equ	0xFF2
 10030                           postinc0	equ	0xFEE
 10031                           fsr0h	equ	0xFEA
 10032                           fsr0l	equ	0xFE9
 10033                           wreg	equ	0xFE8
 10034                           indf1	equ	0xFE7
 10035                           plusw1	equ	0xFE3
 10036                           fsr1h	equ	0xFE2
 10037                           fsr1l	equ	0xFE1
 10038                           indf2	equ	0xFDF
 10039                           postinc2	equ	0xFDE
 10040                           postdec2	equ	0xFDD
 10041                           plusw2	equ	0xFDB
 10042                           fsr2h	equ	0xFDA
 10043                           fsr2l	equ	0xFD9
 10044                           status	equ	0xFD8


Data Sizes:
    Strings     485
    Constant    30
    Data        0
    BSS         396
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     91     109
    BANK0           128    122     128
    BANK1           256     13     233
    BANK2           256      0     152
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_63(CODE[10]), STR_60(CODE[3]), STR_58(CODE[3]), STR_54(CODE[3]), 
		 -> STR_52(CODE[10]), STR_51(CODE[15]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_40(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[10]), STR_32(CODE[3]), STR_31(CODE[10]), 
		 -> STR_29(CODE[3]), STR_28(CODE[8]), STR_21(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[10]), STR_16(CODE[3]), STR_14(CODE[10]), STR_13(CODE[3]), 
		 -> STR_11(CODE[10]), STR_10(CODE[3]), STR_8(CODE[6]), STR_7(CODE[3]), 
		 -> STR_5(CODE[3]), STR_3(CODE[8]), STR_2(CODE[3]), NULL(NULL[0]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK1[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK1[52]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_63(CODE[10]), STR_60(CODE[3]), STR_58(CODE[3]), STR_54(CODE[3]), 
		 -> STR_52(CODE[10]), STR_51(CODE[15]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_40(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[10]), STR_32(CODE[3]), STR_31(CODE[10]), 
		 -> STR_29(CODE[3]), STR_28(CODE[8]), STR_21(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[10]), STR_16(CODE[3]), STR_14(CODE[10]), STR_13(CODE[3]), 
		 -> STR_11(CODE[10]), STR_10(CODE[3]), STR_8(CODE[6]), STR_7(CODE[3]), 
		 -> STR_5(CODE[3]), STR_3(CODE[8]), STR_2(CODE[3]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_63(CODE[10]), STR_60(CODE[3]), STR_58(CODE[3]), STR_54(CODE[3]), 
		 -> STR_52(CODE[10]), STR_51(CODE[15]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_40(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[10]), STR_32(CODE[3]), STR_31(CODE[10]), 
		 -> STR_29(CODE[3]), STR_28(CODE[8]), STR_21(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[10]), STR_16(CODE[3]), STR_14(CODE[10]), STR_13(CODE[3]), 
		 -> STR_11(CODE[10]), STR_10(CODE[3]), STR_8(CODE[6]), STR_7(CODE[3]), 
		 -> STR_5(CODE[3]), STR_3(CODE[8]), STR_2(CODE[3]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK1[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK1[52]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK1[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK1[52]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_63(CODE[10]), STR_60(CODE[3]), STR_58(CODE[3]), STR_54(CODE[3]), 
		 -> STR_52(CODE[10]), STR_51(CODE[15]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_40(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[10]), STR_32(CODE[3]), STR_31(CODE[10]), 
		 -> STR_29(CODE[3]), STR_28(CODE[8]), STR_21(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[10]), STR_16(CODE[3]), STR_14(CODE[10]), STR_13(CODE[3]), 
		 -> STR_11(CODE[10]), STR_10(CODE[3]), STR_8(CODE[6]), STR_7(CODE[3]), 
		 -> STR_5(CODE[3]), STR_3(CODE[8]), STR_2(CODE[3]), NULL(NULL[0]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK1[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK1[52]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 11
		 -> main@tem(BANK1[11]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 12
		 -> ESP8266_SendString@tem(BANK0[12]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 12
		 -> ESP8266_SendString@tem(BANK0[12]), 

    sprintf$1540	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_66(CODE[17]), STR_65(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 100
		 -> STR_64(CODE[7]), sprintf@c(COMRAM[1]), STR_62(CODE[5]), STR_61(CODE[12]), 
		 -> STR_56(CODE[10]), STR_55(CODE[5]), STR_38(CODE[2]), STR_37(CODE[10]), 
		 -> STR_36(CODE[4]), STR_25(CODE[4]), STR_23(CODE[4]), ESP8266_Link_Server@cStr(COMRAM[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_27(CODE[17]), STR_26(CODE[20]), STR_24(CODE[15]), STR_22(CODE[15]), 
		 -> STR_20(CODE[26]), STR_18(CODE[21]), STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 120
		 -> ESP8266_Link_Server@cCmd(COMRAM[120]), ESP8266_Link_Server@cStr(COMRAM[100]), ESP8266_BuildAP@cCmd(BANK0[120]), ESP8266_JoinAP@cCmd(COMRAM[120]), 
		 -> ESP8266_SendString@cStr(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    ESP8266_BuildAP@enunPsdMode	PTR unsigned char  size(2) Largest target is 2
		 -> STR_38(CODE[2]), 

    ESP8266_BuildAP@pPassWord	PTR unsigned char  size(2) Largest target is 10
		 -> STR_37(CODE[10]), 

    ESP8266_BuildAP@pSSID	PTR unsigned char  size(2) Largest target is 4
		 -> STR_36(CODE[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 12
		 -> ESP8266_SendString@tem(BANK0[12]), 

    ESP8266_SendString@pStr	PTR unsigned char  size(2) Largest target is 11
		 -> main@tem(BANK1[11]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK1[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK1[52]), 

    ESP8266_Cmd@reply2	PTR unsigned char  size(2) Largest target is 10
		 -> STR_35(CODE[3]), STR_32(CODE[3]), STR_29(CODE[3]), STR_17(CODE[10]), 
		 -> STR_14(CODE[10]), STR_11(CODE[10]), STR_8(CODE[6]), NULL(NULL[0]), 

    ESP8266_Cmd@reply1	PTR unsigned char  size(2) Largest target is 10
		 -> STR_60(CODE[3]), STR_58(CODE[3]), STR_54(CODE[3]), STR_50(CODE[3]), 
		 -> STR_48(CODE[3]), STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), 
		 -> STR_40(CODE[3]), STR_34(CODE[10]), STR_31(CODE[10]), STR_28(CODE[8]), 
		 -> STR_21(CODE[3]), STR_19(CODE[3]), STR_16(CODE[3]), STR_13(CODE[3]), 
		 -> STR_10(CODE[3]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), 

    ESP8266_Cmd@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_59(CODE[14]), STR_57(CODE[15]), STR_53(CODE[11]), STR_49(CODE[25]), 
		 -> STR_47(CODE[23]), STR_45(CODE[22]), STR_43(CODE[14]), STR_41(CODE[15]), 
		 -> STR_39(CODE[14]), STR_33(CODE[13]), STR_30(CODE[13]), ESP8266_Link_Server@cCmd(COMRAM[120]), 
		 -> ESP8266_BuildAP@cCmd(BANK0[120]), ESP8266_JoinAP@cCmd(COMRAM[120]), STR_15(CODE[14]), STR_12(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@tem(BANK0[12]), 
		 -> ESP8266_SendString@cStr(BANK0[20]), 

    ESP8266_Uart@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_59(CODE[14]), STR_57(CODE[15]), STR_53(CODE[11]), STR_49(CODE[25]), 
		 -> STR_47(CODE[23]), STR_45(CODE[22]), STR_43(CODE[14]), STR_41(CODE[15]), 
		 -> STR_39(CODE[14]), STR_33(CODE[13]), STR_30(CODE[13]), ESP8266_Link_Server@cCmd(COMRAM[120]), 
		 -> ESP8266_BuildAP@cCmd(BANK0[120]), ESP8266_JoinAP@cCmd(COMRAM[120]), STR_15(CODE[14]), STR_12(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@tem(BANK0[12]), 
		 -> ESP8266_SendString@cStr(BANK0[20]), 


Critical Paths under _main in COMRAM

    _main->_translate_flex
    _translate_flex->___fttol
    ___lwtoft->___ftpack
    ___fttol->_KalmanFilter_0
    ___fttol->_KalmanFilter_1
    ___fttol->_KalmanFilter_2
    ___fttol->_KalmanFilter_3
    ___fttol->_KalmanFilter_4
    ___fttol->_KalmanFilter_5
    ___fttol->_KalmanFilter_6
    ___fttol->_KalmanFilter_7
    ___fttol->_KalmanFilter_8
    ___fttol->_KalmanFilter_9
    _KalmanFilter_9->___ftdiv
    _KalmanFilter_9->___ftmul
    _KalmanFilter_8->___ftdiv
    _KalmanFilter_8->___ftmul
    _KalmanFilter_7->___ftdiv
    _KalmanFilter_7->___ftmul
    _KalmanFilter_6->___ftdiv
    _KalmanFilter_6->___ftmul
    _KalmanFilter_5->___ftdiv
    _KalmanFilter_5->___ftmul
    _KalmanFilter_4->___ftdiv
    _KalmanFilter_4->___ftmul
    _KalmanFilter_3->___ftdiv
    _KalmanFilter_3->___ftmul
    _KalmanFilter_2->___ftdiv
    _KalmanFilter_2->___ftmul
    _KalmanFilter_1->___ftdiv
    _KalmanFilter_1->___ftmul
    _KalmanFilter_0->___ftdiv
    _KalmanFilter_0->___ftmul
    ___ftmul->___ftadd
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _ESP8266_Server->_ESP8266_BuildAP
    _ESP8266_Rst->_ESP8266_Cmd
    _ESP8266_BuildAP->_sprintf
    _ESP8266_AT_Test->_ESP8266_Cmd
    _AP_MODE->_ESP8266_Net_Mode_Choose
    _ESP8266_Net_Mode_Choose->_ESP8266_Cmd
    _ESP8266_SendString->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ESP8266_Cmd->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _delay_ms->_Delay10KTCYx

Critical Paths under _UART in COMRAM

    None.

Critical Paths under _main in BANK0

    _translate_flex->___fttol
    _ESP8266_Server->_ESP8266_BuildAP

Critical Paths under _UART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _UART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _UART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _UART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _UART in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0  336463
                                            120 BANK0      2     2      0
                                              0 BANK1     13    13      0
                 _ESP8266_SendString
                     _ESP8266_Server
                       _GPIO_initial
                            ___awmod
                        _adc_initial
                       _initial_UART
                 _oclillator_initial
                             _strstr
                    _timer_0_initial
            _timer_intrrupt_initinal
                     _translate_flex
 ---------------------------------------------------------------------------------
 (1) _translate_flex                                       9     7      2  252393
                                             89 COMRAM     2     0      2
                                             11 BANK0      3     3      0
                     _KalmanFilter_0
                     _KalmanFilter_1
                     _KalmanFilter_2
                     _KalmanFilter_3
                     _KalmanFilter_4
                     _KalmanFilter_5
                     _KalmanFilter_6
                     _KalmanFilter_7
                     _KalmanFilter_8
                     _KalmanFilter_9
                            ___awdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3265
                                             25 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1141
                                             85 COMRAM     4     0      4
                                              0 BANK0     11    11      0
                     _KalmanFilter_0 (ARG)
                     _KalmanFilter_1 (ARG)
                     _KalmanFilter_2 (ARG)
                     _KalmanFilter_3 (ARG)
                     _KalmanFilter_4 (ARG)
                     _KalmanFilter_5 (ARG)
                     _KalmanFilter_6 (ARG)
                     _KalmanFilter_7 (ARG)
                     _KalmanFilter_8 (ARG)
                     _KalmanFilter_9 (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                             17 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_9                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_8                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_7                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_6                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_5                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_4                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_3                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_2                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_1                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_0                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    1605
                                             17 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6146
                                             37 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4538
                                             37 COMRAM    15     9      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6   11617
                                             25 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2464
                                             17 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _timer_intrrupt_initinal                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_0_initial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _oclillator_initial                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initial_UART                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_initial                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     424
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _GPIO_initial                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP8266_Server                                       0     0      0   64167
                            _AP_MODE
                    _ESP8266_AT_Test
                    _ESP8266_BuildAP
                        _ESP8266_Cmd
                        _ESP8266_Rst
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Rst                                          0     0      0    9463
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_BuildAP                                    126   120      6   16821
                                             64 COMRAM     6     0      6
                                              0 BANK0    120   120      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ESP8266_AT_Test                                      0     0      0    9463
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _AP_MODE                                              0     0      0   18957
                        _ESP8266_Cmd
            _ESP8266_Net_Mode_Choose
 ---------------------------------------------------------------------------------
 (3) _ESP8266_Net_Mode_Choose                              1     1      0    9494
                                             45 COMRAM     1     1      0
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (1) _ESP8266_SendString                                  40    36      4   17134
                                             64 COMRAM     5     1      4
                                              0 BANK0     35    35      0
                        _ESP8266_Cmd
                            _sprintf
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     263
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             39    29     10    6858
                                             29 COMRAM    35    25     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     386
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             24 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     703
                                             17 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _ESP8266_Cmd                                          9     1      8    9463
                                             36 COMRAM     9     1      8
                       _ESP8266_Uart
                           _delay_ms
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _strstr                                               4     0      4    2237
                                             32 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              9     3      6     423
                                             23 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _strchr                                               5     1      4     278
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             2     0      2     173
                                             19 COMRAM     2     0      2
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (5) _Delay10KTCYx                                         2     2      0      31
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ESP8266_Uart                                         6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _UART                                                17    17      0      23
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESP8266_SendString
     _ESP8266_Cmd
       _ESP8266_Uart
       _delay_ms
         _Delay10KTCYx
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _strcpy
   _ESP8266_Server
     _AP_MODE
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _ESP8266_Net_Mode_Choose
         _ESP8266_Cmd
           _ESP8266_Uart
           _delay_ms
             _Delay10KTCYx
           _strstr
             _strchr
             _strlen
             _strncmp
               _strlen (ARG)
     _ESP8266_AT_Test
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _ESP8266_BuildAP
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Cmd
       _ESP8266_Uart
       _delay_ms
         _Delay10KTCYx
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _ESP8266_Rst
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
   _GPIO_initial
   ___awmod
   _adc_initial
   _initial_UART
   _oclillator_initial
   _strstr
     _strchr
     _strlen
     _strncmp
       _strlen (ARG)
   _timer_0_initial
   _timer_intrrupt_initinal
   _translate_flex
     _KalmanFilter_0
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_1
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_2
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_3
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_4
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_5
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_6
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_7
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_8
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_9
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     ___awdiv
     ___fttol
       _KalmanFilter_0 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_1 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_2 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_3 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_4 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_5 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_6 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_7 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_8 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_9 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack

 _UART (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      98       9       59.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      D      E9       7       91.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5B      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26E      15        0.0%
DATA                 0      0     26E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jan 25 16:48:16 2019

                               _H 006D                                 _L 006C  
                    ___awdiv@sign 0017               ___wmul@multiplicand 0014  
                     __CFG_BORV$3 000000                 ??_timer_0_initial 0012  
       KalmanFilter_3@ResrcData_3 0035                translate_flex@temp 008C  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                    ___ftadd@exp1 0025                      ___ftadd@exp2 0024  
                    ___ftadd@sign 0023                               l206 2400  
                             l511 05DC                               l192 27B8  
                             l451 01B8                               l196 281C  
                             l452 01BA                               l527 06B4  
                             l393 1EEC                               l813 0C94  
                             l824 0D44                               l833 0D60  
                             l809 0C6A                               l844 2272  
                             l786 257A                               l866 2B66  
                             l969 292C                               l979 296E  
                    __CFG_CPB$OFF 000000                               _PR2 000FCB  
                    __CFG_CPD$OFF 000000              __size_of_adc_initial 0028  
             translate_flex@Value 008D                      ___awmod@sign 0017  
                             prod 000FF3                               wreg 000FE8  
                 __end_of_AP_MODE 2A5E         ??_ESP8266_Net_Mode_Choose 002E  
                    __CFG_LVP$OFF 000000                _ESP8266_SendString 243C  
                    ___ftdiv@cntr 002F                      ___ftdiv@sign 0034  
                    __CFG_WDT$OFF 000000                              l4000 0100  
                            l4100 037A                              l4020 0172  
                            l4030 01B2                              l4022 0178  
                            l4112 03B8                              l4032 01B6  
                            l4008 012E                              l4210 05B2  
                            l4202 057E                              l4122 03E2  
                            l4042 01E6                              l4034 01BE  
                            l4026 0196                              l4300 07F8  
                            l4204 0586                              l4124 03E6  
                            l4116 03D0                              l4060 026A  
                            l4044 01F0                              l4028 01AC  
                            l4310 0856                              l4222 05EE  
                            l4150 0442                              l4070 0292  
                            l4054 024C                              l4046 01F4  
                            l4304 082A                              l4232 0630  
                            l4216 05D6                              l4208 05AA  
                            l4152 0446                              l4136 0412  
                            l4080 02DA                              l4064 0270  
                            l4048 0226                              l4320 088C  
                            l4400 0D7C                              l4314 086E  
                            l4306 0846                              l4250 0670  
                            l4138 0416                              l4090 0310  
                            l4058 0262                              l4322 08A6  
                            l4410 0DAC                              l4308 0852  
                            l4260 06AE                              l4172 04A4  
                            l4084 02EA                              l4068 0280  
                            l4076 02C4                              l4332 25C4  
                            l4420 21E6                              l4500 2184  
                            l4238 0646                              l4246 0666  
                            l4190 0508                              l4182 04D8  
                            l4166 0472                              l4094 0322  
                            l4086 02FC                              l4342 2610  
                            l3800 2BC2                              l4272 06FA  
                            l4256 068E                              l4176 04B6  
                            l4168 048E                              l4336 25EA  
                            l4328 259E                              l3640 2870  
                            l3632 2850                              l3624 2836  
                            l4352 0C78                              l4290 0792  
                            l4282 073C                              l4266 06C6  
                            l4098 0328                              l3634 2858  
                            l4426 220E                              l3820 26E6  
                            l4196 053E                              l4188 0500  
                            l3636 285C                              l3644 287A  
                            l3628 2842                              l3900 2514  
                            l4380 0CF4                              l3814 26AC  
                            l3822 270E                              l3910 2570  
                            l3902 2532                              l4382 0CFE  
                            l4374 0CD2                              l4358 0CA2  
                            l4446 224C                              l3808 27B4  
                            l3752 2BD2                              l3760 29C6  
                            l4296 07CC                              l4288 0752  
                            l4640 2A8C                              l3648 2888  
                            l4392 0D32                              l4384 0D08  
                            l4472 211A                              l4704 1DBC  
                            l3826 2724                              l3842 23AC  
                            l4634 2A68                              l3906 2548  
                            l4394 0D3C                              l4386 0D10  
                            l4490 215C                              l4466 20F2  
                            l4722 1E3E                              l3772 275C  
                            l3860 2404                              l3932 28FA  
                            l4636 2A70                              l4652 2A32  
                            l3908 2566                              l4740 1EA2  
                            l4732 1E6C                              l4804 0BDA  
                            l3790 2A10                              l3758 29C2  
                            l3934 2902                              l4486 214C  
                            l4662 263A                              l4734 1E7C  
                            l4726 1E52                              l4806 0C20  
                            l4750 08B6                              l3784 29F6  
                            l3776 278E                              l3768 2730  
                            l3944 2922                              l3936 2906  
                            l3960 2964                              l3952 2944  
                            l3880 2BAC                              l4496 2174  
                            l4736 1E86                              l4760 0958  
                            l3778 2796                              l3954 294C  
                            l4674 2660                              l4690 2692  
                            l4754 090C                              l4914 1EFE  
                            l4906 1EC8                              l3796 2BB4  
                            l3868 2424                              l3956 2950  
                            l3980 0058                              l3972 003A  
                            l4676 2668                              l4668 264A  
                            l4772 0A00                              l4756 0912  
                            l4916 1F30                              l3974 004C  
                            l3966 001E                              l4870 2350  
                            l4862 22B0                              l3894 24FC  
                            l4694 26A0                              l4686 2688  
                            l4678 266C                              l4782 0A9C  
                            l3992 00A2                              l3976 0050  
                            l3984 005E                              l4864 22D2  
                            l4792 0B38                              l4768 09BA  
                            l4928 1FBC                              l3978 0054  
                            l4866 22FC                              l3898 250A  
                            l4778 0A56                              l4868 2326  
                            l4788 0AF2                              l4798 0B8E  
                            STR_1 7EA2                              STR_2 7FF9  
                            STR_3 7FC9                              STR_4 7FDE  
                            STR_5 7FCE                              STR_6 7FC0  
                            STR_7 7FCE                              STR_8 7FD8  
                            _AD_H 01A7                              STR_9 7F32  
                            _AD_L 0066                              u4000 27E8  
                            _LATD 000F8C                              u4010 2816  
                            u4007 27DE                              u4017 280C  
                            u5211 20DA                              u5231 2102  
                            u5161 21CE                              u4460 02BA  
                            u5181 21F6                              u4390 0220  
                            u5511 244A                              u4720 0574  
                            u4467 02B0                              u5371 1D9A  
                            u4397 0216                              u5390 1DE2  
                            u5720 1FA6                              u5395 1DD8  
                            u4871 071E                              u4951 0C36  
                            u4961 0C4A                              u5738 1FAA  
                            u5747 2BD8                              _UART 0008  
                            _TRMT 007D61                              _TXIF 007CF4  
  KalmanFilter_4@MeasureNoise_R_4 003B                              _main 1EB4  
                    ___ftpack@arg 0012                      ___ftpack@exp 0015  
            _strPc1_1_Fram_Record 0133                              _time 0067  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 006E               ?_ESP8266_SendString 0041  
       ??_timer_intrrupt_initinal 0012                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                   __CFG_IESO$OFF 000000                      _sprintf$1540 0031  
                    _sprintf$1533 002D                      _sprintf$1534 002F  
                   __CFG_MCLRE$ON 000000                      ___ftmul@cntr 0033  
                    ___param_bank 000000                      ___ftmul@sign 0034  
         ESP8266_SendString@F4007 0166                      ___fttol@exp1 008A  
                    ___fttol@lval 0086                             ?_UART 0001  
             ESP8266_BuildAP@cCmd 0080         KalmanFilter_4@ResrcData_4 0035  
                KalmanFilter_0@kg 004D                  KalmanFilter_1@kg 004D  
                KalmanFilter_2@kg 004D                  KalmanFilter_3@kg 004D  
                KalmanFilter_4@kg 004D                  KalmanFilter_5@kg 004D  
                KalmanFilter_6@kg 004D                  KalmanFilter_7@kg 004D  
                KalmanFilter_8@kg 004D                             ?_main 0001  
                KalmanFilter_9@kg 004D                   __end_of___awdiv 26AA  
                 __end_of___ftadd 0DD2                             STR_10 7FCE  
                           STR_11 7FB6                             STR_12 7F4E  
                           STR_20 7E19                             STR_21 7FCE  
                           STR_13 7FCE                             STR_14 7FB6  
                           STR_30 7F6A                             STR_22 7F06  
                           STR_23 7FF1                             STR_31 7FA2  
                           STR_15 7F5C                             STR_40 7FCE  
                           STR_32 7FCE                             STR_16 7FCE  
                           STR_17 7FB6                             STR_25 7FF5  
                           STR_41 7EE8                             STR_42 7FCE  
                           STR_34 7F98                             STR_26 7E8E  
                           STR_18 7E79                             STR_43 7F40  
                           STR_51 7F15                             STR_27 7ED7  
                           STR_44 7FCE                             STR_36 7FED  
                           STR_52 7FAC                   __end_of___awmod 2892  
                           STR_37 7F8E                             STR_53 7F83  
                           STR_61 7F77                             STR_45 7E63  
                           STR_46 7FCE                             STR_38 7FFC  
                           STR_62 7FE3                             STR_63 7FAC  
                           STR_55 7FE8                             STR_39 7F24  
                           STR_47 7E4C                             STR_64 7FD1  
                           STR_57 7EF7                             STR_65 7EB5  
                           STR_49 7E33                             STR_66 7EC6  
            ??_ESP8266_SendString 0045                   __end_of___ftdiv 22A4  
                 __end_of___ftneg 2B74                   __end_of___ftmul 21BE  
                 ___awdiv@divisor 0014                   __end_of___fttol 1EB4  
                 __end_of___lwdiv 2936                   __end_of___lwmod 2978  
                           i2l381 2008                             i2l383 207C  
                           i2l384 207A                             i2l387 208E  
                 ___awdiv@counter 0016                             _RCREG 000FAE  
                           _SPBRG 000FAF                             _PORTD 000F83  
  KalmanFilter_1@ProcessNiose_Q_1 0038                             _TRISC 000F94  
                           _TRISD 000F95              __end_of_ESP8266_Uart 2822  
  KalmanFilter_7@ProcessNiose_Q_7 0038                             _TXREG 000FAD  
           __size_of_Delay10KTCYx 0016                     __CFG_PWRT$OFF 000000  
                           _H_max 006B                     __CFG_WRT0$OFF 000000  
                           _L_max 006A                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                     ?_GPIO_initial 0001  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                 __end_of_dpowers 7E11                             _count 0068  
                 __end_of_isdigit 2BB4                     ___ftpack@sign 0016  
                           _write 0065                             pclath 000FFA  
                           tablat 000FF5                             plusw1 000FE3  
                           plusw2 000FDB                             status 000FD8  
         __size_of_ESP8266_Server 00D8                   __end_of_sprintf 08B4  
      __end_of_oclillator_initial 2C20                   __end_of_strncmp 27B0  
                  __CFG_PBADEN$ON 000000                      __end_of_UART 20CA  
                 __initialization 2978            translate_flex@AD_total 005A  
                    __end_of_main 1FC2              __size_of_ESP8266_Cmd 00C0  
            __size_of_ESP8266_Rst 0026                      _Delay10KTCYx 2BD0  
                          ??_UART 0001                    __CFG_OSC$HSPLL 000000  
                  ESP8266_Cmd@cmd 0025         KalmanFilter_5@ResrcData_5 0035  
                          ??_main 00F8                     ___fttol@sign1 0085  
 __end_of_timer_intrrupt_initinal 2C08                     __activetblptr 000002  
                       ??_AP_MODE 002F                    ??_GPIO_initial 0012  
            ESP8266_BuildAP@pSSID 0041                            UART@ch 0011  
                  _translate_flex 08B4                            _ADRESH 000FC4  
                          _ADRESL 000FC3                  ___awdiv@dividend 0012  
                __end_of___ftpack 259A                  __end_of___lwtoft 2B50  
                          _SPBRGH 000FB0                     ?_initial_UART 0001  
                __end_of_delay_ms 2BD0                    __CFG_XINST$OFF 000000  
                _ESP8266_Cmd$1046 002D          __size_of_ESP8266_AT_Test 002C  
                          ___wmul 2B06                         ??___awdiv 0016  
                       ??___ftadd 0020                    __CFG_STVREN$ON 000000  
                       ??___awmod 0016                         ??___ftdiv 002C  
                       ??___ftneg 0015                         ??___ftmul 002C  
                       ??___fttol 0080                         ??___lwdiv 0016  
                       ??___lwmod 001D                 ESP8266_Cmd@reply1 0027  
               ESP8266_Cmd@reply2 0029                            clear_0 297E  
                          clear_1 298A                            clear_2 29A4  
  KalmanFilter_5@MeasureNoise_R_5 003B                  ___awdiv@quotient 0018  
                 ___awmod@divisor 0014                   ___awmod@counter 0016  
       KalmanFilter_6@ResrcData_6 0035                            _strchr 29F6  
                          _strcpy 2A5E                            _strlen 29B8  
                          _strstr 26AA             ___ftmul@f3_as_product 0030  
        __size_of_ESP8266_BuildAP 0052            __end_of_translate_flex 0C26  
                       ??_isdigit 0012                      __mediumconst 7DFA  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_sprintf 0028  
                       ??_strncmp 001E                        __accesstop 0080  
         __end_of__initialization 29AA                    ??_initial_UART 0012  
                      ___ftadd@f1 001A                        ___ftadd@f2 001D  
                   ___rparam_used 000001                        ___ftdiv@f1 0026  
                      ___ftdiv@f2 0029                        ___ftdiv@f3 0030  
                 _timer_0_initial 2C08    KalmanFilter_2@ProcessNiose_Q_2 0038  
  KalmanFilter_8@ProcessNiose_Q_8 0038                        ___ftneg@f1 0012  
                      ___ftmul@f1 0026                        ___ftmul@f2 0029  
                      ___fttol@f1 0056                    __pcstackCOMRAM 0001  
           __size_of_ESP8266_Uart 0072                        ___lwtoft@c 001A  
       KalmanFilter_7@ResrcData_7 0035                   ?_translate_flex 005A  
                    sprintf@width 003C                        __pbssBANK0 00FA  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
        ESP8266_Link_Server@F4045 0200                    _ESP8266_Server 22A4  
                    _ESP8266_Uart 27B0                __CFG_CCP2MX$PORTBE 000000  
            __end_of_GPIO_initial 2BF8                           ?___wmul 0012  
                 ESP8266_Uart@cmd 0012                     ??_adc_initial 0012  
                       ?___ftpack 0012                 ??_ESP8266_AT_Test 002E  
                         ?_strchr 0012                           ?_strcpy 0012  
                         ?_strlen 0012                         ?___lwtoft 001A  
                         ?_strstr 0021         KalmanFilter_8@ResrcData_8 0035  
                         _AP_MODE 2A2C                         ?_delay_ms 0014  
               ESP8266_Uart@index 0016                 ??_ESP8266_BuildAP 0047  
          __end_of_ESP8266_Server 237C           __end_of_timer_0_initial 2C18  
  KalmanFilter_0@MeasureNoise_R_0 003B    KalmanFilter_6@MeasureNoise_R_6 003B  
                         __Hparam 0000                           __Lparam 0000  
                         ___awdiv 2626                           ___ftadd 0C26  
                         ___awmod 2822                           ___ftdiv 21BE  
                         ___ftneg 2B50                   __size_of___wmul 0026  
                         ___ftmul 20CA                           ___fttol 1D86  
                         ___lwdiv 28E4                           ___lwmod 2936  
              _oclillator_initial 2C18                           __pcinit 2978  
                      ??___ftpack 0017                           __ramtop 0600  
         __size_of_KalmanFilter_0 0192           __size_of_KalmanFilter_1 0192  
         __size_of_KalmanFilter_2 0192           __size_of_KalmanFilter_3 0192  
         __size_of_KalmanFilter_4 0192           __size_of_KalmanFilter_5 0192  
         __size_of_KalmanFilter_6 0192           __size_of_KalmanFilter_7 0192  
         __size_of_KalmanFilter_8 0192           __size_of_KalmanFilter_9 0192  
                         __ptext0 1EB4                           __ptext1 08B4  
                         __ptext2 2B2C                           __ptext3 1D86  
                         __ptext4 2626                           __ptext5 0DD2  
                         __ptext6 0F64                           __ptext7 10F6  
                         __ptext8 1288                           __ptext9 141A  
                      ??___lwtoft 001D                         _T0CONbits 000FD5  
            __end_of_initial_UART 2B96                   __size_of_strchr 0036  
     __size_of_ESP8266_SendString 00B0                   __size_of_strcpy 002E  
       KalmanFilter_9@ResrcData_9 0035                   __size_of_strlen 003E  
               __end_of_hexpowers 7E19                   __size_of_strstr 0084  
                         _dpowers 7E07          ?_ESP8266_Net_Mode_Choose 0001  
                       _T2CONbits 000FCA    KalmanFilter_3@ProcessNiose_Q_3 0038  
                         _isdigit 2B96    KalmanFilter_9@ProcessNiose_Q_9 0038  
                ___awmod@dividend 0012               ?_oclillator_initial 0001  
                      ??_delay_ms 0016               __end_of_adc_initial 2AE0  
                         _sprintf 0012                           main@tem 01DC  
                         _strncmp 272E                    __pintcode_body 1FC2  
                 ?_ESP8266_Server 0001                        delay_ms@ms 0014  
            end_of_initialization 29AA                 __end_of_octpowers 7E07  
        ?_timer_intrrupt_initinal 0001                     __Lmediumconst 7DFA  
                         int_func 1FC2            KalmanFilter_0@p_last_0 01A4  
                   ??_ESP8266_Cmd 002D              ??_oclillator_initial 0012  
                   ??_ESP8266_Rst 002E            KalmanFilter_1@p_last_1 01A1  
                       _RCSTAbits 000FAB                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
          KalmanFilter_0@x_last_0 0062            KalmanFilter_2@p_last_2 019E  
                         strlen@s 0012            KalmanFilter_1@x_last_1 005F  
          KalmanFilter_3@p_last_3 019B                         _PORTDbits 000F83  
          KalmanFilter_2@x_last_2 005C            KalmanFilter_4@p_last_4 0198  
          KalmanFilter_3@x_last_3 00FD            KalmanFilter_5@p_last_5 0192  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
          KalmanFilter_4@x_last_4 00FA            KalmanFilter_6@p_last_6 018C  
                ?_timer_0_initial 0001            KalmanFilter_5@x_last_5 0195  
          KalmanFilter_7@p_last_7 0186             __size_of_GPIO_initial 0012  
                     ___ftdiv@exp 0033                         _TXSTAbits 000FAC  
          KalmanFilter_6@x_last_6 018F            KalmanFilter_8@p_last_8 0180  
          KalmanFilter_7@x_last_7 0189            KalmanFilter_9@p_last_9 017A  
                     ___ftmul@exp 002F            KalmanFilter_8@x_last_8 0183  
                 KalmanFilter_0@Q 0041                   KalmanFilter_0@R 003E  
                 KalmanFilter_1@Q 0041                   KalmanFilter_1@R 003E  
                 KalmanFilter_2@Q 0041                   KalmanFilter_2@R 003E  
                 KalmanFilter_3@Q 0041                   KalmanFilter_3@R 003E  
                 KalmanFilter_4@Q 0041                   KalmanFilter_4@R 003E  
                 KalmanFilter_5@Q 0041                   KalmanFilter_5@R 003E  
                 KalmanFilter_6@Q 0041                   KalmanFilter_6@R 003E  
                 KalmanFilter_7@Q 0041                   KalmanFilter_7@R 003E  
                 KalmanFilter_8@Q 0041                   KalmanFilter_8@R 003E  
                 KalmanFilter_9@Q 0041                   KalmanFilter_9@R 003E  
          ESP8266_SendString@bRet 00A0               __end_of_ESP8266_Cmd 243C  
 __end_of_ESP8266_Net_Mode_Choose 2626                  ??_translate_flex 008B  
                  __end_of___wmul 2B2C            ESP8266_SendString@cStr 008C  
             __end_of_ESP8266_Rst 2B06    KalmanFilter_1@MeasureNoise_R_1 003B  
                     _BAUDCONbits 000FB8            ESP8266_SendString@pStr 0041  
          ESP8266_SendString@ucId 00A2    KalmanFilter_7@MeasureNoise_R_7 003B  
          KalmanFilter_9@x_last_9 017D                       _adc_initial 2AB8  
                  __end_of_strchr 2A2C                    __end_of_strcpy 2A8C  
                  __end_of_strlen 29F6                    __end_of_strstr 272E  
             start_initialization 2978                      _GPIO_initial 2BE6  
  KalmanFilter_4@ProcessNiose_Q_4 0038                   _ESP8266_AT_Test 2A8C  
                        ??___wmul 0016             __size_of_initial_UART 0022  
                __CFG_LPT1OSC$OFF 000000                    _KalmanFilter_0 1BF4  
                  _KalmanFilter_1 1A62                    _KalmanFilter_2 18D0  
                  _KalmanFilter_3 173E                    _KalmanFilter_4 15AC  
                  _KalmanFilter_5 141A                    _KalmanFilter_6 1288  
                  _KalmanFilter_7 10F6                    _KalmanFilter_8 0F64  
                  _KalmanFilter_9 0DD2                   _ESP8266_BuildAP 2892  
                        ??_strchr 0016                          ??_strcpy 0016  
                        ??_strlen 0014                          ??_strstr 0025  
                        ?_AP_MODE 0001                 __size_of___ftpack 00AE  
     ESP8266_Net_Mode_Choose@MODE 002E                       __pbssCOMRAM 005C  
               __size_of___lwtoft 0024                     __pcstackBANK0 0080  
                   __pcstackBANK1 01DC                      _isdigit$1762 0013  
                   _str1_1esp8266 0100                 __size_of_delay_ms 001C  
                     sprintf@flag 003F                       sprintf@prec 003B  
                    _initial_UART 2B74                       _ESP8266_Cmd 237C  
                ___lwdiv@dividend 0012                       _ESP8266_Rst 2AE0  
                       __pintcode 0008                     __pmediumconst 7DFA  
                        ?___awdiv 0012                          ?___ftadd 001A  
        ESP8266_BuildAP@pPassWord 0043                          ?___awmod 0012  
          __end_of_KalmanFilter_0 1D86            __end_of_KalmanFilter_1 1BF4  
          __end_of_KalmanFilter_2 1A62                          ?___ftdiv 0026  
          __end_of_KalmanFilter_3 18D0            __end_of_KalmanFilter_4 173E  
          __end_of_KalmanFilter_5 15AC            __end_of_KalmanFilter_6 141A  
          __end_of_KalmanFilter_7 1288            __end_of_KalmanFilter_8 10F6  
          __end_of_KalmanFilter_9 0F64                          ?___ftneg 0012  
                        ?___ftmul 0026                          ?___fttol 0056  
                   ?_Delay10KTCYx 0001                          ?___lwdiv 0012  
                        ?___lwmod 0019               _KalmanFilter_0$2183 0047  
             _KalmanFilter_1$2184 0047               _KalmanFilter_2$2185 0047  
             _KalmanFilter_3$2186 0047               _KalmanFilter_4$2187 0047  
             _KalmanFilter_5$2188 0047               _KalmanFilter_6$2189 0047  
             _KalmanFilter_7$2190 0047               _KalmanFilter_8$2191 0047  
             _KalmanFilter_9$2192 0047               KalmanFilter_0@p_mid 0053  
             KalmanFilter_0@p_now 0044               KalmanFilter_1@p_mid 0053  
             KalmanFilter_1@p_now 0044               KalmanFilter_2@p_mid 0053  
             KalmanFilter_0@x_mid 0050               KalmanFilter_0@x_now 004A  
             KalmanFilter_2@p_now 0044               KalmanFilter_3@p_mid 0053  
             KalmanFilter_1@x_mid 0050               KalmanFilter_1@x_now 004A  
             KalmanFilter_3@p_now 0044               KalmanFilter_4@p_mid 0053  
             KalmanFilter_2@x_mid 0050               KalmanFilter_2@x_now 004A  
             KalmanFilter_4@p_now 0044               KalmanFilter_5@p_mid 0053  
             KalmanFilter_3@x_mid 0050               KalmanFilter_3@x_now 004A  
             KalmanFilter_5@p_now 0044               KalmanFilter_6@p_mid 0053  
             KalmanFilter_4@x_mid 0050               KalmanFilter_4@x_now 004A  
             KalmanFilter_6@p_now 0044               KalmanFilter_7@p_mid 0053  
             KalmanFilter_5@x_mid 0050               KalmanFilter_5@x_now 004A  
             KalmanFilter_7@p_now 0044               KalmanFilter_8@p_mid 0053  
             KalmanFilter_6@x_mid 0050               KalmanFilter_6@x_now 004A  
             KalmanFilter_8@p_now 0044               KalmanFilter_9@p_mid 0053  
             KalmanFilter_7@x_mid 0050               KalmanFilter_7@x_now 004A  
             KalmanFilter_9@p_now 0044               KalmanFilter_8@x_mid 0050  
             KalmanFilter_8@x_now 004A               KalmanFilter_9@x_mid 0050  
                        ?_isdigit 0001               KalmanFilter_9@x_now 004A  
                ??_ESP8266_Server 0047                         _hexpowers 7E11  
                ___lwdiv@quotient 0017                          ?_sprintf 001E  
                        ?_strncmp 0018           __end_of_ESP8266_AT_Test 2AB8  
  KalmanFilter_2@MeasureNoise_R_2 003B    KalmanFilter_8@MeasureNoise_R_8 003B  
                  ___wmul@product 0016  __size_of_ESP8266_Net_Mode_Choose 008C  
                        _LATCbits 000F8B                         _octpowers 7DFB  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
         __end_of_ESP8266_BuildAP 28E4                          _RCONbits 000FD0  
                __CFG_WDTPS$32768 000000                    ??_Delay10KTCYx 0012  
__size_of_timer_intrrupt_initinal 0010                   ?_KalmanFilter_0 0035  
                 ?_KalmanFilter_1 0035                   ?_KalmanFilter_2 0035  
                 ?_KalmanFilter_3 0035                   ?_KalmanFilter_4 0035  
                 ?_KalmanFilter_5 0035                   ?_KalmanFilter_6 0035  
                 ?_KalmanFilter_7 0035                   ?_KalmanFilter_8 0035  
                 ?_KalmanFilter_9 0035        __end_of_ESP8266_SendString 24EC  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                      _ADCON2bits 000FC0                 ___wmul@multiplier 0012  
                     _bounce_time 0069    KalmanFilter_5@ProcessNiose_Q_5 0038  
                __size_of_AP_MODE 0032                  Delay10KTCYx@unit 0013  
           ESP8266_SendString@tem 0080                          __Hrparam 0000  
     __size_of_oclillator_initial 0008                          __Lrparam 0000  
              __CFG_BOREN$SBORDIS 000000                  __size_of___awdiv 0084  
                __size_of___ftadd 01AC                  __size_of___awmod 0070  
                __size_of___ftdiv 00E6                  __size_of___ftneg 0024  
                __size_of___ftmul 00F4                  __size_of___fttol 012E  
       KalmanFilter_0@ResrcData_0 0035                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042                          ___ftpack 24EC  
                    ?_adc_initial 0001                          ___lwtoft 2B2C  
                      sprintf@idx 002C                        sprintf@len 0035  
                      sprintf@val 0039                  __size_of_isdigit 001E  
                        _delay_ms 2BB4                   ___lwdiv@divisor 0014  
                 ___lwdiv@counter 0016                          __ptext10 15AC  
                        __ptext11 173E                          __ptext20 2BF8  
                        __ptext12 18D0                          __ptext21 2C08  
                        __ptext13 1A62                          __ptext30 2A8C  
                        __ptext22 2C18                          __ptext14 1BF4  
                        __ptext31 2A2C                          __ptext23 2B74  
                        __ptext15 2B50                          __ptext40 237C  
                        __ptext32 259A                          __ptext24 2AB8  
                        __ptext16 20CA                          __ptext41 26AA  
                        __ptext33 243C                          __ptext25 2822  
                        __ptext17 21BE                          __ptext42 272E  
                        __ptext34 2A5E                          __ptext26 2BE6  
                        __ptext18 0C26                          __ptext43 29B8  
                        __ptext35 0012                          __ptext27 22A4  
                        __ptext19 24EC                          __ptext44 29F6  
                        __ptext36 2B96                          __ptext28 2AE0  
                        __ptext45 2BB4                          __ptext37 2B06  
                        __ptext29 2892                          __ptext46 2BD0  
                        __ptext38 2936                          __ptext47 27B0  
                        __ptext39 28E4                  __size_of_sprintf 08A2  
                   __size_of_UART 20C2                  __size_of_strncmp 0082  
                      strcpy@from 0014                  ?_ESP8266_AT_Test 0001  
                   __size_of_main 010E               ESP8266_Cmd@waittime 002B  
                      strncmp@len 001C                     ?_ESP8266_Uart 0012  
        __size_of_timer_0_initial 0010                  ?_ESP8266_BuildAP 0041  
                        int$flags 006E                 _strPc_Fram_Record 0264  
  KalmanFilter_3@MeasureNoise_R_3 003B         KalmanFilter_1@ResrcData_1 0035  
  KalmanFilter_9@MeasureNoise_R_9 003B                        _INTCONbits 000FF2  
                        isdigit@c 0014              __end_of_Delay10KTCYx 2BE6  
                        intlevel2 0000                         sprintf@ap 0037  
                       sprintf@cp 0033                         sprintf@sp 001E  
         _ESP8266_Net_Mode_Choose 259A                         strchr@chr 0014  
                ___lwmod@dividend 0019                         strchr@ptr 0012  
                  ??_ESP8266_Uart 0014     ESP8266_SendString@ulStrLength 0043  
  KalmanFilter_0@ProcessNiose_Q_0 0038    KalmanFilter_6@ProcessNiose_Q_6 0038  
                       strncmp@s1 0018                         strncmp@s2 001A  
                    ?_ESP8266_Cmd 0025                        _OSCCONbits 000FD3  
                    ?_ESP8266_Rst 0001           _timer_intrrupt_initinal 2BF8  
       KalmanFilter_2@ResrcData_2 0035                          sprintf@c 003E  
                        sprintf@f 0020                   ___lwmod@divisor 001B  
                        strcpy@cp 0016                          strlen@cp 0016  
                        strcpy@to 0012                   ___lwmod@counter 001D  
                    main@AD_total 01E7            _strEsp8266_Fram_Record 01A8  
                        strstr@s1 0021                          strstr@s2 0023  
         __size_of_translate_flex 0372        ESP8266_BuildAP@enunPsdMode 0045  
                ??_KalmanFilter_0 003E                  ??_KalmanFilter_1 003E  
                ??_KalmanFilter_2 003E                  ??_KalmanFilter_3 003E  
                ??_KalmanFilter_4 003E                  ??_KalmanFilter_5 003E  
                ??_KalmanFilter_6 003E                  ??_KalmanFilter_7 003E  
                ??_KalmanFilter_8 003E                  ??_KalmanFilter_9 003E  
