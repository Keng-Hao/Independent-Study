

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Mar 04 18:37:58 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           ; Version 1.41
    69                           ; Generated 25/01/2017 GMT
    70                           ; 
    71                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4520 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     
   103                           	psect	mediumconst
   104  007DFA                     __pmediumconst:
   105                           	opt stack 0
   106  007DFA  00                 	db	0
   107  007DFB                     _octpowers:
   108                           	opt stack 0
   109  007DFB  0001               	dw	1
   110  007DFD  0008               	dw	8
   111  007DFF  0040               	dw	64
   112  007E01  0200               	dw	512
   113  007E03  1000               	dw	4096
   114  007E05  8000               	dw	32768
   115  007E07                     __end_of_octpowers:
   116                           	opt stack 0
   117  007E07                     _dpowers:
   118                           	opt stack 0
   119  007E07  0001               	dw	1
   120  007E09  000A               	dw	10
   121  007E0B  0064               	dw	100
   122  007E0D  03E8               	dw	1000
   123  007E0F  2710               	dw	10000
   124  007E11                     __end_of_dpowers:
   125                           	opt stack 0
   126  007E11                     _hexpowers:
   127                           	opt stack 0
   128  007E11  0001               	dw	1
   129  007E13  0010               	dw	16
   130  007E15  0100               	dw	256
   131  007E17  1000               	dw	4096
   132  007E19                     __end_of_hexpowers:
   133                           	opt stack 0
   134  0000                     _LATCbits	set	3979
   135  0000                     _ADRESH	set	4036
   136  0000                     _ADRESL	set	4035
   137  0000                     _RCREG	set	4014
   138  0000                     _TXREG	set	4013
   139  0000                     _SPBRG	set	4015
   140  0000                     _SPBRGH	set	4016
   141  0000                     _BAUDCONbits	set	4024
   142  0000                     _RCSTAbits	set	4011
   143  0000                     _TXSTAbits	set	4012
   144  0000                     _ADCON2bits	set	4032
   145  0000                     _ADCON1bits	set	4033
   146  0000                     _PIR1bits	set	3998
   147  0000                     _PIE1bits	set	3997
   148  0000                     _INTCONbits	set	4082
   149  0000                     _RCONbits	set	4048
   150  0000                     _T0CONbits	set	4053
   151  0000                     _T2CONbits	set	4042
   152  0000                     _PR2	set	4043
   153  0000                     _OSCCONbits	set	4051
   154  0000                     _TRISC	set	3988
   155  0000                     _LATD	set	3980
   156  0000                     _PORTD	set	3971
   157  0000                     _TRISD	set	3989
   158  0000                     _ADCON0bits	set	4034
   159  0000                     _TRMT	set	32097
   160  0000                     _TXIF	set	31988
   161  007E19                     STR_20:
   162  007E19  41                 	db	65	;'A'
   163  007E1A  54                 	db	84	;'T'
   164  007E1B  2B                 	db	43
   165  007E1C  43                 	db	67	;'C'
   166  007E1D  57                 	db	87	;'W'
   167  007E1E  53                 	db	83	;'S'
   168  007E1F  41                 	db	65	;'A'
   169  007E20  50                 	db	80	;'P'
   170  007E21  3D                 	db	61	;'='
   171  007E22  22                 	db	34
   172  007E23  25                 	db	37
   173  007E24  73                 	db	115	;'s'
   174  007E25  22                 	db	34
   175  007E26  2C                 	db	44
   176  007E27  22                 	db	34
   177  007E28  25                 	db	37
   178  007E29  73                 	db	115	;'s'
   179  007E2A  22                 	db	34
   180  007E2B  2C                 	db	44
   181  007E2C  31                 	db	49	;'1'
   182  007E2D  2C                 	db	44
   183  007E2E  25                 	db	37
   184  007E2F  73                 	db	115	;'s'
   185  007E30  0D                 	db	13
   186  007E31  0A                 	db	10
   187  007E32  00                 	db	0
   188  007E33  41                 	db	65	;'A'
   189  007E34  54                 	db	84	;'T'
   190  007E35  2B                 	db	43
   191  007E36  55                 	db	85	;'U'
   192  007E37  41                 	db	65	;'A'
   193  007E38  52                 	db	82	;'R'
   194  007E39  54                 	db	84	;'T'
   195  007E3A  3D                 	db	61	;'='
   196  007E3B  31                 	db	49	;'1'
   197  007E3C  31                 	db	49	;'1'
   198  007E3D  35                 	db	53	;'5'
   199  007E3E  32                 	db	50	;'2'
   200  007E3F  30                 	db	48	;'0'
   201  007E40  30                 	db	48	;'0'
   202  007E41  2C                 	db	44
   203  007E42  38                 	db	56	;'8'
   204  007E43  2C                 	db	44
   205  007E44  31                 	db	49	;'1'
   206  007E45  2C                 	db	44
   207  007E46  30                 	db	48	;'0'
   208  007E47  2C                 	db	44
   209  007E48  30                 	db	48	;'0'
   210  007E49  0D                 	db	13
   211  007E4A  0A                 	db	10
   212  007E4B  00                 	db	0
   213  007E4C  41                 	db	65	;'A'
   214  007E4D  54                 	db	84	;'T'
   215  007E4E  2B                 	db	43
   216  007E4F  55                 	db	85	;'U'
   217  007E50  41                 	db	65	;'A'
   218  007E51  52                 	db	82	;'R'
   219  007E52  54                 	db	84	;'T'
   220  007E53  3D                 	db	61	;'='
   221  007E54  39                 	db	57	;'9'
   222  007E55  36                 	db	54	;'6'
   223  007E56  30                 	db	48	;'0'
   224  007E57  30                 	db	48	;'0'
   225  007E58  2C                 	db	44
   226  007E59  38                 	db	56	;'8'
   227  007E5A  2C                 	db	44
   228  007E5B  31                 	db	49	;'1'
   229  007E5C  2C                 	db	44
   230  007E5D  30                 	db	48	;'0'
   231  007E5E  2C                 	db	44
   232  007E5F  30                 	db	48	;'0'
   233  007E60  0D                 	db	13
   234  007E61  0A                 	db	10
   235  007E62  00                 	db	0
   236  007E63                     STR_45:
   237  007E63  41                 	db	65	;'A'
   238  007E64  54                 	db	84	;'T'
   239  007E65  2B                 	db	43
   240  007E66  43                 	db	67	;'C'
   241  007E67  49                 	db	73	;'I'
   242  007E68  50                 	db	80	;'P'
   243  007E69  53                 	db	83	;'S'
   244  007E6A  45                 	db	69	;'E'
   245  007E6B  52                 	db	82	;'R'
   246  007E6C  56                 	db	86	;'V'
   247  007E6D  45                 	db	69	;'E'
   248  007E6E  52                 	db	82	;'R'
   249  007E6F  3D                 	db	61	;'='
   250  007E70  31                 	db	49	;'1'
   251  007E71  2C                 	db	44
   252  007E72  35                 	db	53	;'5'
   253  007E73  30                 	db	48	;'0'
   254  007E74  30                 	db	48	;'0'
   255  007E75  30                 	db	48	;'0'
   256  007E76  0D                 	db	13
   257  007E77  0A                 	db	10
   258  007E78  00                 	db	0
   259  007E79  41                 	db	65	;'A'
   260  007E7A  54                 	db	84	;'T'
   261  007E7B  2B                 	db	43
   262  007E7C  43                 	db	67	;'C'
   263  007E7D  57                 	db	87	;'W'
   264  007E7E  4A                 	db	74	;'J'
   265  007E7F  41                 	db	65	;'A'
   266  007E80  50                 	db	80	;'P'
   267  007E81  3D                 	db	61	;'='
   268  007E82  22                 	db	34
   269  007E83  25                 	db	37
   270  007E84  73                 	db	115	;'s'
   271  007E85  22                 	db	34
   272  007E86  2C                 	db	44
   273  007E87  22                 	db	34
   274  007E88  25                 	db	37
   275  007E89  73                 	db	115	;'s'
   276  007E8A  22                 	db	34
   277  007E8B  0D                 	db	13
   278  007E8C  0A                 	db	10
   279  007E8D  00                 	db	0
   280  007E8E  41                 	db	65	;'A'
   281  007E8F  54                 	db	84	;'T'
   282  007E90  2B                 	db	43
   283  007E91  43                 	db	67	;'C'
   284  007E92  49                 	db	73	;'I'
   285  007E93  50                 	db	80	;'P'
   286  007E94  53                 	db	83	;'S'
   287  007E95  54                 	db	84	;'T'
   288  007E96  41                 	db	65	;'A'
   289  007E97  52                 	db	82	;'R'
   290  007E98  54                 	db	84	;'T'
   291  007E99  3D                 	db	61	;'='
   292  007E9A  25                 	db	37
   293  007E9B  64                 	db	100	;'d'
   294  007E9C  2C                 	db	44
   295  007E9D  25                 	db	37
   296  007E9E  73                 	db	115	;'s'
   297  007E9F  0D                 	db	13
   298  007EA0  0A                 	db	10
   299  007EA1  00                 	db	0
   300  007EA2                     STR_1:
   301  007EA2  41                 	db	65	;'A'
   302  007EA3  54                 	db	84	;'T'
   303  007EA4  2B                 	db	43
   304  007EA5  43                 	db	67	;'C'
   305  007EA6  49                 	db	73	;'I'
   306  007EA7  50                 	db	80	;'P'
   307  007EA8  53                 	db	83	;'S'
   308  007EA9  45                 	db	69	;'E'
   309  007EAA  4E                 	db	78	;'N'
   310  007EAB  44                 	db	68	;'D'
   311  007EAC  3D                 	db	61	;'='
   312  007EAD  25                 	db	37
   313  007EAE  64                 	db	100	;'d'
   314  007EAF  2C                 	db	44
   315  007EB0  25                 	db	37
   316  007EB1  64                 	db	100	;'d'
   317  007EB2  0D                 	db	13
   318  007EB3  0A                 	db	10
   319  007EB4  00                 	db	0
   320  007EB5                     STR_65:
   321  007EB5  30                 	db	48	;'0'
   322  007EB6  31                 	db	49	;'1'
   323  007EB7  32                 	db	50	;'2'
   324  007EB8  33                 	db	51	;'3'
   325  007EB9  34                 	db	52	;'4'
   326  007EBA  35                 	db	53	;'5'
   327  007EBB  36                 	db	54	;'6'
   328  007EBC  37                 	db	55	;'7'
   329  007EBD  38                 	db	56	;'8'
   330  007EBE  39                 	db	57	;'9'
   331  007EBF  41                 	db	65	;'A'
   332  007EC0  42                 	db	66	;'B'
   333  007EC1  43                 	db	67	;'C'
   334  007EC2  44                 	db	68	;'D'
   335  007EC3  45                 	db	69	;'E'
   336  007EC4  46                 	db	70	;'F'
   337  007EC5  00                 	db	0
   338  007EC6                     STR_66:
   339  007EC6  30                 	db	48	;'0'
   340  007EC7  31                 	db	49	;'1'
   341  007EC8  32                 	db	50	;'2'
   342  007EC9  33                 	db	51	;'3'
   343  007ECA  34                 	db	52	;'4'
   344  007ECB  35                 	db	53	;'5'
   345  007ECC  36                 	db	54	;'6'
   346  007ECD  37                 	db	55	;'7'
   347  007ECE  38                 	db	56	;'8'
   348  007ECF  39                 	db	57	;'9'
   349  007ED0  61                 	db	97	;'a'
   350  007ED1  62                 	db	98	;'b'
   351  007ED2  63                 	db	99	;'c'
   352  007ED3  64                 	db	100	;'d'
   353  007ED4  65                 	db	101	;'e'
   354  007ED5  66                 	db	102	;'f'
   355  007ED6  00                 	db	0
   356  007ED7  41                 	db	65	;'A'
   357  007ED8  54                 	db	84	;'T'
   358  007ED9  2B                 	db	43
   359  007EDA  43                 	db	67	;'C'
   360  007EDB  49                 	db	73	;'I'
   361  007EDC  50                 	db	80	;'P'
   362  007EDD  53                 	db	83	;'S'
   363  007EDE  54                 	db	84	;'T'
   364  007EDF  41                 	db	65	;'A'
   365  007EE0  52                 	db	82	;'R'
   366  007EE1  54                 	db	84	;'T'
   367  007EE2  3D                 	db	61	;'='
   368  007EE3  25                 	db	37
   369  007EE4  73                 	db	115	;'s'
   370  007EE5  0D                 	db	13
   371  007EE6  0A                 	db	10
   372  007EE7  00                 	db	0
   373  007EE8                     STR_41:
   374  007EE8  41                 	db	65	;'A'
   375  007EE9  54                 	db	84	;'T'
   376  007EEA  2B                 	db	43
   377  007EEB  43                 	db	67	;'C'
   378  007EEC  49                 	db	73	;'I'
   379  007EED  50                 	db	80	;'P'
   380  007EEE  4D                 	db	77	;'M'
   381  007EEF  4F                 	db	79	;'O'
   382  007EF0  44                 	db	68	;'D'
   383  007EF1  45                 	db	69	;'E'
   384  007EF2  3D                 	db	61	;'='
   385  007EF3  30                 	db	48	;'0'
   386  007EF4  0D                 	db	13
   387  007EF5  0A                 	db	10
   388  007EF6  00                 	db	0
   389  007EF7  41                 	db	65	;'A'
   390  007EF8  54                 	db	84	;'T'
   391  007EF9  2B                 	db	43
   392  007EFA  43                 	db	67	;'C'
   393  007EFB  49                 	db	73	;'I'
   394  007EFC  50                 	db	80	;'P'
   395  007EFD  4D                 	db	77	;'M'
   396  007EFE  4F                 	db	79	;'O'
   397  007EFF  44                 	db	68	;'D'
   398  007F00  45                 	db	69	;'E'
   399  007F01  3D                 	db	61	;'='
   400  007F02  31                 	db	49	;'1'
   401  007F03  0D                 	db	13
   402  007F04  0A                 	db	10
   403  007F05  00                 	db	0
   404  007F06                     STR_22:
   405  007F06  22                 	db	34
   406  007F07  25                 	db	37
   407  007F08  73                 	db	115	;'s'
   408  007F09  22                 	db	34
   409  007F0A  2C                 	db	44
   410  007F0B  22                 	db	34
   411  007F0C  25                 	db	37
   412  007F0D  73                 	db	115	;'s'
   413  007F0E  22                 	db	34
   414  007F0F  2C                 	db	44
   415  007F10  25                 	db	37
   416  007F11  73                 	db	115	;'s'
   417  007F12  0D                 	db	13
   418  007F13  0A                 	db	10
   419  007F14  00                 	db	0
   420  007F15  30                 	db	48	;'0'
   421  007F16  2C                 	db	44
   422  007F17  43                 	db	67	;'C'
   423  007F18  4F                 	db	79	;'O'
   424  007F19  4E                 	db	78	;'N'
   425  007F1A  4E                 	db	78	;'N'
   426  007F1B  45                 	db	69	;'E'
   427  007F1C  43                 	db	67	;'C'
   428  007F1D  54                 	db	84	;'T'
   429  007F1E  20                 	db	32
   430  007F1F  46                 	db	70	;'F'
   431  007F20  41                 	db	65	;'A'
   432  007F21  49                 	db	73	;'I'
   433  007F22  4C                 	db	76	;'L'
   434  007F23  00                 	db	0
   435  007F24                     STR_39:
   436  007F24  41                 	db	65	;'A'
   437  007F25  54                 	db	84	;'T'
   438  007F26  2B                 	db	43
   439  007F27  43                 	db	67	;'C'
   440  007F28  49                 	db	73	;'I'
   441  007F29  50                 	db	80	;'P'
   442  007F2A  4D                 	db	77	;'M'
   443  007F2B  55                 	db	85	;'U'
   444  007F2C  58                 	db	88	;'X'
   445  007F2D  3D                 	db	61	;'='
   446  007F2E  30                 	db	48	;'0'
   447  007F2F  0D                 	db	13
   448  007F30  0A                 	db	10
   449  007F31  00                 	db	0
   450  007F32                     STR_9:
   451  007F32  41                 	db	65	;'A'
   452  007F33  54                 	db	84	;'T'
   453  007F34  2B                 	db	43
   454  007F35  43                 	db	67	;'C'
   455  007F36  57                 	db	87	;'W'
   456  007F37  4D                 	db	77	;'M'
   457  007F38  4F                 	db	79	;'O'
   458  007F39  44                 	db	68	;'D'
   459  007F3A  45                 	db	69	;'E'
   460  007F3B  3D                 	db	61	;'='
   461  007F3C  31                 	db	49	;'1'
   462  007F3D  0D                 	db	13
   463  007F3E  0A                 	db	10
   464  007F3F  00                 	db	0
   465  007F40                     STR_43:
   466  007F40  41                 	db	65	;'A'
   467  007F41  54                 	db	84	;'T'
   468  007F42  2B                 	db	43
   469  007F43  43                 	db	67	;'C'
   470  007F44  49                 	db	73	;'I'
   471  007F45  50                 	db	80	;'P'
   472  007F46  4D                 	db	77	;'M'
   473  007F47  55                 	db	85	;'U'
   474  007F48  58                 	db	88	;'X'
   475  007F49  3D                 	db	61	;'='
   476  007F4A  31                 	db	49	;'1'
   477  007F4B  0D                 	db	13
   478  007F4C  0A                 	db	10
   479  007F4D  00                 	db	0
   480  007F4E                     STR_12:
   481  007F4E  41                 	db	65	;'A'
   482  007F4F  54                 	db	84	;'T'
   483  007F50  2B                 	db	43
   484  007F51  43                 	db	67	;'C'
   485  007F52  57                 	db	87	;'W'
   486  007F53  4D                 	db	77	;'M'
   487  007F54  4F                 	db	79	;'O'
   488  007F55  44                 	db	68	;'D'
   489  007F56  45                 	db	69	;'E'
   490  007F57  3D                 	db	61	;'='
   491  007F58  32                 	db	50	;'2'
   492  007F59  0D                 	db	13
   493  007F5A  0A                 	db	10
   494  007F5B  00                 	db	0
   495  007F5C                     STR_15:
   496  007F5C  41                 	db	65	;'A'
   497  007F5D  54                 	db	84	;'T'
   498  007F5E  2B                 	db	43
   499  007F5F  43                 	db	67	;'C'
   500  007F60  57                 	db	87	;'W'
   501  007F61  4D                 	db	77	;'M'
   502  007F62  4F                 	db	79	;'O'
   503  007F63  44                 	db	68	;'D'
   504  007F64  45                 	db	69	;'E'
   505  007F65  3D                 	db	61	;'='
   506  007F66  33                 	db	51	;'3'
   507  007F67  0D                 	db	13
   508  007F68  0A                 	db	10
   509  007F69  00                 	db	0
   510  007F6A                     STR_30:
   511  007F6A  41                 	db	65	;'A'
   512  007F6B  54                 	db	84	;'T'
   513  007F6C  2B                 	db	43
   514  007F6D  43                 	db	67	;'C'
   515  007F6E  57                 	db	87	;'W'
   516  007F6F  4D                 	db	77	;'M'
   517  007F70  4F                 	db	79	;'O'
   518  007F71  44                 	db	68	;'D'
   519  007F72  45                 	db	69	;'E'
   520  007F73  3F                 	db	63	;'?'
   521  007F74  0D                 	db	13
   522  007F75  0A                 	db	10
   523  007F76  00                 	db	0
   524  007F77  31                 	db	49	;'1'
   525  007F78  39                 	db	57	;'9'
   526  007F79  32                 	db	50	;'2'
   527  007F7A  2E                 	db	46
   528  007F7B  31                 	db	49	;'1'
   529  007F7C  36                 	db	54	;'6'
   530  007F7D  38                 	db	56	;'8'
   531  007F7E  2E                 	db	46
   532  007F7F  34                 	db	52	;'4'
   533  007F80  2E                 	db	46
   534  007F81  31                 	db	49	;'1'
   535  007F82  00                 	db	0
   536  007F83  41                 	db	65	;'A'
   537  007F84  54                 	db	84	;'T'
   538  007F85  2B                 	db	43
   539  007F86  43                 	db	67	;'C'
   540  007F87  57                 	db	87	;'W'
   541  007F88  51                 	db	81	;'Q'
   542  007F89  41                 	db	65	;'A'
   543  007F8A  50                 	db	80	;'P'
   544  007F8B  0D                 	db	13
   545  007F8C  0A                 	db	10
   546  007F8D  00                 	db	0
   547  007F8E                     STR_37:
   548  007F8E  7A                 	db	122	;'z'
   549  007F8F  78                 	db	120	;'x'
   550  007F90  34                 	db	52	;'4'
   551  007F91  35                 	db	53	;'5'
   552  007F92  32                 	db	50	;'2'
   553  007F93  32                 	db	50	;'2'
   554  007F94  33                 	db	51	;'3'
   555  007F95  33                 	db	51	;'3'
   556  007F96  31                 	db	49	;'1'
   557  007F97  00                 	db	0
   558  007F98  2B                 	db	43
   559  007F99  43                 	db	67	;'C'
   560  007F9A  57                 	db	87	;'W'
   561  007F9B  4D                 	db	77	;'M'
   562  007F9C  4F                 	db	79	;'O'
   563  007F9D  44                 	db	68	;'D'
   564  007F9E  45                 	db	69	;'E'
   565  007F9F  3A                 	db	58	;':'
   566  007FA0  31                 	db	49	;'1'
   567  007FA1  00                 	db	0
   568  007FA2                     STR_31:
   569  007FA2  2B                 	db	43
   570  007FA3  43                 	db	67	;'C'
   571  007FA4  57                 	db	87	;'W'
   572  007FA5  4D                 	db	77	;'M'
   573  007FA6  4F                 	db	79	;'O'
   574  007FA7  44                 	db	68	;'D'
   575  007FA8  45                 	db	69	;'E'
   576  007FA9  3A                 	db	58	;':'
   577  007FAA  32                 	db	50	;'2'
   578  007FAB  00                 	db	0
   579  007FAC                     STR_52:
   580  007FAC  30                 	db	48	;'0'
   581  007FAD  2C                 	db	44
   582  007FAE  43                 	db	67	;'C'
   583  007FAF  4F                 	db	79	;'O'
   584  007FB0  4E                 	db	78	;'N'
   585  007FB1  4E                 	db	78	;'N'
   586  007FB2  45                 	db	69	;'E'
   587  007FB3  43                 	db	67	;'C'
   588  007FB4  54                 	db	84	;'T'
   589  007FB5  00                 	db	0
   590  007FB6                     STR_11:
   591  007FB6  6E                 	db	110	;'n'
   592  007FB7  6F                 	db	111	;'o'
   593  007FB8  20                 	db	32
   594  007FB9  63                 	db	99	;'c'
   595  007FBA  68                 	db	104	;'h'
   596  007FBB  61                 	db	97	;'a'
   597  007FBC  6E                 	db	110	;'n'
   598  007FBD  67                 	db	103	;'g'
   599  007FBE  65                 	db	101	;'e'
   600  007FBF  00                 	db	0
   601  007FC0                     STR_6:
   602  007FC0  41                 	db	65	;'A'
   603  007FC1  54                 	db	84	;'T'
   604  007FC2  2B                 	db	43
   605  007FC3  52                 	db	82	;'R'
   606  007FC4  53                 	db	83	;'S'
   607  007FC5  54                 	db	84	;'T'
   608  007FC6  0D                 	db	13
   609  007FC7  0A                 	db	10
   610  007FC8  00                 	db	0
   611  007FC9                     STR_3:
   612  007FC9  53                 	db	83	;'S'
   613  007FCA  45                 	db	69	;'E'
   614  007FCB  4E                 	db	78	;'N'
   615  007FCC  44                 	db	68	;'D'
   616  007FCD  20                 	db	32
   617  007FCE  4F                 	db	79	;'O'
   618  007FCF  4B                 	db	75	;'K'
   619  007FD0  00                 	db	0
   620  007FD1                     STR_64:
   621  007FD1  28                 	db	40
   622  007FD2  6E                 	db	110	;'n'
   623  007FD3  75                 	db	117	;'u'
   624  007FD4  6C                 	db	108	;'l'
   625  007FD5  6C                 	db	108	;'l'
   626  007FD6  29                 	db	41
   627  007FD7  00                 	db	0
   628  007FD8                     STR_8:
   629  007FD8  72                 	db	114	;'r'
   630  007FD9  65                 	db	101	;'e'
   631  007FDA  61                 	db	97	;'a'
   632  007FDB  64                 	db	100	;'d'
   633  007FDC  79                 	db	121	;'y'
   634  007FDD  00                 	db	0
   635  007FDE                     STR_4:
   636  007FDE  41                 	db	65	;'A'
   637  007FDF  54                 	db	84	;'T'
   638  007FE0  0D                 	db	13
   639  007FE1  0A                 	db	10
   640  007FE2  00                 	db	0
   641  007FE3  35                 	db	53	;'5'
   642  007FE4  30                 	db	48	;'0'
   643  007FE5  30                 	db	48	;'0'
   644  007FE6  30                 	db	48	;'0'
   645  007FE7  00                 	db	0
   646  007FE8  4B                 	db	75	;'K'
   647  007FE9  65                 	db	101	;'e'
   648  007FEA  6E                 	db	110	;'n'
   649  007FEB  67                 	db	103	;'g'
   650  007FEC  00                 	db	0
   651  007FED                     STR_36:
   652  007FED  4B                 	db	75	;'K'
   653  007FEE  45                 	db	69	;'E'
   654  007FEF  4E                 	db	78	;'N'
   655  007FF0  00                 	db	0
   656  007FF1  54                 	db	84	;'T'
   657  007FF2  43                 	db	67	;'C'
   658  007FF3  50                 	db	80	;'P'
   659  007FF4  00                 	db	0
   660  007FF5  55                 	db	85	;'U'
   661  007FF6  44                 	db	68	;'D'
   662  007FF7  50                 	db	80	;'P'
   663  007FF8  00                 	db	0
   664  007FF9                     STR_2:
   665  007FF9  3E                 	db	62	;'>'
   666  007FFA  20                 	db	32
   667  007FFB  00                 	db	0
   668  007FFC                     STR_38:
   669  007FFC  34                 	db	52	;'4'
   670  007FFD  00                 	db	0
   671  0000                     
   672                           ; #config settings
   673  007FFE  00                 	db	0	; dummy byte at the end
   674  0000                     
   675                           	psect	cinit
   676  00296E                     __pcinit:
   677                           	opt stack 0
   678  00296E                     start_initialization:
   679                           	opt stack 0
   680  00296E                     __initialization:
   681                           	opt stack 0
   682                           
   683                           ; Clear objects allocated to BANK2 (152 bytes)
   684  00296E  EE02  F000         	lfsr	0,__pbssBANK2
   685  002972  0E98               	movlw	152
   686  002974                     clear_0:
   687  002974  6AEE               	clrf	postinc0,c
   688  002976  06E8               	decf	wreg,f,c
   689  002978  E1FD               	bnz	clear_0
   690                           
   691                           ; Clear objects allocated to BANK1 (220 bytes)
   692  00297A  EE01  F000         	lfsr	0,__pbssBANK1
   693  00297E  0EDC               	movlw	220
   694  002980                     clear_1:
   695  002980  6AEE               	clrf	postinc0,c
   696  002982  06E8               	decf	wreg,f,c
   697  002984  E1FD               	bnz	clear_1
   698                           
   699                           ; Clear objects allocated to BANK0 (6 bytes)
   700  002986  0100               	movlb	0
   701  002988  6BFF               	clrf	(__pbssBANK0+5)& (0+255),b
   702  00298A  6BFE               	clrf	(__pbssBANK0+4)& (0+255),b
   703  00298C  6BFD               	clrf	(__pbssBANK0+3)& (0+255),b
   704  00298E  6BFC               	clrf	(__pbssBANK0+2)& (0+255),b
   705  002990  6BFB               	clrf	(__pbssBANK0+1)& (0+255),b
   706  002992  6BFA               	clrf	__pbssBANK0& (0+255),b
   707                           
   708                           ; Clear objects allocated to COMRAM (18 bytes)
   709  002994  EE00  F05C         	lfsr	0,__pbssCOMRAM
   710  002998  0E12               	movlw	18
   711  00299A                     clear_2:
   712  00299A  6AEE               	clrf	postinc0,c
   713  00299C  06E8               	decf	wreg,f,c
   714  00299E  E1FD               	bnz	clear_2
   715  0029A0                     end_of_initialization:
   716                           	opt stack 0
   717  0029A0                     __end_of__initialization:
   718                           	opt stack 0
   719  0029A0  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   720  0029A2  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   721  0029A4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   722  0029A6  6EF8               	movwf	tblptru,c
   723  0029A8  0100               	movlb	0
   724  0029AA  EFDE  F00F         	goto	_main	;jump to C main() function
   725                           tblptru	equ	0xFF8
   726                           postinc0	equ	0xFEE
   727                           wreg	equ	0xFE8
   728                           
   729                           	psect	bssCOMRAM
   730  00005C                     __pbssCOMRAM:
   731                           	opt stack 0
   732  00005C                     KalmanFilter_2@x_last_2:
   733                           	opt stack 0
   734  00005C                     	ds	3
   735  00005F                     KalmanFilter_1@x_last_1:
   736                           	opt stack 0
   737  00005F                     	ds	3
   738  000062                     KalmanFilter_0@x_last_0:
   739                           	opt stack 0
   740  000062                     	ds	3
   741  000065                     _write:
   742                           	opt stack 0
   743  000065                     	ds	1
   744  000066                     _AD_L:
   745                           	opt stack 0
   746  000066                     	ds	1
   747  000067                     _time:
   748                           	opt stack 0
   749  000067                     	ds	1
   750  000068                     _count:
   751                           	opt stack 0
   752  000068                     	ds	1
   753  000069                     _bounce_time:
   754                           	opt stack 0
   755  000069                     	ds	1
   756  00006A                     _L_max:
   757                           	opt stack 0
   758  00006A                     	ds	1
   759  00006B                     _H_max:
   760                           	opt stack 0
   761  00006B                     	ds	1
   762  00006C                     _L:
   763                           	opt stack 0
   764  00006C                     	ds	1
   765  00006D                     _H:
   766                           	opt stack 0
   767  00006D                     	ds	1
   768                           tblptru	equ	0xFF8
   769                           postinc0	equ	0xFEE
   770                           wreg	equ	0xFE8
   771                           
   772                           	psect	bssBANK0
   773  0000FA                     __pbssBANK0:
   774                           	opt stack 0
   775  0000FA                     KalmanFilter_4@x_last_4:
   776                           	opt stack 0
   777  0000FA                     	ds	3
   778  0000FD                     KalmanFilter_3@x_last_3:
   779                           	opt stack 0
   780  0000FD                     	ds	3
   781                           tblptru	equ	0xFF8
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           
   785                           	psect	bssBANK1
   786  000100                     __pbssBANK1:
   787                           	opt stack 0
   788  000100                     _str1_1esp8266:
   789                           	opt stack 0
   790  000100                     	ds	51
   791  000133                     _strPc1_1_Fram_Record:
   792                           	opt stack 0
   793  000133                     	ds	51
   794  000166                     ESP8266_SendString@F4007:
   795                           	opt stack 0
   796  000166                     	ds	20
   797  00017A                     KalmanFilter_9@p_last_9:
   798                           	opt stack 0
   799  00017A                     	ds	3
   800  00017D                     KalmanFilter_9@x_last_9:
   801                           	opt stack 0
   802  00017D                     	ds	3
   803  000180                     KalmanFilter_8@p_last_8:
   804                           	opt stack 0
   805  000180                     	ds	3
   806  000183                     KalmanFilter_8@x_last_8:
   807                           	opt stack 0
   808  000183                     	ds	3
   809  000186                     KalmanFilter_7@p_last_7:
   810                           	opt stack 0
   811  000186                     	ds	3
   812  000189                     KalmanFilter_7@x_last_7:
   813                           	opt stack 0
   814  000189                     	ds	3
   815  00018C                     KalmanFilter_6@p_last_6:
   816                           	opt stack 0
   817  00018C                     	ds	3
   818  00018F                     KalmanFilter_6@x_last_6:
   819                           	opt stack 0
   820  00018F                     	ds	3
   821  000192                     KalmanFilter_5@p_last_5:
   822                           	opt stack 0
   823  000192                     	ds	3
   824  000195                     KalmanFilter_5@x_last_5:
   825                           	opt stack 0
   826  000195                     	ds	3
   827  000198                     KalmanFilter_4@p_last_4:
   828                           	opt stack 0
   829  000198                     	ds	3
   830  00019B                     KalmanFilter_3@p_last_3:
   831                           	opt stack 0
   832  00019B                     	ds	3
   833  00019E                     KalmanFilter_2@p_last_2:
   834                           	opt stack 0
   835  00019E                     	ds	3
   836  0001A1                     KalmanFilter_1@p_last_1:
   837                           	opt stack 0
   838  0001A1                     	ds	3
   839  0001A4                     KalmanFilter_0@p_last_0:
   840                           	opt stack 0
   841  0001A4                     	ds	3
   842  0001A7                     _AD_H:
   843                           	opt stack 0
   844  0001A7                     	ds	1
   845  0001A8                     _strEsp8266_Fram_Record:
   846                           	opt stack 0
   847  0001A8                     	ds	52
   848                           tblptru	equ	0xFF8
   849                           postinc0	equ	0xFEE
   850                           wreg	equ	0xFE8
   851                           
   852                           	psect	bssBANK2
   853  000200                     __pbssBANK2:
   854                           	opt stack 0
   855  000200                     ESP8266_Link_Server@F4045:
   856                           	opt stack 0
   857  000200                     	ds	100
   858  000264                     _strPc_Fram_Record:
   859                           	opt stack 0
   860  000264                     	ds	52
   861                           tblptru	equ	0xFF8
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           
   865                           	psect	cstackBANK1
   866  0001DC                     __pcstackBANK1:
   867                           	opt stack 0
   868  0001DC                     main@tem:
   869                           	opt stack 0
   870                           
   871                           ; 11 bytes @ 0x0
   872  0001DC                     	ds	11
   873  0001E7                     main@AD_total:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0xB
   877  0001E7                     	ds	2
   878                           tblptru	equ	0xFF8
   879                           postinc0	equ	0xFEE
   880                           wreg	equ	0xFE8
   881                           
   882                           	psect	cstackBANK0
   883  000080                     __pcstackBANK0:
   884                           	opt stack 0
   885  000080                     ??___fttol:
   886  000080                     ESP8266_SendString@tem:
   887                           	opt stack 0
   888  000080                     ESP8266_BuildAP@cCmd:
   889                           	opt stack 0
   890                           
   891                           ; 120 bytes @ 0x0
   892  000080                     	ds	5
   893  000085                     ___fttol@sign1:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x5
   897  000085                     	ds	1
   898  000086                     ___fttol@lval:
   899                           	opt stack 0
   900                           
   901                           ; 4 bytes @ 0x6
   902  000086                     	ds	4
   903  00008A                     ___fttol@exp1:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0xA
   907  00008A                     	ds	1
   908  00008B                     ??_translate_flex:
   909                           
   910                           ; 1 bytes @ 0xB
   911  00008B                     	ds	1
   912  00008C                     translate_flex@temp:
   913                           	opt stack 0
   914  00008C                     ESP8266_SendString@cStr:
   915                           	opt stack 0
   916                           
   917                           ; 20 bytes @ 0xC
   918  00008C                     	ds	1
   919  00008D                     translate_flex@Value:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0xD
   923  00008D                     	ds	19
   924  0000A0                     ESP8266_SendString@bRet:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x20
   928  0000A0                     	ds	2
   929  0000A2                     ESP8266_SendString@ucId:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x22
   933  0000A2                     	ds	86
   934  0000F8                     ??_main:
   935                           
   936                           ; 1 bytes @ 0x78
   937  0000F8                     	ds	2
   938                           tblptru	equ	0xFF8
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           
   942                           	psect	cstackCOMRAM
   943  000001                     __pcstackCOMRAM:
   944                           	opt stack 0
   945  000001                     ??_UART:
   946  000001                     
   947                           ; 1 bytes @ 0x0
   948  000001                     	ds	16
   949  000011                     UART@ch:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x10
   953  000011                     	ds	1
   954  000012                     ??_Delay10KTCYx:
   955  000012                     ??_isdigit:
   956  000012                     ?_strlen:
   957                           	opt stack 0
   958  000012                     ?_strchr:
   959                           	opt stack 0
   960  000012                     ?___wmul:
   961                           	opt stack 0
   962  000012                     ?___awdiv:
   963                           	opt stack 0
   964  000012                     ?___awmod:
   965                           	opt stack 0
   966  000012                     ?___lwdiv:
   967                           	opt stack 0
   968  000012                     ?___ftpack:
   969                           	opt stack 0
   970  000012                     ?___ftneg:
   971                           	opt stack 0
   972  000012                     ESP8266_Uart@cmd:
   973                           	opt stack 0
   974  000012                     ___wmul@multiplier:
   975                           	opt stack 0
   976  000012                     ___awdiv@dividend:
   977                           	opt stack 0
   978  000012                     ___awmod@dividend:
   979                           	opt stack 0
   980  000012                     ___lwdiv@dividend:
   981                           	opt stack 0
   982  000012                     strcpy@to:
   983                           	opt stack 0
   984  000012                     strchr@ptr:
   985                           	opt stack 0
   986  000012                     strlen@s:
   987                           	opt stack 0
   988  000012                     ___ftpack@arg:
   989                           	opt stack 0
   990  000012                     ___ftneg@f1:
   991                           	opt stack 0
   992                           
   993                           ; 3 bytes @ 0x11
   994  000012                     	ds	1
   995  000013                     Delay10KTCYx@unit:
   996                           	opt stack 0
   997  000013                     _isdigit$1600:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x12
  1001  000013                     	ds	1
  1002  000014                     ??_strlen:
  1003  000014                     ??_ESP8266_Uart:
  1004  000014                     isdigit@c:
  1005                           	opt stack 0
  1006  000014                     delay_ms@ms:
  1007                           	opt stack 0
  1008  000014                     ___wmul@multiplicand:
  1009                           	opt stack 0
  1010  000014                     ___awdiv@divisor:
  1011                           	opt stack 0
  1012  000014                     ___awmod@divisor:
  1013                           	opt stack 0
  1014  000014                     ___lwdiv@divisor:
  1015                           	opt stack 0
  1016  000014                     strcpy@from:
  1017                           	opt stack 0
  1018  000014                     strchr@chr:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0x13
  1022  000014                     	ds	1
  1023  000015                     ___ftpack@exp:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x14
  1027  000015                     	ds	1
  1028  000016                     ___awdiv@counter:
  1029                           	opt stack 0
  1030  000016                     ___awmod@counter:
  1031                           	opt stack 0
  1032  000016                     ___ftpack@sign:
  1033                           	opt stack 0
  1034  000016                     ___lwdiv@counter:
  1035                           	opt stack 0
  1036  000016                     ESP8266_Uart@index:
  1037                           	opt stack 0
  1038  000016                     ___wmul@product:
  1039                           	opt stack 0
  1040  000016                     strcpy@cp:
  1041                           	opt stack 0
  1042  000016                     strlen@cp:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x15
  1046  000016                     	ds	1
  1047  000017                     ??___ftpack:
  1048  000017                     ___awdiv@sign:
  1049                           	opt stack 0
  1050  000017                     ___awmod@sign:
  1051                           	opt stack 0
  1052  000017                     ___lwdiv@quotient:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x16
  1056  000017                     	ds	1
  1057  000018                     ?_strncmp:
  1058                           	opt stack 0
  1059  000018                     ___awdiv@quotient:
  1060                           	opt stack 0
  1061  000018                     strncmp@s1:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x17
  1065  000018                     	ds	1
  1066  000019                     ?___lwmod:
  1067                           	opt stack 0
  1068  000019                     ___lwmod@dividend:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x18
  1072  000019                     	ds	1
  1073  00001A                     ?___ftadd:
  1074                           	opt stack 0
  1075  00001A                     ?___lwtoft:
  1076                           	opt stack 0
  1077  00001A                     ___lwtoft@c:
  1078                           	opt stack 0
  1079  00001A                     strncmp@s2:
  1080                           	opt stack 0
  1081  00001A                     ___ftadd@f1:
  1082                           	opt stack 0
  1083                           
  1084                           ; 3 bytes @ 0x19
  1085  00001A                     	ds	1
  1086  00001B                     ___lwmod@divisor:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x1A
  1090  00001B                     	ds	1
  1091  00001C                     strncmp@len:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x1B
  1095  00001C                     	ds	1
  1096  00001D                     ___lwmod@counter:
  1097                           	opt stack 0
  1098  00001D                     ___ftadd@f2:
  1099                           	opt stack 0
  1100                           
  1101                           ; 3 bytes @ 0x1C
  1102  00001D                     	ds	1
  1103  00001E                     ??_strncmp:
  1104  00001E                     ?_sprintf:
  1105                           	opt stack 0
  1106  00001E                     sprintf@sp:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x1D
  1110  00001E                     	ds	2
  1111  000020                     ??___ftadd:
  1112  000020                     sprintf@f:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x1F
  1116  000020                     	ds	1
  1117  000021                     ?_strstr:
  1118                           	opt stack 0
  1119  000021                     strstr@s1:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x20
  1123  000021                     	ds	2
  1124  000023                     ___ftadd@sign:
  1125                           	opt stack 0
  1126  000023                     strstr@s2:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0x22
  1130  000023                     	ds	1
  1131  000024                     ___ftadd@exp2:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x23
  1135  000024                     	ds	1
  1136  000025                     ___ftadd@exp1:
  1137                           	opt stack 0
  1138  000025                     ESP8266_Cmd@cmd:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x24
  1142  000025                     	ds	1
  1143  000026                     ?___ftdiv:
  1144                           	opt stack 0
  1145  000026                     ?___ftmul:
  1146                           	opt stack 0
  1147  000026                     ___ftdiv@f1:
  1148                           	opt stack 0
  1149  000026                     ___ftmul@f1:
  1150                           	opt stack 0
  1151                           
  1152                           ; 3 bytes @ 0x25
  1153  000026                     	ds	1
  1154  000027                     ESP8266_Cmd@reply1:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x26
  1158  000027                     	ds	1
  1159  000028                     ??_sprintf:
  1160                           
  1161                           ; 1 bytes @ 0x27
  1162  000028                     	ds	1
  1163  000029                     ESP8266_Cmd@reply2:
  1164                           	opt stack 0
  1165  000029                     ___ftdiv@f2:
  1166                           	opt stack 0
  1167  000029                     ___ftmul@f2:
  1168                           	opt stack 0
  1169                           
  1170                           ; 3 bytes @ 0x28
  1171  000029                     	ds	2
  1172  00002B                     ESP8266_Cmd@waittime:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x2A
  1176  00002B                     	ds	1
  1177  00002C                     ??___ftdiv:
  1178  00002C                     ??___ftmul:
  1179  00002C                     sprintf@idx:
  1180                           	opt stack 0
  1181                           
  1182                           ; 1 bytes @ 0x2B
  1183  00002C                     	ds	1
  1184  00002D                     _ESP8266_Cmd$1046:
  1185                           	opt stack 0
  1186  00002D                     _sprintf$1371:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x2C
  1190  00002D                     	ds	1
  1191  00002E                     ESP8266_Net_Mode_Choose@MODE:
  1192                           	opt stack 0
  1193                           
  1194                           ; 1 bytes @ 0x2D
  1195  00002E                     	ds	1
  1196  00002F                     ___ftdiv@cntr:
  1197                           	opt stack 0
  1198  00002F                     ___ftmul@exp:
  1199                           	opt stack 0
  1200  00002F                     _sprintf$1372:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x2E
  1204  00002F                     	ds	1
  1205  000030                     ___ftdiv@f3:
  1206                           	opt stack 0
  1207  000030                     ___ftmul@f3_as_product:
  1208                           	opt stack 0
  1209                           
  1210                           ; 3 bytes @ 0x2F
  1211  000030                     	ds	1
  1212  000031                     _sprintf$1378:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x30
  1216  000031                     	ds	2
  1217  000033                     ___ftdiv@exp:
  1218                           	opt stack 0
  1219  000033                     ___ftmul@cntr:
  1220                           	opt stack 0
  1221  000033                     sprintf@cp:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x32
  1225  000033                     	ds	1
  1226  000034                     ___ftdiv@sign:
  1227                           	opt stack 0
  1228  000034                     ___ftmul@sign:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x33
  1232  000034                     	ds	1
  1233  000035                     ?_KalmanFilter_0:
  1234                           	opt stack 0
  1235  000035                     ?_KalmanFilter_1:
  1236                           	opt stack 0
  1237  000035                     ?_KalmanFilter_2:
  1238                           	opt stack 0
  1239  000035                     ?_KalmanFilter_3:
  1240                           	opt stack 0
  1241  000035                     ?_KalmanFilter_4:
  1242                           	opt stack 0
  1243  000035                     ?_KalmanFilter_5:
  1244                           	opt stack 0
  1245  000035                     ?_KalmanFilter_6:
  1246                           	opt stack 0
  1247  000035                     ?_KalmanFilter_7:
  1248                           	opt stack 0
  1249  000035                     ?_KalmanFilter_8:
  1250                           	opt stack 0
  1251  000035                     ?_KalmanFilter_9:
  1252                           	opt stack 0
  1253  000035                     sprintf@len:
  1254                           	opt stack 0
  1255  000035                     KalmanFilter_0@ResrcData_0:
  1256                           	opt stack 0
  1257  000035                     KalmanFilter_1@ResrcData_1:
  1258                           	opt stack 0
  1259  000035                     KalmanFilter_2@ResrcData_2:
  1260                           	opt stack 0
  1261  000035                     KalmanFilter_3@ResrcData_3:
  1262                           	opt stack 0
  1263  000035                     KalmanFilter_4@ResrcData_4:
  1264                           	opt stack 0
  1265  000035                     KalmanFilter_5@ResrcData_5:
  1266                           	opt stack 0
  1267  000035                     KalmanFilter_6@ResrcData_6:
  1268                           	opt stack 0
  1269  000035                     KalmanFilter_7@ResrcData_7:
  1270                           	opt stack 0
  1271  000035                     KalmanFilter_8@ResrcData_8:
  1272                           	opt stack 0
  1273  000035                     KalmanFilter_9@ResrcData_9:
  1274                           	opt stack 0
  1275                           
  1276                           ; 3 bytes @ 0x34
  1277  000035                     	ds	2
  1278  000037                     sprintf@ap:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x36
  1282  000037                     	ds	1
  1283  000038                     KalmanFilter_0@ProcessNiose_Q_0:
  1284                           	opt stack 0
  1285  000038                     KalmanFilter_1@ProcessNiose_Q_1:
  1286                           	opt stack 0
  1287  000038                     KalmanFilter_2@ProcessNiose_Q_2:
  1288                           	opt stack 0
  1289  000038                     KalmanFilter_3@ProcessNiose_Q_3:
  1290                           	opt stack 0
  1291  000038                     KalmanFilter_4@ProcessNiose_Q_4:
  1292                           	opt stack 0
  1293  000038                     KalmanFilter_5@ProcessNiose_Q_5:
  1294                           	opt stack 0
  1295  000038                     KalmanFilter_6@ProcessNiose_Q_6:
  1296                           	opt stack 0
  1297  000038                     KalmanFilter_7@ProcessNiose_Q_7:
  1298                           	opt stack 0
  1299  000038                     KalmanFilter_8@ProcessNiose_Q_8:
  1300                           	opt stack 0
  1301  000038                     KalmanFilter_9@ProcessNiose_Q_9:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x37
  1305  000038                     	ds	1
  1306  000039                     sprintf@val:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0x38
  1310  000039                     	ds	2
  1311  00003B                     sprintf@prec:
  1312                           	opt stack 0
  1313  00003B                     KalmanFilter_0@MeasureNoise_R_0:
  1314                           	opt stack 0
  1315  00003B                     KalmanFilter_1@MeasureNoise_R_1:
  1316                           	opt stack 0
  1317  00003B                     KalmanFilter_2@MeasureNoise_R_2:
  1318                           	opt stack 0
  1319  00003B                     KalmanFilter_3@MeasureNoise_R_3:
  1320                           	opt stack 0
  1321  00003B                     KalmanFilter_4@MeasureNoise_R_4:
  1322                           	opt stack 0
  1323  00003B                     KalmanFilter_5@MeasureNoise_R_5:
  1324                           	opt stack 0
  1325  00003B                     KalmanFilter_6@MeasureNoise_R_6:
  1326                           	opt stack 0
  1327  00003B                     KalmanFilter_7@MeasureNoise_R_7:
  1328                           	opt stack 0
  1329  00003B                     KalmanFilter_8@MeasureNoise_R_8:
  1330                           	opt stack 0
  1331  00003B                     KalmanFilter_9@MeasureNoise_R_9:
  1332                           	opt stack 0
  1333                           
  1334                           ; 3 bytes @ 0x3A
  1335  00003B                     	ds	1
  1336  00003C                     sprintf@width:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x3B
  1340  00003C                     	ds	2
  1341  00003E                     sprintf@c:
  1342                           	opt stack 0
  1343  00003E                     KalmanFilter_0@R:
  1344                           	opt stack 0
  1345  00003E                     KalmanFilter_1@R:
  1346                           	opt stack 0
  1347  00003E                     KalmanFilter_2@R:
  1348                           	opt stack 0
  1349  00003E                     KalmanFilter_3@R:
  1350                           	opt stack 0
  1351  00003E                     KalmanFilter_4@R:
  1352                           	opt stack 0
  1353  00003E                     KalmanFilter_5@R:
  1354                           	opt stack 0
  1355  00003E                     KalmanFilter_6@R:
  1356                           	opt stack 0
  1357  00003E                     KalmanFilter_7@R:
  1358                           	opt stack 0
  1359  00003E                     KalmanFilter_8@R:
  1360                           	opt stack 0
  1361  00003E                     KalmanFilter_9@R:
  1362                           	opt stack 0
  1363                           
  1364                           ; 3 bytes @ 0x3D
  1365  00003E                     	ds	1
  1366  00003F                     sprintf@flag:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x3E
  1370  00003F                     	ds	2
  1371  000041                     ESP8266_SendString@pStr:
  1372                           	opt stack 0
  1373  000041                     ESP8266_BuildAP@pSSID:
  1374                           	opt stack 0
  1375  000041                     KalmanFilter_0@Q:
  1376                           	opt stack 0
  1377  000041                     KalmanFilter_1@Q:
  1378                           	opt stack 0
  1379  000041                     KalmanFilter_2@Q:
  1380                           	opt stack 0
  1381  000041                     KalmanFilter_3@Q:
  1382                           	opt stack 0
  1383  000041                     KalmanFilter_4@Q:
  1384                           	opt stack 0
  1385  000041                     KalmanFilter_5@Q:
  1386                           	opt stack 0
  1387  000041                     KalmanFilter_6@Q:
  1388                           	opt stack 0
  1389  000041                     KalmanFilter_7@Q:
  1390                           	opt stack 0
  1391  000041                     KalmanFilter_8@Q:
  1392                           	opt stack 0
  1393  000041                     KalmanFilter_9@Q:
  1394                           	opt stack 0
  1395                           
  1396                           ; 3 bytes @ 0x40
  1397  000041                     	ds	2
  1398  000043                     ESP8266_SendString@ulStrLength:
  1399                           	opt stack 0
  1400  000043                     ESP8266_BuildAP@pPassWord:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x42
  1404  000043                     	ds	1
  1405  000044                     KalmanFilter_0@p_now:
  1406                           	opt stack 0
  1407  000044                     KalmanFilter_1@p_now:
  1408                           	opt stack 0
  1409  000044                     KalmanFilter_2@p_now:
  1410                           	opt stack 0
  1411  000044                     KalmanFilter_3@p_now:
  1412                           	opt stack 0
  1413  000044                     KalmanFilter_4@p_now:
  1414                           	opt stack 0
  1415  000044                     KalmanFilter_5@p_now:
  1416                           	opt stack 0
  1417  000044                     KalmanFilter_6@p_now:
  1418                           	opt stack 0
  1419  000044                     KalmanFilter_7@p_now:
  1420                           	opt stack 0
  1421  000044                     KalmanFilter_8@p_now:
  1422                           	opt stack 0
  1423  000044                     KalmanFilter_9@p_now:
  1424                           	opt stack 0
  1425                           
  1426                           ; 3 bytes @ 0x43
  1427  000044                     	ds	1
  1428  000045                     ??_ESP8266_SendString:
  1429  000045                     ESP8266_BuildAP@enunPsdMode:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x44
  1433  000045                     	ds	2
  1434  000047                     _KalmanFilter_0$2021:
  1435                           	opt stack 0
  1436  000047                     _KalmanFilter_1$2022:
  1437                           	opt stack 0
  1438  000047                     _KalmanFilter_2$2023:
  1439                           	opt stack 0
  1440  000047                     _KalmanFilter_3$2024:
  1441                           	opt stack 0
  1442  000047                     _KalmanFilter_4$2025:
  1443                           	opt stack 0
  1444  000047                     _KalmanFilter_5$2026:
  1445                           	opt stack 0
  1446  000047                     _KalmanFilter_6$2027:
  1447                           	opt stack 0
  1448  000047                     _KalmanFilter_7$2028:
  1449                           	opt stack 0
  1450  000047                     _KalmanFilter_8$2029:
  1451                           	opt stack 0
  1452  000047                     _KalmanFilter_9$2030:
  1453                           	opt stack 0
  1454                           
  1455                           ; 3 bytes @ 0x46
  1456  000047                     	ds	3
  1457  00004A                     KalmanFilter_0@x_now:
  1458                           	opt stack 0
  1459  00004A                     KalmanFilter_1@x_now:
  1460                           	opt stack 0
  1461  00004A                     KalmanFilter_2@x_now:
  1462                           	opt stack 0
  1463  00004A                     KalmanFilter_3@x_now:
  1464                           	opt stack 0
  1465  00004A                     KalmanFilter_4@x_now:
  1466                           	opt stack 0
  1467  00004A                     KalmanFilter_5@x_now:
  1468                           	opt stack 0
  1469  00004A                     KalmanFilter_6@x_now:
  1470                           	opt stack 0
  1471  00004A                     KalmanFilter_7@x_now:
  1472                           	opt stack 0
  1473  00004A                     KalmanFilter_8@x_now:
  1474                           	opt stack 0
  1475  00004A                     KalmanFilter_9@x_now:
  1476                           	opt stack 0
  1477                           
  1478                           ; 3 bytes @ 0x49
  1479  00004A                     	ds	3
  1480  00004D                     KalmanFilter_0@kg:
  1481                           	opt stack 0
  1482  00004D                     KalmanFilter_1@kg:
  1483                           	opt stack 0
  1484  00004D                     KalmanFilter_2@kg:
  1485                           	opt stack 0
  1486  00004D                     KalmanFilter_3@kg:
  1487                           	opt stack 0
  1488  00004D                     KalmanFilter_4@kg:
  1489                           	opt stack 0
  1490  00004D                     KalmanFilter_5@kg:
  1491                           	opt stack 0
  1492  00004D                     KalmanFilter_6@kg:
  1493                           	opt stack 0
  1494  00004D                     KalmanFilter_7@kg:
  1495                           	opt stack 0
  1496  00004D                     KalmanFilter_8@kg:
  1497                           	opt stack 0
  1498  00004D                     KalmanFilter_9@kg:
  1499                           	opt stack 0
  1500                           
  1501                           ; 3 bytes @ 0x4C
  1502  00004D                     	ds	3
  1503  000050                     KalmanFilter_0@x_mid:
  1504                           	opt stack 0
  1505  000050                     KalmanFilter_1@x_mid:
  1506                           	opt stack 0
  1507  000050                     KalmanFilter_2@x_mid:
  1508                           	opt stack 0
  1509  000050                     KalmanFilter_3@x_mid:
  1510                           	opt stack 0
  1511  000050                     KalmanFilter_4@x_mid:
  1512                           	opt stack 0
  1513  000050                     KalmanFilter_5@x_mid:
  1514                           	opt stack 0
  1515  000050                     KalmanFilter_6@x_mid:
  1516                           	opt stack 0
  1517  000050                     KalmanFilter_7@x_mid:
  1518                           	opt stack 0
  1519  000050                     KalmanFilter_8@x_mid:
  1520                           	opt stack 0
  1521  000050                     KalmanFilter_9@x_mid:
  1522                           	opt stack 0
  1523                           
  1524                           ; 3 bytes @ 0x4F
  1525  000050                     	ds	3
  1526  000053                     KalmanFilter_0@p_mid:
  1527                           	opt stack 0
  1528  000053                     KalmanFilter_1@p_mid:
  1529                           	opt stack 0
  1530  000053                     KalmanFilter_2@p_mid:
  1531                           	opt stack 0
  1532  000053                     KalmanFilter_3@p_mid:
  1533                           	opt stack 0
  1534  000053                     KalmanFilter_4@p_mid:
  1535                           	opt stack 0
  1536  000053                     KalmanFilter_5@p_mid:
  1537                           	opt stack 0
  1538  000053                     KalmanFilter_6@p_mid:
  1539                           	opt stack 0
  1540  000053                     KalmanFilter_7@p_mid:
  1541                           	opt stack 0
  1542  000053                     KalmanFilter_8@p_mid:
  1543                           	opt stack 0
  1544  000053                     KalmanFilter_9@p_mid:
  1545                           	opt stack 0
  1546                           
  1547                           ; 3 bytes @ 0x52
  1548  000053                     	ds	3
  1549  000056                     ?___fttol:
  1550                           	opt stack 0
  1551  000056                     ___fttol@f1:
  1552                           	opt stack 0
  1553                           
  1554                           ; 3 bytes @ 0x55
  1555  000056                     	ds	4
  1556  00005A                     translate_flex@AD_total:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x59
  1560  00005A                     	ds	2
  1561                           tblptru	equ	0xFF8
  1562                           postinc0	equ	0xFEE
  1563                           wreg	equ	0xFE8
  1564                           
  1565 ;;
  1566 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1567 ;;
  1568 ;; *************** function _main *****************
  1569 ;; Defined at:
  1570 ;;		line 150 in file "main.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;		None
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;  tem            11    0[BANK1 ] unsigned char [11]
  1575 ;;  temp           11    0        unsigned char [11]
  1576 ;;  AD_total        2   11[BANK1 ] unsigned int 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1586 ;;      Params:         0       0       0       0       0       0       0
  1587 ;;      Locals:         0       0      13       0       0       0       0
  1588 ;;      Temps:          0       2       0       0       0       0       0
  1589 ;;      Totals:         0       2      13       0       0       0       0
  1590 ;;Total ram usage:       15 bytes
  1591 ;; Hardware stack levels required when called:    7
  1592 ;; This function calls:
  1593 ;;		_ESP8266_SendString
  1594 ;;		_ESP8266_Server
  1595 ;;		_GPIO_initial
  1596 ;;		___awmod
  1597 ;;		_adc_initial
  1598 ;;		_initial_UART
  1599 ;;		_oclillator_initial
  1600 ;;		_strstr
  1601 ;;		_timer_0_initial
  1602 ;;		_timer_intrrupt_initinal
  1603 ;;		_translate_flex
  1604 ;; This function is called by:
  1605 ;;		Startup code after reset
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           	psect	text0
  1610  001FBC                     __ptext0:
  1611                           	opt stack 0
  1612  001FBC                     _main:
  1613                           	opt stack 24
  1614                           
  1615                           ;main.c: 152: oclillator_initial();
  1616                           
  1617                           ;incstack = 0
  1618  001FBC  EC07  F016         	call	_oclillator_initial	;wreg free
  1619                           
  1620                           ;main.c: 153: GPIO_initial();
  1621  001FC0  ECEE  F015         	call	_GPIO_initial	;wreg free
  1622                           
  1623                           ;main.c: 154: initial_UART();
  1624  001FC4  ECB5  F015         	call	_initial_UART	;wreg free
  1625                           
  1626                           ;main.c: 155: ESP8266_Server();
  1627  001FC8  EC4D  F011         	call	_ESP8266_Server	;wreg free
  1628  001FCC                     l4897:
  1629  001FCC  0EA8               	movlw	low _strEsp8266_Fram_Record
  1630  001FCE  6E21               	movwf	strstr@s1,c
  1631  001FD0  0E01               	movlw	high _strEsp8266_Fram_Record
  1632  001FD2  6E22               	movwf	strstr@s1+1,c
  1633  001FD4  0EAC               	movlw	low STR_52
  1634  001FD6  6E23               	movwf	strstr@s2,c
  1635  001FD8  0E7F               	movlw	high STR_52
  1636  001FDA  6E24               	movwf	strstr@s2+1,c
  1637  001FDC  EC50  F013         	call	_strstr	;wreg free
  1638  001FE0  5021               	movf	?_strstr,w,c
  1639  001FE2  B4D8               	btfsc	status,2,c
  1640  001FE4  D7F3               	goto	l4897
  1641                           
  1642                           ;main.c: 157: adc_initial();
  1643  001FE6  EC57  F015         	call	_adc_initial	;wreg free
  1644                           
  1645                           ;main.c: 158: timer_0_initial();
  1646  001FEA  ECFF  F015         	call	_timer_0_initial	;wreg free
  1647                           
  1648                           ;main.c: 159: timer_intrrupt_initinal();
  1649  001FEE  ECF7  F015         	call	_timer_intrrupt_initinal	;wreg free
  1650                           
  1651                           ;main.c: 162: u16 AD_total;
  1652                           ;main.c: 163: u8 temp[11];
  1653                           ;main.c: 164: u8 tem[11];
  1654                           ;main.c: 165: ADCON0bits.CHS=0;
  1655  001FF2  94C2               	bcf	4034,2,c	;volatile
  1656  001FF4  96C2               	bcf	4034,3,c	;volatile
  1657  001FF6  98C2               	bcf	4034,4,c	;volatile
  1658  001FF8  9AC2               	bcf	4034,5,c	;volatile
  1659  001FFA  D05F               	goto	l4919
  1660  001FFC                     l4905:
  1661                           
  1662                           ;main.c: 179: ADCON0bits.CHS=(ADCON0bits.CHS+1)%10;
  1663  001FFC  30C2               	rrcf	4034,w,c	;volatile
  1664  001FFE  32E8               	rrcf	wreg,f,c
  1665  002000  0B0F               	andlw	15
  1666  002002  0100               	movlb	0	; () banked
  1667  002004  6FF8               	movwf	??_main& (0+255),b
  1668  002006  0E01               	movlw	1
  1669  002008  0100               	movlb	0	; () banked
  1670  00200A  25F8               	addwf	??_main& (0+255),w,b
  1671  00200C  6E12               	movwf	___awmod@dividend,c
  1672  00200E  6A13               	clrf	___awmod@dividend+1,c
  1673  002010  0E00               	movlw	0
  1674  002012  2213               	addwfc	___awmod@dividend+1,f,c
  1675  002014  0E00               	movlw	0
  1676  002016  6E15               	movwf	___awmod@divisor+1,c
  1677  002018  0E0A               	movlw	10
  1678  00201A  6E14               	movwf	___awmod@divisor,c
  1679  00201C  EC0C  F014         	call	___awmod	;wreg free
  1680  002020  4612               	rlncf	?___awmod,f,c
  1681  002022  4612               	rlncf	?___awmod,f,c
  1682  002024  50C2               	movf	4034,w,c	;volatile
  1683  002026  1812               	xorwf	?___awmod,w,c
  1684  002028  0BC3               	andlw	-61
  1685  00202A  1812               	xorwf	?___awmod,w,c
  1686  00202C  6EC2               	movwf	4034,c	;volatile
  1687  00202E                     l4907:
  1688  00202E  5065               	movf	_write,w,c
  1689  002030  B4D8               	btfsc	status,2,c
  1690  002032  D7FD               	goto	l4907
  1691                           
  1692                           ;main.c: 181: AD_total=AD_H;
  1693  002034  C1A7  F1E7         	movff	_AD_H,main@AD_total
  1694  002038  0101               	movlb	1	; () banked
  1695  00203A  6BE8               	clrf	(main@AD_total+1)& (0+255),b
  1696                           
  1697                           ; BSR set to: 1
  1698                           ;main.c: 182: tem[ADCON0bits.CHS+1]=translate_flex(AD_total);
  1699  00203C  30C2               	rrcf	4034,w,c	;volatile
  1700  00203E  32E8               	rrcf	wreg,f,c
  1701  002040  0B0F               	andlw	15
  1702  002042  0100               	movlb	0	; () banked
  1703  002044  6FF8               	movwf	??_main& (0+255),b
  1704  002046  6BF9               	clrf	(??_main+1)& (0+255),b
  1705  002048  0E01               	movlw	1
  1706  00204A  0100               	movlb	0	; () banked
  1707  00204C  27F8               	addwf	??_main& (0+255),f,b
  1708  00204E  0E00               	movlw	0
  1709  002050  23F9               	addwfc	(??_main+1)& (0+255),f,b
  1710  002052  0EDC               	movlw	low main@tem
  1711  002054  0100               	movlb	0	; () banked
  1712  002056  25F8               	addwf	??_main& (0+255),w,b
  1713  002058  6ED9               	movwf	fsr2l,c
  1714  00205A  0E01               	movlw	high main@tem
  1715  00205C  0100               	movlb	0	; () banked
  1716  00205E  21F9               	addwfc	(??_main+1)& (0+255),w,b
  1717  002060  6EDA               	movwf	fsr2h,c
  1718  002062  C1E7  F05A         	movff	main@AD_total,translate_flex@AD_total
  1719  002066  C1E8  F05B         	movff	main@AD_total+1,translate_flex@AD_total+1
  1720  00206A  EC5A  F004         	call	_translate_flex	;wreg free
  1721  00206E  6EDF               	movwf	indf2,c
  1722                           
  1723                           ;main.c: 183: if(ADCON0bits.CHS==0){
  1724  002070  30C2               	rrcf	4034,w,c	;volatile
  1725  002072  32E8               	rrcf	wreg,f,c
  1726  002074  0B0F               	andlw	15
  1727  002076  0900               	iorlw	0
  1728  002078  A4D8               	btfss	status,2,c
  1729  00207A  D01F               	goto	l4919
  1730                           
  1731                           ;main.c: 184: tem[0]='!';
  1732  00207C  0E21               	movlw	33
  1733  00207E  0101               	movlb	1	; () banked
  1734  002080  6FDC               	movwf	main@tem& (0+255),b
  1735                           
  1736                           ; BSR set to: 1
  1737                           ;main.c: 185: ESP8266_SendString(0,tem,12);
  1738  002082  0EDC               	movlw	low main@tem
  1739  002084  6E41               	movwf	ESP8266_SendString@pStr,c
  1740  002086  0E01               	movlw	high main@tem
  1741  002088  6E42               	movwf	ESP8266_SendString@pStr+1,c
  1742  00208A  0E00               	movlw	0
  1743  00208C  6E44               	movwf	ESP8266_SendString@ulStrLength+1,c
  1744  00208E  0E0C               	movlw	12
  1745  002090  6E43               	movwf	ESP8266_SendString@ulStrLength,c
  1746  002092  0E00               	movlw	0
  1747  002094  EC19  F012         	call	_ESP8266_SendString
  1748                           
  1749                           ;main.c: 186: LATCbits.LATC5=!LATCbits.LATC5;
  1750  002098  BA8B               	btfsc	3979,5,c	;volatile
  1751  00209A  D004               	goto	u5690
  1752  00209C  0100               	movlb	0	; () banked
  1753  00209E  6BF8               	clrf	??_main& (0+255),b
  1754  0020A0  2BF8               	incf	??_main& (0+255),f,b
  1755  0020A2  D002               	goto	u5708
  1756  0020A4                     u5690:
  1757  0020A4  0100               	movlb	0	; () banked
  1758  0020A6  6BF8               	clrf	??_main& (0+255),b
  1759  0020A8                     u5708:
  1760  0020A8  0100               	movlb	0	; () banked
  1761  0020AA  3BF8               	swapf	??_main& (0+255),f,b
  1762  0020AC  47F8               	rlncf	??_main& (0+255),f,b
  1763  0020AE  508B               	movf	3979,w,c	;volatile
  1764  0020B0  0100               	movlb	0	; () banked
  1765  0020B2  19F8               	xorwf	??_main& (0+255),w,b
  1766  0020B4  0BDF               	andlw	-33
  1767  0020B6  19F8               	xorwf	??_main& (0+255),w,b
  1768  0020B8  6E8B               	movwf	3979,c	;volatile
  1769  0020BA                     l4919:
  1770                           
  1771                           ;main.c: 187: }
  1772                           ;main.c: 188: write=0;
  1773  0020BA  0E00               	movlw	0
  1774  0020BC  6E65               	movwf	_write,c
  1775  0020BE  D79E               	goto	l4905
  1776  0020C0                     __end_of_main:
  1777                           	opt stack 0
  1778                           tblptru	equ	0xFF8
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           indf2	equ	0xFDF
  1782                           fsr2h	equ	0xFDA
  1783                           fsr2l	equ	0xFD9
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _translate_flex *****************
  1787 ;; Defined at:
  1788 ;;		line 374 in file "harwave/flex.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;  AD_total        2   89[COMRAM] unsigned int 
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  temp1           4    0        unsigned char [4]
  1793 ;;  Value           1   13[BANK0 ] unsigned char 
  1794 ;;  temp            1   12[BANK0 ] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      unsigned char 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2, status,0, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1804 ;;      Params:         2       0       0       0       0       0       0
  1805 ;;      Locals:         0       2       0       0       0       0       0
  1806 ;;      Temps:          0       1       0       0       0       0       0
  1807 ;;      Totals:         2       3       0       0       0       0       0
  1808 ;;Total ram usage:        5 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    4
  1811 ;; This function calls:
  1812 ;;		_KalmanFilter_0
  1813 ;;		_KalmanFilter_1
  1814 ;;		_KalmanFilter_2
  1815 ;;		_KalmanFilter_3
  1816 ;;		_KalmanFilter_4
  1817 ;;		_KalmanFilter_5
  1818 ;;		_KalmanFilter_6
  1819 ;;		_KalmanFilter_7
  1820 ;;		_KalmanFilter_8
  1821 ;;		_KalmanFilter_9
  1822 ;;		___awdiv
  1823 ;;		___fttol
  1824 ;;		___lwtoft
  1825 ;; This function is called by:
  1826 ;;		_main
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text1
  1831  0008B4                     __ptext1:
  1832                           	opt stack 0
  1833  0008B4                     _translate_flex:
  1834                           	opt stack 26
  1835                           
  1836                           ;flex.c: 375: u8 Value;
  1837                           ;flex.c: 376: u8 temp;
  1838                           ;flex.c: 377: u8 temp1[4];
  1839                           ;flex.c: 379: switch ( ADCON0bits.CHS / 2 ){
  1840                           
  1841                           ;incstack = 0
  1842  0008B4  D192               	goto	l4795
  1843  0008B6                     l4741:
  1844                           
  1845                           ;flex.c: 381: if( !(ADCON0bits.CHS%2) ){
  1846  0008B6  30C2               	rrcf	4034,w,c	;volatile
  1847  0008B8  32E8               	rrcf	wreg,f,c
  1848  0008BA  0B0F               	andlw	15
  1849  0008BC  0100               	movlb	0	; () banked
  1850  0008BE  6F8B               	movwf	??_translate_flex& (0+255),b
  1851  0008C0  0100               	movlb	0	; () banked
  1852  0008C2  B18B               	btfsc	??_translate_flex& (0+255),0,b
  1853  0008C4  D026               	goto	l4747
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;flex.c: 382: Value=(u8)KalmanFilter_0((double)AD_total,1,1.5);
  1857  0008C6  0E00               	movlw	0
  1858  0008C8  6E3B               	movwf	KalmanFilter_0@MeasureNoise_R_0,c
  1859  0008CA  0EC0               	movlw	192
  1860  0008CC  6E3C               	movwf	KalmanFilter_0@MeasureNoise_R_0+1,c
  1861  0008CE  0E3F               	movlw	63
  1862  0008D0  6E3D               	movwf	KalmanFilter_0@MeasureNoise_R_0+2,c
  1863  0008D2  0E00               	movlw	0
  1864  0008D4  6E38               	movwf	KalmanFilter_0@ProcessNiose_Q_0,c
  1865  0008D6  0E80               	movlw	128
  1866  0008D8  6E39               	movwf	KalmanFilter_0@ProcessNiose_Q_0+1,c
  1867  0008DA  0E3F               	movlw	63
  1868  0008DC  6E3A               	movwf	KalmanFilter_0@ProcessNiose_Q_0+2,c
  1869  0008DE  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  1870  0008E2  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  1871  0008E6  EC91  F015         	call	___lwtoft	;wreg free
  1872  0008EA  C01A  F035         	movff	?___lwtoft,KalmanFilter_0@ResrcData_0
  1873  0008EE  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_0@ResrcData_0+1
  1874  0008F2  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_0@ResrcData_0+2
  1875  0008F6  ECFA  F00D         	call	_KalmanFilter_0	;wreg free
  1876  0008FA  C035  F056         	movff	?_KalmanFilter_0,___fttol@f1
  1877  0008FE  C036  F057         	movff	?_KalmanFilter_0+1,___fttol@f1+1
  1878  000902  C037  F058         	movff	?_KalmanFilter_0+2,___fttol@f1+2
  1879  000906  ECC3  F00E         	call	___fttol	;wreg free
  1880  00090A  D163               	goto	L9
  1881  00090C                     l4745:
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;flex.c: 383: temp=Value;
  1885  00090C  C08D  F08C         	movff	translate_flex@Value,translate_flex@temp
  1886                           
  1887                           ;flex.c: 384: }
  1888  000910  D187               	goto	l4797
  1889  000912                     l4747:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;flex.c: 385: else{
  1893                           ;flex.c: 386: Value=(u8)KalmanFilter_1((double)AD_total,1,1.5);
  1894  000912  0E00               	movlw	0
  1895  000914  6E3B               	movwf	KalmanFilter_1@MeasureNoise_R_1,c
  1896  000916  0EC0               	movlw	192
  1897  000918  6E3C               	movwf	KalmanFilter_1@MeasureNoise_R_1+1,c
  1898  00091A  0E3F               	movlw	63
  1899  00091C  6E3D               	movwf	KalmanFilter_1@MeasureNoise_R_1+2,c
  1900  00091E  0E00               	movlw	0
  1901  000920  6E38               	movwf	KalmanFilter_1@ProcessNiose_Q_1,c
  1902  000922  0E80               	movlw	128
  1903  000924  6E39               	movwf	KalmanFilter_1@ProcessNiose_Q_1+1,c
  1904  000926  0E3F               	movlw	63
  1905  000928  6E3A               	movwf	KalmanFilter_1@ProcessNiose_Q_1+2,c
  1906  00092A  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  1907  00092E  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  1908  000932  EC91  F015         	call	___lwtoft	;wreg free
  1909  000936  C01A  F035         	movff	?___lwtoft,KalmanFilter_1@ResrcData_1
  1910  00093A  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_1@ResrcData_1+1
  1911  00093E  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_1@ResrcData_1+2
  1912  000942  EC31  F00D         	call	_KalmanFilter_1	;wreg free
  1913  000946  C035  F056         	movff	?_KalmanFilter_1,___fttol@f1
  1914  00094A  C036  F057         	movff	?_KalmanFilter_1+1,___fttol@f1+1
  1915  00094E  C037  F058         	movff	?_KalmanFilter_1+2,___fttol@f1+2
  1916  000952  ECC3  F00E         	call	___fttol	;wreg free
  1917  000956  D13D               	goto	L9
  1918  000958                     l4751:
  1919                           
  1920                           ;flex.c: 391: if( !(ADCON0bits.CHS%2) ){
  1921  000958  30C2               	rrcf	4034,w,c	;volatile
  1922  00095A  32E8               	rrcf	wreg,f,c
  1923  00095C  0B0F               	andlw	15
  1924  00095E  0100               	movlb	0	; () banked
  1925  000960  6F8B               	movwf	??_translate_flex& (0+255),b
  1926  000962  0100               	movlb	0	; () banked
  1927  000964  B18B               	btfsc	??_translate_flex& (0+255),0,b
  1928  000966  D029               	goto	l4759
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;flex.c: 392: if(ADCON0bits.CHS== 2){
  1932  000968  30C2               	rrcf	4034,w,c	;volatile
  1933  00096A  32E8               	rrcf	wreg,f,c
  1934  00096C  0B0F               	andlw	15
  1935  00096E  0A02               	xorlw	2
  1936  000970  A4D8               	btfss	status,2,c
  1937  000972  D156               	goto	l4797
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;flex.c: 393: Value=(u8)KalmanFilter_2((double)AD_total,1,1.5);
  1941  000974  0E00               	movlw	0
  1942  000976  6E3B               	movwf	KalmanFilter_2@MeasureNoise_R_2,c
  1943  000978  0EC0               	movlw	192
  1944  00097A  6E3C               	movwf	KalmanFilter_2@MeasureNoise_R_2+1,c
  1945  00097C  0E3F               	movlw	63
  1946  00097E  6E3D               	movwf	KalmanFilter_2@MeasureNoise_R_2+2,c
  1947  000980  0E00               	movlw	0
  1948  000982  6E38               	movwf	KalmanFilter_2@ProcessNiose_Q_2,c
  1949  000984  0E80               	movlw	128
  1950  000986  6E39               	movwf	KalmanFilter_2@ProcessNiose_Q_2+1,c
  1951  000988  0E3F               	movlw	63
  1952  00098A  6E3A               	movwf	KalmanFilter_2@ProcessNiose_Q_2+2,c
  1953  00098C  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  1954  000990  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  1955  000994  EC91  F015         	call	___lwtoft	;wreg free
  1956  000998  C01A  F035         	movff	?___lwtoft,KalmanFilter_2@ResrcData_2
  1957  00099C  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_2@ResrcData_2+1
  1958  0009A0  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_2@ResrcData_2+2
  1959  0009A4  EC68  F00C         	call	_KalmanFilter_2	;wreg free
  1960  0009A8  C035  F056         	movff	?_KalmanFilter_2,___fttol@f1
  1961  0009AC  C036  F057         	movff	?_KalmanFilter_2+1,___fttol@f1+1
  1962  0009B0  C037  F058         	movff	?_KalmanFilter_2+2,___fttol@f1+2
  1963  0009B4  ECC3  F00E         	call	___fttol	;wreg free
  1964  0009B8  D10C               	goto	L9
  1965  0009BA                     l4759:
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;flex.c: 397: else{
  1969                           ;flex.c: 398: Value=(u8)KalmanFilter_3((double)AD_total,1,1.5);
  1970  0009BA  0E00               	movlw	0
  1971  0009BC  6E3B               	movwf	KalmanFilter_3@MeasureNoise_R_3,c
  1972  0009BE  0EC0               	movlw	192
  1973  0009C0  6E3C               	movwf	KalmanFilter_3@MeasureNoise_R_3+1,c
  1974  0009C2  0E3F               	movlw	63
  1975  0009C4  6E3D               	movwf	KalmanFilter_3@MeasureNoise_R_3+2,c
  1976  0009C6  0E00               	movlw	0
  1977  0009C8  6E38               	movwf	KalmanFilter_3@ProcessNiose_Q_3,c
  1978  0009CA  0E80               	movlw	128
  1979  0009CC  6E39               	movwf	KalmanFilter_3@ProcessNiose_Q_3+1,c
  1980  0009CE  0E3F               	movlw	63
  1981  0009D0  6E3A               	movwf	KalmanFilter_3@ProcessNiose_Q_3+2,c
  1982  0009D2  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  1983  0009D6  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  1984  0009DA  EC91  F015         	call	___lwtoft	;wreg free
  1985  0009DE  C01A  F035         	movff	?___lwtoft,KalmanFilter_3@ResrcData_3
  1986  0009E2  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_3@ResrcData_3+1
  1987  0009E6  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_3@ResrcData_3+2
  1988  0009EA  EC9F  F00B         	call	_KalmanFilter_3	;wreg free
  1989  0009EE  C035  F056         	movff	?_KalmanFilter_3,___fttol@f1
  1990  0009F2  C036  F057         	movff	?_KalmanFilter_3+1,___fttol@f1+1
  1991  0009F6  C037  F058         	movff	?_KalmanFilter_3+2,___fttol@f1+2
  1992  0009FA  ECC3  F00E         	call	___fttol	;wreg free
  1993  0009FE  D0E9               	goto	L9
  1994  000A00                     l4763:
  1995                           
  1996                           ;flex.c: 403: if( !(ADCON0bits.CHS%2) ){
  1997  000A00  30C2               	rrcf	4034,w,c	;volatile
  1998  000A02  32E8               	rrcf	wreg,f,c
  1999  000A04  0B0F               	andlw	15
  2000  000A06  0100               	movlb	0	; () banked
  2001  000A08  6F8B               	movwf	??_translate_flex& (0+255),b
  2002  000A0A  0100               	movlb	0	; () banked
  2003  000A0C  B18B               	btfsc	??_translate_flex& (0+255),0,b
  2004  000A0E  D023               	goto	l4769
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;flex.c: 404: Value=(u8)KalmanFilter_4((double)AD_total,1,1.5);
  2008  000A10  0E00               	movlw	0
  2009  000A12  6E3B               	movwf	KalmanFilter_4@MeasureNoise_R_4,c
  2010  000A14  0EC0               	movlw	192
  2011  000A16  6E3C               	movwf	KalmanFilter_4@MeasureNoise_R_4+1,c
  2012  000A18  0E3F               	movlw	63
  2013  000A1A  6E3D               	movwf	KalmanFilter_4@MeasureNoise_R_4+2,c
  2014  000A1C  0E00               	movlw	0
  2015  000A1E  6E38               	movwf	KalmanFilter_4@ProcessNiose_Q_4,c
  2016  000A20  0E80               	movlw	128
  2017  000A22  6E39               	movwf	KalmanFilter_4@ProcessNiose_Q_4+1,c
  2018  000A24  0E3F               	movlw	63
  2019  000A26  6E3A               	movwf	KalmanFilter_4@ProcessNiose_Q_4+2,c
  2020  000A28  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2021  000A2C  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2022  000A30  EC91  F015         	call	___lwtoft	;wreg free
  2023  000A34  C01A  F035         	movff	?___lwtoft,KalmanFilter_4@ResrcData_4
  2024  000A38  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_4@ResrcData_4+1
  2025  000A3C  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_4@ResrcData_4+2
  2026  000A40  ECD6  F00A         	call	_KalmanFilter_4	;wreg free
  2027  000A44  C035  F056         	movff	?_KalmanFilter_4,___fttol@f1
  2028  000A48  C036  F057         	movff	?_KalmanFilter_4+1,___fttol@f1+1
  2029  000A4C  C037  F058         	movff	?_KalmanFilter_4+2,___fttol@f1+2
  2030  000A50  ECC3  F00E         	call	___fttol	;wreg free
  2031  000A54  D0BE               	goto	L9
  2032  000A56                     l4769:
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;flex.c: 407: else{
  2036                           ;flex.c: 408: Value=(u8)KalmanFilter_5((double)AD_total,1,1.5);
  2037  000A56  0E00               	movlw	0
  2038  000A58  6E3B               	movwf	KalmanFilter_5@MeasureNoise_R_5,c
  2039  000A5A  0EC0               	movlw	192
  2040  000A5C  6E3C               	movwf	KalmanFilter_5@MeasureNoise_R_5+1,c
  2041  000A5E  0E3F               	movlw	63
  2042  000A60  6E3D               	movwf	KalmanFilter_5@MeasureNoise_R_5+2,c
  2043  000A62  0E00               	movlw	0
  2044  000A64  6E38               	movwf	KalmanFilter_5@ProcessNiose_Q_5,c
  2045  000A66  0E80               	movlw	128
  2046  000A68  6E39               	movwf	KalmanFilter_5@ProcessNiose_Q_5+1,c
  2047  000A6A  0E3F               	movlw	63
  2048  000A6C  6E3A               	movwf	KalmanFilter_5@ProcessNiose_Q_5+2,c
  2049  000A6E  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2050  000A72  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2051  000A76  EC91  F015         	call	___lwtoft	;wreg free
  2052  000A7A  C01A  F035         	movff	?___lwtoft,KalmanFilter_5@ResrcData_5
  2053  000A7E  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_5@ResrcData_5+1
  2054  000A82  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_5@ResrcData_5+2
  2055  000A86  EC0D  F00A         	call	_KalmanFilter_5	;wreg free
  2056  000A8A  C035  F056         	movff	?_KalmanFilter_5,___fttol@f1
  2057  000A8E  C036  F057         	movff	?_KalmanFilter_5+1,___fttol@f1+1
  2058  000A92  C037  F058         	movff	?_KalmanFilter_5+2,___fttol@f1+2
  2059  000A96  ECC3  F00E         	call	___fttol	;wreg free
  2060  000A9A  D09B               	goto	L9
  2061  000A9C                     l4773:
  2062                           
  2063                           ;flex.c: 413: if( !(ADCON0bits.CHS%2) ){
  2064  000A9C  30C2               	rrcf	4034,w,c	;volatile
  2065  000A9E  32E8               	rrcf	wreg,f,c
  2066  000AA0  0B0F               	andlw	15
  2067  000AA2  0100               	movlb	0	; () banked
  2068  000AA4  6F8B               	movwf	??_translate_flex& (0+255),b
  2069  000AA6  0100               	movlb	0	; () banked
  2070  000AA8  B18B               	btfsc	??_translate_flex& (0+255),0,b
  2071  000AAA  D023               	goto	l4779
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;flex.c: 414: Value=(u8)KalmanFilter_6((double)AD_total,1,1.5);
  2075  000AAC  0E00               	movlw	0
  2076  000AAE  6E3B               	movwf	KalmanFilter_6@MeasureNoise_R_6,c
  2077  000AB0  0EC0               	movlw	192
  2078  000AB2  6E3C               	movwf	KalmanFilter_6@MeasureNoise_R_6+1,c
  2079  000AB4  0E3F               	movlw	63
  2080  000AB6  6E3D               	movwf	KalmanFilter_6@MeasureNoise_R_6+2,c
  2081  000AB8  0E00               	movlw	0
  2082  000ABA  6E38               	movwf	KalmanFilter_6@ProcessNiose_Q_6,c
  2083  000ABC  0E80               	movlw	128
  2084  000ABE  6E39               	movwf	KalmanFilter_6@ProcessNiose_Q_6+1,c
  2085  000AC0  0E3F               	movlw	63
  2086  000AC2  6E3A               	movwf	KalmanFilter_6@ProcessNiose_Q_6+2,c
  2087  000AC4  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2088  000AC8  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2089  000ACC  EC91  F015         	call	___lwtoft	;wreg free
  2090  000AD0  C01A  F035         	movff	?___lwtoft,KalmanFilter_6@ResrcData_6
  2091  000AD4  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_6@ResrcData_6+1
  2092  000AD8  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_6@ResrcData_6+2
  2093  000ADC  EC44  F009         	call	_KalmanFilter_6	;wreg free
  2094  000AE0  C035  F056         	movff	?_KalmanFilter_6,___fttol@f1
  2095  000AE4  C036  F057         	movff	?_KalmanFilter_6+1,___fttol@f1+1
  2096  000AE8  C037  F058         	movff	?_KalmanFilter_6+2,___fttol@f1+2
  2097  000AEC  ECC3  F00E         	call	___fttol	;wreg free
  2098  000AF0  D070               	goto	L9
  2099  000AF2                     l4779:
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;flex.c: 417: else{
  2103                           ;flex.c: 418: Value=(u8)KalmanFilter_7((double)AD_total,1,1.5);
  2104  000AF2  0E00               	movlw	0
  2105  000AF4  6E3B               	movwf	KalmanFilter_7@MeasureNoise_R_7,c
  2106  000AF6  0EC0               	movlw	192
  2107  000AF8  6E3C               	movwf	KalmanFilter_7@MeasureNoise_R_7+1,c
  2108  000AFA  0E3F               	movlw	63
  2109  000AFC  6E3D               	movwf	KalmanFilter_7@MeasureNoise_R_7+2,c
  2110  000AFE  0E00               	movlw	0
  2111  000B00  6E38               	movwf	KalmanFilter_7@ProcessNiose_Q_7,c
  2112  000B02  0E80               	movlw	128
  2113  000B04  6E39               	movwf	KalmanFilter_7@ProcessNiose_Q_7+1,c
  2114  000B06  0E3F               	movlw	63
  2115  000B08  6E3A               	movwf	KalmanFilter_7@ProcessNiose_Q_7+2,c
  2116  000B0A  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2117  000B0E  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2118  000B12  EC91  F015         	call	___lwtoft	;wreg free
  2119  000B16  C01A  F035         	movff	?___lwtoft,KalmanFilter_7@ResrcData_7
  2120  000B1A  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_7@ResrcData_7+1
  2121  000B1E  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_7@ResrcData_7+2
  2122  000B22  EC7B  F008         	call	_KalmanFilter_7	;wreg free
  2123  000B26  C035  F056         	movff	?_KalmanFilter_7,___fttol@f1
  2124  000B2A  C036  F057         	movff	?_KalmanFilter_7+1,___fttol@f1+1
  2125  000B2E  C037  F058         	movff	?_KalmanFilter_7+2,___fttol@f1+2
  2126  000B32  ECC3  F00E         	call	___fttol	;wreg free
  2127  000B36  D04D               	goto	L9
  2128  000B38                     l4783:
  2129                           
  2130                           ;flex.c: 423: if( !(ADCON0bits.CHS%2) ){
  2131  000B38  30C2               	rrcf	4034,w,c	;volatile
  2132  000B3A  32E8               	rrcf	wreg,f,c
  2133  000B3C  0B0F               	andlw	15
  2134  000B3E  0100               	movlb	0	; () banked
  2135  000B40  6F8B               	movwf	??_translate_flex& (0+255),b
  2136  000B42  0100               	movlb	0	; () banked
  2137  000B44  B18B               	btfsc	??_translate_flex& (0+255),0,b
  2138  000B46  D023               	goto	l4789
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;flex.c: 424: Value=(u8)KalmanFilter_8((double)AD_total,1,1.5);
  2142  000B48  0E00               	movlw	0
  2143  000B4A  6E3B               	movwf	KalmanFilter_8@MeasureNoise_R_8,c
  2144  000B4C  0EC0               	movlw	192
  2145  000B4E  6E3C               	movwf	KalmanFilter_8@MeasureNoise_R_8+1,c
  2146  000B50  0E3F               	movlw	63
  2147  000B52  6E3D               	movwf	KalmanFilter_8@MeasureNoise_R_8+2,c
  2148  000B54  0E00               	movlw	0
  2149  000B56  6E38               	movwf	KalmanFilter_8@ProcessNiose_Q_8,c
  2150  000B58  0E80               	movlw	128
  2151  000B5A  6E39               	movwf	KalmanFilter_8@ProcessNiose_Q_8+1,c
  2152  000B5C  0E3F               	movlw	63
  2153  000B5E  6E3A               	movwf	KalmanFilter_8@ProcessNiose_Q_8+2,c
  2154  000B60  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2155  000B64  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2156  000B68  EC91  F015         	call	___lwtoft	;wreg free
  2157  000B6C  C01A  F035         	movff	?___lwtoft,KalmanFilter_8@ResrcData_8
  2158  000B70  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_8@ResrcData_8+1
  2159  000B74  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_8@ResrcData_8+2
  2160  000B78  ECB2  F007         	call	_KalmanFilter_8	;wreg free
  2161  000B7C  C035  F056         	movff	?_KalmanFilter_8,___fttol@f1
  2162  000B80  C036  F057         	movff	?_KalmanFilter_8+1,___fttol@f1+1
  2163  000B84  C037  F058         	movff	?_KalmanFilter_8+2,___fttol@f1+2
  2164  000B88  ECC3  F00E         	call	___fttol	;wreg free
  2165  000B8C  D022               	goto	L9
  2166  000B8E                     l4789:
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;flex.c: 427: else{
  2170                           ;flex.c: 428: Value=(u8)KalmanFilter_9((double)AD_total,1,1.5);
  2171  000B8E  0E00               	movlw	0
  2172  000B90  6E3B               	movwf	KalmanFilter_9@MeasureNoise_R_9,c
  2173  000B92  0EC0               	movlw	192
  2174  000B94  6E3C               	movwf	KalmanFilter_9@MeasureNoise_R_9+1,c
  2175  000B96  0E3F               	movlw	63
  2176  000B98  6E3D               	movwf	KalmanFilter_9@MeasureNoise_R_9+2,c
  2177  000B9A  0E00               	movlw	0
  2178  000B9C  6E38               	movwf	KalmanFilter_9@ProcessNiose_Q_9,c
  2179  000B9E  0E80               	movlw	128
  2180  000BA0  6E39               	movwf	KalmanFilter_9@ProcessNiose_Q_9+1,c
  2181  000BA2  0E3F               	movlw	63
  2182  000BA4  6E3A               	movwf	KalmanFilter_9@ProcessNiose_Q_9+2,c
  2183  000BA6  C05A  F01A         	movff	translate_flex@AD_total,___lwtoft@c
  2184  000BAA  C05B  F01B         	movff	translate_flex@AD_total+1,___lwtoft@c+1
  2185  000BAE  EC91  F015         	call	___lwtoft	;wreg free
  2186  000BB2  C01A  F035         	movff	?___lwtoft,KalmanFilter_9@ResrcData_9
  2187  000BB6  C01B  F036         	movff	?___lwtoft+1,KalmanFilter_9@ResrcData_9+1
  2188  000BBA  C01C  F037         	movff	?___lwtoft+2,KalmanFilter_9@ResrcData_9+2
  2189  000BBE  ECE9  F006         	call	_KalmanFilter_9	;wreg free
  2190  000BC2  C035  F056         	movff	?_KalmanFilter_9,___fttol@f1
  2191  000BC6  C036  F057         	movff	?_KalmanFilter_9+1,___fttol@f1+1
  2192  000BCA  C037  F058         	movff	?_KalmanFilter_9+2,___fttol@f1+2
  2193  000BCE  ECC3  F00E         	call	___fttol	;wreg free
  2194  000BD2                     L9:
  2195  000BD2  5056               	movf	?___fttol,w,c
  2196  000BD4  0100               	movlb	0	; () banked
  2197  000BD6  6F8D               	movwf	translate_flex@Value& (0+255),b
  2198  000BD8  D699               	goto	l4745
  2199  000BDA                     l4795:
  2200  000BDA  30C2               	rrcf	4034,w,c	;volatile
  2201  000BDC  32E8               	rrcf	wreg,f,c
  2202  000BDE  0B0F               	andlw	15
  2203  000BE0  0100               	movlb	0	; () banked
  2204  000BE2  6F8B               	movwf	??_translate_flex& (0+255),b
  2205  000BE4  0100               	movlb	0	; () banked
  2206  000BE6  518B               	movf	??_translate_flex& (0+255),w,b
  2207  000BE8  6E12               	movwf	___awdiv@dividend,c
  2208  000BEA  6A13               	clrf	___awdiv@dividend+1,c
  2209  000BEC  0E00               	movlw	0
  2210  000BEE  6E15               	movwf	___awdiv@divisor+1,c
  2211  000BF0  0E02               	movlw	2
  2212  000BF2  6E14               	movwf	___awdiv@divisor,c
  2213  000BF4  EC0E  F013         	call	___awdiv	;wreg free
  2214                           
  2215                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2216                           ; Switch size 1, requested type "space"
  2217                           ; Number of cases is 1, Range of values is 0 to 0
  2218                           ; switch strategies available:
  2219                           ; Name         Instructions Cycles
  2220                           ; simple_byte            4     3 (average)
  2221                           ;	Chosen strategy is simple_byte
  2222  000BF8  5013               	movf	?___awdiv+1,w,c
  2223  000BFA  0A00               	xorlw	0	; case 0
  2224  000BFC  A4D8               	btfss	status,2,c
  2225  000BFE  D010               	goto	l4797
  2226                           
  2227                           ; Switch size 1, requested type "space"
  2228                           ; Number of cases is 5, Range of values is 0 to 4
  2229                           ; switch strategies available:
  2230                           ; Name         Instructions Cycles
  2231                           ; simple_byte           16     9 (average)
  2232                           ;	Chosen strategy is simple_byte
  2233  000C00  5012               	movf	?___awdiv,w,c
  2234  000C02  0A00               	xorlw	0	; case 0
  2235  000C04  B4D8               	btfsc	status,2,c
  2236  000C06  D657               	goto	l4741
  2237  000C08  0A01               	xorlw	1	; case 1
  2238  000C0A  B4D8               	btfsc	status,2,c
  2239  000C0C  D6A5               	goto	l4751
  2240  000C0E  0A03               	xorlw	3	; case 2
  2241  000C10  B4D8               	btfsc	status,2,c
  2242  000C12  D6F6               	goto	l4763
  2243  000C14  0A01               	xorlw	1	; case 3
  2244  000C16  B4D8               	btfsc	status,2,c
  2245  000C18  D741               	goto	l4773
  2246  000C1A  0A07               	xorlw	7	; case 4
  2247  000C1C  B4D8               	btfsc	status,2,c
  2248  000C1E  D78C               	goto	l4783
  2249  000C20                     l4797:
  2250                           
  2251                           ;flex.c: 437: return temp;
  2252  000C20  0100               	movlb	0	; () banked
  2253  000C22  518C               	movf	translate_flex@temp& (0+255),w,b
  2254  000C24  0012               	return	
  2255  000C26                     __end_of_translate_flex:
  2256                           	opt stack 0
  2257                           tblptru	equ	0xFF8
  2258                           postinc0	equ	0xFEE
  2259                           wreg	equ	0xFE8
  2260                           indf2	equ	0xFDF
  2261                           fsr2h	equ	0xFDA
  2262                           fsr2l	equ	0xFD9
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function ___lwtoft *****************
  2266 ;; Defined at:
  2267 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  c               2   25[COMRAM] unsigned int 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;		None
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  3   25[COMRAM] float 
  2274 ;; Registers used:
  2275 ;;		wreg, status,2, status,0, cstack
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2281 ;;      Params:         3       0       0       0       0       0       0
  2282 ;;      Locals:         0       0       0       0       0       0       0
  2283 ;;      Temps:          0       0       0       0       0       0       0
  2284 ;;      Totals:         3       0       0       0       0       0       0
  2285 ;;Total ram usage:        3 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    2
  2288 ;; This function calls:
  2289 ;;		___ftpack
  2290 ;; This function is called by:
  2291 ;;		_translate_flex
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text2
  2296  002B22                     __ptext2:
  2297                           	opt stack 0
  2298  002B22                     ___lwtoft:
  2299                           	opt stack 27
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;incstack = 0
  2303  002B22  C01A  F012         	movff	___lwtoft@c,___ftpack@arg
  2304  002B26  C01B  F013         	movff	___lwtoft@c+1,___ftpack@arg+1
  2305  002B2A  6A14               	clrf	___ftpack@arg+2,c
  2306  002B2C  0E8E               	movlw	142
  2307  002B2E  6E15               	movwf	___ftpack@exp,c
  2308  002B30  0E00               	movlw	0
  2309  002B32  6E16               	movwf	___ftpack@sign,c
  2310  002B34  EC71  F012         	call	___ftpack	;wreg free
  2311  002B38  C012  F01A         	movff	?___ftpack,?___lwtoft
  2312  002B3C  C013  F01B         	movff	?___ftpack+1,?___lwtoft+1
  2313  002B40  C014  F01C         	movff	?___ftpack+2,?___lwtoft+2
  2314  002B44  0012               	return	
  2315  002B46                     __end_of___lwtoft:
  2316                           	opt stack 0
  2317                           tblptru	equ	0xFF8
  2318                           postinc0	equ	0xFEE
  2319                           wreg	equ	0xFE8
  2320                           indf2	equ	0xFDF
  2321                           fsr2h	equ	0xFDA
  2322                           fsr2l	equ	0xFD9
  2323                           status	equ	0xFD8
  2324                           
  2325 ;; *************** function ___fttol *****************
  2326 ;; Defined at:
  2327 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  f1              3   85[COMRAM] float 
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;  lval            4    6[BANK0 ] unsigned long 
  2332 ;;  exp1            1   10[BANK0 ] unsigned char 
  2333 ;;  sign1           1    5[BANK0 ] unsigned char 
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  4   85[COMRAM] long 
  2336 ;; Registers used:
  2337 ;;		wreg, status,2, status,0
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2343 ;;      Params:         4       0       0       0       0       0       0
  2344 ;;      Locals:         0       6       0       0       0       0       0
  2345 ;;      Temps:          0       5       0       0       0       0       0
  2346 ;;      Totals:         4      11       0       0       0       0       0
  2347 ;;Total ram usage:       15 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    1
  2350 ;; This function calls:
  2351 ;;		Nothing
  2352 ;; This function is called by:
  2353 ;;		_translate_flex
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text3
  2358  001D86                     __ptext3:
  2359                           	opt stack 0
  2360  001D86                     ___fttol:
  2361                           	opt stack 28
  2362                           
  2363                           ;incstack = 0
  2364  001D86  C058  F080         	movff	___fttol@f1+2,??___fttol
  2365  001D8A  0100               	movlb	0	; () banked
  2366  001D8C  6B81               	clrf	(??___fttol+1)& (0+255),b
  2367  001D8E  6B82               	clrf	(??___fttol+2)& (0+255),b
  2368  001D90  3457               	rlcf	___fttol@f1+1,w,c
  2369  001D92  0100               	movlb	0	; () banked
  2370  001D94  3780               	rlcf	??___fttol& (0+255),f,b
  2371  001D96  E301               	bnc	u5351
  2372  001D98  8181               	bsf	(??___fttol+1)& (0+255),0,b
  2373  001D9A                     u5351:
  2374  001D9A  0100               	movlb	0	; () banked
  2375  001D9C  5180               	movf	??___fttol& (0+255),w,b
  2376  001D9E  0100               	movlb	0	; () banked
  2377  001DA0  6F8A               	movwf	___fttol@exp1& (0+255),b
  2378  001DA2  0100               	movlb	0	; () banked
  2379  001DA4  518A               	movf	___fttol@exp1& (0+255),w,b
  2380  001DA6  A4D8               	btfss	status,2,c
  2381  001DA8  D009               	goto	l4695
  2382                           
  2383                           ; BSR set to: 0
  2384  001DAA  0E00               	movlw	0
  2385  001DAC  6E56               	movwf	?___fttol,c
  2386  001DAE  0E00               	movlw	0
  2387  001DB0  6E57               	movwf	?___fttol+1,c
  2388  001DB2  0E00               	movlw	0
  2389  001DB4  6E58               	movwf	?___fttol+2,c
  2390  001DB6  0E00               	movlw	0
  2391  001DB8  6E59               	movwf	?___fttol+3,c
  2392                           
  2393                           ; BSR set to: 0
  2394  001DBA  0012               	return	
  2395  001DBC                     l4695:
  2396                           
  2397                           ; BSR set to: 0
  2398  001DBC  0E17               	movlw	23
  2399  001DBE  0100               	movlb	0	; () banked
  2400  001DC0  6F80               	movwf	??___fttol& (0+255),b
  2401  001DC2  C056  F081         	movff	___fttol@f1,??___fttol+1
  2402  001DC6  C057  F082         	movff	___fttol@f1+1,??___fttol+2
  2403  001DCA  C058  F083         	movff	___fttol@f1+2,??___fttol+3
  2404  001DCE  0100               	movlb	0	; () banked
  2405  001DD0  2980               	incf	??___fttol& (0+255),w,b
  2406  001DD2  0100               	movlb	0	; () banked
  2407  001DD4  6F84               	movwf	(??___fttol+4)& (0+255),b
  2408  001DD6  D005               	goto	u5370
  2409  001DD8                     u5375:
  2410  001DD8  0100               	movlb	0	; () banked
  2411  001DDA  90D8               	bcf	status,0,c
  2412  001DDC  3383               	rrcf	(??___fttol+3)& (0+255),f,b
  2413  001DDE  3382               	rrcf	(??___fttol+2)& (0+255),f,b
  2414  001DE0  3381               	rrcf	(??___fttol+1)& (0+255),f,b
  2415  001DE2                     u5370:
  2416  001DE2  0100               	movlb	0	; () banked
  2417  001DE4  2F84               	decfsz	(??___fttol+4)& (0+255),f,b
  2418  001DE6  D7F8               	goto	u5375
  2419  001DE8  0100               	movlb	0	; () banked
  2420  001DEA  5181               	movf	(??___fttol+1)& (0+255),w,b
  2421  001DEC  0100               	movlb	0	; () banked
  2422  001DEE  6F85               	movwf	___fttol@sign1& (0+255),b
  2423                           
  2424                           ; BSR set to: 0
  2425  001DF0  8E57               	bsf	___fttol@f1+1,7,c
  2426                           
  2427                           ; BSR set to: 0
  2428  001DF2  0EFF               	movlw	255
  2429  001DF4  1656               	andwf	___fttol@f1,f,c
  2430  001DF6  0EFF               	movlw	255
  2431  001DF8  1657               	andwf	___fttol@f1+1,f,c
  2432  001DFA  0E00               	movlw	0
  2433  001DFC  1658               	andwf	___fttol@f1+2,f,c
  2434                           
  2435                           ; BSR set to: 0
  2436  001DFE  5056               	movf	___fttol@f1,w,c
  2437  001E00  0100               	movlb	0	; () banked
  2438  001E02  6F86               	movwf	___fttol@lval& (0+255),b
  2439  001E04  5057               	movf	___fttol@f1+1,w,c
  2440  001E06  0100               	movlb	0	; () banked
  2441  001E08  6F87               	movwf	(___fttol@lval+1)& (0+255),b
  2442  001E0A  5058               	movf	___fttol@f1+2,w,c
  2443  001E0C  0100               	movlb	0	; () banked
  2444  001E0E  6F88               	movwf	(___fttol@lval+2)& (0+255),b
  2445  001E10  0100               	movlb	0	; () banked
  2446  001E12  6B89               	clrf	(___fttol@lval+3)& (0+255),b
  2447                           
  2448                           ; BSR set to: 0
  2449  001E14  0E8E               	movlw	142
  2450  001E16  0100               	movlb	0	; () banked
  2451  001E18  5F8A               	subwf	___fttol@exp1& (0+255),f,b
  2452                           
  2453                           ; BSR set to: 0
  2454  001E1A  0100               	movlb	0	; () banked
  2455  001E1C  AF8A               	btfss	___fttol@exp1& (0+255),7,b
  2456  001E1E  D019               	goto	l4717
  2457                           
  2458                           ; BSR set to: 0
  2459  001E20  0100               	movlb	0	; () banked
  2460  001E22  518A               	movf	___fttol@exp1& (0+255),w,b
  2461  001E24  0A80               	xorlw	128
  2462  001E26  0F8F               	addlw	143
  2463  001E28  B0D8               	btfsc	status,0,c
  2464  001E2A  D009               	goto	l4713
  2465                           
  2466                           ; BSR set to: 0
  2467  001E2C  0E00               	movlw	0
  2468  001E2E  6E56               	movwf	?___fttol,c
  2469  001E30  0E00               	movlw	0
  2470  001E32  6E57               	movwf	?___fttol+1,c
  2471  001E34  0E00               	movlw	0
  2472  001E36  6E58               	movwf	?___fttol+2,c
  2473  001E38  0E00               	movlw	0
  2474  001E3A  6E59               	movwf	?___fttol+3,c
  2475                           
  2476                           ; BSR set to: 0
  2477  001E3C  0012               	return	
  2478  001E3E                     l4713:
  2479                           
  2480                           ; BSR set to: 0
  2481  001E3E  0100               	movlb	0	; () banked
  2482  001E40  90D8               	bcf	status,0,c
  2483  001E42  3389               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2484  001E44  3388               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2485  001E46  3387               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2486  001E48  3386               	rrcf	___fttol@lval& (0+255),f,b
  2487                           
  2488                           ; BSR set to: 0
  2489  001E4A  0100               	movlb	0	; () banked
  2490  001E4C  3F8A               	incfsz	___fttol@exp1& (0+255),f,b
  2491  001E4E  D7F7               	goto	l4713
  2492                           
  2493                           ; BSR set to: 0
  2494  001E50  D01A               	goto	l4727
  2495  001E52                     l4717:
  2496                           
  2497                           ; BSR set to: 0
  2498  001E52  0E17               	movlw	23
  2499  001E54  0100               	movlb	0	; () banked
  2500  001E56  658A               	cpfsgt	___fttol@exp1& (0+255),b
  2501  001E58  D011               	goto	l4725
  2502                           
  2503                           ; BSR set to: 0
  2504  001E5A  0E00               	movlw	0
  2505  001E5C  6E56               	movwf	?___fttol,c
  2506  001E5E  0E00               	movlw	0
  2507  001E60  6E57               	movwf	?___fttol+1,c
  2508  001E62  0E00               	movlw	0
  2509  001E64  6E58               	movwf	?___fttol+2,c
  2510  001E66  0E00               	movlw	0
  2511  001E68  6E59               	movwf	?___fttol+3,c
  2512                           
  2513                           ; BSR set to: 0
  2514  001E6A  0012               	return	
  2515  001E6C                     l4723:
  2516                           
  2517                           ; BSR set to: 0
  2518  001E6C  0100               	movlb	0	; () banked
  2519  001E6E  90D8               	bcf	status,0,c
  2520  001E70  3786               	rlcf	___fttol@lval& (0+255),f,b
  2521  001E72  3787               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2522  001E74  3788               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2523  001E76  3789               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2524  001E78  0100               	movlb	0	; () banked
  2525  001E7A  078A               	decf	___fttol@exp1& (0+255),f,b
  2526  001E7C                     l4725:
  2527                           
  2528                           ; BSR set to: 0
  2529  001E7C  0100               	movlb	0	; () banked
  2530  001E7E  518A               	movf	___fttol@exp1& (0+255),w,b
  2531  001E80  0100               	movlb	0	; () banked
  2532  001E82  A4D8               	btfss	status,2,c
  2533  001E84  D7F3               	goto	l4723
  2534  001E86                     l4727:
  2535                           
  2536                           ; BSR set to: 0
  2537  001E86  0100               	movlb	0	; () banked
  2538  001E88  5185               	movf	___fttol@sign1& (0+255),w,b
  2539  001E8A  0100               	movlb	0	; () banked
  2540  001E8C  B4D8               	btfsc	status,2,c
  2541  001E8E  D009               	goto	l4731
  2542                           
  2543                           ; BSR set to: 0
  2544  001E90  0100               	movlb	0	; () banked
  2545  001E92  1F89               	comf	(___fttol@lval+3)& (0+255),f,b
  2546  001E94  1F88               	comf	(___fttol@lval+2)& (0+255),f,b
  2547  001E96  1F87               	comf	(___fttol@lval+1)& (0+255),f,b
  2548  001E98  6D86               	negf	___fttol@lval& (0+255),b
  2549  001E9A  0E00               	movlw	0
  2550  001E9C  2387               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2551  001E9E  2388               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2552  001EA0  2389               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2553  001EA2                     l4731:
  2554                           
  2555                           ; BSR set to: 0
  2556  001EA2  C086  F056         	movff	___fttol@lval,?___fttol
  2557  001EA6  C087  F057         	movff	___fttol@lval+1,?___fttol+1
  2558  001EAA  C088  F058         	movff	___fttol@lval+2,?___fttol+2
  2559  001EAE  C089  F059         	movff	___fttol@lval+3,?___fttol+3
  2560  001EB2  0012               	return	
  2561  001EB4                     __end_of___fttol:
  2562                           	opt stack 0
  2563                           tblptru	equ	0xFF8
  2564                           postinc0	equ	0xFEE
  2565                           wreg	equ	0xFE8
  2566                           indf2	equ	0xFDF
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function ___awdiv *****************
  2572 ;; Defined at:
  2573 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  dividend        2   17[COMRAM] int 
  2576 ;;  divisor         2   19[COMRAM] int 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  quotient        2   23[COMRAM] int 
  2579 ;;  sign            1   22[COMRAM] unsigned char 
  2580 ;;  counter         1   21[COMRAM] unsigned char 
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  2   17[COMRAM] int 
  2583 ;; Registers used:
  2584 ;;		wreg, status,2, status,0
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2590 ;;      Params:         4       0       0       0       0       0       0
  2591 ;;      Locals:         4       0       0       0       0       0       0
  2592 ;;      Temps:          0       0       0       0       0       0       0
  2593 ;;      Totals:         8       0       0       0       0       0       0
  2594 ;;Total ram usage:        8 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    1
  2597 ;; This function calls:
  2598 ;;		Nothing
  2599 ;; This function is called by:
  2600 ;;		_translate_flex
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           	psect	text4
  2605  00261C                     __ptext4:
  2606                           	opt stack 0
  2607  00261C                     ___awdiv:
  2608                           	opt stack 28
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;incstack = 0
  2612  00261C  0E00               	movlw	0
  2613  00261E  6E17               	movwf	___awdiv@sign,c
  2614  002620  AE15               	btfss	___awdiv@divisor+1,7,c
  2615  002622  D006               	goto	l4653
  2616  002624  6C14               	negf	___awdiv@divisor,c
  2617  002626  1E15               	comf	___awdiv@divisor+1,f,c
  2618  002628  B0D8               	btfsc	status,0,c
  2619  00262A  2A15               	incf	___awdiv@divisor+1,f,c
  2620  00262C  0E01               	movlw	1
  2621  00262E  6E17               	movwf	___awdiv@sign,c
  2622  002630                     l4653:
  2623  002630  AE13               	btfss	___awdiv@dividend+1,7,c
  2624  002632  D006               	goto	l4659
  2625  002634  6C12               	negf	___awdiv@dividend,c
  2626  002636  1E13               	comf	___awdiv@dividend+1,f,c
  2627  002638  B0D8               	btfsc	status,0,c
  2628  00263A  2A13               	incf	___awdiv@dividend+1,f,c
  2629  00263C  0E01               	movlw	1
  2630  00263E  1A17               	xorwf	___awdiv@sign,f,c
  2631  002640                     l4659:
  2632  002640  0E00               	movlw	0
  2633  002642  6E19               	movwf	___awdiv@quotient+1,c
  2634  002644  0E00               	movlw	0
  2635  002646  6E18               	movwf	___awdiv@quotient,c
  2636  002648  5014               	movf	___awdiv@divisor,w,c
  2637  00264A  1015               	iorwf	___awdiv@divisor+1,w,c
  2638  00264C  B4D8               	btfsc	status,2,c
  2639  00264E  D01C               	goto	l4681
  2640  002650  0E01               	movlw	1
  2641  002652  6E16               	movwf	___awdiv@counter,c
  2642  002654  D004               	goto	l4667
  2643  002656                     l4665:
  2644  002656  90D8               	bcf	status,0,c
  2645  002658  3614               	rlcf	___awdiv@divisor,f,c
  2646  00265A  3615               	rlcf	___awdiv@divisor+1,f,c
  2647  00265C  2A16               	incf	___awdiv@counter,f,c
  2648  00265E                     l4667:
  2649  00265E  AE15               	btfss	___awdiv@divisor+1,7,c
  2650  002660  D7FA               	goto	l4665
  2651  002662                     l4669:
  2652  002662  90D8               	bcf	status,0,c
  2653  002664  3618               	rlcf	___awdiv@quotient,f,c
  2654  002666  3619               	rlcf	___awdiv@quotient+1,f,c
  2655  002668  5014               	movf	___awdiv@divisor,w,c
  2656  00266A  5C12               	subwf	___awdiv@dividend,w,c
  2657  00266C  5015               	movf	___awdiv@divisor+1,w,c
  2658  00266E  5813               	subwfb	___awdiv@dividend+1,w,c
  2659  002670  A0D8               	btfss	status,0,c
  2660  002672  D005               	goto	l4677
  2661  002674  5014               	movf	___awdiv@divisor,w,c
  2662  002676  5E12               	subwf	___awdiv@dividend,f,c
  2663  002678  5015               	movf	___awdiv@divisor+1,w,c
  2664  00267A  5A13               	subwfb	___awdiv@dividend+1,f,c
  2665  00267C  8018               	bsf	___awdiv@quotient,0,c
  2666  00267E                     l4677:
  2667  00267E  90D8               	bcf	status,0,c
  2668  002680  3215               	rrcf	___awdiv@divisor+1,f,c
  2669  002682  3214               	rrcf	___awdiv@divisor,f,c
  2670  002684  2E16               	decfsz	___awdiv@counter,f,c
  2671  002686  D7ED               	goto	l4669
  2672  002688                     l4681:
  2673  002688  5017               	movf	___awdiv@sign,w,c
  2674  00268A  B4D8               	btfsc	status,2,c
  2675  00268C  D004               	goto	l4685
  2676  00268E  6C18               	negf	___awdiv@quotient,c
  2677  002690  1E19               	comf	___awdiv@quotient+1,f,c
  2678  002692  B0D8               	btfsc	status,0,c
  2679  002694  2A19               	incf	___awdiv@quotient+1,f,c
  2680  002696                     l4685:
  2681  002696  C018  F012         	movff	___awdiv@quotient,?___awdiv
  2682  00269A  C019  F013         	movff	___awdiv@quotient+1,?___awdiv+1
  2683  00269E  0012               	return	
  2684  0026A0                     __end_of___awdiv:
  2685                           	opt stack 0
  2686                           tblptru	equ	0xFF8
  2687                           postinc0	equ	0xFEE
  2688                           wreg	equ	0xFE8
  2689                           indf2	equ	0xFDF
  2690                           fsr2h	equ	0xFDA
  2691                           fsr2l	equ	0xFD9
  2692                           status	equ	0xFD8
  2693                           
  2694 ;; *************** function _KalmanFilter_9 *****************
  2695 ;; Defined at:
  2696 ;;		line 269 in file "harwave/flex.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;  ResrcData_9     3   52[COMRAM] const 
  2699 ;;  ProcessNiose    3   55[COMRAM] const 
  2700 ;;  MeasureNoise    3   58[COMRAM] const 
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;  p_mid           3   82[COMRAM] const 
  2703 ;;  x_mid           3   79[COMRAM] const 
  2704 ;;  kg              3   76[COMRAM] const 
  2705 ;;  x_now           3   73[COMRAM] const 
  2706 ;;  p_now           3   67[COMRAM] const 
  2707 ;;  Q               3   64[COMRAM] const 
  2708 ;;  R               3   61[COMRAM] const 
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  3   52[COMRAM] const 
  2711 ;; Registers used:
  2712 ;;		wreg, status,2, status,0, cstack
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2718 ;;      Params:         9       0       0       0       0       0       0
  2719 ;;      Locals:        24       0       0       0       0       0       0
  2720 ;;      Temps:          0       0       0       0       0       0       0
  2721 ;;      Totals:        33       0       0       0       0       0       0
  2722 ;;Total ram usage:       33 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    3
  2725 ;; This function calls:
  2726 ;;		___ftadd
  2727 ;;		___ftdiv
  2728 ;;		___ftmul
  2729 ;;		___ftneg
  2730 ;; This function is called by:
  2731 ;;		_translate_flex
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text5
  2736  000DD2                     __ptext5:
  2737                           	opt stack 0
  2738  000DD2                     _KalmanFilter_9:
  2739                           	opt stack 26
  2740                           
  2741                           ;flex.c: 272: double R = MeasureNoise_R_9;
  2742                           
  2743                           ;incstack = 0
  2744  000DD2  C03B  F03E         	movff	KalmanFilter_9@MeasureNoise_R_9,KalmanFilter_9@R
  2745  000DD6  C03C  F03F         	movff	KalmanFilter_9@MeasureNoise_R_9+1,KalmanFilter_9@R+1
  2746  000DDA  C03D  F040         	movff	KalmanFilter_9@MeasureNoise_R_9+2,KalmanFilter_9@R+2
  2747                           
  2748                           ;flex.c: 273: double Q = ProcessNiose_Q_9;
  2749  000DDE  C038  F041         	movff	KalmanFilter_9@ProcessNiose_Q_9,KalmanFilter_9@Q
  2750  000DE2  C039  F042         	movff	KalmanFilter_9@ProcessNiose_Q_9+1,KalmanFilter_9@Q+1
  2751  000DE6  C03A  F043         	movff	KalmanFilter_9@ProcessNiose_Q_9+2,KalmanFilter_9@Q+2
  2752                           
  2753                           ;flex.c: 275: static double x_last_9;
  2754                           ;flex.c: 276: double x_mid = x_last_9;
  2755  000DEA  C17D  F050         	movff	KalmanFilter_9@x_last_9,KalmanFilter_9@x_mid
  2756  000DEE  C17E  F051         	movff	KalmanFilter_9@x_last_9+1,KalmanFilter_9@x_mid+1
  2757  000DF2  C17F  F052         	movff	KalmanFilter_9@x_last_9+2,KalmanFilter_9@x_mid+2
  2758                           
  2759                           ;flex.c: 277: double x_now;
  2760                           ;flex.c: 279: static double p_last_9;
  2761                           ;flex.c: 280: double p_mid ;
  2762                           ;flex.c: 281: double p_now;
  2763                           ;flex.c: 283: double kg;
  2764                           ;flex.c: 285: x_mid=x_last_9;
  2765  000DF6  C17D  F050         	movff	KalmanFilter_9@x_last_9,KalmanFilter_9@x_mid
  2766  000DFA  C17E  F051         	movff	KalmanFilter_9@x_last_9+1,KalmanFilter_9@x_mid+1
  2767  000DFE  C17F  F052         	movff	KalmanFilter_9@x_last_9+2,KalmanFilter_9@x_mid+2
  2768                           
  2769                           ;flex.c: 286: p_mid=p_last_9+Q;
  2770  000E02  C17A  F01A         	movff	KalmanFilter_9@p_last_9,___ftadd@f1
  2771  000E06  C17B  F01B         	movff	KalmanFilter_9@p_last_9+1,___ftadd@f1+1
  2772  000E0A  C17C  F01C         	movff	KalmanFilter_9@p_last_9+2,___ftadd@f1+2
  2773  000E0E  C041  F01D         	movff	KalmanFilter_9@Q,___ftadd@f2
  2774  000E12  C042  F01E         	movff	KalmanFilter_9@Q+1,___ftadd@f2+1
  2775  000E16  C043  F01F         	movff	KalmanFilter_9@Q+2,___ftadd@f2+2
  2776  000E1A  EC13  F006         	call	___ftadd	;wreg free
  2777  000E1E  C01A  F053         	movff	?___ftadd,KalmanFilter_9@p_mid
  2778  000E22  C01B  F054         	movff	?___ftadd+1,KalmanFilter_9@p_mid+1
  2779  000E26  C01C  F055         	movff	?___ftadd+2,KalmanFilter_9@p_mid+2
  2780                           
  2781                           ;flex.c: 291: kg=p_mid/(p_mid+R);
  2782  000E2A  C053  F026         	movff	KalmanFilter_9@p_mid,___ftdiv@f1
  2783  000E2E  C054  F027         	movff	KalmanFilter_9@p_mid+1,___ftdiv@f1+1
  2784  000E32  C055  F028         	movff	KalmanFilter_9@p_mid+2,___ftdiv@f1+2
  2785  000E36  C03E  F01D         	movff	KalmanFilter_9@R,___ftadd@f2
  2786  000E3A  C03F  F01E         	movff	KalmanFilter_9@R+1,___ftadd@f2+1
  2787  000E3E  C040  F01F         	movff	KalmanFilter_9@R+2,___ftadd@f2+2
  2788  000E42  C053  F01A         	movff	KalmanFilter_9@p_mid,___ftadd@f1
  2789  000E46  C054  F01B         	movff	KalmanFilter_9@p_mid+1,___ftadd@f1+1
  2790  000E4A  C055  F01C         	movff	KalmanFilter_9@p_mid+2,___ftadd@f1+2
  2791  000E4E  EC13  F006         	call	___ftadd	;wreg free
  2792  000E52  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  2793  000E56  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  2794  000E5A  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  2795  000E5E  ECDA  F010         	call	___ftdiv	;wreg free
  2796  000E62  C026  F04D         	movff	?___ftdiv,KalmanFilter_9@kg
  2797  000E66  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_9@kg+1
  2798  000E6A  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_9@kg+2
  2799                           
  2800                           ;flex.c: 292: x_now=x_mid+kg*(ResrcData_9-x_mid);
  2801  000E6E  C04D  F029         	movff	KalmanFilter_9@kg,___ftmul@f2
  2802  000E72  C04E  F02A         	movff	KalmanFilter_9@kg+1,___ftmul@f2+1
  2803  000E76  C04F  F02B         	movff	KalmanFilter_9@kg+2,___ftmul@f2+2
  2804  000E7A  C035  F01D         	movff	KalmanFilter_9@ResrcData_9,___ftadd@f2
  2805  000E7E  C036  F01E         	movff	KalmanFilter_9@ResrcData_9+1,___ftadd@f2+1
  2806  000E82  C037  F01F         	movff	KalmanFilter_9@ResrcData_9+2,___ftadd@f2+2
  2807  000E86  C050  F012         	movff	KalmanFilter_9@x_mid,___ftneg@f1
  2808  000E8A  C051  F013         	movff	KalmanFilter_9@x_mid+1,___ftneg@f1+1
  2809  000E8E  C052  F014         	movff	KalmanFilter_9@x_mid+2,___ftneg@f1+2
  2810  000E92  ECA3  F015         	call	___ftneg	;wreg free
  2811  000E96  C012  F01A         	movff	?___ftneg,___ftadd@f1
  2812  000E9A  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  2813  000E9E  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  2814  000EA2  EC13  F006         	call	___ftadd	;wreg free
  2815  000EA6  C01A  F026         	movff	?___ftadd,___ftmul@f1
  2816  000EAA  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  2817  000EAE  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  2818  000EB2  EC60  F010         	call	___ftmul	;wreg free
  2819  000EB6  C026  F047         	movff	?___ftmul,_KalmanFilter_9$2030
  2820  000EBA  C027  F048         	movff	?___ftmul+1,_KalmanFilter_9$2030+1
  2821  000EBE  C028  F049         	movff	?___ftmul+2,_KalmanFilter_9$2030+2
  2822                           
  2823                           ;flex.c: 292: x_now=x_mid+kg*(ResrcData_9-x_mid);
  2824  000EC2  C047  F01A         	movff	_KalmanFilter_9$2030,___ftadd@f1
  2825  000EC6  C048  F01B         	movff	_KalmanFilter_9$2030+1,___ftadd@f1+1
  2826  000ECA  C049  F01C         	movff	_KalmanFilter_9$2030+2,___ftadd@f1+2
  2827  000ECE  C050  F01D         	movff	KalmanFilter_9@x_mid,___ftadd@f2
  2828  000ED2  C051  F01E         	movff	KalmanFilter_9@x_mid+1,___ftadd@f2+1
  2829  000ED6  C052  F01F         	movff	KalmanFilter_9@x_mid+2,___ftadd@f2+2
  2830  000EDA  EC13  F006         	call	___ftadd	;wreg free
  2831  000EDE  C01A  F04A         	movff	?___ftadd,KalmanFilter_9@x_now
  2832  000EE2  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_9@x_now+1
  2833  000EE6  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_9@x_now+2
  2834                           
  2835                           ;flex.c: 293: p_now=(1-kg)*p_mid;
  2836  000EEA  0E00               	movlw	0
  2837  000EEC  6E1D               	movwf	___ftadd@f2,c
  2838  000EEE  0E80               	movlw	128
  2839  000EF0  6E1E               	movwf	___ftadd@f2+1,c
  2840  000EF2  0E3F               	movlw	63
  2841  000EF4  6E1F               	movwf	___ftadd@f2+2,c
  2842  000EF6  C04D  F012         	movff	KalmanFilter_9@kg,___ftneg@f1
  2843  000EFA  C04E  F013         	movff	KalmanFilter_9@kg+1,___ftneg@f1+1
  2844  000EFE  C04F  F014         	movff	KalmanFilter_9@kg+2,___ftneg@f1+2
  2845  000F02  ECA3  F015         	call	___ftneg	;wreg free
  2846  000F06  C012  F01A         	movff	?___ftneg,___ftadd@f1
  2847  000F0A  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  2848  000F0E  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  2849  000F12  EC13  F006         	call	___ftadd	;wreg free
  2850  000F16  C01A  F026         	movff	?___ftadd,___ftmul@f1
  2851  000F1A  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  2852  000F1E  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  2853  000F22  C053  F029         	movff	KalmanFilter_9@p_mid,___ftmul@f2
  2854  000F26  C054  F02A         	movff	KalmanFilter_9@p_mid+1,___ftmul@f2+1
  2855  000F2A  C055  F02B         	movff	KalmanFilter_9@p_mid+2,___ftmul@f2+2
  2856  000F2E  EC60  F010         	call	___ftmul	;wreg free
  2857  000F32  C026  F044         	movff	?___ftmul,KalmanFilter_9@p_now
  2858  000F36  C027  F045         	movff	?___ftmul+1,KalmanFilter_9@p_now+1
  2859  000F3A  C028  F046         	movff	?___ftmul+2,KalmanFilter_9@p_now+2
  2860                           
  2861                           ;flex.c: 294: p_last_9 = p_now;
  2862  000F3E  C044  F17A         	movff	KalmanFilter_9@p_now,KalmanFilter_9@p_last_9
  2863  000F42  C045  F17B         	movff	KalmanFilter_9@p_now+1,KalmanFilter_9@p_last_9+1
  2864  000F46  C046  F17C         	movff	KalmanFilter_9@p_now+2,KalmanFilter_9@p_last_9+2
  2865                           
  2866                           ;flex.c: 295: x_last_9 = x_now;
  2867  000F4A  C04A  F17D         	movff	KalmanFilter_9@x_now,KalmanFilter_9@x_last_9
  2868  000F4E  C04B  F17E         	movff	KalmanFilter_9@x_now+1,KalmanFilter_9@x_last_9+1
  2869  000F52  C04C  F17F         	movff	KalmanFilter_9@x_now+2,KalmanFilter_9@x_last_9+2
  2870                           
  2871                           ;flex.c: 296: return x_now;
  2872  000F56  C04A  F035         	movff	KalmanFilter_9@x_now,?_KalmanFilter_9
  2873  000F5A  C04B  F036         	movff	KalmanFilter_9@x_now+1,?_KalmanFilter_9+1
  2874  000F5E  C04C  F037         	movff	KalmanFilter_9@x_now+2,?_KalmanFilter_9+2
  2875  000F62  0012               	return	
  2876  000F64                     __end_of_KalmanFilter_9:
  2877                           	opt stack 0
  2878                           tblptru	equ	0xFF8
  2879                           postinc0	equ	0xFEE
  2880                           wreg	equ	0xFE8
  2881                           indf2	equ	0xFDF
  2882                           fsr2h	equ	0xFDA
  2883                           fsr2l	equ	0xFD9
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _KalmanFilter_8 *****************
  2887 ;; Defined at:
  2888 ;;		line 240 in file "harwave/flex.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  ResrcData_8     3   52[COMRAM] const 
  2891 ;;  ProcessNiose    3   55[COMRAM] const 
  2892 ;;  MeasureNoise    3   58[COMRAM] const 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  p_mid           3   82[COMRAM] const 
  2895 ;;  x_mid           3   79[COMRAM] const 
  2896 ;;  kg              3   76[COMRAM] const 
  2897 ;;  x_now           3   73[COMRAM] const 
  2898 ;;  p_now           3   67[COMRAM] const 
  2899 ;;  Q               3   64[COMRAM] const 
  2900 ;;  R               3   61[COMRAM] const 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  3   52[COMRAM] const 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2910 ;;      Params:         9       0       0       0       0       0       0
  2911 ;;      Locals:        24       0       0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0
  2913 ;;      Totals:        33       0       0       0       0       0       0
  2914 ;;Total ram usage:       33 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    3
  2917 ;; This function calls:
  2918 ;;		___ftadd
  2919 ;;		___ftdiv
  2920 ;;		___ftmul
  2921 ;;		___ftneg
  2922 ;; This function is called by:
  2923 ;;		_translate_flex
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           	psect	text6
  2928  000F64                     __ptext6:
  2929                           	opt stack 0
  2930  000F64                     _KalmanFilter_8:
  2931                           	opt stack 26
  2932                           
  2933                           ;flex.c: 243: double R = MeasureNoise_R_8;
  2934                           
  2935                           ;incstack = 0
  2936  000F64  C03B  F03E         	movff	KalmanFilter_8@MeasureNoise_R_8,KalmanFilter_8@R
  2937  000F68  C03C  F03F         	movff	KalmanFilter_8@MeasureNoise_R_8+1,KalmanFilter_8@R+1
  2938  000F6C  C03D  F040         	movff	KalmanFilter_8@MeasureNoise_R_8+2,KalmanFilter_8@R+2
  2939                           
  2940                           ;flex.c: 244: double Q = ProcessNiose_Q_8;
  2941  000F70  C038  F041         	movff	KalmanFilter_8@ProcessNiose_Q_8,KalmanFilter_8@Q
  2942  000F74  C039  F042         	movff	KalmanFilter_8@ProcessNiose_Q_8+1,KalmanFilter_8@Q+1
  2943  000F78  C03A  F043         	movff	KalmanFilter_8@ProcessNiose_Q_8+2,KalmanFilter_8@Q+2
  2944                           
  2945                           ;flex.c: 246: static double x_last_8;
  2946                           ;flex.c: 247: double x_mid = x_last_8;
  2947  000F7C  C183  F050         	movff	KalmanFilter_8@x_last_8,KalmanFilter_8@x_mid
  2948  000F80  C184  F051         	movff	KalmanFilter_8@x_last_8+1,KalmanFilter_8@x_mid+1
  2949  000F84  C185  F052         	movff	KalmanFilter_8@x_last_8+2,KalmanFilter_8@x_mid+2
  2950                           
  2951                           ;flex.c: 248: double x_now;
  2952                           ;flex.c: 250: static double p_last_8;
  2953                           ;flex.c: 251: double p_mid ;
  2954                           ;flex.c: 252: double p_now;
  2955                           ;flex.c: 254: double kg;
  2956                           ;flex.c: 256: x_mid=x_last_8;
  2957  000F88  C183  F050         	movff	KalmanFilter_8@x_last_8,KalmanFilter_8@x_mid
  2958  000F8C  C184  F051         	movff	KalmanFilter_8@x_last_8+1,KalmanFilter_8@x_mid+1
  2959  000F90  C185  F052         	movff	KalmanFilter_8@x_last_8+2,KalmanFilter_8@x_mid+2
  2960                           
  2961                           ;flex.c: 257: p_mid=p_last_8+Q;
  2962  000F94  C180  F01A         	movff	KalmanFilter_8@p_last_8,___ftadd@f1
  2963  000F98  C181  F01B         	movff	KalmanFilter_8@p_last_8+1,___ftadd@f1+1
  2964  000F9C  C182  F01C         	movff	KalmanFilter_8@p_last_8+2,___ftadd@f1+2
  2965  000FA0  C041  F01D         	movff	KalmanFilter_8@Q,___ftadd@f2
  2966  000FA4  C042  F01E         	movff	KalmanFilter_8@Q+1,___ftadd@f2+1
  2967  000FA8  C043  F01F         	movff	KalmanFilter_8@Q+2,___ftadd@f2+2
  2968  000FAC  EC13  F006         	call	___ftadd	;wreg free
  2969  000FB0  C01A  F053         	movff	?___ftadd,KalmanFilter_8@p_mid
  2970  000FB4  C01B  F054         	movff	?___ftadd+1,KalmanFilter_8@p_mid+1
  2971  000FB8  C01C  F055         	movff	?___ftadd+2,KalmanFilter_8@p_mid+2
  2972                           
  2973                           ;flex.c: 262: kg=p_mid/(p_mid+R);
  2974  000FBC  C053  F026         	movff	KalmanFilter_8@p_mid,___ftdiv@f1
  2975  000FC0  C054  F027         	movff	KalmanFilter_8@p_mid+1,___ftdiv@f1+1
  2976  000FC4  C055  F028         	movff	KalmanFilter_8@p_mid+2,___ftdiv@f1+2
  2977  000FC8  C03E  F01D         	movff	KalmanFilter_8@R,___ftadd@f2
  2978  000FCC  C03F  F01E         	movff	KalmanFilter_8@R+1,___ftadd@f2+1
  2979  000FD0  C040  F01F         	movff	KalmanFilter_8@R+2,___ftadd@f2+2
  2980  000FD4  C053  F01A         	movff	KalmanFilter_8@p_mid,___ftadd@f1
  2981  000FD8  C054  F01B         	movff	KalmanFilter_8@p_mid+1,___ftadd@f1+1
  2982  000FDC  C055  F01C         	movff	KalmanFilter_8@p_mid+2,___ftadd@f1+2
  2983  000FE0  EC13  F006         	call	___ftadd	;wreg free
  2984  000FE4  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  2985  000FE8  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  2986  000FEC  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  2987  000FF0  ECDA  F010         	call	___ftdiv	;wreg free
  2988  000FF4  C026  F04D         	movff	?___ftdiv,KalmanFilter_8@kg
  2989  000FF8  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_8@kg+1
  2990  000FFC  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_8@kg+2
  2991                           
  2992                           ;flex.c: 263: x_now=x_mid+kg*(ResrcData_8-x_mid);
  2993  001000  C04D  F029         	movff	KalmanFilter_8@kg,___ftmul@f2
  2994  001004  C04E  F02A         	movff	KalmanFilter_8@kg+1,___ftmul@f2+1
  2995  001008  C04F  F02B         	movff	KalmanFilter_8@kg+2,___ftmul@f2+2
  2996  00100C  C035  F01D         	movff	KalmanFilter_8@ResrcData_8,___ftadd@f2
  2997  001010  C036  F01E         	movff	KalmanFilter_8@ResrcData_8+1,___ftadd@f2+1
  2998  001014  C037  F01F         	movff	KalmanFilter_8@ResrcData_8+2,___ftadd@f2+2
  2999  001018  C050  F012         	movff	KalmanFilter_8@x_mid,___ftneg@f1
  3000  00101C  C051  F013         	movff	KalmanFilter_8@x_mid+1,___ftneg@f1+1
  3001  001020  C052  F014         	movff	KalmanFilter_8@x_mid+2,___ftneg@f1+2
  3002  001024  ECA3  F015         	call	___ftneg	;wreg free
  3003  001028  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3004  00102C  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3005  001030  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3006  001034  EC13  F006         	call	___ftadd	;wreg free
  3007  001038  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3008  00103C  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3009  001040  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3010  001044  EC60  F010         	call	___ftmul	;wreg free
  3011  001048  C026  F047         	movff	?___ftmul,_KalmanFilter_8$2029
  3012  00104C  C027  F048         	movff	?___ftmul+1,_KalmanFilter_8$2029+1
  3013  001050  C028  F049         	movff	?___ftmul+2,_KalmanFilter_8$2029+2
  3014                           
  3015                           ;flex.c: 263: x_now=x_mid+kg*(ResrcData_8-x_mid);
  3016  001054  C047  F01A         	movff	_KalmanFilter_8$2029,___ftadd@f1
  3017  001058  C048  F01B         	movff	_KalmanFilter_8$2029+1,___ftadd@f1+1
  3018  00105C  C049  F01C         	movff	_KalmanFilter_8$2029+2,___ftadd@f1+2
  3019  001060  C050  F01D         	movff	KalmanFilter_8@x_mid,___ftadd@f2
  3020  001064  C051  F01E         	movff	KalmanFilter_8@x_mid+1,___ftadd@f2+1
  3021  001068  C052  F01F         	movff	KalmanFilter_8@x_mid+2,___ftadd@f2+2
  3022  00106C  EC13  F006         	call	___ftadd	;wreg free
  3023  001070  C01A  F04A         	movff	?___ftadd,KalmanFilter_8@x_now
  3024  001074  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_8@x_now+1
  3025  001078  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_8@x_now+2
  3026                           
  3027                           ;flex.c: 264: p_now=(1-kg)*p_mid;
  3028  00107C  0E00               	movlw	0
  3029  00107E  6E1D               	movwf	___ftadd@f2,c
  3030  001080  0E80               	movlw	128
  3031  001082  6E1E               	movwf	___ftadd@f2+1,c
  3032  001084  0E3F               	movlw	63
  3033  001086  6E1F               	movwf	___ftadd@f2+2,c
  3034  001088  C04D  F012         	movff	KalmanFilter_8@kg,___ftneg@f1
  3035  00108C  C04E  F013         	movff	KalmanFilter_8@kg+1,___ftneg@f1+1
  3036  001090  C04F  F014         	movff	KalmanFilter_8@kg+2,___ftneg@f1+2
  3037  001094  ECA3  F015         	call	___ftneg	;wreg free
  3038  001098  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3039  00109C  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3040  0010A0  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3041  0010A4  EC13  F006         	call	___ftadd	;wreg free
  3042  0010A8  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3043  0010AC  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3044  0010B0  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3045  0010B4  C053  F029         	movff	KalmanFilter_8@p_mid,___ftmul@f2
  3046  0010B8  C054  F02A         	movff	KalmanFilter_8@p_mid+1,___ftmul@f2+1
  3047  0010BC  C055  F02B         	movff	KalmanFilter_8@p_mid+2,___ftmul@f2+2
  3048  0010C0  EC60  F010         	call	___ftmul	;wreg free
  3049  0010C4  C026  F044         	movff	?___ftmul,KalmanFilter_8@p_now
  3050  0010C8  C027  F045         	movff	?___ftmul+1,KalmanFilter_8@p_now+1
  3051  0010CC  C028  F046         	movff	?___ftmul+2,KalmanFilter_8@p_now+2
  3052                           
  3053                           ;flex.c: 265: p_last_8 = p_now;
  3054  0010D0  C044  F180         	movff	KalmanFilter_8@p_now,KalmanFilter_8@p_last_8
  3055  0010D4  C045  F181         	movff	KalmanFilter_8@p_now+1,KalmanFilter_8@p_last_8+1
  3056  0010D8  C046  F182         	movff	KalmanFilter_8@p_now+2,KalmanFilter_8@p_last_8+2
  3057                           
  3058                           ;flex.c: 266: x_last_8 = x_now;
  3059  0010DC  C04A  F183         	movff	KalmanFilter_8@x_now,KalmanFilter_8@x_last_8
  3060  0010E0  C04B  F184         	movff	KalmanFilter_8@x_now+1,KalmanFilter_8@x_last_8+1
  3061  0010E4  C04C  F185         	movff	KalmanFilter_8@x_now+2,KalmanFilter_8@x_last_8+2
  3062                           
  3063                           ;flex.c: 267: return x_now;
  3064  0010E8  C04A  F035         	movff	KalmanFilter_8@x_now,?_KalmanFilter_8
  3065  0010EC  C04B  F036         	movff	KalmanFilter_8@x_now+1,?_KalmanFilter_8+1
  3066  0010F0  C04C  F037         	movff	KalmanFilter_8@x_now+2,?_KalmanFilter_8+2
  3067  0010F4  0012               	return	
  3068  0010F6                     __end_of_KalmanFilter_8:
  3069                           	opt stack 0
  3070                           tblptru	equ	0xFF8
  3071                           postinc0	equ	0xFEE
  3072                           wreg	equ	0xFE8
  3073                           indf2	equ	0xFDF
  3074                           fsr2h	equ	0xFDA
  3075                           fsr2l	equ	0xFD9
  3076                           status	equ	0xFD8
  3077                           
  3078 ;; *************** function _KalmanFilter_7 *****************
  3079 ;; Defined at:
  3080 ;;		line 211 in file "harwave/flex.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  ResrcData_7     3   52[COMRAM] const 
  3083 ;;  ProcessNiose    3   55[COMRAM] const 
  3084 ;;  MeasureNoise    3   58[COMRAM] const 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  p_mid           3   82[COMRAM] const 
  3087 ;;  x_mid           3   79[COMRAM] const 
  3088 ;;  kg              3   76[COMRAM] const 
  3089 ;;  x_now           3   73[COMRAM] const 
  3090 ;;  p_now           3   67[COMRAM] const 
  3091 ;;  Q               3   64[COMRAM] const 
  3092 ;;  R               3   61[COMRAM] const 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  3   52[COMRAM] const 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2, status,0, cstack
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3102 ;;      Params:         9       0       0       0       0       0       0
  3103 ;;      Locals:        24       0       0       0       0       0       0
  3104 ;;      Temps:          0       0       0       0       0       0       0
  3105 ;;      Totals:        33       0       0       0       0       0       0
  3106 ;;Total ram usage:       33 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    3
  3109 ;; This function calls:
  3110 ;;		___ftadd
  3111 ;;		___ftdiv
  3112 ;;		___ftmul
  3113 ;;		___ftneg
  3114 ;; This function is called by:
  3115 ;;		_translate_flex
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           	psect	text7
  3120  0010F6                     __ptext7:
  3121                           	opt stack 0
  3122  0010F6                     _KalmanFilter_7:
  3123                           	opt stack 26
  3124                           
  3125                           ;flex.c: 214: double R = MeasureNoise_R_7;
  3126                           
  3127                           ;incstack = 0
  3128  0010F6  C03B  F03E         	movff	KalmanFilter_7@MeasureNoise_R_7,KalmanFilter_7@R
  3129  0010FA  C03C  F03F         	movff	KalmanFilter_7@MeasureNoise_R_7+1,KalmanFilter_7@R+1
  3130  0010FE  C03D  F040         	movff	KalmanFilter_7@MeasureNoise_R_7+2,KalmanFilter_7@R+2
  3131                           
  3132                           ;flex.c: 215: double Q = ProcessNiose_Q_7;
  3133  001102  C038  F041         	movff	KalmanFilter_7@ProcessNiose_Q_7,KalmanFilter_7@Q
  3134  001106  C039  F042         	movff	KalmanFilter_7@ProcessNiose_Q_7+1,KalmanFilter_7@Q+1
  3135  00110A  C03A  F043         	movff	KalmanFilter_7@ProcessNiose_Q_7+2,KalmanFilter_7@Q+2
  3136                           
  3137                           ;flex.c: 217: static double x_last_7;
  3138                           ;flex.c: 218: double x_mid = x_last_7;
  3139  00110E  C189  F050         	movff	KalmanFilter_7@x_last_7,KalmanFilter_7@x_mid
  3140  001112  C18A  F051         	movff	KalmanFilter_7@x_last_7+1,KalmanFilter_7@x_mid+1
  3141  001116  C18B  F052         	movff	KalmanFilter_7@x_last_7+2,KalmanFilter_7@x_mid+2
  3142                           
  3143                           ;flex.c: 219: double x_now;
  3144                           ;flex.c: 221: static double p_last_7;
  3145                           ;flex.c: 222: double p_mid ;
  3146                           ;flex.c: 223: double p_now;
  3147                           ;flex.c: 225: double kg;
  3148                           ;flex.c: 227: x_mid=x_last_7;
  3149  00111A  C189  F050         	movff	KalmanFilter_7@x_last_7,KalmanFilter_7@x_mid
  3150  00111E  C18A  F051         	movff	KalmanFilter_7@x_last_7+1,KalmanFilter_7@x_mid+1
  3151  001122  C18B  F052         	movff	KalmanFilter_7@x_last_7+2,KalmanFilter_7@x_mid+2
  3152                           
  3153                           ;flex.c: 228: p_mid=p_last_7+Q;
  3154  001126  C186  F01A         	movff	KalmanFilter_7@p_last_7,___ftadd@f1
  3155  00112A  C187  F01B         	movff	KalmanFilter_7@p_last_7+1,___ftadd@f1+1
  3156  00112E  C188  F01C         	movff	KalmanFilter_7@p_last_7+2,___ftadd@f1+2
  3157  001132  C041  F01D         	movff	KalmanFilter_7@Q,___ftadd@f2
  3158  001136  C042  F01E         	movff	KalmanFilter_7@Q+1,___ftadd@f2+1
  3159  00113A  C043  F01F         	movff	KalmanFilter_7@Q+2,___ftadd@f2+2
  3160  00113E  EC13  F006         	call	___ftadd	;wreg free
  3161  001142  C01A  F053         	movff	?___ftadd,KalmanFilter_7@p_mid
  3162  001146  C01B  F054         	movff	?___ftadd+1,KalmanFilter_7@p_mid+1
  3163  00114A  C01C  F055         	movff	?___ftadd+2,KalmanFilter_7@p_mid+2
  3164                           
  3165                           ;flex.c: 233: kg=p_mid/(p_mid+R);
  3166  00114E  C053  F026         	movff	KalmanFilter_7@p_mid,___ftdiv@f1
  3167  001152  C054  F027         	movff	KalmanFilter_7@p_mid+1,___ftdiv@f1+1
  3168  001156  C055  F028         	movff	KalmanFilter_7@p_mid+2,___ftdiv@f1+2
  3169  00115A  C03E  F01D         	movff	KalmanFilter_7@R,___ftadd@f2
  3170  00115E  C03F  F01E         	movff	KalmanFilter_7@R+1,___ftadd@f2+1
  3171  001162  C040  F01F         	movff	KalmanFilter_7@R+2,___ftadd@f2+2
  3172  001166  C053  F01A         	movff	KalmanFilter_7@p_mid,___ftadd@f1
  3173  00116A  C054  F01B         	movff	KalmanFilter_7@p_mid+1,___ftadd@f1+1
  3174  00116E  C055  F01C         	movff	KalmanFilter_7@p_mid+2,___ftadd@f1+2
  3175  001172  EC13  F006         	call	___ftadd	;wreg free
  3176  001176  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3177  00117A  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3178  00117E  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3179  001182  ECDA  F010         	call	___ftdiv	;wreg free
  3180  001186  C026  F04D         	movff	?___ftdiv,KalmanFilter_7@kg
  3181  00118A  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_7@kg+1
  3182  00118E  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_7@kg+2
  3183                           
  3184                           ;flex.c: 234: x_now=x_mid+kg*(ResrcData_7-x_mid);
  3185  001192  C04D  F029         	movff	KalmanFilter_7@kg,___ftmul@f2
  3186  001196  C04E  F02A         	movff	KalmanFilter_7@kg+1,___ftmul@f2+1
  3187  00119A  C04F  F02B         	movff	KalmanFilter_7@kg+2,___ftmul@f2+2
  3188  00119E  C035  F01D         	movff	KalmanFilter_7@ResrcData_7,___ftadd@f2
  3189  0011A2  C036  F01E         	movff	KalmanFilter_7@ResrcData_7+1,___ftadd@f2+1
  3190  0011A6  C037  F01F         	movff	KalmanFilter_7@ResrcData_7+2,___ftadd@f2+2
  3191  0011AA  C050  F012         	movff	KalmanFilter_7@x_mid,___ftneg@f1
  3192  0011AE  C051  F013         	movff	KalmanFilter_7@x_mid+1,___ftneg@f1+1
  3193  0011B2  C052  F014         	movff	KalmanFilter_7@x_mid+2,___ftneg@f1+2
  3194  0011B6  ECA3  F015         	call	___ftneg	;wreg free
  3195  0011BA  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3196  0011BE  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3197  0011C2  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3198  0011C6  EC13  F006         	call	___ftadd	;wreg free
  3199  0011CA  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3200  0011CE  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3201  0011D2  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3202  0011D6  EC60  F010         	call	___ftmul	;wreg free
  3203  0011DA  C026  F047         	movff	?___ftmul,_KalmanFilter_7$2028
  3204  0011DE  C027  F048         	movff	?___ftmul+1,_KalmanFilter_7$2028+1
  3205  0011E2  C028  F049         	movff	?___ftmul+2,_KalmanFilter_7$2028+2
  3206                           
  3207                           ;flex.c: 234: x_now=x_mid+kg*(ResrcData_7-x_mid);
  3208  0011E6  C047  F01A         	movff	_KalmanFilter_7$2028,___ftadd@f1
  3209  0011EA  C048  F01B         	movff	_KalmanFilter_7$2028+1,___ftadd@f1+1
  3210  0011EE  C049  F01C         	movff	_KalmanFilter_7$2028+2,___ftadd@f1+2
  3211  0011F2  C050  F01D         	movff	KalmanFilter_7@x_mid,___ftadd@f2
  3212  0011F6  C051  F01E         	movff	KalmanFilter_7@x_mid+1,___ftadd@f2+1
  3213  0011FA  C052  F01F         	movff	KalmanFilter_7@x_mid+2,___ftadd@f2+2
  3214  0011FE  EC13  F006         	call	___ftadd	;wreg free
  3215  001202  C01A  F04A         	movff	?___ftadd,KalmanFilter_7@x_now
  3216  001206  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_7@x_now+1
  3217  00120A  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_7@x_now+2
  3218                           
  3219                           ;flex.c: 235: p_now=(1-kg)*p_mid;
  3220  00120E  0E00               	movlw	0
  3221  001210  6E1D               	movwf	___ftadd@f2,c
  3222  001212  0E80               	movlw	128
  3223  001214  6E1E               	movwf	___ftadd@f2+1,c
  3224  001216  0E3F               	movlw	63
  3225  001218  6E1F               	movwf	___ftadd@f2+2,c
  3226  00121A  C04D  F012         	movff	KalmanFilter_7@kg,___ftneg@f1
  3227  00121E  C04E  F013         	movff	KalmanFilter_7@kg+1,___ftneg@f1+1
  3228  001222  C04F  F014         	movff	KalmanFilter_7@kg+2,___ftneg@f1+2
  3229  001226  ECA3  F015         	call	___ftneg	;wreg free
  3230  00122A  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3231  00122E  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3232  001232  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3233  001236  EC13  F006         	call	___ftadd	;wreg free
  3234  00123A  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3235  00123E  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3236  001242  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3237  001246  C053  F029         	movff	KalmanFilter_7@p_mid,___ftmul@f2
  3238  00124A  C054  F02A         	movff	KalmanFilter_7@p_mid+1,___ftmul@f2+1
  3239  00124E  C055  F02B         	movff	KalmanFilter_7@p_mid+2,___ftmul@f2+2
  3240  001252  EC60  F010         	call	___ftmul	;wreg free
  3241  001256  C026  F044         	movff	?___ftmul,KalmanFilter_7@p_now
  3242  00125A  C027  F045         	movff	?___ftmul+1,KalmanFilter_7@p_now+1
  3243  00125E  C028  F046         	movff	?___ftmul+2,KalmanFilter_7@p_now+2
  3244                           
  3245                           ;flex.c: 236: p_last_7 = p_now;
  3246  001262  C044  F186         	movff	KalmanFilter_7@p_now,KalmanFilter_7@p_last_7
  3247  001266  C045  F187         	movff	KalmanFilter_7@p_now+1,KalmanFilter_7@p_last_7+1
  3248  00126A  C046  F188         	movff	KalmanFilter_7@p_now+2,KalmanFilter_7@p_last_7+2
  3249                           
  3250                           ;flex.c: 237: x_last_7 = x_now;
  3251  00126E  C04A  F189         	movff	KalmanFilter_7@x_now,KalmanFilter_7@x_last_7
  3252  001272  C04B  F18A         	movff	KalmanFilter_7@x_now+1,KalmanFilter_7@x_last_7+1
  3253  001276  C04C  F18B         	movff	KalmanFilter_7@x_now+2,KalmanFilter_7@x_last_7+2
  3254                           
  3255                           ;flex.c: 238: return x_now;
  3256  00127A  C04A  F035         	movff	KalmanFilter_7@x_now,?_KalmanFilter_7
  3257  00127E  C04B  F036         	movff	KalmanFilter_7@x_now+1,?_KalmanFilter_7+1
  3258  001282  C04C  F037         	movff	KalmanFilter_7@x_now+2,?_KalmanFilter_7+2
  3259  001286  0012               	return	
  3260  001288                     __end_of_KalmanFilter_7:
  3261                           	opt stack 0
  3262                           tblptru	equ	0xFF8
  3263                           postinc0	equ	0xFEE
  3264                           wreg	equ	0xFE8
  3265                           indf2	equ	0xFDF
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _KalmanFilter_6 *****************
  3271 ;; Defined at:
  3272 ;;		line 182 in file "harwave/flex.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  ResrcData_6     3   52[COMRAM] const 
  3275 ;;  ProcessNiose    3   55[COMRAM] const 
  3276 ;;  MeasureNoise    3   58[COMRAM] const 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  p_mid           3   82[COMRAM] const 
  3279 ;;  x_mid           3   79[COMRAM] const 
  3280 ;;  kg              3   76[COMRAM] const 
  3281 ;;  x_now           3   73[COMRAM] const 
  3282 ;;  p_now           3   67[COMRAM] const 
  3283 ;;  Q               3   64[COMRAM] const 
  3284 ;;  R               3   61[COMRAM] const 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  3   52[COMRAM] const 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3294 ;;      Params:         9       0       0       0       0       0       0
  3295 ;;      Locals:        24       0       0       0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0       0       0
  3297 ;;      Totals:        33       0       0       0       0       0       0
  3298 ;;Total ram usage:       33 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    3
  3301 ;; This function calls:
  3302 ;;		___ftadd
  3303 ;;		___ftdiv
  3304 ;;		___ftmul
  3305 ;;		___ftneg
  3306 ;; This function is called by:
  3307 ;;		_translate_flex
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text8
  3312  001288                     __ptext8:
  3313                           	opt stack 0
  3314  001288                     _KalmanFilter_6:
  3315                           	opt stack 26
  3316                           
  3317                           ;flex.c: 185: double R = MeasureNoise_R_6;
  3318                           
  3319                           ;incstack = 0
  3320  001288  C03B  F03E         	movff	KalmanFilter_6@MeasureNoise_R_6,KalmanFilter_6@R
  3321  00128C  C03C  F03F         	movff	KalmanFilter_6@MeasureNoise_R_6+1,KalmanFilter_6@R+1
  3322  001290  C03D  F040         	movff	KalmanFilter_6@MeasureNoise_R_6+2,KalmanFilter_6@R+2
  3323                           
  3324                           ;flex.c: 186: double Q = ProcessNiose_Q_6;
  3325  001294  C038  F041         	movff	KalmanFilter_6@ProcessNiose_Q_6,KalmanFilter_6@Q
  3326  001298  C039  F042         	movff	KalmanFilter_6@ProcessNiose_Q_6+1,KalmanFilter_6@Q+1
  3327  00129C  C03A  F043         	movff	KalmanFilter_6@ProcessNiose_Q_6+2,KalmanFilter_6@Q+2
  3328                           
  3329                           ;flex.c: 188: static double x_last_6;
  3330                           ;flex.c: 189: double x_mid = x_last_6;
  3331  0012A0  C18F  F050         	movff	KalmanFilter_6@x_last_6,KalmanFilter_6@x_mid
  3332  0012A4  C190  F051         	movff	KalmanFilter_6@x_last_6+1,KalmanFilter_6@x_mid+1
  3333  0012A8  C191  F052         	movff	KalmanFilter_6@x_last_6+2,KalmanFilter_6@x_mid+2
  3334                           
  3335                           ;flex.c: 190: double x_now;
  3336                           ;flex.c: 192: static double p_last_6;
  3337                           ;flex.c: 193: double p_mid ;
  3338                           ;flex.c: 194: double p_now;
  3339                           ;flex.c: 196: double kg;
  3340                           ;flex.c: 198: x_mid=x_last_6;
  3341  0012AC  C18F  F050         	movff	KalmanFilter_6@x_last_6,KalmanFilter_6@x_mid
  3342  0012B0  C190  F051         	movff	KalmanFilter_6@x_last_6+1,KalmanFilter_6@x_mid+1
  3343  0012B4  C191  F052         	movff	KalmanFilter_6@x_last_6+2,KalmanFilter_6@x_mid+2
  3344                           
  3345                           ;flex.c: 199: p_mid=p_last_6+Q;
  3346  0012B8  C18C  F01A         	movff	KalmanFilter_6@p_last_6,___ftadd@f1
  3347  0012BC  C18D  F01B         	movff	KalmanFilter_6@p_last_6+1,___ftadd@f1+1
  3348  0012C0  C18E  F01C         	movff	KalmanFilter_6@p_last_6+2,___ftadd@f1+2
  3349  0012C4  C041  F01D         	movff	KalmanFilter_6@Q,___ftadd@f2
  3350  0012C8  C042  F01E         	movff	KalmanFilter_6@Q+1,___ftadd@f2+1
  3351  0012CC  C043  F01F         	movff	KalmanFilter_6@Q+2,___ftadd@f2+2
  3352  0012D0  EC13  F006         	call	___ftadd	;wreg free
  3353  0012D4  C01A  F053         	movff	?___ftadd,KalmanFilter_6@p_mid
  3354  0012D8  C01B  F054         	movff	?___ftadd+1,KalmanFilter_6@p_mid+1
  3355  0012DC  C01C  F055         	movff	?___ftadd+2,KalmanFilter_6@p_mid+2
  3356                           
  3357                           ;flex.c: 204: kg=p_mid/(p_mid+R);
  3358  0012E0  C053  F026         	movff	KalmanFilter_6@p_mid,___ftdiv@f1
  3359  0012E4  C054  F027         	movff	KalmanFilter_6@p_mid+1,___ftdiv@f1+1
  3360  0012E8  C055  F028         	movff	KalmanFilter_6@p_mid+2,___ftdiv@f1+2
  3361  0012EC  C03E  F01D         	movff	KalmanFilter_6@R,___ftadd@f2
  3362  0012F0  C03F  F01E         	movff	KalmanFilter_6@R+1,___ftadd@f2+1
  3363  0012F4  C040  F01F         	movff	KalmanFilter_6@R+2,___ftadd@f2+2
  3364  0012F8  C053  F01A         	movff	KalmanFilter_6@p_mid,___ftadd@f1
  3365  0012FC  C054  F01B         	movff	KalmanFilter_6@p_mid+1,___ftadd@f1+1
  3366  001300  C055  F01C         	movff	KalmanFilter_6@p_mid+2,___ftadd@f1+2
  3367  001304  EC13  F006         	call	___ftadd	;wreg free
  3368  001308  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3369  00130C  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3370  001310  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3371  001314  ECDA  F010         	call	___ftdiv	;wreg free
  3372  001318  C026  F04D         	movff	?___ftdiv,KalmanFilter_6@kg
  3373  00131C  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_6@kg+1
  3374  001320  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_6@kg+2
  3375                           
  3376                           ;flex.c: 205: x_now=x_mid+kg*(ResrcData_6-x_mid);
  3377  001324  C04D  F029         	movff	KalmanFilter_6@kg,___ftmul@f2
  3378  001328  C04E  F02A         	movff	KalmanFilter_6@kg+1,___ftmul@f2+1
  3379  00132C  C04F  F02B         	movff	KalmanFilter_6@kg+2,___ftmul@f2+2
  3380  001330  C035  F01D         	movff	KalmanFilter_6@ResrcData_6,___ftadd@f2
  3381  001334  C036  F01E         	movff	KalmanFilter_6@ResrcData_6+1,___ftadd@f2+1
  3382  001338  C037  F01F         	movff	KalmanFilter_6@ResrcData_6+2,___ftadd@f2+2
  3383  00133C  C050  F012         	movff	KalmanFilter_6@x_mid,___ftneg@f1
  3384  001340  C051  F013         	movff	KalmanFilter_6@x_mid+1,___ftneg@f1+1
  3385  001344  C052  F014         	movff	KalmanFilter_6@x_mid+2,___ftneg@f1+2
  3386  001348  ECA3  F015         	call	___ftneg	;wreg free
  3387  00134C  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3388  001350  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3389  001354  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3390  001358  EC13  F006         	call	___ftadd	;wreg free
  3391  00135C  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3392  001360  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3393  001364  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3394  001368  EC60  F010         	call	___ftmul	;wreg free
  3395  00136C  C026  F047         	movff	?___ftmul,_KalmanFilter_6$2027
  3396  001370  C027  F048         	movff	?___ftmul+1,_KalmanFilter_6$2027+1
  3397  001374  C028  F049         	movff	?___ftmul+2,_KalmanFilter_6$2027+2
  3398                           
  3399                           ;flex.c: 205: x_now=x_mid+kg*(ResrcData_6-x_mid);
  3400  001378  C047  F01A         	movff	_KalmanFilter_6$2027,___ftadd@f1
  3401  00137C  C048  F01B         	movff	_KalmanFilter_6$2027+1,___ftadd@f1+1
  3402  001380  C049  F01C         	movff	_KalmanFilter_6$2027+2,___ftadd@f1+2
  3403  001384  C050  F01D         	movff	KalmanFilter_6@x_mid,___ftadd@f2
  3404  001388  C051  F01E         	movff	KalmanFilter_6@x_mid+1,___ftadd@f2+1
  3405  00138C  C052  F01F         	movff	KalmanFilter_6@x_mid+2,___ftadd@f2+2
  3406  001390  EC13  F006         	call	___ftadd	;wreg free
  3407  001394  C01A  F04A         	movff	?___ftadd,KalmanFilter_6@x_now
  3408  001398  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_6@x_now+1
  3409  00139C  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_6@x_now+2
  3410                           
  3411                           ;flex.c: 206: p_now=(1-kg)*p_mid;
  3412  0013A0  0E00               	movlw	0
  3413  0013A2  6E1D               	movwf	___ftadd@f2,c
  3414  0013A4  0E80               	movlw	128
  3415  0013A6  6E1E               	movwf	___ftadd@f2+1,c
  3416  0013A8  0E3F               	movlw	63
  3417  0013AA  6E1F               	movwf	___ftadd@f2+2,c
  3418  0013AC  C04D  F012         	movff	KalmanFilter_6@kg,___ftneg@f1
  3419  0013B0  C04E  F013         	movff	KalmanFilter_6@kg+1,___ftneg@f1+1
  3420  0013B4  C04F  F014         	movff	KalmanFilter_6@kg+2,___ftneg@f1+2
  3421  0013B8  ECA3  F015         	call	___ftneg	;wreg free
  3422  0013BC  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3423  0013C0  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3424  0013C4  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3425  0013C8  EC13  F006         	call	___ftadd	;wreg free
  3426  0013CC  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3427  0013D0  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3428  0013D4  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3429  0013D8  C053  F029         	movff	KalmanFilter_6@p_mid,___ftmul@f2
  3430  0013DC  C054  F02A         	movff	KalmanFilter_6@p_mid+1,___ftmul@f2+1
  3431  0013E0  C055  F02B         	movff	KalmanFilter_6@p_mid+2,___ftmul@f2+2
  3432  0013E4  EC60  F010         	call	___ftmul	;wreg free
  3433  0013E8  C026  F044         	movff	?___ftmul,KalmanFilter_6@p_now
  3434  0013EC  C027  F045         	movff	?___ftmul+1,KalmanFilter_6@p_now+1
  3435  0013F0  C028  F046         	movff	?___ftmul+2,KalmanFilter_6@p_now+2
  3436                           
  3437                           ;flex.c: 207: p_last_6 = p_now;
  3438  0013F4  C044  F18C         	movff	KalmanFilter_6@p_now,KalmanFilter_6@p_last_6
  3439  0013F8  C045  F18D         	movff	KalmanFilter_6@p_now+1,KalmanFilter_6@p_last_6+1
  3440  0013FC  C046  F18E         	movff	KalmanFilter_6@p_now+2,KalmanFilter_6@p_last_6+2
  3441                           
  3442                           ;flex.c: 208: x_last_6 = x_now;
  3443  001400  C04A  F18F         	movff	KalmanFilter_6@x_now,KalmanFilter_6@x_last_6
  3444  001404  C04B  F190         	movff	KalmanFilter_6@x_now+1,KalmanFilter_6@x_last_6+1
  3445  001408  C04C  F191         	movff	KalmanFilter_6@x_now+2,KalmanFilter_6@x_last_6+2
  3446                           
  3447                           ;flex.c: 209: return x_now;
  3448  00140C  C04A  F035         	movff	KalmanFilter_6@x_now,?_KalmanFilter_6
  3449  001410  C04B  F036         	movff	KalmanFilter_6@x_now+1,?_KalmanFilter_6+1
  3450  001414  C04C  F037         	movff	KalmanFilter_6@x_now+2,?_KalmanFilter_6+2
  3451  001418  0012               	return	
  3452  00141A                     __end_of_KalmanFilter_6:
  3453                           	opt stack 0
  3454                           tblptru	equ	0xFF8
  3455                           postinc0	equ	0xFEE
  3456                           wreg	equ	0xFE8
  3457                           indf2	equ	0xFDF
  3458                           fsr2h	equ	0xFDA
  3459                           fsr2l	equ	0xFD9
  3460                           status	equ	0xFD8
  3461                           
  3462 ;; *************** function _KalmanFilter_5 *****************
  3463 ;; Defined at:
  3464 ;;		line 153 in file "harwave/flex.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  ResrcData_5     3   52[COMRAM] const 
  3467 ;;  ProcessNiose    3   55[COMRAM] const 
  3468 ;;  MeasureNoise    3   58[COMRAM] const 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  p_mid           3   82[COMRAM] const 
  3471 ;;  x_mid           3   79[COMRAM] const 
  3472 ;;  kg              3   76[COMRAM] const 
  3473 ;;  x_now           3   73[COMRAM] const 
  3474 ;;  p_now           3   67[COMRAM] const 
  3475 ;;  Q               3   64[COMRAM] const 
  3476 ;;  R               3   61[COMRAM] const 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  3   52[COMRAM] const 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3486 ;;      Params:         9       0       0       0       0       0       0
  3487 ;;      Locals:        24       0       0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0
  3489 ;;      Totals:        33       0       0       0       0       0       0
  3490 ;;Total ram usage:       33 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    3
  3493 ;; This function calls:
  3494 ;;		___ftadd
  3495 ;;		___ftdiv
  3496 ;;		___ftmul
  3497 ;;		___ftneg
  3498 ;; This function is called by:
  3499 ;;		_translate_flex
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text9
  3504  00141A                     __ptext9:
  3505                           	opt stack 0
  3506  00141A                     _KalmanFilter_5:
  3507                           	opt stack 26
  3508                           
  3509                           ;flex.c: 156: double R = MeasureNoise_R_5;
  3510                           
  3511                           ;incstack = 0
  3512  00141A  C03B  F03E         	movff	KalmanFilter_5@MeasureNoise_R_5,KalmanFilter_5@R
  3513  00141E  C03C  F03F         	movff	KalmanFilter_5@MeasureNoise_R_5+1,KalmanFilter_5@R+1
  3514  001422  C03D  F040         	movff	KalmanFilter_5@MeasureNoise_R_5+2,KalmanFilter_5@R+2
  3515                           
  3516                           ;flex.c: 157: double Q = ProcessNiose_Q_5;
  3517  001426  C038  F041         	movff	KalmanFilter_5@ProcessNiose_Q_5,KalmanFilter_5@Q
  3518  00142A  C039  F042         	movff	KalmanFilter_5@ProcessNiose_Q_5+1,KalmanFilter_5@Q+1
  3519  00142E  C03A  F043         	movff	KalmanFilter_5@ProcessNiose_Q_5+2,KalmanFilter_5@Q+2
  3520                           
  3521                           ;flex.c: 159: static double x_last_5;
  3522                           ;flex.c: 160: double x_mid = x_last_5;
  3523  001432  C195  F050         	movff	KalmanFilter_5@x_last_5,KalmanFilter_5@x_mid
  3524  001436  C196  F051         	movff	KalmanFilter_5@x_last_5+1,KalmanFilter_5@x_mid+1
  3525  00143A  C197  F052         	movff	KalmanFilter_5@x_last_5+2,KalmanFilter_5@x_mid+2
  3526                           
  3527                           ;flex.c: 161: double x_now;
  3528                           ;flex.c: 163: static double p_last_5;
  3529                           ;flex.c: 164: double p_mid ;
  3530                           ;flex.c: 165: double p_now;
  3531                           ;flex.c: 167: double kg;
  3532                           ;flex.c: 169: x_mid=x_last_5;
  3533  00143E  C195  F050         	movff	KalmanFilter_5@x_last_5,KalmanFilter_5@x_mid
  3534  001442  C196  F051         	movff	KalmanFilter_5@x_last_5+1,KalmanFilter_5@x_mid+1
  3535  001446  C197  F052         	movff	KalmanFilter_5@x_last_5+2,KalmanFilter_5@x_mid+2
  3536                           
  3537                           ;flex.c: 170: p_mid=p_last_5+Q;
  3538  00144A  C192  F01A         	movff	KalmanFilter_5@p_last_5,___ftadd@f1
  3539  00144E  C193  F01B         	movff	KalmanFilter_5@p_last_5+1,___ftadd@f1+1
  3540  001452  C194  F01C         	movff	KalmanFilter_5@p_last_5+2,___ftadd@f1+2
  3541  001456  C041  F01D         	movff	KalmanFilter_5@Q,___ftadd@f2
  3542  00145A  C042  F01E         	movff	KalmanFilter_5@Q+1,___ftadd@f2+1
  3543  00145E  C043  F01F         	movff	KalmanFilter_5@Q+2,___ftadd@f2+2
  3544  001462  EC13  F006         	call	___ftadd	;wreg free
  3545  001466  C01A  F053         	movff	?___ftadd,KalmanFilter_5@p_mid
  3546  00146A  C01B  F054         	movff	?___ftadd+1,KalmanFilter_5@p_mid+1
  3547  00146E  C01C  F055         	movff	?___ftadd+2,KalmanFilter_5@p_mid+2
  3548                           
  3549                           ;flex.c: 175: kg=p_mid/(p_mid+R);
  3550  001472  C053  F026         	movff	KalmanFilter_5@p_mid,___ftdiv@f1
  3551  001476  C054  F027         	movff	KalmanFilter_5@p_mid+1,___ftdiv@f1+1
  3552  00147A  C055  F028         	movff	KalmanFilter_5@p_mid+2,___ftdiv@f1+2
  3553  00147E  C03E  F01D         	movff	KalmanFilter_5@R,___ftadd@f2
  3554  001482  C03F  F01E         	movff	KalmanFilter_5@R+1,___ftadd@f2+1
  3555  001486  C040  F01F         	movff	KalmanFilter_5@R+2,___ftadd@f2+2
  3556  00148A  C053  F01A         	movff	KalmanFilter_5@p_mid,___ftadd@f1
  3557  00148E  C054  F01B         	movff	KalmanFilter_5@p_mid+1,___ftadd@f1+1
  3558  001492  C055  F01C         	movff	KalmanFilter_5@p_mid+2,___ftadd@f1+2
  3559  001496  EC13  F006         	call	___ftadd	;wreg free
  3560  00149A  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3561  00149E  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3562  0014A2  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3563  0014A6  ECDA  F010         	call	___ftdiv	;wreg free
  3564  0014AA  C026  F04D         	movff	?___ftdiv,KalmanFilter_5@kg
  3565  0014AE  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_5@kg+1
  3566  0014B2  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_5@kg+2
  3567                           
  3568                           ;flex.c: 176: x_now=x_mid+kg*(ResrcData_5-x_mid);
  3569  0014B6  C04D  F029         	movff	KalmanFilter_5@kg,___ftmul@f2
  3570  0014BA  C04E  F02A         	movff	KalmanFilter_5@kg+1,___ftmul@f2+1
  3571  0014BE  C04F  F02B         	movff	KalmanFilter_5@kg+2,___ftmul@f2+2
  3572  0014C2  C035  F01D         	movff	KalmanFilter_5@ResrcData_5,___ftadd@f2
  3573  0014C6  C036  F01E         	movff	KalmanFilter_5@ResrcData_5+1,___ftadd@f2+1
  3574  0014CA  C037  F01F         	movff	KalmanFilter_5@ResrcData_5+2,___ftadd@f2+2
  3575  0014CE  C050  F012         	movff	KalmanFilter_5@x_mid,___ftneg@f1
  3576  0014D2  C051  F013         	movff	KalmanFilter_5@x_mid+1,___ftneg@f1+1
  3577  0014D6  C052  F014         	movff	KalmanFilter_5@x_mid+2,___ftneg@f1+2
  3578  0014DA  ECA3  F015         	call	___ftneg	;wreg free
  3579  0014DE  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3580  0014E2  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3581  0014E6  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3582  0014EA  EC13  F006         	call	___ftadd	;wreg free
  3583  0014EE  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3584  0014F2  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3585  0014F6  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3586  0014FA  EC60  F010         	call	___ftmul	;wreg free
  3587  0014FE  C026  F047         	movff	?___ftmul,_KalmanFilter_5$2026
  3588  001502  C027  F048         	movff	?___ftmul+1,_KalmanFilter_5$2026+1
  3589  001506  C028  F049         	movff	?___ftmul+2,_KalmanFilter_5$2026+2
  3590                           
  3591                           ;flex.c: 176: x_now=x_mid+kg*(ResrcData_5-x_mid);
  3592  00150A  C047  F01A         	movff	_KalmanFilter_5$2026,___ftadd@f1
  3593  00150E  C048  F01B         	movff	_KalmanFilter_5$2026+1,___ftadd@f1+1
  3594  001512  C049  F01C         	movff	_KalmanFilter_5$2026+2,___ftadd@f1+2
  3595  001516  C050  F01D         	movff	KalmanFilter_5@x_mid,___ftadd@f2
  3596  00151A  C051  F01E         	movff	KalmanFilter_5@x_mid+1,___ftadd@f2+1
  3597  00151E  C052  F01F         	movff	KalmanFilter_5@x_mid+2,___ftadd@f2+2
  3598  001522  EC13  F006         	call	___ftadd	;wreg free
  3599  001526  C01A  F04A         	movff	?___ftadd,KalmanFilter_5@x_now
  3600  00152A  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_5@x_now+1
  3601  00152E  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_5@x_now+2
  3602                           
  3603                           ;flex.c: 177: p_now=(1-kg)*p_mid;
  3604  001532  0E00               	movlw	0
  3605  001534  6E1D               	movwf	___ftadd@f2,c
  3606  001536  0E80               	movlw	128
  3607  001538  6E1E               	movwf	___ftadd@f2+1,c
  3608  00153A  0E3F               	movlw	63
  3609  00153C  6E1F               	movwf	___ftadd@f2+2,c
  3610  00153E  C04D  F012         	movff	KalmanFilter_5@kg,___ftneg@f1
  3611  001542  C04E  F013         	movff	KalmanFilter_5@kg+1,___ftneg@f1+1
  3612  001546  C04F  F014         	movff	KalmanFilter_5@kg+2,___ftneg@f1+2
  3613  00154A  ECA3  F015         	call	___ftneg	;wreg free
  3614  00154E  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3615  001552  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3616  001556  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3617  00155A  EC13  F006         	call	___ftadd	;wreg free
  3618  00155E  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3619  001562  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3620  001566  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3621  00156A  C053  F029         	movff	KalmanFilter_5@p_mid,___ftmul@f2
  3622  00156E  C054  F02A         	movff	KalmanFilter_5@p_mid+1,___ftmul@f2+1
  3623  001572  C055  F02B         	movff	KalmanFilter_5@p_mid+2,___ftmul@f2+2
  3624  001576  EC60  F010         	call	___ftmul	;wreg free
  3625  00157A  C026  F044         	movff	?___ftmul,KalmanFilter_5@p_now
  3626  00157E  C027  F045         	movff	?___ftmul+1,KalmanFilter_5@p_now+1
  3627  001582  C028  F046         	movff	?___ftmul+2,KalmanFilter_5@p_now+2
  3628                           
  3629                           ;flex.c: 178: p_last_5= p_now;
  3630  001586  C044  F192         	movff	KalmanFilter_5@p_now,KalmanFilter_5@p_last_5
  3631  00158A  C045  F193         	movff	KalmanFilter_5@p_now+1,KalmanFilter_5@p_last_5+1
  3632  00158E  C046  F194         	movff	KalmanFilter_5@p_now+2,KalmanFilter_5@p_last_5+2
  3633                           
  3634                           ;flex.c: 179: x_last_5 = x_now;
  3635  001592  C04A  F195         	movff	KalmanFilter_5@x_now,KalmanFilter_5@x_last_5
  3636  001596  C04B  F196         	movff	KalmanFilter_5@x_now+1,KalmanFilter_5@x_last_5+1
  3637  00159A  C04C  F197         	movff	KalmanFilter_5@x_now+2,KalmanFilter_5@x_last_5+2
  3638                           
  3639                           ;flex.c: 180: return x_now;
  3640  00159E  C04A  F035         	movff	KalmanFilter_5@x_now,?_KalmanFilter_5
  3641  0015A2  C04B  F036         	movff	KalmanFilter_5@x_now+1,?_KalmanFilter_5+1
  3642  0015A6  C04C  F037         	movff	KalmanFilter_5@x_now+2,?_KalmanFilter_5+2
  3643  0015AA  0012               	return	
  3644  0015AC                     __end_of_KalmanFilter_5:
  3645                           	opt stack 0
  3646                           tblptru	equ	0xFF8
  3647                           postinc0	equ	0xFEE
  3648                           wreg	equ	0xFE8
  3649                           indf2	equ	0xFDF
  3650                           fsr2h	equ	0xFDA
  3651                           fsr2l	equ	0xFD9
  3652                           status	equ	0xFD8
  3653                           
  3654 ;; *************** function _KalmanFilter_4 *****************
  3655 ;; Defined at:
  3656 ;;		line 124 in file "harwave/flex.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;  ResrcData_4     3   52[COMRAM] const 
  3659 ;;  ProcessNiose    3   55[COMRAM] const 
  3660 ;;  MeasureNoise    3   58[COMRAM] const 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;  p_mid           3   82[COMRAM] const 
  3663 ;;  x_mid           3   79[COMRAM] const 
  3664 ;;  kg              3   76[COMRAM] const 
  3665 ;;  x_now           3   73[COMRAM] const 
  3666 ;;  p_now           3   67[COMRAM] const 
  3667 ;;  Q               3   64[COMRAM] const 
  3668 ;;  R               3   61[COMRAM] const 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  3   52[COMRAM] const 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3678 ;;      Params:         9       0       0       0       0       0       0
  3679 ;;      Locals:        24       0       0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0
  3681 ;;      Totals:        33       0       0       0       0       0       0
  3682 ;;Total ram usage:       33 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    3
  3685 ;; This function calls:
  3686 ;;		___ftadd
  3687 ;;		___ftdiv
  3688 ;;		___ftmul
  3689 ;;		___ftneg
  3690 ;; This function is called by:
  3691 ;;		_translate_flex
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text10
  3696  0015AC                     __ptext10:
  3697                           	opt stack 0
  3698  0015AC                     _KalmanFilter_4:
  3699                           	opt stack 26
  3700                           
  3701                           ;flex.c: 127: double R = MeasureNoise_R_4;
  3702                           
  3703                           ;incstack = 0
  3704  0015AC  C03B  F03E         	movff	KalmanFilter_4@MeasureNoise_R_4,KalmanFilter_4@R
  3705  0015B0  C03C  F03F         	movff	KalmanFilter_4@MeasureNoise_R_4+1,KalmanFilter_4@R+1
  3706  0015B4  C03D  F040         	movff	KalmanFilter_4@MeasureNoise_R_4+2,KalmanFilter_4@R+2
  3707                           
  3708                           ;flex.c: 128: double Q = ProcessNiose_Q_4;
  3709  0015B8  C038  F041         	movff	KalmanFilter_4@ProcessNiose_Q_4,KalmanFilter_4@Q
  3710  0015BC  C039  F042         	movff	KalmanFilter_4@ProcessNiose_Q_4+1,KalmanFilter_4@Q+1
  3711  0015C0  C03A  F043         	movff	KalmanFilter_4@ProcessNiose_Q_4+2,KalmanFilter_4@Q+2
  3712                           
  3713                           ;flex.c: 130: static double x_last_4;
  3714                           ;flex.c: 131: double x_mid = x_last_4;
  3715  0015C4  C0FA  F050         	movff	KalmanFilter_4@x_last_4,KalmanFilter_4@x_mid
  3716  0015C8  C0FB  F051         	movff	KalmanFilter_4@x_last_4+1,KalmanFilter_4@x_mid+1
  3717  0015CC  C0FC  F052         	movff	KalmanFilter_4@x_last_4+2,KalmanFilter_4@x_mid+2
  3718                           
  3719                           ;flex.c: 132: double x_now;
  3720                           ;flex.c: 134: static double p_last_4;
  3721                           ;flex.c: 135: double p_mid ;
  3722                           ;flex.c: 136: double p_now;
  3723                           ;flex.c: 138: double kg;
  3724                           ;flex.c: 140: x_mid=x_last_4;
  3725  0015D0  C0FA  F050         	movff	KalmanFilter_4@x_last_4,KalmanFilter_4@x_mid
  3726  0015D4  C0FB  F051         	movff	KalmanFilter_4@x_last_4+1,KalmanFilter_4@x_mid+1
  3727  0015D8  C0FC  F052         	movff	KalmanFilter_4@x_last_4+2,KalmanFilter_4@x_mid+2
  3728                           
  3729                           ;flex.c: 141: p_mid=p_last_4+Q;
  3730  0015DC  C198  F01A         	movff	KalmanFilter_4@p_last_4,___ftadd@f1
  3731  0015E0  C199  F01B         	movff	KalmanFilter_4@p_last_4+1,___ftadd@f1+1
  3732  0015E4  C19A  F01C         	movff	KalmanFilter_4@p_last_4+2,___ftadd@f1+2
  3733  0015E8  C041  F01D         	movff	KalmanFilter_4@Q,___ftadd@f2
  3734  0015EC  C042  F01E         	movff	KalmanFilter_4@Q+1,___ftadd@f2+1
  3735  0015F0  C043  F01F         	movff	KalmanFilter_4@Q+2,___ftadd@f2+2
  3736  0015F4  EC13  F006         	call	___ftadd	;wreg free
  3737  0015F8  C01A  F053         	movff	?___ftadd,KalmanFilter_4@p_mid
  3738  0015FC  C01B  F054         	movff	?___ftadd+1,KalmanFilter_4@p_mid+1
  3739  001600  C01C  F055         	movff	?___ftadd+2,KalmanFilter_4@p_mid+2
  3740                           
  3741                           ;flex.c: 146: kg=p_mid/(p_mid+R);
  3742  001604  C053  F026         	movff	KalmanFilter_4@p_mid,___ftdiv@f1
  3743  001608  C054  F027         	movff	KalmanFilter_4@p_mid+1,___ftdiv@f1+1
  3744  00160C  C055  F028         	movff	KalmanFilter_4@p_mid+2,___ftdiv@f1+2
  3745  001610  C03E  F01D         	movff	KalmanFilter_4@R,___ftadd@f2
  3746  001614  C03F  F01E         	movff	KalmanFilter_4@R+1,___ftadd@f2+1
  3747  001618  C040  F01F         	movff	KalmanFilter_4@R+2,___ftadd@f2+2
  3748  00161C  C053  F01A         	movff	KalmanFilter_4@p_mid,___ftadd@f1
  3749  001620  C054  F01B         	movff	KalmanFilter_4@p_mid+1,___ftadd@f1+1
  3750  001624  C055  F01C         	movff	KalmanFilter_4@p_mid+2,___ftadd@f1+2
  3751  001628  EC13  F006         	call	___ftadd	;wreg free
  3752  00162C  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3753  001630  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3754  001634  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3755  001638  ECDA  F010         	call	___ftdiv	;wreg free
  3756  00163C  C026  F04D         	movff	?___ftdiv,KalmanFilter_4@kg
  3757  001640  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_4@kg+1
  3758  001644  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_4@kg+2
  3759                           
  3760                           ;flex.c: 147: x_now=x_mid+kg*(ResrcData_4-x_mid);
  3761  001648  C04D  F029         	movff	KalmanFilter_4@kg,___ftmul@f2
  3762  00164C  C04E  F02A         	movff	KalmanFilter_4@kg+1,___ftmul@f2+1
  3763  001650  C04F  F02B         	movff	KalmanFilter_4@kg+2,___ftmul@f2+2
  3764  001654  C035  F01D         	movff	KalmanFilter_4@ResrcData_4,___ftadd@f2
  3765  001658  C036  F01E         	movff	KalmanFilter_4@ResrcData_4+1,___ftadd@f2+1
  3766  00165C  C037  F01F         	movff	KalmanFilter_4@ResrcData_4+2,___ftadd@f2+2
  3767  001660  C050  F012         	movff	KalmanFilter_4@x_mid,___ftneg@f1
  3768  001664  C051  F013         	movff	KalmanFilter_4@x_mid+1,___ftneg@f1+1
  3769  001668  C052  F014         	movff	KalmanFilter_4@x_mid+2,___ftneg@f1+2
  3770  00166C  ECA3  F015         	call	___ftneg	;wreg free
  3771  001670  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3772  001674  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3773  001678  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3774  00167C  EC13  F006         	call	___ftadd	;wreg free
  3775  001680  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3776  001684  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3777  001688  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3778  00168C  EC60  F010         	call	___ftmul	;wreg free
  3779  001690  C026  F047         	movff	?___ftmul,_KalmanFilter_4$2025
  3780  001694  C027  F048         	movff	?___ftmul+1,_KalmanFilter_4$2025+1
  3781  001698  C028  F049         	movff	?___ftmul+2,_KalmanFilter_4$2025+2
  3782                           
  3783                           ;flex.c: 147: x_now=x_mid+kg*(ResrcData_4-x_mid);
  3784  00169C  C047  F01A         	movff	_KalmanFilter_4$2025,___ftadd@f1
  3785  0016A0  C048  F01B         	movff	_KalmanFilter_4$2025+1,___ftadd@f1+1
  3786  0016A4  C049  F01C         	movff	_KalmanFilter_4$2025+2,___ftadd@f1+2
  3787  0016A8  C050  F01D         	movff	KalmanFilter_4@x_mid,___ftadd@f2
  3788  0016AC  C051  F01E         	movff	KalmanFilter_4@x_mid+1,___ftadd@f2+1
  3789  0016B0  C052  F01F         	movff	KalmanFilter_4@x_mid+2,___ftadd@f2+2
  3790  0016B4  EC13  F006         	call	___ftadd	;wreg free
  3791  0016B8  C01A  F04A         	movff	?___ftadd,KalmanFilter_4@x_now
  3792  0016BC  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_4@x_now+1
  3793  0016C0  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_4@x_now+2
  3794                           
  3795                           ;flex.c: 148: p_now=(1-kg)*p_mid;
  3796  0016C4  0E00               	movlw	0
  3797  0016C6  6E1D               	movwf	___ftadd@f2,c
  3798  0016C8  0E80               	movlw	128
  3799  0016CA  6E1E               	movwf	___ftadd@f2+1,c
  3800  0016CC  0E3F               	movlw	63
  3801  0016CE  6E1F               	movwf	___ftadd@f2+2,c
  3802  0016D0  C04D  F012         	movff	KalmanFilter_4@kg,___ftneg@f1
  3803  0016D4  C04E  F013         	movff	KalmanFilter_4@kg+1,___ftneg@f1+1
  3804  0016D8  C04F  F014         	movff	KalmanFilter_4@kg+2,___ftneg@f1+2
  3805  0016DC  ECA3  F015         	call	___ftneg	;wreg free
  3806  0016E0  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3807  0016E4  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3808  0016E8  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3809  0016EC  EC13  F006         	call	___ftadd	;wreg free
  3810  0016F0  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3811  0016F4  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3812  0016F8  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3813  0016FC  C053  F029         	movff	KalmanFilter_4@p_mid,___ftmul@f2
  3814  001700  C054  F02A         	movff	KalmanFilter_4@p_mid+1,___ftmul@f2+1
  3815  001704  C055  F02B         	movff	KalmanFilter_4@p_mid+2,___ftmul@f2+2
  3816  001708  EC60  F010         	call	___ftmul	;wreg free
  3817  00170C  C026  F044         	movff	?___ftmul,KalmanFilter_4@p_now
  3818  001710  C027  F045         	movff	?___ftmul+1,KalmanFilter_4@p_now+1
  3819  001714  C028  F046         	movff	?___ftmul+2,KalmanFilter_4@p_now+2
  3820                           
  3821                           ;flex.c: 149: p_last_4 = p_now;
  3822  001718  C044  F198         	movff	KalmanFilter_4@p_now,KalmanFilter_4@p_last_4
  3823  00171C  C045  F199         	movff	KalmanFilter_4@p_now+1,KalmanFilter_4@p_last_4+1
  3824  001720  C046  F19A         	movff	KalmanFilter_4@p_now+2,KalmanFilter_4@p_last_4+2
  3825                           
  3826                           ;flex.c: 150: x_last_4 = x_now;
  3827  001724  C04A  F0FA         	movff	KalmanFilter_4@x_now,KalmanFilter_4@x_last_4
  3828  001728  C04B  F0FB         	movff	KalmanFilter_4@x_now+1,KalmanFilter_4@x_last_4+1
  3829  00172C  C04C  F0FC         	movff	KalmanFilter_4@x_now+2,KalmanFilter_4@x_last_4+2
  3830                           
  3831                           ;flex.c: 151: return x_now;
  3832  001730  C04A  F035         	movff	KalmanFilter_4@x_now,?_KalmanFilter_4
  3833  001734  C04B  F036         	movff	KalmanFilter_4@x_now+1,?_KalmanFilter_4+1
  3834  001738  C04C  F037         	movff	KalmanFilter_4@x_now+2,?_KalmanFilter_4+2
  3835  00173C  0012               	return	
  3836  00173E                     __end_of_KalmanFilter_4:
  3837                           	opt stack 0
  3838                           tblptru	equ	0xFF8
  3839                           postinc0	equ	0xFEE
  3840                           wreg	equ	0xFE8
  3841                           indf2	equ	0xFDF
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function _KalmanFilter_3 *****************
  3847 ;; Defined at:
  3848 ;;		line 95 in file "harwave/flex.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  ResrcData_3     3   52[COMRAM] const 
  3851 ;;  ProcessNiose    3   55[COMRAM] const 
  3852 ;;  MeasureNoise    3   58[COMRAM] const 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  p_mid           3   82[COMRAM] const 
  3855 ;;  x_mid           3   79[COMRAM] const 
  3856 ;;  kg              3   76[COMRAM] const 
  3857 ;;  x_now           3   73[COMRAM] const 
  3858 ;;  p_now           3   67[COMRAM] const 
  3859 ;;  Q               3   64[COMRAM] const 
  3860 ;;  R               3   61[COMRAM] const 
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  3   52[COMRAM] const 
  3863 ;; Registers used:
  3864 ;;		wreg, status,2, status,0, cstack
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3870 ;;      Params:         9       0       0       0       0       0       0
  3871 ;;      Locals:        24       0       0       0       0       0       0
  3872 ;;      Temps:          0       0       0       0       0       0       0
  3873 ;;      Totals:        33       0       0       0       0       0       0
  3874 ;;Total ram usage:       33 bytes
  3875 ;; Hardware stack levels used:    1
  3876 ;; Hardware stack levels required when called:    3
  3877 ;; This function calls:
  3878 ;;		___ftadd
  3879 ;;		___ftdiv
  3880 ;;		___ftmul
  3881 ;;		___ftneg
  3882 ;; This function is called by:
  3883 ;;		_translate_flex
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           	psect	text11
  3888  00173E                     __ptext11:
  3889                           	opt stack 0
  3890  00173E                     _KalmanFilter_3:
  3891                           	opt stack 26
  3892                           
  3893                           ;flex.c: 98: double R = MeasureNoise_R_3;
  3894                           
  3895                           ;incstack = 0
  3896  00173E  C03B  F03E         	movff	KalmanFilter_3@MeasureNoise_R_3,KalmanFilter_3@R
  3897  001742  C03C  F03F         	movff	KalmanFilter_3@MeasureNoise_R_3+1,KalmanFilter_3@R+1
  3898  001746  C03D  F040         	movff	KalmanFilter_3@MeasureNoise_R_3+2,KalmanFilter_3@R+2
  3899                           
  3900                           ;flex.c: 99: double Q = ProcessNiose_Q_3;
  3901  00174A  C038  F041         	movff	KalmanFilter_3@ProcessNiose_Q_3,KalmanFilter_3@Q
  3902  00174E  C039  F042         	movff	KalmanFilter_3@ProcessNiose_Q_3+1,KalmanFilter_3@Q+1
  3903  001752  C03A  F043         	movff	KalmanFilter_3@ProcessNiose_Q_3+2,KalmanFilter_3@Q+2
  3904                           
  3905                           ;flex.c: 101: static double x_last_3;
  3906                           ;flex.c: 102: double x_mid = x_last_3;
  3907  001756  C0FD  F050         	movff	KalmanFilter_3@x_last_3,KalmanFilter_3@x_mid
  3908  00175A  C0FE  F051         	movff	KalmanFilter_3@x_last_3+1,KalmanFilter_3@x_mid+1
  3909  00175E  C0FF  F052         	movff	KalmanFilter_3@x_last_3+2,KalmanFilter_3@x_mid+2
  3910                           
  3911                           ;flex.c: 103: double x_now;
  3912                           ;flex.c: 105: static double p_last_3;
  3913                           ;flex.c: 106: double p_mid ;
  3914                           ;flex.c: 107: double p_now;
  3915                           ;flex.c: 109: double kg;
  3916                           ;flex.c: 111: x_mid=x_last_3;
  3917  001762  C0FD  F050         	movff	KalmanFilter_3@x_last_3,KalmanFilter_3@x_mid
  3918  001766  C0FE  F051         	movff	KalmanFilter_3@x_last_3+1,KalmanFilter_3@x_mid+1
  3919  00176A  C0FF  F052         	movff	KalmanFilter_3@x_last_3+2,KalmanFilter_3@x_mid+2
  3920                           
  3921                           ;flex.c: 112: p_mid=p_last_3+Q;
  3922  00176E  C19B  F01A         	movff	KalmanFilter_3@p_last_3,___ftadd@f1
  3923  001772  C19C  F01B         	movff	KalmanFilter_3@p_last_3+1,___ftadd@f1+1
  3924  001776  C19D  F01C         	movff	KalmanFilter_3@p_last_3+2,___ftadd@f1+2
  3925  00177A  C041  F01D         	movff	KalmanFilter_3@Q,___ftadd@f2
  3926  00177E  C042  F01E         	movff	KalmanFilter_3@Q+1,___ftadd@f2+1
  3927  001782  C043  F01F         	movff	KalmanFilter_3@Q+2,___ftadd@f2+2
  3928  001786  EC13  F006         	call	___ftadd	;wreg free
  3929  00178A  C01A  F053         	movff	?___ftadd,KalmanFilter_3@p_mid
  3930  00178E  C01B  F054         	movff	?___ftadd+1,KalmanFilter_3@p_mid+1
  3931  001792  C01C  F055         	movff	?___ftadd+2,KalmanFilter_3@p_mid+2
  3932                           
  3933                           ;flex.c: 117: kg=p_mid/(p_mid+R);
  3934  001796  C053  F026         	movff	KalmanFilter_3@p_mid,___ftdiv@f1
  3935  00179A  C054  F027         	movff	KalmanFilter_3@p_mid+1,___ftdiv@f1+1
  3936  00179E  C055  F028         	movff	KalmanFilter_3@p_mid+2,___ftdiv@f1+2
  3937  0017A2  C03E  F01D         	movff	KalmanFilter_3@R,___ftadd@f2
  3938  0017A6  C03F  F01E         	movff	KalmanFilter_3@R+1,___ftadd@f2+1
  3939  0017AA  C040  F01F         	movff	KalmanFilter_3@R+2,___ftadd@f2+2
  3940  0017AE  C053  F01A         	movff	KalmanFilter_3@p_mid,___ftadd@f1
  3941  0017B2  C054  F01B         	movff	KalmanFilter_3@p_mid+1,___ftadd@f1+1
  3942  0017B6  C055  F01C         	movff	KalmanFilter_3@p_mid+2,___ftadd@f1+2
  3943  0017BA  EC13  F006         	call	___ftadd	;wreg free
  3944  0017BE  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  3945  0017C2  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  3946  0017C6  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  3947  0017CA  ECDA  F010         	call	___ftdiv	;wreg free
  3948  0017CE  C026  F04D         	movff	?___ftdiv,KalmanFilter_3@kg
  3949  0017D2  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_3@kg+1
  3950  0017D6  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_3@kg+2
  3951                           
  3952                           ;flex.c: 118: x_now=x_mid+kg*(ResrcData_3-x_mid);
  3953  0017DA  C04D  F029         	movff	KalmanFilter_3@kg,___ftmul@f2
  3954  0017DE  C04E  F02A         	movff	KalmanFilter_3@kg+1,___ftmul@f2+1
  3955  0017E2  C04F  F02B         	movff	KalmanFilter_3@kg+2,___ftmul@f2+2
  3956  0017E6  C035  F01D         	movff	KalmanFilter_3@ResrcData_3,___ftadd@f2
  3957  0017EA  C036  F01E         	movff	KalmanFilter_3@ResrcData_3+1,___ftadd@f2+1
  3958  0017EE  C037  F01F         	movff	KalmanFilter_3@ResrcData_3+2,___ftadd@f2+2
  3959  0017F2  C050  F012         	movff	KalmanFilter_3@x_mid,___ftneg@f1
  3960  0017F6  C051  F013         	movff	KalmanFilter_3@x_mid+1,___ftneg@f1+1
  3961  0017FA  C052  F014         	movff	KalmanFilter_3@x_mid+2,___ftneg@f1+2
  3962  0017FE  ECA3  F015         	call	___ftneg	;wreg free
  3963  001802  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3964  001806  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  3965  00180A  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  3966  00180E  EC13  F006         	call	___ftadd	;wreg free
  3967  001812  C01A  F026         	movff	?___ftadd,___ftmul@f1
  3968  001816  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  3969  00181A  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  3970  00181E  EC60  F010         	call	___ftmul	;wreg free
  3971  001822  C026  F047         	movff	?___ftmul,_KalmanFilter_3$2024
  3972  001826  C027  F048         	movff	?___ftmul+1,_KalmanFilter_3$2024+1
  3973  00182A  C028  F049         	movff	?___ftmul+2,_KalmanFilter_3$2024+2
  3974                           
  3975                           ;flex.c: 118: x_now=x_mid+kg*(ResrcData_3-x_mid);
  3976  00182E  C047  F01A         	movff	_KalmanFilter_3$2024,___ftadd@f1
  3977  001832  C048  F01B         	movff	_KalmanFilter_3$2024+1,___ftadd@f1+1
  3978  001836  C049  F01C         	movff	_KalmanFilter_3$2024+2,___ftadd@f1+2
  3979  00183A  C050  F01D         	movff	KalmanFilter_3@x_mid,___ftadd@f2
  3980  00183E  C051  F01E         	movff	KalmanFilter_3@x_mid+1,___ftadd@f2+1
  3981  001842  C052  F01F         	movff	KalmanFilter_3@x_mid+2,___ftadd@f2+2
  3982  001846  EC13  F006         	call	___ftadd	;wreg free
  3983  00184A  C01A  F04A         	movff	?___ftadd,KalmanFilter_3@x_now
  3984  00184E  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_3@x_now+1
  3985  001852  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_3@x_now+2
  3986                           
  3987                           ;flex.c: 119: p_now=(1-kg)*p_mid;
  3988  001856  0E00               	movlw	0
  3989  001858  6E1D               	movwf	___ftadd@f2,c
  3990  00185A  0E80               	movlw	128
  3991  00185C  6E1E               	movwf	___ftadd@f2+1,c
  3992  00185E  0E3F               	movlw	63
  3993  001860  6E1F               	movwf	___ftadd@f2+2,c
  3994  001862  C04D  F012         	movff	KalmanFilter_3@kg,___ftneg@f1
  3995  001866  C04E  F013         	movff	KalmanFilter_3@kg+1,___ftneg@f1+1
  3996  00186A  C04F  F014         	movff	KalmanFilter_3@kg+2,___ftneg@f1+2
  3997  00186E  ECA3  F015         	call	___ftneg	;wreg free
  3998  001872  C012  F01A         	movff	?___ftneg,___ftadd@f1
  3999  001876  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4000  00187A  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4001  00187E  EC13  F006         	call	___ftadd	;wreg free
  4002  001882  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4003  001886  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4004  00188A  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4005  00188E  C053  F029         	movff	KalmanFilter_3@p_mid,___ftmul@f2
  4006  001892  C054  F02A         	movff	KalmanFilter_3@p_mid+1,___ftmul@f2+1
  4007  001896  C055  F02B         	movff	KalmanFilter_3@p_mid+2,___ftmul@f2+2
  4008  00189A  EC60  F010         	call	___ftmul	;wreg free
  4009  00189E  C026  F044         	movff	?___ftmul,KalmanFilter_3@p_now
  4010  0018A2  C027  F045         	movff	?___ftmul+1,KalmanFilter_3@p_now+1
  4011  0018A6  C028  F046         	movff	?___ftmul+2,KalmanFilter_3@p_now+2
  4012                           
  4013                           ;flex.c: 120: p_last_3 = p_now;
  4014  0018AA  C044  F19B         	movff	KalmanFilter_3@p_now,KalmanFilter_3@p_last_3
  4015  0018AE  C045  F19C         	movff	KalmanFilter_3@p_now+1,KalmanFilter_3@p_last_3+1
  4016  0018B2  C046  F19D         	movff	KalmanFilter_3@p_now+2,KalmanFilter_3@p_last_3+2
  4017                           
  4018                           ;flex.c: 121: x_last_3 = x_now;
  4019  0018B6  C04A  F0FD         	movff	KalmanFilter_3@x_now,KalmanFilter_3@x_last_3
  4020  0018BA  C04B  F0FE         	movff	KalmanFilter_3@x_now+1,KalmanFilter_3@x_last_3+1
  4021  0018BE  C04C  F0FF         	movff	KalmanFilter_3@x_now+2,KalmanFilter_3@x_last_3+2
  4022                           
  4023                           ;flex.c: 122: return x_now;
  4024  0018C2  C04A  F035         	movff	KalmanFilter_3@x_now,?_KalmanFilter_3
  4025  0018C6  C04B  F036         	movff	KalmanFilter_3@x_now+1,?_KalmanFilter_3+1
  4026  0018CA  C04C  F037         	movff	KalmanFilter_3@x_now+2,?_KalmanFilter_3+2
  4027  0018CE  0012               	return	
  4028  0018D0                     __end_of_KalmanFilter_3:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           postinc0	equ	0xFEE
  4032                           wreg	equ	0xFE8
  4033                           indf2	equ	0xFDF
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8
  4037                           
  4038 ;; *************** function _KalmanFilter_2 *****************
  4039 ;; Defined at:
  4040 ;;		line 66 in file "harwave/flex.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  ResrcData_2     3   52[COMRAM] const 
  4043 ;;  ProcessNiose    3   55[COMRAM] const 
  4044 ;;  MeasureNoise    3   58[COMRAM] const 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;  p_mid           3   82[COMRAM] const 
  4047 ;;  x_mid           3   79[COMRAM] const 
  4048 ;;  kg              3   76[COMRAM] const 
  4049 ;;  x_now           3   73[COMRAM] const 
  4050 ;;  p_now           3   67[COMRAM] const 
  4051 ;;  Q               3   64[COMRAM] const 
  4052 ;;  R               3   61[COMRAM] const 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  3   52[COMRAM] const 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4062 ;;      Params:         9       0       0       0       0       0       0
  4063 ;;      Locals:        24       0       0       0       0       0       0
  4064 ;;      Temps:          0       0       0       0       0       0       0
  4065 ;;      Totals:        33       0       0       0       0       0       0
  4066 ;;Total ram usage:       33 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    3
  4069 ;; This function calls:
  4070 ;;		___ftadd
  4071 ;;		___ftdiv
  4072 ;;		___ftmul
  4073 ;;		___ftneg
  4074 ;; This function is called by:
  4075 ;;		_translate_flex
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text12
  4080  0018D0                     __ptext12:
  4081                           	opt stack 0
  4082  0018D0                     _KalmanFilter_2:
  4083                           	opt stack 26
  4084                           
  4085                           ;flex.c: 69: double R = MeasureNoise_R_2;
  4086                           
  4087                           ;incstack = 0
  4088  0018D0  C03B  F03E         	movff	KalmanFilter_2@MeasureNoise_R_2,KalmanFilter_2@R
  4089  0018D4  C03C  F03F         	movff	KalmanFilter_2@MeasureNoise_R_2+1,KalmanFilter_2@R+1
  4090  0018D8  C03D  F040         	movff	KalmanFilter_2@MeasureNoise_R_2+2,KalmanFilter_2@R+2
  4091                           
  4092                           ;flex.c: 70: double Q = ProcessNiose_Q_2;
  4093  0018DC  C038  F041         	movff	KalmanFilter_2@ProcessNiose_Q_2,KalmanFilter_2@Q
  4094  0018E0  C039  F042         	movff	KalmanFilter_2@ProcessNiose_Q_2+1,KalmanFilter_2@Q+1
  4095  0018E4  C03A  F043         	movff	KalmanFilter_2@ProcessNiose_Q_2+2,KalmanFilter_2@Q+2
  4096                           
  4097                           ;flex.c: 72: static double x_last_2;
  4098                           ;flex.c: 73: double x_mid = x_last_2;
  4099  0018E8  C05C  F050         	movff	KalmanFilter_2@x_last_2,KalmanFilter_2@x_mid
  4100  0018EC  C05D  F051         	movff	KalmanFilter_2@x_last_2+1,KalmanFilter_2@x_mid+1
  4101  0018F0  C05E  F052         	movff	KalmanFilter_2@x_last_2+2,KalmanFilter_2@x_mid+2
  4102                           
  4103                           ;flex.c: 74: double x_now;
  4104                           ;flex.c: 76: static double p_last_2;
  4105                           ;flex.c: 77: double p_mid ;
  4106                           ;flex.c: 78: double p_now;
  4107                           ;flex.c: 80: double kg;
  4108                           ;flex.c: 82: x_mid=x_last_2;
  4109  0018F4  C05C  F050         	movff	KalmanFilter_2@x_last_2,KalmanFilter_2@x_mid
  4110  0018F8  C05D  F051         	movff	KalmanFilter_2@x_last_2+1,KalmanFilter_2@x_mid+1
  4111  0018FC  C05E  F052         	movff	KalmanFilter_2@x_last_2+2,KalmanFilter_2@x_mid+2
  4112                           
  4113                           ;flex.c: 83: p_mid=p_last_2+Q;
  4114  001900  C19E  F01A         	movff	KalmanFilter_2@p_last_2,___ftadd@f1
  4115  001904  C19F  F01B         	movff	KalmanFilter_2@p_last_2+1,___ftadd@f1+1
  4116  001908  C1A0  F01C         	movff	KalmanFilter_2@p_last_2+2,___ftadd@f1+2
  4117  00190C  C041  F01D         	movff	KalmanFilter_2@Q,___ftadd@f2
  4118  001910  C042  F01E         	movff	KalmanFilter_2@Q+1,___ftadd@f2+1
  4119  001914  C043  F01F         	movff	KalmanFilter_2@Q+2,___ftadd@f2+2
  4120  001918  EC13  F006         	call	___ftadd	;wreg free
  4121  00191C  C01A  F053         	movff	?___ftadd,KalmanFilter_2@p_mid
  4122  001920  C01B  F054         	movff	?___ftadd+1,KalmanFilter_2@p_mid+1
  4123  001924  C01C  F055         	movff	?___ftadd+2,KalmanFilter_2@p_mid+2
  4124                           
  4125                           ;flex.c: 88: kg=p_mid/(p_mid+R);
  4126  001928  C053  F026         	movff	KalmanFilter_2@p_mid,___ftdiv@f1
  4127  00192C  C054  F027         	movff	KalmanFilter_2@p_mid+1,___ftdiv@f1+1
  4128  001930  C055  F028         	movff	KalmanFilter_2@p_mid+2,___ftdiv@f1+2
  4129  001934  C03E  F01D         	movff	KalmanFilter_2@R,___ftadd@f2
  4130  001938  C03F  F01E         	movff	KalmanFilter_2@R+1,___ftadd@f2+1
  4131  00193C  C040  F01F         	movff	KalmanFilter_2@R+2,___ftadd@f2+2
  4132  001940  C053  F01A         	movff	KalmanFilter_2@p_mid,___ftadd@f1
  4133  001944  C054  F01B         	movff	KalmanFilter_2@p_mid+1,___ftadd@f1+1
  4134  001948  C055  F01C         	movff	KalmanFilter_2@p_mid+2,___ftadd@f1+2
  4135  00194C  EC13  F006         	call	___ftadd	;wreg free
  4136  001950  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  4137  001954  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  4138  001958  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  4139  00195C  ECDA  F010         	call	___ftdiv	;wreg free
  4140  001960  C026  F04D         	movff	?___ftdiv,KalmanFilter_2@kg
  4141  001964  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_2@kg+1
  4142  001968  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_2@kg+2
  4143                           
  4144                           ;flex.c: 89: x_now=x_mid+kg*(ResrcData_2-x_mid);
  4145  00196C  C04D  F029         	movff	KalmanFilter_2@kg,___ftmul@f2
  4146  001970  C04E  F02A         	movff	KalmanFilter_2@kg+1,___ftmul@f2+1
  4147  001974  C04F  F02B         	movff	KalmanFilter_2@kg+2,___ftmul@f2+2
  4148  001978  C035  F01D         	movff	KalmanFilter_2@ResrcData_2,___ftadd@f2
  4149  00197C  C036  F01E         	movff	KalmanFilter_2@ResrcData_2+1,___ftadd@f2+1
  4150  001980  C037  F01F         	movff	KalmanFilter_2@ResrcData_2+2,___ftadd@f2+2
  4151  001984  C050  F012         	movff	KalmanFilter_2@x_mid,___ftneg@f1
  4152  001988  C051  F013         	movff	KalmanFilter_2@x_mid+1,___ftneg@f1+1
  4153  00198C  C052  F014         	movff	KalmanFilter_2@x_mid+2,___ftneg@f1+2
  4154  001990  ECA3  F015         	call	___ftneg	;wreg free
  4155  001994  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4156  001998  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4157  00199C  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4158  0019A0  EC13  F006         	call	___ftadd	;wreg free
  4159  0019A4  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4160  0019A8  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4161  0019AC  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4162  0019B0  EC60  F010         	call	___ftmul	;wreg free
  4163  0019B4  C026  F047         	movff	?___ftmul,_KalmanFilter_2$2023
  4164  0019B8  C027  F048         	movff	?___ftmul+1,_KalmanFilter_2$2023+1
  4165  0019BC  C028  F049         	movff	?___ftmul+2,_KalmanFilter_2$2023+2
  4166                           
  4167                           ;flex.c: 89: x_now=x_mid+kg*(ResrcData_2-x_mid);
  4168  0019C0  C047  F01A         	movff	_KalmanFilter_2$2023,___ftadd@f1
  4169  0019C4  C048  F01B         	movff	_KalmanFilter_2$2023+1,___ftadd@f1+1
  4170  0019C8  C049  F01C         	movff	_KalmanFilter_2$2023+2,___ftadd@f1+2
  4171  0019CC  C050  F01D         	movff	KalmanFilter_2@x_mid,___ftadd@f2
  4172  0019D0  C051  F01E         	movff	KalmanFilter_2@x_mid+1,___ftadd@f2+1
  4173  0019D4  C052  F01F         	movff	KalmanFilter_2@x_mid+2,___ftadd@f2+2
  4174  0019D8  EC13  F006         	call	___ftadd	;wreg free
  4175  0019DC  C01A  F04A         	movff	?___ftadd,KalmanFilter_2@x_now
  4176  0019E0  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_2@x_now+1
  4177  0019E4  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_2@x_now+2
  4178                           
  4179                           ;flex.c: 90: p_now=(1-kg)*p_mid;
  4180  0019E8  0E00               	movlw	0
  4181  0019EA  6E1D               	movwf	___ftadd@f2,c
  4182  0019EC  0E80               	movlw	128
  4183  0019EE  6E1E               	movwf	___ftadd@f2+1,c
  4184  0019F0  0E3F               	movlw	63
  4185  0019F2  6E1F               	movwf	___ftadd@f2+2,c
  4186  0019F4  C04D  F012         	movff	KalmanFilter_2@kg,___ftneg@f1
  4187  0019F8  C04E  F013         	movff	KalmanFilter_2@kg+1,___ftneg@f1+1
  4188  0019FC  C04F  F014         	movff	KalmanFilter_2@kg+2,___ftneg@f1+2
  4189  001A00  ECA3  F015         	call	___ftneg	;wreg free
  4190  001A04  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4191  001A08  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4192  001A0C  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4193  001A10  EC13  F006         	call	___ftadd	;wreg free
  4194  001A14  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4195  001A18  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4196  001A1C  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4197  001A20  C053  F029         	movff	KalmanFilter_2@p_mid,___ftmul@f2
  4198  001A24  C054  F02A         	movff	KalmanFilter_2@p_mid+1,___ftmul@f2+1
  4199  001A28  C055  F02B         	movff	KalmanFilter_2@p_mid+2,___ftmul@f2+2
  4200  001A2C  EC60  F010         	call	___ftmul	;wreg free
  4201  001A30  C026  F044         	movff	?___ftmul,KalmanFilter_2@p_now
  4202  001A34  C027  F045         	movff	?___ftmul+1,KalmanFilter_2@p_now+1
  4203  001A38  C028  F046         	movff	?___ftmul+2,KalmanFilter_2@p_now+2
  4204                           
  4205                           ;flex.c: 91: p_last_2 = p_now;
  4206  001A3C  C044  F19E         	movff	KalmanFilter_2@p_now,KalmanFilter_2@p_last_2
  4207  001A40  C045  F19F         	movff	KalmanFilter_2@p_now+1,KalmanFilter_2@p_last_2+1
  4208  001A44  C046  F1A0         	movff	KalmanFilter_2@p_now+2,KalmanFilter_2@p_last_2+2
  4209                           
  4210                           ;flex.c: 92: x_last_2 = x_now;
  4211  001A48  C04A  F05C         	movff	KalmanFilter_2@x_now,KalmanFilter_2@x_last_2
  4212  001A4C  C04B  F05D         	movff	KalmanFilter_2@x_now+1,KalmanFilter_2@x_last_2+1
  4213  001A50  C04C  F05E         	movff	KalmanFilter_2@x_now+2,KalmanFilter_2@x_last_2+2
  4214                           
  4215                           ;flex.c: 93: return x_now;
  4216  001A54  C04A  F035         	movff	KalmanFilter_2@x_now,?_KalmanFilter_2
  4217  001A58  C04B  F036         	movff	KalmanFilter_2@x_now+1,?_KalmanFilter_2+1
  4218  001A5C  C04C  F037         	movff	KalmanFilter_2@x_now+2,?_KalmanFilter_2+2
  4219  001A60  0012               	return	
  4220  001A62                     __end_of_KalmanFilter_2:
  4221                           	opt stack 0
  4222                           tblptru	equ	0xFF8
  4223                           postinc0	equ	0xFEE
  4224                           wreg	equ	0xFE8
  4225                           indf2	equ	0xFDF
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function _KalmanFilter_1 *****************
  4231 ;; Defined at:
  4232 ;;		line 37 in file "harwave/flex.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  ResrcData_1     3   52[COMRAM] const 
  4235 ;;  ProcessNiose    3   55[COMRAM] const 
  4236 ;;  MeasureNoise    3   58[COMRAM] const 
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;  p_mid           3   82[COMRAM] const 
  4239 ;;  x_mid           3   79[COMRAM] const 
  4240 ;;  kg              3   76[COMRAM] const 
  4241 ;;  x_now           3   73[COMRAM] const 
  4242 ;;  p_now           3   67[COMRAM] const 
  4243 ;;  Q               3   64[COMRAM] const 
  4244 ;;  R               3   61[COMRAM] const 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  3   52[COMRAM] const 
  4247 ;; Registers used:
  4248 ;;		wreg, status,2, status,0, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4254 ;;      Params:         9       0       0       0       0       0       0
  4255 ;;      Locals:        24       0       0       0       0       0       0
  4256 ;;      Temps:          0       0       0       0       0       0       0
  4257 ;;      Totals:        33       0       0       0       0       0       0
  4258 ;;Total ram usage:       33 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    3
  4261 ;; This function calls:
  4262 ;;		___ftadd
  4263 ;;		___ftdiv
  4264 ;;		___ftmul
  4265 ;;		___ftneg
  4266 ;; This function is called by:
  4267 ;;		_translate_flex
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text13
  4272  001A62                     __ptext13:
  4273                           	opt stack 0
  4274  001A62                     _KalmanFilter_1:
  4275                           	opt stack 26
  4276                           
  4277                           ;flex.c: 40: double R = MeasureNoise_R_1;
  4278                           
  4279                           ;incstack = 0
  4280  001A62  C03B  F03E         	movff	KalmanFilter_1@MeasureNoise_R_1,KalmanFilter_1@R
  4281  001A66  C03C  F03F         	movff	KalmanFilter_1@MeasureNoise_R_1+1,KalmanFilter_1@R+1
  4282  001A6A  C03D  F040         	movff	KalmanFilter_1@MeasureNoise_R_1+2,KalmanFilter_1@R+2
  4283                           
  4284                           ;flex.c: 41: double Q = ProcessNiose_Q_1;
  4285  001A6E  C038  F041         	movff	KalmanFilter_1@ProcessNiose_Q_1,KalmanFilter_1@Q
  4286  001A72  C039  F042         	movff	KalmanFilter_1@ProcessNiose_Q_1+1,KalmanFilter_1@Q+1
  4287  001A76  C03A  F043         	movff	KalmanFilter_1@ProcessNiose_Q_1+2,KalmanFilter_1@Q+2
  4288                           
  4289                           ;flex.c: 43: static double x_last_1;
  4290                           ;flex.c: 44: double x_mid = x_last_1;
  4291  001A7A  C05F  F050         	movff	KalmanFilter_1@x_last_1,KalmanFilter_1@x_mid
  4292  001A7E  C060  F051         	movff	KalmanFilter_1@x_last_1+1,KalmanFilter_1@x_mid+1
  4293  001A82  C061  F052         	movff	KalmanFilter_1@x_last_1+2,KalmanFilter_1@x_mid+2
  4294                           
  4295                           ;flex.c: 45: double x_now;
  4296                           ;flex.c: 47: static double p_last_1;
  4297                           ;flex.c: 48: double p_mid ;
  4298                           ;flex.c: 49: double p_now;
  4299                           ;flex.c: 51: double kg;
  4300                           ;flex.c: 53: x_mid=x_last_1;
  4301  001A86  C05F  F050         	movff	KalmanFilter_1@x_last_1,KalmanFilter_1@x_mid
  4302  001A8A  C060  F051         	movff	KalmanFilter_1@x_last_1+1,KalmanFilter_1@x_mid+1
  4303  001A8E  C061  F052         	movff	KalmanFilter_1@x_last_1+2,KalmanFilter_1@x_mid+2
  4304                           
  4305                           ;flex.c: 54: p_mid=p_last_1+Q;
  4306  001A92  C1A1  F01A         	movff	KalmanFilter_1@p_last_1,___ftadd@f1
  4307  001A96  C1A2  F01B         	movff	KalmanFilter_1@p_last_1+1,___ftadd@f1+1
  4308  001A9A  C1A3  F01C         	movff	KalmanFilter_1@p_last_1+2,___ftadd@f1+2
  4309  001A9E  C041  F01D         	movff	KalmanFilter_1@Q,___ftadd@f2
  4310  001AA2  C042  F01E         	movff	KalmanFilter_1@Q+1,___ftadd@f2+1
  4311  001AA6  C043  F01F         	movff	KalmanFilter_1@Q+2,___ftadd@f2+2
  4312  001AAA  EC13  F006         	call	___ftadd	;wreg free
  4313  001AAE  C01A  F053         	movff	?___ftadd,KalmanFilter_1@p_mid
  4314  001AB2  C01B  F054         	movff	?___ftadd+1,KalmanFilter_1@p_mid+1
  4315  001AB6  C01C  F055         	movff	?___ftadd+2,KalmanFilter_1@p_mid+2
  4316                           
  4317                           ;flex.c: 59: kg=p_mid/(p_mid+R);
  4318  001ABA  C053  F026         	movff	KalmanFilter_1@p_mid,___ftdiv@f1
  4319  001ABE  C054  F027         	movff	KalmanFilter_1@p_mid+1,___ftdiv@f1+1
  4320  001AC2  C055  F028         	movff	KalmanFilter_1@p_mid+2,___ftdiv@f1+2
  4321  001AC6  C03E  F01D         	movff	KalmanFilter_1@R,___ftadd@f2
  4322  001ACA  C03F  F01E         	movff	KalmanFilter_1@R+1,___ftadd@f2+1
  4323  001ACE  C040  F01F         	movff	KalmanFilter_1@R+2,___ftadd@f2+2
  4324  001AD2  C053  F01A         	movff	KalmanFilter_1@p_mid,___ftadd@f1
  4325  001AD6  C054  F01B         	movff	KalmanFilter_1@p_mid+1,___ftadd@f1+1
  4326  001ADA  C055  F01C         	movff	KalmanFilter_1@p_mid+2,___ftadd@f1+2
  4327  001ADE  EC13  F006         	call	___ftadd	;wreg free
  4328  001AE2  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  4329  001AE6  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  4330  001AEA  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  4331  001AEE  ECDA  F010         	call	___ftdiv	;wreg free
  4332  001AF2  C026  F04D         	movff	?___ftdiv,KalmanFilter_1@kg
  4333  001AF6  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_1@kg+1
  4334  001AFA  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_1@kg+2
  4335                           
  4336                           ;flex.c: 60: x_now=x_mid+kg*(ResrcData_1-x_mid);
  4337  001AFE  C04D  F029         	movff	KalmanFilter_1@kg,___ftmul@f2
  4338  001B02  C04E  F02A         	movff	KalmanFilter_1@kg+1,___ftmul@f2+1
  4339  001B06  C04F  F02B         	movff	KalmanFilter_1@kg+2,___ftmul@f2+2
  4340  001B0A  C035  F01D         	movff	KalmanFilter_1@ResrcData_1,___ftadd@f2
  4341  001B0E  C036  F01E         	movff	KalmanFilter_1@ResrcData_1+1,___ftadd@f2+1
  4342  001B12  C037  F01F         	movff	KalmanFilter_1@ResrcData_1+2,___ftadd@f2+2
  4343  001B16  C050  F012         	movff	KalmanFilter_1@x_mid,___ftneg@f1
  4344  001B1A  C051  F013         	movff	KalmanFilter_1@x_mid+1,___ftneg@f1+1
  4345  001B1E  C052  F014         	movff	KalmanFilter_1@x_mid+2,___ftneg@f1+2
  4346  001B22  ECA3  F015         	call	___ftneg	;wreg free
  4347  001B26  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4348  001B2A  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4349  001B2E  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4350  001B32  EC13  F006         	call	___ftadd	;wreg free
  4351  001B36  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4352  001B3A  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4353  001B3E  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4354  001B42  EC60  F010         	call	___ftmul	;wreg free
  4355  001B46  C026  F047         	movff	?___ftmul,_KalmanFilter_1$2022
  4356  001B4A  C027  F048         	movff	?___ftmul+1,_KalmanFilter_1$2022+1
  4357  001B4E  C028  F049         	movff	?___ftmul+2,_KalmanFilter_1$2022+2
  4358                           
  4359                           ;flex.c: 60: x_now=x_mid+kg*(ResrcData_1-x_mid);
  4360  001B52  C047  F01A         	movff	_KalmanFilter_1$2022,___ftadd@f1
  4361  001B56  C048  F01B         	movff	_KalmanFilter_1$2022+1,___ftadd@f1+1
  4362  001B5A  C049  F01C         	movff	_KalmanFilter_1$2022+2,___ftadd@f1+2
  4363  001B5E  C050  F01D         	movff	KalmanFilter_1@x_mid,___ftadd@f2
  4364  001B62  C051  F01E         	movff	KalmanFilter_1@x_mid+1,___ftadd@f2+1
  4365  001B66  C052  F01F         	movff	KalmanFilter_1@x_mid+2,___ftadd@f2+2
  4366  001B6A  EC13  F006         	call	___ftadd	;wreg free
  4367  001B6E  C01A  F04A         	movff	?___ftadd,KalmanFilter_1@x_now
  4368  001B72  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_1@x_now+1
  4369  001B76  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_1@x_now+2
  4370                           
  4371                           ;flex.c: 61: p_now=(1-kg)*p_mid;
  4372  001B7A  0E00               	movlw	0
  4373  001B7C  6E1D               	movwf	___ftadd@f2,c
  4374  001B7E  0E80               	movlw	128
  4375  001B80  6E1E               	movwf	___ftadd@f2+1,c
  4376  001B82  0E3F               	movlw	63
  4377  001B84  6E1F               	movwf	___ftadd@f2+2,c
  4378  001B86  C04D  F012         	movff	KalmanFilter_1@kg,___ftneg@f1
  4379  001B8A  C04E  F013         	movff	KalmanFilter_1@kg+1,___ftneg@f1+1
  4380  001B8E  C04F  F014         	movff	KalmanFilter_1@kg+2,___ftneg@f1+2
  4381  001B92  ECA3  F015         	call	___ftneg	;wreg free
  4382  001B96  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4383  001B9A  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4384  001B9E  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4385  001BA2  EC13  F006         	call	___ftadd	;wreg free
  4386  001BA6  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4387  001BAA  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4388  001BAE  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4389  001BB2  C053  F029         	movff	KalmanFilter_1@p_mid,___ftmul@f2
  4390  001BB6  C054  F02A         	movff	KalmanFilter_1@p_mid+1,___ftmul@f2+1
  4391  001BBA  C055  F02B         	movff	KalmanFilter_1@p_mid+2,___ftmul@f2+2
  4392  001BBE  EC60  F010         	call	___ftmul	;wreg free
  4393  001BC2  C026  F044         	movff	?___ftmul,KalmanFilter_1@p_now
  4394  001BC6  C027  F045         	movff	?___ftmul+1,KalmanFilter_1@p_now+1
  4395  001BCA  C028  F046         	movff	?___ftmul+2,KalmanFilter_1@p_now+2
  4396                           
  4397                           ;flex.c: 62: p_last_1 = p_now;
  4398  001BCE  C044  F1A1         	movff	KalmanFilter_1@p_now,KalmanFilter_1@p_last_1
  4399  001BD2  C045  F1A2         	movff	KalmanFilter_1@p_now+1,KalmanFilter_1@p_last_1+1
  4400  001BD6  C046  F1A3         	movff	KalmanFilter_1@p_now+2,KalmanFilter_1@p_last_1+2
  4401                           
  4402                           ;flex.c: 63: x_last_1 = x_now;
  4403  001BDA  C04A  F05F         	movff	KalmanFilter_1@x_now,KalmanFilter_1@x_last_1
  4404  001BDE  C04B  F060         	movff	KalmanFilter_1@x_now+1,KalmanFilter_1@x_last_1+1
  4405  001BE2  C04C  F061         	movff	KalmanFilter_1@x_now+2,KalmanFilter_1@x_last_1+2
  4406                           
  4407                           ;flex.c: 64: return x_now;
  4408  001BE6  C04A  F035         	movff	KalmanFilter_1@x_now,?_KalmanFilter_1
  4409  001BEA  C04B  F036         	movff	KalmanFilter_1@x_now+1,?_KalmanFilter_1+1
  4410  001BEE  C04C  F037         	movff	KalmanFilter_1@x_now+2,?_KalmanFilter_1+2
  4411  001BF2  0012               	return	
  4412  001BF4                     __end_of_KalmanFilter_1:
  4413                           	opt stack 0
  4414                           tblptru	equ	0xFF8
  4415                           postinc0	equ	0xFEE
  4416                           wreg	equ	0xFE8
  4417                           indf2	equ	0xFDF
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _KalmanFilter_0 *****************
  4423 ;; Defined at:
  4424 ;;		line 8 in file "harwave/flex.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  ResrcData_0     3   52[COMRAM] const 
  4427 ;;  ProcessNiose    3   55[COMRAM] const 
  4428 ;;  MeasureNoise    3   58[COMRAM] const 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  p_mid           3   82[COMRAM] const 
  4431 ;;  x_mid           3   79[COMRAM] const 
  4432 ;;  kg              3   76[COMRAM] const 
  4433 ;;  x_now           3   73[COMRAM] const 
  4434 ;;  p_now           3   67[COMRAM] const 
  4435 ;;  Q               3   64[COMRAM] const 
  4436 ;;  R               3   61[COMRAM] const 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  3   52[COMRAM] const 
  4439 ;; Registers used:
  4440 ;;		wreg, status,2, status,0, cstack
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4446 ;;      Params:         9       0       0       0       0       0       0
  4447 ;;      Locals:        24       0       0       0       0       0       0
  4448 ;;      Temps:          0       0       0       0       0       0       0
  4449 ;;      Totals:        33       0       0       0       0       0       0
  4450 ;;Total ram usage:       33 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    3
  4453 ;; This function calls:
  4454 ;;		___ftadd
  4455 ;;		___ftdiv
  4456 ;;		___ftmul
  4457 ;;		___ftneg
  4458 ;; This function is called by:
  4459 ;;		_translate_flex
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text14
  4464  001BF4                     __ptext14:
  4465                           	opt stack 0
  4466  001BF4                     _KalmanFilter_0:
  4467                           	opt stack 26
  4468                           
  4469                           ;flex.c: 11: double R = MeasureNoise_R_0;
  4470                           
  4471                           ;incstack = 0
  4472  001BF4  C03B  F03E         	movff	KalmanFilter_0@MeasureNoise_R_0,KalmanFilter_0@R
  4473  001BF8  C03C  F03F         	movff	KalmanFilter_0@MeasureNoise_R_0+1,KalmanFilter_0@R+1
  4474  001BFC  C03D  F040         	movff	KalmanFilter_0@MeasureNoise_R_0+2,KalmanFilter_0@R+2
  4475                           
  4476                           ;flex.c: 12: double Q = ProcessNiose_Q_0;
  4477  001C00  C038  F041         	movff	KalmanFilter_0@ProcessNiose_Q_0,KalmanFilter_0@Q
  4478  001C04  C039  F042         	movff	KalmanFilter_0@ProcessNiose_Q_0+1,KalmanFilter_0@Q+1
  4479  001C08  C03A  F043         	movff	KalmanFilter_0@ProcessNiose_Q_0+2,KalmanFilter_0@Q+2
  4480                           
  4481                           ;flex.c: 14: static double x_last_0;
  4482                           ;flex.c: 15: double x_mid = x_last_0;
  4483  001C0C  C062  F050         	movff	KalmanFilter_0@x_last_0,KalmanFilter_0@x_mid
  4484  001C10  C063  F051         	movff	KalmanFilter_0@x_last_0+1,KalmanFilter_0@x_mid+1
  4485  001C14  C064  F052         	movff	KalmanFilter_0@x_last_0+2,KalmanFilter_0@x_mid+2
  4486                           
  4487                           ;flex.c: 16: double x_now;
  4488                           ;flex.c: 18: static double p_last_0;
  4489                           ;flex.c: 19: double p_mid ;
  4490                           ;flex.c: 20: double p_now;
  4491                           ;flex.c: 22: double kg;
  4492                           ;flex.c: 24: x_mid=x_last_0;
  4493  001C18  C062  F050         	movff	KalmanFilter_0@x_last_0,KalmanFilter_0@x_mid
  4494  001C1C  C063  F051         	movff	KalmanFilter_0@x_last_0+1,KalmanFilter_0@x_mid+1
  4495  001C20  C064  F052         	movff	KalmanFilter_0@x_last_0+2,KalmanFilter_0@x_mid+2
  4496                           
  4497                           ;flex.c: 25: p_mid=p_last_0+Q;
  4498  001C24  C1A4  F01A         	movff	KalmanFilter_0@p_last_0,___ftadd@f1
  4499  001C28  C1A5  F01B         	movff	KalmanFilter_0@p_last_0+1,___ftadd@f1+1
  4500  001C2C  C1A6  F01C         	movff	KalmanFilter_0@p_last_0+2,___ftadd@f1+2
  4501  001C30  C041  F01D         	movff	KalmanFilter_0@Q,___ftadd@f2
  4502  001C34  C042  F01E         	movff	KalmanFilter_0@Q+1,___ftadd@f2+1
  4503  001C38  C043  F01F         	movff	KalmanFilter_0@Q+2,___ftadd@f2+2
  4504  001C3C  EC13  F006         	call	___ftadd	;wreg free
  4505  001C40  C01A  F053         	movff	?___ftadd,KalmanFilter_0@p_mid
  4506  001C44  C01B  F054         	movff	?___ftadd+1,KalmanFilter_0@p_mid+1
  4507  001C48  C01C  F055         	movff	?___ftadd+2,KalmanFilter_0@p_mid+2
  4508                           
  4509                           ;flex.c: 30: kg=p_mid/(p_mid+R);
  4510  001C4C  C053  F026         	movff	KalmanFilter_0@p_mid,___ftdiv@f1
  4511  001C50  C054  F027         	movff	KalmanFilter_0@p_mid+1,___ftdiv@f1+1
  4512  001C54  C055  F028         	movff	KalmanFilter_0@p_mid+2,___ftdiv@f1+2
  4513  001C58  C03E  F01D         	movff	KalmanFilter_0@R,___ftadd@f2
  4514  001C5C  C03F  F01E         	movff	KalmanFilter_0@R+1,___ftadd@f2+1
  4515  001C60  C040  F01F         	movff	KalmanFilter_0@R+2,___ftadd@f2+2
  4516  001C64  C053  F01A         	movff	KalmanFilter_0@p_mid,___ftadd@f1
  4517  001C68  C054  F01B         	movff	KalmanFilter_0@p_mid+1,___ftadd@f1+1
  4518  001C6C  C055  F01C         	movff	KalmanFilter_0@p_mid+2,___ftadd@f1+2
  4519  001C70  EC13  F006         	call	___ftadd	;wreg free
  4520  001C74  C01A  F029         	movff	?___ftadd,___ftdiv@f2
  4521  001C78  C01B  F02A         	movff	?___ftadd+1,___ftdiv@f2+1
  4522  001C7C  C01C  F02B         	movff	?___ftadd+2,___ftdiv@f2+2
  4523  001C80  ECDA  F010         	call	___ftdiv	;wreg free
  4524  001C84  C026  F04D         	movff	?___ftdiv,KalmanFilter_0@kg
  4525  001C88  C027  F04E         	movff	?___ftdiv+1,KalmanFilter_0@kg+1
  4526  001C8C  C028  F04F         	movff	?___ftdiv+2,KalmanFilter_0@kg+2
  4527                           
  4528                           ;flex.c: 31: x_now=x_mid+kg*(ResrcData_0-x_mid);
  4529  001C90  C04D  F029         	movff	KalmanFilter_0@kg,___ftmul@f2
  4530  001C94  C04E  F02A         	movff	KalmanFilter_0@kg+1,___ftmul@f2+1
  4531  001C98  C04F  F02B         	movff	KalmanFilter_0@kg+2,___ftmul@f2+2
  4532  001C9C  C035  F01D         	movff	KalmanFilter_0@ResrcData_0,___ftadd@f2
  4533  001CA0  C036  F01E         	movff	KalmanFilter_0@ResrcData_0+1,___ftadd@f2+1
  4534  001CA4  C037  F01F         	movff	KalmanFilter_0@ResrcData_0+2,___ftadd@f2+2
  4535  001CA8  C050  F012         	movff	KalmanFilter_0@x_mid,___ftneg@f1
  4536  001CAC  C051  F013         	movff	KalmanFilter_0@x_mid+1,___ftneg@f1+1
  4537  001CB0  C052  F014         	movff	KalmanFilter_0@x_mid+2,___ftneg@f1+2
  4538  001CB4  ECA3  F015         	call	___ftneg	;wreg free
  4539  001CB8  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4540  001CBC  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4541  001CC0  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4542  001CC4  EC13  F006         	call	___ftadd	;wreg free
  4543  001CC8  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4544  001CCC  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4545  001CD0  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4546  001CD4  EC60  F010         	call	___ftmul	;wreg free
  4547  001CD8  C026  F047         	movff	?___ftmul,_KalmanFilter_0$2021
  4548  001CDC  C027  F048         	movff	?___ftmul+1,_KalmanFilter_0$2021+1
  4549  001CE0  C028  F049         	movff	?___ftmul+2,_KalmanFilter_0$2021+2
  4550                           
  4551                           ;flex.c: 31: x_now=x_mid+kg*(ResrcData_0-x_mid);
  4552  001CE4  C047  F01A         	movff	_KalmanFilter_0$2021,___ftadd@f1
  4553  001CE8  C048  F01B         	movff	_KalmanFilter_0$2021+1,___ftadd@f1+1
  4554  001CEC  C049  F01C         	movff	_KalmanFilter_0$2021+2,___ftadd@f1+2
  4555  001CF0  C050  F01D         	movff	KalmanFilter_0@x_mid,___ftadd@f2
  4556  001CF4  C051  F01E         	movff	KalmanFilter_0@x_mid+1,___ftadd@f2+1
  4557  001CF8  C052  F01F         	movff	KalmanFilter_0@x_mid+2,___ftadd@f2+2
  4558  001CFC  EC13  F006         	call	___ftadd	;wreg free
  4559  001D00  C01A  F04A         	movff	?___ftadd,KalmanFilter_0@x_now
  4560  001D04  C01B  F04B         	movff	?___ftadd+1,KalmanFilter_0@x_now+1
  4561  001D08  C01C  F04C         	movff	?___ftadd+2,KalmanFilter_0@x_now+2
  4562                           
  4563                           ;flex.c: 32: p_now=(1-kg)*p_mid;
  4564  001D0C  0E00               	movlw	0
  4565  001D0E  6E1D               	movwf	___ftadd@f2,c
  4566  001D10  0E80               	movlw	128
  4567  001D12  6E1E               	movwf	___ftadd@f2+1,c
  4568  001D14  0E3F               	movlw	63
  4569  001D16  6E1F               	movwf	___ftadd@f2+2,c
  4570  001D18  C04D  F012         	movff	KalmanFilter_0@kg,___ftneg@f1
  4571  001D1C  C04E  F013         	movff	KalmanFilter_0@kg+1,___ftneg@f1+1
  4572  001D20  C04F  F014         	movff	KalmanFilter_0@kg+2,___ftneg@f1+2
  4573  001D24  ECA3  F015         	call	___ftneg	;wreg free
  4574  001D28  C012  F01A         	movff	?___ftneg,___ftadd@f1
  4575  001D2C  C013  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  4576  001D30  C014  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  4577  001D34  EC13  F006         	call	___ftadd	;wreg free
  4578  001D38  C01A  F026         	movff	?___ftadd,___ftmul@f1
  4579  001D3C  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  4580  001D40  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  4581  001D44  C053  F029         	movff	KalmanFilter_0@p_mid,___ftmul@f2
  4582  001D48  C054  F02A         	movff	KalmanFilter_0@p_mid+1,___ftmul@f2+1
  4583  001D4C  C055  F02B         	movff	KalmanFilter_0@p_mid+2,___ftmul@f2+2
  4584  001D50  EC60  F010         	call	___ftmul	;wreg free
  4585  001D54  C026  F044         	movff	?___ftmul,KalmanFilter_0@p_now
  4586  001D58  C027  F045         	movff	?___ftmul+1,KalmanFilter_0@p_now+1
  4587  001D5C  C028  F046         	movff	?___ftmul+2,KalmanFilter_0@p_now+2
  4588                           
  4589                           ;flex.c: 33: p_last_0 = p_now;
  4590  001D60  C044  F1A4         	movff	KalmanFilter_0@p_now,KalmanFilter_0@p_last_0
  4591  001D64  C045  F1A5         	movff	KalmanFilter_0@p_now+1,KalmanFilter_0@p_last_0+1
  4592  001D68  C046  F1A6         	movff	KalmanFilter_0@p_now+2,KalmanFilter_0@p_last_0+2
  4593                           
  4594                           ;flex.c: 34: x_last_0 = x_now;
  4595  001D6C  C04A  F062         	movff	KalmanFilter_0@x_now,KalmanFilter_0@x_last_0
  4596  001D70  C04B  F063         	movff	KalmanFilter_0@x_now+1,KalmanFilter_0@x_last_0+1
  4597  001D74  C04C  F064         	movff	KalmanFilter_0@x_now+2,KalmanFilter_0@x_last_0+2
  4598                           
  4599                           ;flex.c: 35: return x_now;
  4600  001D78  C04A  F035         	movff	KalmanFilter_0@x_now,?_KalmanFilter_0
  4601  001D7C  C04B  F036         	movff	KalmanFilter_0@x_now+1,?_KalmanFilter_0+1
  4602  001D80  C04C  F037         	movff	KalmanFilter_0@x_now+2,?_KalmanFilter_0+2
  4603  001D84  0012               	return	
  4604  001D86                     __end_of_KalmanFilter_0:
  4605                           	opt stack 0
  4606                           tblptru	equ	0xFF8
  4607                           postinc0	equ	0xFEE
  4608                           wreg	equ	0xFE8
  4609                           indf2	equ	0xFDF
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function ___ftneg *****************
  4615 ;; Defined at:
  4616 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;  f1              3   17[COMRAM] float 
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  3   17[COMRAM] float 
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4630 ;;      Params:         3       0       0       0       0       0       0
  4631 ;;      Locals:         0       0       0       0       0       0       0
  4632 ;;      Temps:          0       0       0       0       0       0       0
  4633 ;;      Totals:         3       0       0       0       0       0       0
  4634 ;;Total ram usage:        3 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    1
  4637 ;; This function calls:
  4638 ;;		Nothing
  4639 ;; This function is called by:
  4640 ;;		_KalmanFilter_0
  4641 ;;		_KalmanFilter_1
  4642 ;;		_KalmanFilter_2
  4643 ;;		_KalmanFilter_3
  4644 ;;		_KalmanFilter_4
  4645 ;;		_KalmanFilter_5
  4646 ;;		_KalmanFilter_6
  4647 ;;		_KalmanFilter_7
  4648 ;;		_KalmanFilter_8
  4649 ;;		_KalmanFilter_9
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           	psect	text15
  4654  002B46                     __ptext15:
  4655                           	opt stack 0
  4656  002B46                     ___ftneg:
  4657                           	opt stack 27
  4658                           
  4659                           ;incstack = 0
  4660  002B46  5012               	movf	___ftneg@f1,w,c
  4661  002B48  1013               	iorwf	___ftneg@f1+1,w,c
  4662  002B4A  1014               	iorwf	___ftneg@f1+2,w,c
  4663  002B4C  B4D8               	btfsc	status,2,c
  4664  002B4E  D006               	goto	l857
  4665  002B50  0E00               	movlw	0
  4666  002B52  1A12               	xorwf	___ftneg@f1,f,c
  4667  002B54  0E00               	movlw	0
  4668  002B56  1A13               	xorwf	___ftneg@f1+1,f,c
  4669  002B58  0E80               	movlw	128
  4670  002B5A  1A14               	xorwf	___ftneg@f1+2,f,c
  4671  002B5C                     l857:
  4672  002B5C  C012  F012         	movff	___ftneg@f1,?___ftneg
  4673  002B60  C013  F013         	movff	___ftneg@f1+1,?___ftneg+1
  4674  002B64  C014  F014         	movff	___ftneg@f1+2,?___ftneg+2
  4675  002B68  0012               	return		;funcret
  4676  002B6A                     __end_of___ftneg:
  4677                           	opt stack 0
  4678                           tblptru	equ	0xFF8
  4679                           postinc0	equ	0xFEE
  4680                           wreg	equ	0xFE8
  4681                           indf2	equ	0xFDF
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function ___ftmul *****************
  4687 ;; Defined at:
  4688 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  f1              3   37[COMRAM] float 
  4691 ;;  f2              3   40[COMRAM] float 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;  f3_as_produc    3   47[COMRAM] unsigned um
  4694 ;;  sign            1   51[COMRAM] unsigned char 
  4695 ;;  cntr            1   50[COMRAM] unsigned char 
  4696 ;;  exp             1   46[COMRAM] unsigned char 
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  3   37[COMRAM] float 
  4699 ;; Registers used:
  4700 ;;		wreg, status,2, status,0, cstack
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4706 ;;      Params:         6       0       0       0       0       0       0
  4707 ;;      Locals:         6       0       0       0       0       0       0
  4708 ;;      Temps:          3       0       0       0       0       0       0
  4709 ;;      Totals:        15       0       0       0       0       0       0
  4710 ;;Total ram usage:       15 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    2
  4713 ;; This function calls:
  4714 ;;		___ftpack
  4715 ;; This function is called by:
  4716 ;;		_KalmanFilter_0
  4717 ;;		_KalmanFilter_1
  4718 ;;		_KalmanFilter_2
  4719 ;;		_KalmanFilter_3
  4720 ;;		_KalmanFilter_4
  4721 ;;		_KalmanFilter_5
  4722 ;;		_KalmanFilter_6
  4723 ;;		_KalmanFilter_7
  4724 ;;		_KalmanFilter_8
  4725 ;;		_KalmanFilter_9
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           	psect	text16
  4730  0020C0                     __ptext16:
  4731                           	opt stack 0
  4732  0020C0                     ___ftmul:
  4733                           	opt stack 26
  4734                           
  4735                           ;incstack = 0
  4736  0020C0  C028  F02C         	movff	___ftmul@f1+2,??___ftmul
  4737  0020C4  6A2D               	clrf	(??___ftmul+1)& (0+255),c
  4738  0020C6  6A2E               	clrf	(??___ftmul+2)& (0+255),c
  4739  0020C8  3427               	rlcf	___ftmul@f1+1,w,c
  4740  0020CA  362C               	rlcf	??___ftmul& (0+255),f,c
  4741  0020CC  E301               	bnc	u5191
  4742  0020CE  802D               	bsf	(??___ftmul+1)& (0+255),0,c
  4743  0020D0                     u5191:
  4744  0020D0  502C               	movf	??___ftmul,w,c
  4745  0020D2  6E2F               	movwf	___ftmul@exp,c
  4746  0020D4  502F               	movf	___ftmul@exp,w,c
  4747  0020D6  A4D8               	btfss	status,2,c
  4748  0020D8  D007               	goto	l4457
  4749  0020DA  0E00               	movlw	0
  4750  0020DC  6E26               	movwf	?___ftmul,c
  4751  0020DE  0E00               	movlw	0
  4752  0020E0  6E27               	movwf	?___ftmul+1,c
  4753  0020E2  0E00               	movlw	0
  4754  0020E4  6E28               	movwf	?___ftmul+2,c
  4755  0020E6  0012               	return	
  4756  0020E8                     l4457:
  4757  0020E8  C02B  F02C         	movff	___ftmul@f2+2,??___ftmul
  4758  0020EC  6A2D               	clrf	(??___ftmul+1)& (0+255),c
  4759  0020EE  6A2E               	clrf	(??___ftmul+2)& (0+255),c
  4760  0020F0  342A               	rlcf	___ftmul@f2+1,w,c
  4761  0020F2  362C               	rlcf	??___ftmul& (0+255),f,c
  4762  0020F4  E301               	bnc	u5211
  4763  0020F6  802D               	bsf	(??___ftmul+1)& (0+255),0,c
  4764  0020F8                     u5211:
  4765  0020F8  502C               	movf	??___ftmul,w,c
  4766  0020FA  6E34               	movwf	___ftmul@sign,c
  4767  0020FC  5034               	movf	___ftmul@sign,w,c
  4768  0020FE  A4D8               	btfss	status,2,c
  4769  002100  D007               	goto	l4463
  4770  002102  0E00               	movlw	0
  4771  002104  6E26               	movwf	?___ftmul,c
  4772  002106  0E00               	movlw	0
  4773  002108  6E27               	movwf	?___ftmul+1,c
  4774  00210A  0E00               	movlw	0
  4775  00210C  6E28               	movwf	?___ftmul+2,c
  4776  00210E  0012               	return	
  4777  002110                     l4463:
  4778  002110  5034               	movf	___ftmul@sign,w,c
  4779  002112  0F7B               	addlw	123
  4780  002114  262F               	addwf	___ftmul@exp,f,c
  4781  002116  C028  F034         	movff	___ftmul@f1+2,___ftmul@sign
  4782  00211A  502B               	movf	___ftmul@f2+2,w,c
  4783  00211C  1A34               	xorwf	___ftmul@sign,f,c
  4784  00211E  0E80               	movlw	128
  4785  002120  1634               	andwf	___ftmul@sign,f,c
  4786  002122  8E27               	bsf	___ftmul@f1+1,7,c
  4787  002124  8E2A               	bsf	___ftmul@f2+1,7,c
  4788  002126  0EFF               	movlw	255
  4789  002128  1629               	andwf	___ftmul@f2,f,c
  4790  00212A  0EFF               	movlw	255
  4791  00212C  162A               	andwf	___ftmul@f2+1,f,c
  4792  00212E  0E00               	movlw	0
  4793  002130  162B               	andwf	___ftmul@f2+2,f,c
  4794  002132  0E00               	movlw	0
  4795  002134  6E30               	movwf	___ftmul@f3_as_product,c
  4796  002136  0E00               	movlw	0
  4797  002138  6E31               	movwf	___ftmul@f3_as_product+1,c
  4798  00213A  0E00               	movlw	0
  4799  00213C  6E32               	movwf	___ftmul@f3_as_product+2,c
  4800  00213E  0E07               	movlw	7
  4801  002140  6E33               	movwf	___ftmul@cntr,c
  4802  002142                     l4477:
  4803  002142  A026               	btfss	___ftmul@f1,0,c
  4804  002144  D006               	goto	l4481
  4805  002146  5029               	movf	___ftmul@f2,w,c
  4806  002148  2630               	addwf	___ftmul@f3_as_product,f,c
  4807  00214A  502A               	movf	___ftmul@f2+1,w,c
  4808  00214C  2231               	addwfc	___ftmul@f3_as_product+1,f,c
  4809  00214E  502B               	movf	___ftmul@f2+2,w,c
  4810  002150  2232               	addwfc	___ftmul@f3_as_product+2,f,c
  4811  002152                     l4481:
  4812  002152  90D8               	bcf	status,0,c
  4813  002154  3228               	rrcf	___ftmul@f1+2,f,c
  4814  002156  3227               	rrcf	___ftmul@f1+1,f,c
  4815  002158  3226               	rrcf	___ftmul@f1,f,c
  4816  00215A  90D8               	bcf	status,0,c
  4817  00215C  3629               	rlcf	___ftmul@f2,f,c
  4818  00215E  362A               	rlcf	___ftmul@f2+1,f,c
  4819  002160  362B               	rlcf	___ftmul@f2+2,f,c
  4820  002162  2E33               	decfsz	___ftmul@cntr,f,c
  4821  002164  D7EE               	goto	l4477
  4822  002166  0E09               	movlw	9
  4823  002168  6E33               	movwf	___ftmul@cntr,c
  4824  00216A                     l4487:
  4825  00216A  A026               	btfss	___ftmul@f1,0,c
  4826  00216C  D006               	goto	l4491
  4827  00216E  5029               	movf	___ftmul@f2,w,c
  4828  002170  2630               	addwf	___ftmul@f3_as_product,f,c
  4829  002172  502A               	movf	___ftmul@f2+1,w,c
  4830  002174  2231               	addwfc	___ftmul@f3_as_product+1,f,c
  4831  002176  502B               	movf	___ftmul@f2+2,w,c
  4832  002178  2232               	addwfc	___ftmul@f3_as_product+2,f,c
  4833  00217A                     l4491:
  4834  00217A  90D8               	bcf	status,0,c
  4835  00217C  3228               	rrcf	___ftmul@f1+2,f,c
  4836  00217E  3227               	rrcf	___ftmul@f1+1,f,c
  4837  002180  3226               	rrcf	___ftmul@f1,f,c
  4838  002182  90D8               	bcf	status,0,c
  4839  002184  3232               	rrcf	___ftmul@f3_as_product+2,f,c
  4840  002186  3231               	rrcf	___ftmul@f3_as_product+1,f,c
  4841  002188  3230               	rrcf	___ftmul@f3_as_product,f,c
  4842  00218A  2E33               	decfsz	___ftmul@cntr,f,c
  4843  00218C  D7EE               	goto	l4487
  4844  00218E  C030  F012         	movff	___ftmul@f3_as_product,___ftpack@arg
  4845  002192  C031  F013         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4846  002196  C032  F014         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4847  00219A  C02F  F015         	movff	___ftmul@exp,___ftpack@exp
  4848  00219E  C034  F016         	movff	___ftmul@sign,___ftpack@sign
  4849  0021A2  EC71  F012         	call	___ftpack	;wreg free
  4850  0021A6  C012  F026         	movff	?___ftpack,?___ftmul
  4851  0021AA  C013  F027         	movff	?___ftpack+1,?___ftmul+1
  4852  0021AE  C014  F028         	movff	?___ftpack+2,?___ftmul+2
  4853  0021B2  0012               	return	
  4854  0021B4                     __end_of___ftmul:
  4855                           	opt stack 0
  4856                           tblptru	equ	0xFF8
  4857                           postinc0	equ	0xFEE
  4858                           wreg	equ	0xFE8
  4859                           indf2	equ	0xFDF
  4860                           fsr2h	equ	0xFDA
  4861                           fsr2l	equ	0xFD9
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function ___ftdiv *****************
  4865 ;; Defined at:
  4866 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  f1              3   37[COMRAM] float 
  4869 ;;  f2              3   40[COMRAM] float 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  f3              3   47[COMRAM] float 
  4872 ;;  sign            1   51[COMRAM] unsigned char 
  4873 ;;  exp             1   50[COMRAM] unsigned char 
  4874 ;;  cntr            1   46[COMRAM] unsigned char 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  3   37[COMRAM] float 
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, status,0, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4884 ;;      Params:         6       0       0       0       0       0       0
  4885 ;;      Locals:         6       0       0       0       0       0       0
  4886 ;;      Temps:          3       0       0       0       0       0       0
  4887 ;;      Totals:        15       0       0       0       0       0       0
  4888 ;;Total ram usage:       15 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    2
  4891 ;; This function calls:
  4892 ;;		___ftpack
  4893 ;; This function is called by:
  4894 ;;		_KalmanFilter_0
  4895 ;;		_KalmanFilter_1
  4896 ;;		_KalmanFilter_2
  4897 ;;		_KalmanFilter_3
  4898 ;;		_KalmanFilter_4
  4899 ;;		_KalmanFilter_5
  4900 ;;		_KalmanFilter_6
  4901 ;;		_KalmanFilter_7
  4902 ;;		_KalmanFilter_8
  4903 ;;		_KalmanFilter_9
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text17
  4908  0021B4                     __ptext17:
  4909                           	opt stack 0
  4910  0021B4                     ___ftdiv:
  4911                           	opt stack 26
  4912                           
  4913                           ;incstack = 0
  4914  0021B4  C028  F02C         	movff	___ftdiv@f1+2,??___ftdiv
  4915  0021B8  6A2D               	clrf	(??___ftdiv+1)& (0+255),c
  4916  0021BA  6A2E               	clrf	(??___ftdiv+2)& (0+255),c
  4917  0021BC  3427               	rlcf	___ftdiv@f1+1,w,c
  4918  0021BE  362C               	rlcf	??___ftdiv& (0+255),f,c
  4919  0021C0  E301               	bnc	u5141
  4920  0021C2  802D               	bsf	(??___ftdiv+1)& (0+255),0,c
  4921  0021C4                     u5141:
  4922  0021C4  502C               	movf	??___ftdiv,w,c
  4923  0021C6  6E33               	movwf	___ftdiv@exp,c
  4924  0021C8  5033               	movf	___ftdiv@exp,w,c
  4925  0021CA  A4D8               	btfss	status,2,c
  4926  0021CC  D007               	goto	l4411
  4927  0021CE  0E00               	movlw	0
  4928  0021D0  6E26               	movwf	?___ftdiv,c
  4929  0021D2  0E00               	movlw	0
  4930  0021D4  6E27               	movwf	?___ftdiv+1,c
  4931  0021D6  0E00               	movlw	0
  4932  0021D8  6E28               	movwf	?___ftdiv+2,c
  4933  0021DA  0012               	return	
  4934  0021DC                     l4411:
  4935  0021DC  C02B  F02C         	movff	___ftdiv@f2+2,??___ftdiv
  4936  0021E0  6A2D               	clrf	(??___ftdiv+1)& (0+255),c
  4937  0021E2  6A2E               	clrf	(??___ftdiv+2)& (0+255),c
  4938  0021E4  342A               	rlcf	___ftdiv@f2+1,w,c
  4939  0021E6  362C               	rlcf	??___ftdiv& (0+255),f,c
  4940  0021E8  E301               	bnc	u5161
  4941  0021EA  802D               	bsf	(??___ftdiv+1)& (0+255),0,c
  4942  0021EC                     u5161:
  4943  0021EC  502C               	movf	??___ftdiv,w,c
  4944  0021EE  6E34               	movwf	___ftdiv@sign,c
  4945  0021F0  5034               	movf	___ftdiv@sign,w,c
  4946  0021F2  A4D8               	btfss	status,2,c
  4947  0021F4  D007               	goto	l4417
  4948  0021F6  0E00               	movlw	0
  4949  0021F8  6E26               	movwf	?___ftdiv,c
  4950  0021FA  0E00               	movlw	0
  4951  0021FC  6E27               	movwf	?___ftdiv+1,c
  4952  0021FE  0E00               	movlw	0
  4953  002200  6E28               	movwf	?___ftdiv+2,c
  4954  002202  0012               	return	
  4955  002204                     l4417:
  4956  002204  0E00               	movlw	0
  4957  002206  6E30               	movwf	___ftdiv@f3,c
  4958  002208  0E00               	movlw	0
  4959  00220A  6E31               	movwf	___ftdiv@f3+1,c
  4960  00220C  0E00               	movlw	0
  4961  00220E  6E32               	movwf	___ftdiv@f3+2,c
  4962  002210  5034               	movf	___ftdiv@sign,w,c
  4963  002212  0F89               	addlw	137
  4964  002214  5E33               	subwf	___ftdiv@exp,f,c
  4965  002216  C028  F034         	movff	___ftdiv@f1+2,___ftdiv@sign
  4966  00221A  502B               	movf	___ftdiv@f2+2,w,c
  4967  00221C  1A34               	xorwf	___ftdiv@sign,f,c
  4968  00221E  0E80               	movlw	128
  4969  002220  1634               	andwf	___ftdiv@sign,f,c
  4970  002222  8E27               	bsf	___ftdiv@f1+1,7,c
  4971  002224  0EFF               	movlw	255
  4972  002226  1626               	andwf	___ftdiv@f1,f,c
  4973  002228  0EFF               	movlw	255
  4974  00222A  1627               	andwf	___ftdiv@f1+1,f,c
  4975  00222C  0E00               	movlw	0
  4976  00222E  1628               	andwf	___ftdiv@f1+2,f,c
  4977  002230  8E2A               	bsf	___ftdiv@f2+1,7,c
  4978  002232  0EFF               	movlw	255
  4979  002234  1629               	andwf	___ftdiv@f2,f,c
  4980  002236  0EFF               	movlw	255
  4981  002238  162A               	andwf	___ftdiv@f2+1,f,c
  4982  00223A  0E00               	movlw	0
  4983  00223C  162B               	andwf	___ftdiv@f2+2,f,c
  4984  00223E  0E18               	movlw	24
  4985  002240  6E2F               	movwf	___ftdiv@cntr,c
  4986  002242                     l4437:
  4987  002242  90D8               	bcf	status,0,c
  4988  002244  3630               	rlcf	___ftdiv@f3,f,c
  4989  002246  3631               	rlcf	___ftdiv@f3+1,f,c
  4990  002248  3632               	rlcf	___ftdiv@f3+2,f,c
  4991  00224A  5029               	movf	___ftdiv@f2,w,c
  4992  00224C  5C26               	subwf	___ftdiv@f1,w,c
  4993  00224E  502A               	movf	___ftdiv@f2+1,w,c
  4994  002250  5827               	subwfb	___ftdiv@f1+1,w,c
  4995  002252  502B               	movf	___ftdiv@f2+2,w,c
  4996  002254  5828               	subwfb	___ftdiv@f1+2,w,c
  4997  002256  A0D8               	btfss	status,0,c
  4998  002258  D007               	goto	l835
  4999  00225A  5029               	movf	___ftdiv@f2,w,c
  5000  00225C  5E26               	subwf	___ftdiv@f1,f,c
  5001  00225E  502A               	movf	___ftdiv@f2+1,w,c
  5002  002260  5A27               	subwfb	___ftdiv@f1+1,f,c
  5003  002262  502B               	movf	___ftdiv@f2+2,w,c
  5004  002264  5A28               	subwfb	___ftdiv@f1+2,f,c
  5005  002266  8030               	bsf	___ftdiv@f3,0,c
  5006  002268                     l835:
  5007  002268  90D8               	bcf	status,0,c
  5008  00226A  3626               	rlcf	___ftdiv@f1,f,c
  5009  00226C  3627               	rlcf	___ftdiv@f1+1,f,c
  5010  00226E  3628               	rlcf	___ftdiv@f1+2,f,c
  5011  002270  2E2F               	decfsz	___ftdiv@cntr,f,c
  5012  002272  D7E7               	goto	l4437
  5013  002274  C030  F012         	movff	___ftdiv@f3,___ftpack@arg
  5014  002278  C031  F013         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5015  00227C  C032  F014         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5016  002280  C033  F015         	movff	___ftdiv@exp,___ftpack@exp
  5017  002284  C034  F016         	movff	___ftdiv@sign,___ftpack@sign
  5018  002288  EC71  F012         	call	___ftpack	;wreg free
  5019  00228C  C012  F026         	movff	?___ftpack,?___ftdiv
  5020  002290  C013  F027         	movff	?___ftpack+1,?___ftdiv+1
  5021  002294  C014  F028         	movff	?___ftpack+2,?___ftdiv+2
  5022  002298  0012               	return	
  5023  00229A                     __end_of___ftdiv:
  5024                           	opt stack 0
  5025                           tblptru	equ	0xFF8
  5026                           postinc0	equ	0xFEE
  5027                           wreg	equ	0xFE8
  5028                           indf2	equ	0xFDF
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function ___ftadd *****************
  5034 ;; Defined at:
  5035 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  f1              3   25[COMRAM] float 
  5038 ;;  f2              3   28[COMRAM] float 
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;  exp1            1   36[COMRAM] unsigned char 
  5041 ;;  exp2            1   35[COMRAM] unsigned char 
  5042 ;;  sign            1   34[COMRAM] unsigned char 
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  3   25[COMRAM] float 
  5045 ;; Registers used:
  5046 ;;		wreg, status,2, status,0, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5052 ;;      Params:         6       0       0       0       0       0       0
  5053 ;;      Locals:         3       0       0       0       0       0       0
  5054 ;;      Temps:          3       0       0       0       0       0       0
  5055 ;;      Totals:        12       0       0       0       0       0       0
  5056 ;;Total ram usage:       12 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    2
  5059 ;; This function calls:
  5060 ;;		___ftpack
  5061 ;; This function is called by:
  5062 ;;		_KalmanFilter_0
  5063 ;;		_KalmanFilter_1
  5064 ;;		_KalmanFilter_2
  5065 ;;		_KalmanFilter_3
  5066 ;;		_KalmanFilter_4
  5067 ;;		_KalmanFilter_5
  5068 ;;		_KalmanFilter_6
  5069 ;;		_KalmanFilter_7
  5070 ;;		_KalmanFilter_8
  5071 ;;		_KalmanFilter_9
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           	psect	text18
  5076  000C26                     __ptext18:
  5077                           	opt stack 0
  5078  000C26                     ___ftadd:
  5079                           	opt stack 26
  5080                           
  5081                           ;incstack = 0
  5082  000C26  C01C  F020         	movff	___ftadd@f1+2,??___ftadd
  5083  000C2A  6A21               	clrf	(??___ftadd+1)& (0+255),c
  5084  000C2C  6A22               	clrf	(??___ftadd+2)& (0+255),c
  5085  000C2E  341B               	rlcf	___ftadd@f1+1,w,c
  5086  000C30  3620               	rlcf	??___ftadd& (0+255),f,c
  5087  000C32  E301               	bnc	u4931
  5088  000C34  8021               	bsf	(??___ftadd+1)& (0+255),0,c
  5089  000C36                     u4931:
  5090  000C36  5020               	movf	??___ftadd,w,c
  5091  000C38  6E25               	movwf	___ftadd@exp1,c
  5092  000C3A  C01F  F020         	movff	___ftadd@f2+2,??___ftadd
  5093  000C3E  6A21               	clrf	(??___ftadd+1)& (0+255),c
  5094  000C40  6A22               	clrf	(??___ftadd+2)& (0+255),c
  5095  000C42  341E               	rlcf	___ftadd@f2+1,w,c
  5096  000C44  3620               	rlcf	??___ftadd& (0+255),f,c
  5097  000C46  E301               	bnc	u4941
  5098  000C48  8021               	bsf	(??___ftadd+1)& (0+255),0,c
  5099  000C4A                     u4941:
  5100  000C4A  5020               	movf	??___ftadd,w,c
  5101  000C4C  6E24               	movwf	___ftadd@exp2,c
  5102  000C4E  5025               	movf	___ftadd@exp1,w,c
  5103  000C50  B4D8               	btfsc	status,2,c
  5104  000C52  D00B               	goto	l800
  5105  000C54  5024               	movf	___ftadd@exp2,w,c
  5106  000C56  5C25               	subwf	___ftadd@exp1,w,c
  5107  000C58  B0D8               	btfsc	status,0,c
  5108  000C5A  D00E               	goto	l4343
  5109  000C5C  5025               	movf	___ftadd@exp1,w,c
  5110  000C5E  0800               	sublw	0
  5111  000C60  2424               	addwf	___ftadd@exp2,w,c
  5112  000C62  6E20               	movwf	??___ftadd& (0+255),c
  5113  000C64  0E18               	movlw	24
  5114  000C66  6420               	cpfsgt	??___ftadd,c
  5115  000C68  D007               	goto	l4343
  5116  000C6A                     l800:
  5117  000C6A  C01D  F01A         	movff	___ftadd@f2,?___ftadd
  5118  000C6E  C01E  F01B         	movff	___ftadd@f2+1,?___ftadd+1
  5119  000C72  C01F  F01C         	movff	___ftadd@f2+2,?___ftadd+2
  5120  000C76  0012               	return	
  5121  000C78                     l4343:
  5122  000C78  5024               	movf	___ftadd@exp2,w,c
  5123  000C7A  B4D8               	btfsc	status,2,c
  5124  000C7C  D00B               	goto	l804
  5125  000C7E  5025               	movf	___ftadd@exp1,w,c
  5126  000C80  5C24               	subwf	___ftadd@exp2,w,c
  5127  000C82  B0D8               	btfsc	status,0,c
  5128  000C84  D00E               	goto	l4349
  5129  000C86  5024               	movf	___ftadd@exp2,w,c
  5130  000C88  0800               	sublw	0
  5131  000C8A  2425               	addwf	___ftadd@exp1,w,c
  5132  000C8C  6E20               	movwf	??___ftadd& (0+255),c
  5133  000C8E  0E18               	movlw	24
  5134  000C90  6420               	cpfsgt	??___ftadd,c
  5135  000C92  D007               	goto	l4349
  5136  000C94                     l804:
  5137  000C94  C01A  F01A         	movff	___ftadd@f1,?___ftadd
  5138  000C98  C01B  F01B         	movff	___ftadd@f1+1,?___ftadd+1
  5139  000C9C  C01C  F01C         	movff	___ftadd@f1+2,?___ftadd+2
  5140  000CA0  0012               	return	
  5141  000CA2                     l4349:
  5142  000CA2  0E06               	movlw	6
  5143  000CA4  6E23               	movwf	___ftadd@sign,c
  5144  000CA6  BE1C               	btfsc	___ftadd@f1+2,7,c
  5145  000CA8  8E23               	bsf	___ftadd@sign,7,c
  5146  000CAA  BE1F               	btfsc	___ftadd@f2+2,7,c
  5147  000CAC  8C23               	bsf	___ftadd@sign,6,c
  5148  000CAE  8E1B               	bsf	___ftadd@f1+1,7,c
  5149  000CB0  0EFF               	movlw	255
  5150  000CB2  161A               	andwf	___ftadd@f1,f,c
  5151  000CB4  0EFF               	movlw	255
  5152  000CB6  161B               	andwf	___ftadd@f1+1,f,c
  5153  000CB8  0E00               	movlw	0
  5154  000CBA  161C               	andwf	___ftadd@f1+2,f,c
  5155  000CBC  8E1E               	bsf	___ftadd@f2+1,7,c
  5156  000CBE  0EFF               	movlw	255
  5157  000CC0  161D               	andwf	___ftadd@f2,f,c
  5158  000CC2  0EFF               	movlw	255
  5159  000CC4  161E               	andwf	___ftadd@f2+1,f,c
  5160  000CC6  0E00               	movlw	0
  5161  000CC8  161F               	andwf	___ftadd@f2+2,f,c
  5162  000CCA  5024               	movf	___ftadd@exp2,w,c
  5163  000CCC  5C25               	subwf	___ftadd@exp1,w,c
  5164  000CCE  B0D8               	btfsc	status,0,c
  5165  000CD0  D01B               	goto	l4375
  5166  000CD2                     l4365:
  5167  000CD2  90D8               	bcf	status,0,c
  5168  000CD4  361D               	rlcf	___ftadd@f2,f,c
  5169  000CD6  361E               	rlcf	___ftadd@f2+1,f,c
  5170  000CD8  361F               	rlcf	___ftadd@f2+2,f,c
  5171  000CDA  0624               	decf	___ftadd@exp2,f,c
  5172  000CDC  5025               	movf	___ftadd@exp1,w,c
  5173  000CDE  1824               	xorwf	___ftadd@exp2,w,c
  5174  000CE0  B4D8               	btfsc	status,2,c
  5175  000CE2  D00D               	goto	l4373
  5176  000CE4  0623               	decf	___ftadd@sign,f,c
  5177  000CE6  C023  F020         	movff	___ftadd@sign,??___ftadd
  5178  000CEA  0E07               	movlw	7
  5179  000CEC  1620               	andwf	??___ftadd,f,c
  5180  000CEE  B4D8               	btfsc	status,2,c
  5181  000CF0  D006               	goto	l4373
  5182  000CF2  D7EF               	goto	l4365
  5183  000CF4                     l4371:
  5184  000CF4  90D8               	bcf	status,0,c
  5185  000CF6  321C               	rrcf	___ftadd@f1+2,f,c
  5186  000CF8  321B               	rrcf	___ftadd@f1+1,f,c
  5187  000CFA  321A               	rrcf	___ftadd@f1,f,c
  5188  000CFC  2A25               	incf	___ftadd@exp1,f,c
  5189  000CFE                     l4373:
  5190  000CFE  5024               	movf	___ftadd@exp2,w,c
  5191  000D00  1825               	xorwf	___ftadd@exp1,w,c
  5192  000D02  B4D8               	btfsc	status,2,c
  5193  000D04  D01F               	goto	l815
  5194  000D06  D7F6               	goto	l4371
  5195  000D08                     l4375:
  5196  000D08  5025               	movf	___ftadd@exp1,w,c
  5197  000D0A  5C24               	subwf	___ftadd@exp2,w,c
  5198  000D0C  B0D8               	btfsc	status,0,c
  5199  000D0E  D01A               	goto	l815
  5200  000D10                     l4377:
  5201  000D10  90D8               	bcf	status,0,c
  5202  000D12  361A               	rlcf	___ftadd@f1,f,c
  5203  000D14  361B               	rlcf	___ftadd@f1+1,f,c
  5204  000D16  361C               	rlcf	___ftadd@f1+2,f,c
  5205  000D18  0625               	decf	___ftadd@exp1,f,c
  5206  000D1A  5025               	movf	___ftadd@exp1,w,c
  5207  000D1C  1824               	xorwf	___ftadd@exp2,w,c
  5208  000D1E  B4D8               	btfsc	status,2,c
  5209  000D20  D00D               	goto	l4385
  5210  000D22  0623               	decf	___ftadd@sign,f,c
  5211  000D24  C023  F020         	movff	___ftadd@sign,??___ftadd
  5212  000D28  0E07               	movlw	7
  5213  000D2A  1620               	andwf	??___ftadd,f,c
  5214  000D2C  B4D8               	btfsc	status,2,c
  5215  000D2E  D006               	goto	l4385
  5216  000D30  D7EF               	goto	l4377
  5217  000D32                     l4383:
  5218  000D32  90D8               	bcf	status,0,c
  5219  000D34  321F               	rrcf	___ftadd@f2+2,f,c
  5220  000D36  321E               	rrcf	___ftadd@f2+1,f,c
  5221  000D38  321D               	rrcf	___ftadd@f2,f,c
  5222  000D3A  2A24               	incf	___ftadd@exp2,f,c
  5223  000D3C                     l4385:
  5224  000D3C  5024               	movf	___ftadd@exp2,w,c
  5225  000D3E  1825               	xorwf	___ftadd@exp1,w,c
  5226  000D40  A4D8               	btfss	status,2,c
  5227  000D42  D7F7               	goto	l4383
  5228  000D44                     l815:
  5229  000D44  AE23               	btfss	___ftadd@sign,7,c
  5230  000D46  D00C               	goto	l824
  5231  000D48  0EFF               	movlw	255
  5232  000D4A  1A1A               	xorwf	___ftadd@f1,f,c
  5233  000D4C  0EFF               	movlw	255
  5234  000D4E  1A1B               	xorwf	___ftadd@f1+1,f,c
  5235  000D50  0EFF               	movlw	255
  5236  000D52  1A1C               	xorwf	___ftadd@f1+2,f,c
  5237  000D54  0E01               	movlw	1
  5238  000D56  261A               	addwf	___ftadd@f1,f,c
  5239  000D58  0E00               	movlw	0
  5240  000D5A  221B               	addwfc	___ftadd@f1+1,f,c
  5241  000D5C  0E00               	movlw	0
  5242  000D5E  221C               	addwfc	___ftadd@f1+2,f,c
  5243  000D60                     l824:
  5244  000D60  AC23               	btfss	___ftadd@sign,6,c
  5245  000D62  D00C               	goto	l4391
  5246  000D64  0EFF               	movlw	255
  5247  000D66  1A1D               	xorwf	___ftadd@f2,f,c
  5248  000D68  0EFF               	movlw	255
  5249  000D6A  1A1E               	xorwf	___ftadd@f2+1,f,c
  5250  000D6C  0EFF               	movlw	255
  5251  000D6E  1A1F               	xorwf	___ftadd@f2+2,f,c
  5252  000D70  0E01               	movlw	1
  5253  000D72  261D               	addwf	___ftadd@f2,f,c
  5254  000D74  0E00               	movlw	0
  5255  000D76  221E               	addwfc	___ftadd@f2+1,f,c
  5256  000D78  0E00               	movlw	0
  5257  000D7A  221F               	addwfc	___ftadd@f2+2,f,c
  5258  000D7C                     l4391:
  5259  000D7C  0E00               	movlw	0
  5260  000D7E  6E23               	movwf	___ftadd@sign,c
  5261  000D80  501A               	movf	___ftadd@f1,w,c
  5262  000D82  261D               	addwf	___ftadd@f2,f,c
  5263  000D84  501B               	movf	___ftadd@f1+1,w,c
  5264  000D86  221E               	addwfc	___ftadd@f2+1,f,c
  5265  000D88  501C               	movf	___ftadd@f1+2,w,c
  5266  000D8A  221F               	addwfc	___ftadd@f2+2,f,c
  5267  000D8C  AE1F               	btfss	___ftadd@f2+2,7,c
  5268  000D8E  D00E               	goto	l4401
  5269  000D90  0EFF               	movlw	255
  5270  000D92  1A1D               	xorwf	___ftadd@f2,f,c
  5271  000D94  0EFF               	movlw	255
  5272  000D96  1A1E               	xorwf	___ftadd@f2+1,f,c
  5273  000D98  0EFF               	movlw	255
  5274  000D9A  1A1F               	xorwf	___ftadd@f2+2,f,c
  5275  000D9C  0E01               	movlw	1
  5276  000D9E  261D               	addwf	___ftadd@f2,f,c
  5277  000DA0  0E00               	movlw	0
  5278  000DA2  221E               	addwfc	___ftadd@f2+1,f,c
  5279  000DA4  0E00               	movlw	0
  5280  000DA6  221F               	addwfc	___ftadd@f2+2,f,c
  5281  000DA8  0E01               	movlw	1
  5282  000DAA  6E23               	movwf	___ftadd@sign,c
  5283  000DAC                     l4401:
  5284  000DAC  C01D  F012         	movff	___ftadd@f2,___ftpack@arg
  5285  000DB0  C01E  F013         	movff	___ftadd@f2+1,___ftpack@arg+1
  5286  000DB4  C01F  F014         	movff	___ftadd@f2+2,___ftpack@arg+2
  5287  000DB8  C025  F015         	movff	___ftadd@exp1,___ftpack@exp
  5288  000DBC  C023  F016         	movff	___ftadd@sign,___ftpack@sign
  5289  000DC0  EC71  F012         	call	___ftpack	;wreg free
  5290  000DC4  C012  F01A         	movff	?___ftpack,?___ftadd
  5291  000DC8  C013  F01B         	movff	?___ftpack+1,?___ftadd+1
  5292  000DCC  C014  F01C         	movff	?___ftpack+2,?___ftadd+2
  5293  000DD0  0012               	return	
  5294  000DD2                     __end_of___ftadd:
  5295                           	opt stack 0
  5296                           tblptru	equ	0xFF8
  5297                           postinc0	equ	0xFEE
  5298                           wreg	equ	0xFE8
  5299                           indf2	equ	0xFDF
  5300                           fsr2h	equ	0xFDA
  5301                           fsr2l	equ	0xFD9
  5302                           status	equ	0xFD8
  5303                           
  5304 ;; *************** function ___ftpack *****************
  5305 ;; Defined at:
  5306 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  arg             3   17[COMRAM] unsigned um
  5309 ;;  exp             1   20[COMRAM] unsigned char 
  5310 ;;  sign            1   21[COMRAM] unsigned char 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  3   17[COMRAM] float 
  5315 ;; Registers used:
  5316 ;;		wreg, status,2, status,0
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5322 ;;      Params:         5       0       0       0       0       0       0
  5323 ;;      Locals:         0       0       0       0       0       0       0
  5324 ;;      Temps:          3       0       0       0       0       0       0
  5325 ;;      Totals:         8       0       0       0       0       0       0
  5326 ;;Total ram usage:        8 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    1
  5329 ;; This function calls:
  5330 ;;		Nothing
  5331 ;; This function is called by:
  5332 ;;		___ftadd
  5333 ;;		___ftdiv
  5334 ;;		___ftmul
  5335 ;;		___lwtoft
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text19
  5340  0024E2                     __ptext19:
  5341                           	opt stack 0
  5342  0024E2                     ___ftpack:
  5343                           	opt stack 27
  5344                           
  5345                           ;incstack = 0
  5346  0024E2  5015               	movf	___ftpack@exp,w,c
  5347  0024E4  B4D8               	btfsc	status,2,c
  5348  0024E6  D005               	goto	l3885
  5349  0024E8  5012               	movf	___ftpack@arg,w,c
  5350  0024EA  1013               	iorwf	___ftpack@arg+1,w,c
  5351  0024EC  1014               	iorwf	___ftpack@arg+2,w,c
  5352  0024EE  A4D8               	btfss	status,2,c
  5353  0024F0  D00C               	goto	l3891
  5354  0024F2                     l3885:
  5355  0024F2  0E00               	movlw	0
  5356  0024F4  6E12               	movwf	?___ftpack,c
  5357  0024F6  0E00               	movlw	0
  5358  0024F8  6E13               	movwf	?___ftpack+1,c
  5359  0024FA  0E00               	movlw	0
  5360  0024FC  6E14               	movwf	?___ftpack+2,c
  5361  0024FE  0012               	return	
  5362  002500                     l3889:
  5363  002500  2A15               	incf	___ftpack@exp,f,c
  5364  002502  90D8               	bcf	status,0,c
  5365  002504  3214               	rrcf	___ftpack@arg+2,f,c
  5366  002506  3213               	rrcf	___ftpack@arg+1,f,c
  5367  002508  3212               	rrcf	___ftpack@arg,f,c
  5368  00250A                     l3891:
  5369  00250A  0E00               	movlw	0
  5370  00250C  1412               	andwf	___ftpack@arg,w,c
  5371  00250E  6E17               	movwf	??___ftpack& (0+255),c
  5372  002510  0E00               	movlw	0
  5373  002512  1413               	andwf	___ftpack@arg+1,w,c
  5374  002514  6E18               	movwf	(??___ftpack+1)& (0+255),c
  5375  002516  0EFE               	movlw	254
  5376  002518  1414               	andwf	___ftpack@arg+2,w,c
  5377  00251A  6E19               	movwf	(??___ftpack+2)& (0+255),c
  5378  00251C  5017               	movf	??___ftpack,w,c
  5379  00251E  1018               	iorwf	??___ftpack+1,w,c
  5380  002520  1019               	iorwf	??___ftpack+2,w,c
  5381  002522  B4D8               	btfsc	status,2,c
  5382  002524  D00C               	goto	l3897
  5383  002526  D7EC               	goto	l3889
  5384  002528                     l3893:
  5385  002528  2A15               	incf	___ftpack@exp,f,c
  5386  00252A  0E01               	movlw	1
  5387  00252C  2612               	addwf	___ftpack@arg,f,c
  5388  00252E  0E00               	movlw	0
  5389  002530  2213               	addwfc	___ftpack@arg+1,f,c
  5390  002532  0E00               	movlw	0
  5391  002534  2214               	addwfc	___ftpack@arg+2,f,c
  5392  002536  90D8               	bcf	status,0,c
  5393  002538  3214               	rrcf	___ftpack@arg+2,f,c
  5394  00253A  3213               	rrcf	___ftpack@arg+1,f,c
  5395  00253C  3212               	rrcf	___ftpack@arg,f,c
  5396  00253E                     l3897:
  5397  00253E  0E00               	movlw	0
  5398  002540  1412               	andwf	___ftpack@arg,w,c
  5399  002542  6E17               	movwf	??___ftpack& (0+255),c
  5400  002544  0E00               	movlw	0
  5401  002546  1413               	andwf	___ftpack@arg+1,w,c
  5402  002548  6E18               	movwf	(??___ftpack+1)& (0+255),c
  5403  00254A  0EFF               	movlw	255
  5404  00254C  1414               	andwf	___ftpack@arg+2,w,c
  5405  00254E  6E19               	movwf	(??___ftpack+2)& (0+255),c
  5406  002550  5017               	movf	??___ftpack,w,c
  5407  002552  1018               	iorwf	??___ftpack+1,w,c
  5408  002554  1019               	iorwf	??___ftpack+2,w,c
  5409  002556  B4D8               	btfsc	status,2,c
  5410  002558  D006               	goto	l3901
  5411  00255A  D7E6               	goto	l3893
  5412  00255C                     l3899:
  5413  00255C  0615               	decf	___ftpack@exp,f,c
  5414  00255E  90D8               	bcf	status,0,c
  5415  002560  3612               	rlcf	___ftpack@arg,f,c
  5416  002562  3613               	rlcf	___ftpack@arg+1,f,c
  5417  002564  3614               	rlcf	___ftpack@arg+2,f,c
  5418  002566                     l3901:
  5419  002566  BE13               	btfsc	___ftpack@arg+1,7,c
  5420  002568  D003               	goto	l777
  5421  00256A  0E02               	movlw	2
  5422  00256C  6015               	cpfslt	___ftpack@exp,c
  5423  00256E  D7F6               	goto	l3899
  5424  002570                     l777:
  5425  002570  A015               	btfss	___ftpack@exp,0,c
  5426  002572  9E13               	bcf	___ftpack@arg+1,7,c
  5427  002574  90D8               	bcf	status,0,c
  5428  002576  3215               	rrcf	___ftpack@exp,f,c
  5429  002578  5015               	movf	___ftpack@exp,w,c
  5430  00257A  1214               	iorwf	___ftpack@arg+2,f,c
  5431  00257C  5016               	movf	___ftpack@sign,w,c
  5432  00257E  A4D8               	btfss	status,2,c
  5433  002580  8E14               	bsf	___ftpack@arg+2,7,c
  5434  002582  C012  F012         	movff	___ftpack@arg,?___ftpack
  5435  002586  C013  F013         	movff	___ftpack@arg+1,?___ftpack+1
  5436  00258A  C014  F014         	movff	___ftpack@arg+2,?___ftpack+2
  5437  00258E  0012               	return	
  5438  002590                     __end_of___ftpack:
  5439                           	opt stack 0
  5440                           tblptru	equ	0xFF8
  5441                           postinc0	equ	0xFEE
  5442                           wreg	equ	0xFE8
  5443                           indf2	equ	0xFDF
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function _timer_intrrupt_initinal *****************
  5449 ;; Defined at:
  5450 ;;		line 35 in file "harwave/initial.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;		None
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  1    wreg      void 
  5457 ;; Registers used:
  5458 ;;		None
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5464 ;;      Params:         0       0       0       0       0       0       0
  5465 ;;      Locals:         0       0       0       0       0       0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0
  5467 ;;      Totals:         0       0       0       0       0       0       0
  5468 ;;Total ram usage:        0 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    1
  5471 ;; This function calls:
  5472 ;;		Nothing
  5473 ;; This function is called by:
  5474 ;;		_main
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text20
  5479  002BEE                     __ptext20:
  5480                           	opt stack 0
  5481  002BEE                     _timer_intrrupt_initinal:
  5482                           	opt stack 29
  5483                           
  5484                           ;initial.c: 37: RCONbits.IPEN=1;
  5485                           
  5486                           ;incstack = 0
  5487  002BEE  8ED0               	bsf	4048,7,c	;volatile
  5488                           
  5489                           ;initial.c: 38: INTCONbits.GIE=1;
  5490  002BF0  8EF2               	bsf	intcon,7,c	;volatile
  5491                           
  5492                           ;initial.c: 39: INTCONbits.PEIE=1;
  5493  002BF2  8CF2               	bsf	intcon,6,c	;volatile
  5494                           
  5495                           ;initial.c: 40: INTCONbits.TMR0IE=1;
  5496  002BF4  8AF2               	bsf	intcon,5,c	;volatile
  5497                           
  5498                           ;initial.c: 41: INTCONbits.TMR0IF=0;
  5499  002BF6  94F2               	bcf	intcon,2,c	;volatile
  5500                           
  5501                           ;initial.c: 42: PIE1bits.TMR2IE=0;
  5502  002BF8  929D               	bcf	3997,1,c	;volatile
  5503                           
  5504                           ;initial.c: 43: PIR1bits.TMR2IF=0;
  5505  002BFA  929E               	bcf	3998,1,c	;volatile
  5506  002BFC  0012               	return		;funcret
  5507  002BFE                     __end_of_timer_intrrupt_initinal:
  5508                           	opt stack 0
  5509                           tblptru	equ	0xFF8
  5510                           intcon	equ	0xFF2
  5511                           postinc0	equ	0xFEE
  5512                           wreg	equ	0xFE8
  5513                           indf2	equ	0xFDF
  5514                           fsr2h	equ	0xFDA
  5515                           fsr2l	equ	0xFD9
  5516                           status	equ	0xFD8
  5517                           
  5518 ;; *************** function _timer_0_initial *****************
  5519 ;; Defined at:
  5520 ;;		line 24 in file "harwave/initial.c"
  5521 ;; Parameters:    Size  Location     Type
  5522 ;;		None
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;		None
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  1    wreg      void 
  5527 ;; Registers used:
  5528 ;;		None
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5534 ;;      Params:         0       0       0       0       0       0       0
  5535 ;;      Locals:         0       0       0       0       0       0       0
  5536 ;;      Temps:          0       0       0       0       0       0       0
  5537 ;;      Totals:         0       0       0       0       0       0       0
  5538 ;;Total ram usage:        0 bytes
  5539 ;; Hardware stack levels used:    1
  5540 ;; Hardware stack levels required when called:    1
  5541 ;; This function calls:
  5542 ;;		Nothing
  5543 ;; This function is called by:
  5544 ;;		_main
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           	psect	text21
  5549  002BFE                     __ptext21:
  5550                           	opt stack 0
  5551  002BFE                     _timer_0_initial:
  5552                           	opt stack 29
  5553                           
  5554                           ;initial.c: 27: T0CONbits.T08BIT=1;
  5555                           
  5556                           ;incstack = 0
  5557  002BFE  8CD5               	bsf	4053,6,c	;volatile
  5558                           
  5559                           ;initial.c: 28: T0CONbits.T0CS=0;
  5560  002C00  9AD5               	bcf	4053,5,c	;volatile
  5561                           
  5562                           ;initial.c: 29: T0CONbits.PSA=0;
  5563  002C02  96D5               	bcf	4053,3,c	;volatile
  5564                           
  5565                           ;initial.c: 30: T0CONbits.T0PS2=1;
  5566  002C04  84D5               	bsf	4053,2,c	;volatile
  5567                           
  5568                           ;initial.c: 31: T0CONbits.T0PS1=0;
  5569  002C06  92D5               	bcf	4053,1,c	;volatile
  5570                           
  5571                           ;initial.c: 32: T0CONbits.T0PS0=1;
  5572  002C08  80D5               	bsf	4053,0,c	;volatile
  5573                           
  5574                           ;initial.c: 33: T0CONbits.TMR0ON=1;
  5575  002C0A  8ED5               	bsf	4053,7,c	;volatile
  5576  002C0C  0012               	return		;funcret
  5577  002C0E                     __end_of_timer_0_initial:
  5578                           	opt stack 0
  5579                           tblptru	equ	0xFF8
  5580                           intcon	equ	0xFF2
  5581                           postinc0	equ	0xFEE
  5582                           wreg	equ	0xFE8
  5583                           indf2	equ	0xFDF
  5584                           fsr2h	equ	0xFDA
  5585                           fsr2l	equ	0xFD9
  5586                           status	equ	0xFD8
  5587                           
  5588 ;; *************** function _oclillator_initial *****************
  5589 ;; Defined at:
  5590 ;;		line 11 in file "harwave/initial.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;		None
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;		None
  5595 ;; Return value:  Size  Location     Type
  5596 ;;                  1    wreg      void 
  5597 ;; Registers used:
  5598 ;;		None
  5599 ;; Tracked objects:
  5600 ;;		On entry : 0/0
  5601 ;;		On exit  : 0/0
  5602 ;;		Unchanged: 0/0
  5603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5604 ;;      Params:         0       0       0       0       0       0       0
  5605 ;;      Locals:         0       0       0       0       0       0       0
  5606 ;;      Temps:          0       0       0       0       0       0       0
  5607 ;;      Totals:         0       0       0       0       0       0       0
  5608 ;;Total ram usage:        0 bytes
  5609 ;; Hardware stack levels used:    1
  5610 ;; Hardware stack levels required when called:    1
  5611 ;; This function calls:
  5612 ;;		Nothing
  5613 ;; This function is called by:
  5614 ;;		_main
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           	psect	text22
  5619  002C0E                     __ptext22:
  5620                           	opt stack 0
  5621  002C0E                     _oclillator_initial:
  5622                           	opt stack 29
  5623                           
  5624                           ;initial.c: 13: OSCCONbits.IOFS=0;
  5625                           
  5626                           ;incstack = 0
  5627  002C0E  94D3               	bcf	4051,2,c	;volatile
  5628                           
  5629                           ;initial.c: 14: OSCCONbits.SCS0=0;
  5630  002C10  90D3               	bcf	4051,0,c	;volatile
  5631                           
  5632                           ;initial.c: 15: OSCCONbits.SCS1=0;
  5633  002C12  92D3               	bcf	4051,1,c	;volatile
  5634  002C14  0012               	return		;funcret
  5635  002C16                     __end_of_oclillator_initial:
  5636                           	opt stack 0
  5637                           tblptru	equ	0xFF8
  5638                           intcon	equ	0xFF2
  5639                           postinc0	equ	0xFEE
  5640                           wreg	equ	0xFE8
  5641                           indf2	equ	0xFDF
  5642                           fsr2h	equ	0xFDA
  5643                           fsr2l	equ	0xFD9
  5644                           status	equ	0xFD8
  5645                           
  5646 ;; *************** function _initial_UART *****************
  5647 ;; Defined at:
  5648 ;;		line 36 in file "harwave/UART.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;		None
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;		None
  5653 ;; Return value:  Size  Location     Type
  5654 ;;                  1    wreg      void 
  5655 ;; Registers used:
  5656 ;;		wreg, status,2
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/0
  5659 ;;		On exit  : 0/0
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5662 ;;      Params:         0       0       0       0       0       0       0
  5663 ;;      Locals:         0       0       0       0       0       0       0
  5664 ;;      Temps:          0       0       0       0       0       0       0
  5665 ;;      Totals:         0       0       0       0       0       0       0
  5666 ;;Total ram usage:        0 bytes
  5667 ;; Hardware stack levels used:    1
  5668 ;; Hardware stack levels required when called:    1
  5669 ;; This function calls:
  5670 ;;		Nothing
  5671 ;; This function is called by:
  5672 ;;		_main
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text23
  5677  002B6A                     __ptext23:
  5678                           	opt stack 0
  5679  002B6A                     _initial_UART:
  5680                           	opt stack 29
  5681                           
  5682                           ;UART.c: 37: TXSTAbits.SYNC=0;
  5683                           
  5684                           ;incstack = 0
  5685  002B6A  98AC               	bcf	4012,4,c	;volatile
  5686                           
  5687                           ;UART.c: 38: TXSTAbits.TX9=0;
  5688  002B6C  9CAC               	bcf	4012,6,c	;volatile
  5689                           
  5690                           ;UART.c: 39: RCSTAbits.SPEN=1;
  5691  002B6E  8EAB               	bsf	4011,7,c	;volatile
  5692                           
  5693                           ;UART.c: 40: PIE1bits.TX1IE=0;
  5694  002B70  989D               	bcf	3997,4,c	;volatile
  5695                           
  5696                           ;UART.c: 41: TXSTAbits.TXEN=1;
  5697  002B72  8AAC               	bsf	4012,5,c	;volatile
  5698                           
  5699                           ;UART.c: 43: INTCONbits.GIE=1;
  5700  002B74  8EF2               	bsf	intcon,7,c	;volatile
  5701                           
  5702                           ;UART.c: 44: INTCONbits.PEIE=1;
  5703  002B76  8CF2               	bsf	intcon,6,c	;volatile
  5704                           
  5705                           ;UART.c: 45: RCSTAbits.CREN=1;
  5706  002B78  88AB               	bsf	4011,4,c	;volatile
  5707                           
  5708                           ;UART.c: 46: PIE1bits.RCIE=1;
  5709  002B7A  8A9D               	bsf	3997,5,c	;volatile
  5710                           
  5711                           ;UART.c: 47: RCSTAbits.RC9 = 0;
  5712  002B7C  9CAB               	bcf	4011,6,c	;volatile
  5713                           
  5714                           ;UART.c: 48: TXSTAbits.BRGH=1;
  5715  002B7E  84AC               	bsf	4012,2,c	;volatile
  5716                           
  5717                           ;UART.c: 49: BAUDCONbits.BRG16=1;
  5718  002B80  86B8               	bsf	4024,3,c	;volatile
  5719                           
  5720                           ;UART.c: 50: SPBRGH=0;
  5721  002B82  0E00               	movlw	0
  5722  002B84  6EB0               	movwf	4016,c	;volatile
  5723                           
  5724                           ;UART.c: 51: SPBRG=86;
  5725  002B86  0E56               	movlw	86
  5726  002B88  6EAF               	movwf	4015,c	;volatile
  5727  002B8A  0012               	return		;funcret
  5728  002B8C                     __end_of_initial_UART:
  5729                           	opt stack 0
  5730                           tblptru	equ	0xFF8
  5731                           intcon	equ	0xFF2
  5732                           postinc0	equ	0xFEE
  5733                           wreg	equ	0xFE8
  5734                           indf2	equ	0xFDF
  5735                           fsr2h	equ	0xFDA
  5736                           fsr2l	equ	0xFD9
  5737                           status	equ	0xFD8
  5738                           
  5739 ;; *************** function _adc_initial *****************
  5740 ;; Defined at:
  5741 ;;		line 46 in file "harwave/initial.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;		None
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		None
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5755 ;;      Params:         0       0       0       0       0       0       0
  5756 ;;      Locals:         0       0       0       0       0       0       0
  5757 ;;      Temps:          0       0       0       0       0       0       0
  5758 ;;      Totals:         0       0       0       0       0       0       0
  5759 ;;Total ram usage:        0 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    1
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_main
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text24
  5770  002AAE                     __ptext24:
  5771                           	opt stack 0
  5772  002AAE                     _adc_initial:
  5773                           	opt stack 29
  5774                           
  5775                           ;initial.c: 47: ADCON0bits.ADON=1;
  5776                           
  5777                           ;incstack = 0
  5778  002AAE  80C2               	bsf	4034,0,c	;volatile
  5779                           
  5780                           ;initial.c: 48: ADCON1bits.VCFG1=0;
  5781  002AB0  9AC1               	bcf	4033,5,c	;volatile
  5782                           
  5783                           ;initial.c: 49: ADCON1bits.VCFG0=0;
  5784  002AB2  98C1               	bcf	4033,4,c	;volatile
  5785                           
  5786                           ;initial.c: 50: ADCON1bits.PCFG3=0;
  5787  002AB4  96C1               	bcf	4033,3,c	;volatile
  5788                           
  5789                           ;initial.c: 51: ADCON1bits.PCFG2=1;
  5790  002AB6  84C1               	bsf	4033,2,c	;volatile
  5791                           
  5792                           ;initial.c: 52: ADCON1bits.PCFG1=0;
  5793  002AB8  92C1               	bcf	4033,1,c	;volatile
  5794                           
  5795                           ;initial.c: 53: ADCON1bits.PCFG0=1;
  5796  002ABA  80C1               	bsf	4033,0,c	;volatile
  5797                           
  5798                           ;initial.c: 54: ADCON0bits.CHS3=0;
  5799  002ABC  9AC2               	bcf	4034,5,c	;volatile
  5800                           
  5801                           ;initial.c: 55: ADCON0bits.CHS2=0;
  5802  002ABE  98C2               	bcf	4034,4,c	;volatile
  5803                           
  5804                           ;initial.c: 56: ADCON0bits.CHS1=0;
  5805  002AC0  96C2               	bcf	4034,3,c	;volatile
  5806                           
  5807                           ;initial.c: 57: ADCON0bits.CHS0=0;
  5808  002AC2  94C2               	bcf	4034,2,c	;volatile
  5809                           
  5810                           ;initial.c: 58: ADCON2bits.ADFM=0;
  5811  002AC4  9EC0               	bcf	4032,7,c	;volatile
  5812                           
  5813                           ;initial.c: 59: ADCON2bits.ACQT2=1;
  5814  002AC6  8AC0               	bsf	4032,5,c	;volatile
  5815                           
  5816                           ;initial.c: 60: ADCON2bits.ACQT1=1;
  5817  002AC8  88C0               	bsf	4032,4,c	;volatile
  5818                           
  5819                           ;initial.c: 61: ADCON2bits.ACQT0=1;
  5820  002ACA  86C0               	bsf	4032,3,c	;volatile
  5821                           
  5822                           ;initial.c: 62: ADCON2bits.ADCS2=0;
  5823  002ACC  94C0               	bcf	4032,2,c	;volatile
  5824                           
  5825                           ;initial.c: 63: ADCON2bits.ADCS1=1;
  5826  002ACE  82C0               	bsf	4032,1,c	;volatile
  5827                           
  5828                           ;initial.c: 64: ADCON2bits.ADCS0=0;
  5829  002AD0  90C0               	bcf	4032,0,c	;volatile
  5830                           
  5831                           ;initial.c: 65: PIE1bits.ADIE=1;
  5832  002AD2  8C9D               	bsf	3997,6,c	;volatile
  5833  002AD4  0012               	return		;funcret
  5834  002AD6                     __end_of_adc_initial:
  5835                           	opt stack 0
  5836                           tblptru	equ	0xFF8
  5837                           intcon	equ	0xFF2
  5838                           postinc0	equ	0xFEE
  5839                           wreg	equ	0xFE8
  5840                           indf2	equ	0xFDF
  5841                           fsr2h	equ	0xFDA
  5842                           fsr2l	equ	0xFD9
  5843                           status	equ	0xFD8
  5844                           
  5845 ;; *************** function ___awmod *****************
  5846 ;; Defined at:
  5847 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  dividend        2   17[COMRAM] int 
  5850 ;;  divisor         2   19[COMRAM] int 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  sign            1   22[COMRAM] unsigned char 
  5853 ;;  counter         1   21[COMRAM] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  2   17[COMRAM] int 
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5863 ;;      Params:         4       0       0       0       0       0       0
  5864 ;;      Locals:         2       0       0       0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0
  5866 ;;      Totals:         6       0       0       0       0       0       0
  5867 ;;Total ram usage:        6 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    1
  5870 ;; This function calls:
  5871 ;;		Nothing
  5872 ;; This function is called by:
  5873 ;;		_main
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text25
  5878  002818                     __ptext25:
  5879                           	opt stack 0
  5880  002818                     ___awmod:
  5881                           	opt stack 29
  5882                           
  5883                           ;incstack = 0
  5884  002818  0E00               	movlw	0
  5885  00281A  6E17               	movwf	___awmod@sign,c
  5886  00281C  AE13               	btfss	___awmod@dividend+1,7,c
  5887  00281E  D006               	goto	l3615
  5888  002820  6C12               	negf	___awmod@dividend,c
  5889  002822  1E13               	comf	___awmod@dividend+1,f,c
  5890  002824  B0D8               	btfsc	status,0,c
  5891  002826  2A13               	incf	___awmod@dividend+1,f,c
  5892  002828  0E01               	movlw	1
  5893  00282A  6E17               	movwf	___awmod@sign,c
  5894  00282C                     l3615:
  5895  00282C  AE15               	btfss	___awmod@divisor+1,7,c
  5896  00282E  D004               	goto	l3619
  5897  002830  6C14               	negf	___awmod@divisor,c
  5898  002832  1E15               	comf	___awmod@divisor+1,f,c
  5899  002834  B0D8               	btfsc	status,0,c
  5900  002836  2A15               	incf	___awmod@divisor+1,f,c
  5901  002838                     l3619:
  5902  002838  5014               	movf	___awmod@divisor,w,c
  5903  00283A  1015               	iorwf	___awmod@divisor+1,w,c
  5904  00283C  B4D8               	btfsc	status,2,c
  5905  00283E  D018               	goto	l3635
  5906  002840  0E01               	movlw	1
  5907  002842  6E16               	movwf	___awmod@counter,c
  5908  002844  D004               	goto	l3625
  5909  002846                     l3623:
  5910  002846  90D8               	bcf	status,0,c
  5911  002848  3614               	rlcf	___awmod@divisor,f,c
  5912  00284A  3615               	rlcf	___awmod@divisor+1,f,c
  5913  00284C  2A16               	incf	___awmod@counter,f,c
  5914  00284E                     l3625:
  5915  00284E  AE15               	btfss	___awmod@divisor+1,7,c
  5916  002850  D7FA               	goto	l3623
  5917  002852                     l3627:
  5918  002852  5014               	movf	___awmod@divisor,w,c
  5919  002854  5C12               	subwf	___awmod@dividend,w,c
  5920  002856  5015               	movf	___awmod@divisor+1,w,c
  5921  002858  5813               	subwfb	___awmod@dividend+1,w,c
  5922  00285A  A0D8               	btfss	status,0,c
  5923  00285C  D004               	goto	l3631
  5924  00285E  5014               	movf	___awmod@divisor,w,c
  5925  002860  5E12               	subwf	___awmod@dividend,f,c
  5926  002862  5015               	movf	___awmod@divisor+1,w,c
  5927  002864  5A13               	subwfb	___awmod@dividend+1,f,c
  5928  002866                     l3631:
  5929  002866  90D8               	bcf	status,0,c
  5930  002868  3215               	rrcf	___awmod@divisor+1,f,c
  5931  00286A  3214               	rrcf	___awmod@divisor,f,c
  5932  00286C  2E16               	decfsz	___awmod@counter,f,c
  5933  00286E  D7F1               	goto	l3627
  5934  002870                     l3635:
  5935  002870  5017               	movf	___awmod@sign,w,c
  5936  002872  B4D8               	btfsc	status,2,c
  5937  002874  D004               	goto	l3639
  5938  002876  6C12               	negf	___awmod@dividend,c
  5939  002878  1E13               	comf	___awmod@dividend+1,f,c
  5940  00287A  B0D8               	btfsc	status,0,c
  5941  00287C  2A13               	incf	___awmod@dividend+1,f,c
  5942  00287E                     l3639:
  5943  00287E  C012  F012         	movff	___awmod@dividend,?___awmod
  5944  002882  C013  F013         	movff	___awmod@dividend+1,?___awmod+1
  5945  002886  0012               	return	
  5946  002888                     __end_of___awmod:
  5947                           	opt stack 0
  5948                           tblptru	equ	0xFF8
  5949                           intcon	equ	0xFF2
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           indf2	equ	0xFDF
  5953                           fsr2h	equ	0xFDA
  5954                           fsr2l	equ	0xFD9
  5955                           status	equ	0xFD8
  5956                           
  5957 ;; *************** function _GPIO_initial *****************
  5958 ;; Defined at:
  5959 ;;		line 3 in file "harwave/initial.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;		None
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;		None
  5964 ;; Return value:  Size  Location     Type
  5965 ;;                  1    wreg      void 
  5966 ;; Registers used:
  5967 ;;		wreg, status,2
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5973 ;;      Params:         0       0       0       0       0       0       0
  5974 ;;      Locals:         0       0       0       0       0       0       0
  5975 ;;      Temps:          0       0       0       0       0       0       0
  5976 ;;      Totals:         0       0       0       0       0       0       0
  5977 ;;Total ram usage:        0 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    1
  5980 ;; This function calls:
  5981 ;;		Nothing
  5982 ;; This function is called by:
  5983 ;;		_main
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           	psect	text26
  5988  002BDC                     __ptext26:
  5989                           	opt stack 0
  5990  002BDC                     _GPIO_initial:
  5991                           	opt stack 29
  5992                           
  5993                           ;initial.c: 6: TRISD = 0X00;
  5994                           
  5995                           ;incstack = 0
  5996  002BDC  0E00               	movlw	0
  5997  002BDE  6E95               	movwf	3989,c	;volatile
  5998                           
  5999                           ;initial.c: 7: PORTD = 0X00;
  6000  002BE0  0E00               	movlw	0
  6001  002BE2  6E83               	movwf	3971,c	;volatile
  6002                           
  6003                           ;initial.c: 8: LATD =0X00;
  6004  002BE4  0E00               	movlw	0
  6005  002BE6  6E8C               	movwf	3980,c	;volatile
  6006                           
  6007                           ;initial.c: 9: TRISC = 0xF0;
  6008  002BE8  0EF0               	movlw	240
  6009  002BEA  6E94               	movwf	3988,c	;volatile
  6010  002BEC  0012               	return		;funcret
  6011  002BEE                     __end_of_GPIO_initial:
  6012                           	opt stack 0
  6013                           tblptru	equ	0xFF8
  6014                           intcon	equ	0xFF2
  6015                           postinc0	equ	0xFEE
  6016                           wreg	equ	0xFE8
  6017                           indf2	equ	0xFDF
  6018                           fsr2h	equ	0xFDA
  6019                           fsr2l	equ	0xFD9
  6020                           status	equ	0xFD8
  6021                           
  6022 ;; *************** function _ESP8266_Server *****************
  6023 ;; Defined at:
  6024 ;;		line 192 in file "harwave/UART.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;		None
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;		None
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  1    wreg      void 
  6031 ;; Registers used:
  6032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6038 ;;      Params:         0       0       0       0       0       0       0
  6039 ;;      Locals:         0       0       0       0       0       0       0
  6040 ;;      Temps:          0       0       0       0       0       0       0
  6041 ;;      Totals:         0       0       0       0       0       0       0
  6042 ;;Total ram usage:        0 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    6
  6045 ;; This function calls:
  6046 ;;		_AP_MODE
  6047 ;;		_ESP8266_AT_Test
  6048 ;;		_ESP8266_BuildAP
  6049 ;;		_ESP8266_Cmd
  6050 ;;		_ESP8266_Rst
  6051 ;; This function is called by:
  6052 ;;		_main
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           	psect	text27
  6057  00229A                     __ptext27:
  6058                           	opt stack 0
  6059  00229A                     _ESP8266_Server:
  6060                           	opt stack 24
  6061                           
  6062                           ;UART.c: 193: ESP8266_AT_Test () ;
  6063                           
  6064                           ;incstack = 0
  6065  00229A  EC41  F015         	call	_ESP8266_AT_Test	;wreg free
  6066                           
  6067                           ;UART.c: 194: ESP8266_Rst ( );
  6068  00229E  EC6B  F015         	call	_ESP8266_Rst	;wreg free
  6069                           
  6070                           ;UART.c: 195: AP_MODE();
  6071  0022A2  EC11  F015         	call	_AP_MODE	;wreg free
  6072  0022A6                     l4853:
  6073  0022A6  0EED               	movlw	low STR_36
  6074  0022A8  6E41               	movwf	ESP8266_BuildAP@pSSID,c
  6075  0022AA  0E7F               	movlw	high STR_36
  6076  0022AC  6E42               	movwf	ESP8266_BuildAP@pSSID+1,c
  6077  0022AE  0E8E               	movlw	low STR_37
  6078  0022B0  6E43               	movwf	ESP8266_BuildAP@pPassWord,c
  6079  0022B2  0E7F               	movlw	high STR_37
  6080  0022B4  6E44               	movwf	ESP8266_BuildAP@pPassWord+1,c
  6081  0022B6  0EFC               	movlw	low STR_38
  6082  0022B8  6E45               	movwf	ESP8266_BuildAP@enunPsdMode,c
  6083  0022BA  0E7F               	movlw	high STR_38
  6084  0022BC  6E46               	movwf	ESP8266_BuildAP@enunPsdMode+1,c
  6085  0022BE  EC44  F014         	call	_ESP8266_BuildAP	;wreg free
  6086  0022C2  0900               	iorlw	0
  6087  0022C4  B4D8               	btfsc	status,2,c
  6088  0022C6  D7EF               	goto	l4853
  6089  0022C8                     l4855:
  6090  0022C8  0E24               	movlw	low STR_39
  6091  0022CA  6E25               	movwf	ESP8266_Cmd@cmd,c
  6092  0022CC  0E7F               	movlw	high STR_39
  6093  0022CE  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6094  0022D0  0ECE               	movlw	low (STR_3+5)
  6095  0022D2  6E27               	movwf	ESP8266_Cmd@reply1,c
  6096  0022D4  0E7F               	movlw	high (STR_3+5)
  6097  0022D6  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6098  0022D8  0E00               	movlw	0
  6099  0022DA  6E29               	movwf	ESP8266_Cmd@reply2,c
  6100  0022DC  0E00               	movlw	0
  6101  0022DE  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6102  0022E0  0E01               	movlw	1
  6103  0022E2  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6104  0022E4  0EF4               	movlw	244
  6105  0022E6  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6106  0022E8  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6107  0022EC  0900               	iorlw	0
  6108  0022EE  B4D8               	btfsc	status,2,c
  6109  0022F0  D7EB               	goto	l4855
  6110  0022F2                     l4857:
  6111  0022F2  0EE8               	movlw	low STR_41
  6112  0022F4  6E25               	movwf	ESP8266_Cmd@cmd,c
  6113  0022F6  0E7E               	movlw	high STR_41
  6114  0022F8  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6115  0022FA  0ECE               	movlw	low (STR_3+5)
  6116  0022FC  6E27               	movwf	ESP8266_Cmd@reply1,c
  6117  0022FE  0E7F               	movlw	high (STR_3+5)
  6118  002300  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6119  002302  0E00               	movlw	0
  6120  002304  6E29               	movwf	ESP8266_Cmd@reply2,c
  6121  002306  0E00               	movlw	0
  6122  002308  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6123  00230A  0E03               	movlw	3
  6124  00230C  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6125  00230E  0EE8               	movlw	232
  6126  002310  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6127  002312  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6128  002316  0900               	iorlw	0
  6129  002318  B4D8               	btfsc	status,2,c
  6130  00231A  D7EB               	goto	l4857
  6131  00231C                     l4859:
  6132  00231C  0E40               	movlw	low STR_43
  6133  00231E  6E25               	movwf	ESP8266_Cmd@cmd,c
  6134  002320  0E7F               	movlw	high STR_43
  6135  002322  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6136  002324  0ECE               	movlw	low (STR_3+5)
  6137  002326  6E27               	movwf	ESP8266_Cmd@reply1,c
  6138  002328  0E7F               	movlw	high (STR_3+5)
  6139  00232A  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6140  00232C  0E00               	movlw	0
  6141  00232E  6E29               	movwf	ESP8266_Cmd@reply2,c
  6142  002330  0E00               	movlw	0
  6143  002332  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6144  002334  0E01               	movlw	1
  6145  002336  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6146  002338  0EF4               	movlw	244
  6147  00233A  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6148  00233C  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6149  002340  0900               	iorlw	0
  6150  002342  B4D8               	btfsc	status,2,c
  6151  002344  D7EB               	goto	l4859
  6152  002346                     l4861:
  6153  002346  0E63               	movlw	low STR_45
  6154  002348  6E25               	movwf	ESP8266_Cmd@cmd,c
  6155  00234A  0E7E               	movlw	high STR_45
  6156  00234C  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6157  00234E  0ECE               	movlw	low (STR_3+5)
  6158  002350  6E27               	movwf	ESP8266_Cmd@reply1,c
  6159  002352  0E7F               	movlw	high (STR_3+5)
  6160  002354  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6161  002356  0E00               	movlw	0
  6162  002358  6E29               	movwf	ESP8266_Cmd@reply2,c
  6163  00235A  0E00               	movlw	0
  6164  00235C  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6165  00235E  0E01               	movlw	1
  6166  002360  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6167  002362  0EF4               	movlw	244
  6168  002364  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6169  002366  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6170  00236A  0900               	iorlw	0
  6171  00236C  A4D8               	btfss	status,2,c
  6172  00236E  0012               	return	
  6173  002370  D7EA               	goto	l4861
  6174  002372                     __end_of_ESP8266_Server:
  6175                           	opt stack 0
  6176                           tblptru	equ	0xFF8
  6177                           intcon	equ	0xFF2
  6178                           postinc0	equ	0xFEE
  6179                           wreg	equ	0xFE8
  6180                           indf2	equ	0xFDF
  6181                           fsr2h	equ	0xFDA
  6182                           fsr2l	equ	0xFD9
  6183                           status	equ	0xFD8
  6184                           
  6185 ;; *************** function _ESP8266_Rst *****************
  6186 ;; Defined at:
  6187 ;;		line 107 in file "harwave/UART.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;		None
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;		None
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      void 
  6194 ;; Registers used:
  6195 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6201 ;;      Params:         0       0       0       0       0       0       0
  6202 ;;      Locals:         0       0       0       0       0       0       0
  6203 ;;      Temps:          0       0       0       0       0       0       0
  6204 ;;      Totals:         0       0       0       0       0       0       0
  6205 ;;Total ram usage:        0 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    4
  6208 ;; This function calls:
  6209 ;;		_ESP8266_Cmd
  6210 ;; This function is called by:
  6211 ;;		_ESP8266_Server
  6212 ;;		_ESP8266_client
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           	psect	text28
  6217  002AD6                     __ptext28:
  6218                           	opt stack 0
  6219  002AD6                     _ESP8266_Rst:
  6220                           	opt stack 25
  6221                           
  6222                           ;UART.c: 110: ESP8266_Cmd ( (void*)"AT+RST\r\n", (void*)"OK",(void*) "ready", 6000 );
  6223                           
  6224                           ;incstack = 0
  6225  002AD6  0EC0               	movlw	low STR_6
  6226  002AD8  6E25               	movwf	ESP8266_Cmd@cmd,c
  6227  002ADA  0E7F               	movlw	high STR_6
  6228  002ADC  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6229  002ADE  0ECE               	movlw	low (STR_3+5)
  6230  002AE0  6E27               	movwf	ESP8266_Cmd@reply1,c
  6231  002AE2  0E7F               	movlw	high (STR_3+5)
  6232  002AE4  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6233  002AE6  0ED8               	movlw	low STR_8
  6234  002AE8  6E29               	movwf	ESP8266_Cmd@reply2,c
  6235  002AEA  0E7F               	movlw	high STR_8
  6236  002AEC  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6237  002AEE  0E17               	movlw	23
  6238  002AF0  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6239  002AF2  0E70               	movlw	112
  6240  002AF4  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6241  002AF6  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6242  002AFA  0012               	return		;funcret
  6243  002AFC                     __end_of_ESP8266_Rst:
  6244                           	opt stack 0
  6245                           tblptru	equ	0xFF8
  6246                           intcon	equ	0xFF2
  6247                           postinc0	equ	0xFEE
  6248                           wreg	equ	0xFE8
  6249                           indf2	equ	0xFDF
  6250                           fsr2h	equ	0xFDA
  6251                           fsr2l	equ	0xFD9
  6252                           status	equ	0xFD8
  6253                           
  6254 ;; *************** function _ESP8266_BuildAP *****************
  6255 ;; Defined at:
  6256 ;;		line 148 in file "harwave/UART.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;  pSSID           2   64[COMRAM] PTR unsigned char 
  6259 ;;		 -> STR_36(4), 
  6260 ;;  pPassWord       2   66[COMRAM] PTR unsigned char 
  6261 ;;		 -> STR_37(10), 
  6262 ;;  enunPsdMode     2   68[COMRAM] PTR unsigned char 
  6263 ;;		 -> STR_38(2), 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  cCmd          120    0[BANK0 ] unsigned char [120]
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      unsigned char 
  6268 ;; Registers used:
  6269 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6275 ;;      Params:         6       0       0       0       0       0       0
  6276 ;;      Locals:         0     120       0       0       0       0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0
  6278 ;;      Totals:         6     120       0       0       0       0       0
  6279 ;;Total ram usage:      126 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:    4
  6282 ;; This function calls:
  6283 ;;		_ESP8266_Cmd
  6284 ;;		_sprintf
  6285 ;; This function is called by:
  6286 ;;		_ESP8266_Server
  6287 ;; This function uses a non-reentrant model
  6288 ;;
  6289                           
  6290                           	psect	text29
  6291  002888                     __ptext29:
  6292                           	opt stack 0
  6293  002888                     _ESP8266_BuildAP:
  6294                           	opt stack 25
  6295                           
  6296                           ;UART.c: 150: char cCmd [120];
  6297                           ;UART.c: 152: sprintf ( cCmd, (void*)"AT+CWSAP=\"%s\",\"%s\",1,%s\r\n", pSSID, pPassWord
      +                          , enunPsdMode );
  6298                           
  6299                           ;incstack = 0
  6300  002888  0E80               	movlw	low ESP8266_BuildAP@cCmd
  6301  00288A  6E1E               	movwf	sprintf@sp,c
  6302  00288C  0E00               	movlw	high ESP8266_BuildAP@cCmd
  6303  00288E  6E1F               	movwf	sprintf@sp+1,c
  6304  002890  0E19               	movlw	low STR_20
  6305  002892  6E20               	movwf	sprintf@f,c
  6306  002894  0E7E               	movlw	high STR_20
  6307  002896  6E21               	movwf	sprintf@f+1,c
  6308  002898  C041  F022         	movff	ESP8266_BuildAP@pSSID,?_sprintf+4
  6309  00289C  C042  F023         	movff	ESP8266_BuildAP@pSSID+1,?_sprintf+5
  6310  0028A0  C043  F024         	movff	ESP8266_BuildAP@pPassWord,?_sprintf+6
  6311  0028A4  C044  F025         	movff	ESP8266_BuildAP@pPassWord+1,?_sprintf+7
  6312  0028A8  C045  F026         	movff	ESP8266_BuildAP@enunPsdMode,?_sprintf+8
  6313  0028AC  C046  F027         	movff	ESP8266_BuildAP@enunPsdMode+1,?_sprintf+9
  6314  0028B0  EC09  F000         	call	_sprintf	;wreg free
  6315                           
  6316                           ;UART.c: 154: return ESP8266_Cmd ( cCmd, (void*)"OK", 0, 1000 );
  6317  0028B4  0E80               	movlw	low ESP8266_BuildAP@cCmd
  6318  0028B6  6E25               	movwf	ESP8266_Cmd@cmd,c
  6319  0028B8  0E00               	movlw	high ESP8266_BuildAP@cCmd
  6320  0028BA  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6321  0028BC  0ECE               	movlw	low (STR_3+5)
  6322  0028BE  6E27               	movwf	ESP8266_Cmd@reply1,c
  6323  0028C0  0E7F               	movlw	high (STR_3+5)
  6324  0028C2  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6325  0028C4  0E00               	movlw	0
  6326  0028C6  6E29               	movwf	ESP8266_Cmd@reply2,c
  6327  0028C8  0E00               	movlw	0
  6328  0028CA  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6329  0028CC  0E03               	movlw	3
  6330  0028CE  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6331  0028D0  0EE8               	movlw	232
  6332  0028D2  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6333  0028D4  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6334  0028D8  0012               	return	
  6335  0028DA                     __end_of_ESP8266_BuildAP:
  6336                           	opt stack 0
  6337                           tblptru	equ	0xFF8
  6338                           intcon	equ	0xFF2
  6339                           postinc0	equ	0xFEE
  6340                           wreg	equ	0xFE8
  6341                           indf2	equ	0xFDF
  6342                           fsr2h	equ	0xFDA
  6343                           fsr2l	equ	0xFD9
  6344                           status	equ	0xFD8
  6345                           
  6346 ;; *************** function _ESP8266_AT_Test *****************
  6347 ;; Defined at:
  6348 ;;		line 100 in file "harwave/UART.c"
  6349 ;; Parameters:    Size  Location     Type
  6350 ;;		None
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;		None
  6353 ;; Return value:  Size  Location     Type
  6354 ;;                  1    wreg      void 
  6355 ;; Registers used:
  6356 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6357 ;; Tracked objects:
  6358 ;;		On entry : 0/0
  6359 ;;		On exit  : 0/0
  6360 ;;		Unchanged: 0/0
  6361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6362 ;;      Params:         0       0       0       0       0       0       0
  6363 ;;      Locals:         0       0       0       0       0       0       0
  6364 ;;      Temps:          0       0       0       0       0       0       0
  6365 ;;      Totals:         0       0       0       0       0       0       0
  6366 ;;Total ram usage:        0 bytes
  6367 ;; Hardware stack levels used:    1
  6368 ;; Hardware stack levels required when called:    4
  6369 ;; This function calls:
  6370 ;;		_ESP8266_Cmd
  6371 ;; This function is called by:
  6372 ;;		_ESP8266_Server
  6373 ;;		_ESP8266_client
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           	psect	text30
  6378  002A82                     __ptext30:
  6379                           	opt stack 0
  6380  002A82                     _ESP8266_AT_Test:
  6381                           	opt stack 25
  6382  002A82                     l4631:
  6383  002A82  0EDE               	movlw	low STR_4
  6384  002A84  6E25               	movwf	ESP8266_Cmd@cmd,c
  6385  002A86  0E7F               	movlw	high STR_4
  6386  002A88  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6387  002A8A  0ECE               	movlw	low (STR_3+5)
  6388  002A8C  6E27               	movwf	ESP8266_Cmd@reply1,c
  6389  002A8E  0E7F               	movlw	high (STR_3+5)
  6390  002A90  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6391  002A92  0E00               	movlw	0
  6392  002A94  6E29               	movwf	ESP8266_Cmd@reply2,c
  6393  002A96  0E00               	movlw	0
  6394  002A98  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6395  002A9A  0E01               	movlw	1
  6396  002A9C  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6397  002A9E  0EF4               	movlw	244
  6398  002AA0  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6399  002AA2  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6400  002AA6  0900               	iorlw	0
  6401  002AA8  A4D8               	btfss	status,2,c
  6402  002AAA  0012               	return	
  6403  002AAC  D7EA               	goto	l4631
  6404  002AAE                     __end_of_ESP8266_AT_Test:
  6405                           	opt stack 0
  6406                           tblptru	equ	0xFF8
  6407                           intcon	equ	0xFF2
  6408                           postinc0	equ	0xFEE
  6409                           wreg	equ	0xFE8
  6410                           indf2	equ	0xFDF
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function _AP_MODE *****************
  6416 ;; Defined at:
  6417 ;;		line 184 in file "harwave/UART.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6431 ;;      Params:         0       0       0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0
  6434 ;;      Totals:         0       0       0       0       0       0       0
  6435 ;;Total ram usage:        0 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    5
  6438 ;; This function calls:
  6439 ;;		_ESP8266_Cmd
  6440 ;;		_ESP8266_Net_Mode_Choose
  6441 ;; This function is called by:
  6442 ;;		_ESP8266_Server
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text31
  6447  002A22                     __ptext31:
  6448                           	opt stack 0
  6449  002A22                     _AP_MODE:
  6450                           	opt stack 24
  6451                           
  6452                           ;UART.c: 185: ESP8266_Net_Mode_Choose ( AP ) ;
  6453                           
  6454                           ;incstack = 0
  6455  002A22  0E01               	movlw	1
  6456  002A24  ECC8  F012         	call	_ESP8266_Net_Mode_Choose
  6457  002A28                     l4643:
  6458  002A28  0E6A               	movlw	low STR_30
  6459  002A2A  6E25               	movwf	ESP8266_Cmd@cmd,c
  6460  002A2C  0E7F               	movlw	high STR_30
  6461  002A2E  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6462  002A30  0EA2               	movlw	low STR_31
  6463  002A32  6E27               	movwf	ESP8266_Cmd@reply1,c
  6464  002A34  0E7F               	movlw	high STR_31
  6465  002A36  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6466  002A38  0ECE               	movlw	low (STR_3+5)
  6467  002A3A  6E29               	movwf	ESP8266_Cmd@reply2,c
  6468  002A3C  0E7F               	movlw	high (STR_3+5)
  6469  002A3E  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6470  002A40  0E00               	movlw	0
  6471  002A42  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6472  002A44  0E64               	movlw	100
  6473  002A46  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6474  002A48  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6475  002A4C  0900               	iorlw	0
  6476  002A4E  A4D8               	btfss	status,2,c
  6477  002A50  0012               	return	
  6478  002A52  D7EA               	goto	l4643
  6479  002A54                     __end_of_AP_MODE:
  6480                           	opt stack 0
  6481                           tblptru	equ	0xFF8
  6482                           intcon	equ	0xFF2
  6483                           postinc0	equ	0xFEE
  6484                           wreg	equ	0xFE8
  6485                           indf2	equ	0xFDF
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _ESP8266_Net_Mode_Choose *****************
  6491 ;; Defined at:
  6492 ;;		line 120 in file "harwave/UART.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;  MODE            1    wreg     enum E3773
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;  MODE            1   45[COMRAM] enum E3773
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      unsigned char 
  6499 ;; Registers used:
  6500 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6506 ;;      Params:         0       0       0       0       0       0       0
  6507 ;;      Locals:         1       0       0       0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0
  6509 ;;      Totals:         1       0       0       0       0       0       0
  6510 ;;Total ram usage:        1 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    4
  6513 ;; This function calls:
  6514 ;;		_ESP8266_Cmd
  6515 ;; This function is called by:
  6516 ;;		_AP_MODE
  6517 ;;		_STA_MODE
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text32
  6522  002590                     __ptext32:
  6523                           	opt stack 0
  6524  002590                     _ESP8266_Net_Mode_Choose:
  6525                           	opt stack 24
  6526                           
  6527                           ;incstack = 0
  6528                           ;ESP8266_Net_Mode_Choose@MODE stored from wreg
  6529  002590  6E2E               	movwf	ESP8266_Net_Mode_Choose@MODE,c
  6530                           
  6531                           ;UART.c: 123: switch ( MODE )
  6532  002592  D039               	goto	l4333
  6533  002594                     l4319:
  6534                           
  6535                           ;UART.c: 126: return ESP8266_Cmd ( (void*)"AT+CWMODE=1\r\n", (void*)"OK", (void*)"no cha
      +                          nge", 2500 );
  6536                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  6537  002594  0E32               	movlw	low STR_9
  6538  002596  6E25               	movwf	ESP8266_Cmd@cmd,c
  6539  002598  0E7F               	movlw	high STR_9
  6540  00259A  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6541  00259C  0ECE               	movlw	low (STR_3+5)
  6542  00259E  6E27               	movwf	ESP8266_Cmd@reply1,c
  6543  0025A0  0E7F               	movlw	high (STR_3+5)
  6544  0025A2  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6545  0025A4  0EB6               	movlw	low STR_11
  6546  0025A6  6E29               	movwf	ESP8266_Cmd@reply2,c
  6547  0025A8  0E7F               	movlw	high STR_11
  6548  0025AA  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6549  0025AC  0E09               	movlw	9
  6550  0025AE  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6551  0025B0  0EC4               	movlw	196
  6552  0025B2  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6553  0025B4  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6554  0025B8  0012               	return	
  6555  0025BA                     l4323:
  6556                           
  6557                           ;UART.c: 129: return ESP8266_Cmd ( (void*)"AT+CWMODE=2\r\n",(void*) "OK", (void*)"no cha
      +                          nge", 2500 );
  6558                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  6559  0025BA  0E4E               	movlw	low STR_12
  6560  0025BC  6E25               	movwf	ESP8266_Cmd@cmd,c
  6561  0025BE  0E7F               	movlw	high STR_12
  6562  0025C0  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6563  0025C2  0ECE               	movlw	low (STR_3+5)
  6564  0025C4  6E27               	movwf	ESP8266_Cmd@reply1,c
  6565  0025C6  0E7F               	movlw	high (STR_3+5)
  6566  0025C8  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6567  0025CA  0EB6               	movlw	low STR_11
  6568  0025CC  6E29               	movwf	ESP8266_Cmd@reply2,c
  6569  0025CE  0E7F               	movlw	high STR_11
  6570  0025D0  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6571  0025D2  0E09               	movlw	9
  6572  0025D4  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6573  0025D6  0EC4               	movlw	196
  6574  0025D8  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6575  0025DA  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6576  0025DE  0012               	return	
  6577  0025E0                     l4327:
  6578                           
  6579                           ;UART.c: 132: return ESP8266_Cmd ( (void*)"AT+CWMODE=3\r\n", (void*)"OK", (void*)"no cha
      +                          nge", 2500 );
  6580                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  6581  0025E0  0E5C               	movlw	low STR_15
  6582  0025E2  6E25               	movwf	ESP8266_Cmd@cmd,c
  6583  0025E4  0E7F               	movlw	high STR_15
  6584  0025E6  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6585  0025E8  0ECE               	movlw	low (STR_3+5)
  6586  0025EA  6E27               	movwf	ESP8266_Cmd@reply1,c
  6587  0025EC  0E7F               	movlw	high (STR_3+5)
  6588  0025EE  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6589  0025F0  0EB6               	movlw	low STR_11
  6590  0025F2  6E29               	movwf	ESP8266_Cmd@reply2,c
  6591  0025F4  0E7F               	movlw	high STR_11
  6592  0025F6  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6593  0025F8  0E09               	movlw	9
  6594  0025FA  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6595  0025FC  0EC4               	movlw	196
  6596  0025FE  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6597  002600  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6598                           
  6599                           ;UART.c: 136: }
  6600                           
  6601                           ;UART.c: 135: return 0;
  6602                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  6603                           
  6604                           ;UART.c: 134: default:
  6605  002604  0012               	return	
  6606  002606                     l4333:
  6607  002606  502E               	movf	ESP8266_Net_Mode_Choose@MODE,w,c
  6608                           
  6609                           ; Switch size 1, requested type "space"
  6610                           ; Number of cases is 3, Range of values is 0 to 2
  6611                           ; switch strategies available:
  6612                           ; Name         Instructions Cycles
  6613                           ; simple_byte           10     6 (average)
  6614                           ;	Chosen strategy is simple_byte
  6615  002608  0A00               	xorlw	0	; case 0
  6616  00260A  B4D8               	btfsc	status,2,c
  6617  00260C  D7C3               	goto	l4319
  6618  00260E  0A01               	xorlw	1	; case 1
  6619  002610  B4D8               	btfsc	status,2,c
  6620  002612  D7D3               	goto	l4323
  6621  002614  0A03               	xorlw	3	; case 2
  6622  002616  A4D8               	btfss	status,2,c
  6623  002618  0012               	return	
  6624  00261A  D7E2               	goto	l4327
  6625  00261C                     __end_of_ESP8266_Net_Mode_Choose:
  6626                           	opt stack 0
  6627                           tblptru	equ	0xFF8
  6628                           intcon	equ	0xFF2
  6629                           postinc0	equ	0xFEE
  6630                           wreg	equ	0xFE8
  6631                           indf2	equ	0xFDF
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _ESP8266_SendString *****************
  6637 ;; Defined at:
  6638 ;;		line 84 in file "harwave/UART.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  ucId            1    wreg     unsigned char 
  6641 ;;  pStr            2   64[COMRAM] PTR unsigned char 
  6642 ;;		 -> main@tem(11), 
  6643 ;;  ulStrLength     2   66[COMRAM] unsigned int 
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;  ucId            1   34[BANK0 ] unsigned char 
  6646 ;;  cStr           20   12[BANK0 ] unsigned char [20]
  6647 ;;  tem            12    0[BANK0 ] unsigned char [12]
  6648 ;;  bRet            2   32[BANK0 ] int 
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  1    wreg      unsigned char 
  6651 ;; Registers used:
  6652 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6658 ;;      Params:         4       0       0       0       0       0       0
  6659 ;;      Locals:         0      35       0       0       0       0       0
  6660 ;;      Temps:          1       0       0       0       0       0       0
  6661 ;;      Totals:         5      35       0       0       0       0       0
  6662 ;;Total ram usage:       40 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    4
  6665 ;; This function calls:
  6666 ;;		_ESP8266_Cmd
  6667 ;;		_sprintf
  6668 ;;		_strcpy
  6669 ;; This function is called by:
  6670 ;;		_main
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           	psect	text33
  6675  002432                     __ptext33:
  6676                           	opt stack 0
  6677  002432                     _ESP8266_SendString:
  6678                           	opt stack 26
  6679                           
  6680                           ;incstack = 0
  6681                           ;ESP8266_SendString@ucId stored from wreg
  6682  002432  0100               	movlb	0	; () banked
  6683  002434  6FA2               	movwf	ESP8266_SendString@ucId& (0+255),b
  6684                           
  6685                           ;UART.c: 86: char cStr [20]={0};
  6686  002436  EE21  F066         	lfsr	2,ESP8266_SendString@F4007
  6687  00243A  EE10  F08C         	lfsr	1,ESP8266_SendString@cStr
  6688  00243E  0E13               	movlw	19
  6689  002440                     u5491:
  6690  002440  CFDB FFE3          	movff	plusw2,plusw1
  6691  002444  06E8               	decf	wreg,f,c
  6692  002446  E2FC               	bc	u5491
  6693                           
  6694                           ;UART.c: 87: int bRet = 0;
  6695  002448  0E00               	movlw	0
  6696  00244A  0100               	movlb	0	; () banked
  6697  00244C  6FA1               	movwf	(ESP8266_SendString@bRet+1)& (0+255),b
  6698  00244E  0E00               	movlw	0
  6699  002450  6FA0               	movwf	ESP8266_SendString@bRet& (0+255),b
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;UART.c: 88: char tem[12];
  6703                           ;UART.c: 91: strcpy(tem,pStr);
  6704  002452  0E80               	movlw	low ESP8266_SendString@tem
  6705  002454  6E12               	movwf	strcpy@to,c
  6706  002456  0E00               	movlw	high ESP8266_SendString@tem
  6707  002458  6E13               	movwf	strcpy@to+1,c
  6708  00245A  C041  F014         	movff	ESP8266_SendString@pStr,strcpy@from
  6709  00245E  C042  F015         	movff	ESP8266_SendString@pStr+1,strcpy@from+1
  6710  002462  EC2A  F015         	call	_strcpy	;wreg free
  6711                           
  6712                           ;UART.c: 92: tem[11]='\0';
  6713  002466  0E00               	movlw	0
  6714  002468  0100               	movlb	0	; () banked
  6715  00246A  6F8B               	movwf	(ESP8266_SendString@tem+11)& (0+255),b
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;UART.c: 93: sprintf ( cStr,"AT+CIPSEND=%d,%d\r\n", ucId, ulStrLength);
  6719  00246C  0E8C               	movlw	low ESP8266_SendString@cStr
  6720  00246E  6E1E               	movwf	sprintf@sp,c
  6721  002470  0E00               	movlw	high ESP8266_SendString@cStr
  6722  002472  6E1F               	movwf	sprintf@sp+1,c
  6723  002474  0EA2               	movlw	low STR_1
  6724  002476  6E20               	movwf	sprintf@f,c
  6725  002478  0E7E               	movlw	high STR_1
  6726  00247A  6E21               	movwf	sprintf@f+1,c
  6727  00247C  C0A2  F022         	movff	ESP8266_SendString@ucId,?_sprintf+4
  6728  002480  6A23               	clrf	?_sprintf+5,c
  6729  002482  C043  F024         	movff	ESP8266_SendString@ulStrLength,?_sprintf+6
  6730  002486  C044  F025         	movff	ESP8266_SendString@ulStrLength+1,?_sprintf+7
  6731  00248A  EC09  F000         	call	_sprintf	;wreg free
  6732                           
  6733                           ;UART.c: 94: ESP8266_Cmd ( cStr,(void*)"> ",0, 30 ) ;
  6734  00248E  0E8C               	movlw	low ESP8266_SendString@cStr
  6735  002490  6E25               	movwf	ESP8266_Cmd@cmd,c
  6736  002492  0E00               	movlw	high ESP8266_SendString@cStr
  6737  002494  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6738  002496  0EF9               	movlw	low STR_2
  6739  002498  6E27               	movwf	ESP8266_Cmd@reply1,c
  6740  00249A  0E7F               	movlw	high STR_2
  6741  00249C  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6742  00249E  0E00               	movlw	0
  6743  0024A0  6E29               	movwf	ESP8266_Cmd@reply2,c
  6744  0024A2  0E00               	movlw	0
  6745  0024A4  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6746  0024A6  0E00               	movlw	0
  6747  0024A8  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6748  0024AA  0E1E               	movlw	30
  6749  0024AC  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6750  0024AE  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6751                           
  6752                           ;UART.c: 95: bRet = ESP8266_Cmd ( tem, (void*)"SEND OK", 0, 30 );
  6753  0024B2  0E80               	movlw	low ESP8266_SendString@tem
  6754  0024B4  6E25               	movwf	ESP8266_Cmd@cmd,c
  6755  0024B6  0E00               	movlw	high ESP8266_SendString@tem
  6756  0024B8  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6757  0024BA  0EC9               	movlw	low STR_3
  6758  0024BC  6E27               	movwf	ESP8266_Cmd@reply1,c
  6759  0024BE  0E7F               	movlw	high STR_3
  6760  0024C0  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6761  0024C2  0E00               	movlw	0
  6762  0024C4  6E29               	movwf	ESP8266_Cmd@reply2,c
  6763  0024C6  0E00               	movlw	0
  6764  0024C8  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6765  0024CA  0E00               	movlw	0
  6766  0024CC  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6767  0024CE  0E1E               	movlw	30
  6768  0024D0  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6769  0024D2  ECB9  F011         	call	_ESP8266_Cmd	;wreg free
  6770  0024D6  6E45               	movwf	??_ESP8266_SendString& (0+255),c
  6771  0024D8  5045               	movf	??_ESP8266_SendString,w,c
  6772  0024DA  0100               	movlb	0	; () banked
  6773  0024DC  6FA0               	movwf	ESP8266_SendString@bRet& (0+255),b
  6774  0024DE  6BA1               	clrf	(ESP8266_SendString@bRet+1)& (0+255),b
  6775  0024E0  0012               	return	
  6776  0024E2                     __end_of_ESP8266_SendString:
  6777                           	opt stack 0
  6778                           tblptru	equ	0xFF8
  6779                           intcon	equ	0xFF2
  6780                           postinc0	equ	0xFEE
  6781                           wreg	equ	0xFE8
  6782                           plusw1	equ	0xFE3
  6783                           indf2	equ	0xFDF
  6784                           plusw2	equ	0xFDB
  6785                           fsr2h	equ	0xFDA
  6786                           fsr2l	equ	0xFD9
  6787                           status	equ	0xFD8
  6788                           
  6789 ;; *************** function _strcpy *****************
  6790 ;; Defined at:
  6791 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  to              2   17[COMRAM] PTR unsigned char 
  6794 ;;		 -> ESP8266_SendString@tem(12), 
  6795 ;;  from            2   19[COMRAM] PTR const unsigned char 
  6796 ;;		 -> main@tem(11), 
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;  cp              2   21[COMRAM] PTR unsigned char 
  6799 ;;		 -> ESP8266_SendString@tem(12), 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  2   17[COMRAM] PTR unsigned char 
  6802 ;; Registers used:
  6803 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6809 ;;      Params:         4       0       0       0       0       0       0
  6810 ;;      Locals:         2       0       0       0       0       0       0
  6811 ;;      Temps:          0       0       0       0       0       0       0
  6812 ;;      Totals:         6       0       0       0       0       0       0
  6813 ;;Total ram usage:        6 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:    1
  6816 ;; This function calls:
  6817 ;;		Nothing
  6818 ;; This function is called by:
  6819 ;;		_ESP8266_SendString
  6820 ;; This function uses a non-reentrant model
  6821 ;;
  6822                           
  6823                           	psect	text34
  6824  002A54                     __ptext34:
  6825                           	opt stack 0
  6826  002A54                     _strcpy:
  6827                           	opt stack 28
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;incstack = 0
  6831  002A54  C012  F016         	movff	strcpy@to,strcpy@cp
  6832  002A58  C013  F017         	movff	strcpy@to+1,strcpy@cp+1
  6833  002A5C  D004               	goto	l4627
  6834  002A5E                     l4625:
  6835  002A5E  4A16               	infsnz	strcpy@cp,f,c
  6836  002A60  2A17               	incf	strcpy@cp+1,f,c
  6837  002A62  4A14               	infsnz	strcpy@from,f,c
  6838  002A64  2A15               	incf	strcpy@from+1,f,c
  6839  002A66                     l4627:
  6840  002A66  C014  FFD9         	movff	strcpy@from,fsr2l
  6841  002A6A  C015  FFDA         	movff	strcpy@from+1,fsr2h
  6842  002A6E  C016  FFE1         	movff	strcpy@cp,fsr1l
  6843  002A72  C017  FFE2         	movff	strcpy@cp+1,fsr1h
  6844  002A76  CFDF FFE7          	movff	indf2,indf1
  6845  002A7A  50E7               	movf	indf1,w,c
  6846  002A7C  B4D8               	btfsc	status,2,c
  6847  002A7E  0012               	return	
  6848  002A80  D7EE               	goto	l4625
  6849  002A82                     __end_of_strcpy:
  6850                           	opt stack 0
  6851                           tblptru	equ	0xFF8
  6852                           intcon	equ	0xFF2
  6853                           postinc0	equ	0xFEE
  6854                           wreg	equ	0xFE8
  6855                           indf1	equ	0xFE7
  6856                           plusw1	equ	0xFE3
  6857                           fsr1h	equ	0xFE2
  6858                           fsr1l	equ	0xFE1
  6859                           indf2	equ	0xFDF
  6860                           plusw2	equ	0xFDB
  6861                           fsr2h	equ	0xFDA
  6862                           fsr2l	equ	0xFD9
  6863                           status	equ	0xFD8
  6864                           
  6865 ;; *************** function _sprintf *****************
  6866 ;; Defined at:
  6867 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  sp              2   29[COMRAM] PTR unsigned char 
  6870 ;;		 -> ESP8266_Link_Server@cCmd(120), ESP8266_Link_Server@cStr(100), ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120
      +), 
  6871 ;;		 -> ESP8266_SendString@cStr(20), 
  6872 ;;  f               2   31[COMRAM] PTR const unsigned char 
  6873 ;;		 -> STR_27(17), STR_26(20), STR_24(15), STR_22(15), 
  6874 ;;		 -> STR_20(26), STR_18(21), STR_1(19), 
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  idx             1   43[COMRAM] unsigned char 
  6877 ;;  tmpval          4    0        struct .
  6878 ;;  flag            2   62[COMRAM] unsigned short 
  6879 ;;  width           2   59[COMRAM] int 
  6880 ;;  val             2   56[COMRAM] unsigned int 
  6881 ;;  ap              2   54[COMRAM] PTR void [1]
  6882 ;;		 -> ?_sprintf(2), 
  6883 ;;  len             2   52[COMRAM] unsigned int 
  6884 ;;  cp              2   50[COMRAM] PTR const unsigned char 
  6885 ;;		 -> STR_64(7), sprintf@c(1), STR_62(5), STR_61(12), 
  6886 ;;		 -> STR_56(10), STR_55(5), STR_38(2), STR_37(10), 
  6887 ;;		 -> STR_36(4), STR_25(4), STR_23(4), ESP8266_Link_Server@cStr(100), 
  6888 ;;  c               1   61[COMRAM] char 
  6889 ;;  prec            1   58[COMRAM] char 
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  2   29[COMRAM] int 
  6892 ;; Registers used:
  6893 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6899 ;;      Params:        10       0       0       0       0       0       0
  6900 ;;      Locals:        21       0       0       0       0       0       0
  6901 ;;      Temps:          4       0       0       0       0       0       0
  6902 ;;      Totals:        35       0       0       0       0       0       0
  6903 ;;Total ram usage:       35 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; Hardware stack levels required when called:    2
  6906 ;; This function calls:
  6907 ;;		___lwdiv
  6908 ;;		___lwmod
  6909 ;;		___wmul
  6910 ;;		_isdigit
  6911 ;; This function is called by:
  6912 ;;		_ESP8266_SendString
  6913 ;;		_ESP8266_BuildAP
  6914 ;;		_ESP8266_JoinAP
  6915 ;;		_ESP8266_Link_Server
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           	psect	text35
  6920  000012                     __ptext35:
  6921                           	opt stack 0
  6922  000012                     _sprintf:
  6923                           	opt stack 26
  6924                           
  6925                           ;doprnt.c: 494: va_list ap;
  6926                           ;doprnt.c: 499: signed char c;
  6927                           ;doprnt.c: 501: int width;
  6928                           ;doprnt.c: 506: signed char prec;
  6929                           ;doprnt.c: 508: unsigned short flag;
  6930                           ;doprnt.c: 523: union {
  6931                           ;doprnt.c: 524: unsigned long vd;
  6932                           ;doprnt.c: 525: double integ;
  6933                           ;doprnt.c: 526: } tmpval;
  6934                           ;doprnt.c: 528: unsigned int val;
  6935                           ;doprnt.c: 529: unsigned len;
  6936                           ;doprnt.c: 530: const char * cp;
  6937                           ;doprnt.c: 533: *ap = __va_start();
  6938                           
  6939                           ;incstack = 0
  6940  000012  0E22               	movlw	low (?_sprintf+4)
  6941  000014  6E37               	movwf	sprintf@ap,c
  6942  000016  0E00               	movlw	high (?_sprintf+4)
  6943  000018  6E38               	movwf	sprintf@ap+1,c
  6944                           
  6945                           ;doprnt.c: 536: while(c = *f++) {
  6946  00001A  EF46  F004         	goto	l4311
  6947  00001E                     l3957:
  6948                           
  6949                           ;doprnt.c: 538: if(c != '%')
  6950  00001E  0E25               	movlw	37
  6951  000020  183E               	xorwf	sprintf@c,w,c
  6952  000022  B4D8               	btfsc	status,2,c
  6953  000024  D00A               	goto	l3963
  6954                           
  6955                           ;doprnt.c: 540: {
  6956                           ;doprnt.c: 541: ((*sp++ = (c)));
  6957  000026  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6958  00002A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6959  00002E  C03E  FFDF         	movff	sprintf@c,indf2
  6960  000032  4A1E               	infsnz	sprintf@sp,f,c
  6961  000034  2A1F               	incf	sprintf@sp+1,f,c
  6962                           
  6963                           ;doprnt.c: 542: continue;
  6964  000036  EF46  F004         	goto	l4311
  6965  00003A                     l3963:
  6966                           
  6967                           ;doprnt.c: 543: }
  6968                           ;doprnt.c: 546: width = 0;
  6969  00003A  0E00               	movlw	0
  6970  00003C  6E3D               	movwf	sprintf@width+1,c
  6971  00003E  0E00               	movlw	0
  6972  000040  6E3C               	movwf	sprintf@width,c
  6973                           
  6974                           ;doprnt.c: 548: flag = 0;
  6975  000042  0E00               	movlw	0
  6976  000044  6E40               	movwf	sprintf@flag+1,c
  6977  000046  0E00               	movlw	0
  6978  000048  6E3F               	movwf	sprintf@flag,c
  6979                           
  6980                           ;doprnt.c: 551: switch(*f) {
  6981                           
  6982                           ;doprnt.c: 550: for(;;) {
  6983  00004A  D009               	goto	l3975
  6984  00004C                     l3965:
  6985                           
  6986                           ;doprnt.c: 554: flag |= 0x08;
  6987  00004C  863F               	bsf	sprintf@flag,3,c
  6988  00004E  D005               	goto	L12
  6989  000050                     l3967:
  6990                           
  6991                           ;doprnt.c: 561: flag |= 0x01;
  6992  000050  803F               	bsf	sprintf@flag,0,c
  6993  000052  D003               	goto	L12
  6994  000054                     l3969:
  6995                           
  6996                           ;doprnt.c: 574: flag |= 0x800;
  6997  000054  8640               	bsf	sprintf@flag+1,3,c
  6998  000056  D001               	goto	L12
  6999  000058                     l3971:
  7000                           
  7001                           ;doprnt.c: 580: flag |= 0x04;
  7002  000058  843F               	bsf	sprintf@flag,2,c
  7003  00005A                     L12:
  7004                           
  7005                           ;doprnt.c: 581: f++;
  7006  00005A  4A20               	infsnz	sprintf@f,f,c
  7007  00005C  2A21               	incf	sprintf@f+1,f,c
  7008  00005E                     l3975:
  7009  00005E  C020  FFF6         	movff	sprintf@f,tblptrl
  7010  000062  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7011  000066                     	if	0	;tblptru may be non-zero
  7012  000066                     	endif
  7013  000066                     	if	0	;tblptru may be non-zero
  7014  000066                     	endif
  7015  000066  0008               	tblrd		*
  7016  000068  50F5               	movf	tablat,w,c
  7017                           
  7018                           ; Switch size 1, requested type "space"
  7019                           ; Number of cases is 4, Range of values is 32 to 48
  7020                           ; switch strategies available:
  7021                           ; Name         Instructions Cycles
  7022                           ; simple_byte           13     7 (average)
  7023                           ;	Chosen strategy is simple_byte
  7024  00006A  0A20               	xorlw	32	; case 32
  7025  00006C  B4D8               	btfsc	status,2,c
  7026  00006E  D7F0               	goto	l3967
  7027  000070  0A03               	xorlw	3	; case 35
  7028  000072  B4D8               	btfsc	status,2,c
  7029  000074  D7EF               	goto	l3969
  7030  000076  0A0E               	xorlw	14	; case 45
  7031  000078  B4D8               	btfsc	status,2,c
  7032  00007A  D7E8               	goto	l3965
  7033  00007C  0A1D               	xorlw	29	; case 48
  7034  00007E  B4D8               	btfsc	status,2,c
  7035  000080  D7EB               	goto	l3971
  7036                           
  7037                           ;doprnt.c: 593: if(flag & 0x08)
  7038                           
  7039                           ;doprnt.c: 586: }
  7040                           
  7041                           ;doprnt.c: 585: break;
  7042  000082  B63F               	btfsc	sprintf@flag,3,c
  7043                           
  7044                           ;doprnt.c: 594: flag &= ~0x04;
  7045  000084  943F               	bcf	sprintf@flag,2,c
  7046                           
  7047                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7048  000086  C020  FFF6         	movff	sprintf@f,tblptrl
  7049  00008A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7050  00008E                     	if	0	;tblptru may be non-zero
  7051  00008E                     	endif
  7052  00008E                     	if	0	;tblptru may be non-zero
  7053  00008E                     	endif
  7054  00008E  0008               	tblrd		*
  7055  000090  50F5               	movf	tablat,w,c
  7056  000092  ECC6  F015         	call	_isdigit
  7057  000096  A0D8               	btfss	status,0,c
  7058  000098  D033               	goto	l3991
  7059                           
  7060                           ;doprnt.c: 598: width = 0;
  7061  00009A  0E00               	movlw	0
  7062  00009C  6E3D               	movwf	sprintf@width+1,c
  7063  00009E  0E00               	movlw	0
  7064  0000A0  6E3C               	movwf	sprintf@width,c
  7065  0000A2                     l3983:
  7066                           
  7067                           ;doprnt.c: 600: width *= 10;
  7068  0000A2  C03C  F012         	movff	sprintf@width,___wmul@multiplier
  7069  0000A6  C03D  F013         	movff	sprintf@width+1,___wmul@multiplier+1
  7070  0000AA  0E00               	movlw	0
  7071  0000AC  6E15               	movwf	___wmul@multiplicand+1,c
  7072  0000AE  0E0A               	movlw	10
  7073  0000B0  6E14               	movwf	___wmul@multiplicand,c
  7074  0000B2  EC7E  F015         	call	___wmul	;wreg free
  7075  0000B6  C012  F03C         	movff	?___wmul,sprintf@width
  7076  0000BA  C013  F03D         	movff	?___wmul+1,sprintf@width+1
  7077                           
  7078                           ;doprnt.c: 601: width += *f++ - '0';
  7079  0000BE  0ED0               	movlw	208
  7080  0000C0  6E28               	movwf	??_sprintf& (0+255),c
  7081  0000C2  0EFF               	movlw	255
  7082  0000C4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7083  0000C6  C020  FFF6         	movff	sprintf@f,tblptrl
  7084  0000CA  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7085  0000CE                     	if	0	;tblptru may be non-zero
  7086  0000CE                     	endif
  7087  0000CE                     	if	0	;tblptru may be non-zero
  7088  0000CE                     	endif
  7089  0000CE  0008               	tblrd		*
  7090  0000D0  50F5               	movf	tablat,w,c
  7091  0000D2  6E2A               	movwf	(??_sprintf+2)& (0+255),c
  7092  0000D4  6A2B               	clrf	(??_sprintf+3)& (0+255),c
  7093  0000D6  5028               	movf	??_sprintf,w,c
  7094  0000D8  262A               	addwf	??_sprintf+2,f,c
  7095  0000DA  5029               	movf	??_sprintf+1,w,c
  7096  0000DC  222B               	addwfc	??_sprintf+3,f,c
  7097  0000DE  502A               	movf	??_sprintf+2,w,c
  7098  0000E0  263C               	addwf	sprintf@width,f,c
  7099  0000E2  502B               	movf	??_sprintf+3,w,c
  7100  0000E4  223D               	addwfc	sprintf@width+1,f,c
  7101  0000E6  4A20               	infsnz	sprintf@f,f,c
  7102  0000E8  2A21               	incf	sprintf@f+1,f,c
  7103                           
  7104                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7105  0000EA  C020  FFF6         	movff	sprintf@f,tblptrl
  7106  0000EE  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7107  0000F2                     	if	0	;tblptru may be non-zero
  7108  0000F2                     	endif
  7109  0000F2                     	if	0	;tblptru may be non-zero
  7110  0000F2                     	endif
  7111  0000F2  0008               	tblrd		*
  7112  0000F4  50F5               	movf	tablat,w,c
  7113  0000F6  ECC6  F015         	call	_isdigit
  7114  0000FA  A0D8               	btfss	status,0,c
  7115  0000FC  D018               	goto	l3999
  7116  0000FE  D7D1               	goto	l3983
  7117  000100                     l3991:
  7118  000100  C020  FFF6         	movff	sprintf@f,tblptrl
  7119  000104  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7120  000108                     	if	0	;tblptru may be non-zero
  7121  000108                     	endif
  7122  000108                     	if	0	;tblptru may be non-zero
  7123  000108                     	endif
  7124  000108  0008               	tblrd		*
  7125  00010A  50F5               	movf	tablat,w,c
  7126  00010C  0A2A               	xorlw	42
  7127  00010E  A4D8               	btfss	status,2,c
  7128  000110  D00E               	goto	l3999
  7129                           
  7130                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  7131  000112  C037  FFD9         	movff	sprintf@ap,fsr2l
  7132  000116  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7133  00011A  CFDE F03C          	movff	postinc2,sprintf@width
  7134  00011E  CFDD F03D          	movff	postdec2,sprintf@width+1
  7135  000122  0E02               	movlw	2
  7136  000124  2637               	addwf	sprintf@ap,f,c
  7137  000126  0E00               	movlw	0
  7138  000128  2238               	addwfc	sprintf@ap+1,f,c
  7139                           
  7140                           ;doprnt.c: 606: f++;
  7141  00012A  4A20               	infsnz	sprintf@f,f,c
  7142  00012C  2A21               	incf	sprintf@f+1,f,c
  7143  00012E                     l3999:
  7144                           
  7145                           ;doprnt.c: 608: }
  7146                           ;doprnt.c: 611: if(*f == '.') {
  7147  00012E  C020  FFF6         	movff	sprintf@f,tblptrl
  7148  000132  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7149  000136                     	if	0	;tblptru may be non-zero
  7150  000136                     	endif
  7151  000136                     	if	0	;tblptru may be non-zero
  7152  000136                     	endif
  7153  000136  0008               	tblrd		*
  7154  000138  50F5               	movf	tablat,w,c
  7155  00013A  0A2E               	xorlw	46
  7156  00013C  A4D8               	btfss	status,2,c
  7157  00013E  D036               	goto	l4019
  7158                           
  7159                           ;doprnt.c: 612: flag |= 0x4000;
  7160  000140  8C40               	bsf	sprintf@flag+1,6,c
  7161                           
  7162                           ;doprnt.c: 613: f++;
  7163  000142  4A20               	infsnz	sprintf@f,f,c
  7164  000144  2A21               	incf	sprintf@f+1,f,c
  7165                           
  7166                           ;doprnt.c: 615: if(*f == '*') {
  7167  000146  C020  FFF6         	movff	sprintf@f,tblptrl
  7168  00014A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7169  00014E                     	if	0	;tblptru may be non-zero
  7170  00014E                     	endif
  7171  00014E                     	if	0	;tblptru may be non-zero
  7172  00014E                     	endif
  7173  00014E  0008               	tblrd		*
  7174  000150  50F5               	movf	tablat,w,c
  7175  000152  0A2A               	xorlw	42
  7176  000154  A4D8               	btfss	status,2,c
  7177  000156  D00D               	goto	l4011
  7178                           
  7179                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  7180  000158  C037  FFD9         	movff	sprintf@ap,fsr2l
  7181  00015C  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7182  000160  50DF               	movf	indf2,w,c
  7183  000162  6E3B               	movwf	sprintf@prec,c
  7184  000164  0E02               	movlw	2
  7185  000166  2637               	addwf	sprintf@ap,f,c
  7186  000168  0E00               	movlw	0
  7187  00016A  2238               	addwfc	sprintf@ap+1,f,c
  7188                           
  7189                           ;doprnt.c: 617: f++;
  7190  00016C  4A20               	infsnz	sprintf@f,f,c
  7191  00016E  2A21               	incf	sprintf@f+1,f,c
  7192                           
  7193                           ;doprnt.c: 618: } else
  7194  000170  D0DB               	goto	l4089
  7195  000172                     l4011:
  7196                           
  7197                           ;doprnt.c: 620: {
  7198                           ;doprnt.c: 621: prec = 0;
  7199  000172  0E00               	movlw	0
  7200  000174  6E3B               	movwf	sprintf@prec,c
  7201                           
  7202                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  7203  000176  D00F               	goto	l4017
  7204  000178                     l4013:
  7205                           
  7206                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  7207  000178  C020  FFF6         	movff	sprintf@f,tblptrl
  7208  00017C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7209  000180                     	if	0	;tblptru may be non-zero
  7210  000180                     	endif
  7211  000180                     	if	0	;tblptru may be non-zero
  7212  000180                     	endif
  7213  000180  0008               	tblrd		*
  7214  000182  CFF5 F028          	movff	tablat,??_sprintf
  7215  000186  503B               	movf	sprintf@prec,w,c
  7216  000188  0D0A               	mullw	10
  7217  00018A  50F3               	movf	prodl,w,c
  7218  00018C  2428               	addwf	??_sprintf,w,c
  7219  00018E  0FD0               	addlw	208
  7220  000190  6E3B               	movwf	sprintf@prec,c
  7221  000192  4A20               	infsnz	sprintf@f,f,c
  7222  000194  2A21               	incf	sprintf@f+1,f,c
  7223  000196                     l4017:
  7224  000196  C020  FFF6         	movff	sprintf@f,tblptrl
  7225  00019A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7226  00019E                     	if	0	;tblptru may be non-zero
  7227  00019E                     	endif
  7228  00019E                     	if	0	;tblptru may be non-zero
  7229  00019E                     	endif
  7230  00019E  0008               	tblrd		*
  7231  0001A0  50F5               	movf	tablat,w,c
  7232  0001A2  ECC6  F015         	call	_isdigit
  7233  0001A6  A0D8               	btfss	status,0,c
  7234  0001A8  D0BF               	goto	l4089
  7235  0001AA  D7E6               	goto	l4013
  7236  0001AC                     l4019:
  7237                           
  7238                           ;doprnt.c: 626: prec = 0;
  7239  0001AC  0E00               	movlw	0
  7240  0001AE  6E3B               	movwf	sprintf@prec,c
  7241                           
  7242                           ;doprnt.c: 630: }
  7243                           ;doprnt.c: 635: switch(c = *f++) {
  7244  0001B0  D0BB               	goto	l4089
  7245  0001B2                     l4021:
  7246                           
  7247                           ;doprnt.c: 691: flag |= 0x40;
  7248  0001B2  8C3F               	bsf	sprintf@flag,6,c
  7249                           
  7250                           ;doprnt.c: 698: case 'i':
  7251                           ;doprnt.c: 699: break;
  7252                           
  7253                           ;doprnt.c: 697: case 'd':
  7254                           
  7255                           ;doprnt.c: 693: break;
  7256  0001B4  D0E2               	goto	l4091
  7257  0001B6                     l4023:
  7258                           
  7259                           ;doprnt.c: 707: flag |= 0x2000;
  7260  0001B6  8A40               	bsf	sprintf@flag+1,5,c
  7261  0001B8                     l442:
  7262                           
  7263                           ;doprnt.c: 714: flag |= 0x20;
  7264  0001B8  8A3F               	bsf	sprintf@flag,5,c
  7265  0001BA                     l443:
  7266                           
  7267                           ;doprnt.c: 721: flag |= 0x80;
  7268  0001BA  8E3F               	bsf	sprintf@flag,7,c
  7269                           
  7270                           ;doprnt.c: 723: break;
  7271  0001BC  D0DE               	goto	l4091
  7272  0001BE                     l4025:
  7273                           
  7274                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7275  0001BE  C037  FFD9         	movff	sprintf@ap,fsr2l
  7276  0001C2  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7277  0001C6  CFDE F033          	movff	postinc2,sprintf@cp
  7278  0001CA  CFDD F034          	movff	postdec2,sprintf@cp+1
  7279  0001CE  0E02               	movlw	2
  7280  0001D0  2637               	addwf	sprintf@ap,f,c
  7281  0001D2  0E00               	movlw	0
  7282  0001D4  2238               	addwfc	sprintf@ap+1,f,c
  7283                           
  7284                           ;doprnt.c: 740: if(!cp)
  7285  0001D6  5033               	movf	sprintf@cp,w,c
  7286  0001D8  1034               	iorwf	sprintf@cp+1,w,c
  7287  0001DA  A4D8               	btfss	status,2,c
  7288  0001DC  D004               	goto	l4033
  7289                           
  7290                           ;doprnt.c: 741: cp = "(null)";
  7291  0001DE  0ED1               	movlw	low STR_64
  7292  0001E0  6E33               	movwf	sprintf@cp,c
  7293  0001E2  0E7F               	movlw	high STR_64
  7294  0001E4  6E34               	movwf	sprintf@cp+1,c
  7295  0001E6                     l4033:
  7296                           
  7297                           ;doprnt.c: 745: len = 0;
  7298  0001E6  0E00               	movlw	0
  7299  0001E8  6E36               	movwf	sprintf@len+1,c
  7300  0001EA  0E00               	movlw	0
  7301  0001EC  6E35               	movwf	sprintf@len,c
  7302                           
  7303                           ;doprnt.c: 746: while(cp[len])
  7304  0001EE  D002               	goto	l4037
  7305  0001F0                     l4035:
  7306                           
  7307                           ;doprnt.c: 747: len++;
  7308  0001F0  4A35               	infsnz	sprintf@len,f,c
  7309  0001F2  2A36               	incf	sprintf@len+1,f,c
  7310  0001F4                     l4037:
  7311  0001F4  5035               	movf	sprintf@len,w,c
  7312  0001F6  2433               	addwf	sprintf@cp,w,c
  7313  0001F8  6E28               	movwf	??_sprintf& (0+255),c
  7314  0001FA  5036               	movf	sprintf@len+1,w,c
  7315  0001FC  2034               	addwfc	sprintf@cp+1,w,c
  7316  0001FE  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7317  000200  C028  FFF6         	movff	??_sprintf,tblptrl
  7318  000204  C029  FFF7         	movff	??_sprintf+1,tblptrh
  7319  000208  6AF8               	clrf	tblptru,c
  7320  00020A  0E05               	movlw	(high __ramtop+-1)
  7321  00020C  64F7               	cpfsgt	tblptrh,c
  7322  00020E  D003               	bra	u4377
  7323  000210  0008               	tblrd		*
  7324  000212  50F5               	movf	tablat,w,c
  7325  000214  D005               	bra	u4370
  7326  000216                     u4377:
  7327  000216  CFF6 FFE1          	movff	tblptrl,fsr1l
  7328  00021A  CFF7 FFE2          	movff	tblptrh,fsr1h
  7329  00021E  50E7               	movf	indf1,w,c
  7330  000220                     u4370:
  7331  000220  0900               	iorlw	0
  7332  000222  A4D8               	btfss	status,2,c
  7333  000224  D7E5               	goto	l4035
  7334  000226                     l4039:
  7335                           
  7336                           ;doprnt.c: 753: if(prec && prec < len)
  7337  000226  503B               	movf	sprintf@prec,w,c
  7338  000228  B4D8               	btfsc	status,2,c
  7339  00022A  D010               	goto	l4045
  7340  00022C  C03B  F028         	movff	sprintf@prec,??_sprintf
  7341  000230  6A29               	clrf	(??_sprintf+1)& (0+255),c
  7342  000232  BE28               	btfsc	??_sprintf& (0+255),7,c
  7343  000234  0629               	decf	(??_sprintf+1)& (0+255),f,c
  7344  000236  5035               	movf	sprintf@len,w,c
  7345  000238  5C28               	subwf	??_sprintf,w,c
  7346  00023A  5036               	movf	sprintf@len+1,w,c
  7347  00023C  5829               	subwfb	??_sprintf+1,w,c
  7348  00023E  B0D8               	btfsc	status,0,c
  7349  000240  D005               	goto	l4045
  7350                           
  7351                           ;doprnt.c: 754: len = prec;
  7352  000242  503B               	movf	sprintf@prec,w,c
  7353  000244  6E35               	movwf	sprintf@len,c
  7354  000246  6A36               	clrf	sprintf@len+1,c
  7355  000248  BE35               	btfsc	sprintf@len,7,c
  7356  00024A  0636               	decf	sprintf@len+1,f,c
  7357  00024C                     l4045:
  7358                           
  7359                           ;doprnt.c: 757: if(width > len)
  7360  00024C  503C               	movf	sprintf@width,w,c
  7361  00024E  5C35               	subwf	sprintf@len,w,c
  7362  000250  503D               	movf	sprintf@width+1,w,c
  7363  000252  5836               	subwfb	sprintf@len+1,w,c
  7364  000254  B0D8               	btfsc	status,0,c
  7365  000256  D005               	goto	l4049
  7366                           
  7367                           ;doprnt.c: 758: width -= len;
  7368  000258  5035               	movf	sprintf@len,w,c
  7369  00025A  5E3C               	subwf	sprintf@width,f,c
  7370  00025C  5036               	movf	sprintf@len+1,w,c
  7371  00025E  5A3D               	subwfb	sprintf@width+1,f,c
  7372  000260  D004               	goto	l4051
  7373  000262                     l4049:
  7374                           
  7375                           ;doprnt.c: 759: else
  7376                           ;doprnt.c: 760: width = 0;
  7377  000262  0E00               	movlw	0
  7378  000264  6E3D               	movwf	sprintf@width+1,c
  7379  000266  0E00               	movlw	0
  7380  000268  6E3C               	movwf	sprintf@width,c
  7381  00026A                     l4051:
  7382                           
  7383                           ;doprnt.c: 762: if(!(flag & 0x08))
  7384  00026A  A63F               	btfss	sprintf@flag,3,c
  7385  00026C  D009               	goto	l4059
  7386  00026E  D02A               	goto	l4067
  7387  000270                     l4055:
  7388                           
  7389                           ;doprnt.c: 765: ((*sp++ = (' ')));
  7390  000270  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7391  000274  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7392  000278  0E20               	movlw	32
  7393  00027A  6EDF               	movwf	indf2,c
  7394  00027C  4A1E               	infsnz	sprintf@sp,f,c
  7395  00027E  2A1F               	incf	sprintf@sp+1,f,c
  7396  000280                     l4059:
  7397  000280  063C               	decf	sprintf@width,f,c
  7398  000282  A0D8               	btfss	status,0,c
  7399  000284  063D               	decf	sprintf@width+1,f,c
  7400  000286  283C               	incf	sprintf@width,w,c
  7401  000288  E1F3               	bnz	l4055
  7402  00028A  283D               	incf	sprintf@width+1,w,c
  7403  00028C  B4D8               	btfsc	status,2,c
  7404  00028E  D01A               	goto	l4067
  7405  000290  D7EF               	goto	l4055
  7406  000292                     l4061:
  7407                           
  7408                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  7409  000292  C033  FFF6         	movff	sprintf@cp,tblptrl
  7410  000296  C034  FFF7         	movff	sprintf@cp+1,tblptrh
  7411  00029A  6AF8               	clrf	tblptru,c
  7412  00029C  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7413  0002A0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7414  0002A4  0E05               	movlw	(high __ramtop+-1)
  7415  0002A6  64F7               	cpfsgt	tblptrh,c
  7416  0002A8  D003               	bra	u4447
  7417  0002AA  0008               	tblrd		*
  7418  0002AC  50F5               	movf	tablat,w,c
  7419  0002AE  D005               	bra	u4440
  7420  0002B0                     u4447:
  7421  0002B0  CFF6 FFE1          	movff	tblptrl,fsr1l
  7422  0002B4  CFF7 FFE2          	movff	tblptrh,fsr1h
  7423  0002B8  50E7               	movf	indf1,w,c
  7424  0002BA                     u4440:
  7425  0002BA  6EDF               	movwf	indf2,c
  7426  0002BC  4A33               	infsnz	sprintf@cp,f,c
  7427  0002BE  2A34               	incf	sprintf@cp+1,f,c
  7428  0002C0  4A1E               	infsnz	sprintf@sp,f,c
  7429  0002C2  2A1F               	incf	sprintf@sp+1,f,c
  7430  0002C4                     l4067:
  7431  0002C4  0635               	decf	sprintf@len,f,c
  7432  0002C6  A0D8               	btfss	status,0,c
  7433  0002C8  0636               	decf	sprintf@len+1,f,c
  7434  0002CA  2835               	incf	sprintf@len,w,c
  7435  0002CC  E1E2               	bnz	l4061
  7436  0002CE  2836               	incf	sprintf@len+1,w,c
  7437  0002D0  A4D8               	btfss	status,2,c
  7438  0002D2  D7DF               	goto	l4061
  7439                           
  7440                           ;doprnt.c: 770: if(flag & 0x08)
  7441  0002D4  B63F               	btfsc	sprintf@flag,3,c
  7442  0002D6  D009               	goto	l4075
  7443  0002D8  D2D9               	goto	l4311
  7444  0002DA                     l4071:
  7445                           
  7446                           ;doprnt.c: 772: ((*sp++ = (' ')));
  7447  0002DA  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7448  0002DE  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7449  0002E2  0E20               	movlw	32
  7450  0002E4  6EDF               	movwf	indf2,c
  7451  0002E6  4A1E               	infsnz	sprintf@sp,f,c
  7452  0002E8  2A1F               	incf	sprintf@sp+1,f,c
  7453  0002EA                     l4075:
  7454  0002EA  063C               	decf	sprintf@width,f,c
  7455  0002EC  A0D8               	btfss	status,0,c
  7456  0002EE  063D               	decf	sprintf@width+1,f,c
  7457  0002F0  283C               	incf	sprintf@width,w,c
  7458  0002F2  E1F3               	bnz	l4071
  7459  0002F4  283D               	incf	sprintf@width+1,w,c
  7460  0002F6  B4D8               	btfsc	status,2,c
  7461  0002F8  D2C9               	goto	l4311
  7462  0002FA  D7EF               	goto	l4071
  7463  0002FC                     l4077:
  7464                           
  7465                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7466  0002FC  C037  FFD9         	movff	sprintf@ap,fsr2l
  7467  000300  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7468  000304  50DF               	movf	indf2,w,c
  7469  000306  6E3E               	movwf	sprintf@c,c
  7470  000308  0E02               	movlw	2
  7471  00030A  2637               	addwf	sprintf@ap,f,c
  7472  00030C  0E00               	movlw	0
  7473  00030E  2238               	addwfc	sprintf@ap+1,f,c
  7474  000310                     l4081:
  7475                           
  7476                           ;doprnt.c: 805: cp = (char *)&c;
  7477  000310  0E3E               	movlw	low sprintf@c
  7478  000312  6E33               	movwf	sprintf@cp,c
  7479  000314  0E00               	movlw	high sprintf@c
  7480  000316  6E34               	movwf	sprintf@cp+1,c
  7481                           
  7482                           ;doprnt.c: 806: len = 1;
  7483  000318  0E00               	movlw	0
  7484  00031A  6E36               	movwf	sprintf@len+1,c
  7485  00031C  0E01               	movlw	1
  7486  00031E  6E35               	movwf	sprintf@len,c
  7487                           
  7488                           ;doprnt.c: 807: goto dostring;
  7489  000320  D782               	goto	l4039
  7490  000322                     l4085:
  7491                           
  7492                           ;doprnt.c: 818: flag |= 0xC0;
  7493  000322  0EC0               	movlw	192
  7494  000324  123F               	iorwf	sprintf@flag,f,c
  7495                           
  7496                           ;doprnt.c: 822: }
  7497                           
  7498                           ;doprnt.c: 819: break;
  7499  000326  D029               	goto	l4091
  7500  000328                     l4089:
  7501  000328  C020  FFF6         	movff	sprintf@f,tblptrl
  7502  00032C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7503  000330  4A20               	infsnz	sprintf@f,f,c
  7504  000332  2A21               	incf	sprintf@f+1,f,c
  7505  000334                     	if	0	;tblptru may be non-zero
  7506  000334                     	endif
  7507  000334                     	if	0	;tblptru may be non-zero
  7508  000334                     	endif
  7509  000334  0008               	tblrd		*
  7510  000336  CFF5 F03E          	movff	tablat,sprintf@c
  7511  00033A  503E               	movf	sprintf@c,w,c
  7512                           
  7513                           ; Switch size 1, requested type "space"
  7514                           ; Number of cases is 10, Range of values is 0 to 120
  7515                           ; switch strategies available:
  7516                           ; Name         Instructions Cycles
  7517                           ; simple_byte           31    16 (average)
  7518                           ;	Chosen strategy is simple_byte
  7519  00033C  0A00               	xorlw	0	; case 0
  7520  00033E  B4D8               	btfsc	status,2,c
  7521  000340  D2B2               	goto	l4313
  7522  000342  0A58               	xorlw	88	; case 88
  7523  000344  B4D8               	btfsc	status,2,c
  7524  000346  D738               	goto	l442
  7525  000348  0A3B               	xorlw	59	; case 99
  7526  00034A  B4D8               	btfsc	status,2,c
  7527  00034C  D7D7               	goto	l4077
  7528  00034E  0A07               	xorlw	7	; case 100
  7529  000350  B4D8               	btfsc	status,2,c
  7530  000352  D013               	goto	l4091
  7531  000354  0A0D               	xorlw	13	; case 105
  7532  000356  B4D8               	btfsc	status,2,c
  7533  000358  D010               	goto	l4091
  7534  00035A  0A06               	xorlw	6	; case 111
  7535  00035C  B4D8               	btfsc	status,2,c
  7536  00035E  D729               	goto	l4021
  7537  000360  0A1F               	xorlw	31	; case 112
  7538  000362  B4D8               	btfsc	status,2,c
  7539  000364  D728               	goto	l4023
  7540  000366  0A03               	xorlw	3	; case 115
  7541  000368  B4D8               	btfsc	status,2,c
  7542  00036A  D729               	goto	l4025
  7543  00036C  0A06               	xorlw	6	; case 117
  7544  00036E  B4D8               	btfsc	status,2,c
  7545  000370  D7D8               	goto	l4085
  7546  000372  0A0D               	xorlw	13	; case 120
  7547  000374  B4D8               	btfsc	status,2,c
  7548  000376  D721               	goto	l443
  7549  000378  D7CB               	goto	l4081
  7550  00037A                     l4091:
  7551                           
  7552                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7553  00037A  0EC0               	movlw	192
  7554  00037C  143F               	andwf	sprintf@flag,w,c
  7555  00037E  6E28               	movwf	??_sprintf& (0+255),c
  7556  000380  0E00               	movlw	0
  7557  000382  1440               	andwf	sprintf@flag+1,w,c
  7558  000384  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7559  000386  5028               	movf	??_sprintf,w,c
  7560  000388  1029               	iorwf	??_sprintf+1,w,c
  7561  00038A  A4D8               	btfss	status,2,c
  7562  00038C  D015               	goto	l4103
  7563                           
  7564                           ;doprnt.c: 1253: {
  7565                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7566  00038E  C037  FFD9         	movff	sprintf@ap,fsr2l
  7567  000392  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7568  000396  CFDE F039          	movff	postinc2,sprintf@val
  7569  00039A  CFDD F03A          	movff	postdec2,sprintf@val+1
  7570  00039E  0E02               	movlw	2
  7571  0003A0  2637               	addwf	sprintf@ap,f,c
  7572  0003A2  0E00               	movlw	0
  7573  0003A4  2238               	addwfc	sprintf@ap+1,f,c
  7574                           
  7575                           ;doprnt.c: 1261: if((int)val < 0) {
  7576  0003A6  AE3A               	btfss	sprintf@val+1,7,c
  7577  0003A8  D013               	goto	l4107
  7578                           
  7579                           ;doprnt.c: 1262: flag |= 0x03;
  7580  0003AA  0E03               	movlw	3
  7581  0003AC  123F               	iorwf	sprintf@flag,f,c
  7582                           
  7583                           ;doprnt.c: 1263: val = -val;
  7584  0003AE  6C39               	negf	sprintf@val,c
  7585  0003B0  1E3A               	comf	sprintf@val+1,f,c
  7586  0003B2  B0D8               	btfsc	status,0,c
  7587  0003B4  2A3A               	incf	sprintf@val+1,f,c
  7588                           
  7589                           ;doprnt.c: 1264: }
  7590                           ;doprnt.c: 1266: }
  7591  0003B6  D00C               	goto	l4107
  7592  0003B8                     l4103:
  7593                           
  7594                           ;doprnt.c: 1268: else
  7595                           ;doprnt.c: 1273: {
  7596                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7597  0003B8  C037  FFD9         	movff	sprintf@ap,fsr2l
  7598  0003BC  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  7599  0003C0  CFDE F039          	movff	postinc2,sprintf@val
  7600  0003C4  CFDD F03A          	movff	postdec2,sprintf@val+1
  7601  0003C8  0E02               	movlw	2
  7602  0003CA  2637               	addwf	sprintf@ap,f,c
  7603  0003CC  0E00               	movlw	0
  7604  0003CE  2238               	addwfc	sprintf@ap+1,f,c
  7605  0003D0                     l4107:
  7606                           
  7607                           ;doprnt.c: 1287: }
  7608                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7609  0003D0  503B               	movf	sprintf@prec,w,c
  7610  0003D2  A4D8               	btfss	status,2,c
  7611  0003D4  D04E               	goto	l4157
  7612  0003D6  5039               	movf	sprintf@val,w,c
  7613  0003D8  103A               	iorwf	sprintf@val+1,w,c
  7614  0003DA  A4D8               	btfss	status,2,c
  7615  0003DC  D04A               	goto	l4157
  7616                           
  7617                           ;doprnt.c: 1291: prec++;
  7618  0003DE  2A3B               	incf	sprintf@prec,f,c
  7619                           
  7620                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7621  0003E0  D048               	goto	l4157
  7622  0003E2                     l4113:
  7623                           
  7624                           ;doprnt.c: 1302: case 0xC0:
  7625                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7626  0003E2  0E01               	movlw	1
  7627  0003E4  6E3E               	movwf	sprintf@c,c
  7628  0003E6                     l4115:
  7629  0003E6  0E05               	movlw	5
  7630  0003E8  183E               	xorwf	sprintf@c,w,c
  7631  0003EA  B4D8               	btfsc	status,2,c
  7632  0003EC  D050               	goto	l4159
  7633                           
  7634                           ;doprnt.c: 1306: if(val < dpowers[c])
  7635  0003EE  503E               	movf	sprintf@c,w,c
  7636  0003F0  0D02               	mullw	2
  7637  0003F2  0E07               	movlw	low _dpowers
  7638  0003F4  24F3               	addwf	prodl,w,c
  7639  0003F6  6EF6               	movwf	tblptrl,c
  7640  0003F8  0E7E               	movlw	high _dpowers
  7641  0003FA  20F4               	addwfc	prodh,w,c
  7642  0003FC  6EF7               	movwf	tblptrh,c
  7643  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  7644  0003FE                     	endif
  7645  0003FE  0009               	tblrd		*+
  7646  000400  50F5               	movf	tablat,w,c
  7647  000402  5C39               	subwf	sprintf@val,w,c
  7648  000404  0009               	tblrd		*+
  7649  000406  50F5               	movf	tablat,w,c
  7650  000408  583A               	subwfb	sprintf@val+1,w,c
  7651  00040A  A0D8               	btfss	status,0,c
  7652  00040C  D040               	goto	l4159
  7653                           
  7654                           ;doprnt.c: 1307: break;
  7655  00040E  2A3E               	incf	sprintf@c,f,c
  7656  000410  D7EA               	goto	l4115
  7657  000412                     l4127:
  7658                           
  7659                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7660  000412  0E01               	movlw	1
  7661  000414  6E3E               	movwf	sprintf@c,c
  7662  000416                     l4129:
  7663  000416  0E04               	movlw	4
  7664  000418  183E               	xorwf	sprintf@c,w,c
  7665  00041A  B4D8               	btfsc	status,2,c
  7666  00041C  D038               	goto	l4159
  7667                           
  7668                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7669  00041E  503E               	movf	sprintf@c,w,c
  7670  000420  0D02               	mullw	2
  7671  000422  0E11               	movlw	low _hexpowers
  7672  000424  24F3               	addwf	prodl,w,c
  7673  000426  6EF6               	movwf	tblptrl,c
  7674  000428  0E7E               	movlw	high _hexpowers
  7675  00042A  20F4               	addwfc	prodh,w,c
  7676  00042C  6EF7               	movwf	tblptrh,c
  7677  00042E                     	if	0	;There are less than 3 active tblptr bytes
  7678  00042E                     	endif
  7679  00042E  0009               	tblrd		*+
  7680  000430  50F5               	movf	tablat,w,c
  7681  000432  5C39               	subwf	sprintf@val,w,c
  7682  000434  0009               	tblrd		*+
  7683  000436  50F5               	movf	tablat,w,c
  7684  000438  583A               	subwfb	sprintf@val+1,w,c
  7685  00043A  A0D8               	btfss	status,0,c
  7686  00043C  D028               	goto	l4159
  7687                           
  7688                           ;doprnt.c: 1318: break;
  7689  00043E  2A3E               	incf	sprintf@c,f,c
  7690  000440  D7EA               	goto	l4129
  7691  000442                     l4141:
  7692                           
  7693                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  7694  000442  0E01               	movlw	1
  7695  000444  6E3E               	movwf	sprintf@c,c
  7696  000446                     l4143:
  7697  000446  0E06               	movlw	6
  7698  000448  183E               	xorwf	sprintf@c,w,c
  7699  00044A  B4D8               	btfsc	status,2,c
  7700  00044C  D020               	goto	l4159
  7701                           
  7702                           ;doprnt.c: 1329: if(val < octpowers[c])
  7703  00044E  503E               	movf	sprintf@c,w,c
  7704  000450  0D02               	mullw	2
  7705  000452  0EFB               	movlw	low _octpowers
  7706  000454  24F3               	addwf	prodl,w,c
  7707  000456  6EF6               	movwf	tblptrl,c
  7708  000458  0E7D               	movlw	high _octpowers
  7709  00045A  20F4               	addwfc	prodh,w,c
  7710  00045C  6EF7               	movwf	tblptrh,c
  7711  00045E                     	if	0	;There are less than 3 active tblptr bytes
  7712  00045E                     	endif
  7713  00045E  0009               	tblrd		*+
  7714  000460  50F5               	movf	tablat,w,c
  7715  000462  5C39               	subwf	sprintf@val,w,c
  7716  000464  0009               	tblrd		*+
  7717  000466  50F5               	movf	tablat,w,c
  7718  000468  583A               	subwfb	sprintf@val+1,w,c
  7719  00046A  A0D8               	btfss	status,0,c
  7720  00046C  D010               	goto	l4159
  7721                           
  7722                           ;doprnt.c: 1330: break;
  7723  00046E  2A3E               	incf	sprintf@c,f,c
  7724  000470  D7EA               	goto	l4143
  7725  000472                     l4157:
  7726  000472  503F               	movf	sprintf@flag,w,c
  7727  000474  0BC0               	andlw	192
  7728                           
  7729                           ; Switch size 1, requested type "space"
  7730                           ; Number of cases is 4, Range of values is 0 to 192
  7731                           ; switch strategies available:
  7732                           ; Name         Instructions Cycles
  7733                           ; simple_byte           13     7 (average)
  7734                           ;	Chosen strategy is simple_byte
  7735  000476  0A00               	xorlw	0	; case 0
  7736  000478  B4D8               	btfsc	status,2,c
  7737  00047A  D7B3               	goto	l4113
  7738  00047C  0A40               	xorlw	64	; case 64
  7739  00047E  B4D8               	btfsc	status,2,c
  7740  000480  D7E0               	goto	l4141
  7741  000482  0AC0               	xorlw	192	; case 128
  7742  000484  B4D8               	btfsc	status,2,c
  7743  000486  D7C5               	goto	l4127
  7744  000488  0A40               	xorlw	64	; case 192
  7745  00048A  B4D8               	btfsc	status,2,c
  7746  00048C  D7AA               	goto	l4113
  7747  00048E                     l4159:
  7748                           
  7749                           ;doprnt.c: 1339: if(c < prec)
  7750  00048E  503E               	movf	sprintf@c,w,c
  7751  000490  0A80               	xorlw	128
  7752  000492  6E28               	movwf	??_sprintf& (0+255),c
  7753  000494  503B               	movf	sprintf@prec,w,c
  7754  000496  0A80               	xorlw	128
  7755  000498  5C28               	subwf	??_sprintf& (0+255),w,c
  7756  00049A  B0D8               	btfsc	status,0,c
  7757  00049C  D003               	goto	l4163
  7758                           
  7759                           ;doprnt.c: 1340: c = prec;
  7760  00049E  C03B  F03E         	movff	sprintf@prec,sprintf@c
  7761  0004A2  D009               	goto	l4167
  7762  0004A4                     l4163:
  7763                           
  7764                           ;doprnt.c: 1341: else if(prec < c)
  7765  0004A4  503B               	movf	sprintf@prec,w,c
  7766  0004A6  0A80               	xorlw	128
  7767  0004A8  6E28               	movwf	??_sprintf& (0+255),c
  7768  0004AA  503E               	movf	sprintf@c,w,c
  7769  0004AC  0A80               	xorlw	128
  7770  0004AE  5C28               	subwf	??_sprintf& (0+255),w,c
  7771  0004B0  A0D8               	btfss	status,0,c
  7772                           
  7773                           ;doprnt.c: 1342: prec = c;
  7774  0004B2  C03E  F03B         	movff	sprintf@c,sprintf@prec
  7775  0004B6                     l4167:
  7776                           
  7777                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7778  0004B6  503C               	movf	sprintf@width,w,c
  7779  0004B8  103D               	iorwf	sprintf@width+1,w,c
  7780  0004BA  B4D8               	btfsc	status,2,c
  7781  0004BC  D00D               	goto	l4173
  7782  0004BE  0E03               	movlw	3
  7783  0004C0  143F               	andwf	sprintf@flag,w,c
  7784  0004C2  6E28               	movwf	??_sprintf& (0+255),c
  7785  0004C4  0E00               	movlw	0
  7786  0004C6  1440               	andwf	sprintf@flag+1,w,c
  7787  0004C8  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7788  0004CA  5028               	movf	??_sprintf,w,c
  7789  0004CC  1029               	iorwf	??_sprintf+1,w,c
  7790  0004CE  B4D8               	btfsc	status,2,c
  7791  0004D0  D003               	goto	l4173
  7792                           
  7793                           ;doprnt.c: 1346: width--;
  7794  0004D2  063C               	decf	sprintf@width,f,c
  7795  0004D4  A0D8               	btfss	status,0,c
  7796  0004D6  063D               	decf	sprintf@width+1,f,c
  7797  0004D8                     l4173:
  7798                           
  7799                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7800  0004D8  AC40               	btfss	sprintf@flag+1,6,c
  7801  0004DA  D016               	goto	l4181
  7802                           
  7803                           ;doprnt.c: 1349: if(width > prec)
  7804  0004DC  0E80               	movlw	128
  7805  0004DE  BE3B               	btfsc	sprintf@prec,7,c
  7806  0004E0  0E7F               	movlw	127
  7807  0004E2  6E28               	movwf	??_sprintf& (0+255),c
  7808  0004E4  503C               	movf	sprintf@width,w,c
  7809  0004E6  5C3B               	subwf	sprintf@prec,w,c
  7810  0004E8  503D               	movf	sprintf@width+1,w,c
  7811  0004EA  0A80               	xorlw	128
  7812  0004EC  5828               	subwfb	??_sprintf& (0+255),w,c
  7813  0004EE  B0D8               	btfsc	status,0,c
  7814  0004F0  D007               	goto	l4179
  7815                           
  7816                           ;doprnt.c: 1350: width -= prec;
  7817  0004F2  503B               	movf	sprintf@prec,w,c
  7818  0004F4  5E3C               	subwf	sprintf@width,f,c
  7819  0004F6  0E00               	movlw	0
  7820  0004F8  BE3B               	btfsc	sprintf@prec,7,c
  7821  0004FA  0EFF               	movlw	255
  7822  0004FC  5A3D               	subwfb	sprintf@width+1,f,c
  7823  0004FE  D004               	goto	l4181
  7824  000500                     l4179:
  7825                           
  7826                           ;doprnt.c: 1351: else
  7827                           ;doprnt.c: 1352: width = 0;
  7828  000500  0E00               	movlw	0
  7829  000502  6E3D               	movwf	sprintf@width+1,c
  7830  000504  0E00               	movlw	0
  7831  000506  6E3C               	movwf	sprintf@width,c
  7832  000508                     l4181:
  7833                           
  7834                           ;doprnt.c: 1353: }
  7835                           ;doprnt.c: 1357: if((flag & (
  7836                           ;doprnt.c: 1359: 0x04|
  7837                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  7838  000508  0EC4               	movlw	196
  7839  00050A  6E28               	movwf	??_sprintf& (0+255),c
  7840  00050C  0E08               	movlw	8
  7841  00050E  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7842  000510  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  7843  000514  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  7844  000518  5028               	movf	??_sprintf,w,c
  7845  00051A  162A               	andwf	??_sprintf+2,f,c
  7846  00051C  5029               	movf	??_sprintf+1,w,c
  7847  00051E  162B               	andwf	??_sprintf+3,f,c
  7848  000520  0E40               	movlw	64
  7849  000522  182A               	xorwf	??_sprintf+2,w,c
  7850  000524  E10C               	bnz	l4187
  7851  000526  0E08               	movlw	8
  7852  000528  182B               	xorwf	??_sprintf+3,w,c
  7853  00052A  A4D8               	btfss	status,2,c
  7854  00052C  D008               	goto	l4187
  7855                           
  7856                           ;doprnt.c: 1362: if(width)
  7857  00052E  503C               	movf	sprintf@width,w,c
  7858  000530  103D               	iorwf	sprintf@width+1,w,c
  7859  000532  B4D8               	btfsc	status,2,c
  7860  000534  D028               	goto	l4195
  7861                           
  7862                           ;doprnt.c: 1363: width--;
  7863  000536  063C               	decf	sprintf@width,f,c
  7864  000538  A0D8               	btfss	status,0,c
  7865  00053A  063D               	decf	sprintf@width+1,f,c
  7866                           
  7867                           ;doprnt.c: 1364: } else
  7868  00053C  D024               	goto	l4195
  7869  00053E                     l4187:
  7870                           
  7871                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  7872  00053E  0EC0               	movlw	192
  7873  000540  6E28               	movwf	??_sprintf& (0+255),c
  7874  000542  0E08               	movlw	8
  7875  000544  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7876  000546  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  7877  00054A  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  7878  00054E  5028               	movf	??_sprintf,w,c
  7879  000550  162A               	andwf	??_sprintf+2,f,c
  7880  000552  5029               	movf	??_sprintf+1,w,c
  7881  000554  162B               	andwf	??_sprintf+3,f,c
  7882  000556  0E80               	movlw	128
  7883  000558  182A               	xorwf	??_sprintf+2,w,c
  7884  00055A  E115               	bnz	l4195
  7885  00055C  0E08               	movlw	8
  7886  00055E  182B               	xorwf	??_sprintf+3,w,c
  7887  000560  A4D8               	btfss	status,2,c
  7888  000562  D011               	goto	l4195
  7889                           
  7890                           ;doprnt.c: 1372: if(width > 2)
  7891  000564  BE3D               	btfsc	sprintf@width+1,7,c
  7892  000566  D00B               	goto	l4193
  7893  000568  503D               	movf	sprintf@width+1,w,c
  7894  00056A  E104               	bnz	u4700
  7895  00056C  0E03               	movlw	3
  7896  00056E  5C3C               	subwf	sprintf@width,w,c
  7897  000570  A0D8               	btfss	status,0,c
  7898  000572  D005               	goto	l4193
  7899  000574                     u4700:
  7900                           
  7901                           ;doprnt.c: 1373: width -= 2;
  7902  000574  0EFE               	movlw	254
  7903  000576  263C               	addwf	sprintf@width,f,c
  7904  000578  0EFF               	movlw	255
  7905  00057A  223D               	addwfc	sprintf@width+1,f,c
  7906  00057C  D004               	goto	l4195
  7907  00057E                     l4193:
  7908                           
  7909                           ;doprnt.c: 1374: else
  7910                           ;doprnt.c: 1375: width = 0;
  7911  00057E  0E00               	movlw	0
  7912  000580  6E3D               	movwf	sprintf@width+1,c
  7913  000582  0E00               	movlw	0
  7914  000584  6E3C               	movwf	sprintf@width,c
  7915  000586                     l4195:
  7916                           
  7917                           ;doprnt.c: 1376: }
  7918                           ;doprnt.c: 1381: if(width > c)
  7919  000586  0E80               	movlw	128
  7920  000588  BE3E               	btfsc	sprintf@c,7,c
  7921  00058A  0E7F               	movlw	127
  7922  00058C  6E28               	movwf	??_sprintf& (0+255),c
  7923  00058E  503C               	movf	sprintf@width,w,c
  7924  000590  5C3E               	subwf	sprintf@c,w,c
  7925  000592  503D               	movf	sprintf@width+1,w,c
  7926  000594  0A80               	xorlw	128
  7927  000596  5828               	subwfb	??_sprintf& (0+255),w,c
  7928  000598  B0D8               	btfsc	status,0,c
  7929  00059A  D007               	goto	l4199
  7930                           
  7931                           ;doprnt.c: 1382: width -= c;
  7932  00059C  503E               	movf	sprintf@c,w,c
  7933  00059E  5E3C               	subwf	sprintf@width,f,c
  7934  0005A0  0E00               	movlw	0
  7935  0005A2  BE3E               	btfsc	sprintf@c,7,c
  7936  0005A4  0EFF               	movlw	255
  7937  0005A6  5A3D               	subwfb	sprintf@width+1,f,c
  7938  0005A8  D004               	goto	l4201
  7939  0005AA                     l4199:
  7940                           
  7941                           ;doprnt.c: 1383: else
  7942                           ;doprnt.c: 1384: width = 0;
  7943  0005AA  0E00               	movlw	0
  7944  0005AC  6E3D               	movwf	sprintf@width+1,c
  7945  0005AE  0E00               	movlw	0
  7946  0005B0  6E3C               	movwf	sprintf@width,c
  7947  0005B2                     l4201:
  7948                           
  7949                           ;doprnt.c: 1387: if(flag & 0x04) {
  7950  0005B2  A43F               	btfss	sprintf@flag,2,c
  7951  0005B4  D058               	goto	l4237
  7952                           
  7953                           ;doprnt.c: 1392: if(flag & 0x03)
  7954  0005B6  0E03               	movlw	3
  7955  0005B8  143F               	andwf	sprintf@flag,w,c
  7956  0005BA  6E28               	movwf	??_sprintf& (0+255),c
  7957  0005BC  0E00               	movlw	0
  7958  0005BE  1440               	andwf	sprintf@flag+1,w,c
  7959  0005C0  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7960  0005C2  5028               	movf	??_sprintf,w,c
  7961  0005C4  1029               	iorwf	??_sprintf+1,w,c
  7962  0005C6  B4D8               	btfsc	status,2,c
  7963  0005C8  D009               	goto	l502
  7964                           
  7965                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  7966  0005CA  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7967  0005CE  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7968  0005D2  0E2D               	movlw	45
  7969  0005D4  D00A               	goto	L13
  7970  0005D6                     l4207:
  7971  0005D6  4A1E               	infsnz	sprintf@sp,f,c
  7972  0005D8  2A1F               	incf	sprintf@sp+1,f,c
  7973  0005DA  D035               	goto	l4229
  7974  0005DC                     l502:
  7975                           
  7976                           ;doprnt.c: 1396: else
  7977                           ;doprnt.c: 1399: if(flag & 0x01)
  7978  0005DC  A03F               	btfss	sprintf@flag,0,c
  7979  0005DE  D007               	goto	l4213
  7980                           
  7981                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  7982  0005E0  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7983  0005E4  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7984  0005E8  0E20               	movlw	32
  7985  0005EA                     L13:
  7986  0005EA  6EDF               	movwf	indf2,c
  7987  0005EC  D7F4               	goto	l4207
  7988  0005EE                     l4213:
  7989                           
  7990                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  7991  0005EE  0EC0               	movlw	192
  7992  0005F0  6E28               	movwf	??_sprintf& (0+255),c
  7993  0005F2  0E08               	movlw	8
  7994  0005F4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  7995  0005F6  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  7996  0005FA  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  7997  0005FE  5028               	movf	??_sprintf,w,c
  7998  000600  162A               	andwf	??_sprintf+2,f,c
  7999  000602  5029               	movf	??_sprintf+1,w,c
  8000  000604  162B               	andwf	??_sprintf+3,f,c
  8001  000606  0E80               	movlw	128
  8002  000608  182A               	xorwf	??_sprintf+2,w,c
  8003  00060A  E11D               	bnz	l4229
  8004  00060C  0E08               	movlw	8
  8005  00060E  182B               	xorwf	??_sprintf+3,w,c
  8006  000610  A4D8               	btfss	status,2,c
  8007  000612  D019               	goto	l4229
  8008                           
  8009                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  8010  000614  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8011  000618  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8012  00061C  0E30               	movlw	48
  8013  00061E  6EDF               	movwf	indf2,c
  8014  000620  4A1E               	infsnz	sprintf@sp,f,c
  8015  000622  2A1F               	incf	sprintf@sp+1,f,c
  8016                           
  8017                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  8018  000624  BA3F               	btfsc	sprintf@flag,5,c
  8019  000626  D004               	goto	l4223
  8020  000628  0E00               	movlw	0
  8021  00062A  6E2E               	movwf	_sprintf$1371+1,c
  8022  00062C  0E78               	movlw	120
  8023  00062E  D003               	goto	L14
  8024  000630                     l4223:
  8025  000630  0E00               	movlw	0
  8026  000632  6E2E               	movwf	_sprintf$1371+1,c
  8027  000634  0E58               	movlw	88
  8028  000636                     L14:
  8029  000636  6E2D               	movwf	_sprintf$1371,c
  8030  000638  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8031  00063C  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8032  000640  C02D  FFDF         	movff	_sprintf$1371,indf2
  8033  000644  D7C8               	goto	l4207
  8034  000646                     l4229:
  8035                           
  8036                           ;doprnt.c: 1412: }
  8037                           ;doprnt.c: 1415: if(width)
  8038  000646  503C               	movf	sprintf@width,w,c
  8039  000648  103D               	iorwf	sprintf@width+1,w,c
  8040  00064A  B4D8               	btfsc	status,2,c
  8041  00064C  D104               	goto	l4301
  8042                           
  8043                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  8044                           
  8045                           ;doprnt.c: 1416: do
  8046  00064E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8047  000652  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8048  000656  0E30               	movlw	48
  8049  000658  6EDF               	movwf	indf2,c
  8050  00065A  4A1E               	infsnz	sprintf@sp,f,c
  8051  00065C  2A1F               	incf	sprintf@sp+1,f,c
  8052                           
  8053                           ;doprnt.c: 1418: while(--width);
  8054  00065E  063C               	decf	sprintf@width,f,c
  8055  000660  A0D8               	btfss	status,0,c
  8056  000662  063D               	decf	sprintf@width+1,f,c
  8057  000664  D7F0               	goto	l4229
  8058  000666                     l4237:
  8059                           
  8060                           ;doprnt.c: 1422: {
  8061                           ;doprnt.c: 1424: if(width
  8062                           ;doprnt.c: 1426: && !(flag & 0x08)
  8063                           ;doprnt.c: 1428: )
  8064  000666  503C               	movf	sprintf@width,w,c
  8065  000668  103D               	iorwf	sprintf@width+1,w,c
  8066  00066A  A4D8               	btfss	status,2,c
  8067  00066C  B63F               	btfsc	sprintf@flag,3,c
  8068  00066E  D00F               	goto	l4247
  8069  000670                     l4241:
  8070                           
  8071                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  8072  000670  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8073  000674  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8074  000678  0E20               	movlw	32
  8075  00067A  6EDF               	movwf	indf2,c
  8076  00067C  4A1E               	infsnz	sprintf@sp,f,c
  8077  00067E  2A1F               	incf	sprintf@sp+1,f,c
  8078                           
  8079                           ;doprnt.c: 1431: while(--width);
  8080  000680  063C               	decf	sprintf@width,f,c
  8081  000682  A0D8               	btfss	status,0,c
  8082  000684  063D               	decf	sprintf@width+1,f,c
  8083  000686  503C               	movf	sprintf@width,w,c
  8084  000688  103D               	iorwf	sprintf@width+1,w,c
  8085  00068A  A4D8               	btfss	status,2,c
  8086  00068C  D7F1               	goto	l4241
  8087  00068E                     l4247:
  8088                           
  8089                           ;doprnt.c: 1438: if(flag & 0x03)
  8090  00068E  0E03               	movlw	3
  8091  000690  143F               	andwf	sprintf@flag,w,c
  8092  000692  6E28               	movwf	??_sprintf& (0+255),c
  8093  000694  0E00               	movlw	0
  8094  000696  1440               	andwf	sprintf@flag+1,w,c
  8095  000698  6E29               	movwf	(??_sprintf+1)& (0+255),c
  8096  00069A  5028               	movf	??_sprintf,w,c
  8097  00069C  1029               	iorwf	??_sprintf+1,w,c
  8098  00069E  B4D8               	btfsc	status,2,c
  8099  0006A0  D009               	goto	l518
  8100                           
  8101                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8102  0006A2  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8103  0006A6  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8104  0006AA  0E2D               	movlw	45
  8105  0006AC  D00A               	goto	L15
  8106  0006AE                     l4251:
  8107  0006AE  4A1E               	infsnz	sprintf@sp,f,c
  8108  0006B0  2A1F               	incf	sprintf@sp+1,f,c
  8109  0006B2  D009               	goto	l4257
  8110  0006B4                     l518:
  8111                           
  8112                           ;doprnt.c: 1443: else if(flag & 0x01)
  8113  0006B4  A03F               	btfss	sprintf@flag,0,c
  8114  0006B6  D007               	goto	l4257
  8115                           
  8116                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  8117  0006B8  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8118  0006BC  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8119  0006C0  0E20               	movlw	32
  8120  0006C2                     L15:
  8121  0006C2  6EDF               	movwf	indf2,c
  8122  0006C4  D7F4               	goto	l4251
  8123  0006C6                     l4257:
  8124                           
  8125                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  8126  0006C6  0EC0               	movlw	192
  8127  0006C8  6E28               	movwf	??_sprintf& (0+255),c
  8128  0006CA  0E08               	movlw	8
  8129  0006CC  6E29               	movwf	(??_sprintf+1)& (0+255),c
  8130  0006CE  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  8131  0006D2  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  8132  0006D6  5028               	movf	??_sprintf,w,c
  8133  0006D8  162A               	andwf	??_sprintf+2,f,c
  8134  0006DA  5029               	movf	??_sprintf+1,w,c
  8135  0006DC  162B               	andwf	??_sprintf+3,f,c
  8136  0006DE  0E40               	movlw	64
  8137  0006E0  182A               	xorwf	??_sprintf+2,w,c
  8138  0006E2  E10B               	bnz	l4263
  8139  0006E4  0E08               	movlw	8
  8140  0006E6  182B               	xorwf	??_sprintf+3,w,c
  8141  0006E8  A4D8               	btfss	status,2,c
  8142  0006EA  D007               	goto	l4263
  8143                           
  8144                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  8145  0006EC  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8146  0006F0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8147  0006F4  0E30               	movlw	48
  8148  0006F6  6EDF               	movwf	indf2,c
  8149  0006F8  D0AC               	goto	l4299
  8150  0006FA                     l4263:
  8151                           
  8152                           ;doprnt.c: 1450: else
  8153                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  8154  0006FA  0EC0               	movlw	192
  8155  0006FC  6E28               	movwf	??_sprintf& (0+255),c
  8156  0006FE  0E08               	movlw	8
  8157  000700  6E29               	movwf	(??_sprintf+1)& (0+255),c
  8158  000702  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  8159  000706  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  8160  00070A  5028               	movf	??_sprintf,w,c
  8161  00070C  162A               	andwf	??_sprintf+2,f,c
  8162  00070E  5029               	movf	??_sprintf+1,w,c
  8163  000710  162B               	andwf	??_sprintf+3,f,c
  8164  000712  0E80               	movlw	128
  8165  000714  182A               	xorwf	??_sprintf+2,w,c
  8166  000716  E103               	bnz	u4851
  8167  000718  0E08               	movlw	8
  8168  00071A  182B               	xorwf	??_sprintf+3,w,c
  8169  00071C  A4D8               	btfss	status,2,c
  8170  00071E                     u4851:
  8171  00071E  D09B               	goto	l4301
  8172                           
  8173                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  8174  000720  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8175  000724  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8176  000728  0E30               	movlw	48
  8177  00072A  6EDF               	movwf	indf2,c
  8178  00072C  4A1E               	infsnz	sprintf@sp,f,c
  8179  00072E  2A1F               	incf	sprintf@sp+1,f,c
  8180                           
  8181                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  8182  000730  BA3F               	btfsc	sprintf@flag,5,c
  8183  000732  D004               	goto	l4273
  8184  000734  0E00               	movlw	0
  8185  000736  6E30               	movwf	_sprintf$1372+1,c
  8186  000738  0E78               	movlw	120
  8187  00073A  D003               	goto	L16
  8188  00073C                     l4273:
  8189  00073C  0E00               	movlw	0
  8190  00073E  6E30               	movwf	_sprintf$1372+1,c
  8191  000740  0E58               	movlw	88
  8192  000742                     L16:
  8193  000742  6E2F               	movwf	_sprintf$1372,c
  8194  000744  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8195  000748  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8196  00074C  C02F  FFDF         	movff	_sprintf$1372,indf2
  8197  000750  D080               	goto	l4299
  8198  000752                     l4279:
  8199                           
  8200                           ;doprnt.c: 1486: case 0xC0:
  8201                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8202  000752  503B               	movf	sprintf@prec,w,c
  8203  000754  0D02               	mullw	2
  8204  000756  0E07               	movlw	low _dpowers
  8205  000758  24F3               	addwf	prodl,w,c
  8206  00075A  6EF6               	movwf	tblptrl,c
  8207  00075C  0E7E               	movlw	high _dpowers
  8208  00075E  20F4               	addwfc	prodh,w,c
  8209  000760  6EF7               	movwf	tblptrh,c
  8210  000762                     	if	0	;There are less than 3 active tblptr bytes
  8211  000762                     	endif
  8212  000762  0009               	tblrd		*+
  8213  000764  CFF5 F014          	movff	tablat,___lwdiv@divisor
  8214  000768  000A               	tblrd		*-
  8215  00076A  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  8216  00076E  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  8217  000772  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  8218  000776  EC6D  F014         	call	___lwdiv	;wreg free
  8219  00077A  C012  F019         	movff	?___lwdiv,___lwmod@dividend
  8220  00077E  C013  F01A         	movff	?___lwdiv+1,___lwmod@dividend+1
  8221  000782  0E00               	movlw	0
  8222  000784  6E1C               	movwf	___lwmod@divisor+1,c
  8223  000786  0E0A               	movlw	10
  8224  000788  6E1B               	movwf	___lwmod@divisor,c
  8225  00078A  EC96  F014         	call	___lwmod	;wreg free
  8226  00078E  5019               	movf	?___lwmod,w,c
  8227  000790  D049               	goto	L17
  8228  000792                     l4281:
  8229                           
  8230                           ;doprnt.c: 1499: {
  8231                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8232  000792  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  8233  000796  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  8234  00079A  503B               	movf	sprintf@prec,w,c
  8235  00079C  0D02               	mullw	2
  8236  00079E  0E11               	movlw	low _hexpowers
  8237  0007A0  24F3               	addwf	prodl,w,c
  8238  0007A2  6EF6               	movwf	tblptrl,c
  8239  0007A4  0E7E               	movlw	high _hexpowers
  8240  0007A6  20F4               	addwfc	prodh,w,c
  8241  0007A8  6EF7               	movwf	tblptrh,c
  8242  0007AA                     	if	0	;There are less than 3 active tblptr bytes
  8243  0007AA                     	endif
  8244  0007AA  0009               	tblrd		*+
  8245  0007AC  CFF5 F014          	movff	tablat,___lwdiv@divisor
  8246  0007B0  000A               	tblrd		*-
  8247  0007B2  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  8248  0007B6  EC6D  F014         	call	___lwdiv	;wreg free
  8249  0007BA  5012               	movf	?___lwdiv,w,c
  8250  0007BC  0B0F               	andlw	15
  8251  0007BE  6E2C               	movwf	sprintf@idx,c
  8252                           
  8253                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  8254  0007C0  BA3F               	btfsc	sprintf@flag,5,c
  8255  0007C2  D004               	goto	l4287
  8256  0007C4  0EC6               	movlw	low STR_66
  8257  0007C6  6E31               	movwf	_sprintf$1378,c
  8258  0007C8  0E7E               	movlw	high STR_66
  8259  0007CA  D003               	goto	L18
  8260  0007CC                     l4287:
  8261  0007CC  0EB5               	movlw	low STR_65
  8262  0007CE  6E31               	movwf	_sprintf$1378,c
  8263  0007D0  0E7E               	movlw	high STR_65
  8264  0007D2                     L18:
  8265  0007D2  6E32               	movwf	_sprintf$1378+1,c
  8266  0007D4  502C               	movf	sprintf@idx,w,c
  8267  0007D6  0D01               	mullw	1
  8268  0007D8  C031  F028         	movff	_sprintf$1378,??_sprintf
  8269  0007DC  C032  F029         	movff	_sprintf$1378+1,??_sprintf+1
  8270  0007E0  50F3               	movf	prodl,w,c
  8271  0007E2  2628               	addwf	??_sprintf,f,c
  8272  0007E4  50F4               	movf	prodh,w,c
  8273  0007E6  2229               	addwfc	??_sprintf+1,f,c
  8274  0007E8  C028  FFF6         	movff	??_sprintf,tblptrl
  8275  0007EC  C029  FFF7         	movff	??_sprintf+1,tblptrh
  8276  0007F0                     	if	0	;tblptru may be non-zero
  8277  0007F0                     	endif
  8278  0007F0                     	if	0	;tblptru may be non-zero
  8279  0007F0                     	endif
  8280  0007F0  0008               	tblrd		*
  8281  0007F2  CFF5 F03E          	movff	tablat,sprintf@c
  8282                           
  8283                           ;doprnt.c: 1508: }
  8284                           ;doprnt.c: 1510: break;
  8285  0007F6  D027               	goto	l4297
  8286  0007F8                     l4291:
  8287                           
  8288                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  8289  0007F8  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  8290  0007FC  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  8291  000800  503B               	movf	sprintf@prec,w,c
  8292  000802  0D02               	mullw	2
  8293  000804  0EFB               	movlw	low _octpowers
  8294  000806  24F3               	addwf	prodl,w,c
  8295  000808  6EF6               	movwf	tblptrl,c
  8296  00080A  0E7D               	movlw	high _octpowers
  8297  00080C  20F4               	addwfc	prodh,w,c
  8298  00080E  6EF7               	movwf	tblptrh,c
  8299  000810                     	if	0	;There are less than 3 active tblptr bytes
  8300  000810                     	endif
  8301  000810  0009               	tblrd		*+
  8302  000812  CFF5 F014          	movff	tablat,___lwdiv@divisor
  8303  000816  000A               	tblrd		*-
  8304  000818  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  8305  00081C  EC6D  F014         	call	___lwdiv	;wreg free
  8306  000820  5012               	movf	?___lwdiv,w,c
  8307  000822  0B07               	andlw	7
  8308  000824                     L17:
  8309  000824  0F30               	addlw	48
  8310  000826  6E3E               	movwf	sprintf@c,c
  8311                           
  8312                           ;doprnt.c: 1523: }
  8313                           
  8314                           ;doprnt.c: 1520: break;
  8315  000828  D00E               	goto	l4297
  8316  00082A                     l4295:
  8317  00082A  503F               	movf	sprintf@flag,w,c
  8318  00082C  0BC0               	andlw	192
  8319                           
  8320                           ; Switch size 1, requested type "space"
  8321                           ; Number of cases is 4, Range of values is 0 to 192
  8322                           ; switch strategies available:
  8323                           ; Name         Instructions Cycles
  8324                           ; simple_byte           13     7 (average)
  8325                           ;	Chosen strategy is simple_byte
  8326  00082E  0A00               	xorlw	0	; case 0
  8327  000830  B4D8               	btfsc	status,2,c
  8328  000832  D78F               	goto	l4279
  8329  000834  0A40               	xorlw	64	; case 64
  8330  000836  B4D8               	btfsc	status,2,c
  8331  000838  D7DF               	goto	l4291
  8332  00083A  0AC0               	xorlw	192	; case 128
  8333  00083C  B4D8               	btfsc	status,2,c
  8334  00083E  D7A9               	goto	l4281
  8335  000840  0A40               	xorlw	64	; case 192
  8336  000842  B4D8               	btfsc	status,2,c
  8337  000844  D786               	goto	l4279
  8338  000846                     l4297:
  8339                           
  8340                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8341  000846  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8342  00084A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8343  00084E  C03E  FFDF         	movff	sprintf@c,indf2
  8344  000852                     l4299:
  8345  000852  4A1E               	infsnz	sprintf@sp,f,c
  8346  000854  2A1F               	incf	sprintf@sp+1,f,c
  8347  000856                     l4301:
  8348  000856  063B               	decf	sprintf@prec,f,c
  8349  000858  283B               	incf	sprintf@prec,w,c
  8350  00085A  A4D8               	btfss	status,2,c
  8351  00085C  D7E6               	goto	l4295
  8352                           
  8353                           ;doprnt.c: 1525: }
  8354                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  8355  00085E  B63F               	btfsc	sprintf@flag,3,c
  8356  000860  BE3D               	btfsc	sprintf@width+1,7,c
  8357  000862  D014               	goto	l4311
  8358  000864  503D               	movf	sprintf@width+1,w,c
  8359  000866  E103               	bnz	l4305
  8360  000868  043C               	decf	sprintf@width,w,c
  8361  00086A  A0D8               	btfss	status,0,c
  8362  00086C  D00F               	goto	l4311
  8363  00086E                     l4305:
  8364                           
  8365                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  8366  00086E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8367  000872  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8368  000876  0E20               	movlw	32
  8369  000878  6EDF               	movwf	indf2,c
  8370  00087A  4A1E               	infsnz	sprintf@sp,f,c
  8371  00087C  2A1F               	incf	sprintf@sp+1,f,c
  8372                           
  8373                           ;doprnt.c: 1531: while(--width);
  8374  00087E  063C               	decf	sprintf@width,f,c
  8375  000880  A0D8               	btfss	status,0,c
  8376  000882  063D               	decf	sprintf@width+1,f,c
  8377  000884  503C               	movf	sprintf@width,w,c
  8378  000886  103D               	iorwf	sprintf@width+1,w,c
  8379  000888  A4D8               	btfss	status,2,c
  8380  00088A  D7F1               	goto	l4305
  8381  00088C                     l4311:
  8382  00088C  C020  FFF6         	movff	sprintf@f,tblptrl
  8383  000890  C021  FFF7         	movff	sprintf@f+1,tblptrh
  8384  000894  4A20               	infsnz	sprintf@f,f,c
  8385  000896  2A21               	incf	sprintf@f+1,f,c
  8386  000898                     	if	0	;tblptru may be non-zero
  8387  000898                     	endif
  8388  000898                     	if	0	;tblptru may be non-zero
  8389  000898                     	endif
  8390  000898  0008               	tblrd		*
  8391  00089A  CFF5 F03E          	movff	tablat,sprintf@c
  8392  00089E  503E               	movf	sprintf@c,w,c
  8393  0008A0  A4D8               	btfss	status,2,c
  8394  0008A2  EF0F  F000         	goto	l3957
  8395  0008A6                     l4313:
  8396                           
  8397                           ;doprnt.c: 1538: *sp = 0;
  8398  0008A6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  8399  0008AA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  8400  0008AE  0E00               	movlw	0
  8401  0008B0  6EDF               	movwf	indf2,c
  8402  0008B2  0012               	return	
  8403  0008B4                     __end_of_sprintf:
  8404                           	opt stack 0
  8405                           tblptru	equ	0xFF8
  8406                           tblptrh	equ	0xFF7
  8407                           tblptrl	equ	0xFF6
  8408                           tablat	equ	0xFF5
  8409                           prodh	equ	0xFF4
  8410                           prodl	equ	0xFF3
  8411                           intcon	equ	0xFF2
  8412                           postinc0	equ	0xFEE
  8413                           wreg	equ	0xFE8
  8414                           indf1	equ	0xFE7
  8415                           plusw1	equ	0xFE3
  8416                           fsr1h	equ	0xFE2
  8417                           fsr1l	equ	0xFE1
  8418                           indf2	equ	0xFDF
  8419                           postinc2	equ	0xFDE
  8420                           postdec2	equ	0xFDD
  8421                           plusw2	equ	0xFDB
  8422                           fsr2h	equ	0xFDA
  8423                           fsr2l	equ	0xFD9
  8424                           status	equ	0xFD8
  8425                           
  8426 ;; *************** function _isdigit *****************
  8427 ;; Defined at:
  8428 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;  c               1    wreg     unsigned char 
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;  c               1   19[COMRAM] unsigned char 
  8433 ;; Return value:  Size  Location     Type
  8434 ;;		None               void
  8435 ;; Registers used:
  8436 ;;		wreg, status,2, status,0
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8442 ;;      Params:         0       0       0       0       0       0       0
  8443 ;;      Locals:         2       0       0       0       0       0       0
  8444 ;;      Temps:          1       0       0       0       0       0       0
  8445 ;;      Totals:         3       0       0       0       0       0       0
  8446 ;;Total ram usage:        3 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    1
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_sprintf
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           	psect	text36
  8457  002B8C                     __ptext36:
  8458                           	opt stack 0
  8459  002B8C                     _isdigit:
  8460                           	opt stack 26
  8461                           
  8462                           ;incstack = 0
  8463                           ;isdigit@c stored from wreg
  8464  002B8C  6E14               	movwf	isdigit@c,c
  8465  002B8E  0E00               	movlw	0
  8466  002B90  6E13               	movwf	_isdigit$1600,c
  8467  002B92  0E3A               	movlw	58
  8468  002B94  6014               	cpfslt	isdigit@c,c
  8469  002B96  D005               	goto	l3871
  8470  002B98  0E2F               	movlw	47
  8471  002B9A  6414               	cpfsgt	isdigit@c,c
  8472  002B9C  D002               	goto	l3871
  8473  002B9E  0E01               	movlw	1
  8474  002BA0  6E13               	movwf	_isdigit$1600,c
  8475  002BA2                     l3871:
  8476  002BA2  C013  F012         	movff	_isdigit$1600,??_isdigit
  8477  002BA6  3012               	rrcf	??_isdigit,w,c
  8478  002BA8  0012               	return	
  8479  002BAA                     __end_of_isdigit:
  8480                           	opt stack 0
  8481                           tblptru	equ	0xFF8
  8482                           tblptrh	equ	0xFF7
  8483                           tblptrl	equ	0xFF6
  8484                           tablat	equ	0xFF5
  8485                           prodh	equ	0xFF4
  8486                           prodl	equ	0xFF3
  8487                           intcon	equ	0xFF2
  8488                           postinc0	equ	0xFEE
  8489                           wreg	equ	0xFE8
  8490                           indf1	equ	0xFE7
  8491                           plusw1	equ	0xFE3
  8492                           fsr1h	equ	0xFE2
  8493                           fsr1l	equ	0xFE1
  8494                           indf2	equ	0xFDF
  8495                           postinc2	equ	0xFDE
  8496                           postdec2	equ	0xFDD
  8497                           plusw2	equ	0xFDB
  8498                           fsr2h	equ	0xFDA
  8499                           fsr2l	equ	0xFD9
  8500                           status	equ	0xFD8
  8501                           
  8502 ;; *************** function ___wmul *****************
  8503 ;; Defined at:
  8504 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  8505 ;; Parameters:    Size  Location     Type
  8506 ;;  multiplier      2   17[COMRAM] unsigned int 
  8507 ;;  multiplicand    2   19[COMRAM] unsigned int 
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;  product         2   21[COMRAM] unsigned int 
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  2   17[COMRAM] unsigned int 
  8512 ;; Registers used:
  8513 ;;		wreg, status,2, status,0, prodl, prodh
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8519 ;;      Params:         4       0       0       0       0       0       0
  8520 ;;      Locals:         2       0       0       0       0       0       0
  8521 ;;      Temps:          0       0       0       0       0       0       0
  8522 ;;      Totals:         6       0       0       0       0       0       0
  8523 ;;Total ram usage:        6 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:    1
  8526 ;; This function calls:
  8527 ;;		Nothing
  8528 ;; This function is called by:
  8529 ;;		_sprintf
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           	psect	text37
  8534  002AFC                     __ptext37:
  8535                           	opt stack 0
  8536  002AFC                     ___wmul:
  8537                           	opt stack 26
  8538                           
  8539                           ;incstack = 0
  8540  002AFC  5012               	movf	___wmul@multiplier,w,c
  8541  002AFE  0214               	mulwf	___wmul@multiplicand,c
  8542  002B00  CFF3 F016          	movff	prodl,___wmul@product
  8543  002B04  CFF4 F017          	movff	prodh,___wmul@product+1
  8544  002B08  5012               	movf	___wmul@multiplier,w,c
  8545  002B0A  0215               	mulwf	___wmul@multiplicand+1,c
  8546  002B0C  50F3               	movf	prodl,w,c
  8547  002B0E  2617               	addwf	___wmul@product+1,f,c
  8548  002B10  5013               	movf	___wmul@multiplier+1,w,c
  8549  002B12  0214               	mulwf	___wmul@multiplicand,c
  8550  002B14  50F3               	movf	prodl,w,c
  8551  002B16  2617               	addwf	___wmul@product+1,f,c
  8552  002B18  C016  F012         	movff	___wmul@product,?___wmul
  8553  002B1C  C017  F013         	movff	___wmul@product+1,?___wmul+1
  8554  002B20  0012               	return	
  8555  002B22                     __end_of___wmul:
  8556                           	opt stack 0
  8557                           tblptru	equ	0xFF8
  8558                           tblptrh	equ	0xFF7
  8559                           tblptrl	equ	0xFF6
  8560                           tablat	equ	0xFF5
  8561                           prodh	equ	0xFF4
  8562                           prodl	equ	0xFF3
  8563                           intcon	equ	0xFF2
  8564                           postinc0	equ	0xFEE
  8565                           wreg	equ	0xFE8
  8566                           indf1	equ	0xFE7
  8567                           plusw1	equ	0xFE3
  8568                           fsr1h	equ	0xFE2
  8569                           fsr1l	equ	0xFE1
  8570                           indf2	equ	0xFDF
  8571                           postinc2	equ	0xFDE
  8572                           postdec2	equ	0xFDD
  8573                           plusw2	equ	0xFDB
  8574                           fsr2h	equ	0xFDA
  8575                           fsr2l	equ	0xFD9
  8576                           status	equ	0xFD8
  8577                           
  8578 ;; *************** function ___lwmod *****************
  8579 ;; Defined at:
  8580 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  8581 ;; Parameters:    Size  Location     Type
  8582 ;;  dividend        2   24[COMRAM] unsigned int 
  8583 ;;  divisor         2   26[COMRAM] unsigned int 
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;  counter         1   28[COMRAM] unsigned char 
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  2   24[COMRAM] unsigned int 
  8588 ;; Registers used:
  8589 ;;		wreg, status,2, status,0
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8595 ;;      Params:         4       0       0       0       0       0       0
  8596 ;;      Locals:         1       0       0       0       0       0       0
  8597 ;;      Temps:          0       0       0       0       0       0       0
  8598 ;;      Totals:         5       0       0       0       0       0       0
  8599 ;;Total ram usage:        5 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    1
  8602 ;; This function calls:
  8603 ;;		Nothing
  8604 ;; This function is called by:
  8605 ;;		_sprintf
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text38
  8610  00292C                     __ptext38:
  8611                           	opt stack 0
  8612  00292C                     ___lwmod:
  8613                           	opt stack 26
  8614                           
  8615                           ;incstack = 0
  8616  00292C  501B               	movf	___lwmod@divisor,w,c
  8617  00292E  101C               	iorwf	___lwmod@divisor+1,w,c
  8618  002930  B4D8               	btfsc	status,2,c
  8619  002932  D018               	goto	l970
  8620  002934  0E01               	movlw	1
  8621  002936  6E1D               	movwf	___lwmod@counter,c
  8622  002938  D004               	goto	l3945
  8623  00293A                     l3943:
  8624  00293A  90D8               	bcf	status,0,c
  8625  00293C  361B               	rlcf	___lwmod@divisor,f,c
  8626  00293E  361C               	rlcf	___lwmod@divisor+1,f,c
  8627  002940  2A1D               	incf	___lwmod@counter,f,c
  8628  002942                     l3945:
  8629  002942  AE1C               	btfss	___lwmod@divisor+1,7,c
  8630  002944  D7FA               	goto	l3943
  8631  002946                     l3947:
  8632  002946  501B               	movf	___lwmod@divisor,w,c
  8633  002948  5C19               	subwf	___lwmod@dividend,w,c
  8634  00294A  501C               	movf	___lwmod@divisor+1,w,c
  8635  00294C  581A               	subwfb	___lwmod@dividend+1,w,c
  8636  00294E  A0D8               	btfss	status,0,c
  8637  002950  D004               	goto	l3951
  8638  002952  501B               	movf	___lwmod@divisor,w,c
  8639  002954  5E19               	subwf	___lwmod@dividend,f,c
  8640  002956  501C               	movf	___lwmod@divisor+1,w,c
  8641  002958  5A1A               	subwfb	___lwmod@dividend+1,f,c
  8642  00295A                     l3951:
  8643  00295A  90D8               	bcf	status,0,c
  8644  00295C  321C               	rrcf	___lwmod@divisor+1,f,c
  8645  00295E  321B               	rrcf	___lwmod@divisor,f,c
  8646  002960  2E1D               	decfsz	___lwmod@counter,f,c
  8647  002962  D7F1               	goto	l3947
  8648  002964                     l970:
  8649  002964  C019  F019         	movff	___lwmod@dividend,?___lwmod
  8650  002968  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  8651  00296C  0012               	return		;funcret
  8652  00296E                     __end_of___lwmod:
  8653                           	opt stack 0
  8654                           tblptru	equ	0xFF8
  8655                           tblptrh	equ	0xFF7
  8656                           tblptrl	equ	0xFF6
  8657                           tablat	equ	0xFF5
  8658                           prodh	equ	0xFF4
  8659                           prodl	equ	0xFF3
  8660                           intcon	equ	0xFF2
  8661                           postinc0	equ	0xFEE
  8662                           wreg	equ	0xFE8
  8663                           indf1	equ	0xFE7
  8664                           plusw1	equ	0xFE3
  8665                           fsr1h	equ	0xFE2
  8666                           fsr1l	equ	0xFE1
  8667                           indf2	equ	0xFDF
  8668                           postinc2	equ	0xFDE
  8669                           postdec2	equ	0xFDD
  8670                           plusw2	equ	0xFDB
  8671                           fsr2h	equ	0xFDA
  8672                           fsr2l	equ	0xFD9
  8673                           status	equ	0xFD8
  8674                           
  8675 ;; *************** function ___lwdiv *****************
  8676 ;; Defined at:
  8677 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;  dividend        2   17[COMRAM] unsigned int 
  8680 ;;  divisor         2   19[COMRAM] unsigned int 
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;  quotient        2   22[COMRAM] unsigned int 
  8683 ;;  counter         1   21[COMRAM] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  2   17[COMRAM] unsigned int 
  8686 ;; Registers used:
  8687 ;;		wreg, status,2, status,0
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8693 ;;      Params:         4       0       0       0       0       0       0
  8694 ;;      Locals:         3       0       0       0       0       0       0
  8695 ;;      Temps:          0       0       0       0       0       0       0
  8696 ;;      Totals:         7       0       0       0       0       0       0
  8697 ;;Total ram usage:        7 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    1
  8700 ;; This function calls:
  8701 ;;		Nothing
  8702 ;; This function is called by:
  8703 ;;		_sprintf
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           	psect	text39
  8708  0028DA                     __ptext39:
  8709                           	opt stack 0
  8710  0028DA                     ___lwdiv:
  8711                           	opt stack 26
  8712                           
  8713                           ;incstack = 0
  8714  0028DA  0E00               	movlw	0
  8715  0028DC  6E18               	movwf	___lwdiv@quotient+1,c
  8716  0028DE  0E00               	movlw	0
  8717  0028E0  6E17               	movwf	___lwdiv@quotient,c
  8718  0028E2  5014               	movf	___lwdiv@divisor,w,c
  8719  0028E4  1015               	iorwf	___lwdiv@divisor+1,w,c
  8720  0028E6  B4D8               	btfsc	status,2,c
  8721  0028E8  D01C               	goto	l960
  8722  0028EA  0E01               	movlw	1
  8723  0028EC  6E16               	movwf	___lwdiv@counter,c
  8724  0028EE  D004               	goto	l3925
  8725  0028F0                     l3923:
  8726  0028F0  90D8               	bcf	status,0,c
  8727  0028F2  3614               	rlcf	___lwdiv@divisor,f,c
  8728  0028F4  3615               	rlcf	___lwdiv@divisor+1,f,c
  8729  0028F6  2A16               	incf	___lwdiv@counter,f,c
  8730  0028F8                     l3925:
  8731  0028F8  AE15               	btfss	___lwdiv@divisor+1,7,c
  8732  0028FA  D7FA               	goto	l3923
  8733  0028FC                     l3927:
  8734  0028FC  90D8               	bcf	status,0,c
  8735  0028FE  3617               	rlcf	___lwdiv@quotient,f,c
  8736  002900  3618               	rlcf	___lwdiv@quotient+1,f,c
  8737  002902  5014               	movf	___lwdiv@divisor,w,c
  8738  002904  5C12               	subwf	___lwdiv@dividend,w,c
  8739  002906  5015               	movf	___lwdiv@divisor+1,w,c
  8740  002908  5813               	subwfb	___lwdiv@dividend+1,w,c
  8741  00290A  A0D8               	btfss	status,0,c
  8742  00290C  D005               	goto	l3935
  8743  00290E  5014               	movf	___lwdiv@divisor,w,c
  8744  002910  5E12               	subwf	___lwdiv@dividend,f,c
  8745  002912  5015               	movf	___lwdiv@divisor+1,w,c
  8746  002914  5A13               	subwfb	___lwdiv@dividend+1,f,c
  8747  002916  8017               	bsf	___lwdiv@quotient,0,c
  8748  002918                     l3935:
  8749  002918  90D8               	bcf	status,0,c
  8750  00291A  3215               	rrcf	___lwdiv@divisor+1,f,c
  8751  00291C  3214               	rrcf	___lwdiv@divisor,f,c
  8752  00291E  2E16               	decfsz	___lwdiv@counter,f,c
  8753  002920  D7ED               	goto	l3927
  8754  002922                     l960:
  8755  002922  C017  F012         	movff	___lwdiv@quotient,?___lwdiv
  8756  002926  C018  F013         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8757  00292A  0012               	return		;funcret
  8758  00292C                     __end_of___lwdiv:
  8759                           	opt stack 0
  8760                           tblptru	equ	0xFF8
  8761                           tblptrh	equ	0xFF7
  8762                           tblptrl	equ	0xFF6
  8763                           tablat	equ	0xFF5
  8764                           prodh	equ	0xFF4
  8765                           prodl	equ	0xFF3
  8766                           intcon	equ	0xFF2
  8767                           postinc0	equ	0xFEE
  8768                           wreg	equ	0xFE8
  8769                           indf1	equ	0xFE7
  8770                           plusw1	equ	0xFE3
  8771                           fsr1h	equ	0xFE2
  8772                           fsr1l	equ	0xFE1
  8773                           indf2	equ	0xFDF
  8774                           postinc2	equ	0xFDE
  8775                           postdec2	equ	0xFDD
  8776                           plusw2	equ	0xFDB
  8777                           fsr2h	equ	0xFDA
  8778                           fsr2l	equ	0xFD9
  8779                           status	equ	0xFD8
  8780                           
  8781 ;; *************** function _ESP8266_Cmd *****************
  8782 ;; Defined at:
  8783 ;;		line 63 in file "harwave/UART.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;  cmd             2   36[COMRAM] PTR unsigned char 
  8786 ;;		 -> STR_59(14), STR_57(15), STR_53(11), STR_49(25), 
  8787 ;;		 -> STR_47(23), STR_45(22), STR_43(14), STR_41(15), 
  8788 ;;		 -> STR_39(14), STR_33(13), STR_30(13), ESP8266_Link_Server@cCmd(120), 
  8789 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_15(14), STR_12(14), 
  8790 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@tem(12), 
  8791 ;;		 -> ESP8266_SendString@cStr(20), 
  8792 ;;  reply1          2   38[COMRAM] PTR unsigned char 
  8793 ;;		 -> STR_60(3), STR_58(3), STR_54(3), STR_50(3), 
  8794 ;;		 -> STR_48(3), STR_46(3), STR_44(3), STR_42(3), 
  8795 ;;		 -> STR_40(3), STR_34(10), STR_31(10), STR_28(8), 
  8796 ;;		 -> STR_21(3), STR_19(3), STR_16(3), STR_13(3), 
  8797 ;;		 -> STR_10(3), STR_7(3), STR_5(3), STR_3(8), 
  8798 ;;		 -> STR_2(3), 
  8799 ;;  reply2          2   40[COMRAM] PTR unsigned char 
  8800 ;;		 -> STR_35(3), STR_32(3), STR_29(3), STR_17(10), 
  8801 ;;		 -> STR_14(10), STR_11(10), STR_8(6), NULL(0), 
  8802 ;;  waittime        2   42[COMRAM] unsigned int 
  8803 ;; Auto vars:     Size  Location     Type
  8804 ;;		None
  8805 ;; Return value:  Size  Location     Type
  8806 ;;                  1    wreg      unsigned char 
  8807 ;; Registers used:
  8808 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/0
  8811 ;;		On exit  : 0/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8814 ;;      Params:         8       0       0       0       0       0       0
  8815 ;;      Locals:         1       0       0       0       0       0       0
  8816 ;;      Temps:          0       0       0       0       0       0       0
  8817 ;;      Totals:         9       0       0       0       0       0       0
  8818 ;;Total ram usage:        9 bytes
  8819 ;; Hardware stack levels used:    1
  8820 ;; Hardware stack levels required when called:    3
  8821 ;; This function calls:
  8822 ;;		_ESP8266_Uart
  8823 ;;		_delay_ms
  8824 ;;		_strstr
  8825 ;; This function is called by:
  8826 ;;		_ESP8266_SendString
  8827 ;;		_ESP8266_AT_Test
  8828 ;;		_ESP8266_Rst
  8829 ;;		_ESP8266_Net_Mode_Choose
  8830 ;;		_ESP8266_BuildAP
  8831 ;;		_AP_MODE
  8832 ;;		_ESP8266_Server
  8833 ;;		_ESP8266_JoinAP
  8834 ;;		_ESP8266_Link_Server
  8835 ;;		_STA_MODE
  8836 ;;		_set_baudrate
  8837 ;;		_ESP8266_client
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           	psect	text40
  8842  002372                     __ptext40:
  8843                           	opt stack 0
  8844  002372                     _ESP8266_Cmd:
  8845                           	opt stack 25
  8846                           
  8847                           ;UART.c: 65: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  8848                           
  8849                           ;incstack = 0
  8850  002372  0101               	movlb	1	; () banked
  8851  002374  91DA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  8852  002376  93DA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  8853  002378  95DA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  8854  00237A  97DA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  8855  00237C  99DA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  8856  00237E  9BDA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  8857  002380  9DDA               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  8858                           
  8859                           ; BSR set to: 1
  8860                           ;UART.c: 67: ESP8266_Uart (cmd);
  8861  002382  C025  F012         	movff	ESP8266_Cmd@cmd,ESP8266_Uart@cmd
  8862  002386  C026  F013         	movff	ESP8266_Cmd@cmd+1,ESP8266_Uart@cmd+1
  8863  00238A  ECD3  F013         	call	_ESP8266_Uart	;wreg free
  8864                           
  8865                           ;UART.c: 69: if ( ( reply1 == 0 ) && ( reply2 == 0 ) )
  8866  00238E  5027               	movf	ESP8266_Cmd@reply1,w,c
  8867  002390  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  8868  002392  A4D8               	btfss	status,2,c
  8869  002394  D006               	goto	l3833
  8870  002396  5029               	movf	ESP8266_Cmd@reply2,w,c
  8871  002398  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  8872  00239A  A4D8               	btfss	status,2,c
  8873  00239C  D002               	goto	l3833
  8874                           
  8875                           ;UART.c: 70: return 1;
  8876  00239E  0E01               	movlw	1
  8877  0023A0  0012               	return	
  8878  0023A2                     l3833:
  8879                           
  8880                           ;UART.c: 72: delay_ms ( waittime );
  8881  0023A2  C02B  F014         	movff	ESP8266_Cmd@waittime,delay_ms@ms
  8882  0023A6  C02C  F015         	movff	ESP8266_Cmd@waittime+1,delay_ms@ms+1
  8883  0023AA  ECD5  F015         	call	_delay_ms	;wreg free
  8884                           
  8885                           ;UART.c: 74: if ( ( reply1 != 0 ) && ( reply2 != 0 ) )
  8886  0023AE  5027               	movf	ESP8266_Cmd@reply1,w,c
  8887  0023B0  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  8888  0023B2  B4D8               	btfsc	status,2,c
  8889  0023B4  D022               	goto	l3851
  8890  0023B6  5029               	movf	ESP8266_Cmd@reply2,w,c
  8891  0023B8  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  8892  0023BA  B4D8               	btfsc	status,2,c
  8893  0023BC  D01E               	goto	l3851
  8894                           
  8895                           ;UART.c: 75: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) || (u8
      +                          ) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  8896  0023BE  0E01               	movlw	1
  8897  0023C0  6E2D               	movwf	_ESP8266_Cmd$1046,c
  8898  0023C2  0EA8               	movlw	low _strEsp8266_Fram_Record
  8899  0023C4  6E21               	movwf	strstr@s1,c
  8900  0023C6  0E01               	movlw	high _strEsp8266_Fram_Record
  8901  0023C8  6E22               	movwf	strstr@s1+1,c
  8902  0023CA  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  8903  0023CE  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  8904  0023D2  EC50  F013         	call	_strstr	;wreg free
  8905  0023D6  6621               	tstfsz	?_strstr,c
  8906  0023D8  D00E               	goto	l206
  8907  0023DA  0EA8               	movlw	low _strEsp8266_Fram_Record
  8908  0023DC  6E21               	movwf	strstr@s1,c
  8909  0023DE  0E01               	movlw	high _strEsp8266_Fram_Record
  8910  0023E0  6E22               	movwf	strstr@s1+1,c
  8911  0023E2  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  8912  0023E6  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  8913  0023EA  EC50  F013         	call	_strstr	;wreg free
  8914  0023EE  6621               	tstfsz	?_strstr,c
  8915  0023F0  D002               	goto	l206
  8916  0023F2  0E00               	movlw	0
  8917  0023F4  6E2D               	movwf	_ESP8266_Cmd$1046,c
  8918  0023F6                     l206:
  8919  0023F6  502D               	movf	_ESP8266_Cmd$1046,w,c
  8920  0023F8  0012               	return	
  8921  0023FA                     l3851:
  8922                           
  8923                           ;UART.c: 76: else if ( reply1 != 0 )
  8924  0023FA  5027               	movf	ESP8266_Cmd@reply1,w,c
  8925  0023FC  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  8926  0023FE  B4D8               	btfsc	status,2,c
  8927  002400  D00C               	goto	l3859
  8928                           
  8929                           ;UART.c: 77: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) );
  8930  002402  0EA8               	movlw	low _strEsp8266_Fram_Record
  8931  002404  6E21               	movwf	strstr@s1,c
  8932  002406  0E01               	movlw	high _strEsp8266_Fram_Record
  8933  002408  6E22               	movwf	strstr@s1+1,c
  8934  00240A  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  8935  00240E  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  8936  002412  EC50  F013         	call	_strstr	;wreg free
  8937  002416  5021               	movf	?_strstr,w,c
  8938  002418  0012               	return	
  8939  00241A                     l3859:
  8940                           
  8941                           ;UART.c: 79: else
  8942                           ;UART.c: 80: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  8943  00241A  0EA8               	movlw	low _strEsp8266_Fram_Record
  8944  00241C  6E21               	movwf	strstr@s1,c
  8945  00241E  0E01               	movlw	high _strEsp8266_Fram_Record
  8946  002420  6E22               	movwf	strstr@s1+1,c
  8947  002422  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  8948  002426  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  8949  00242A  EC50  F013         	call	_strstr	;wreg free
  8950  00242E  5021               	movf	?_strstr,w,c
  8951  002430  0012               	return	
  8952  002432                     __end_of_ESP8266_Cmd:
  8953                           	opt stack 0
  8954                           tblptru	equ	0xFF8
  8955                           tblptrh	equ	0xFF7
  8956                           tblptrl	equ	0xFF6
  8957                           tablat	equ	0xFF5
  8958                           prodh	equ	0xFF4
  8959                           prodl	equ	0xFF3
  8960                           intcon	equ	0xFF2
  8961                           postinc0	equ	0xFEE
  8962                           wreg	equ	0xFE8
  8963                           indf1	equ	0xFE7
  8964                           plusw1	equ	0xFE3
  8965                           fsr1h	equ	0xFE2
  8966                           fsr1l	equ	0xFE1
  8967                           indf2	equ	0xFDF
  8968                           postinc2	equ	0xFDE
  8969                           postdec2	equ	0xFDD
  8970                           plusw2	equ	0xFDB
  8971                           fsr2h	equ	0xFDA
  8972                           fsr2l	equ	0xFD9
  8973                           status	equ	0xFD8
  8974                           
  8975 ;; *************** function _strstr *****************
  8976 ;; Defined at:
  8977 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strstr.c"
  8978 ;; Parameters:    Size  Location     Type
  8979 ;;  s1              2   32[COMRAM] PTR const unsigned char 
  8980 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8981 ;;  s2              2   34[COMRAM] PTR const unsigned char 
  8982 ;;		 -> STR_63(10), STR_60(3), STR_58(3), STR_54(3), 
  8983 ;;		 -> STR_52(10), STR_51(15), STR_50(3), STR_48(3), 
  8984 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_40(3), 
  8985 ;;		 -> STR_35(3), STR_34(10), STR_32(3), STR_31(10), 
  8986 ;;		 -> STR_29(3), STR_28(8), STR_21(3), STR_19(3), 
  8987 ;;		 -> STR_17(10), STR_16(3), STR_14(10), STR_13(3), 
  8988 ;;		 -> STR_11(10), STR_10(3), STR_8(6), STR_7(3), 
  8989 ;;		 -> STR_5(3), STR_3(8), STR_2(3), NULL(0), 
  8990 ;; Auto vars:     Size  Location     Type
  8991 ;;		None
  8992 ;; Return value:  Size  Location     Type
  8993 ;;                  2   32[COMRAM] PTR unsigned char 
  8994 ;; Registers used:
  8995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8996 ;; Tracked objects:
  8997 ;;		On entry : 0/0
  8998 ;;		On exit  : 0/0
  8999 ;;		Unchanged: 0/0
  9000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9001 ;;      Params:         4       0       0       0       0       0       0
  9002 ;;      Locals:         0       0       0       0       0       0       0
  9003 ;;      Temps:          0       0       0       0       0       0       0
  9004 ;;      Totals:         4       0       0       0       0       0       0
  9005 ;;Total ram usage:        4 bytes
  9006 ;; Hardware stack levels used:    1
  9007 ;; Hardware stack levels required when called:    2
  9008 ;; This function calls:
  9009 ;;		_strchr
  9010 ;;		_strlen
  9011 ;;		_strncmp
  9012 ;; This function is called by:
  9013 ;;		_ESP8266_Cmd
  9014 ;;		_main
  9015 ;;		_detect_connect
  9016 ;; This function uses a non-reentrant model
  9017 ;;
  9018                           
  9019                           	psect	text41
  9020  0026A0                     __ptext41:
  9021                           	opt stack 0
  9022  0026A0                     _strstr:
  9023                           	opt stack 28
  9024                           
  9025                           ;incstack = 0
  9026  0026A0  D031               	goto	l3813
  9027  0026A2                     l3805:
  9028  0026A2  C021  F018         	movff	strstr@s1,strncmp@s1
  9029  0026A6  C022  F019         	movff	strstr@s1+1,strncmp@s1+1
  9030  0026AA  C023  F01A         	movff	strstr@s2,strncmp@s2
  9031  0026AE  C024  F01B         	movff	strstr@s2+1,strncmp@s2+1
  9032  0026B2  C023  F012         	movff	strstr@s2,strlen@s
  9033  0026B6  C024  F013         	movff	strstr@s2+1,strlen@s+1
  9034  0026BA  ECD7  F014         	call	_strlen	;wreg free
  9035  0026BE  C012  F01C         	movff	?_strlen,strncmp@len
  9036  0026C2  C013  F01D         	movff	?_strlen+1,strncmp@len+1
  9037  0026C6  EC92  F013         	call	_strncmp	;wreg free
  9038  0026CA  5018               	movf	?_strncmp,w,c
  9039  0026CC  1019               	iorwf	?_strncmp+1,w,c
  9040  0026CE  A4D8               	btfss	status,2,c
  9041  0026D0  D005               	goto	l3811
  9042  0026D2  C021  F021         	movff	strstr@s1,?_strstr
  9043  0026D6  C022  F022         	movff	strstr@s1+1,?_strstr+1
  9044  0026DA  0012               	return	
  9045  0026DC                     l3811:
  9046  0026DC  0E01               	movlw	1
  9047  0026DE  2421               	addwf	strstr@s1,w,c
  9048  0026E0  6E12               	movwf	strchr@ptr,c
  9049  0026E2  0E00               	movlw	0
  9050  0026E4  2022               	addwfc	strstr@s1+1,w,c
  9051  0026E6  6E13               	movwf	strchr@ptr+1,c
  9052  0026E8  C023  FFF6         	movff	strstr@s2,tblptrl
  9053  0026EC  C024  FFF7         	movff	strstr@s2+1,tblptrh
  9054  0026F0                     	if	0	;tblptru may be non-zero
  9055  0026F0                     	endif
  9056  0026F0                     	if	0	;tblptru may be non-zero
  9057  0026F0                     	endif
  9058  0026F0  0008               	tblrd		*
  9059  0026F2  50F5               	movf	tablat,w,c
  9060  0026F4  6E14               	movwf	strchr@chr,c
  9061  0026F6  6A15               	clrf	strchr@chr+1,c
  9062  0026F8  ECF6  F014         	call	_strchr	;wreg free
  9063  0026FC  C012  F021         	movff	?_strchr,strstr@s1
  9064  002700  C013  F022         	movff	?_strchr+1,strstr@s1+1
  9065  002704                     l3813:
  9066  002704  5021               	movf	strstr@s1,w,c
  9067  002706  1022               	iorwf	strstr@s1+1,w,c
  9068  002708  B4D8               	btfsc	status,2,c
  9069  00270A  D007               	goto	l3817
  9070  00270C  C021  FFD9         	movff	strstr@s1,fsr2l
  9071  002710  C022  FFDA         	movff	strstr@s1+1,fsr2h
  9072  002714  50DF               	movf	indf2,w,c
  9073  002716  A4D8               	btfss	status,2,c
  9074  002718  D7C4               	goto	l3805
  9075  00271A                     l3817:
  9076  00271A  0E00               	movlw	0
  9077  00271C  6E21               	movwf	?_strstr,c
  9078  00271E  0E00               	movlw	0
  9079  002720  6E22               	movwf	?_strstr+1,c
  9080  002722  0012               	return	
  9081  002724                     __end_of_strstr:
  9082                           	opt stack 0
  9083                           tblptru	equ	0xFF8
  9084                           tblptrh	equ	0xFF7
  9085                           tblptrl	equ	0xFF6
  9086                           tablat	equ	0xFF5
  9087                           prodh	equ	0xFF4
  9088                           prodl	equ	0xFF3
  9089                           intcon	equ	0xFF2
  9090                           postinc0	equ	0xFEE
  9091                           wreg	equ	0xFE8
  9092                           indf1	equ	0xFE7
  9093                           plusw1	equ	0xFE3
  9094                           fsr1h	equ	0xFE2
  9095                           fsr1l	equ	0xFE1
  9096                           indf2	equ	0xFDF
  9097                           postinc2	equ	0xFDE
  9098                           postdec2	equ	0xFDD
  9099                           plusw2	equ	0xFDB
  9100                           fsr2h	equ	0xFDA
  9101                           fsr2l	equ	0xFD9
  9102                           status	equ	0xFD8
  9103                           
  9104 ;; *************** function _strncmp *****************
  9105 ;; Defined at:
  9106 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  9109 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  9110 ;;  s2              2   25[COMRAM] PTR const unsigned char 
  9111 ;;		 -> STR_63(10), STR_60(3), STR_58(3), STR_54(3), 
  9112 ;;		 -> STR_52(10), STR_51(15), STR_50(3), STR_48(3), 
  9113 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_40(3), 
  9114 ;;		 -> STR_35(3), STR_34(10), STR_32(3), STR_31(10), 
  9115 ;;		 -> STR_29(3), STR_28(8), STR_21(3), STR_19(3), 
  9116 ;;		 -> STR_17(10), STR_16(3), STR_14(10), STR_13(3), 
  9117 ;;		 -> STR_11(10), STR_10(3), STR_8(6), STR_7(3), 
  9118 ;;		 -> STR_5(3), STR_3(8), STR_2(3), NULL(0), 
  9119 ;;  len             2   27[COMRAM] unsigned int 
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;		None
  9122 ;; Return value:  Size  Location     Type
  9123 ;;                  2   23[COMRAM] int 
  9124 ;; Registers used:
  9125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9126 ;; Tracked objects:
  9127 ;;		On entry : 0/0
  9128 ;;		On exit  : 0/0
  9129 ;;		Unchanged: 0/0
  9130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9131 ;;      Params:         6       0       0       0       0       0       0
  9132 ;;      Locals:         0       0       0       0       0       0       0
  9133 ;;      Temps:          3       0       0       0       0       0       0
  9134 ;;      Totals:         9       0       0       0       0       0       0
  9135 ;;Total ram usage:        9 bytes
  9136 ;; Hardware stack levels used:    1
  9137 ;; Hardware stack levels required when called:    1
  9138 ;; This function calls:
  9139 ;;		Nothing
  9140 ;; This function is called by:
  9141 ;;		_strstr
  9142 ;; This function uses a non-reentrant model
  9143 ;;
  9144                           
  9145                           	psect	text42
  9146  002724                     __ptext42:
  9147                           	opt stack 0
  9148  002724                     _strncmp:
  9149                           	opt stack 28
  9150                           
  9151                           ;incstack = 0
  9152  002724  D033               	goto	l3769
  9153  002726                     l3759:
  9154  002726  C018  FFD9         	movff	strncmp@s1,fsr2l
  9155  00272A  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  9156  00272E  50DF               	movf	indf2,w,c
  9157  002730  B4D8               	btfsc	status,2,c
  9158  002732  D00F               	goto	l3763
  9159  002734  C018  FFD9         	movff	strncmp@s1,fsr2l
  9160  002738  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  9161  00273C  50DF               	movf	indf2,w,c
  9162  00273E  6E1E               	movwf	??_strncmp& (0+255),c
  9163  002740  C01A  FFF6         	movff	strncmp@s2,tblptrl
  9164  002744  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  9165  002748                     	if	0	;tblptru may be non-zero
  9166  002748                     	endif
  9167  002748                     	if	0	;tblptru may be non-zero
  9168  002748                     	endif
  9169  002748  0008               	tblrd		*
  9170  00274A  50F5               	movf	tablat,w,c
  9171  00274C  181E               	xorwf	??_strncmp,w,c
  9172  00274E  B4D8               	btfsc	status,2,c
  9173  002750  D019               	goto	l3767
  9174  002752                     l3763:
  9175  002752  C01A  FFF6         	movff	strncmp@s2,tblptrl
  9176  002756  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  9177  00275A                     	if	0	;tblptru may be non-zero
  9178  00275A                     	endif
  9179  00275A                     	if	0	;tblptru may be non-zero
  9180  00275A                     	endif
  9181  00275A  0008               	tblrd		*
  9182  00275C  50F5               	movf	tablat,w,c
  9183  00275E  6E1E               	movwf	??_strncmp& (0+255),c
  9184  002760  6A1F               	clrf	(??_strncmp+1)& (0+255),c
  9185  002762  1E1E               	comf	??_strncmp,f,c
  9186  002764  1E1F               	comf	??_strncmp+1,f,c
  9187  002766  4A1E               	infsnz	??_strncmp,f,c
  9188  002768  2A1F               	incf	??_strncmp+1,f,c
  9189  00276A  C018  FFD9         	movff	strncmp@s1,fsr2l
  9190  00276E  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  9191  002772  50DF               	movf	indf2,w,c
  9192  002774  6E20               	movwf	(??_strncmp+2)& (0+255),c
  9193  002776  5020               	movf	??_strncmp+2,w,c
  9194  002778  241E               	addwf	??_strncmp,w,c
  9195  00277A  6E18               	movwf	?_strncmp,c
  9196  00277C  0E00               	movlw	0
  9197  00277E  201F               	addwfc	??_strncmp+1,w,c
  9198  002780  6E19               	movwf	?_strncmp+1,c
  9199  002782  0012               	return	
  9200  002784                     l3767:
  9201  002784  4A18               	infsnz	strncmp@s1,f,c
  9202  002786  2A19               	incf	strncmp@s1+1,f,c
  9203  002788  4A1A               	infsnz	strncmp@s2,f,c
  9204  00278A  2A1B               	incf	strncmp@s2+1,f,c
  9205  00278C                     l3769:
  9206  00278C  061C               	decf	strncmp@len,f,c
  9207  00278E  A0D8               	btfss	status,0,c
  9208  002790  061D               	decf	strncmp@len+1,f,c
  9209  002792  281C               	incf	strncmp@len,w,c
  9210  002794  E1C8               	bnz	l3759
  9211  002796  281D               	incf	strncmp@len+1,w,c
  9212  002798  A4D8               	btfss	status,2,c
  9213  00279A  D7C5               	goto	l3759
  9214  00279C  0E00               	movlw	0
  9215  00279E  6E19               	movwf	?_strncmp+1,c
  9216  0027A0  0E00               	movlw	0
  9217  0027A2  6E18               	movwf	?_strncmp,c
  9218  0027A4  0012               	return	
  9219  0027A6                     __end_of_strncmp:
  9220                           	opt stack 0
  9221                           tblptru	equ	0xFF8
  9222                           tblptrh	equ	0xFF7
  9223                           tblptrl	equ	0xFF6
  9224                           tablat	equ	0xFF5
  9225                           prodh	equ	0xFF4
  9226                           prodl	equ	0xFF3
  9227                           intcon	equ	0xFF2
  9228                           postinc0	equ	0xFEE
  9229                           wreg	equ	0xFE8
  9230                           indf1	equ	0xFE7
  9231                           plusw1	equ	0xFE3
  9232                           fsr1h	equ	0xFE2
  9233                           fsr1l	equ	0xFE1
  9234                           indf2	equ	0xFDF
  9235                           postinc2	equ	0xFDE
  9236                           postdec2	equ	0xFDD
  9237                           plusw2	equ	0xFDB
  9238                           fsr2h	equ	0xFDA
  9239                           fsr2l	equ	0xFD9
  9240                           status	equ	0xFD8
  9241                           
  9242 ;; *************** function _strlen *****************
  9243 ;; Defined at:
  9244 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  9245 ;; Parameters:    Size  Location     Type
  9246 ;;  s               2   17[COMRAM] PTR const unsigned char 
  9247 ;;		 -> STR_63(10), STR_60(3), STR_58(3), STR_54(3), 
  9248 ;;		 -> STR_52(10), STR_51(15), STR_50(3), STR_48(3), 
  9249 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_40(3), 
  9250 ;;		 -> STR_35(3), STR_34(10), STR_32(3), STR_31(10), 
  9251 ;;		 -> STR_29(3), STR_28(8), STR_21(3), STR_19(3), 
  9252 ;;		 -> STR_17(10), STR_16(3), STR_14(10), STR_13(3), 
  9253 ;;		 -> STR_11(10), STR_10(3), STR_8(6), STR_7(3), 
  9254 ;;		 -> STR_5(3), STR_3(8), STR_2(3), NULL(0), 
  9255 ;; Auto vars:     Size  Location     Type
  9256 ;;  cp              2   21[COMRAM] PTR const unsigned char 
  9257 ;;		 -> STR_63(10), STR_60(3), STR_58(3), STR_54(3), 
  9258 ;;		 -> STR_52(10), STR_51(15), STR_50(3), STR_48(3), 
  9259 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_40(3), 
  9260 ;;		 -> STR_35(3), STR_34(10), STR_32(3), STR_31(10), 
  9261 ;;		 -> STR_29(3), STR_28(8), STR_21(3), STR_19(3), 
  9262 ;;		 -> STR_17(10), STR_16(3), STR_14(10), STR_13(3), 
  9263 ;;		 -> STR_11(10), STR_10(3), STR_8(6), STR_7(3), 
  9264 ;;		 -> STR_5(3), STR_3(8), STR_2(3), NULL(0), 
  9265 ;; Return value:  Size  Location     Type
  9266 ;;                  2   17[COMRAM] unsigned int 
  9267 ;; Registers used:
  9268 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9274 ;;      Params:         2       0       0       0       0       0       0
  9275 ;;      Locals:         2       0       0       0       0       0       0
  9276 ;;      Temps:          2       0       0       0       0       0       0
  9277 ;;      Totals:         6       0       0       0       0       0       0
  9278 ;;Total ram usage:        6 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; Hardware stack levels required when called:    1
  9281 ;; This function calls:
  9282 ;;		Nothing
  9283 ;; This function is called by:
  9284 ;;		_strstr
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           	psect	text43
  9289  0029AE                     __ptext43:
  9290                           	opt stack 0
  9291  0029AE                     _strlen:
  9292                           	opt stack 28
  9293                           
  9294                           ;incstack = 0
  9295  0029AE  C012  F016         	movff	strlen@s,strlen@cp
  9296  0029B2  C013  F017         	movff	strlen@s+1,strlen@cp+1
  9297  0029B6  D002               	goto	l3751
  9298  0029B8                     l3749:
  9299  0029B8  4A16               	infsnz	strlen@cp,f,c
  9300  0029BA  2A17               	incf	strlen@cp+1,f,c
  9301  0029BC                     l3751:
  9302  0029BC  C016  FFF6         	movff	strlen@cp,tblptrl
  9303  0029C0  C017  FFF7         	movff	strlen@cp+1,tblptrh
  9304  0029C4                     	if	0	;tblptru may be non-zero
  9305  0029C4                     	endif
  9306  0029C4                     	if	0	;tblptru may be non-zero
  9307  0029C4                     	endif
  9308  0029C4  0008               	tblrd		*
  9309  0029C6  50F5               	movf	tablat,w,c
  9310  0029C8  0900               	iorlw	0
  9311  0029CA  A4D8               	btfss	status,2,c
  9312  0029CC  D7F5               	goto	l3749
  9313  0029CE  C012  F014         	movff	strlen@s,??_strlen
  9314  0029D2  C013  F015         	movff	strlen@s+1,??_strlen+1
  9315  0029D6  1E14               	comf	??_strlen,f,c
  9316  0029D8  1E15               	comf	??_strlen+1,f,c
  9317  0029DA  4A14               	infsnz	??_strlen,f,c
  9318  0029DC  2A15               	incf	??_strlen+1,f,c
  9319  0029DE  5016               	movf	strlen@cp,w,c
  9320  0029E0  2414               	addwf	??_strlen,w,c
  9321  0029E2  6E12               	movwf	?_strlen,c
  9322  0029E4  5017               	movf	strlen@cp+1,w,c
  9323  0029E6  2015               	addwfc	??_strlen+1,w,c
  9324  0029E8  6E13               	movwf	?_strlen+1,c
  9325  0029EA  0012               	return	
  9326  0029EC                     __end_of_strlen:
  9327                           	opt stack 0
  9328                           tblptru	equ	0xFF8
  9329                           tblptrh	equ	0xFF7
  9330                           tblptrl	equ	0xFF6
  9331                           tablat	equ	0xFF5
  9332                           prodh	equ	0xFF4
  9333                           prodl	equ	0xFF3
  9334                           intcon	equ	0xFF2
  9335                           postinc0	equ	0xFEE
  9336                           wreg	equ	0xFE8
  9337                           indf1	equ	0xFE7
  9338                           plusw1	equ	0xFE3
  9339                           fsr1h	equ	0xFE2
  9340                           fsr1l	equ	0xFE1
  9341                           indf2	equ	0xFDF
  9342                           postinc2	equ	0xFDE
  9343                           postdec2	equ	0xFDD
  9344                           plusw2	equ	0xFDB
  9345                           fsr2h	equ	0xFDA
  9346                           fsr2l	equ	0xFD9
  9347                           status	equ	0xFD8
  9348                           
  9349 ;; *************** function _strchr *****************
  9350 ;; Defined at:
  9351 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strchr.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;  ptr             2   17[COMRAM] PTR const unsigned char 
  9354 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  9355 ;;  chr             2   19[COMRAM] int 
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;		None
  9358 ;; Return value:  Size  Location     Type
  9359 ;;                  2   17[COMRAM] PTR unsigned char 
  9360 ;; Registers used:
  9361 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9362 ;; Tracked objects:
  9363 ;;		On entry : 0/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9367 ;;      Params:         4       0       0       0       0       0       0
  9368 ;;      Locals:         0       0       0       0       0       0       0
  9369 ;;      Temps:          1       0       0       0       0       0       0
  9370 ;;      Totals:         5       0       0       0       0       0       0
  9371 ;;Total ram usage:        5 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; Hardware stack levels required when called:    1
  9374 ;; This function calls:
  9375 ;;		Nothing
  9376 ;; This function is called by:
  9377 ;;		_strstr
  9378 ;; This function uses a non-reentrant model
  9379 ;;
  9380                           
  9381                           	psect	text44
  9382  0029EC                     __ptext44:
  9383                           	opt stack 0
  9384  0029EC                     _strchr:
  9385                           	opt stack 28
  9386  0029EC  C012  FFD9         	movff	strchr@ptr,fsr2l
  9387  0029F0  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  9388  0029F4  5014               	movf	strchr@chr,w,c
  9389  0029F6  18DE               	xorwf	postinc2,w,c
  9390  0029F8  A4D8               	btfss	status,2,c
  9391  0029FA  D005               	goto	l3781
  9392  0029FC  C012  F012         	movff	strchr@ptr,?_strchr
  9393  002A00  C013  F013         	movff	strchr@ptr+1,?_strchr+1
  9394  002A04  0012               	return	
  9395  002A06                     l3781:
  9396  002A06  C012  FFD9         	movff	strchr@ptr,fsr2l
  9397  002A0A  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  9398  002A0E  4A12               	infsnz	strchr@ptr,f,c
  9399  002A10  2A13               	incf	strchr@ptr+1,f,c
  9400  002A12  50DF               	movf	indf2,w,c
  9401  002A14  A4D8               	btfss	status,2,c
  9402  002A16  D7EA               	goto	l3775
  9403  002A18  0E00               	movlw	0
  9404  002A1A  6E12               	movwf	?_strchr,c
  9405  002A1C  0E00               	movlw	0
  9406  002A1E  6E13               	movwf	?_strchr+1,c
  9407  002A20  0012               	return	
  9408  002A22                     __end_of_strchr:
  9409                           	opt stack 0
  9410                           tblptru	equ	0xFF8
  9411                           tblptrh	equ	0xFF7
  9412                           tblptrl	equ	0xFF6
  9413                           tablat	equ	0xFF5
  9414                           prodh	equ	0xFF4
  9415                           prodl	equ	0xFF3
  9416                           intcon	equ	0xFF2
  9417                           postinc0	equ	0xFEE
  9418                           wreg	equ	0xFE8
  9419                           indf1	equ	0xFE7
  9420                           plusw1	equ	0xFE3
  9421                           fsr1h	equ	0xFE2
  9422                           fsr1l	equ	0xFE1
  9423                           indf2	equ	0xFDF
  9424                           postinc2	equ	0xFDE
  9425                           postdec2	equ	0xFDD
  9426                           plusw2	equ	0xFDB
  9427                           fsr2h	equ	0xFDA
  9428                           fsr2l	equ	0xFD9
  9429                           status	equ	0xFD8
  9430                           
  9431 ;; *************** function _delay_ms *****************
  9432 ;; Defined at:
  9433 ;;		line 4 in file "harwave/delay.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;  ms              2   19[COMRAM] int 
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;		None
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  1    wreg      void 
  9440 ;; Registers used:
  9441 ;;		wreg, status,2, status,0, cstack
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9447 ;;      Params:         2       0       0       0       0       0       0
  9448 ;;      Locals:         0       0       0       0       0       0       0
  9449 ;;      Temps:          0       0       0       0       0       0       0
  9450 ;;      Totals:         2       0       0       0       0       0       0
  9451 ;;Total ram usage:        2 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    2
  9454 ;; This function calls:
  9455 ;;		_Delay10KTCYx
  9456 ;; This function is called by:
  9457 ;;		_ESP8266_Cmd
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           	psect	text45
  9462  002BAA                     __ptext45:
  9463                           	opt stack 0
  9464  002BAA                     _delay_ms:
  9465                           	opt stack 25
  9466  002BAA                     l3787:
  9467                           
  9468                           ;delay.c: 6: for(;ms>0;ms--)
  9469  002BAA  BE15               	btfsc	delay_ms@ms+1,7,c
  9470  002BAC  0012               	return	
  9471  002BAE  5015               	movf	delay_ms@ms+1,w,c
  9472  002BB0  E103               	bnz	l3791
  9473  002BB2  0414               	decf	delay_ms@ms,w,c
  9474  002BB4  A0D8               	btfss	status,0,c
  9475  002BB6  0012               	return	
  9476  002BB8                     l3791:
  9477                           
  9478                           ;delay.c: 7: {
  9479                           ;delay.c: 8: Delay10KTCYx(1);
  9480  002BB8  0E01               	movlw	1
  9481  002BBA  ECE3  F015         	call	_Delay10KTCYx
  9482  002BBE  0614               	decf	delay_ms@ms,f,c
  9483  002BC0  A0D8               	btfss	status,0,c
  9484  002BC2  0615               	decf	delay_ms@ms+1,f,c
  9485  002BC4  D7F2               	goto	l3787
  9486  002BC6                     __end_of_delay_ms:
  9487                           	opt stack 0
  9488                           tblptru	equ	0xFF8
  9489                           tblptrh	equ	0xFF7
  9490                           tblptrl	equ	0xFF6
  9491                           tablat	equ	0xFF5
  9492                           prodh	equ	0xFF4
  9493                           prodl	equ	0xFF3
  9494                           intcon	equ	0xFF2
  9495                           postinc0	equ	0xFEE
  9496                           wreg	equ	0xFE8
  9497                           indf1	equ	0xFE7
  9498                           plusw1	equ	0xFE3
  9499                           fsr1h	equ	0xFE2
  9500                           fsr1l	equ	0xFE1
  9501                           indf2	equ	0xFDF
  9502                           postinc2	equ	0xFDE
  9503                           postdec2	equ	0xFDD
  9504                           plusw2	equ	0xFDB
  9505                           fsr2h	equ	0xFDA
  9506                           fsr2l	equ	0xFD9
  9507                           status	equ	0xFD8
  9508                           
  9509 ;; *************** function _Delay10KTCYx *****************
  9510 ;; Defined at:
  9511 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10ktcyx.c"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;  unit            1    wreg     unsigned char 
  9514 ;; Auto vars:     Size  Location     Type
  9515 ;;  unit            1   18[COMRAM] unsigned char 
  9516 ;; Return value:  Size  Location     Type
  9517 ;;                  1    wreg      void 
  9518 ;; Registers used:
  9519 ;;		wreg
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9525 ;;      Params:         0       0       0       0       0       0       0
  9526 ;;      Locals:         1       0       0       0       0       0       0
  9527 ;;      Temps:          1       0       0       0       0       0       0
  9528 ;;      Totals:         2       0       0       0       0       0       0
  9529 ;;Total ram usage:        2 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; Hardware stack levels required when called:    1
  9532 ;; This function calls:
  9533 ;;		Nothing
  9534 ;; This function is called by:
  9535 ;;		_delay_ms
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           	psect	text46
  9540  002BC6                     __ptext46:
  9541                           	opt stack 0
  9542  002BC6                     _Delay10KTCYx:
  9543                           	opt stack 25
  9544                           
  9545                           ;incstack = 0
  9546                           ;Delay10KTCYx@unit stored from wreg
  9547  002BC6  6E13               	movwf	Delay10KTCYx@unit,c
  9548  002BC8  0E0D               	movlw	13
  9549  002BCA  6E12               	movwf	??_Delay10KTCYx& (0+255),c
  9550  002BCC  0EFC               	movlw	252
  9551  002BCE                     u5717:
  9552  002BCE  2EE8               	decfsz	wreg,f,c
  9553  002BD0  D7FE               	bra	u5717
  9554  002BD2  2E12               	decfsz	??_Delay10KTCYx& (0+255),f,c
  9555  002BD4  D7FC               	bra	u5717
  9556  002BD6  2E13               	decfsz	Delay10KTCYx@unit,f,c
  9557  002BD8  D7F7               	goto	l3743
  9558  002BDA  0012               	return	
  9559  002BDC                     __end_of_Delay10KTCYx:
  9560                           	opt stack 0
  9561                           tblptru	equ	0xFF8
  9562                           tblptrh	equ	0xFF7
  9563                           tblptrl	equ	0xFF6
  9564                           tablat	equ	0xFF5
  9565                           prodh	equ	0xFF4
  9566                           prodl	equ	0xFF3
  9567                           intcon	equ	0xFF2
  9568                           postinc0	equ	0xFEE
  9569                           wreg	equ	0xFE8
  9570                           indf1	equ	0xFE7
  9571                           plusw1	equ	0xFE3
  9572                           fsr1h	equ	0xFE2
  9573                           fsr1l	equ	0xFE1
  9574                           indf2	equ	0xFDF
  9575                           postinc2	equ	0xFDE
  9576                           postdec2	equ	0xFDD
  9577                           plusw2	equ	0xFDB
  9578                           fsr2h	equ	0xFDA
  9579                           fsr2l	equ	0xFD9
  9580                           status	equ	0xFD8
  9581                           
  9582 ;; *************** function _ESP8266_Uart *****************
  9583 ;; Defined at:
  9584 ;;		line 53 in file "harwave/UART.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;  cmd             2   17[COMRAM] PTR unsigned char 
  9587 ;;		 -> STR_59(14), STR_57(15), STR_53(11), STR_49(25), 
  9588 ;;		 -> STR_47(23), STR_45(22), STR_43(14), STR_41(15), 
  9589 ;;		 -> STR_39(14), STR_33(13), STR_30(13), ESP8266_Link_Server@cCmd(120), 
  9590 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_15(14), STR_12(14), 
  9591 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@tem(12), 
  9592 ;;		 -> ESP8266_SendString@cStr(20), 
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;  index           2   21[COMRAM] int 
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  1    wreg      void 
  9597 ;; Registers used:
  9598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9604 ;;      Params:         2       0       0       0       0       0       0
  9605 ;;      Locals:         2       0       0       0       0       0       0
  9606 ;;      Temps:          2       0       0       0       0       0       0
  9607 ;;      Totals:         6       0       0       0       0       0       0
  9608 ;;Total ram usage:        6 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    1
  9611 ;; This function calls:
  9612 ;;		Nothing
  9613 ;; This function is called by:
  9614 ;;		_ESP8266_Cmd
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           	psect	text47
  9619  0027A6                     __ptext47:
  9620                           	opt stack 0
  9621  0027A6                     _ESP8266_Uart:
  9622                           	opt stack 26
  9623                           
  9624                           ;UART.c: 54: int index=-1;
  9625                           
  9626                           ;incstack = 0
  9627  0027A6  6816               	setf	ESP8266_Uart@index,c
  9628  0027A8  6817               	setf	ESP8266_Uart@index+1,c
  9629  0027AA                     l3799:
  9630                           
  9631                           ;UART.c: 56: {
  9632                           ;UART.c: 57: index++;
  9633  0027AA  4A16               	infsnz	ESP8266_Uart@index,f,c
  9634  0027AC  2A17               	incf	ESP8266_Uart@index+1,f,c
  9635  0027AE                     l192:
  9636  0027AE  A89E               	btfss	3998,4,c	;volatile
  9637  0027B0  D7FE               	goto	l192
  9638                           
  9639                           ;UART.c: 59: TXREG=cmd[index];
  9640  0027B2  5016               	movf	ESP8266_Uart@index,w,c
  9641  0027B4  2412               	addwf	ESP8266_Uart@cmd,w,c
  9642  0027B6  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  9643  0027B8  5017               	movf	ESP8266_Uart@index+1,w,c
  9644  0027BA  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  9645  0027BC  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  9646  0027BE  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  9647  0027C2  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  9648  0027C6  6AF8               	clrf	tblptru,c
  9649  0027C8  0E05               	movlw	(high __ramtop+-1)
  9650  0027CA  64F7               	cpfsgt	tblptrh,c
  9651  0027CC  D003               	bra	u3987
  9652  0027CE  0008               	tblrd		*
  9653  0027D0  50F5               	movf	tablat,w,c
  9654  0027D2  D005               	bra	u3980
  9655  0027D4                     u3987:
  9656  0027D4  CFF6 FFE1          	movff	tblptrl,fsr1l
  9657  0027D8  CFF7 FFE2          	movff	tblptrh,fsr1h
  9658  0027DC  50E7               	movf	indf1,w,c
  9659  0027DE                     u3980:
  9660  0027DE  6EAD               	movwf	4013,c	;volatile
  9661                           
  9662                           ;UART.c: 60: }while(cmd[index]!='\0');
  9663  0027E0  5016               	movf	ESP8266_Uart@index,w,c
  9664  0027E2  2412               	addwf	ESP8266_Uart@cmd,w,c
  9665  0027E4  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  9666  0027E6  5017               	movf	ESP8266_Uart@index+1,w,c
  9667  0027E8  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  9668  0027EA  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  9669  0027EC  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  9670  0027F0  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  9671  0027F4  6AF8               	clrf	tblptru,c
  9672  0027F6  0E05               	movlw	(high __ramtop+-1)
  9673  0027F8  64F7               	cpfsgt	tblptrh,c
  9674  0027FA  D003               	bra	u3997
  9675  0027FC  0008               	tblrd		*
  9676  0027FE  50F5               	movf	tablat,w,c
  9677  002800  D005               	bra	u3990
  9678  002802                     u3997:
  9679  002802  CFF6 FFE1          	movff	tblptrl,fsr1l
  9680  002806  CFF7 FFE2          	movff	tblptrh,fsr1h
  9681  00280A  50E7               	movf	indf1,w,c
  9682  00280C                     u3990:
  9683  00280C  0900               	iorlw	0
  9684  00280E  A4D8               	btfss	status,2,c
  9685  002810  D7CC               	goto	l3799
  9686  002812                     l196:
  9687  002812  B2AC               	btfsc	4012,1,c	;volatile
  9688  002814  0012               	return	
  9689  002816  D7FD               	goto	l196
  9690  002818                     __end_of_ESP8266_Uart:
  9691                           	opt stack 0
  9692                           tblptru	equ	0xFF8
  9693                           tblptrh	equ	0xFF7
  9694                           tblptrl	equ	0xFF6
  9695                           tablat	equ	0xFF5
  9696                           prodh	equ	0xFF4
  9697                           prodl	equ	0xFF3
  9698                           intcon	equ	0xFF2
  9699                           postinc0	equ	0xFEE
  9700                           wreg	equ	0xFE8
  9701                           indf1	equ	0xFE7
  9702                           plusw1	equ	0xFE3
  9703                           fsr1h	equ	0xFE2
  9704                           fsr1l	equ	0xFE1
  9705                           indf2	equ	0xFDF
  9706                           postinc2	equ	0xFDE
  9707                           postdec2	equ	0xFDD
  9708                           plusw2	equ	0xFDB
  9709                           fsr2h	equ	0xFDA
  9710                           fsr2l	equ	0xFD9
  9711                           status	equ	0xFD8
  9712                           
  9713 ;; *************** function _UART *****************
  9714 ;; Defined at:
  9715 ;;		line 120 in file "main.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;  ch              1   16[COMRAM] unsigned char 
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      void 
  9722 ;; Registers used:
  9723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9729 ;;      Params:         0       0       0       0       0       0       0
  9730 ;;      Locals:         1       0       0       0       0       0       0
  9731 ;;      Temps:         16       0       0       0       0       0       0
  9732 ;;      Totals:        17       0       0       0       0       0       0
  9733 ;;Total ram usage:       17 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; This function calls:
  9736 ;;		Nothing
  9737 ;; This function is called by:
  9738 ;;		Interrupt level 2
  9739 ;; This function uses a non-reentrant model
  9740 ;;
  9741                           
  9742                           	psect	intcode
  9743  000008                     __pintcode:
  9744                           	opt stack 0
  9745  000008                     _UART:
  9746                           	opt stack 24
  9747                           
  9748                           ;incstack = 0
  9749  000008  826E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9750  00000A  ED5A  F00F         	call	int_func,f	;refresh shadow registers
  9751                           tblptru	equ	0xFF8
  9752                           tblptrh	equ	0xFF7
  9753                           tblptrl	equ	0xFF6
  9754                           tablat	equ	0xFF5
  9755                           prodh	equ	0xFF4
  9756                           prodl	equ	0xFF3
  9757                           intcon	equ	0xFF2
  9758                           postinc0	equ	0xFEE
  9759                           wreg	equ	0xFE8
  9760                           indf1	equ	0xFE7
  9761                           plusw1	equ	0xFE3
  9762                           fsr1h	equ	0xFE2
  9763                           fsr1l	equ	0xFE1
  9764                           indf2	equ	0xFDF
  9765                           postinc2	equ	0xFDE
  9766                           postdec2	equ	0xFDD
  9767                           plusw2	equ	0xFDB
  9768                           fsr2h	equ	0xFDA
  9769                           fsr2l	equ	0xFD9
  9770                           status	equ	0xFD8
  9771                           
  9772                           	psect	intcode_body
  9773  001EB4                     __pintcode_body:
  9774                           	opt stack 24
  9775  001EB4                     int_func:
  9776                           	opt stack 24
  9777  001EB4  0006               	pop		; remove dummy address from shadow register refresh
  9778  001EB6  CFFA F003          	movff	pclath,??_UART+2
  9779  001EBA  CFFB F004          	movff	pclatu,??_UART+3
  9780  001EBE  CFE9 F005          	movff	fsr0l,??_UART+4
  9781  001EC2  CFEA F006          	movff	fsr0h,??_UART+5
  9782  001EC6  CFE1 F007          	movff	fsr1l,??_UART+6
  9783  001ECA  CFE2 F008          	movff	fsr1h,??_UART+7
  9784  001ECE  CFD9 F009          	movff	fsr2l,??_UART+8
  9785  001ED2  CFDA F00A          	movff	fsr2h,??_UART+9
  9786  001ED6  CFF3 F00B          	movff	prodl,??_UART+10
  9787  001EDA  CFF4 F00C          	movff	prodh,??_UART+11
  9788  001EDE  CFF6 F00D          	movff	tblptrl,??_UART+12
  9789  001EE2  CFF7 F00E          	movff	tblptrh,??_UART+13
  9790  001EE6  CFF8 F00F          	movff	tblptru,??_UART+14
  9791  001EEA  CFF5 F010          	movff	tablat,??_UART+15
  9792                           
  9793                           ;main.c: 121: if( INTCONbits.TMR0IF )
  9794  001EEE  A4F2               	btfss	intcon,2,c	;volatile
  9795  001EF0  D004               	goto	i2l375
  9796                           
  9797                           ;main.c: 122: {
  9798                           ;main.c: 123: if(!write)
  9799  001EF2  5065               	movf	_write,w,c
  9800  001EF4  B4D8               	btfsc	status,2,c
  9801                           
  9802                           ;main.c: 124: ADCON0bits.GO=1;
  9803  001EF6  82C2               	bsf	4034,1,c	;volatile
  9804                           
  9805                           ;main.c: 125: INTCONbits.TMR0IF=0;
  9806  001EF8  94F2               	bcf	intcon,2,c	;volatile
  9807  001EFA                     i2l375:
  9808                           
  9809                           ;main.c: 126: }
  9810                           ;main.c: 127: if(PIR1bits.RCIF){
  9811  001EFA  AA9E               	btfss	3998,5,c	;volatile
  9812  001EFC  D038               	goto	i2l377
  9813                           
  9814                           ;main.c: 128: char ch;
  9815                           ;main.c: 129: ch = RCREG;
  9816  001EFE  CFAE F011          	movff	4014,UART@ch	;volatile
  9817                           
  9818                           ;main.c: 130: if( strEsp8266_Fram_Record .InfBit .FramLength < ( 50 - 1 ) ) {
  9819  001F02  0101               	movlb	1	; () banked
  9820  001F04  51DA               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9821  001F06  0B7F               	andlw	127
  9822  001F08  6E01               	movwf	??_UART& (0+255),c
  9823  001F0A  0E31               	movlw	49
  9824  001F0C  6001               	cpfslt	??_UART,c
  9825  001F0E  D02E               	goto	i2l378
  9826                           
  9827                           ; BSR set to: 1
  9828                           ;main.c: 131: strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .Fram
      +                          Length ++ ] = ch;
  9829  001F10  0101               	movlb	1	; () banked
  9830  001F12  51DA               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9831  001F14  0B7F               	andlw	127
  9832  001F16  6E01               	movwf	??_UART& (0+255),c
  9833  001F18  5001               	movf	??_UART,w,c
  9834  001F1A  0D01               	mullw	1
  9835  001F1C  0EA8               	movlw	low _strEsp8266_Fram_Record
  9836  001F1E  24F3               	addwf	prodl,w,c
  9837  001F20  6ED9               	movwf	fsr2l,c
  9838  001F22  0E01               	movlw	high _strEsp8266_Fram_Record
  9839  001F24  20F4               	addwfc	prodh,w,c
  9840  001F26  6EDA               	movwf	fsr2h,c
  9841  001F28  C011  FFDF         	movff	UART@ch,indf2
  9842                           
  9843                           ; BSR set to: 1
  9844  001F2C  0E01               	movlw	1
  9845  001F2E  6E01               	movwf	??_UART& (0+255),c
  9846  001F30  0101               	movlb	1	; () banked
  9847  001F32  51DA               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9848  001F34  0B7F               	andlw	127
  9849  001F36  6E02               	movwf	(??_UART+1)& (0+255),c
  9850  001F38  5001               	movf	??_UART,w,c
  9851  001F3A  2602               	addwf	??_UART+1,f,c
  9852  001F3C  0101               	movlb	1	; () banked
  9853  001F3E  51DA               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9854  001F40  1802               	xorwf	(??_UART+1)& (0+255),w,c
  9855  001F42  0B80               	andlw	-128
  9856  001F44  1802               	xorwf	(??_UART+1)& (0+255),w,c
  9857  001F46  0101               	movlb	1	; () banked
  9858  001F48  6FDA               	movwf	(_strEsp8266_Fram_Record+50)& (0+255),b
  9859                           
  9860                           ; BSR set to: 1
  9861                           ;main.c: 132: if(strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .F
      +                          ramLength] == '\0')
  9862  001F4A  0101               	movlb	1	; () banked
  9863  001F4C  51DA               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9864  001F4E  0B7F               	andlw	127
  9865  001F50  6E01               	movwf	??_UART& (0+255),c
  9866  001F52  5001               	movf	??_UART,w,c
  9867  001F54  0D01               	mullw	1
  9868  001F56  0EA8               	movlw	low _strEsp8266_Fram_Record
  9869  001F58  24F3               	addwf	prodl,w,c
  9870  001F5A  6ED9               	movwf	fsr2l,c
  9871  001F5C  0E01               	movlw	high _strEsp8266_Fram_Record
  9872  001F5E  20F4               	addwfc	prodh,w,c
  9873  001F60  6EDA               	movwf	fsr2h,c
  9874  001F62  50DF               	movf	indf2,w,c
  9875  001F64  A4D8               	btfss	status,2,c
  9876  001F66  D002               	goto	i2l378
  9877                           
  9878                           ; BSR set to: 1
  9879                           ;main.c: 133: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 1;
  9880  001F68  0101               	movlb	1	; () banked
  9881  001F6A  8FDA               	bsf	(_strEsp8266_Fram_Record+50)& (0+255),7,b
  9882  001F6C                     i2l378:
  9883                           
  9884                           ; BSR set to: 1
  9885                           ;main.c: 134: }
  9886                           ;main.c: 135: PIR1bits.RCIF=0;
  9887  001F6C  9A9E               	bcf	3998,5,c	;volatile
  9888  001F6E                     i2l377:
  9889                           
  9890                           ;main.c: 140: }
  9891                           ;main.c: 141: if(PIR1bits.ADIF){
  9892  001F6E  AC9E               	btfss	3998,6,c	;volatile
  9893  001F70  D007               	goto	i2l381
  9894                           
  9895                           ;main.c: 142: PIR1bits.ADIF=0;
  9896  001F72  9C9E               	bcf	3998,6,c	;volatile
  9897                           
  9898                           ;main.c: 143: AD_L=ADRESL;
  9899  001F74  CFC3 F066          	movff	4035,_AD_L	;volatile
  9900                           
  9901                           ;main.c: 144: AD_H=ADRESH;
  9902  001F78  CFC4 F1A7          	movff	4036,_AD_H	;volatile
  9903                           
  9904                           ;main.c: 145: write=1;
  9905  001F7C  0E01               	movlw	1
  9906  001F7E  6E65               	movwf	_write,c
  9907  001F80                     i2l381:
  9908  001F80  C010  FFF5         	movff	??_UART+15,tablat
  9909  001F84  C00F  FFF8         	movff	??_UART+14,tblptru
  9910  001F88  C00E  FFF7         	movff	??_UART+13,tblptrh
  9911  001F8C  C00D  FFF6         	movff	??_UART+12,tblptrl
  9912  001F90  C00C  FFF4         	movff	??_UART+11,prodh
  9913  001F94  C00B  FFF3         	movff	??_UART+10,prodl
  9914  001F98  C00A  FFDA         	movff	??_UART+9,fsr2h
  9915  001F9C  C009  FFD9         	movff	??_UART+8,fsr2l
  9916  001FA0  C008  FFE2         	movff	??_UART+7,fsr1h
  9917  001FA4  C007  FFE1         	movff	??_UART+6,fsr1l
  9918  001FA8  C006  FFEA         	movff	??_UART+5,fsr0h
  9919  001FAC  C005  FFE9         	movff	??_UART+4,fsr0l
  9920  001FB0  C004  FFFB         	movff	??_UART+3,pclatu
  9921  001FB4  C003  FFFA         	movff	??_UART+2,pclath
  9922  001FB8  926E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9923  001FBA  0011               	retfie		f
  9924  001FBC                     __end_of_UART:
  9925                           	opt stack 0
  9926                           pclatu	equ	0xFFB
  9927                           pclath	equ	0xFFA
  9928                           tblptru	equ	0xFF8
  9929                           tblptrh	equ	0xFF7
  9930                           tblptrl	equ	0xFF6
  9931                           tablat	equ	0xFF5
  9932                           prodh	equ	0xFF4
  9933                           prodl	equ	0xFF3
  9934                           intcon	equ	0xFF2
  9935                           postinc0	equ	0xFEE
  9936                           fsr0h	equ	0xFEA
  9937                           fsr0l	equ	0xFE9
  9938                           wreg	equ	0xFE8
  9939                           indf1	equ	0xFE7
  9940                           plusw1	equ	0xFE3
  9941                           fsr1h	equ	0xFE2
  9942                           fsr1l	equ	0xFE1
  9943                           indf2	equ	0xFDF
  9944                           postinc2	equ	0xFDE
  9945                           postdec2	equ	0xFDD
  9946                           plusw2	equ	0xFDB
  9947                           fsr2h	equ	0xFDA
  9948                           fsr2l	equ	0xFD9
  9949                           status	equ	0xFD8
  9950                           pclatu	equ	0xFFB
  9951                           pclath	equ	0xFFA
  9952                           tblptru	equ	0xFF8
  9953                           tblptrh	equ	0xFF7
  9954                           tblptrl	equ	0xFF6
  9955                           tablat	equ	0xFF5
  9956                           prodh	equ	0xFF4
  9957                           prodl	equ	0xFF3
  9958                           intcon	equ	0xFF2
  9959                           postinc0	equ	0xFEE
  9960                           fsr0h	equ	0xFEA
  9961                           fsr0l	equ	0xFE9
  9962                           wreg	equ	0xFE8
  9963                           indf1	equ	0xFE7
  9964                           plusw1	equ	0xFE3
  9965                           fsr1h	equ	0xFE2
  9966                           fsr1l	equ	0xFE1
  9967                           indf2	equ	0xFDF
  9968                           postinc2	equ	0xFDE
  9969                           postdec2	equ	0xFDD
  9970                           plusw2	equ	0xFDB
  9971                           fsr2h	equ	0xFDA
  9972                           fsr2l	equ	0xFD9
  9973                           status	equ	0xFD8
  9974                           
  9975                           	psect	rparam
  9976  0000                     pclatu	equ	0xFFB
  9977                           pclath	equ	0xFFA
  9978                           tblptru	equ	0xFF8
  9979                           tblptrh	equ	0xFF7
  9980                           tblptrl	equ	0xFF6
  9981                           tablat	equ	0xFF5
  9982                           prodh	equ	0xFF4
  9983                           prodl	equ	0xFF3
  9984                           intcon	equ	0xFF2
  9985                           postinc0	equ	0xFEE
  9986                           fsr0h	equ	0xFEA
  9987                           fsr0l	equ	0xFE9
  9988                           wreg	equ	0xFE8
  9989                           indf1	equ	0xFE7
  9990                           plusw1	equ	0xFE3
  9991                           fsr1h	equ	0xFE2
  9992                           fsr1l	equ	0xFE1
  9993                           indf2	equ	0xFDF
  9994                           postinc2	equ	0xFDE
  9995                           postdec2	equ	0xFDD
  9996                           plusw2	equ	0xFDB
  9997                           fsr2h	equ	0xFDA
  9998                           fsr2l	equ	0xFD9
  9999                           status	equ	0xFD8
 10000                           
 10001                           	psect	temp
 10002  00006E                     btemp:
 10003                           	opt stack 0
 10004  00006E                     	ds	1
 10005  0000                     int$flags	set	btemp
 10006                           pclatu	equ	0xFFB
 10007                           pclath	equ	0xFFA
 10008                           tblptru	equ	0xFF8
 10009                           tblptrh	equ	0xFF7
 10010                           tblptrl	equ	0xFF6
 10011                           tablat	equ	0xFF5
 10012                           prodh	equ	0xFF4
 10013                           prodl	equ	0xFF3
 10014                           intcon	equ	0xFF2
 10015                           postinc0	equ	0xFEE
 10016                           fsr0h	equ	0xFEA
 10017                           fsr0l	equ	0xFE9
 10018                           wreg	equ	0xFE8
 10019                           indf1	equ	0xFE7
 10020                           plusw1	equ	0xFE3
 10021                           fsr1h	equ	0xFE2
 10022                           fsr1l	equ	0xFE1
 10023                           indf2	equ	0xFDF
 10024                           postinc2	equ	0xFDE
 10025                           postdec2	equ	0xFDD
 10026                           plusw2	equ	0xFDB
 10027                           fsr2h	equ	0xFDA
 10028                           fsr2l	equ	0xFD9
 10029                           status	equ	0xFD8


Data Sizes:
    Strings     485
    Constant    30
    Data        0
    BSS         396
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     91     109
    BANK0           128    122     128
    BANK1           256     13     233
    BANK2           256      0     152
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_63(CODE[10]), STR_60(CODE[3]), STR_58(CODE[3]), STR_54(CODE[3]), 
		 -> STR_52(CODE[10]), STR_51(CODE[15]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_40(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[10]), STR_32(CODE[3]), STR_31(CODE[10]), 
		 -> STR_29(CODE[3]), STR_28(CODE[8]), STR_21(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[10]), STR_16(CODE[3]), STR_14(CODE[10]), STR_13(CODE[3]), 
		 -> STR_11(CODE[10]), STR_10(CODE[3]), STR_8(CODE[6]), STR_7(CODE[3]), 
		 -> STR_5(CODE[3]), STR_3(CODE[8]), STR_2(CODE[3]), NULL(NULL[0]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK1[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK1[52]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_63(CODE[10]), STR_60(CODE[3]), STR_58(CODE[3]), STR_54(CODE[3]), 
		 -> STR_52(CODE[10]), STR_51(CODE[15]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_40(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[10]), STR_32(CODE[3]), STR_31(CODE[10]), 
		 -> STR_29(CODE[3]), STR_28(CODE[8]), STR_21(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[10]), STR_16(CODE[3]), STR_14(CODE[10]), STR_13(CODE[3]), 
		 -> STR_11(CODE[10]), STR_10(CODE[3]), STR_8(CODE[6]), STR_7(CODE[3]), 
		 -> STR_5(CODE[3]), STR_3(CODE[8]), STR_2(CODE[3]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_63(CODE[10]), STR_60(CODE[3]), STR_58(CODE[3]), STR_54(CODE[3]), 
		 -> STR_52(CODE[10]), STR_51(CODE[15]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_40(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[10]), STR_32(CODE[3]), STR_31(CODE[10]), 
		 -> STR_29(CODE[3]), STR_28(CODE[8]), STR_21(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[10]), STR_16(CODE[3]), STR_14(CODE[10]), STR_13(CODE[3]), 
		 -> STR_11(CODE[10]), STR_10(CODE[3]), STR_8(CODE[6]), STR_7(CODE[3]), 
		 -> STR_5(CODE[3]), STR_3(CODE[8]), STR_2(CODE[3]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK1[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK1[52]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK1[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK1[52]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_63(CODE[10]), STR_60(CODE[3]), STR_58(CODE[3]), STR_54(CODE[3]), 
		 -> STR_52(CODE[10]), STR_51(CODE[15]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_40(CODE[3]), 
		 -> STR_35(CODE[3]), STR_34(CODE[10]), STR_32(CODE[3]), STR_31(CODE[10]), 
		 -> STR_29(CODE[3]), STR_28(CODE[8]), STR_21(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[10]), STR_16(CODE[3]), STR_14(CODE[10]), STR_13(CODE[3]), 
		 -> STR_11(CODE[10]), STR_10(CODE[3]), STR_8(CODE[6]), STR_7(CODE[3]), 
		 -> STR_5(CODE[3]), STR_3(CODE[8]), STR_2(CODE[3]), NULL(NULL[0]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK1[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK1[52]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 11
		 -> main@tem(BANK1[11]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 12
		 -> ESP8266_SendString@tem(BANK0[12]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 12
		 -> ESP8266_SendString@tem(BANK0[12]), 

    sprintf$1378	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_66(CODE[17]), STR_65(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 100
		 -> STR_64(CODE[7]), sprintf@c(COMRAM[1]), STR_62(CODE[5]), STR_61(CODE[12]), 
		 -> STR_56(CODE[10]), STR_55(CODE[5]), STR_38(CODE[2]), STR_37(CODE[10]), 
		 -> STR_36(CODE[4]), STR_25(CODE[4]), STR_23(CODE[4]), ESP8266_Link_Server@cStr(COMRAM[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_27(CODE[17]), STR_26(CODE[20]), STR_24(CODE[15]), STR_22(CODE[15]), 
		 -> STR_20(CODE[26]), STR_18(CODE[21]), STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 120
		 -> ESP8266_Link_Server@cCmd(COMRAM[120]), ESP8266_Link_Server@cStr(COMRAM[100]), ESP8266_BuildAP@cCmd(BANK0[120]), ESP8266_JoinAP@cCmd(COMRAM[120]), 
		 -> ESP8266_SendString@cStr(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    ESP8266_BuildAP@enunPsdMode	PTR unsigned char  size(2) Largest target is 2
		 -> STR_38(CODE[2]), 

    ESP8266_BuildAP@pPassWord	PTR unsigned char  size(2) Largest target is 10
		 -> STR_37(CODE[10]), 

    ESP8266_BuildAP@pSSID	PTR unsigned char  size(2) Largest target is 4
		 -> STR_36(CODE[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 12
		 -> ESP8266_SendString@tem(BANK0[12]), 

    ESP8266_SendString@pStr	PTR unsigned char  size(2) Largest target is 11
		 -> main@tem(BANK1[11]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK1[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK1[52]), 

    ESP8266_Cmd@reply2	PTR unsigned char  size(2) Largest target is 10
		 -> STR_35(CODE[3]), STR_32(CODE[3]), STR_29(CODE[3]), STR_17(CODE[10]), 
		 -> STR_14(CODE[10]), STR_11(CODE[10]), STR_8(CODE[6]), NULL(NULL[0]), 

    ESP8266_Cmd@reply1	PTR unsigned char  size(2) Largest target is 10
		 -> STR_60(CODE[3]), STR_58(CODE[3]), STR_54(CODE[3]), STR_50(CODE[3]), 
		 -> STR_48(CODE[3]), STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), 
		 -> STR_40(CODE[3]), STR_34(CODE[10]), STR_31(CODE[10]), STR_28(CODE[8]), 
		 -> STR_21(CODE[3]), STR_19(CODE[3]), STR_16(CODE[3]), STR_13(CODE[3]), 
		 -> STR_10(CODE[3]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), 

    ESP8266_Cmd@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_59(CODE[14]), STR_57(CODE[15]), STR_53(CODE[11]), STR_49(CODE[25]), 
		 -> STR_47(CODE[23]), STR_45(CODE[22]), STR_43(CODE[14]), STR_41(CODE[15]), 
		 -> STR_39(CODE[14]), STR_33(CODE[13]), STR_30(CODE[13]), ESP8266_Link_Server@cCmd(COMRAM[120]), 
		 -> ESP8266_BuildAP@cCmd(BANK0[120]), ESP8266_JoinAP@cCmd(COMRAM[120]), STR_15(CODE[14]), STR_12(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@tem(BANK0[12]), 
		 -> ESP8266_SendString@cStr(BANK0[20]), 

    ESP8266_Uart@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_59(CODE[14]), STR_57(CODE[15]), STR_53(CODE[11]), STR_49(CODE[25]), 
		 -> STR_47(CODE[23]), STR_45(CODE[22]), STR_43(CODE[14]), STR_41(CODE[15]), 
		 -> STR_39(CODE[14]), STR_33(CODE[13]), STR_30(CODE[13]), ESP8266_Link_Server@cCmd(COMRAM[120]), 
		 -> ESP8266_BuildAP@cCmd(BANK0[120]), ESP8266_JoinAP@cCmd(COMRAM[120]), STR_15(CODE[14]), STR_12(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@tem(BANK0[12]), 
		 -> ESP8266_SendString@cStr(BANK0[20]), 


Critical Paths under _main in COMRAM

    _main->_translate_flex
    _translate_flex->___fttol
    ___lwtoft->___ftpack
    ___fttol->_KalmanFilter_0
    ___fttol->_KalmanFilter_1
    ___fttol->_KalmanFilter_2
    ___fttol->_KalmanFilter_3
    ___fttol->_KalmanFilter_4
    ___fttol->_KalmanFilter_5
    ___fttol->_KalmanFilter_6
    ___fttol->_KalmanFilter_7
    ___fttol->_KalmanFilter_8
    ___fttol->_KalmanFilter_9
    _KalmanFilter_9->___ftdiv
    _KalmanFilter_9->___ftmul
    _KalmanFilter_8->___ftdiv
    _KalmanFilter_8->___ftmul
    _KalmanFilter_7->___ftdiv
    _KalmanFilter_7->___ftmul
    _KalmanFilter_6->___ftdiv
    _KalmanFilter_6->___ftmul
    _KalmanFilter_5->___ftdiv
    _KalmanFilter_5->___ftmul
    _KalmanFilter_4->___ftdiv
    _KalmanFilter_4->___ftmul
    _KalmanFilter_3->___ftdiv
    _KalmanFilter_3->___ftmul
    _KalmanFilter_2->___ftdiv
    _KalmanFilter_2->___ftmul
    _KalmanFilter_1->___ftdiv
    _KalmanFilter_1->___ftmul
    _KalmanFilter_0->___ftdiv
    _KalmanFilter_0->___ftmul
    ___ftmul->___ftadd
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _ESP8266_Server->_ESP8266_BuildAP
    _ESP8266_Rst->_ESP8266_Cmd
    _ESP8266_BuildAP->_sprintf
    _ESP8266_AT_Test->_ESP8266_Cmd
    _AP_MODE->_ESP8266_Net_Mode_Choose
    _ESP8266_Net_Mode_Choose->_ESP8266_Cmd
    _ESP8266_SendString->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ESP8266_Cmd->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _delay_ms->_Delay10KTCYx

Critical Paths under _UART in COMRAM

    None.

Critical Paths under _main in BANK0

    _translate_flex->___fttol
    _ESP8266_Server->_ESP8266_BuildAP

Critical Paths under _UART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _UART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _UART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _UART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _UART in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0  336463
                                            120 BANK0      2     2      0
                                              0 BANK1     13    13      0
                 _ESP8266_SendString
                     _ESP8266_Server
                       _GPIO_initial
                            ___awmod
                        _adc_initial
                       _initial_UART
                 _oclillator_initial
                             _strstr
                    _timer_0_initial
            _timer_intrrupt_initinal
                     _translate_flex
 ---------------------------------------------------------------------------------
 (1) _translate_flex                                       9     7      2  252393
                                             89 COMRAM     2     0      2
                                             11 BANK0      3     3      0
                     _KalmanFilter_0
                     _KalmanFilter_1
                     _KalmanFilter_2
                     _KalmanFilter_3
                     _KalmanFilter_4
                     _KalmanFilter_5
                     _KalmanFilter_6
                     _KalmanFilter_7
                     _KalmanFilter_8
                     _KalmanFilter_9
                            ___awdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3265
                                             25 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1141
                                             85 COMRAM     4     0      4
                                              0 BANK0     11    11      0
                     _KalmanFilter_0 (ARG)
                     _KalmanFilter_1 (ARG)
                     _KalmanFilter_2 (ARG)
                     _KalmanFilter_3 (ARG)
                     _KalmanFilter_4 (ARG)
                     _KalmanFilter_5 (ARG)
                     _KalmanFilter_6 (ARG)
                     _KalmanFilter_7 (ARG)
                     _KalmanFilter_8 (ARG)
                     _KalmanFilter_9 (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                             17 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_9                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_8                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_7                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_6                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_5                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_4                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_3                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_2                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_1                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _KalmanFilter_0                                      33    24      9   24660
                                             52 COMRAM    33    24      9
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3    1605
                                             17 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6146
                                             37 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4538
                                             37 COMRAM    15     9      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6   11617
                                             25 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2464
                                             17 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _timer_intrrupt_initinal                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_0_initial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _oclillator_initial                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initial_UART                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_initial                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     424
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _GPIO_initial                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP8266_Server                                       0     0      0   64167
                            _AP_MODE
                    _ESP8266_AT_Test
                    _ESP8266_BuildAP
                        _ESP8266_Cmd
                        _ESP8266_Rst
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Rst                                          0     0      0    9463
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_BuildAP                                    126   120      6   16821
                                             64 COMRAM     6     0      6
                                              0 BANK0    120   120      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ESP8266_AT_Test                                      0     0      0    9463
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _AP_MODE                                              0     0      0   18957
                        _ESP8266_Cmd
            _ESP8266_Net_Mode_Choose
 ---------------------------------------------------------------------------------
 (3) _ESP8266_Net_Mode_Choose                              1     1      0    9494
                                             45 COMRAM     1     1      0
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (1) _ESP8266_SendString                                  40    36      4   17134
                                             64 COMRAM     5     1      4
                                              0 BANK0     35    35      0
                        _ESP8266_Cmd
                            _sprintf
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     263
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             39    29     10    6858
                                             29 COMRAM    35    25     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     386
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             24 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     703
                                             17 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _ESP8266_Cmd                                          9     1      8    9463
                                             36 COMRAM     9     1      8
                       _ESP8266_Uart
                           _delay_ms
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _strstr                                               4     0      4    2237
                                             32 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              9     3      6     423
                                             23 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _strchr                                               5     1      4     278
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             2     0      2     173
                                             19 COMRAM     2     0      2
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (5) _Delay10KTCYx                                         2     2      0      31
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ESP8266_Uart                                         6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _UART                                                17    17      0      23
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ESP8266_SendString
     _ESP8266_Cmd
       _ESP8266_Uart
       _delay_ms
         _Delay10KTCYx
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _strcpy
   _ESP8266_Server
     _AP_MODE
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _ESP8266_Net_Mode_Choose
         _ESP8266_Cmd
           _ESP8266_Uart
           _delay_ms
             _Delay10KTCYx
           _strstr
             _strchr
             _strlen
             _strncmp
               _strlen (ARG)
     _ESP8266_AT_Test
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _ESP8266_BuildAP
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Cmd
       _ESP8266_Uart
       _delay_ms
         _Delay10KTCYx
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _ESP8266_Rst
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
   _GPIO_initial
   ___awmod
   _adc_initial
   _initial_UART
   _oclillator_initial
   _strstr
     _strchr
     _strlen
     _strncmp
       _strlen (ARG)
   _timer_0_initial
   _timer_intrrupt_initinal
   _translate_flex
     _KalmanFilter_0
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_1
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_2
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_3
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_4
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_5
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_6
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_7
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_8
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     _KalmanFilter_9
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___lwtoft (ARG)
         ___ftpack
     ___awdiv
     ___fttol
       _KalmanFilter_0 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_1 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_2 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_3 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_4 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_5 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_6 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_7 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_8 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       _KalmanFilter_9 (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack

 _UART (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      98       9       59.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      D      E9       7       91.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     7A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5B      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26E      15        0.0%
DATA                 0      0     26E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Mar 04 18:37:58 2019

                               _H 006D                                 _L 006C  
                    ___awdiv@sign 0017               ___wmul@multiplicand 0014  
                     __CFG_BORV$3 000000                 ??_timer_0_initial 0012  
       KalmanFilter_3@ResrcData_3 0035                translate_flex@temp 008C  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                    ___ftadd@exp1 0025                      ___ftadd@exp2 0024  
                    ___ftadd@sign 0023                               l206 23F6  
                             l502 05DC                               l192 27AE  
                             l442 01B8                               l443 01BA  
                             l196 2812                               l518 06B4  
                             l800 0C6A                               l804 0C94  
                             l815 0D44                               l824 0D60  
                             l835 2268                               l960 2922  
                             l777 2570                               l857 2B5C  
                             l970 2964                      __CFG_CPB$OFF 000000  
                             _PR2 000FCB                      __CFG_CPD$OFF 000000  
            __size_of_adc_initial 0028               translate_flex@Value 008D  
                    ___awmod@sign 0017                               prod 000FF3  
                             wreg 000FE8                   __end_of_AP_MODE 2A54  
       ??_ESP8266_Net_Mode_Choose 002E                      __CFG_LVP$OFF 000000  
              _ESP8266_SendString 2432                      ___ftdiv@cntr 002F  
                    ___ftdiv@sign 0034                      __CFG_WDT$OFF 000000  
                            l4011 0172                              l4021 01B2  
                            l4013 0178                              l4103 03B8  
                            l4023 01B6                              l4201 05B2  
                            l4113 03E2                              l4033 01E6  
                            l4025 01BE                              l4017 0196  
                            l4115 03E6                              l4107 03D0  
                            l4051 026A                              l4035 01F0  
                            l4019 01AC                              l4301 0856  
                            l4213 05EE                              l4141 0442  
                            l4061 0292                              l4045 024C  
                            l4037 01F4                              l4223 0630  
                            l4207 05D6                              l4143 0446  
                            l4127 0412                              l4071 02DA  
                            l4055 0270                              l4039 0226  
                            l4311 088C                              l4305 086E  
                            l4241 0670                              l4129 0416  
                            l4081 0310                              l4049 0262  
                            l4313 08A6                              l4401 0DAC  
                            l4251 06AE                              l4163 04A4  
                            l4075 02EA                              l4059 0280  
                            l4067 02C4                              l4091 037A  
                            l4323 25BA                              l4411 21DC  
                            l4229 0646                              l4237 0666  
                            l4181 0508                              l4173 04D8  
                            l4157 0472                              l4085 0322  
                            l4077 02FC                              l4333 2606  
                            l4263 06FA                              l4247 068E  
                            l4167 04B6                              l4159 048E  
                            l4327 25E0                              l4319 2594  
                            l3631 2866                              l3623 2846  
                            l3615 282C                              l4343 0C78  
                            l4281 0792                              l4273 073C  
                            l4257 06C6                              l4193 057E  
                            l4089 0328                              l3625 284E  
                            l4417 2204                              l3811 26DC  
                            l4291 07F8                              l4195 0586  
                            l4187 053E                              l4179 0500  
                            l3627 2852                              l3635 2870  
                            l3619 2838                              l4371 0CF4  
                            l3805 26A2                              l3813 2704  
                            l3901 2566                              l4373 0CFE  
                            l4365 0CD2                              l4349 0CA2  
                            l4437 2242                              l3743 2BC8  
                            l3751 29BC                              l4287 07CC  
                            l4279 0752                              l4295 082A  
                            l4199 05AA                              l4631 2A82  
                            l3639 287E                              l4391 0D7C  
                            l4383 0D32                              l4375 0D08  
                            l4463 2110                              l3817 271A  
                            l3833 23A2                              l4297 0846  
                            l4625 2A5E                              l4385 0D3C  
                            l4377 0D10                              l4481 2152  
                            l4457 20E8                              l4713 1E3E  
                            l3763 2752                              l3851 23FA  
                            l3923 28F0                              l4299 0852  
                            l4627 2A66                              l4643 2A28  
                            l4491 217A                              l4731 1EA2  
                            l4723 1E6C                              l3781 2A06  
                            l3749 29B8                              l3925 28F8  
                            l4477 2142                              l4653 2630  
                            l4725 1E7C                              l4717 1E52  
                            l4741 08B6                              l3791 2BB8  
                            l3775 29EC                              l3767 2784  
                            l3759 2726                              l3935 2918  
                            l3927 28FC                              l3951 295A  
                            l3943 293A                              l3871 2BA2  
                            l4487 216A                              l4727 1E86  
                            l4751 0958                              l3769 278C  
                            l3945 2942                              l4665 2656  
                            l4681 2688                              l4745 090C  
                            l4905 1FFC                              l3787 2BAA  
                            l3859 241A                              l3947 2946  
                            l3971 0058                              l3963 003A  
                            l3891 250A                              l4667 265E  
                            l4659 2640                              l4763 0A00  
                            l4747 0912                              l4907 202E  
                            l3965 004C                              l3957 001E  
                            l4861 2346                              l4853 22A6  
                            l3893 2528                              l3885 24F2  
                            l4685 2696                              l4677 267E  
                            l4669 2662                              l4773 0A9C  
                            l3799 27AA                              l3983 00A2  
                            l3991 0100                              l3967 0050  
                            l3975 005E                              l4855 22C8  
                            l4695 1DBC                              l4783 0B38  
                            l4759 09BA                              l4919 20BA  
                            l3969 0054                              l4857 22F2  
                            l3897 253E                              l3889 2500  
                            l4769 0A56                              l4859 231C  
                            l3899 255C                              l4779 0AF2  
                            l4795 0BDA                              l4789 0B8E  
                            l4797 0C20                              l3999 012E  
                            l4897 1FCC                              STR_1 7EA2  
                            STR_2 7FF9                              STR_3 7FC9  
                            STR_4 7FDE                              STR_5 7FCE  
                            STR_6 7FC0                              STR_7 7FCE  
                            STR_8 7FD8                              _AD_H 01A7  
                            STR_9 7F32                              _AD_L 0066  
                            _LATD 000F8C                              u5211 20F8  
                            u5141 21C4                              u4440 02BA  
                            u5161 21EC                              u4370 0220  
                            u4700 0574                              u4447 02B0  
                            u5191 20D0                              u5351 1D9A  
                            u4377 0216                              u5370 1DE2  
                            u5375 1DD8                              u4851 071E  
                            u5491 2440                              u4931 0C36  
                            u3980 27DE                              u5708 20A8  
                            u5717 2BCE                              u4941 0C4A  
                            u3990 280C                              u5690 20A4  
                            u3987 27D4                              u3997 2802  
                            _UART 0008                              _TRMT 007D61  
                            _TXIF 007CF4    KalmanFilter_4@MeasureNoise_R_4 003B  
                            _main 1FBC                      ___ftpack@arg 0012  
                    ___ftpack@exp 0015              _strPc1_1_Fram_Record 0133  
                            _time 0067                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 006E  
             ?_ESP8266_SendString 0041         ??_timer_intrrupt_initinal 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                     __CFG_IESO$OFF 000000  
                    _sprintf$1371 002D                      _sprintf$1372 002F  
                    _sprintf$1378 0031                     __CFG_MCLRE$ON 000000  
                    ___ftmul@cntr 0033                      ___param_bank 000000  
                    ___ftmul@sign 0034           ESP8266_SendString@F4007 0166  
                    ___fttol@exp1 008A                      ___fttol@lval 0086  
                           ?_UART 0001               ESP8266_BuildAP@cCmd 0080  
       KalmanFilter_4@ResrcData_4 0035                  KalmanFilter_0@kg 004D  
                KalmanFilter_1@kg 004D                  KalmanFilter_2@kg 004D  
                KalmanFilter_3@kg 004D                  KalmanFilter_4@kg 004D  
                KalmanFilter_5@kg 004D                  KalmanFilter_6@kg 004D  
                KalmanFilter_7@kg 004D                  KalmanFilter_8@kg 004D  
                           ?_main 0001                  KalmanFilter_9@kg 004D  
                 __end_of___awdiv 26A0                   __end_of___ftadd 0DD2  
                           STR_10 7FCE                             STR_11 7FB6  
                           STR_12 7F4E                             STR_20 7E19  
                           STR_21 7FCE                             STR_13 7FCE  
                           STR_14 7FB6                             STR_30 7F6A  
                           STR_22 7F06                             STR_23 7FF1  
                           STR_31 7FA2                             STR_15 7F5C  
                           STR_40 7FCE                             STR_32 7FCE  
                           STR_16 7FCE                             STR_17 7FB6  
                           STR_25 7FF5                             STR_41 7EE8  
                           STR_42 7FCE                             STR_34 7F98  
                           STR_26 7E8E                             STR_18 7E79  
                           STR_43 7F40                             STR_51 7F15  
                           STR_27 7ED7                             STR_44 7FCE  
                           STR_36 7FED                             STR_52 7FAC  
                 __end_of___awmod 2888                             STR_37 7F8E  
                           STR_53 7F83                             STR_61 7F77  
                           STR_45 7E63                             STR_46 7FCE  
                           STR_38 7FFC                             STR_62 7FE3  
                           STR_63 7FAC                             STR_55 7FE8  
                           STR_39 7F24                             STR_47 7E4C  
                           STR_64 7FD1                             STR_57 7EF7  
                           STR_65 7EB5                             STR_49 7E33  
                           STR_66 7EC6              ??_ESP8266_SendString 0045  
                 __end_of___ftdiv 229A                   __end_of___ftneg 2B6A  
                 __end_of___ftmul 21B4                   ___awdiv@divisor 0014  
                 __end_of___fttol 1EB4                   __end_of___lwdiv 292C  
                 __end_of___lwmod 296E                             i2l381 1F80  
                           i2l375 1EFA                             i2l377 1F6E  
                           i2l378 1F6C                   ___awdiv@counter 0016  
                           _RCREG 000FAE                             _SPBRG 000FAF  
                           _PORTD 000F83    KalmanFilter_1@ProcessNiose_Q_1 0038  
                           _TRISC 000F94                             _TRISD 000F95  
            __end_of_ESP8266_Uart 2818    KalmanFilter_7@ProcessNiose_Q_7 0038  
                           _TXREG 000FAD             __size_of_Delay10KTCYx 0016  
                   __CFG_PWRT$OFF 000000                             _H_max 006B  
                   __CFG_WRT0$OFF 000000                             _L_max 006A  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                   ?_GPIO_initial 0001                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                   __end_of_dpowers 7E11  
                           _count 0068                   __end_of_isdigit 2BAA  
                   ___ftpack@sign 0016                             _write 0065  
                           pclath 000FFA                             tablat 000FF5  
                           plusw1 000FE3                             plusw2 000FDB  
                           status 000FD8           __size_of_ESP8266_Server 00D8  
                 __end_of_sprintf 08B4        __end_of_oclillator_initial 2C16  
                 __end_of_strncmp 27A6                    __CFG_PBADEN$ON 000000  
                    __end_of_UART 1FBC                   __initialization 296E  
          translate_flex@AD_total 005A                      __end_of_main 20C0  
            __size_of_ESP8266_Cmd 00C0              __size_of_ESP8266_Rst 0026  
                    _Delay10KTCYx 2BC6                            ??_UART 0001  
                  __CFG_OSC$HSPLL 000000                    ESP8266_Cmd@cmd 0025  
       KalmanFilter_5@ResrcData_5 0035                            ??_main 00F8  
                   ___fttol@sign1 0085   __end_of_timer_intrrupt_initinal 2BFE  
                   __activetblptr 000002                         ??_AP_MODE 002F  
                  ??_GPIO_initial 0012              ESP8266_BuildAP@pSSID 0041  
                          UART@ch 0011                    _translate_flex 08B4  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                ___awdiv@dividend 0012                  __end_of___ftpack 2590  
                __end_of___lwtoft 2B46                            _SPBRGH 000FB0  
                   ?_initial_UART 0001                  __end_of_delay_ms 2BC6  
                  __CFG_XINST$OFF 000000                  _ESP8266_Cmd$1046 002D  
        __size_of_ESP8266_AT_Test 002C                            ___wmul 2AFC  
                       ??___awdiv 0016                         ??___ftadd 0020  
                  __CFG_STVREN$ON 000000                         ??___awmod 0016  
                       ??___ftdiv 002C                         ??___ftneg 0015  
                       ??___ftmul 002C                         ??___fttol 0080  
                       ??___lwdiv 0016                         ??___lwmod 001D  
               ESP8266_Cmd@reply1 0027                 ESP8266_Cmd@reply2 0029  
                          clear_0 2974                            clear_1 2980  
                          clear_2 299A    KalmanFilter_5@MeasureNoise_R_5 003B  
                ___awdiv@quotient 0018                   ___awmod@divisor 0014  
                 ___awmod@counter 0016         KalmanFilter_6@ResrcData_6 0035  
                          _strchr 29EC                            _strcpy 2A54  
                          _strlen 29AE                            _strstr 26A0  
           ___ftmul@f3_as_product 0030          __size_of_ESP8266_BuildAP 0052  
          __end_of_translate_flex 0C26                         ??_isdigit 0012  
                    __mediumconst 7DFA                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_sprintf 0028                         ??_strncmp 001E  
                      __accesstop 0080           __end_of__initialization 29A0  
                  ??_initial_UART 0012                        ___ftadd@f1 001A  
                      ___ftadd@f2 001D                     ___rparam_used 000001  
                      ___ftdiv@f1 0026                        ___ftdiv@f2 0029  
                      ___ftdiv@f3 0030                   _timer_0_initial 2BFE  
  KalmanFilter_2@ProcessNiose_Q_2 0038    KalmanFilter_8@ProcessNiose_Q_8 0038  
                      ___ftneg@f1 0012                        ___ftmul@f1 0026  
                      ___ftmul@f2 0029                        ___fttol@f1 0056  
                  __pcstackCOMRAM 0001             __size_of_ESP8266_Uart 0072  
                      ___lwtoft@c 001A         KalmanFilter_7@ResrcData_7 0035  
                 ?_translate_flex 005A                      sprintf@width 003C  
                      __pbssBANK0 00FA                        __pbssBANK1 0100  
                      __pbssBANK2 0200          ESP8266_Link_Server@F4045 0200  
                  _ESP8266_Server 229A                      _ESP8266_Uart 27A6  
              __CFG_CCP2MX$PORTBE 000000              __end_of_GPIO_initial 2BEE  
                         ?___wmul 0012                   ESP8266_Uart@cmd 0012  
                   ??_adc_initial 0012                         ?___ftpack 0012  
               ??_ESP8266_AT_Test 002E                           ?_strchr 0012  
                         ?_strcpy 0012                           ?_strlen 0012  
                       ?___lwtoft 001A                           ?_strstr 0021  
       KalmanFilter_8@ResrcData_8 0035                           _AP_MODE 2A22  
                       ?_delay_ms 0014                 ESP8266_Uart@index 0016  
               ??_ESP8266_BuildAP 0047            __end_of_ESP8266_Server 2372  
         __end_of_timer_0_initial 2C0E    KalmanFilter_0@MeasureNoise_R_0 003B  
  KalmanFilter_6@MeasureNoise_R_6 003B                           __Hparam 0000  
                         __Lparam 0000                           ___awdiv 261C  
                         ___ftadd 0C26                           ___awmod 2818  
                         ___ftdiv 21B4                           ___ftneg 2B46  
                 __size_of___wmul 0026                           ___ftmul 20C0  
                         ___fttol 1D86                           ___lwdiv 28DA  
                         ___lwmod 292C                _oclillator_initial 2C0E  
                         __pcinit 296E                        ??___ftpack 0017  
                         __ramtop 0600           __size_of_KalmanFilter_0 0192  
         __size_of_KalmanFilter_1 0192           __size_of_KalmanFilter_2 0192  
         __size_of_KalmanFilter_3 0192           __size_of_KalmanFilter_4 0192  
         __size_of_KalmanFilter_5 0192           __size_of_KalmanFilter_6 0192  
         __size_of_KalmanFilter_7 0192           __size_of_KalmanFilter_8 0192  
         __size_of_KalmanFilter_9 0192                           __ptext0 1FBC  
                         __ptext1 08B4                           __ptext2 2B22  
                         __ptext3 1D86                           __ptext4 261C  
                         __ptext5 0DD2                           __ptext6 0F64  
                         __ptext7 10F6                           __ptext8 1288  
                         __ptext9 141A                        ??___lwtoft 001D  
                       _T0CONbits 000FD5              __end_of_initial_UART 2B8C  
                 __size_of_strchr 0036       __size_of_ESP8266_SendString 00B0  
                 __size_of_strcpy 002E         KalmanFilter_9@ResrcData_9 0035  
                 __size_of_strlen 003E                 __end_of_hexpowers 7E19  
                 __size_of_strstr 0084                           _dpowers 7E07  
        ?_ESP8266_Net_Mode_Choose 0001                         _T2CONbits 000FCA  
  KalmanFilter_3@ProcessNiose_Q_3 0038                           _isdigit 2B8C  
  KalmanFilter_9@ProcessNiose_Q_9 0038                  ___awmod@dividend 0012  
             ?_oclillator_initial 0001                        ??_delay_ms 0016  
             __end_of_adc_initial 2AD6                           _sprintf 0012  
                         main@tem 01DC                           _strncmp 2724  
                  __pintcode_body 1EB4                   ?_ESP8266_Server 0001  
                      delay_ms@ms 0014              end_of_initialization 29A0  
               __end_of_octpowers 7E07          ?_timer_intrrupt_initinal 0001  
                   __Lmediumconst 7DFA                           int_func 1EB4  
          KalmanFilter_0@p_last_0 01A4                     ??_ESP8266_Cmd 002D  
            ??_oclillator_initial 0012                     ??_ESP8266_Rst 002E  
          KalmanFilter_1@p_last_1 01A1                         _RCSTAbits 000FAB  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE            KalmanFilter_0@x_last_0 0062  
          KalmanFilter_2@p_last_2 019E                           strlen@s 0012  
          KalmanFilter_1@x_last_1 005F            KalmanFilter_3@p_last_3 019B  
          KalmanFilter_2@x_last_2 005C            KalmanFilter_4@p_last_4 0198  
          KalmanFilter_3@x_last_3 00FD            KalmanFilter_5@p_last_5 0192  
          KalmanFilter_4@x_last_4 00FA            KalmanFilter_6@p_last_6 018C  
                ?_timer_0_initial 0001            KalmanFilter_5@x_last_5 0195  
          KalmanFilter_7@p_last_7 0186             __size_of_GPIO_initial 0012  
                     ___ftdiv@exp 0033                         _TXSTAbits 000FAC  
          KalmanFilter_6@x_last_6 018F            KalmanFilter_8@p_last_8 0180  
          KalmanFilter_7@x_last_7 0189            KalmanFilter_9@p_last_9 017A  
                     ___ftmul@exp 002F            KalmanFilter_8@x_last_8 0183  
                 KalmanFilter_0@Q 0041                   KalmanFilter_0@R 003E  
                 KalmanFilter_1@Q 0041                   KalmanFilter_1@R 003E  
                 KalmanFilter_2@Q 0041                   KalmanFilter_2@R 003E  
                 KalmanFilter_3@Q 0041                   KalmanFilter_3@R 003E  
                 KalmanFilter_4@Q 0041                   KalmanFilter_4@R 003E  
                 KalmanFilter_5@Q 0041                   KalmanFilter_5@R 003E  
                 KalmanFilter_6@Q 0041                   KalmanFilter_6@R 003E  
                 KalmanFilter_7@Q 0041                   KalmanFilter_7@R 003E  
                 KalmanFilter_8@Q 0041                   KalmanFilter_8@R 003E  
                 KalmanFilter_9@Q 0041                   KalmanFilter_9@R 003E  
          ESP8266_SendString@bRet 00A0               __end_of_ESP8266_Cmd 2432  
 __end_of_ESP8266_Net_Mode_Choose 261C                  ??_translate_flex 008B  
                  __end_of___wmul 2B22            ESP8266_SendString@cStr 008C  
             __end_of_ESP8266_Rst 2AFC    KalmanFilter_1@MeasureNoise_R_1 003B  
                     _BAUDCONbits 000FB8            ESP8266_SendString@pStr 0041  
          ESP8266_SendString@ucId 00A2    KalmanFilter_7@MeasureNoise_R_7 003B  
          KalmanFilter_9@x_last_9 017D                       _adc_initial 2AAE  
                  __end_of_strchr 2A22                    __end_of_strcpy 2A82  
                  __end_of_strlen 29EC                    __end_of_strstr 2724  
             start_initialization 296E                      _GPIO_initial 2BDC  
  KalmanFilter_4@ProcessNiose_Q_4 0038                   _ESP8266_AT_Test 2A82  
                        ??___wmul 0016             __size_of_initial_UART 0022  
                __CFG_LPT1OSC$OFF 000000                    _KalmanFilter_0 1BF4  
                  _KalmanFilter_1 1A62                    _KalmanFilter_2 18D0  
                  _KalmanFilter_3 173E                    _KalmanFilter_4 15AC  
                  _KalmanFilter_5 141A                    _KalmanFilter_6 1288  
                  _KalmanFilter_7 10F6                    _KalmanFilter_8 0F64  
                  _KalmanFilter_9 0DD2                   _ESP8266_BuildAP 2888  
                        ??_strchr 0016                          ??_strcpy 0016  
                        ??_strlen 0014                          ??_strstr 0025  
                        ?_AP_MODE 0001                 __size_of___ftpack 00AE  
     ESP8266_Net_Mode_Choose@MODE 002E                       __pbssCOMRAM 005C  
               __size_of___lwtoft 0024                     __pcstackBANK0 0080  
                   __pcstackBANK1 01DC                      _isdigit$1600 0013  
                   _str1_1esp8266 0100                 __size_of_delay_ms 001C  
                     sprintf@flag 003F                       sprintf@prec 003B  
                    _initial_UART 2B6A                       _ESP8266_Cmd 2372  
                ___lwdiv@dividend 0012                       _ESP8266_Rst 2AD6  
                       __pintcode 0008                     __pmediumconst 7DFA  
                        ?___awdiv 0012                          ?___ftadd 001A  
        ESP8266_BuildAP@pPassWord 0043                          ?___awmod 0012  
          __end_of_KalmanFilter_0 1D86            __end_of_KalmanFilter_1 1BF4  
          __end_of_KalmanFilter_2 1A62                          ?___ftdiv 0026  
          __end_of_KalmanFilter_3 18D0            __end_of_KalmanFilter_4 173E  
          __end_of_KalmanFilter_5 15AC            __end_of_KalmanFilter_6 141A  
          __end_of_KalmanFilter_7 1288            __end_of_KalmanFilter_8 10F6  
          __end_of_KalmanFilter_9 0F64                          ?___ftneg 0012  
                        ?___ftmul 0026                          ?___fttol 0056  
                   ?_Delay10KTCYx 0001                          ?___lwdiv 0012  
             _KalmanFilter_0$2021 0047                          ?___lwmod 0019  
             _KalmanFilter_1$2022 0047               _KalmanFilter_2$2023 0047  
             _KalmanFilter_3$2024 0047               _KalmanFilter_4$2025 0047  
             _KalmanFilter_5$2026 0047               _KalmanFilter_6$2027 0047  
             _KalmanFilter_7$2028 0047               _KalmanFilter_8$2029 0047  
             _KalmanFilter_9$2030 0047               KalmanFilter_0@p_mid 0053  
             KalmanFilter_0@p_now 0044               KalmanFilter_1@p_mid 0053  
             KalmanFilter_1@p_now 0044               KalmanFilter_2@p_mid 0053  
             KalmanFilter_0@x_mid 0050               KalmanFilter_0@x_now 004A  
             KalmanFilter_2@p_now 0044               KalmanFilter_3@p_mid 0053  
             KalmanFilter_1@x_mid 0050               KalmanFilter_1@x_now 004A  
             KalmanFilter_3@p_now 0044               KalmanFilter_4@p_mid 0053  
             KalmanFilter_2@x_mid 0050               KalmanFilter_2@x_now 004A  
             KalmanFilter_4@p_now 0044               KalmanFilter_5@p_mid 0053  
             KalmanFilter_3@x_mid 0050               KalmanFilter_3@x_now 004A  
             KalmanFilter_5@p_now 0044               KalmanFilter_6@p_mid 0053  
             KalmanFilter_4@x_mid 0050               KalmanFilter_4@x_now 004A  
             KalmanFilter_6@p_now 0044               KalmanFilter_7@p_mid 0053  
             KalmanFilter_5@x_mid 0050               KalmanFilter_5@x_now 004A  
             KalmanFilter_7@p_now 0044               KalmanFilter_8@p_mid 0053  
             KalmanFilter_6@x_mid 0050               KalmanFilter_6@x_now 004A  
             KalmanFilter_8@p_now 0044               KalmanFilter_9@p_mid 0053  
             KalmanFilter_7@x_mid 0050               KalmanFilter_7@x_now 004A  
             KalmanFilter_9@p_now 0044               KalmanFilter_8@x_mid 0050  
             KalmanFilter_8@x_now 004A               KalmanFilter_9@x_mid 0050  
                        ?_isdigit 0001               KalmanFilter_9@x_now 004A  
                ??_ESP8266_Server 0047                         _hexpowers 7E11  
                ___lwdiv@quotient 0017                          ?_sprintf 001E  
                        ?_strncmp 0018           __end_of_ESP8266_AT_Test 2AAE  
  KalmanFilter_2@MeasureNoise_R_2 003B    KalmanFilter_8@MeasureNoise_R_8 003B  
                  ___wmul@product 0016  __size_of_ESP8266_Net_Mode_Choose 008C  
                        _LATCbits 000F8B                         _octpowers 7DFB  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
         __end_of_ESP8266_BuildAP 28DA                          _RCONbits 000FD0  
                __CFG_WDTPS$32768 000000                    ??_Delay10KTCYx 0012  
__size_of_timer_intrrupt_initinal 0010                   ?_KalmanFilter_0 0035  
                 ?_KalmanFilter_1 0035                   ?_KalmanFilter_2 0035  
                 ?_KalmanFilter_3 0035                   ?_KalmanFilter_4 0035  
                 ?_KalmanFilter_5 0035                   ?_KalmanFilter_6 0035  
                 ?_KalmanFilter_7 0035                   ?_KalmanFilter_8 0035  
                 ?_KalmanFilter_9 0035        __end_of_ESP8266_SendString 24E2  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                      _ADCON2bits 000FC0                 ___wmul@multiplier 0012  
                     _bounce_time 0069    KalmanFilter_5@ProcessNiose_Q_5 0038  
                __size_of_AP_MODE 0032                  Delay10KTCYx@unit 0013  
           ESP8266_SendString@tem 0080                          __Hrparam 0000  
     __size_of_oclillator_initial 0008                          __Lrparam 0000  
              __CFG_BOREN$SBORDIS 000000                  __size_of___awdiv 0084  
                __size_of___ftadd 01AC                  __size_of___awmod 0070  
                __size_of___ftdiv 00E6                  __size_of___ftneg 0024  
                __size_of___ftmul 00F4                  __size_of___fttol 012E  
       KalmanFilter_0@ResrcData_0 0035                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042                          ___ftpack 24E2  
                    ?_adc_initial 0001                          ___lwtoft 2B22  
                      sprintf@idx 002C                        sprintf@len 0035  
                      sprintf@val 0039                  __size_of_isdigit 001E  
                        _delay_ms 2BAA                   ___lwdiv@divisor 0014  
                 ___lwdiv@counter 0016                          __ptext10 15AC  
                        __ptext11 173E                          __ptext20 2BEE  
                        __ptext12 18D0                          __ptext21 2BFE  
                        __ptext13 1A62                          __ptext30 2A82  
                        __ptext22 2C0E                          __ptext14 1BF4  
                        __ptext31 2A22                          __ptext23 2B6A  
                        __ptext15 2B46                          __ptext40 2372  
                        __ptext32 2590                          __ptext24 2AAE  
                        __ptext16 20C0                          __ptext41 26A0  
                        __ptext33 2432                          __ptext25 2818  
                        __ptext17 21B4                          __ptext42 2724  
                        __ptext34 2A54                          __ptext26 2BDC  
                        __ptext18 0C26                          __ptext43 29AE  
                        __ptext35 0012                          __ptext27 229A  
                        __ptext19 24E2                          __ptext44 29EC  
                        __ptext36 2B8C                          __ptext28 2AD6  
                        __ptext45 2BAA                          __ptext37 2AFC  
                        __ptext29 2888                          __ptext46 2BC6  
                        __ptext38 292C                          __ptext47 27A6  
                        __ptext39 28DA                  __size_of_sprintf 08A2  
                   __size_of_UART 1FB4                  __size_of_strncmp 0082  
                      strcpy@from 0014                  ?_ESP8266_AT_Test 0001  
                   __size_of_main 0104               ESP8266_Cmd@waittime 002B  
                      strncmp@len 001C                     ?_ESP8266_Uart 0012  
        __size_of_timer_0_initial 0010                  ?_ESP8266_BuildAP 0041  
                        int$flags 006E                 _strPc_Fram_Record 0264  
  KalmanFilter_3@MeasureNoise_R_3 003B         KalmanFilter_1@ResrcData_1 0035  
  KalmanFilter_9@MeasureNoise_R_9 003B                        _INTCONbits 000FF2  
                        isdigit@c 0014              __end_of_Delay10KTCYx 2BDC  
                        intlevel2 0000                         sprintf@ap 0037  
                       sprintf@cp 0033                         sprintf@sp 001E  
         _ESP8266_Net_Mode_Choose 2590                         strchr@chr 0014  
                ___lwmod@dividend 0019                         strchr@ptr 0012  
                  ??_ESP8266_Uart 0014     ESP8266_SendString@ulStrLength 0043  
  KalmanFilter_0@ProcessNiose_Q_0 0038    KalmanFilter_6@ProcessNiose_Q_6 0038  
                       strncmp@s1 0018                         strncmp@s2 001A  
                    ?_ESP8266_Cmd 0025                        _OSCCONbits 000FD3  
                    ?_ESP8266_Rst 0001           _timer_intrrupt_initinal 2BEE  
       KalmanFilter_2@ResrcData_2 0035                          sprintf@c 003E  
                        sprintf@f 0020                   ___lwmod@divisor 001B  
                        strcpy@cp 0016                          strlen@cp 0016  
                        strcpy@to 0012                   ___lwmod@counter 001D  
                    main@AD_total 01E7            _strEsp8266_Fram_Record 01A8  
                        strstr@s1 0021                          strstr@s2 0023  
         __size_of_translate_flex 0372        ESP8266_BuildAP@enunPsdMode 0045  
                ??_KalmanFilter_0 003E                  ??_KalmanFilter_1 003E  
                ??_KalmanFilter_2 003E                  ??_KalmanFilter_3 003E  
                ??_KalmanFilter_4 003E                  ??_KalmanFilter_5 003E  
                ??_KalmanFilter_6 003E                  ??_KalmanFilter_7 003E  
                ??_KalmanFilter_8 003E                  ??_KalmanFilter_9 003E  
