

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jan 29 20:17:14 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           ; Version 1.41
    72                           ; Generated 25/01/2017 GMT
    73                           ; 
    74                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4520 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataCOMRAM
   107  001966                     __pidataCOMRAM:
   108                           	opt stack 0
   109                           
   110                           ;initializer for LCD_CreateFont@F3803
   111  001966  1F                 	db	31
   112  001967  11                 	db	17
   113  001968  11                 	db	17
   114  001969  1F                 	db	31
   115  00196A  11                 	db	17
   116  00196B  11                 	db	17
   117  00196C  1F                 	db	31
   118  00196D  00                 	db	0
   119                           
   120                           	psect	mediumconst
   121  007184                     __pmediumconst:
   122                           	opt stack 0
   123  007184  00                 	db	0
   124  007185                     _finger_up_0:
   125                           	opt stack 0
   126  007185  02E1               	dw	737
   127  007187  00                 	db	0
   128  007188  00                 	db	0
   129  007189  00                 	db	0
   130  00718A  00                 	db	0
   131  00718B  00                 	db	0
   132  00718C  00                 	db	0
   133  00718D  00                 	db	0
   134  00718E  00                 	db	0
   135  00718F  00                 	db	0
   136  007190  00                 	db	0
   137  007191  00                 	db	0
   138  007192  00                 	db	0
   139  007193  00                 	db	0
   140  007194  00                 	db	0
   141  007195  00                 	db	0
   142  007196  00                 	db	0
   143  007197  00                 	db	0
   144  007198  00                 	db	0
   145  007199  00                 	db	0
   146  00719A  00                 	db	0
   147  00719B  00                 	db	0
   148  00719C  00                 	db	0
   149  00719D  00                 	db	0
   150  00719E  00                 	db	0
   151  00719F  00                 	db	0
   152  0071A0  00                 	db	0
   153  0071A1  00                 	db	0
   154  0071A2  00                 	db	0
   155  0071A3  00                 	db	0
   156  0071A4  00                 	db	0
   157  0071A5  00                 	db	0
   158  0071A6  00                 	db	0
   159  0071A7  00                 	db	0
   160  0071A8  00                 	db	0
   161  0071A9  00                 	db	0
   162  0071AA  00                 	db	0
   163  0071AB  00                 	db	0
   164  0071AC  00                 	db	0
   165  0071AD  00                 	db	0
   166  0071AE  00                 	db	0
   167  0071AF  00                 	db	0
   168  0071B0  00                 	db	0
   169  0071B1  00                 	db	0
   170  0071B2  00                 	db	0
   171  0071B3  00                 	db	0
   172  0071B4  00                 	db	0
   173  0071B5  00                 	db	0
   174  0071B6  00                 	db	0
   175  0071B7  00                 	db	0
   176  0071B8  00                 	db	0
   177  0071B9  00                 	db	0
   178  0071BA  00                 	db	0
   179  0071BB  00                 	db	0
   180  0071BC  00                 	db	0
   181  0071BD  00                 	db	0
   182  0071BE  00                 	db	0
   183  0071BF  00                 	db	0
   184  0071C0  00                 	db	0
   185  0071C1  00                 	db	0
   186  0071C2  00                 	db	0
   187  0071C3  00                 	db	0
   188  0071C4  00                 	db	0
   189  0071C5  00                 	db	0
   190  0071C6  00                 	db	0
   191  0071C7  00                 	db	0
   192  0071C8  00                 	db	0
   193  0071C9  00                 	db	0
   194  0071CA  00                 	db	0
   195  0071CB  00                 	db	0
   196  0071CC  00                 	db	0
   197  0071CD  00                 	db	0
   198  0071CE  00                 	db	0
   199  0071CF  00                 	db	0
   200  0071D0  00                 	db	0
   201  0071D1  00                 	db	0
   202  0071D2  00                 	db	0
   203  0071D3  00                 	db	0
   204  0071D4  00                 	db	0
   205  0071D5  00                 	db	0
   206  0071D6  00                 	db	0
   207  0071D7  00                 	db	0
   208  0071D8  00                 	db	0
   209  0071D9  00                 	db	0
   210  0071DA  00                 	db	0
   211  0071DB  00                 	db	0
   212  0071DC  00                 	db	0
   213  0071DD  00                 	db	0
   214  0071DE  00                 	db	0
   215  0071DF  00                 	db	0
   216  0071E0  00                 	db	0
   217  0071E1  00                 	db	0
   218  0071E2  00                 	db	0
   219  0071E3  00                 	db	0
   220  0071E4  00                 	db	0
   221  0071E5  00                 	db	0
   222  0071E6  00                 	db	0
   223  0071E7  00                 	db	0
   224  0071E8  00                 	db	0
   225  0071E9  00                 	db	0
   226  0071EA  00                 	db	0
   227  0071EB  00                 	db	0
   228  0071EC  00                 	db	0
   229  0071ED  00                 	db	0
   230  0071EE  00                 	db	0
   231  0071EF  00                 	db	0
   232  0071F0  00                 	db	0
   233  0071F1  00                 	db	0
   234  0071F2  00                 	db	0
   235  0071F3  00                 	db	0
   236  0071F4  00                 	db	0
   237  0071F5  00                 	db	0
   238  0071F6  00                 	db	0
   239  0071F7  00                 	db	0
   240  0071F8  00                 	db	0
   241  0071F9  00                 	db	0
   242  0071FA  00                 	db	0
   243  0071FB  00                 	db	0
   244  0071FC  00                 	db	0
   245  0071FD  00                 	db	0
   246  0071FE  00                 	db	0
   247  0071FF  00                 	db	0
   248  007200  00                 	db	0
   249  007201  00                 	db	0
   250  007202  00                 	db	0
   251  007203  00                 	db	0
   252  007204  00                 	db	0
   253  007205  00                 	db	0
   254  007206  00                 	db	0
   255  007207  00                 	db	0
   256  007208  00                 	db	0
   257  007209  00                 	db	0
   258  00720A  00                 	db	0
   259  00720B  00                 	db	0
   260  00720C  00                 	db	0
   261  00720D  00                 	db	0
   262  00720E  00                 	db	0
   263  00720F  00                 	db	0
   264  007210  00                 	db	0
   265  007211  00                 	db	0
   266  007212  00                 	db	0
   267  007213  00                 	db	0
   268  007214  00                 	db	0
   269  007215  00                 	db	0
   270  007216  00                 	db	0
   271  007217  00                 	db	0
   272  007218  00                 	db	0
   273  007219  00                 	db	0
   274  00721A  00                 	db	0
   275  00721B  00                 	db	0
   276  00721C  00                 	db	0
   277  00721D  00                 	db	0
   278  00721E  00                 	db	0
   279  00721F  00                 	db	0
   280  007220  00                 	db	0
   281  007221  00                 	db	0
   282  007222  00                 	db	0
   283  007223  00                 	db	0
   284  007224  00                 	db	0
   285  007225  00                 	db	0
   286  007226  00                 	db	0
   287  007227  00                 	db	0
   288  007228  00                 	db	0
   289  007229  00                 	db	0
   290  00722A  00                 	db	0
   291  00722B  00                 	db	0
   292  00722C  00                 	db	0
   293  00722D  00                 	db	0
   294  00722E  00                 	db	0
   295  00722F  00                 	db	0
   296  007230  00                 	db	0
   297  007231  00                 	db	0
   298  007232  00                 	db	0
   299  007233  00                 	db	0
   300  007234  00                 	db	0
   301  007235  00                 	db	0
   302  007236  00                 	db	0
   303  007237  00                 	db	0
   304  007238  00                 	db	0
   305  007239  00                 	db	0
   306  00723A  00                 	db	0
   307  00723B  00                 	db	0
   308  00723C  00                 	db	0
   309  00723D  00                 	db	0
   310  00723E  00                 	db	0
   311  00723F  00                 	db	0
   312  007240  00                 	db	0
   313  007241  00                 	db	0
   314  007242  00                 	db	0
   315  007243  00                 	db	0
   316  007244  00                 	db	0
   317  007245  00                 	db	0
   318  007246  00                 	db	0
   319  007247  00                 	db	0
   320  007248  00                 	db	0
   321  007249  00                 	db	0
   322  00724A  00                 	db	0
   323  00724B  00                 	db	0
   324  00724C  00                 	db	0
   325  00724D  00                 	db	0
   326  00724E  00                 	db	0
   327  00724F  00                 	db	0
   328  007250  00                 	db	0
   329  007251  00                 	db	0
   330  007252  00                 	db	0
   331  007253  00                 	db	0
   332  007254  00                 	db	0
   333  007255  00                 	db	0
   334  007256  00                 	db	0
   335  007257  00                 	db	0
   336  007258  00                 	db	0
   337  007259  00                 	db	0
   338  00725A  00                 	db	0
   339  00725B  00                 	db	0
   340  00725C  00                 	db	0
   341  00725D  00                 	db	0
   342  00725E  00                 	db	0
   343  00725F  00                 	db	0
   344  007260  00                 	db	0
   345  007261  00                 	db	0
   346  007262  00                 	db	0
   347  007263  00                 	db	0
   348  007264  00                 	db	0
   349  007265  00                 	db	0
   350  007266  00                 	db	0
   351  007267  00                 	db	0
   352  007268  00                 	db	0
   353  007269  00                 	db	0
   354  00726A  00                 	db	0
   355  00726B  00                 	db	0
   356  00726C  00                 	db	0
   357  00726D  00                 	db	0
   358  00726E  00                 	db	0
   359  00726F  00                 	db	0
   360  007270  00                 	db	0
   361  007271  00                 	db	0
   362  007272  00                 	db	0
   363  007273  00                 	db	0
   364  007274  00                 	db	0
   365  007275  00                 	db	0
   366  007276  00                 	db	0
   367  007277  00                 	db	0
   368  007278  00                 	db	0
   369  007279  00                 	db	0
   370  00727A  00                 	db	0
   371  00727B  00                 	db	0
   372  00727C  00                 	db	0
   373  00727D  00                 	db	0
   374  00727E  00                 	db	0
   375  00727F  00                 	db	0
   376  007280  00                 	db	0
   377  007281  00                 	db	0
   378  007282  00                 	db	0
   379  007283  00                 	db	0
   380  007284  00                 	db	0
   381  007285  00                 	db	0
   382  007286  00                 	db	0
   383  007287  00                 	db	0
   384  007288  00                 	db	0
   385  007289  00                 	db	0
   386  00728A  00                 	db	0
   387  00728B  00                 	db	0
   388  00728C  00                 	db	0
   389  00728D  00                 	db	0
   390  00728E  00                 	db	0
   391  00728F  00                 	db	0
   392  007290  00                 	db	0
   393  007291  00                 	db	0
   394  007292  00                 	db	0
   395  007293  00                 	db	0
   396  007294  00                 	db	0
   397  007295  00                 	db	0
   398  007296  00                 	db	0
   399  007297  00                 	db	0
   400  007298  00                 	db	0
   401  007299  00                 	db	0
   402  00729A  00                 	db	0
   403  00729B  00                 	db	0
   404  00729C  00                 	db	0
   405  00729D  00                 	db	0
   406  00729E  00                 	db	0
   407  00729F  00                 	db	0
   408  0072A0  00                 	db	0
   409  0072A1  00                 	db	0
   410  0072A2  00                 	db	0
   411  0072A3  00                 	db	0
   412  0072A4  00                 	db	0
   413  0072A5  00                 	db	0
   414  0072A6  00                 	db	0
   415  0072A7  00                 	db	0
   416  0072A8  00                 	db	0
   417  0072A9  00                 	db	0
   418  0072AA  00                 	db	0
   419  0072AB  00                 	db	0
   420  0072AC  00                 	db	0
   421  0072AD  00                 	db	0
   422  0072AE  00                 	db	0
   423  0072AF  00                 	db	0
   424  0072B0  00                 	db	0
   425  0072B1  00                 	db	0
   426  0072B2  00                 	db	0
   427  0072B3  00                 	db	0
   428  0072B4  00                 	db	0
   429  0072B5  00                 	db	0
   430  0072B6  00                 	db	0
   431  0072B7  00                 	db	0
   432  0072B8  00                 	db	0
   433  0072B9  00                 	db	0
   434  0072BA  00                 	db	0
   435  0072BB                     __end_of_finger_up_0:
   436                           	opt stack 0
   437  0072BB                     _finger_up_4:
   438                           	opt stack 0
   439  0072BB  02E1               	dw	737
   440  0072BD  02E7               	dw	743
   441  0072BF  02ED               	dw	749
   442  0072C1  02F3               	dw	755
   443  0072C3  02F9               	dw	761
   444  0072C5  02FF               	dw	767
   445  0072C7  0305               	dw	773
   446  0072C9  030B               	dw	779
   447  0072CB  0311               	dw	785
   448  0072CD  0317               	dw	791
   449  0072CF  031D               	dw	797
   450  0072D1  0323               	dw	803
   451  0072D3  0329               	dw	809
   452  0072D5  032F               	dw	815
   453  0072D7  0335               	dw	821
   454  0072D9  033B               	dw	827
   455  0072DB  0341               	dw	833
   456  0072DD  0347               	dw	839
   457  0072DF  034D               	dw	845
   458  0072E1  0353               	dw	851
   459  0072E3  0359               	dw	857
   460  0072E5  035F               	dw	863
   461  0072E7  0365               	dw	869
   462  0072E9  036B               	dw	875
   463  0072EB  0371               	dw	881
   464  0072ED  0377               	dw	887
   465  0072EF  037D               	dw	893
   466  0072F1  0383               	dw	899
   467  0072F3  0389               	dw	905
   468  0072F5  038F               	dw	911
   469  0072F7  0395               	dw	917
   470  0072F9  039B               	dw	923
   471  0072FB  03A1               	dw	929
   472  0072FD  03A7               	dw	935
   473  0072FF  03AD               	dw	941
   474  007301  03B3               	dw	947
   475  007303  03B9               	dw	953
   476  007305  03BF               	dw	959
   477  007307  03C6               	dw	966
   478  007309  03CC               	dw	972
   479  00730B  03D2               	dw	978
   480  00730D  03D8               	dw	984
   481  00730F  03DE               	dw	990
   482  007311  03E4               	dw	996
   483  007313  03EA               	dw	1002
   484  007315  03F0               	dw	1008
   485  007317  03F6               	dw	1014
   486  007319  03FC               	dw	1020
   487  00731B  0402               	dw	1026
   488  00731D  0408               	dw	1032
   489  00731F  040E               	dw	1038
   490  007321  0414               	dw	1044
   491  007323  041A               	dw	1050
   492  007325  0420               	dw	1056
   493  007327  0426               	dw	1062
   494  007329  042C               	dw	1068
   495  00732B  0432               	dw	1074
   496  00732D  0438               	dw	1080
   497  00732F  043E               	dw	1086
   498  007331  0444               	dw	1092
   499  007333  044A               	dw	1098
   500  007335  0450               	dw	1104
   501  007337  0456               	dw	1110
   502  007339  045C               	dw	1116
   503  00733B  0462               	dw	1122
   504  00733D  0468               	dw	1128
   505  00733F  046E               	dw	1134
   506  007341  0474               	dw	1140
   507  007343  047A               	dw	1146
   508  007345  0480               	dw	1152
   509  007347  0486               	dw	1158
   510  007349  048C               	dw	1164
   511  00734B  0492               	dw	1170
   512  00734D  0498               	dw	1176
   513  00734F  049E               	dw	1182
   514  007351  04A5               	dw	1189
   515  007353  04AB               	dw	1195
   516  007355  04B1               	dw	1201
   517  007357  04B7               	dw	1207
   518  007359  04BD               	dw	1213
   519  00735B  04C3               	dw	1219
   520  00735D  04C9               	dw	1225
   521  00735F  04CF               	dw	1231
   522  007361  04D5               	dw	1237
   523  007363  04DB               	dw	1243
   524  007365  04E1               	dw	1249
   525  007367  04E7               	dw	1255
   526  007369  04ED               	dw	1261
   527  00736B  04F3               	dw	1267
   528  00736D  04F9               	dw	1273
   529  00736F  04FF               	dw	1279
   530  007371  0505               	dw	1285
   531  007373  050B               	dw	1291
   532  007375  0511               	dw	1297
   533  007377  0517               	dw	1303
   534  007379  051D               	dw	1309
   535  00737B  0523               	dw	1315
   536  00737D  0529               	dw	1321
   537  00737F  052F               	dw	1327
   538  007381  0535               	dw	1333
   539  007383  053B               	dw	1339
   540  007385  0541               	dw	1345
   541  007387  0547               	dw	1351
   542  007389  054D               	dw	1357
   543  00738B  0553               	dw	1363
   544  00738D  0559               	dw	1369
   545  00738F  055F               	dw	1375
   546  007391  0565               	dw	1381
   547  007393  056B               	dw	1387
   548  007395  0571               	dw	1393
   549  007397  0577               	dw	1399
   550  007399  057D               	dw	1405
   551  00739B  0583               	dw	1411
   552  00739D  058A               	dw	1418
   553  00739F  0590               	dw	1424
   554  0073A1  0596               	dw	1430
   555  0073A3  059C               	dw	1436
   556  0073A5  05A2               	dw	1442
   557  0073A7  05A8               	dw	1448
   558  0073A9  05AE               	dw	1454
   559  0073AB  05B4               	dw	1460
   560  0073AD  05BA               	dw	1466
   561  0073AF  05C0               	dw	1472
   562  0073B1  05C6               	dw	1478
   563  0073B3  05CC               	dw	1484
   564  0073B5  05D2               	dw	1490
   565  0073B7  05D8               	dw	1496
   566  0073B9  05DE               	dw	1502
   567  0073BB  05E4               	dw	1508
   568  0073BD  05EA               	dw	1514
   569  0073BF  05F0               	dw	1520
   570  0073C1  05F6               	dw	1526
   571  0073C3  05FC               	dw	1532
   572  0073C5  0602               	dw	1538
   573  0073C7  0608               	dw	1544
   574  0073C9  060E               	dw	1550
   575  0073CB  0614               	dw	1556
   576  0073CD  061A               	dw	1562
   577  0073CF  0620               	dw	1568
   578  0073D1  0626               	dw	1574
   579  0073D3  062C               	dw	1580
   580  0073D5  0632               	dw	1586
   581  0073D7  0638               	dw	1592
   582  0073D9  063E               	dw	1598
   583  0073DB  0644               	dw	1604
   584  0073DD  064A               	dw	1610
   585  0073DF  0650               	dw	1616
   586  0073E1  0656               	dw	1622
   587  0073E3  065C               	dw	1628
   588  0073E5  0662               	dw	1634
   589  0073E7  0669               	dw	1641
   590  0073E9                     __end_of_finger_up_4:
   591                           	opt stack 0
   592  0073E9                     _finger_up_3:
   593                           	opt stack 0
   594  0073E9  02E1               	dw	737
   595  0073EB  02E8               	dw	744
   596  0073ED  02EF               	dw	751
   597  0073EF  02F7               	dw	759
   598  0073F1  02FE               	dw	766
   599  0073F3  0305               	dw	773
   600  0073F5  030D               	dw	781
   601  0073F7  0314               	dw	788
   602  0073F9  031C               	dw	796
   603  0073FB  0323               	dw	803
   604  0073FD  032A               	dw	810
   605  0073FF  0332               	dw	818
   606  007401  0339               	dw	825
   607  007403  0340               	dw	832
   608  007405  0348               	dw	840
   609  007407  034F               	dw	847
   610  007409  0357               	dw	855
   611  00740B  035E               	dw	862
   612  00740D  0365               	dw	869
   613  00740F  036D               	dw	877
   614  007411  0374               	dw	884
   615  007413  037B               	dw	891
   616  007415  0383               	dw	899
   617  007417  038A               	dw	906
   618  007419  0392               	dw	914
   619  00741B  0399               	dw	921
   620  00741D  03A0               	dw	928
   621  00741F  03A8               	dw	936
   622  007421  03AF               	dw	943
   623  007423  03B7               	dw	951
   624  007425  03BE               	dw	958
   625  007427  03C5               	dw	965
   626  007429  03CD               	dw	973
   627  00742B  03D4               	dw	980
   628  00742D  03DB               	dw	987
   629  00742F  03E3               	dw	995
   630  007431  03EA               	dw	1002
   631  007433  03F2               	dw	1010
   632  007435  03F9               	dw	1017
   633  007437  0400               	dw	1024
   634  007439  0408               	dw	1032
   635  00743B  040F               	dw	1039
   636  00743D  0416               	dw	1046
   637  00743F  041E               	dw	1054
   638  007441  0425               	dw	1061
   639  007443  042D               	dw	1069
   640  007445  0434               	dw	1076
   641  007447  043B               	dw	1083
   642  007449  0443               	dw	1091
   643  00744B  044A               	dw	1098
   644  00744D  0451               	dw	1105
   645  00744F  0459               	dw	1113
   646  007451  0460               	dw	1120
   647  007453  0468               	dw	1128
   648  007455  046F               	dw	1135
   649  007457  0476               	dw	1142
   650  007459  047E               	dw	1150
   651  00745B  0485               	dw	1157
   652  00745D  048D               	dw	1165
   653  00745F  0494               	dw	1172
   654  007461  049B               	dw	1179
   655  007463  04A3               	dw	1187
   656  007465  04AA               	dw	1194
   657  007467  04B1               	dw	1201
   658  007469  04B9               	dw	1209
   659  00746B  04C0               	dw	1216
   660  00746D  04C8               	dw	1224
   661  00746F  04CF               	dw	1231
   662  007471  04D6               	dw	1238
   663  007473  04DE               	dw	1246
   664  007475  04E5               	dw	1253
   665  007477  04EC               	dw	1260
   666  007479  04F4               	dw	1268
   667  00747B  04FB               	dw	1275
   668  00747D  0503               	dw	1283
   669  00747F  050A               	dw	1290
   670  007481  0511               	dw	1297
   671  007483  0519               	dw	1305
   672  007485  0520               	dw	1312
   673  007487  0527               	dw	1319
   674  007489  052F               	dw	1327
   675  00748B  0536               	dw	1334
   676  00748D  053E               	dw	1342
   677  00748F  0545               	dw	1349
   678  007491  054C               	dw	1356
   679  007493  0554               	dw	1364
   680  007495  055B               	dw	1371
   681  007497  0563               	dw	1379
   682  007499  056A               	dw	1386
   683  00749B  0571               	dw	1393
   684  00749D  0579               	dw	1401
   685  00749F  0580               	dw	1408
   686  0074A1  0587               	dw	1415
   687  0074A3  058F               	dw	1423
   688  0074A5  0596               	dw	1430
   689  0074A7  059E               	dw	1438
   690  0074A9  05A5               	dw	1445
   691  0074AB  05AC               	dw	1452
   692  0074AD  05B4               	dw	1460
   693  0074AF  05BB               	dw	1467
   694  0074B1  05C2               	dw	1474
   695  0074B3  05CA               	dw	1482
   696  0074B5  05D1               	dw	1489
   697  0074B7  05D9               	dw	1497
   698  0074B9  05E0               	dw	1504
   699  0074BB  05E7               	dw	1511
   700  0074BD  05EF               	dw	1519
   701  0074BF  05F6               	dw	1526
   702  0074C1  05FD               	dw	1533
   703  0074C3  0605               	dw	1541
   704  0074C5  060C               	dw	1548
   705  0074C7  0614               	dw	1556
   706  0074C9  061B               	dw	1563
   707  0074CB  0622               	dw	1570
   708  0074CD  062A               	dw	1578
   709  0074CF  0631               	dw	1585
   710  0074D1  0639               	dw	1593
   711  0074D3  0640               	dw	1600
   712  0074D5  0647               	dw	1607
   713  0074D7  064F               	dw	1615
   714  0074D9  0656               	dw	1622
   715  0074DB  065D               	dw	1629
   716  0074DD  0665               	dw	1637
   717  0074DF  066C               	dw	1644
   718  0074E1  0674               	dw	1652
   719  0074E3  067B               	dw	1659
   720  0074E5  0682               	dw	1666
   721  0074E7  068A               	dw	1674
   722  0074E9  0691               	dw	1681
   723  0074EB  0698               	dw	1688
   724  0074ED  06A0               	dw	1696
   725  0074EF  06A7               	dw	1703
   726  0074F1  06AF               	dw	1711
   727  0074F3  06B6               	dw	1718
   728  0074F5  06BD               	dw	1725
   729  0074F7  06C5               	dw	1733
   730  0074F9  06CC               	dw	1740
   731  0074FB  06D3               	dw	1747
   732  0074FD  06DB               	dw	1755
   733  0074FF  06E2               	dw	1762
   734  007501  06EA               	dw	1770
   735  007503  06F1               	dw	1777
   736  007505  06F8               	dw	1784
   737  007507  0700               	dw	1792
   738  007509  0707               	dw	1799
   739  00750B  070F               	dw	1807
   740  00750D                     __end_of_finger_up_3:
   741                           	opt stack 0
   742  00750D                     _finger_up_2:
   743                           	opt stack 0
   744  00750D  02E1               	dw	737
   745  00750F  02EB               	dw	747
   746  007511  02F6               	dw	758
   747  007513  0301               	dw	769
   748  007515  030B               	dw	779
   749  007517  0316               	dw	790
   750  007519  0321               	dw	801
   751  00751B  032B               	dw	811
   752  00751D  0336               	dw	822
   753  00751F  0341               	dw	833
   754  007521  034C               	dw	844
   755  007523  0356               	dw	854
   756  007525  0361               	dw	865
   757  007527  036C               	dw	876
   758  007529  0376               	dw	886
   759  00752B  0381               	dw	897
   760  00752D  038C               	dw	908
   761  00752F  0397               	dw	919
   762  007531  03A1               	dw	929
   763  007533  03AC               	dw	940
   764  007535  03B7               	dw	951
   765  007537  03C1               	dw	961
   766  007539  03CC               	dw	972
   767  00753B  03D7               	dw	983
   768  00753D  03E2               	dw	994
   769  00753F  03EC               	dw	1004
   770  007541  03F7               	dw	1015
   771  007543  0402               	dw	1026
   772  007545  040C               	dw	1036
   773  007547  0417               	dw	1047
   774  007549  0422               	dw	1058
   775  00754B  042D               	dw	1069
   776  00754D  0437               	dw	1079
   777  00754F  0442               	dw	1090
   778  007551  044D               	dw	1101
   779  007553  0457               	dw	1111
   780  007555  0462               	dw	1122
   781  007557  046D               	dw	1133
   782  007559  0478               	dw	1144
   783  00755B  0482               	dw	1154
   784  00755D  048D               	dw	1165
   785  00755F  0498               	dw	1176
   786  007561  04A2               	dw	1186
   787  007563  04AD               	dw	1197
   788  007565  04B8               	dw	1208
   789  007567  04C2               	dw	1218
   790  007569  04CD               	dw	1229
   791  00756B  04D8               	dw	1240
   792  00756D  04E3               	dw	1251
   793  00756F  04ED               	dw	1261
   794  007571  04F8               	dw	1272
   795  007573  0503               	dw	1283
   796  007575  050D               	dw	1293
   797  007577  0518               	dw	1304
   798  007579  0523               	dw	1315
   799  00757B  052E               	dw	1326
   800  00757D  0538               	dw	1336
   801  00757F  0543               	dw	1347
   802  007581  054E               	dw	1358
   803  007583  0558               	dw	1368
   804  007585  0563               	dw	1379
   805  007587  056E               	dw	1390
   806  007589  0579               	dw	1401
   807  00758B  0583               	dw	1411
   808  00758D  058E               	dw	1422
   809  00758F  0599               	dw	1433
   810  007591  05A3               	dw	1443
   811  007593  05AE               	dw	1454
   812  007595  05B9               	dw	1465
   813  007597  05C4               	dw	1476
   814  007599  05CE               	dw	1486
   815  00759B  05D9               	dw	1497
   816  00759D  05E4               	dw	1508
   817  00759F  05EE               	dw	1518
   818  0075A1  05F9               	dw	1529
   819  0075A3  0604               	dw	1540
   820  0075A5  060F               	dw	1551
   821  0075A7  0619               	dw	1561
   822  0075A9  0624               	dw	1572
   823  0075AB  062F               	dw	1583
   824  0075AD  0639               	dw	1593
   825  0075AF  0644               	dw	1604
   826  0075B1  064F               	dw	1615
   827  0075B3  065A               	dw	1626
   828  0075B5  0664               	dw	1636
   829  0075B7  066F               	dw	1647
   830  0075B9  067A               	dw	1658
   831  0075BB  0684               	dw	1668
   832  0075BD  068F               	dw	1679
   833  0075BF  069A               	dw	1690
   834  0075C1  06A4               	dw	1700
   835  0075C3  06AF               	dw	1711
   836  0075C5  06BA               	dw	1722
   837  0075C7  06C5               	dw	1733
   838  0075C9  06CF               	dw	1743
   839  0075CB  06DA               	dw	1754
   840  0075CD  06E5               	dw	1765
   841  0075CF  06EF               	dw	1775
   842  0075D1  06FA               	dw	1786
   843  0075D3  0705               	dw	1797
   844  0075D5  0710               	dw	1808
   845  0075D7  071A               	dw	1818
   846  0075D9  0725               	dw	1829
   847  0075DB  0730               	dw	1840
   848  0075DD  073A               	dw	1850
   849  0075DF  0745               	dw	1861
   850  0075E1  0750               	dw	1872
   851  0075E3  075B               	dw	1883
   852  0075E5  0765               	dw	1893
   853  0075E7  0770               	dw	1904
   854  0075E9  077B               	dw	1915
   855  0075EB  0785               	dw	1925
   856  0075ED  0790               	dw	1936
   857  0075EF  079B               	dw	1947
   858  0075F1  07A6               	dw	1958
   859  0075F3  07B0               	dw	1968
   860  0075F5  07BB               	dw	1979
   861  0075F7  07C6               	dw	1990
   862  0075F9  07D0               	dw	2000
   863  0075FB  07DB               	dw	2011
   864  0075FD  07E6               	dw	2022
   865  0075FF  07F1               	dw	2033
   866  007601  07FB               	dw	2043
   867  007603  0806               	dw	2054
   868  007605  0811               	dw	2065
   869  007607  081B               	dw	2075
   870  007609  0826               	dw	2086
   871  00760B  0831               	dw	2097
   872  00760D  083C               	dw	2108
   873  00760F                     __end_of_finger_up_2:
   874                           	opt stack 0
   875  00760F                     _finger_under_4:
   876                           	opt stack 0
   877  00760F  0000               	dw	0
   878  007611  0007               	dw	7
   879  007613  000F               	dw	15
   880  007615  0017               	dw	23
   881  007617  001F               	dw	31
   882  007619  0027               	dw	39
   883  00761B  002F               	dw	47
   884  00761D  0036               	dw	54
   885  00761F  003E               	dw	62
   886  007621  0046               	dw	70
   887  007623  004E               	dw	78
   888  007625  0056               	dw	86
   889  007627  005E               	dw	94
   890  007629  0066               	dw	102
   891  00762B  006D               	dw	109
   892  00762D  0075               	dw	117
   893  00762F  007D               	dw	125
   894  007631  0085               	dw	133
   895  007633  008D               	dw	141
   896  007635  0095               	dw	149
   897  007637  009C               	dw	156
   898  007639  00A4               	dw	164
   899  00763B  00AC               	dw	172
   900  00763D  00B4               	dw	180
   901  00763F  00BC               	dw	188
   902  007641  00C4               	dw	196
   903  007643  00CC               	dw	204
   904  007645  00D3               	dw	211
   905  007647  00DB               	dw	219
   906  007649  00E3               	dw	227
   907  00764B  00EB               	dw	235
   908  00764D  00F3               	dw	243
   909  00764F  00FB               	dw	251
   910  007651  0103               	dw	259
   911  007653  010A               	dw	266
   912  007655  0112               	dw	274
   913  007657  011A               	dw	282
   914  007659  0122               	dw	290
   915  00765B  012A               	dw	298
   916  00765D  0132               	dw	306
   917  00765F  0139               	dw	313
   918  007661  0141               	dw	321
   919  007663  0149               	dw	329
   920  007665  0151               	dw	337
   921  007667  0159               	dw	345
   922  007669  0161               	dw	353
   923  00766B  0169               	dw	361
   924  00766D  0170               	dw	368
   925  00766F  0178               	dw	376
   926  007671  0180               	dw	384
   927  007673  0188               	dw	392
   928  007675  0190               	dw	400
   929  007677  0198               	dw	408
   930  007679  019F               	dw	415
   931  00767B  01A7               	dw	423
   932  00767D  01AF               	dw	431
   933  00767F  01B7               	dw	439
   934  007681  01BF               	dw	447
   935  007683  01C7               	dw	455
   936  007685  01CF               	dw	463
   937  007687  01D6               	dw	470
   938  007689  01DE               	dw	478
   939  00768B  01E6               	dw	486
   940  00768D  01EE               	dw	494
   941  00768F  01F6               	dw	502
   942  007691  01FE               	dw	510
   943  007693  0206               	dw	518
   944  007695  020D               	dw	525
   945  007697  0215               	dw	533
   946  007699  021D               	dw	541
   947  00769B  0225               	dw	549
   948  00769D  022D               	dw	557
   949  00769F  0235               	dw	565
   950  0076A1  023C               	dw	572
   951  0076A3  0244               	dw	580
   952  0076A5  024C               	dw	588
   953  0076A7  0254               	dw	596
   954  0076A9  025C               	dw	604
   955  0076AB  0264               	dw	612
   956  0076AD  026C               	dw	620
   957  0076AF  0273               	dw	627
   958  0076B1  027B               	dw	635
   959  0076B3  0283               	dw	643
   960  0076B5  028B               	dw	651
   961  0076B7  0293               	dw	659
   962  0076B9  029B               	dw	667
   963  0076BB  02A2               	dw	674
   964  0076BD  02AA               	dw	682
   965  0076BF  02B2               	dw	690
   966  0076C1  02BA               	dw	698
   967  0076C3  02C2               	dw	706
   968  0076C5  02CA               	dw	714
   969  0076C7  02D2               	dw	722
   970  0076C9  02D9               	dw	729
   971  0076CB  02E1               	dw	737
   972  0076CD  02E9               	dw	745
   973  0076CF  02F1               	dw	753
   974  0076D1  02F9               	dw	761
   975  0076D3  0301               	dw	769
   976  0076D5  0309               	dw	777
   977  0076D7  0310               	dw	784
   978  0076D9  0318               	dw	792
   979  0076DB  0320               	dw	800
   980  0076DD  0328               	dw	808
   981  0076DF  0330               	dw	816
   982  0076E1  0338               	dw	824
   983  0076E3  033F               	dw	831
   984  0076E5  0347               	dw	839
   985  0076E7  034F               	dw	847
   986  0076E9  0357               	dw	855
   987  0076EB  035F               	dw	863
   988  0076ED  0367               	dw	871
   989  0076EF  036F               	dw	879
   990  0076F1  0376               	dw	886
   991  0076F3  037E               	dw	894
   992  0076F5  0386               	dw	902
   993  0076F7  038E               	dw	910
   994  0076F9  0396               	dw	918
   995  0076FB  039E               	dw	926
   996  0076FD  03A6               	dw	934
   997  0076FF                     __end_of_finger_under_4:
   998                           	opt stack 0
   999  0076FF                     _finger_up_1:
  1000                           	opt stack 0
  1001  0076FF  02E1               	dw	737
  1002  007701  02E9               	dw	745
  1003  007703  02F2               	dw	754
  1004  007705  02FA               	dw	762
  1005  007707  0303               	dw	771
  1006  007709  030C               	dw	780
  1007  00770B  0314               	dw	788
  1008  00770D  031D               	dw	797
  1009  00770F  0325               	dw	805
  1010  007711  032E               	dw	814
  1011  007713  0337               	dw	823
  1012  007715  033F               	dw	831
  1013  007717  0348               	dw	840
  1014  007719  0351               	dw	849
  1015  00771B  0359               	dw	857
  1016  00771D  0362               	dw	866
  1017  00771F  036A               	dw	874
  1018  007721  0373               	dw	883
  1019  007723  037C               	dw	892
  1020  007725  0384               	dw	900
  1021  007727  038D               	dw	909
  1022  007729  0396               	dw	918
  1023  00772B  039E               	dw	926
  1024  00772D  03A7               	dw	935
  1025  00772F  03AF               	dw	943
  1026  007731  03B8               	dw	952
  1027  007733  03C1               	dw	961
  1028  007735  03C9               	dw	969
  1029  007737  03D2               	dw	978
  1030  007739  03DB               	dw	987
  1031  00773B  03E3               	dw	995
  1032  00773D  03EC               	dw	1004
  1033  00773F  03F4               	dw	1012
  1034  007741  03FD               	dw	1021
  1035  007743  0406               	dw	1030
  1036  007745  040E               	dw	1038
  1037  007747  0417               	dw	1047
  1038  007749  0420               	dw	1056
  1039  00774B  0428               	dw	1064
  1040  00774D  0431               	dw	1073
  1041  00774F  0439               	dw	1081
  1042  007751  0442               	dw	1090
  1043  007753  044B               	dw	1099
  1044  007755  0453               	dw	1107
  1045  007757  045C               	dw	1116
  1046  007759  0465               	dw	1125
  1047  00775B  046D               	dw	1133
  1048  00775D  0476               	dw	1142
  1049  00775F  047E               	dw	1150
  1050  007761  0487               	dw	1159
  1051  007763  0490               	dw	1168
  1052  007765  0498               	dw	1176
  1053  007767  04A1               	dw	1185
  1054  007769  04AA               	dw	1194
  1055  00776B  04B2               	dw	1202
  1056  00776D  04BB               	dw	1211
  1057  00776F  04C3               	dw	1219
  1058  007771  04CC               	dw	1228
  1059  007773  04D5               	dw	1237
  1060  007775  04DD               	dw	1245
  1061  007777  04E6               	dw	1254
  1062  007779  04EF               	dw	1263
  1063  00777B  04F7               	dw	1271
  1064  00777D  0500               	dw	1280
  1065  00777F  0508               	dw	1288
  1066  007781  0511               	dw	1297
  1067  007783  051A               	dw	1306
  1068  007785  0522               	dw	1314
  1069  007787  052B               	dw	1323
  1070  007789  0534               	dw	1332
  1071  00778B  053C               	dw	1340
  1072  00778D  0545               	dw	1349
  1073  00778F  054D               	dw	1357
  1074  007791  0556               	dw	1366
  1075  007793  055F               	dw	1375
  1076  007795  0567               	dw	1383
  1077  007797  0570               	dw	1392
  1078  007799  0579               	dw	1401
  1079  00779B  0581               	dw	1409
  1080  00779D  058A               	dw	1418
  1081  00779F  0592               	dw	1426
  1082  0077A1  059B               	dw	1435
  1083  0077A3  05A4               	dw	1444
  1084  0077A5  05AC               	dw	1452
  1085  0077A7  05B5               	dw	1461
  1086  0077A9  05BE               	dw	1470
  1087  0077AB  05C6               	dw	1478
  1088  0077AD  05CF               	dw	1487
  1089  0077AF  05D7               	dw	1495
  1090  0077B1  05E0               	dw	1504
  1091  0077B3  05E9               	dw	1513
  1092  0077B5  05F1               	dw	1521
  1093  0077B7  05FA               	dw	1530
  1094  0077B9  0603               	dw	1539
  1095  0077BB  060B               	dw	1547
  1096  0077BD  0614               	dw	1556
  1097  0077BF  061C               	dw	1564
  1098  0077C1  0625               	dw	1573
  1099  0077C3  062E               	dw	1582
  1100  0077C5  0636               	dw	1590
  1101  0077C7  063F               	dw	1599
  1102  0077C9  0648               	dw	1608
  1103  0077CB  0650               	dw	1616
  1104  0077CD  0659               	dw	1625
  1105  0077CF  0661               	dw	1633
  1106  0077D1  066A               	dw	1642
  1107  0077D3  0673               	dw	1651
  1108  0077D5  067B               	dw	1659
  1109  0077D7  0684               	dw	1668
  1110  0077D9  068D               	dw	1677
  1111  0077DB  0695               	dw	1685
  1112  0077DD  069E               	dw	1694
  1113  0077DF  06A6               	dw	1702
  1114  0077E1  06AF               	dw	1711
  1115  0077E3  06B8               	dw	1720
  1116  0077E5  06C0               	dw	1728
  1117  0077E7  06C9               	dw	1737
  1118  0077E9  06D2               	dw	1746
  1119  0077EB                     __end_of_finger_up_1:
  1120                           	opt stack 0
  1121  0077EB                     _finger_under_2:
  1122                           	opt stack 0
  1123  0077EB  0000               	dw	0
  1124  0077ED  0002               	dw	2
  1125  0077EF  0005               	dw	5
  1126  0077F1  0007               	dw	7
  1127  0077F3  000A               	dw	10
  1128  0077F5  000C               	dw	12
  1129  0077F7  000F               	dw	15
  1130  0077F9  0011               	dw	17
  1131  0077FB  0014               	dw	20
  1132  0077FD  0016               	dw	22
  1133  0077FF  0019               	dw	25
  1134  007801  001C               	dw	28
  1135  007803  001E               	dw	30
  1136  007805  0021               	dw	33
  1137  007807  0023               	dw	35
  1138  007809  0026               	dw	38
  1139  00780B  0028               	dw	40
  1140  00780D  002B               	dw	43
  1141  00780F  002D               	dw	45
  1142  007811  0030               	dw	48
  1143  007813  0033               	dw	51
  1144  007815  0035               	dw	53
  1145  007817  0038               	dw	56
  1146  007819  003A               	dw	58
  1147  00781B  003D               	dw	61
  1148  00781D  003F               	dw	63
  1149  00781F  0042               	dw	66
  1150  007821  0044               	dw	68
  1151  007823  0047               	dw	71
  1152  007825  004A               	dw	74
  1153  007827  004C               	dw	76
  1154  007829  004F               	dw	79
  1155  00782B  0051               	dw	81
  1156  00782D  0054               	dw	84
  1157  00782F  0056               	dw	86
  1158  007831  0059               	dw	89
  1159  007833  005B               	dw	91
  1160  007835  005E               	dw	94
  1161  007837  0061               	dw	97
  1162  007839  0063               	dw	99
  1163  00783B  0066               	dw	102
  1164  00783D  0068               	dw	104
  1165  00783F  006B               	dw	107
  1166  007841  006D               	dw	109
  1167  007843  0070               	dw	112
  1168  007845  0072               	dw	114
  1169  007847  0075               	dw	117
  1170  007849  0078               	dw	120
  1171  00784B  007A               	dw	122
  1172  00784D  007D               	dw	125
  1173  00784F  007F               	dw	127
  1174  007851  0082               	dw	130
  1175  007853  0084               	dw	132
  1176  007855  0087               	dw	135
  1177  007857  0089               	dw	137
  1178  007859  008C               	dw	140
  1179  00785B  008F               	dw	143
  1180  00785D  0091               	dw	145
  1181  00785F  0094               	dw	148
  1182  007861  0096               	dw	150
  1183  007863  0099               	dw	153
  1184  007865  009B               	dw	155
  1185  007867  009E               	dw	158
  1186  007869  00A0               	dw	160
  1187  00786B  00A3               	dw	163
  1188  00786D  00A5               	dw	165
  1189  00786F  00A8               	dw	168
  1190  007871  00AB               	dw	171
  1191  007873  00AD               	dw	173
  1192  007875  00B0               	dw	176
  1193  007877  00B2               	dw	178
  1194  007879  00B5               	dw	181
  1195  00787B  00B7               	dw	183
  1196  00787D  00BA               	dw	186
  1197  00787F  00BC               	dw	188
  1198  007881  00BF               	dw	191
  1199  007883  00C2               	dw	194
  1200  007885  00C4               	dw	196
  1201  007887  00C7               	dw	199
  1202  007889  00C9               	dw	201
  1203  00788B  00CC               	dw	204
  1204  00788D  00CE               	dw	206
  1205  00788F  00D1               	dw	209
  1206  007891  00D3               	dw	211
  1207  007893  00D6               	dw	214
  1208  007895  00D9               	dw	217
  1209  007897  00DB               	dw	219
  1210  007899  00DE               	dw	222
  1211  00789B  00E0               	dw	224
  1212  00789D  00E3               	dw	227
  1213  00789F  00E5               	dw	229
  1214  0078A1  00E8               	dw	232
  1215  0078A3  00EA               	dw	234
  1216  0078A5  00ED               	dw	237
  1217  0078A7  00F0               	dw	240
  1218  0078A9  00F2               	dw	242
  1219  0078AB  00F5               	dw	245
  1220  0078AD  00F7               	dw	247
  1221  0078AF  00FA               	dw	250
  1222  0078B1  00FC               	dw	252
  1223  0078B3  00FF               	dw	255
  1224  0078B5  0101               	dw	257
  1225  0078B7  0104               	dw	260
  1226  0078B9  0107               	dw	263
  1227  0078BB  0109               	dw	265
  1228  0078BD  010C               	dw	268
  1229  0078BF  010E               	dw	270
  1230  0078C1  0111               	dw	273
  1231  0078C3  0113               	dw	275
  1232  0078C5  0116               	dw	278
  1233  0078C7  0118               	dw	280
  1234  0078C9  011B               	dw	283
  1235  0078CB  011E               	dw	286
  1236  0078CD                     __end_of_finger_under_2:
  1237                           	opt stack 0
  1238  0078CD                     _finger_under_0:
  1239                           	opt stack 0
  1240  0078CD  0000               	dw	0
  1241  0078CF  00                 	db	0
  1242  0078D0  00                 	db	0
  1243  0078D1  00                 	db	0
  1244  0078D2  00                 	db	0
  1245  0078D3  00                 	db	0
  1246  0078D4  00                 	db	0
  1247  0078D5  00                 	db	0
  1248  0078D6  00                 	db	0
  1249  0078D7  00                 	db	0
  1250  0078D8  00                 	db	0
  1251  0078D9  00                 	db	0
  1252  0078DA  00                 	db	0
  1253  0078DB  00                 	db	0
  1254  0078DC  00                 	db	0
  1255  0078DD  00                 	db	0
  1256  0078DE  00                 	db	0
  1257  0078DF  00                 	db	0
  1258  0078E0  00                 	db	0
  1259  0078E1  00                 	db	0
  1260  0078E2  00                 	db	0
  1261  0078E3  00                 	db	0
  1262  0078E4  00                 	db	0
  1263  0078E5  00                 	db	0
  1264  0078E6  00                 	db	0
  1265  0078E7  00                 	db	0
  1266  0078E8  00                 	db	0
  1267  0078E9  00                 	db	0
  1268  0078EA  00                 	db	0
  1269  0078EB  00                 	db	0
  1270  0078EC  00                 	db	0
  1271  0078ED  00                 	db	0
  1272  0078EE  00                 	db	0
  1273  0078EF  00                 	db	0
  1274  0078F0  00                 	db	0
  1275  0078F1  00                 	db	0
  1276  0078F2  00                 	db	0
  1277  0078F3  00                 	db	0
  1278  0078F4  00                 	db	0
  1279  0078F5  00                 	db	0
  1280  0078F6  00                 	db	0
  1281  0078F7  00                 	db	0
  1282  0078F8  00                 	db	0
  1283  0078F9  00                 	db	0
  1284  0078FA  00                 	db	0
  1285  0078FB  00                 	db	0
  1286  0078FC  00                 	db	0
  1287  0078FD  00                 	db	0
  1288  0078FE  00                 	db	0
  1289  0078FF  00                 	db	0
  1290  007900  00                 	db	0
  1291  007901  00                 	db	0
  1292  007902  00                 	db	0
  1293  007903  00                 	db	0
  1294  007904  00                 	db	0
  1295  007905  00                 	db	0
  1296  007906  00                 	db	0
  1297  007907  00                 	db	0
  1298  007908  00                 	db	0
  1299  007909  00                 	db	0
  1300  00790A  00                 	db	0
  1301  00790B  00                 	db	0
  1302  00790C  00                 	db	0
  1303  00790D  00                 	db	0
  1304  00790E  00                 	db	0
  1305  00790F  00                 	db	0
  1306  007910  00                 	db	0
  1307  007911  00                 	db	0
  1308  007912  00                 	db	0
  1309  007913  00                 	db	0
  1310  007914  00                 	db	0
  1311  007915  00                 	db	0
  1312  007916  00                 	db	0
  1313  007917  00                 	db	0
  1314  007918  00                 	db	0
  1315  007919  00                 	db	0
  1316  00791A  00                 	db	0
  1317  00791B  00                 	db	0
  1318  00791C  00                 	db	0
  1319  00791D  00                 	db	0
  1320  00791E  00                 	db	0
  1321  00791F  00                 	db	0
  1322  007920  00                 	db	0
  1323  007921  00                 	db	0
  1324  007922  00                 	db	0
  1325  007923  00                 	db	0
  1326  007924  00                 	db	0
  1327  007925  00                 	db	0
  1328  007926  00                 	db	0
  1329  007927  00                 	db	0
  1330  007928  00                 	db	0
  1331  007929  00                 	db	0
  1332  00792A  00                 	db	0
  1333  00792B  00                 	db	0
  1334  00792C  00                 	db	0
  1335  00792D  00                 	db	0
  1336  00792E  00                 	db	0
  1337  00792F  00                 	db	0
  1338  007930  00                 	db	0
  1339  007931  00                 	db	0
  1340  007932  00                 	db	0
  1341  007933  00                 	db	0
  1342  007934  00                 	db	0
  1343  007935  00                 	db	0
  1344  007936  00                 	db	0
  1345  007937  00                 	db	0
  1346  007938  00                 	db	0
  1347  007939  00                 	db	0
  1348  00793A  00                 	db	0
  1349  00793B  00                 	db	0
  1350  00793C  00                 	db	0
  1351  00793D  00                 	db	0
  1352  00793E  00                 	db	0
  1353  00793F  00                 	db	0
  1354  007940  00                 	db	0
  1355  007941  00                 	db	0
  1356  007942  00                 	db	0
  1357  007943  00                 	db	0
  1358  007944  00                 	db	0
  1359  007945  00                 	db	0
  1360  007946  00                 	db	0
  1361  007947  00                 	db	0
  1362  007948  00                 	db	0
  1363  007949  00                 	db	0
  1364  00794A  00                 	db	0
  1365  00794B  00                 	db	0
  1366  00794C  00                 	db	0
  1367  00794D  00                 	db	0
  1368  00794E  00                 	db	0
  1369  00794F  00                 	db	0
  1370  007950  00                 	db	0
  1371  007951  00                 	db	0
  1372  007952  00                 	db	0
  1373  007953  00                 	db	0
  1374  007954  00                 	db	0
  1375  007955  00                 	db	0
  1376  007956  00                 	db	0
  1377  007957  00                 	db	0
  1378  007958  00                 	db	0
  1379  007959  00                 	db	0
  1380  00795A  00                 	db	0
  1381  00795B  00                 	db	0
  1382  00795C  00                 	db	0
  1383  00795D  00                 	db	0
  1384  00795E  00                 	db	0
  1385  00795F  00                 	db	0
  1386  007960  00                 	db	0
  1387  007961  00                 	db	0
  1388  007962  00                 	db	0
  1389  007963  00                 	db	0
  1390  007964  00                 	db	0
  1391  007965  00                 	db	0
  1392  007966  00                 	db	0
  1393  007967  00                 	db	0
  1394  007968  00                 	db	0
  1395  007969  00                 	db	0
  1396  00796A  00                 	db	0
  1397  00796B  00                 	db	0
  1398  00796C  00                 	db	0
  1399  00796D  00                 	db	0
  1400  00796E  00                 	db	0
  1401  00796F  00                 	db	0
  1402  007970  00                 	db	0
  1403  007971  00                 	db	0
  1404  007972  00                 	db	0
  1405  007973  00                 	db	0
  1406  007974  00                 	db	0
  1407  007975  00                 	db	0
  1408  007976  00                 	db	0
  1409  007977  00                 	db	0
  1410  007978  00                 	db	0
  1411  007979  00                 	db	0
  1412  00797A  00                 	db	0
  1413  00797B  00                 	db	0
  1414  00797C  00                 	db	0
  1415  00797D  00                 	db	0
  1416  00797E  00                 	db	0
  1417  00797F  00                 	db	0
  1418  007980  00                 	db	0
  1419  007981  00                 	db	0
  1420  007982  00                 	db	0
  1421  007983  00                 	db	0
  1422  007984  00                 	db	0
  1423  007985  00                 	db	0
  1424  007986  00                 	db	0
  1425  007987  00                 	db	0
  1426  007988  00                 	db	0
  1427  007989  00                 	db	0
  1428  00798A  00                 	db	0
  1429  00798B  00                 	db	0
  1430  00798C  00                 	db	0
  1431  00798D  00                 	db	0
  1432  00798E  00                 	db	0
  1433  00798F  00                 	db	0
  1434  007990  00                 	db	0
  1435  007991  00                 	db	0
  1436  007992  00                 	db	0
  1437  007993  00                 	db	0
  1438  007994  00                 	db	0
  1439  007995  00                 	db	0
  1440  007996  00                 	db	0
  1441  007997  00                 	db	0
  1442  007998  00                 	db	0
  1443  007999  00                 	db	0
  1444  00799A  00                 	db	0
  1445  00799B  00                 	db	0
  1446  00799C  00                 	db	0
  1447  00799D  00                 	db	0
  1448  00799E  00                 	db	0
  1449  00799F  00                 	db	0
  1450  0079A0  00                 	db	0
  1451  0079A1  00                 	db	0
  1452  0079A2  00                 	db	0
  1453  0079A3  00                 	db	0
  1454  0079A4  00                 	db	0
  1455  0079A5                     __end_of_finger_under_0:
  1456                           	opt stack 0
  1457  0079A5                     _finger_under_1:
  1458                           	opt stack 0
  1459  0079A5  0000               	dw	0
  1460  0079A7  0006               	dw	6
  1461  0079A9  000D               	dw	13
  1462  0079AB  0013               	dw	19
  1463  0079AD  001A               	dw	26
  1464  0079AF  0021               	dw	33
  1465  0079B1  0027               	dw	39
  1466  0079B3  002E               	dw	46
  1467  0079B5  0035               	dw	53
  1468  0079B7  003B               	dw	59
  1469  0079B9  0042               	dw	66
  1470  0079BB  0049               	dw	73
  1471  0079BD  004F               	dw	79
  1472  0079BF  0056               	dw	86
  1473  0079C1  005D               	dw	93
  1474  0079C3  0063               	dw	99
  1475  0079C5  006A               	dw	106
  1476  0079C7  0071               	dw	113
  1477  0079C9  0077               	dw	119
  1478  0079CB  007E               	dw	126
  1479  0079CD  0085               	dw	133
  1480  0079CF  008B               	dw	139
  1481  0079D1  0092               	dw	146
  1482  0079D3  0099               	dw	153
  1483  0079D5  009F               	dw	159
  1484  0079D7  00A6               	dw	166
  1485  0079D9  00AD               	dw	173
  1486  0079DB  00B3               	dw	179
  1487  0079DD  00BA               	dw	186
  1488  0079DF  00C1               	dw	193
  1489  0079E1  00C7               	dw	199
  1490  0079E3  00CE               	dw	206
  1491  0079E5  00D5               	dw	213
  1492  0079E7  00DB               	dw	219
  1493  0079E9  00E2               	dw	226
  1494  0079EB  00E9               	dw	233
  1495  0079ED  00EF               	dw	239
  1496  0079EF  00F6               	dw	246
  1497  0079F1  00FD               	dw	253
  1498  0079F3  0103               	dw	259
  1499  0079F5  010A               	dw	266
  1500  0079F7  0111               	dw	273
  1501  0079F9  0117               	dw	279
  1502  0079FB  011E               	dw	286
  1503  0079FD  0125               	dw	293
  1504  0079FF  012B               	dw	299
  1505  007A01  0132               	dw	306
  1506  007A03  0139               	dw	313
  1507  007A05  013F               	dw	319
  1508  007A07  0146               	dw	326
  1509  007A09  014D               	dw	333
  1510  007A0B  0153               	dw	339
  1511  007A0D  015A               	dw	346
  1512  007A0F  0161               	dw	353
  1513  007A11  0167               	dw	359
  1514  007A13  016E               	dw	366
  1515  007A15  0175               	dw	373
  1516  007A17  017B               	dw	379
  1517  007A19  0182               	dw	386
  1518  007A1B  0189               	dw	393
  1519  007A1D  018F               	dw	399
  1520  007A1F  0196               	dw	406
  1521  007A21  019D               	dw	413
  1522  007A23  01A3               	dw	419
  1523  007A25  01AA               	dw	426
  1524  007A27  01B1               	dw	433
  1525  007A29  01B7               	dw	439
  1526  007A2B  01BE               	dw	446
  1527  007A2D  01C5               	dw	453
  1528  007A2F  01CB               	dw	459
  1529  007A31  01D2               	dw	466
  1530  007A33  01D9               	dw	473
  1531  007A35  01DF               	dw	479
  1532  007A37  01E6               	dw	486
  1533  007A39  01ED               	dw	493
  1534  007A3B  01F3               	dw	499
  1535  007A3D  01FA               	dw	506
  1536  007A3F  0201               	dw	513
  1537  007A41  0207               	dw	519
  1538  007A43  020E               	dw	526
  1539  007A45  0215               	dw	533
  1540  007A47  021B               	dw	539
  1541  007A49  0222               	dw	546
  1542  007A4B  0229               	dw	553
  1543  007A4D  022F               	dw	559
  1544  007A4F  0236               	dw	566
  1545  007A51  023D               	dw	573
  1546  007A53  0243               	dw	579
  1547  007A55  024A               	dw	586
  1548  007A57  0251               	dw	593
  1549  007A59  0257               	dw	599
  1550  007A5B  025E               	dw	606
  1551  007A5D  0265               	dw	613
  1552  007A5F  026B               	dw	619
  1553  007A61  0272               	dw	626
  1554  007A63  0279               	dw	633
  1555  007A65                     __end_of_finger_under_1:
  1556                           	opt stack 0
  1557  007A65                     _finger_under_3:
  1558                           	opt stack 0
  1559  007A65  0000               	dw	0
  1560  007A67  000B               	dw	11
  1561  007A69  0017               	dw	23
  1562  007A6B  0022               	dw	34
  1563  007A6D  002E               	dw	46
  1564  007A6F  0039               	dw	57
  1565  007A71  0045               	dw	69
  1566  007A73  0051               	dw	81
  1567  007A75  005C               	dw	92
  1568  007A77  0068               	dw	104
  1569  007A79  0073               	dw	115
  1570  007A7B  007F               	dw	127
  1571  007A7D  008A               	dw	138
  1572  007A7F  0096               	dw	150
  1573  007A81  00A2               	dw	162
  1574  007A83  00AD               	dw	173
  1575  007A85  00B9               	dw	185
  1576  007A87  00C4               	dw	196
  1577  007A89  00D0               	dw	208
  1578  007A8B  00DB               	dw	219
  1579  007A8D  00E7               	dw	231
  1580  007A8F  00F3               	dw	243
  1581  007A91  00FE               	dw	254
  1582  007A93  010A               	dw	266
  1583  007A95  0115               	dw	277
  1584  007A97  0121               	dw	289
  1585  007A99  012D               	dw	301
  1586  007A9B  0138               	dw	312
  1587  007A9D  0144               	dw	324
  1588  007A9F  014F               	dw	335
  1589  007AA1  015B               	dw	347
  1590  007AA3  0166               	dw	358
  1591  007AA5  0172               	dw	370
  1592  007AA7  017E               	dw	382
  1593  007AA9  0189               	dw	393
  1594  007AAB  0195               	dw	405
  1595  007AAD  01A0               	dw	416
  1596  007AAF  01AC               	dw	428
  1597  007AB1  01B7               	dw	439
  1598  007AB3  01C3               	dw	451
  1599  007AB5  01CF               	dw	463
  1600  007AB7  01DA               	dw	474
  1601  007AB9  01E6               	dw	486
  1602  007ABB  01F1               	dw	497
  1603  007ABD  01FD               	dw	509
  1604  007ABF  0208               	dw	520
  1605  007AC1  0214               	dw	532
  1606  007AC3  0220               	dw	544
  1607  007AC5  022B               	dw	555
  1608  007AC7  0237               	dw	567
  1609  007AC9  0242               	dw	578
  1610  007ACB  024E               	dw	590
  1611  007ACD  025A               	dw	602
  1612  007ACF  0265               	dw	613
  1613  007AD1  0271               	dw	625
  1614  007AD3  027C               	dw	636
  1615  007AD5  0288               	dw	648
  1616  007AD7  0293               	dw	659
  1617  007AD9  029F               	dw	671
  1618  007ADB  02AB               	dw	683
  1619  007ADD  02B6               	dw	694
  1620  007ADF  02C2               	dw	706
  1621  007AE1  02CD               	dw	717
  1622  007AE3  02D9               	dw	729
  1623  007AE5  02E4               	dw	740
  1624  007AE7  02F0               	dw	752
  1625  007AE9  02FC               	dw	764
  1626  007AEB  0307               	dw	775
  1627  007AED  0313               	dw	787
  1628  007AEF  031E               	dw	798
  1629  007AF1  032A               	dw	810
  1630  007AF3  0335               	dw	821
  1631  007AF5  0341               	dw	833
  1632  007AF7  034D               	dw	845
  1633  007AF9  0358               	dw	856
  1634  007AFB  0364               	dw	868
  1635  007AFD  036F               	dw	879
  1636  007AFF  037B               	dw	891
  1637  007B01  0387               	dw	903
  1638  007B03                     __end_of_finger_under_3:
  1639                           	opt stack 0
  1640  007B03                     _octpowers:
  1641                           	opt stack 0
  1642  007B03  0001               	dw	1
  1643  007B05  0008               	dw	8
  1644  007B07  0040               	dw	64
  1645  007B09  0200               	dw	512
  1646  007B0B  1000               	dw	4096
  1647  007B0D  8000               	dw	32768
  1648  007B0F                     __end_of_octpowers:
  1649                           	opt stack 0
  1650  007B0F                     _dpowers:
  1651                           	opt stack 0
  1652  007B0F  0001               	dw	1
  1653  007B11  000A               	dw	10
  1654  007B13  0064               	dw	100
  1655  007B15  03E8               	dw	1000
  1656  007B17  2710               	dw	10000
  1657  007B19                     __end_of_dpowers:
  1658                           	opt stack 0
  1659  007B19                     _hexpowers:
  1660                           	opt stack 0
  1661  007B19  0001               	dw	1
  1662  007B1B  0010               	dw	16
  1663  007B1D  0100               	dw	256
  1664  007B1F  1000               	dw	4096
  1665  007B21                     __end_of_hexpowers:
  1666                           	opt stack 0
  1667  0000                     _PORTBbits	set	3969
  1668  0000                     _TRISBbits	set	3987
  1669  0000                     _PORTDbits	set	3971
  1670  0000                     _PORTD	set	3971
  1671  0000                     _LATAbits	set	3977
  1672  0000                     _TRISAbits	set	3986
  1673  0000                     _LATD	set	3980
  1674  0000                     _TRISD	set	3989
  1675  0000                     _RCREG	set	4014
  1676  0000                     _TXREG	set	4013
  1677  0000                     _SPBRG	set	4015
  1678  0000                     _SPBRGH	set	4016
  1679  0000                     _BAUDCONbits	set	4024
  1680  0000                     _RCSTAbits	set	4011
  1681  0000                     _TXSTAbits	set	4012
  1682  0000                     _T2CONbits	set	4042
  1683  0000                     _PR2	set	4043
  1684  0000                     _PIR1bits	set	3998
  1685  0000                     _PIE1bits	set	3997
  1686  0000                     _RCONbits	set	4048
  1687  0000                     _OSCCONbits	set	4051
  1688  0000                     _TRMT	set	32097
  1689  0000                     _TXIF	set	31988
  1690  0000                     _T0CONbits	set	4053
  1691  0000                     _INTCONbits	set	4082
  1692  007B21  41                 	db	65	;'A'
  1693  007B22  54                 	db	84	;'T'
  1694  007B23  2B                 	db	43
  1695  007B24  43                 	db	67	;'C'
  1696  007B25  57                 	db	87	;'W'
  1697  007B26  53                 	db	83	;'S'
  1698  007B27  41                 	db	65	;'A'
  1699  007B28  50                 	db	80	;'P'
  1700  007B29  3D                 	db	61	;'='
  1701  007B2A  22                 	db	34
  1702  007B2B  25                 	db	37
  1703  007B2C  73                 	db	115	;'s'
  1704  007B2D  22                 	db	34
  1705  007B2E  2C                 	db	44
  1706  007B2F  22                 	db	34
  1707  007B30  25                 	db	37
  1708  007B31  73                 	db	115	;'s'
  1709  007B32  22                 	db	34
  1710  007B33  2C                 	db	44
  1711  007B34  31                 	db	49	;'1'
  1712  007B35  2C                 	db	44
  1713  007B36  25                 	db	37
  1714  007B37  73                 	db	115	;'s'
  1715  007B38  0D                 	db	13
  1716  007B39  0A                 	db	10
  1717  007B3A  00                 	db	0
  1718  007B3B  41                 	db	65	;'A'
  1719  007B3C  54                 	db	84	;'T'
  1720  007B3D  2B                 	db	43
  1721  007B3E  55                 	db	85	;'U'
  1722  007B3F  41                 	db	65	;'A'
  1723  007B40  52                 	db	82	;'R'
  1724  007B41  54                 	db	84	;'T'
  1725  007B42  3D                 	db	61	;'='
  1726  007B43  31                 	db	49	;'1'
  1727  007B44  31                 	db	49	;'1'
  1728  007B45  35                 	db	53	;'5'
  1729  007B46  32                 	db	50	;'2'
  1730  007B47  30                 	db	48	;'0'
  1731  007B48  30                 	db	48	;'0'
  1732  007B49  2C                 	db	44
  1733  007B4A  38                 	db	56	;'8'
  1734  007B4B  2C                 	db	44
  1735  007B4C  31                 	db	49	;'1'
  1736  007B4D  2C                 	db	44
  1737  007B4E  30                 	db	48	;'0'
  1738  007B4F  2C                 	db	44
  1739  007B50  30                 	db	48	;'0'
  1740  007B51  0D                 	db	13
  1741  007B52  0A                 	db	10
  1742  007B53  00                 	db	0
  1743  007B54  41                 	db	65	;'A'
  1744  007B55  54                 	db	84	;'T'
  1745  007B56  2B                 	db	43
  1746  007B57  55                 	db	85	;'U'
  1747  007B58  41                 	db	65	;'A'
  1748  007B59  52                 	db	82	;'R'
  1749  007B5A  54                 	db	84	;'T'
  1750  007B5B  3D                 	db	61	;'='
  1751  007B5C  39                 	db	57	;'9'
  1752  007B5D  36                 	db	54	;'6'
  1753  007B5E  30                 	db	48	;'0'
  1754  007B5F  30                 	db	48	;'0'
  1755  007B60  2C                 	db	44
  1756  007B61  38                 	db	56	;'8'
  1757  007B62  2C                 	db	44
  1758  007B63  31                 	db	49	;'1'
  1759  007B64  2C                 	db	44
  1760  007B65  30                 	db	48	;'0'
  1761  007B66  2C                 	db	44
  1762  007B67  30                 	db	48	;'0'
  1763  007B68  0D                 	db	13
  1764  007B69  0A                 	db	10
  1765  007B6A  00                 	db	0
  1766  007B6B  41                 	db	65	;'A'
  1767  007B6C  54                 	db	84	;'T'
  1768  007B6D  2B                 	db	43
  1769  007B6E  43                 	db	67	;'C'
  1770  007B6F  49                 	db	73	;'I'
  1771  007B70  50                 	db	80	;'P'
  1772  007B71  53                 	db	83	;'S'
  1773  007B72  45                 	db	69	;'E'
  1774  007B73  52                 	db	82	;'R'
  1775  007B74  56                 	db	86	;'V'
  1776  007B75  45                 	db	69	;'E'
  1777  007B76  52                 	db	82	;'R'
  1778  007B77  3D                 	db	61	;'='
  1779  007B78  31                 	db	49	;'1'
  1780  007B79  2C                 	db	44
  1781  007B7A  35                 	db	53	;'5'
  1782  007B7B  30                 	db	48	;'0'
  1783  007B7C  30                 	db	48	;'0'
  1784  007B7D  30                 	db	48	;'0'
  1785  007B7E  0D                 	db	13
  1786  007B7F  0A                 	db	10
  1787  007B80  00                 	db	0
  1788  007B81                     STR_15:
  1789  007B81  41                 	db	65	;'A'
  1790  007B82  54                 	db	84	;'T'
  1791  007B83  2B                 	db	43
  1792  007B84  43                 	db	67	;'C'
  1793  007B85  57                 	db	87	;'W'
  1794  007B86  4A                 	db	74	;'J'
  1795  007B87  41                 	db	65	;'A'
  1796  007B88  50                 	db	80	;'P'
  1797  007B89  3D                 	db	61	;'='
  1798  007B8A  22                 	db	34
  1799  007B8B  25                 	db	37
  1800  007B8C  73                 	db	115	;'s'
  1801  007B8D  22                 	db	34
  1802  007B8E  2C                 	db	44
  1803  007B8F  22                 	db	34
  1804  007B90  25                 	db	37
  1805  007B91  73                 	db	115	;'s'
  1806  007B92  22                 	db	34
  1807  007B93  0D                 	db	13
  1808  007B94  0A                 	db	10
  1809  007B95  00                 	db	0
  1810  007B96                     STR_24:
  1811  007B96  41                 	db	65	;'A'
  1812  007B97  54                 	db	84	;'T'
  1813  007B98  2B                 	db	43
  1814  007B99  43                 	db	67	;'C'
  1815  007B9A  49                 	db	73	;'I'
  1816  007B9B  50                 	db	80	;'P'
  1817  007B9C  53                 	db	83	;'S'
  1818  007B9D  54                 	db	84	;'T'
  1819  007B9E  41                 	db	65	;'A'
  1820  007B9F  52                 	db	82	;'R'
  1821  007BA0  54                 	db	84	;'T'
  1822  007BA1  3D                 	db	61	;'='
  1823  007BA2  25                 	db	37
  1824  007BA3  64                 	db	100	;'d'
  1825  007BA4  2C                 	db	44
  1826  007BA5  25                 	db	37
  1827  007BA6  73                 	db	115	;'s'
  1828  007BA7  0D                 	db	13
  1829  007BA8  0A                 	db	10
  1830  007BA9  00                 	db	0
  1831  007BAA  41                 	db	65	;'A'
  1832  007BAB  54                 	db	84	;'T'
  1833  007BAC  2B                 	db	43
  1834  007BAD  43                 	db	67	;'C'
  1835  007BAE  49                 	db	73	;'I'
  1836  007BAF  50                 	db	80	;'P'
  1837  007BB0  53                 	db	83	;'S'
  1838  007BB1  45                 	db	69	;'E'
  1839  007BB2  4E                 	db	78	;'N'
  1840  007BB3  44                 	db	68	;'D'
  1841  007BB4  3D                 	db	61	;'='
  1842  007BB5  25                 	db	37
  1843  007BB6  64                 	db	100	;'d'
  1844  007BB7  2C                 	db	44
  1845  007BB8  25                 	db	37
  1846  007BB9  64                 	db	100	;'d'
  1847  007BBA  0D                 	db	13
  1848  007BBB  0A                 	db	10
  1849  007BBC  00                 	db	0
  1850  007BBD                     STR_64:
  1851  007BBD  30                 	db	48	;'0'
  1852  007BBE  31                 	db	49	;'1'
  1853  007BBF  32                 	db	50	;'2'
  1854  007BC0  33                 	db	51	;'3'
  1855  007BC1  34                 	db	52	;'4'
  1856  007BC2  35                 	db	53	;'5'
  1857  007BC3  36                 	db	54	;'6'
  1858  007BC4  37                 	db	55	;'7'
  1859  007BC5  38                 	db	56	;'8'
  1860  007BC6  39                 	db	57	;'9'
  1861  007BC7  41                 	db	65	;'A'
  1862  007BC8  42                 	db	66	;'B'
  1863  007BC9  43                 	db	67	;'C'
  1864  007BCA  44                 	db	68	;'D'
  1865  007BCB  45                 	db	69	;'E'
  1866  007BCC  46                 	db	70	;'F'
  1867  007BCD  00                 	db	0
  1868  007BCE                     STR_65:
  1869  007BCE  30                 	db	48	;'0'
  1870  007BCF  31                 	db	49	;'1'
  1871  007BD0  32                 	db	50	;'2'
  1872  007BD1  33                 	db	51	;'3'
  1873  007BD2  34                 	db	52	;'4'
  1874  007BD3  35                 	db	53	;'5'
  1875  007BD4  36                 	db	54	;'6'
  1876  007BD5  37                 	db	55	;'7'
  1877  007BD6  38                 	db	56	;'8'
  1878  007BD7  39                 	db	57	;'9'
  1879  007BD8  61                 	db	97	;'a'
  1880  007BD9  62                 	db	98	;'b'
  1881  007BDA  63                 	db	99	;'c'
  1882  007BDB  64                 	db	100	;'d'
  1883  007BDC  65                 	db	101	;'e'
  1884  007BDD  66                 	db	102	;'f'
  1885  007BDE  00                 	db	0
  1886  007BDF                     STR_25:
  1887  007BDF  41                 	db	65	;'A'
  1888  007BE0  54                 	db	84	;'T'
  1889  007BE1  2B                 	db	43
  1890  007BE2  43                 	db	67	;'C'
  1891  007BE3  49                 	db	73	;'I'
  1892  007BE4  50                 	db	80	;'P'
  1893  007BE5  53                 	db	83	;'S'
  1894  007BE6  54                 	db	84	;'T'
  1895  007BE7  41                 	db	65	;'A'
  1896  007BE8  52                 	db	82	;'R'
  1897  007BE9  54                 	db	84	;'T'
  1898  007BEA  3D                 	db	61	;'='
  1899  007BEB  25                 	db	37
  1900  007BEC  73                 	db	115	;'s'
  1901  007BED  0D                 	db	13
  1902  007BEE  0A                 	db	10
  1903  007BEF  00                 	db	0
  1904  007BF0  41                 	db	65	;'A'
  1905  007BF1  54                 	db	84	;'T'
  1906  007BF2  2B                 	db	43
  1907  007BF3  43                 	db	67	;'C'
  1908  007BF4  49                 	db	73	;'I'
  1909  007BF5  50                 	db	80	;'P'
  1910  007BF6  4D                 	db	77	;'M'
  1911  007BF7  4F                 	db	79	;'O'
  1912  007BF8  44                 	db	68	;'D'
  1913  007BF9  45                 	db	69	;'E'
  1914  007BFA  3D                 	db	61	;'='
  1915  007BFB  30                 	db	48	;'0'
  1916  007BFC  0D                 	db	13
  1917  007BFD  0A                 	db	10
  1918  007BFE  00                 	db	0
  1919  007BFF                     STR_53:
  1920  007BFF  41                 	db	65	;'A'
  1921  007C00  54                 	db	84	;'T'
  1922  007C01  2B                 	db	43
  1923  007C02  43                 	db	67	;'C'
  1924  007C03  49                 	db	73	;'I'
  1925  007C04  50                 	db	80	;'P'
  1926  007C05  4D                 	db	77	;'M'
  1927  007C06  4F                 	db	79	;'O'
  1928  007C07  44                 	db	68	;'D'
  1929  007C08  45                 	db	69	;'E'
  1930  007C09  3D                 	db	61	;'='
  1931  007C0A  31                 	db	49	;'1'
  1932  007C0B  0D                 	db	13
  1933  007C0C  0A                 	db	10
  1934  007C0D  00                 	db	0
  1935  007C0E                     STR_41:
  1936  007C0E  41                 	db	65	;'A'
  1937  007C0F  54                 	db	84	;'T'
  1938  007C10  2B                 	db	43
  1939  007C11  43                 	db	67	;'C'
  1940  007C12  49                 	db	73	;'I'
  1941  007C13  50                 	db	80	;'P'
  1942  007C14  4D                 	db	77	;'M'
  1943  007C15  55                 	db	85	;'U'
  1944  007C16  58                 	db	88	;'X'
  1945  007C17  3D                 	db	61	;'='
  1946  007C18  30                 	db	48	;'0'
  1947  007C19  0D                 	db	13
  1948  007C1A  0A                 	db	10
  1949  007C1B  00                 	db	0
  1950  007C1C                     STR_9:
  1951  007C1C  41                 	db	65	;'A'
  1952  007C1D  54                 	db	84	;'T'
  1953  007C1E  2B                 	db	43
  1954  007C1F  43                 	db	67	;'C'
  1955  007C20  57                 	db	87	;'W'
  1956  007C21  4D                 	db	77	;'M'
  1957  007C22  4F                 	db	79	;'O'
  1958  007C23  44                 	db	68	;'D'
  1959  007C24  45                 	db	69	;'E'
  1960  007C25  3D                 	db	61	;'='
  1961  007C26  31                 	db	49	;'1'
  1962  007C27  0D                 	db	13
  1963  007C28  0A                 	db	10
  1964  007C29  00                 	db	0
  1965  007C2A  41                 	db	65	;'A'
  1966  007C2B  54                 	db	84	;'T'
  1967  007C2C  2B                 	db	43
  1968  007C2D  43                 	db	67	;'C'
  1969  007C2E  49                 	db	73	;'I'
  1970  007C2F  50                 	db	80	;'P'
  1971  007C30  4D                 	db	77	;'M'
  1972  007C31  55                 	db	85	;'U'
  1973  007C32  58                 	db	88	;'X'
  1974  007C33  3D                 	db	61	;'='
  1975  007C34  31                 	db	49	;'1'
  1976  007C35  0D                 	db	13
  1977  007C36  0A                 	db	10
  1978  007C37  00                 	db	0
  1979  007C38                     STR_11:
  1980  007C38  41                 	db	65	;'A'
  1981  007C39  54                 	db	84	;'T'
  1982  007C3A  2B                 	db	43
  1983  007C3B  43                 	db	67	;'C'
  1984  007C3C  57                 	db	87	;'W'
  1985  007C3D  4D                 	db	77	;'M'
  1986  007C3E  4F                 	db	79	;'O'
  1987  007C3F  44                 	db	68	;'D'
  1988  007C40  45                 	db	69	;'E'
  1989  007C41  3D                 	db	61	;'='
  1990  007C42  32                 	db	50	;'2'
  1991  007C43  0D                 	db	13
  1992  007C44  0A                 	db	10
  1993  007C45  00                 	db	0
  1994  007C46                     STR_13:
  1995  007C46  41                 	db	65	;'A'
  1996  007C47  54                 	db	84	;'T'
  1997  007C48  2B                 	db	43
  1998  007C49  43                 	db	67	;'C'
  1999  007C4A  57                 	db	87	;'W'
  2000  007C4B  4D                 	db	77	;'M'
  2001  007C4C  4F                 	db	79	;'O'
  2002  007C4D  44                 	db	68	;'D'
  2003  007C4E  45                 	db	69	;'E'
  2004  007C4F  3D                 	db	61	;'='
  2005  007C50  33                 	db	51	;'3'
  2006  007C51  0D                 	db	13
  2007  007C52  0A                 	db	10
  2008  007C53  00                 	db	0
  2009  007C54                     STR_32:
  2010  007C54  41                 	db	65	;'A'
  2011  007C55  54                 	db	84	;'T'
  2012  007C56  2B                 	db	43
  2013  007C57  43                 	db	67	;'C'
  2014  007C58  57                 	db	87	;'W'
  2015  007C59  4D                 	db	77	;'M'
  2016  007C5A  4F                 	db	79	;'O'
  2017  007C5B  44                 	db	68	;'D'
  2018  007C5C  45                 	db	69	;'E'
  2019  007C5D  3F                 	db	63	;'?'
  2020  007C5E  0D                 	db	13
  2021  007C5F  0A                 	db	10
  2022  007C60  00                 	db	0
  2023  007C61                     STR_20:
  2024  007C61  22                 	db	34
  2025  007C62  25                 	db	37
  2026  007C63  73                 	db	115	;'s'
  2027  007C64  22                 	db	34
  2028  007C65  2C                 	db	44
  2029  007C66  22                 	db	34
  2030  007C67  25                 	db	37
  2031  007C68  73                 	db	115	;'s'
  2032  007C69  22                 	db	34
  2033  007C6A  2C                 	db	44
  2034  007C6B  25                 	db	37
  2035  007C6C  73                 	db	115	;'s'
  2036  007C6D  00                 	db	0
  2037  007C6E                     STR_57:
  2038  007C6E  31                 	db	49	;'1'
  2039  007C6F  39                 	db	57	;'9'
  2040  007C70  32                 	db	50	;'2'
  2041  007C71  2E                 	db	46
  2042  007C72  31                 	db	49	;'1'
  2043  007C73  36                 	db	54	;'6'
  2044  007C74  38                 	db	56	;'8'
  2045  007C75  2E                 	db	46
  2046  007C76  34                 	db	52	;'4'
  2047  007C77  2E                 	db	46
  2048  007C78  31                 	db	49	;'1'
  2049  007C79  00                 	db	0
  2050  007C7A                     STR_49:
  2051  007C7A  41                 	db	65	;'A'
  2052  007C7B  54                 	db	84	;'T'
  2053  007C7C  2B                 	db	43
  2054  007C7D  43                 	db	67	;'C'
  2055  007C7E  57                 	db	87	;'W'
  2056  007C7F  51                 	db	81	;'Q'
  2057  007C80  41                 	db	65	;'A'
  2058  007C81  50                 	db	80	;'P'
  2059  007C82  0D                 	db	13
  2060  007C83  0A                 	db	10
  2061  007C84  00                 	db	0
  2062  007C85                     STR_39:
  2063  007C85  7A                 	db	122	;'z'
  2064  007C86  78                 	db	120	;'x'
  2065  007C87  34                 	db	52	;'4'
  2066  007C88  35                 	db	53	;'5'
  2067  007C89  32                 	db	50	;'2'
  2068  007C8A  32                 	db	50	;'2'
  2069  007C8B  33                 	db	51	;'3'
  2070  007C8C  33                 	db	51	;'3'
  2071  007C8D  31                 	db	49	;'1'
  2072  007C8E  00                 	db	0
  2073  007C8F                     STR_36:
  2074  007C8F  2B                 	db	43
  2075  007C90  43                 	db	67	;'C'
  2076  007C91  57                 	db	87	;'W'
  2077  007C92  4D                 	db	77	;'M'
  2078  007C93  4F                 	db	79	;'O'
  2079  007C94  44                 	db	68	;'D'
  2080  007C95  45                 	db	69	;'E'
  2081  007C96  3A                 	db	58	;':'
  2082  007C97  31                 	db	49	;'1'
  2083  007C98  00                 	db	0
  2084  007C99  2B                 	db	43
  2085  007C9A  43                 	db	67	;'C'
  2086  007C9B  57                 	db	87	;'W'
  2087  007C9C  4D                 	db	77	;'M'
  2088  007C9D  4F                 	db	79	;'O'
  2089  007C9E  44                 	db	68	;'D'
  2090  007C9F  45                 	db	69	;'E'
  2091  007CA0  3A                 	db	58	;':'
  2092  007CA1  32                 	db	50	;'2'
  2093  007CA2  00                 	db	0
  2094  007CA3                     STR_17:
  2095  007CA3  43                 	db	67	;'C'
  2096  007CA4  4F                 	db	79	;'O'
  2097  007CA5  4E                 	db	78	;'N'
  2098  007CA6  4E                 	db	78	;'N'
  2099  007CA7  45                 	db	69	;'E'
  2100  007CA8  43                 	db	67	;'C'
  2101  007CA9  54                 	db	84	;'T'
  2102  007CAA  45                 	db	69	;'E'
  2103  007CAB  44                 	db	68	;'D'
  2104  007CAC  00                 	db	0
  2105  007CAD                     STR_6:
  2106  007CAD  41                 	db	65	;'A'
  2107  007CAE  54                 	db	84	;'T'
  2108  007CAF  2B                 	db	43
  2109  007CB0  52                 	db	82	;'R'
  2110  007CB1  53                 	db	83	;'S'
  2111  007CB2  54                 	db	84	;'T'
  2112  007CB3  0D                 	db	13
  2113  007CB4  0A                 	db	10
  2114  007CB5  00                 	db	0
  2115  007CB6                     STR_3:
  2116  007CB6  53                 	db	83	;'S'
  2117  007CB7  45                 	db	69	;'E'
  2118  007CB8  4E                 	db	78	;'N'
  2119  007CB9  44                 	db	68	;'D'
  2120  007CBA  20                 	db	32
  2121  007CBB  4F                 	db	79	;'O'
  2122  007CBC  4B                 	db	75	;'K'
  2123  007CBD  00                 	db	0
  2124  007CBE                     STR_26:
  2125  007CBE  43                 	db	67	;'C'
  2126  007CBF  4F                 	db	79	;'O'
  2127  007CC0  4E                 	db	78	;'N'
  2128  007CC1  4E                 	db	78	;'N'
  2129  007CC2  45                 	db	69	;'E'
  2130  007CC3  43                 	db	67	;'C'
  2131  007CC4  54                 	db	84	;'T'
  2132  007CC5  00                 	db	0
  2133  007CC6                     STR_63:
  2134  007CC6  28                 	db	40
  2135  007CC7  6E                 	db	110	;'n'
  2136  007CC8  75                 	db	117	;'u'
  2137  007CC9  6C                 	db	108	;'l'
  2138  007CCA  6C                 	db	108	;'l'
  2139  007CCB  29                 	db	41
  2140  007CCC  00                 	db	0
  2141  007CCD                     STR_27:
  2142  007CCD  41                 	db	65	;'A'
  2143  007CCE  4C                 	db	76	;'L'
  2144  007CCF  52                 	db	82	;'R'
  2145  007CD0  45                 	db	69	;'E'
  2146  007CD1  41                 	db	65	;'A'
  2147  007CD2  59                 	db	89	;'Y'
  2148  007CD3  00                 	db	0
  2149  007CD4                     STR_62:
  2150  007CD4  48                 	db	72	;'H'
  2151  007CD5  65                 	db	101	;'e'
  2152  007CD6  6C                 	db	108	;'l'
  2153  007CD7  6C                 	db	108	;'l'
  2154  007CD8  6F                 	db	111	;'o'
  2155  007CD9  00                 	db	0
  2156  007CDA                     STR_8:
  2157  007CDA  72                 	db	114	;'r'
  2158  007CDB  65                 	db	101	;'e'
  2159  007CDC  61                 	db	97	;'a'
  2160  007CDD  64                 	db	100	;'d'
  2161  007CDE  79                 	db	121	;'y'
  2162  007CDF  00                 	db	0
  2163  007CE0                     STR_4:
  2164  007CE0  41                 	db	65	;'A'
  2165  007CE1  54                 	db	84	;'T'
  2166  007CE2  0D                 	db	13
  2167  007CE3  0A                 	db	10
  2168  007CE4  00                 	db	0
  2169  007CE5                     STR_58:
  2170  007CE5  35                 	db	53	;'5'
  2171  007CE6  30                 	db	48	;'0'
  2172  007CE7  30                 	db	48	;'0'
  2173  007CE8  30                 	db	48	;'0'
  2174  007CE9  00                 	db	0
  2175  007CEA                     STR_38:
  2176  007CEA  4B                 	db	75	;'K'
  2177  007CEB  45                 	db	69	;'E'
  2178  007CEC  4E                 	db	78	;'N'
  2179  007CED  00                 	db	0
  2180  007CEE                     STR_21:
  2181  007CEE  54                 	db	84	;'T'
  2182  007CEF  43                 	db	67	;'C'
  2183  007CF0  50                 	db	80	;'P'
  2184  007CF1  00                 	db	0
  2185  007CF2                     STR_23:
  2186  007CF2  55                 	db	85	;'U'
  2187  007CF3  44                 	db	68	;'D'
  2188  007CF4  50                 	db	80	;'P'
  2189  007CF5  00                 	db	0
  2190  007CF6  3E                 	db	62	;'>'
  2191  007CF7  20                 	db	32
  2192  007CF8  00                 	db	0
  2193  007CF9                     STR_60:
  2194  007CF9  00                 	db	0
  2195  007CFA  00                 	db	0
  2196  007CFB                     STR_59:
  2197  007CFB  21                 	db	33
  2198  007CFC  00                 	db	0
  2199  007CFD  34                 	db	52	;'4'
  2200  007CFE  00                 	db	0
  2201  0000                     
  2202                           ; #config settings
  2203  007CFF  00                 	db	0	; dummy byte at the end
  2204  0000                     
  2205                           	psect	cinit
  2206  0013E8                     __pcinit:
  2207                           	opt stack 0
  2208  0013E8                     start_initialization:
  2209                           	opt stack 0
  2210  0013E8                     __initialization:
  2211                           	opt stack 0
  2212                           
  2213                           ; Initialize objects allocated to COMRAM (8 bytes)
  2214                           ; load TBLPTR registers with __pidataCOMRAM
  2215  0013E8  0E66               	movlw	low __pidataCOMRAM
  2216  0013EA  6EF6               	movwf	tblptrl,c
  2217  0013EC  0E19               	movlw	high __pidataCOMRAM
  2218  0013EE  6EF7               	movwf	tblptrh,c
  2219  0013F0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2220  0013F2  6EF8               	movwf	tblptru,c
  2221  0013F4  EE00  F05D         	lfsr	0,__pdataCOMRAM
  2222  0013F8  EE10 F008          	lfsr	1,8
  2223  0013FC                     copy_data0:
  2224  0013FC  0009               	tblrd		*+
  2225  0013FE  CFF5 FFEE          	movff	tablat,postinc0
  2226  001402  50E5               	movf	postdec1,w,c
  2227  001404  50E1               	movf	fsr1l,w,c
  2228  001406  E1FA               	bnz	copy_data0
  2229                           
  2230                           ; Clear objects allocated to BANK3 (100 bytes)
  2231  001408  EE03  F000         	lfsr	0,__pbssBANK3
  2232  00140C  0E64               	movlw	100
  2233  00140E                     clear_0:
  2234  00140E  6AEE               	clrf	postinc0,c
  2235  001410  06E8               	decf	wreg,f,c
  2236  001412  E1FD               	bnz	clear_0
  2237                           
  2238                           ; Clear objects allocated to BANK2 (206 bytes)
  2239  001414  EE02  F000         	lfsr	0,__pbssBANK2
  2240  001418  0ECE               	movlw	206
  2241  00141A                     clear_1:
  2242  00141A  6AEE               	clrf	postinc0,c
  2243  00141C  06E8               	decf	wreg,f,c
  2244  00141E  E1FD               	bnz	clear_1
  2245                           
  2246                           ; Clear objects allocated to COMRAM (39 bytes)
  2247  001420  EE00  F036         	lfsr	0,__pbssCOMRAM
  2248  001424  0E27               	movlw	39
  2249  001426                     clear_2:
  2250  001426  6AEE               	clrf	postinc0,c
  2251  001428  06E8               	decf	wreg,f,c
  2252  00142A  E1FD               	bnz	clear_2
  2253  00142C                     end_of_initialization:
  2254                           	opt stack 0
  2255  00142C                     __end_of__initialization:
  2256                           	opt stack 0
  2257  00142C  9065               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2258  00142E  9265               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2259  001430  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2260  001432  6EF8               	movwf	tblptru,c
  2261  001434  0100               	movlb	0
  2262  001436  EF56  F008         	goto	_main	;jump to C main() function
  2263                           tblptru	equ	0xFF8
  2264                           tblptrh	equ	0xFF7
  2265                           tblptrl	equ	0xFF6
  2266                           tablat	equ	0xFF5
  2267                           postinc0	equ	0xFEE
  2268                           wreg	equ	0xFE8
  2269                           postdec1	equ	0xFE5
  2270                           fsr1l	equ	0xFE1
  2271                           
  2272                           	psect	bssCOMRAM
  2273  000036                     __pbssCOMRAM:
  2274                           	opt stack 0
  2275  000036                     _test:
  2276                           	opt stack 0
  2277  000036                     	ds	30
  2278  000054                     _s:
  2279                           	opt stack 0
  2280  000054                     	ds	2
  2281  000056                     _IP:
  2282                           	opt stack 0
  2283  000056                     	ds	2
  2284  000058                     _test_index:
  2285                           	opt stack 0
  2286  000058                     	ds	2
  2287  00005A                     _work_flag:
  2288                           	opt stack 0
  2289  00005A                     	ds	1
  2290  00005B                     _write:
  2291                           	opt stack 0
  2292  00005B                     	ds	1
  2293  00005C                     _count:
  2294                           	opt stack 0
  2295  00005C                     	ds	1
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           postinc0	equ	0xFEE
  2301                           wreg	equ	0xFE8
  2302                           postdec1	equ	0xFE5
  2303                           fsr1l	equ	0xFE1
  2304                           
  2305                           	psect	dataCOMRAM
  2306  00005D                     __pdataCOMRAM:
  2307                           	opt stack 0
  2308  00005D                     LCD_CreateFont@F3803:
  2309                           	opt stack 0
  2310  00005D                     	ds	8
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1l	equ	0xFE1
  2319                           
  2320                           	psect	bssBANK2
  2321  000200                     __pbssBANK2:
  2322                           	opt stack 0
  2323  000200                     _strPc_Fram_Record:
  2324                           	opt stack 0
  2325  000200                     	ds	52
  2326  000234                     _str1_1esp8266:
  2327                           	opt stack 0
  2328  000234                     	ds	51
  2329  000267                     _strPc1_1_Fram_Record:
  2330                           	opt stack 0
  2331  000267                     	ds	51
  2332  00029A                     _strEsp8266_Fram_Record:
  2333                           	opt stack 0
  2334  00029A                     	ds	52
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           postinc0	equ	0xFEE
  2340                           wreg	equ	0xFE8
  2341                           postdec1	equ	0xFE5
  2342                           fsr1l	equ	0xFE1
  2343                           
  2344                           	psect	bssBANK3
  2345  000300                     __pbssBANK3:
  2346                           	opt stack 0
  2347  000300                     ESP8266_Link_Server@F4048:
  2348                           	opt stack 0
  2349  000300                     	ds	100
  2350                           tblptru	equ	0xFF8
  2351                           tblptrh	equ	0xFF7
  2352                           tblptrl	equ	0xFF6
  2353                           tablat	equ	0xFF5
  2354                           postinc0	equ	0xFEE
  2355                           wreg	equ	0xFE8
  2356                           postdec1	equ	0xFE5
  2357                           fsr1l	equ	0xFE1
  2358                           
  2359                           	psect	cstackBANK1
  2360  000100                     __pcstackBANK1:
  2361                           	opt stack 0
  2362  000100                     ESP8266_JoinAP@cCmd:
  2363                           	opt stack 0
  2364  000100                     ESP8266_Link_Server@cCmd:
  2365                           	opt stack 0
  2366                           
  2367                           ; 120 bytes @ 0x0
  2368  000100                     	ds	120
  2369  000178                     ESP8266_Link_Server@cStr:
  2370                           	opt stack 0
  2371                           
  2372                           ; 100 bytes @ 0x78
  2373  000178                     	ds	100
  2374  0001DC                     ESP8266_Link_Server@enumE:
  2375                           	opt stack 0
  2376                           
  2377                           ; 1 bytes @ 0xDC
  2378  0001DC                     	ds	1
  2379                           tblptru	equ	0xFF8
  2380                           tblptrh	equ	0xFF7
  2381                           tblptrl	equ	0xFF6
  2382                           tablat	equ	0xFF5
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           postdec1	equ	0xFE5
  2386                           fsr1l	equ	0xFE1
  2387                           
  2388                           	psect	cstackBANK0
  2389  000080                     __pcstackBANK0:
  2390                           	opt stack 0
  2391  000080                     sprintf@idx:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x0
  2395  000080                     	ds	1
  2396  000081                     _sprintf$1439:
  2397                           	opt stack 0
  2398                           
  2399                           ; 2 bytes @ 0x1
  2400  000081                     	ds	2
  2401  000083                     _sprintf$1440:
  2402                           	opt stack 0
  2403                           
  2404                           ; 2 bytes @ 0x3
  2405  000083                     	ds	2
  2406  000085                     _sprintf$1446:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x5
  2410  000085                     	ds	2
  2411  000087                     sprintf@cp:
  2412                           	opt stack 0
  2413                           
  2414                           ; 2 bytes @ 0x7
  2415  000087                     	ds	2
  2416  000089                     sprintf@len:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x9
  2420  000089                     	ds	2
  2421  00008B                     sprintf@ap:
  2422                           	opt stack 0
  2423                           
  2424                           ; 2 bytes @ 0xB
  2425  00008B                     	ds	2
  2426  00008D                     sprintf@val:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0xD
  2430  00008D                     	ds	2
  2431  00008F                     sprintf@prec:
  2432                           	opt stack 0
  2433                           
  2434                           ; 1 bytes @ 0xF
  2435  00008F                     	ds	1
  2436  000090                     sprintf@width:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x10
  2440  000090                     	ds	2
  2441  000092                     sprintf@c:
  2442                           	opt stack 0
  2443                           
  2444                           ; 1 bytes @ 0x12
  2445  000092                     	ds	1
  2446  000093                     sprintf@flag:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x13
  2450  000093                     	ds	2
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           postinc0	equ	0xFEE
  2456                           wreg	equ	0xFE8
  2457                           postdec1	equ	0xFE5
  2458                           fsr1l	equ	0xFE1
  2459                           
  2460                           	psect	cstackCOMRAM
  2461  000001                     __pcstackCOMRAM:
  2462                           	opt stack 0
  2463  000001                     ??_time_adc:
  2464  000001                     
  2465                           ; 1 bytes @ 0x0
  2466  000001                     	ds	16
  2467  000011                     time_adc@ch:
  2468                           	opt stack 0
  2469                           
  2470                           ; 1 bytes @ 0x10
  2471  000011                     	ds	1
  2472  000012                     ??_Delay10KTCYx:
  2473  000012                     ??_isdigit:
  2474  000012                     ?_strlen:
  2475                           	opt stack 0
  2476  000012                     ?_strchr:
  2477                           	opt stack 0
  2478  000012                     ?___wmul:
  2479                           	opt stack 0
  2480  000012                     ?___lwdiv:
  2481                           	opt stack 0
  2482  000012                     LCDWriteNibble@rs:
  2483                           	opt stack 0
  2484  000012                     Delay10TCYx@unit:
  2485                           	opt stack 0
  2486  000012                     Delay1TCYx@unit:
  2487                           	opt stack 0
  2488  000012                     ESP8266_Uart@cmd:
  2489                           	opt stack 0
  2490  000012                     ___wmul@multiplier:
  2491                           	opt stack 0
  2492  000012                     ___lwdiv@dividend:
  2493                           	opt stack 0
  2494  000012                     memset@p1:
  2495                           	opt stack 0
  2496  000012                     strchr@ptr:
  2497                           	opt stack 0
  2498  000012                     strlen@s:
  2499                           	opt stack 0
  2500                           
  2501                           ; 2 bytes @ 0x11
  2502  000012                     	ds	1
  2503  000013                     LCDWriteNibble@ch:
  2504                           	opt stack 0
  2505  000013                     Delay10KTCYx@unit:
  2506                           	opt stack 0
  2507  000013                     _isdigit$1676:
  2508                           	opt stack 0
  2509  000013                     delay_us@us:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x12
  2513  000013                     	ds	1
  2514  000014                     ??_strlen:
  2515  000014                     ??_ESP8266_Uart:
  2516  000014                     isdigit@c:
  2517                           	opt stack 0
  2518  000014                     delay_ms@ms:
  2519                           	opt stack 0
  2520  000014                     ___wmul@multiplicand:
  2521                           	opt stack 0
  2522  000014                     ___lwdiv@divisor:
  2523                           	opt stack 0
  2524  000014                     memset@c:
  2525                           	opt stack 0
  2526  000014                     strchr@chr:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x13
  2530  000014                     	ds	1
  2531  000015                     ??_IIC_Send_Byte:
  2532  000015                     IIC_Wait_Ack@ucErrTime:
  2533                           	opt stack 0
  2534                           
  2535                           ; 1 bytes @ 0x14
  2536  000015                     	ds	1
  2537  000016                     LCD_WriteCmd@ch:
  2538                           	opt stack 0
  2539  000016                     LCD_WriteData@ch:
  2540                           	opt stack 0
  2541  000016                     IIC_Send_Byte@txd:
  2542                           	opt stack 0
  2543  000016                     ___lwdiv@counter:
  2544                           	opt stack 0
  2545  000016                     ESP8266_Uart@index:
  2546                           	opt stack 0
  2547  000016                     ___wmul@product:
  2548                           	opt stack 0
  2549  000016                     memset@n:
  2550                           	opt stack 0
  2551  000016                     strlen@cp:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x15
  2555  000016                     	ds	1
  2556  000017                     LCD_GotoXY@ln:
  2557                           	opt stack 0
  2558  000017                     IIC_Send_Byte@t:
  2559                           	opt stack 0
  2560  000017                     LCD_WritetStr@str:
  2561                           	opt stack 0
  2562  000017                     ___lwdiv@quotient:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x16
  2566  000017                     	ds	1
  2567  000018                     ??_LCD_GotoXY:
  2568  000018                     ?_strncmp:
  2569                           	opt stack 0
  2570  000018                     PCA9685_writeOneByte@data:
  2571                           	opt stack 0
  2572  000018                     memset@p:
  2573                           	opt stack 0
  2574  000018                     strncmp@s1:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x17
  2578  000018                     	ds	1
  2579  000019                     ??_LCD_WritetStr:
  2580  000019                     ?___lwmod:
  2581                           	opt stack 0
  2582  000019                     PCA9685_writeOneByte@addr:
  2583                           	opt stack 0
  2584  000019                     ___lwmod@dividend:
  2585                           	opt stack 0
  2586                           
  2587                           ; 2 bytes @ 0x18
  2588  000019                     	ds	1
  2589  00001A                     transmit_finger@HL_Value:
  2590                           	opt stack 0
  2591  00001A                     _LCD_GotoXY$640:
  2592                           	opt stack 0
  2593  00001A                     strncmp@s2:
  2594                           	opt stack 0
  2595                           
  2596                           ; 2 bytes @ 0x19
  2597  00001A                     	ds	1
  2598  00001B                     LCD_WritetStr@i:
  2599                           	opt stack 0
  2600  00001B                     ___lwmod@divisor:
  2601                           	opt stack 0
  2602                           
  2603                           ; 2 bytes @ 0x1A
  2604  00001B                     	ds	1
  2605  00001C                     transmit_finger@finger:
  2606                           	opt stack 0
  2607  00001C                     LCD_GotoXY@pos:
  2608                           	opt stack 0
  2609  00001C                     strncmp@len:
  2610                           	opt stack 0
  2611                           
  2612                           ; 2 bytes @ 0x1B
  2613  00001C                     	ds	1
  2614  00001D                     transmit_finger@Hbyte:
  2615                           	opt stack 0
  2616  00001D                     ___lwmod@counter:
  2617                           	opt stack 0
  2618                           
  2619                           ; 1 bytes @ 0x1C
  2620  00001D                     	ds	1
  2621  00001E                     ??_strncmp:
  2622  00001E                     ?_sprintf:
  2623                           	opt stack 0
  2624  00001E                     transmit_finger@Lbyte:
  2625                           	opt stack 0
  2626  00001E                     sprintf@sp:
  2627                           	opt stack 0
  2628                           
  2629                           ; 2 bytes @ 0x1D
  2630  00001E                     	ds	1
  2631  00001F                     PWMt0PCA@up:
  2632                           	opt stack 0
  2633                           
  2634                           ; 2 bytes @ 0x1E
  2635  00001F                     	ds	1
  2636  000020                     sprintf@f:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x1F
  2640  000020                     	ds	1
  2641  000021                     ?_strstr:
  2642                           	opt stack 0
  2643  000021                     PWMt0PCA@low:
  2644                           	opt stack 0
  2645  000021                     strstr@s1:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x20
  2649  000021                     	ds	2
  2650  000023                     PWMt0PCA@finger:
  2651                           	opt stack 0
  2652  000023                     strstr@s2:
  2653                           	opt stack 0
  2654                           
  2655                           ; 2 bytes @ 0x22
  2656  000023                     	ds	1
  2657  000024                     ADtoPWM@AD:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x23
  2661  000024                     	ds	1
  2662  000025                     ?_ESP8266_ReceiveString:
  2663                           	opt stack 0
  2664  000025                     ESP8266_Cmd@cmd:
  2665                           	opt stack 0
  2666                           
  2667                           ; 2 bytes @ 0x24
  2668  000025                     	ds	1
  2669  000026                     ??_ADtoPWM:
  2670                           
  2671                           ; 1 bytes @ 0x25
  2672  000026                     	ds	1
  2673  000027                     ESP8266_Cmd@reply1:
  2674                           	opt stack 0
  2675  000027                     ESP8266_ReceiveString@pRecStr:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x26
  2679  000027                     	ds	1
  2680  000028                     ??_sprintf:
  2681                           
  2682                           ; 1 bytes @ 0x27
  2683  000028                     	ds	1
  2684  000029                     ESP8266_Cmd@reply2:
  2685                           	opt stack 0
  2686                           
  2687                           ; 2 bytes @ 0x28
  2688  000029                     	ds	1
  2689  00002A                     ADtoPWM@u4:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x29
  2693  00002A                     	ds	1
  2694  00002B                     ESP8266_Cmd@waittime:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x2A
  2698  00002B                     	ds	1
  2699  00002C                     ADtoPWM@w4:
  2700                           	opt stack 0
  2701                           
  2702                           ; 2 bytes @ 0x2B
  2703  00002C                     	ds	1
  2704  00002D                     _ESP8266_Cmd$1210:
  2705                           	opt stack 0
  2706                           
  2707                           ; 1 bytes @ 0x2C
  2708  00002D                     	ds	1
  2709  00002E                     ESP8266_Net_Mode_Choose@MODE:
  2710                           	opt stack 0
  2711  00002E                     ESP8266_JoinAP@pSSID:
  2712                           	opt stack 0
  2713  00002E                     ESP8266_Link_Server@ip:
  2714                           	opt stack 0
  2715                           
  2716                           ; 2 bytes @ 0x2D
  2717  00002E                     	ds	1
  2718  00002F                     
  2719                           ; 1 bytes @ 0x2E
  2720  00002F                     	ds	1
  2721  000030                     ESP8266_JoinAP@pPassWord:
  2722                           	opt stack 0
  2723  000030                     ESP8266_Link_Server@ComNum:
  2724                           	opt stack 0
  2725                           
  2726                           ; 2 bytes @ 0x2F
  2727  000030                     	ds	2
  2728  000032                     ESP8266_Link_Server@id:
  2729                           	opt stack 0
  2730                           
  2731                           ; 2 bytes @ 0x31
  2732  000032                     	ds	2
  2733  000034                     main@temp:
  2734                           	opt stack 0
  2735                           
  2736                           ; 2 bytes @ 0x33
  2737  000034                     	ds	2
  2738                           tblptru	equ	0xFF8
  2739                           tblptrh	equ	0xFF7
  2740                           tblptrl	equ	0xFF6
  2741                           tablat	equ	0xFF5
  2742                           postinc0	equ	0xFEE
  2743                           wreg	equ	0xFE8
  2744                           postdec1	equ	0xFE5
  2745                           fsr1l	equ	0xFE1
  2746                           
  2747 ;;
  2748 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2749 ;;
  2750 ;; *************** function _main *****************
  2751 ;; Defined at:
  2752 ;;		line 153 in file "main.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;		None
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  t              20    0        unsigned char [20]
  2757 ;;  print           5    0        unsigned char [5]
  2758 ;;  temp            2   51[COMRAM] PTR unsigned char 
  2759 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2769 ;;      Params:         0       0       0       0       0       0       0
  2770 ;;      Locals:         2       0       0       0       0       0       0
  2771 ;;      Temps:          0       0       0       0       0       0       0
  2772 ;;      Totals:         2       0       0       0       0       0       0
  2773 ;;Total ram usage:        2 bytes
  2774 ;; Hardware stack levels required when called:    9
  2775 ;; This function calls:
  2776 ;;		_ADtoPWM
  2777 ;;		_ESP8266_ReceiveString
  2778 ;;		_ESP8266_client
  2779 ;;		_GPIO_initial
  2780 ;;		_LCD_GotoXY
  2781 ;;		_LCD_Initialize
  2782 ;;		_LCD_WriteCmd
  2783 ;;		_LCD_WritetStr
  2784 ;;		_PCA9685_init
  2785 ;;		_delay_ms
  2786 ;;		_finger_reset
  2787 ;;		_initial_UART
  2788 ;;		_memset
  2789 ;;		_oclillator_initial
  2790 ;;		_timer_2_initial
  2791 ;;		_timer_intrrupt_initinal
  2792 ;; This function is called by:
  2793 ;;		Startup code after reset
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           	psect	text0
  2798  0010AC                     __ptext0:
  2799                           	opt stack 0
  2800  0010AC                     _main:
  2801                           	opt stack 22
  2802                           
  2803                           ;main.c: 155: oclillator_initial();
  2804                           
  2805                           ;incstack = 0
  2806  0010AC  ECB7  F00C         	call	_oclillator_initial	;wreg free
  2807                           
  2808                           ;main.c: 156: GPIO_initial();
  2809  0010B0  ECA7  F00C         	call	_GPIO_initial	;wreg free
  2810                           
  2811                           ;main.c: 157: PCA9685_init();
  2812  0010B4  EC14  F00C         	call	_PCA9685_init	;wreg free
  2813                           
  2814                           ;main.c: 158: timer_2_initial() ;
  2815  0010B8  EC6A  F00C         	call	_timer_2_initial	;wreg free
  2816                           
  2817                           ;main.c: 159: timer_intrrupt_initinal();
  2818  0010BC  EC97  F00C         	call	_timer_intrrupt_initinal	;wreg free
  2819                           
  2820                           ;main.c: 160: LCD_Initialize();
  2821  0010C0  ECC3  F007         	call	_LCD_Initialize	;wreg free
  2822                           
  2823                           ;main.c: 161: initial_UART();
  2824  0010C4  EC02  F00C         	call	_initial_UART	;wreg free
  2825                           
  2826                           ;main.c: 162: ESP8266_client();
  2827  0010C8  EC02  F007         	call	_ESP8266_client	;wreg free
  2828                           
  2829                           ;main.c: 163: LCD_WriteCmd(0x01);
  2830  0010CC  0E01               	movlw	1
  2831  0010CE  ECE7  F00A         	call	_LCD_WriteCmd
  2832                           
  2833                           ;main.c: 164: LCD_GotoXY(0,0);
  2834  0010D2  0E00               	movlw	0
  2835  0010D4  6E17               	movwf	LCD_GotoXY@ln,c
  2836  0010D6  0E00               	movlw	0
  2837  0010D8  EC8C  F00A         	call	_LCD_GotoXY
  2838                           
  2839                           ;main.c: 165: LCD_WritetStr("Hello");
  2840  0010DC  0ED4               	movlw	low STR_62
  2841  0010DE  6E17               	movwf	LCD_WritetStr@str,c
  2842  0010E0  0E7C               	movlw	high STR_62
  2843  0010E2  6E18               	movwf	LCD_WritetStr@str+1,c
  2844  0010E4  ECCA  F009         	call	_LCD_WritetStr	;wreg free
  2845                           
  2846                           ;main.c: 166: delay_ms ( 3000 );
  2847  0010E8  0E0B               	movlw	11
  2848  0010EA  6E15               	movwf	delay_ms@ms+1,c
  2849  0010EC  0EB8               	movlw	184
  2850  0010EE  6E14               	movwf	delay_ms@ms,c
  2851  0010F0  EC76  F00C         	call	_delay_ms	;wreg free
  2852                           
  2853                           ;main.c: 167: LCD_WriteCmd(0x01);
  2854  0010F4  0E01               	movlw	1
  2855  0010F6  ECE7  F00A         	call	_LCD_WriteCmd
  2856                           
  2857                           ;main.c: 168: finger_reset();
  2858  0010FA  ECBF  F00C         	call	_finger_reset	;wreg free
  2859                           
  2860                           ;main.c: 169: char* temp;
  2861                           ;main.c: 170: char t[20];
  2862                           ;main.c: 171: char print[5];
  2863                           ;main.c: 172: write=0;
  2864  0010FE  0E00               	movlw	0
  2865  001100  6E5B               	movwf	_write,c
  2866                           
  2867                           ;main.c: 174: memset(&(strEsp8266_Fram_Record.Data_RX_BUF[0]), '\0', 50);
  2868  001102  0E9A               	movlw	low _strEsp8266_Fram_Record
  2869  001104  6E12               	movwf	memset@p1,c
  2870  001106  0E02               	movlw	high _strEsp8266_Fram_Record
  2871  001108  6E13               	movwf	memset@p1+1,c
  2872  00110A  0E00               	movlw	0
  2873  00110C  6E15               	movwf	memset@c+1,c
  2874  00110E  0E00               	movlw	0
  2875  001110  6E14               	movwf	memset@c,c
  2876  001112  0E00               	movlw	0
  2877  001114  6E17               	movwf	memset@n+1,c
  2878  001116  0E32               	movlw	50
  2879  001118  6E16               	movwf	memset@n,c
  2880  00111A  EC9B  F00B         	call	_memset	;wreg free
  2881  00111E                     l4503:
  2882                           
  2883                           ;main.c: 176: {
  2884                           ;main.c: 177: temp=ESP8266_ReceiveString();
  2885  00111E  EC0E  F008         	call	_ESP8266_ReceiveString	;wreg free
  2886  001122  C025  F034         	movff	?_ESP8266_ReceiveString,main@temp
  2887  001126  C026  F035         	movff	?_ESP8266_ReceiveString+1,main@temp+1
  2888                           
  2889                           ;main.c: 202: ADtoPWM(temp);
  2890  00112A  C034  F024         	movff	main@temp,ADtoPWM@AD
  2891  00112E  C035  F025         	movff	main@temp+1,ADtoPWM@AD+1
  2892  001132  EC64  F007         	call	_ADtoPWM	;wreg free
  2893  001136  D7F3               	goto	l4503
  2894  001138                     __end_of_main:
  2895                           	opt stack 0
  2896                           tblptru	equ	0xFF8
  2897                           tblptrh	equ	0xFF7
  2898                           tblptrl	equ	0xFF6
  2899                           tablat	equ	0xFF5
  2900                           postinc0	equ	0xFEE
  2901                           wreg	equ	0xFE8
  2902                           postdec1	equ	0xFE5
  2903                           fsr1l	equ	0xFE1
  2904                           
  2905 ;; *************** function _timer_intrrupt_initinal *****************
  2906 ;; Defined at:
  2907 ;;		line 36 in file "harwave/initial.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;                  1    wreg      void 
  2914 ;; Registers used:
  2915 ;;		None
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2921 ;;      Params:         0       0       0       0       0       0       0
  2922 ;;      Locals:         0       0       0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0       0       0
  2924 ;;      Totals:         0       0       0       0       0       0       0
  2925 ;;Total ram usage:        0 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:    1
  2928 ;; This function calls:
  2929 ;;		Nothing
  2930 ;; This function is called by:
  2931 ;;		_main
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	text1
  2936  00192E                     __ptext1:
  2937                           	opt stack 0
  2938  00192E                     _timer_intrrupt_initinal:
  2939                           	opt stack 29
  2940                           
  2941                           ;initial.c: 38: RCONbits.IPEN=1;
  2942                           
  2943                           ;incstack = 0
  2944  00192E  8ED0               	bsf	4048,7,c	;volatile
  2945                           
  2946                           ;initial.c: 39: INTCONbits.GIE=1;
  2947  001930  8EF2               	bsf	intcon,7,c	;volatile
  2948                           
  2949                           ;initial.c: 40: INTCONbits.PEIE=1;
  2950  001932  8CF2               	bsf	intcon,6,c	;volatile
  2951                           
  2952                           ;initial.c: 41: INTCONbits.TMR0IE=0;
  2953  001934  9AF2               	bcf	intcon,5,c	;volatile
  2954                           
  2955                           ;initial.c: 42: INTCONbits.TMR0IF=0;
  2956  001936  94F2               	bcf	intcon,2,c	;volatile
  2957                           
  2958                           ;initial.c: 43: PIE1bits.TMR2IE=1;
  2959  001938  829D               	bsf	3997,1,c	;volatile
  2960                           
  2961                           ;initial.c: 44: PIR1bits.TMR2IF=0;
  2962  00193A  929E               	bcf	3998,1,c	;volatile
  2963  00193C  0012               	return		;funcret
  2964  00193E                     __end_of_timer_intrrupt_initinal:
  2965                           	opt stack 0
  2966                           tblptru	equ	0xFF8
  2967                           tblptrh	equ	0xFF7
  2968                           tblptrl	equ	0xFF6
  2969                           tablat	equ	0xFF5
  2970                           intcon	equ	0xFF2
  2971                           postinc0	equ	0xFEE
  2972                           wreg	equ	0xFE8
  2973                           postdec1	equ	0xFE5
  2974                           fsr1l	equ	0xFE1
  2975                           
  2976 ;; *************** function _timer_2_initial *****************
  2977 ;; Defined at:
  2978 ;;		line 46 in file "harwave/initial.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, status,2
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2992 ;;      Params:         0       0       0       0       0       0       0
  2993 ;;      Locals:         0       0       0       0       0       0       0
  2994 ;;      Temps:          0       0       0       0       0       0       0
  2995 ;;      Totals:         0       0       0       0       0       0       0
  2996 ;;Total ram usage:        0 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    1
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_main
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text2
  3007  0018D4                     __ptext2:
  3008                           	opt stack 0
  3009  0018D4                     _timer_2_initial:
  3010                           	opt stack 29
  3011                           
  3012                           ;initial.c: 48: PR2 = 249;
  3013                           
  3014                           ;incstack = 0
  3015  0018D4  0EF9               	movlw	249
  3016  0018D6  6ECB               	movwf	4043,c	;volatile
  3017                           
  3018                           ;initial.c: 49: T2CONbits.T2OUTPS=0b1001;
  3019  0018D8  50CA               	movf	4042,w,c	;volatile
  3020  0018DA  0B87               	andlw	-121
  3021  0018DC  0948               	iorlw	72
  3022  0018DE  6ECA               	movwf	4042,c	;volatile
  3023                           
  3024                           ;initial.c: 50: T2CONbits.T2CKPS=0b01;
  3025  0018E0  50CA               	movf	4042,w,c	;volatile
  3026  0018E2  0BFC               	andlw	-4
  3027  0018E4  0901               	iorlw	1
  3028  0018E6  6ECA               	movwf	4042,c	;volatile
  3029                           
  3030                           ;initial.c: 51: T2CONbits.TMR2ON=1;
  3031  0018E8  84CA               	bsf	4042,2,c	;volatile
  3032  0018EA  0012               	return		;funcret
  3033  0018EC                     __end_of_timer_2_initial:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           intcon	equ	0xFF2
  3040                           postinc0	equ	0xFEE
  3041                           wreg	equ	0xFE8
  3042                           postdec1	equ	0xFE5
  3043                           fsr1l	equ	0xFE1
  3044                           
  3045 ;; *************** function _oclillator_initial *****************
  3046 ;; Defined at:
  3047 ;;		line 13 in file "harwave/initial.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;		None
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;		None
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		None
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3061 ;;      Params:         0       0       0       0       0       0       0
  3062 ;;      Locals:         0       0       0       0       0       0       0
  3063 ;;      Temps:          0       0       0       0       0       0       0
  3064 ;;      Totals:         0       0       0       0       0       0       0
  3065 ;;Total ram usage:        0 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    1
  3068 ;; This function calls:
  3069 ;;		Nothing
  3070 ;; This function is called by:
  3071 ;;		_main
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text3
  3076  00196E                     __ptext3:
  3077                           	opt stack 0
  3078  00196E                     _oclillator_initial:
  3079                           	opt stack 29
  3080                           
  3081                           ;initial.c: 15: OSCCONbits.IOFS=0;
  3082                           
  3083                           ;incstack = 0
  3084  00196E  94D3               	bcf	4051,2,c	;volatile
  3085                           
  3086                           ;initial.c: 16: OSCCONbits.SCS0=0;
  3087  001970  90D3               	bcf	4051,0,c	;volatile
  3088                           
  3089                           ;initial.c: 17: OSCCONbits.SCS1=0;
  3090  001972  92D3               	bcf	4051,1,c	;volatile
  3091  001974  0012               	return		;funcret
  3092  001976                     __end_of_oclillator_initial:
  3093                           	opt stack 0
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           intcon	equ	0xFF2
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           postdec1	equ	0xFE5
  3102                           fsr1l	equ	0xFE1
  3103                           
  3104 ;; *************** function _memset *****************
  3105 ;; Defined at:
  3106 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memset.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;  p1              2   17[COMRAM] PTR void 
  3109 ;;		 -> strEsp8266_Fram_Record(52), 
  3110 ;;  c               2   19[COMRAM] int 
  3111 ;;  n               2   21[COMRAM] unsigned int 
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  p               2   23[COMRAM] PTR unsigned char 
  3114 ;;		 -> strEsp8266_Fram_Record(52), 
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  2   17[COMRAM] PTR void 
  3117 ;; Registers used:
  3118 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3124 ;;      Params:         6       0       0       0       0       0       0
  3125 ;;      Locals:         2       0       0       0       0       0       0
  3126 ;;      Temps:          0       0       0       0       0       0       0
  3127 ;;      Totals:         8       0       0       0       0       0       0
  3128 ;;Total ram usage:        8 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:    1
  3131 ;; This function calls:
  3132 ;;		Nothing
  3133 ;; This function is called by:
  3134 ;;		_main
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138                           	psect	text4
  3139  001736                     __ptext4:
  3140                           	opt stack 0
  3141  001736                     _memset:
  3142                           	opt stack 29
  3143                           
  3144                           ;incstack = 0
  3145  001736  C012  F018         	movff	memset@p1,memset@p
  3146  00173A  C013  F019         	movff	memset@p1+1,memset@p+1
  3147  00173E  D008               	goto	l3447
  3148  001740                     l3443:
  3149  001740  C018  FFD9         	movff	memset@p,fsr2l
  3150  001744  C019  FFDA         	movff	memset@p+1,fsr2h
  3151  001748  C014  FFDF         	movff	memset@c,indf2
  3152  00174C  4A18               	infsnz	memset@p,f,c
  3153  00174E  2A19               	incf	memset@p+1,f,c
  3154  001750                     l3447:
  3155  001750  0616               	decf	memset@n,f,c
  3156  001752  A0D8               	btfss	status,0,c
  3157  001754  0617               	decf	memset@n+1,f,c
  3158  001756  2816               	incf	memset@n,w,c
  3159  001758  E1F3               	bnz	l3443
  3160  00175A  2817               	incf	memset@n+1,w,c
  3161  00175C  B4D8               	btfsc	status,2,c
  3162  00175E  0012               	return	
  3163  001760  D7EF               	goto	l3443
  3164  001762                     __end_of_memset:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           intcon	equ	0xFF2
  3171                           postinc0	equ	0xFEE
  3172                           wreg	equ	0xFE8
  3173                           postdec1	equ	0xFE5
  3174                           fsr1l	equ	0xFE1
  3175                           indf2	equ	0xFDF
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _initial_UART *****************
  3181 ;; Defined at:
  3182 ;;		line 36 in file "harwave/UART.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;		None
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;		None
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3196 ;;      Params:         0       0       0       0       0       0       0
  3197 ;;      Locals:         0       0       0       0       0       0       0
  3198 ;;      Temps:          0       0       0       0       0       0       0
  3199 ;;      Totals:         0       0       0       0       0       0       0
  3200 ;;Total ram usage:        0 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    1
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_main
  3207 ;; This function uses a non-reentrant model
  3208 ;;
  3209                           
  3210                           	psect	text5
  3211  001804                     __ptext5:
  3212                           	opt stack 0
  3213  001804                     _initial_UART:
  3214                           	opt stack 29
  3215                           
  3216                           ;UART.c: 37: TXSTAbits.SYNC=0;
  3217                           
  3218                           ;incstack = 0
  3219  001804  98AC               	bcf	4012,4,c	;volatile
  3220                           
  3221                           ;UART.c: 38: TXSTAbits.TX9=0;
  3222  001806  9CAC               	bcf	4012,6,c	;volatile
  3223                           
  3224                           ;UART.c: 39: RCSTAbits.SPEN=1;
  3225  001808  8EAB               	bsf	4011,7,c	;volatile
  3226                           
  3227                           ;UART.c: 40: PIE1bits.TX1IE=0;
  3228  00180A  989D               	bcf	3997,4,c	;volatile
  3229                           
  3230                           ;UART.c: 41: TXSTAbits.TXEN=1;
  3231  00180C  8AAC               	bsf	4012,5,c	;volatile
  3232                           
  3233                           ;UART.c: 43: RCONbits.IPEN=1;
  3234  00180E  8ED0               	bsf	4048,7,c	;volatile
  3235                           
  3236                           ;UART.c: 44: INTCONbits.GIE=1;
  3237  001810  8EF2               	bsf	intcon,7,c	;volatile
  3238                           
  3239                           ;UART.c: 45: INTCONbits.PEIE=1;
  3240  001812  8CF2               	bsf	intcon,6,c	;volatile
  3241                           
  3242                           ;UART.c: 47: RCSTAbits.CREN=1;
  3243  001814  88AB               	bsf	4011,4,c	;volatile
  3244                           
  3245                           ;UART.c: 48: PIE1bits.RCIE=1;
  3246  001816  8A9D               	bsf	3997,5,c	;volatile
  3247                           
  3248                           ;UART.c: 49: RCSTAbits.RC9 = 0;
  3249  001818  9CAB               	bcf	4011,6,c	;volatile
  3250                           
  3251                           ;UART.c: 50: TXSTAbits.BRGH=1;
  3252  00181A  84AC               	bsf	4012,2,c	;volatile
  3253                           
  3254                           ;UART.c: 51: BAUDCONbits.BRG16=1;
  3255  00181C  86B8               	bsf	4024,3,c	;volatile
  3256                           
  3257                           ;UART.c: 52: SPBRGH=0;
  3258  00181E  0E00               	movlw	0
  3259  001820  6EB0               	movwf	4016,c	;volatile
  3260                           
  3261                           ;UART.c: 53: SPBRG=86;
  3262  001822  0E56               	movlw	86
  3263  001824  6EAF               	movwf	4015,c	;volatile
  3264  001826  0012               	return		;funcret
  3265  001828                     __end_of_initial_UART:
  3266                           	opt stack 0
  3267                           tblptru	equ	0xFF8
  3268                           tblptrh	equ	0xFF7
  3269                           tblptrl	equ	0xFF6
  3270                           tablat	equ	0xFF5
  3271                           intcon	equ	0xFF2
  3272                           postinc0	equ	0xFEE
  3273                           wreg	equ	0xFE8
  3274                           postdec1	equ	0xFE5
  3275                           fsr1l	equ	0xFE1
  3276                           indf2	equ	0xFDF
  3277                           fsr2h	equ	0xFDA
  3278                           fsr2l	equ	0xFD9
  3279                           status	equ	0xFD8
  3280                           
  3281 ;; *************** function _finger_reset *****************
  3282 ;; Defined at:
  3283 ;;		line 150 in file "main.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;		None
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;		None
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1    wreg      void 
  3290 ;; Registers used:
  3291 ;;		None
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3297 ;;      Params:         0       0       0       0       0       0       0
  3298 ;;      Locals:         0       0       0       0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0
  3300 ;;      Totals:         0       0       0       0       0       0       0
  3301 ;;Total ram usage:        0 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    1
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_main
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text6
  3312  00197E                     __ptext6:
  3313                           	opt stack 0
  3314  00197E                     _finger_reset:
  3315                           	opt stack 29
  3316                           
  3317                           ;incstack = 0
  3318  00197E  0012               	return		;funcret
  3319  001980                     __end_of_finger_reset:
  3320                           	opt stack 0
  3321                           tblptru	equ	0xFF8
  3322                           tblptrh	equ	0xFF7
  3323                           tblptrl	equ	0xFF6
  3324                           tablat	equ	0xFF5
  3325                           intcon	equ	0xFF2
  3326                           postinc0	equ	0xFEE
  3327                           wreg	equ	0xFE8
  3328                           postdec1	equ	0xFE5
  3329                           fsr1l	equ	0xFE1
  3330                           indf2	equ	0xFDF
  3331                           fsr2h	equ	0xFDA
  3332                           fsr2l	equ	0xFD9
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _PCA9685_init *****************
  3336 ;; Defined at:
  3337 ;;		line 19 in file "harwave/initial.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;		None
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;		None
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      void 
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3351 ;;      Params:         0       0       0       0       0       0       0
  3352 ;;      Locals:         0       0       0       0       0       0       0
  3353 ;;      Temps:          0       0       0       0       0       0       0
  3354 ;;      Totals:         0       0       0       0       0       0       0
  3355 ;;Total ram usage:        0 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    6
  3358 ;; This function calls:
  3359 ;;		_IIC_Init
  3360 ;;		_PCA9685_writeOneByte
  3361 ;; This function is called by:
  3362 ;;		_main
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           	psect	text7
  3367  001828                     __ptext7:
  3368                           	opt stack 0
  3369  001828                     _PCA9685_init:
  3370                           	opt stack 24
  3371                           
  3372                           ;initial.c: 20: IIC_Init();
  3373                           
  3374                           ;incstack = 0
  3375  001828  EC4A  F00C         	call	_IIC_Init	;wreg free
  3376                           
  3377                           ;initial.c: 21: PCA9685_writeOneByte(0x00,0x11);
  3378  00182C  0E11               	movlw	17
  3379  00182E  6E18               	movwf	PCA9685_writeOneByte@data,c
  3380  001830  0E00               	movlw	0
  3381  001832  EC38  F00B         	call	_PCA9685_writeOneByte
  3382                           
  3383                           ;initial.c: 22: PCA9685_writeOneByte(0xFE,(25000000/4096/267)-1);
  3384  001836  0E15               	movlw	21
  3385  001838  6E18               	movwf	PCA9685_writeOneByte@data,c
  3386  00183A  0EFE               	movlw	254
  3387  00183C  EC38  F00B         	call	_PCA9685_writeOneByte
  3388                           
  3389                           ;initial.c: 23: PCA9685_writeOneByte(0x00,0x01);
  3390  001840  0E01               	movlw	1
  3391  001842  6E18               	movwf	PCA9685_writeOneByte@data,c
  3392  001844  0E00               	movlw	0
  3393  001846  EC38  F00B         	call	_PCA9685_writeOneByte
  3394  00184A  0012               	return		;funcret
  3395  00184C                     __end_of_PCA9685_init:
  3396                           	opt stack 0
  3397                           tblptru	equ	0xFF8
  3398                           tblptrh	equ	0xFF7
  3399                           tblptrl	equ	0xFF6
  3400                           tablat	equ	0xFF5
  3401                           intcon	equ	0xFF2
  3402                           postinc0	equ	0xFEE
  3403                           wreg	equ	0xFE8
  3404                           postdec1	equ	0xFE5
  3405                           fsr1l	equ	0xFE1
  3406                           indf2	equ	0xFDF
  3407                           fsr2h	equ	0xFDA
  3408                           fsr2l	equ	0xFD9
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function _IIC_Init *****************
  3412 ;; Defined at:
  3413 ;;		line 5 in file "harwave/softIIC.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;		None
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;		None
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  1    wreg      void 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3427 ;;      Params:         0       0       0       0       0       0       0
  3428 ;;      Locals:         0       0       0       0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0       0       0
  3430 ;;      Totals:         0       0       0       0       0       0       0
  3431 ;;Total ram usage:        0 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    3
  3434 ;; This function calls:
  3435 ;;		_delay_us
  3436 ;; This function is called by:
  3437 ;;		_PCA9685_init
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text8
  3442  001894                     __ptext8:
  3443                           	opt stack 0
  3444  001894                     _IIC_Init:
  3445                           	opt stack 26
  3446                           
  3447                           ;softIIC.c: 8: TRISBbits.TRISB1 = 0;
  3448                           
  3449                           ;incstack = 0
  3450  001894  9293               	bcf	3987,1,c	;volatile
  3451                           
  3452                           ;softIIC.c: 9: TRISBbits.TRISB0 = 0;
  3453  001896  9093               	bcf	3987,0,c	;volatile
  3454                           
  3455                           ;softIIC.c: 12: PORTBbits.RB1 = 1;
  3456  001898  8281               	bsf	3969,1,c	;volatile
  3457                           
  3458                           ;softIIC.c: 13: delay_us(2);
  3459  00189A  0E00               	movlw	0
  3460  00189C  6E14               	movwf	delay_us@us+1,c
  3461  00189E  0E02               	movlw	2
  3462  0018A0  6E13               	movwf	delay_us@us,c
  3463  0018A2  EC8C  F00C         	call	_delay_us	;wreg free
  3464                           
  3465                           ;softIIC.c: 14: PORTBbits.RB0 = 1;
  3466  0018A6  8081               	bsf	3969,0,c	;volatile
  3467                           
  3468                           ;softIIC.c: 15: delay_us(2);
  3469  0018A8  0E00               	movlw	0
  3470  0018AA  6E14               	movwf	delay_us@us+1,c
  3471  0018AC  0E02               	movlw	2
  3472  0018AE  6E13               	movwf	delay_us@us,c
  3473  0018B0  EC8C  F00C         	call	_delay_us	;wreg free
  3474  0018B4  0012               	return		;funcret
  3475  0018B6                     __end_of_IIC_Init:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           intcon	equ	0xFF2
  3482                           postinc0	equ	0xFEE
  3483                           wreg	equ	0xFE8
  3484                           postdec1	equ	0xFE5
  3485                           fsr1l	equ	0xFE1
  3486                           indf2	equ	0xFDF
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function _LCD_WritetStr *****************
  3492 ;; Defined at:
  3493 ;;		line 119 in file "harwave/lcd.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  str             2   22[COMRAM] PTR const unsigned char 
  3496 ;;		 -> STR_62(6), 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  i               1   26[COMRAM] unsigned char 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      void 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3508 ;;      Params:         2       0       0       0       0       0       0
  3509 ;;      Locals:         1       0       0       0       0       0       0
  3510 ;;      Temps:          2       0       0       0       0       0       0
  3511 ;;      Totals:         5       0       0       0       0       0       0
  3512 ;;Total ram usage:        5 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    4
  3515 ;; This function calls:
  3516 ;;		_LCD_WriteData
  3517 ;; This function is called by:
  3518 ;;		_main
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text9
  3523  001394                     __ptext9:
  3524                           	opt stack 0
  3525  001394                     _LCD_WritetStr:
  3526                           	opt stack 26
  3527                           
  3528                           ;lcd.c: 121: u8 i=0;
  3529                           
  3530                           ;incstack = 0
  3531  001394  0E00               	movlw	0
  3532  001396  6E1B               	movwf	LCD_WritetStr@i,c
  3533                           
  3534                           ;lcd.c: 124: while (str[i])
  3535  001398  D013               	goto	l4351
  3536  00139A                     l4347:
  3537                           
  3538                           ;lcd.c: 125: {
  3539                           ;lcd.c: 127: LCD_WriteData(str[i++]);
  3540  00139A  501B               	movf	LCD_WritetStr@i,w,c
  3541  00139C  0D01               	mullw	1
  3542  00139E  C017  F019         	movff	LCD_WritetStr@str,??_LCD_WritetStr
  3543  0013A2  C018  F01A         	movff	LCD_WritetStr@str+1,??_LCD_WritetStr+1
  3544  0013A6  50F3               	movf	prodl,w,c
  3545  0013A8  2619               	addwf	??_LCD_WritetStr,f,c
  3546  0013AA  50F4               	movf	prodh,w,c
  3547  0013AC  221A               	addwfc	??_LCD_WritetStr+1,f,c
  3548  0013AE  C019  FFF6         	movff	??_LCD_WritetStr,tblptrl
  3549  0013B2  C01A  FFF7         	movff	??_LCD_WritetStr+1,tblptrh
  3550  0013B6                     	if	0	;tblptru may be non-zero
  3551  0013B6                     	endif
  3552  0013B6                     	if	0	;tblptru may be non-zero
  3553  0013B6                     	endif
  3554  0013B6  0008               	tblrd		*
  3555  0013B8  50F5               	movf	tablat,w,c
  3556  0013BA  ECC7  F00B         	call	_LCD_WriteData
  3557  0013BE  2A1B               	incf	LCD_WritetStr@i,f,c
  3558  0013C0                     l4351:
  3559  0013C0  501B               	movf	LCD_WritetStr@i,w,c
  3560  0013C2  0D01               	mullw	1
  3561  0013C4  C017  F019         	movff	LCD_WritetStr@str,??_LCD_WritetStr
  3562  0013C8  C018  F01A         	movff	LCD_WritetStr@str+1,??_LCD_WritetStr+1
  3563  0013CC  50F3               	movf	prodl,w,c
  3564  0013CE  2619               	addwf	??_LCD_WritetStr,f,c
  3565  0013D0  50F4               	movf	prodh,w,c
  3566  0013D2  221A               	addwfc	??_LCD_WritetStr+1,f,c
  3567  0013D4  C019  FFF6         	movff	??_LCD_WritetStr,tblptrl
  3568  0013D8  C01A  FFF7         	movff	??_LCD_WritetStr+1,tblptrh
  3569  0013DC                     	if	0	;tblptru may be non-zero
  3570  0013DC                     	endif
  3571  0013DC                     	if	0	;tblptru may be non-zero
  3572  0013DC                     	endif
  3573  0013DC  0008               	tblrd		*
  3574  0013DE  50F5               	movf	tablat,w,c
  3575  0013E0  0900               	iorlw	0
  3576  0013E2  B4D8               	btfsc	status,2,c
  3577  0013E4  0012               	return	
  3578  0013E6  D7D9               	goto	l4347
  3579  0013E8                     __end_of_LCD_WritetStr:
  3580                           	opt stack 0
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           intcon	equ	0xFF2
  3588                           postinc0	equ	0xFEE
  3589                           wreg	equ	0xFE8
  3590                           postdec1	equ	0xFE5
  3591                           fsr1l	equ	0xFE1
  3592                           indf2	equ	0xFDF
  3593                           fsr2h	equ	0xFDA
  3594                           fsr2l	equ	0xFD9
  3595                           status	equ	0xFD8
  3596                           
  3597 ;; *************** function _LCD_WriteData *****************
  3598 ;; Defined at:
  3599 ;;		line 105 in file "harwave/lcd.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  ch              1    wreg     unsigned char 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  ch              1   21[COMRAM] unsigned char 
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  1    wreg      void 
  3606 ;; Registers used:
  3607 ;;		wreg, status,2, status,0, cstack
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3613 ;;      Params:         0       0       0       0       0       0       0
  3614 ;;      Locals:         1       0       0       0       0       0       0
  3615 ;;      Temps:          0       0       0       0       0       0       0
  3616 ;;      Totals:         1       0       0       0       0       0       0
  3617 ;;Total ram usage:        1 bytes
  3618 ;; Hardware stack levels used:    1
  3619 ;; Hardware stack levels required when called:    3
  3620 ;; This function calls:
  3621 ;;		_LCDWriteNibble
  3622 ;;		_delay_ms
  3623 ;; This function is called by:
  3624 ;;		_LCD_WritetStr
  3625 ;;		_LCD_CreateFont
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text10
  3630  00178E                     __ptext10:
  3631                           	opt stack 0
  3632  00178E                     _LCD_WriteData:
  3633                           	opt stack 26
  3634                           
  3635                           ;incstack = 0
  3636                           ;LCD_WriteData@ch stored from wreg
  3637  00178E  6E16               	movwf	LCD_WriteData@ch,c
  3638                           
  3639                           ;lcd.c: 107: delay_ms(5);
  3640  001790  0E00               	movlw	0
  3641  001792  6E15               	movwf	delay_ms@ms+1,c
  3642  001794  0E05               	movlw	5
  3643  001796  6E14               	movwf	delay_ms@ms,c
  3644  001798  EC76  F00C         	call	_delay_ms	;wreg free
  3645                           
  3646                           ;lcd.c: 110: LCDWriteNibble(ch,1);
  3647  00179C  0E01               	movlw	1
  3648  00179E  6E12               	movwf	LCDWriteNibble@rs,c
  3649  0017A0  5016               	movf	LCD_WriteData@ch,w,c
  3650  0017A2  EC84  F00B         	call	_LCDWriteNibble
  3651                           
  3652                           ;lcd.c: 113: ch = (ch << 4);
  3653  0017A6  3816               	swapf	LCD_WriteData@ch,w,c
  3654  0017A8  0BF0               	andlw	240
  3655  0017AA  6E16               	movwf	LCD_WriteData@ch,c
  3656                           
  3657                           ;lcd.c: 116: LCDWriteNibble(ch,1);
  3658  0017AC  0E01               	movlw	1
  3659  0017AE  6E12               	movwf	LCDWriteNibble@rs,c
  3660  0017B0  5016               	movf	LCD_WriteData@ch,w,c
  3661  0017B2  EC84  F00B         	call	_LCDWriteNibble
  3662  0017B6  0012               	return		;funcret
  3663  0017B8                     __end_of_LCD_WriteData:
  3664                           	opt stack 0
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           prodh	equ	0xFF4
  3670                           prodl	equ	0xFF3
  3671                           intcon	equ	0xFF2
  3672                           postinc0	equ	0xFEE
  3673                           wreg	equ	0xFE8
  3674                           postdec1	equ	0xFE5
  3675                           fsr1l	equ	0xFE1
  3676                           indf2	equ	0xFDF
  3677                           fsr2h	equ	0xFDA
  3678                           fsr2l	equ	0xFD9
  3679                           status	equ	0xFD8
  3680                           
  3681 ;; *************** function _LCD_Initialize *****************
  3682 ;; Defined at:
  3683 ;;		line 4 in file "harwave/lcd.c"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;		None
  3686 ;; Auto vars:     Size  Location     Type
  3687 ;;		None
  3688 ;; Return value:  Size  Location     Type
  3689 ;;                  1    wreg      void 
  3690 ;; Registers used:
  3691 ;;		wreg, status,2, status,0, cstack
  3692 ;; Tracked objects:
  3693 ;;		On entry : 0/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3697 ;;      Params:         0       0       0       0       0       0       0
  3698 ;;      Locals:         0       0       0       0       0       0       0
  3699 ;;      Temps:          0       0       0       0       0       0       0
  3700 ;;      Totals:         0       0       0       0       0       0       0
  3701 ;;Total ram usage:        0 bytes
  3702 ;; Hardware stack levels used:    1
  3703 ;; Hardware stack levels required when called:    4
  3704 ;; This function calls:
  3705 ;;		_LCD_WaitBusy
  3706 ;;		_LCD_WriteCmd
  3707 ;;		_delay_ms
  3708 ;; This function is called by:
  3709 ;;		_main
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           	psect	text11
  3714  000F86                     __ptext11:
  3715                           	opt stack 0
  3716  000F86                     _LCD_Initialize:
  3717                           	opt stack 26
  3718                           
  3719                           ;lcd.c: 7: PORTD = 0;
  3720                           
  3721                           ;incstack = 0
  3722  000F86  0E00               	movlw	0
  3723  000F88  6E83               	movwf	3971,c	;volatile
  3724                           
  3725                           ;lcd.c: 9: TRISD = 0;
  3726  000F8A  0E00               	movlw	0
  3727  000F8C  6E95               	movwf	3989,c	;volatile
  3728                           
  3729                           ;lcd.c: 10: delay_ms(15);
  3730  000F8E  0E00               	movlw	0
  3731  000F90  6E15               	movwf	delay_ms@ms+1,c
  3732  000F92  0E0F               	movlw	15
  3733  000F94  6E14               	movwf	delay_ms@ms,c
  3734  000F96  EC76  F00C         	call	_delay_ms	;wreg free
  3735                           
  3736                           ;lcd.c: 12: LCD_WriteCmd(0X30);
  3737  000F9A  0E30               	movlw	48
  3738  000F9C  ECE7  F00A         	call	_LCD_WriteCmd
  3739                           
  3740                           ;lcd.c: 13: delay_ms(5);
  3741  000FA0  0E00               	movlw	0
  3742  000FA2  6E15               	movwf	delay_ms@ms+1,c
  3743  000FA4  0E05               	movlw	5
  3744  000FA6  6E14               	movwf	delay_ms@ms,c
  3745  000FA8  EC76  F00C         	call	_delay_ms	;wreg free
  3746                           
  3747                           ;lcd.c: 15: LCD_WriteCmd(0X30);
  3748  000FAC  0E30               	movlw	48
  3749  000FAE  ECE7  F00A         	call	_LCD_WriteCmd
  3750                           
  3751                           ;lcd.c: 16: delay_ms(5);
  3752  000FB2  0E00               	movlw	0
  3753  000FB4  6E15               	movwf	delay_ms@ms+1,c
  3754  000FB6  0E05               	movlw	5
  3755  000FB8  6E14               	movwf	delay_ms@ms,c
  3756  000FBA  EC76  F00C         	call	_delay_ms	;wreg free
  3757                           
  3758                           ;lcd.c: 18: LCD_WriteCmd(0x32);
  3759  000FBE  0E32               	movlw	50
  3760  000FC0  ECE7  F00A         	call	_LCD_WriteCmd
  3761  000FC4                     l4311:
  3762  000FC4  EC6C  F00B         	call	_LCD_WaitBusy	;wreg free
  3763  000FC8  0900               	iorlw	0
  3764  000FCA  A4D8               	btfss	status,2,c
  3765  000FCC  D7FB               	goto	l4311
  3766                           
  3767                           ;lcd.c: 22: LCD_WriteCmd(0x28);
  3768  000FCE  0E28               	movlw	40
  3769  000FD0  ECE7  F00A         	call	_LCD_WriteCmd
  3770  000FD4                     l4315:
  3771  000FD4  EC6C  F00B         	call	_LCD_WaitBusy	;wreg free
  3772  000FD8  0900               	iorlw	0
  3773  000FDA  A4D8               	btfss	status,2,c
  3774  000FDC  D7FB               	goto	l4315
  3775                           
  3776                           ;lcd.c: 25: LCD_WriteCmd(0b00001011&0b00001101&0b00001110);
  3777  000FDE  0E08               	movlw	8
  3778  000FE0  ECE7  F00A         	call	_LCD_WriteCmd
  3779  000FE4                     l4319:
  3780  000FE4  EC6C  F00B         	call	_LCD_WaitBusy	;wreg free
  3781  000FE8  0900               	iorlw	0
  3782  000FEA  A4D8               	btfss	status,2,c
  3783  000FEC  D7FB               	goto	l4319
  3784                           
  3785                           ;lcd.c: 28: LCD_WriteCmd(0b00001111&0b00001101&0b00001110);
  3786  000FEE  0E0C               	movlw	12
  3787  000FF0  ECE7  F00A         	call	_LCD_WriteCmd
  3788  000FF4                     l4323:
  3789  000FF4  EC6C  F00B         	call	_LCD_WaitBusy	;wreg free
  3790  000FF8  0900               	iorlw	0
  3791  000FFA  A4D8               	btfss	status,2,c
  3792  000FFC  D7FB               	goto	l4323
  3793                           
  3794                           ;lcd.c: 31: LCD_WriteCmd(0x01);
  3795  000FFE  0E01               	movlw	1
  3796  001000  ECE7  F00A         	call	_LCD_WriteCmd
  3797                           
  3798                           ;lcd.c: 34: LCD_WriteCmd(0x06);
  3799  001004  0E06               	movlw	6
  3800  001006  ECE7  F00A         	call	_LCD_WriteCmd
  3801  00100A                     l4327:
  3802  00100A  EC6C  F00B         	call	_LCD_WaitBusy	;wreg free
  3803  00100E  0900               	iorlw	0
  3804  001010  A4D8               	btfss	status,2,c
  3805  001012  D7FB               	goto	l4327
  3806                           
  3807                           ;lcd.c: 37: LCD_WriteCmd(0x01);
  3808  001014  0E01               	movlw	1
  3809  001016  ECE7  F00A         	call	_LCD_WriteCmd
  3810  00101A  0012               	return		;funcret
  3811  00101C                     __end_of_LCD_Initialize:
  3812                           	opt stack 0
  3813                           tblptru	equ	0xFF8
  3814                           tblptrh	equ	0xFF7
  3815                           tblptrl	equ	0xFF6
  3816                           tablat	equ	0xFF5
  3817                           prodh	equ	0xFF4
  3818                           prodl	equ	0xFF3
  3819                           intcon	equ	0xFF2
  3820                           postinc0	equ	0xFEE
  3821                           wreg	equ	0xFE8
  3822                           postdec1	equ	0xFE5
  3823                           fsr1l	equ	0xFE1
  3824                           indf2	equ	0xFDF
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _LCD_WaitBusy *****************
  3830 ;; Defined at:
  3831 ;;		line 138 in file "harwave/lcd.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      unsigned char 
  3838 ;; Registers used:
  3839 ;;		wreg, status,2, status,0, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3845 ;;      Params:         0       0       0       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    3
  3852 ;; This function calls:
  3853 ;;		_delayFor18Tcy
  3854 ;; This function is called by:
  3855 ;;		_LCD_Initialize
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           	psect	text12
  3860  0016D8                     __ptext12:
  3861                           	opt stack 0
  3862  0016D8                     _LCD_WaitBusy:
  3863                           	opt stack 26
  3864                           
  3865                           ;lcd.c: 140: PORTDbits.RD0 = 0;
  3866                           
  3867                           ;incstack = 0
  3868  0016D8  9083               	bcf	3971,0,c	;volatile
  3869                           
  3870                           ;lcd.c: 141: PORTDbits.RD1 = 1;
  3871  0016DA  8283               	bsf	3971,1,c	;volatile
  3872                           
  3873                           ;lcd.c: 142: delayFor18Tcy();
  3874  0016DC  ECBB  F00C         	call	_delayFor18Tcy	;wreg free
  3875                           
  3876                           ;lcd.c: 143: PORTDbits.RD2 = 1;
  3877  0016E0  8483               	bsf	3971,2,c	;volatile
  3878                           
  3879                           ;lcd.c: 144: delayFor18Tcy();
  3880  0016E2  ECBB  F00C         	call	_delayFor18Tcy	;wreg free
  3881                           
  3882                           ;lcd.c: 146: TRISD |= 0x80;
  3883  0016E6  8E95               	bsf	3989,7,c	;volatile
  3884                           
  3885                           ;lcd.c: 147: if(PORTD&0x80)
  3886  0016E8  AE83               	btfss	3971,7,c	;volatile
  3887  0016EA  D007               	goto	l172
  3888                           
  3889                           ;lcd.c: 148: {
  3890                           ;lcd.c: 149: PORTDbits.RD2 = 0;
  3891  0016EC  9483               	bcf	3971,2,c	;volatile
  3892                           
  3893                           ;lcd.c: 150: PORTDbits.RD2 = 1;
  3894  0016EE  8483               	bsf	3971,2,c	;volatile
  3895                           
  3896                           ;lcd.c: 151: PORTDbits.RD2 = 0;
  3897  0016F0  9483               	bcf	3971,2,c	;volatile
  3898                           
  3899                           ;lcd.c: 152: PORTDbits.RD1 = 0;
  3900  0016F2  9283               	bcf	3971,1,c	;volatile
  3901                           
  3902                           ;lcd.c: 153: TRISD &=~(1<<7);
  3903  0016F4  9E95               	bcf	3989,7,c	;volatile
  3904                           
  3905                           ;lcd.c: 154: return 1;
  3906  0016F6  0E01               	movlw	1
  3907                           
  3908                           ;lcd.c: 155: }
  3909  0016F8  0012               	return	
  3910  0016FA                     l172:
  3911                           
  3912                           ;lcd.c: 156: else
  3913                           ;lcd.c: 157: {
  3914                           ;lcd.c: 158: PORTDbits.RD2 = 0;
  3915  0016FA  9483               	bcf	3971,2,c	;volatile
  3916                           
  3917                           ;lcd.c: 159: PORTDbits.RD2 = 1;
  3918  0016FC  8483               	bsf	3971,2,c	;volatile
  3919                           
  3920                           ;lcd.c: 160: PORTDbits.RD2 = 0;
  3921  0016FE  9483               	bcf	3971,2,c	;volatile
  3922                           
  3923                           ;lcd.c: 161: PORTDbits.RD1 = 0;
  3924  001700  9283               	bcf	3971,1,c	;volatile
  3925                           
  3926                           ;lcd.c: 162: TRISD &=~(1<<7);
  3927  001702  9E95               	bcf	3989,7,c	;volatile
  3928                           
  3929                           ;lcd.c: 163: return 0;
  3930  001704  0E00               	movlw	0
  3931  001706  0012               	return	
  3932  001708                     __end_of_LCD_WaitBusy:
  3933                           	opt stack 0
  3934                           tblptru	equ	0xFF8
  3935                           tblptrh	equ	0xFF7
  3936                           tblptrl	equ	0xFF6
  3937                           tablat	equ	0xFF5
  3938                           prodh	equ	0xFF4
  3939                           prodl	equ	0xFF3
  3940                           intcon	equ	0xFF2
  3941                           postinc0	equ	0xFEE
  3942                           wreg	equ	0xFE8
  3943                           postdec1	equ	0xFE5
  3944                           fsr1l	equ	0xFE1
  3945                           indf2	equ	0xFDF
  3946                           fsr2h	equ	0xFDA
  3947                           fsr2l	equ	0xFD9
  3948                           status	equ	0xFD8
  3949                           
  3950 ;; *************** function _delayFor18Tcy *****************
  3951 ;; Defined at:
  3952 ;;		line 18 in file "harwave/mydelay.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;		None
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3966 ;;      Params:         0       0       0       0       0       0       0
  3967 ;;      Locals:         0       0       0       0       0       0       0
  3968 ;;      Temps:          0       0       0       0       0       0       0
  3969 ;;      Totals:         0       0       0       0       0       0       0
  3970 ;;Total ram usage:        0 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    2
  3973 ;; This function calls:
  3974 ;;		_Delay1TCYx
  3975 ;; This function is called by:
  3976 ;;		_LCD_WaitBusy
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text13
  3981  001976                     __ptext13:
  3982                           	opt stack 0
  3983  001976                     _delayFor18Tcy:
  3984                           	opt stack 26
  3985                           
  3986                           ;mydelay.c: 20: Delay1TCYx(18);
  3987                           
  3988                           ;incstack = 0
  3989  001976  0E12               	movlw	18
  3990  001978  ECAE  F00C         	call	_Delay1TCYx
  3991  00197C  0012               	return		;funcret
  3992  00197E                     __end_of_delayFor18Tcy:
  3993                           	opt stack 0
  3994                           tblptru	equ	0xFF8
  3995                           tblptrh	equ	0xFF7
  3996                           tblptrl	equ	0xFF6
  3997                           tablat	equ	0xFF5
  3998                           prodh	equ	0xFF4
  3999                           prodl	equ	0xFF3
  4000                           intcon	equ	0xFF2
  4001                           postinc0	equ	0xFEE
  4002                           wreg	equ	0xFE8
  4003                           postdec1	equ	0xFE5
  4004                           fsr1l	equ	0xFE1
  4005                           indf2	equ	0xFDF
  4006                           fsr2h	equ	0xFDA
  4007                           fsr2l	equ	0xFD9
  4008                           status	equ	0xFD8
  4009                           
  4010 ;; *************** function _Delay1TCYx *****************
  4011 ;; Defined at:
  4012 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d1tcyx.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;  unit            1    wreg     unsigned char 
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;  unit            1   17[COMRAM] unsigned char 
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		wreg
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4026 ;;      Params:         0       0       0       0       0       0       0
  4027 ;;      Locals:         1       0       0       0       0       0       0
  4028 ;;      Temps:          0       0       0       0       0       0       0
  4029 ;;      Totals:         1       0       0       0       0       0       0
  4030 ;;Total ram usage:        1 bytes
  4031 ;; Hardware stack levels used:    1
  4032 ;; Hardware stack levels required when called:    1
  4033 ;; This function calls:
  4034 ;;		Nothing
  4035 ;; This function is called by:
  4036 ;;		_delayFor18Tcy
  4037 ;;		_delay_us1
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	text14
  4042  00195C                     __ptext14:
  4043                           	opt stack 0
  4044  00195C                     _Delay1TCYx:
  4045                           	opt stack 26
  4046                           
  4047                           ;incstack = 0
  4048                           ;Delay1TCYx@unit stored from wreg
  4049  00195C  6E12               	movwf	Delay1TCYx@unit,c
  4050  00195E                     l917:
  4051  00195E  F000               	nop	
  4052  001960  2E12               	decfsz	Delay1TCYx@unit,f,c
  4053  001962  D7FD               	goto	l917
  4054  001964  0012               	return	
  4055  001966                     __end_of_Delay1TCYx:
  4056                           	opt stack 0
  4057                           tblptru	equ	0xFF8
  4058                           tblptrh	equ	0xFF7
  4059                           tblptrl	equ	0xFF6
  4060                           tablat	equ	0xFF5
  4061                           prodh	equ	0xFF4
  4062                           prodl	equ	0xFF3
  4063                           intcon	equ	0xFF2
  4064                           postinc0	equ	0xFEE
  4065                           wreg	equ	0xFE8
  4066                           postdec1	equ	0xFE5
  4067                           fsr1l	equ	0xFE1
  4068                           indf2	equ	0xFDF
  4069                           fsr2h	equ	0xFDA
  4070                           fsr2l	equ	0xFD9
  4071                           status	equ	0xFD8
  4072                           
  4073 ;; *************** function _LCD_GotoXY *****************
  4074 ;; Defined at:
  4075 ;;		line 89 in file "harwave/lcd.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  pos             1    wreg     unsigned char 
  4078 ;;  ln              1   22[COMRAM] unsigned char 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;  pos             1   27[COMRAM] unsigned char 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      void 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2, status,0, cstack
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4090 ;;      Params:         1       0       0       0       0       0       0
  4091 ;;      Locals:         3       0       0       0       0       0       0
  4092 ;;      Temps:          2       0       0       0       0       0       0
  4093 ;;      Totals:         6       0       0       0       0       0       0
  4094 ;;Total ram usage:        6 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    4
  4097 ;; This function calls:
  4098 ;;		_LCD_WriteCmd
  4099 ;;		_delay_ms
  4100 ;; This function is called by:
  4101 ;;		_main
  4102 ;;		_LCD_CreateFont
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           	psect	text15
  4107  001518                     __ptext15:
  4108                           	opt stack 0
  4109  001518                     _LCD_GotoXY:
  4110                           	opt stack 26
  4111                           
  4112                           ;incstack = 0
  4113                           ;LCD_GotoXY@pos stored from wreg
  4114  001518  6E1C               	movwf	LCD_GotoXY@pos,c
  4115                           
  4116                           ;lcd.c: 92: if ((ln > (2-1)) || (pos > (16-1)))
  4117  00151A  0E02               	movlw	2
  4118  00151C  6017               	cpfslt	LCD_GotoXY@ln,c
  4119  00151E  0012               	return	
  4120  001520  0E0F               	movlw	15
  4121  001522  641C               	cpfsgt	LCD_GotoXY@pos,c
  4122  001524  D001               	goto	l4335
  4123  001526  0012               	return	
  4124  001528                     l4335:
  4125                           
  4126                           ;lcd.c: 96: }
  4127                           ;lcd.c: 99: LCD_WriteCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  4128  001528  0417               	decf	LCD_GotoXY@ln,w,c
  4129  00152A  B4D8               	btfsc	status,2,c
  4130  00152C  D002               	goto	l4339
  4131  00152E  0E80               	movlw	128
  4132  001530  D001               	goto	L1
  4133  001532                     l4339:
  4134  001532  0EC0               	movlw	192
  4135  001534                     L1:
  4136  001534  C01C  F018         	movff	LCD_GotoXY@pos,??_LCD_GotoXY
  4137  001538  6A19               	clrf	(??_LCD_GotoXY+1)& (0+255),c
  4138  00153A  1018               	iorwf	??_LCD_GotoXY,w,c
  4139  00153C  6E1A               	movwf	_LCD_GotoXY$640,c
  4140  00153E  5019               	movf	??_LCD_GotoXY+1,w,c
  4141  001540  6E1B               	movwf	_LCD_GotoXY$640+1,c
  4142  001542  501A               	movf	_LCD_GotoXY$640,w,c
  4143  001544  ECE7  F00A         	call	_LCD_WriteCmd
  4144                           
  4145                           ;lcd.c: 102: delay_ms(5);
  4146  001548  0E00               	movlw	0
  4147  00154A  6E15               	movwf	delay_ms@ms+1,c
  4148  00154C  0E05               	movlw	5
  4149  00154E  6E14               	movwf	delay_ms@ms,c
  4150  001550  EC76  F00C         	call	_delay_ms	;wreg free
  4151  001554  0012               	return		;funcret
  4152  001556                     __end_of_LCD_GotoXY:
  4153                           	opt stack 0
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           postinc0	equ	0xFEE
  4162                           wreg	equ	0xFE8
  4163                           postdec1	equ	0xFE5
  4164                           fsr1l	equ	0xFE1
  4165                           indf2	equ	0xFDF
  4166                           fsr2h	equ	0xFDA
  4167                           fsr2l	equ	0xFD9
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function _LCD_WriteCmd *****************
  4171 ;; Defined at:
  4172 ;;		line 74 in file "harwave/lcd.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;  ch              1    wreg     unsigned char 
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;  ch              1   21[COMRAM] unsigned char 
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      void 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0, cstack
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4186 ;;      Params:         0       0       0       0       0       0       0
  4187 ;;      Locals:         1       0       0       0       0       0       0
  4188 ;;      Temps:          0       0       0       0       0       0       0
  4189 ;;      Totals:         1       0       0       0       0       0       0
  4190 ;;Total ram usage:        1 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    3
  4193 ;; This function calls:
  4194 ;;		_LCDWriteNibble
  4195 ;;		_delay_ms
  4196 ;; This function is called by:
  4197 ;;		_LCD_Initialize
  4198 ;;		_LCD_GotoXY
  4199 ;;		_main
  4200 ;;		_LCD_CreateFont
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text16
  4205  0015CE                     __ptext16:
  4206                           	opt stack 0
  4207  0015CE                     _LCD_WriteCmd:
  4208                           	opt stack 27
  4209                           
  4210                           ;incstack = 0
  4211                           ;LCD_WriteCmd@ch stored from wreg
  4212  0015CE  6E16               	movwf	LCD_WriteCmd@ch,c
  4213                           
  4214                           ;lcd.c: 76: delay_ms(5);
  4215  0015D0  0E00               	movlw	0
  4216  0015D2  6E15               	movwf	delay_ms@ms+1,c
  4217  0015D4  0E05               	movlw	5
  4218  0015D6  6E14               	movwf	delay_ms@ms,c
  4219  0015D8  EC76  F00C         	call	_delay_ms	;wreg free
  4220                           
  4221                           ;lcd.c: 79: LCDWriteNibble(ch,0);
  4222  0015DC  0E00               	movlw	0
  4223  0015DE  6E12               	movwf	LCDWriteNibble@rs,c
  4224  0015E0  5016               	movf	LCD_WriteCmd@ch,w,c
  4225  0015E2  EC84  F00B         	call	_LCDWriteNibble
  4226                           
  4227                           ;lcd.c: 82: ch = (ch << 4);
  4228  0015E6  3816               	swapf	LCD_WriteCmd@ch,w,c
  4229  0015E8  0BF0               	andlw	240
  4230  0015EA  6E16               	movwf	LCD_WriteCmd@ch,c
  4231                           
  4232                           ;lcd.c: 84: delay_ms(1);
  4233  0015EC  0E00               	movlw	0
  4234  0015EE  6E15               	movwf	delay_ms@ms+1,c
  4235  0015F0  0E01               	movlw	1
  4236  0015F2  6E14               	movwf	delay_ms@ms,c
  4237  0015F4  EC76  F00C         	call	_delay_ms	;wreg free
  4238                           
  4239                           ;lcd.c: 87: LCDWriteNibble(ch,0);
  4240  0015F8  0E00               	movlw	0
  4241  0015FA  6E12               	movwf	LCDWriteNibble@rs,c
  4242  0015FC  5016               	movf	LCD_WriteCmd@ch,w,c
  4243  0015FE  EC84  F00B         	call	_LCDWriteNibble
  4244  001602  0012               	return		;funcret
  4245  001604                     __end_of_LCD_WriteCmd:
  4246                           	opt stack 0
  4247                           tblptru	equ	0xFF8
  4248                           tblptrh	equ	0xFF7
  4249                           tblptrl	equ	0xFF6
  4250                           tablat	equ	0xFF5
  4251                           prodh	equ	0xFF4
  4252                           prodl	equ	0xFF3
  4253                           intcon	equ	0xFF2
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           postdec1	equ	0xFE5
  4257                           fsr1l	equ	0xFE1
  4258                           indf2	equ	0xFDF
  4259                           fsr2h	equ	0xFDA
  4260                           fsr2l	equ	0xFD9
  4261                           status	equ	0xFD8
  4262                           
  4263 ;; *************** function _LCDWriteNibble *****************
  4264 ;; Defined at:
  4265 ;;		line 41 in file "harwave/lcd.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;  ch              1    wreg     unsigned char 
  4268 ;;  rs              1   17[COMRAM] unsigned char 
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;  ch              1   18[COMRAM] unsigned char 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      void 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4280 ;;      Params:         1       0       0       0       0       0       0
  4281 ;;      Locals:         1       0       0       0       0       0       0
  4282 ;;      Temps:          0       0       0       0       0       0       0
  4283 ;;      Totals:         2       0       0       0       0       0       0
  4284 ;;Total ram usage:        2 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    1
  4287 ;; This function calls:
  4288 ;;		Nothing
  4289 ;; This function is called by:
  4290 ;;		_LCD_WriteCmd
  4291 ;;		_LCD_WriteData
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text17
  4296  001708                     __ptext17:
  4297                           	opt stack 0
  4298  001708                     _LCDWriteNibble:
  4299                           	opt stack 27
  4300                           
  4301                           ;incstack = 0
  4302                           ;LCDWriteNibble@ch stored from wreg
  4303  001708  6E13               	movwf	LCDWriteNibble@ch,c
  4304                           
  4305                           ;lcd.c: 44: ch = (ch >> 4);
  4306  00170A  3813               	swapf	LCDWriteNibble@ch,w,c
  4307  00170C  0B0F               	andlw	15
  4308  00170E  6E13               	movwf	LCDWriteNibble@ch,c
  4309                           
  4310                           ;lcd.c: 47: ch = (ch & 0x0F);
  4311  001710  5013               	movf	LCDWriteNibble@ch,w,c
  4312  001712  0B0F               	andlw	15
  4313  001714  6E13               	movwf	LCDWriteNibble@ch,c
  4314                           
  4315                           ;lcd.c: 50: PORTD = (PORTD & 0x0F);
  4316  001716  5083               	movf	3971,w,c	;volatile
  4317  001718  0B0F               	andlw	15
  4318  00171A  6E83               	movwf	3971,c	;volatile
  4319                           
  4320                           ;lcd.c: 53: PORTD = (PORTD | (ch << 4));
  4321  00171C  3813               	swapf	LCDWriteNibble@ch,w,c
  4322  00171E  0BF0               	andlw	240
  4323  001720  1083               	iorwf	3971,w,c	;volatile
  4324  001722  6E83               	movwf	3971,c	;volatile
  4325                           
  4326                           ;lcd.c: 62: PORTDbits.RD0 = rs;
  4327  001724  B012               	btfsc	LCDWriteNibble@rs,0,c
  4328  001726  D002               	bra	u1935
  4329  001728  9083               	bcf	3971,0,c	;volatile
  4330  00172A  D001               	bra	u1936
  4331  00172C                     u1935:
  4332  00172C  8083               	bsf	3971,0,c	;volatile
  4333  00172E                     u1936:
  4334                           
  4335                           ;lcd.c: 65: PORTDbits.RD1 = 0;
  4336  00172E  9283               	bcf	3971,1,c	;volatile
  4337                           
  4338                           ;lcd.c: 68: PORTDbits.RD2 = 1;
  4339  001730  8483               	bsf	3971,2,c	;volatile
  4340                           
  4341                           ;lcd.c: 71: PORTDbits.RD2 = 0;
  4342  001732  9483               	bcf	3971,2,c	;volatile
  4343  001734  0012               	return		;funcret
  4344  001736                     __end_of_LCDWriteNibble:
  4345                           	opt stack 0
  4346                           tblptru	equ	0xFF8
  4347                           tblptrh	equ	0xFF7
  4348                           tblptrl	equ	0xFF6
  4349                           tablat	equ	0xFF5
  4350                           prodh	equ	0xFF4
  4351                           prodl	equ	0xFF3
  4352                           intcon	equ	0xFF2
  4353                           postinc0	equ	0xFEE
  4354                           wreg	equ	0xFE8
  4355                           postdec1	equ	0xFE5
  4356                           fsr1l	equ	0xFE1
  4357                           indf2	equ	0xFDF
  4358                           fsr2h	equ	0xFDA
  4359                           fsr2l	equ	0xFD9
  4360                           status	equ	0xFD8
  4361                           
  4362 ;; *************** function _GPIO_initial *****************
  4363 ;; Defined at:
  4364 ;;		line 5 in file "harwave/initial.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;		None
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;		None
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      void 
  4371 ;; Registers used:
  4372 ;;		wreg, status,2
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4378 ;;      Params:         0       0       0       0       0       0       0
  4379 ;;      Locals:         0       0       0       0       0       0       0
  4380 ;;      Temps:          0       0       0       0       0       0       0
  4381 ;;      Totals:         0       0       0       0       0       0       0
  4382 ;;Total ram usage:        0 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    1
  4385 ;; This function calls:
  4386 ;;		Nothing
  4387 ;; This function is called by:
  4388 ;;		_main
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text18
  4393  00194E                     __ptext18:
  4394                           	opt stack 0
  4395  00194E                     _GPIO_initial:
  4396                           	opt stack 29
  4397                           
  4398                           ;initial.c: 7: TRISD = 0x00;
  4399                           
  4400                           ;incstack = 0
  4401  00194E  0E00               	movlw	0
  4402  001950  6E95               	movwf	3989,c	;volatile
  4403                           
  4404                           ;initial.c: 8: LATD = 0x00;
  4405  001952  0E00               	movlw	0
  4406  001954  6E8C               	movwf	3980,c	;volatile
  4407                           
  4408                           ;initial.c: 9: TRISAbits.RA0=0;
  4409  001956  9092               	bcf	3986,0,c	;volatile
  4410                           
  4411                           ;initial.c: 10: LATAbits.LA0=0;
  4412  001958  9089               	bcf	3977,0,c	;volatile
  4413  00195A  0012               	return		;funcret
  4414  00195C                     __end_of_GPIO_initial:
  4415                           	opt stack 0
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           prodh	equ	0xFF4
  4421                           prodl	equ	0xFF3
  4422                           intcon	equ	0xFF2
  4423                           postinc0	equ	0xFEE
  4424                           wreg	equ	0xFE8
  4425                           postdec1	equ	0xFE5
  4426                           fsr1l	equ	0xFE1
  4427                           indf2	equ	0xFDF
  4428                           fsr2h	equ	0xFDA
  4429                           fsr2l	equ	0xFD9
  4430                           status	equ	0xFD8
  4431                           
  4432 ;; *************** function _ESP8266_client *****************
  4433 ;; Defined at:
  4434 ;;		line 246 in file "harwave/UART.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4448 ;;      Params:         0       0       0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       0       0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0
  4451 ;;      Totals:         0       0       0       0       0       0       0
  4452 ;;Total ram usage:        0 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:    6
  4455 ;; This function calls:
  4456 ;;		_ESP8266_AT_Test
  4457 ;;		_ESP8266_Cmd
  4458 ;;		_ESP8266_JoinAP
  4459 ;;		_ESP8266_Link_Server
  4460 ;;		_ESP8266_Rst
  4461 ;;		_STA_MODE
  4462 ;; This function is called by:
  4463 ;;		_main
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           	psect	text19
  4468  000E04                     __ptext19:
  4469                           	opt stack 0
  4470  000E04                     _ESP8266_client:
  4471                           	opt stack 24
  4472                           
  4473                           ;UART.c: 247: ESP8266_Rst ();
  4474                           
  4475                           ;incstack = 0
  4476  000E04  ECDC  F00B         	call	_ESP8266_Rst	;wreg free
  4477                           
  4478                           ;UART.c: 248: ESP8266_AT_Test () ;
  4479  000E08  ECB1  F00B         	call	_ESP8266_AT_Test	;wreg free
  4480                           
  4481                           ;UART.c: 249: ESP8266_Cmd ( (void *)"AT+CWQAP\r\n",(void *)"OK", 0 , 500 );
  4482  000E0C  0E7A               	movlw	low STR_49
  4483  000E0E  6E25               	movwf	ESP8266_Cmd@cmd,c
  4484  000E10  0E7C               	movlw	high STR_49
  4485  000E12  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4486  000E14  0EBB               	movlw	low (STR_3+5)
  4487  000E16  6E27               	movwf	ESP8266_Cmd@reply1,c
  4488  000E18  0E7C               	movlw	high (STR_3+5)
  4489  000E1A  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4490  000E1C  0E00               	movlw	0
  4491  000E1E  6E29               	movwf	ESP8266_Cmd@reply2,c
  4492  000E20  0E00               	movlw	0
  4493  000E22  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4494  000E24  0E01               	movlw	1
  4495  000E26  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4496  000E28  0EF4               	movlw	244
  4497  000E2A  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4498  000E2C  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  4499                           
  4500                           ;UART.c: 250: STA_MODE();
  4501  000E30  EC53  F00B         	call	_STA_MODE	;wreg free
  4502  000E34                     l4365:
  4503  000E34  0EEA               	movlw	low STR_38
  4504  000E36  6E2E               	movwf	ESP8266_JoinAP@pSSID,c
  4505  000E38  0E7C               	movlw	high STR_38
  4506  000E3A  6E2F               	movwf	ESP8266_JoinAP@pSSID+1,c
  4507  000E3C  0E85               	movlw	low STR_39
  4508  000E3E  6E30               	movwf	ESP8266_JoinAP@pPassWord,c
  4509  000E40  0E7C               	movlw	high STR_39
  4510  000E42  6E31               	movwf	ESP8266_JoinAP@pPassWord+1,c
  4511  000E44  EC46  F00A         	call	_ESP8266_JoinAP	;wreg free
  4512  000E48  0900               	iorlw	0
  4513  000E4A  B4D8               	btfsc	status,2,c
  4514  000E4C  D7F3               	goto	l4365
  4515  000E4E                     l4367:
  4516  000E4E  0EFF               	movlw	low STR_53
  4517  000E50  6E25               	movwf	ESP8266_Cmd@cmd,c
  4518  000E52  0E7B               	movlw	high STR_53
  4519  000E54  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4520  000E56  0EBB               	movlw	low (STR_3+5)
  4521  000E58  6E27               	movwf	ESP8266_Cmd@reply1,c
  4522  000E5A  0E7C               	movlw	high (STR_3+5)
  4523  000E5C  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4524  000E5E  0E00               	movlw	0
  4525  000E60  6E29               	movwf	ESP8266_Cmd@reply2,c
  4526  000E62  0E00               	movlw	0
  4527  000E64  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4528  000E66  0E01               	movlw	1
  4529  000E68  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4530  000E6A  0EF4               	movlw	244
  4531  000E6C  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4532  000E6E  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  4533  000E72  0900               	iorlw	0
  4534  000E74  B4D8               	btfsc	status,2,c
  4535  000E76  D7EB               	goto	l4367
  4536  000E78                     l4369:
  4537  000E78  0E0E               	movlw	low STR_41
  4538  000E7A  6E25               	movwf	ESP8266_Cmd@cmd,c
  4539  000E7C  0E7C               	movlw	high STR_41
  4540  000E7E  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4541  000E80  0EBB               	movlw	low (STR_3+5)
  4542  000E82  6E27               	movwf	ESP8266_Cmd@reply1,c
  4543  000E84  0E7C               	movlw	high (STR_3+5)
  4544  000E86  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4545  000E88  0E00               	movlw	0
  4546  000E8A  6E29               	movwf	ESP8266_Cmd@reply2,c
  4547  000E8C  0E00               	movlw	0
  4548  000E8E  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4549  000E90  0E01               	movlw	1
  4550  000E92  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4551  000E94  0EF4               	movlw	244
  4552  000E96  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4553  000E98  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  4554  000E9C  0900               	iorlw	0
  4555  000E9E  B4D8               	btfsc	status,2,c
  4556  000EA0  D7EB               	goto	l4369
  4557  000EA2                     l4371:
  4558  000EA2  0E6E               	movlw	low STR_57
  4559  000EA4  6E2E               	movwf	ESP8266_Link_Server@ip,c
  4560  000EA6  0E7C               	movlw	high STR_57
  4561  000EA8  6E2F               	movwf	ESP8266_Link_Server@ip+1,c
  4562  000EAA  0EE5               	movlw	low STR_58
  4563  000EAC  6E30               	movwf	ESP8266_Link_Server@ComNum,c
  4564  000EAE  0E7C               	movlw	high STR_58
  4565  000EB0  6E31               	movwf	ESP8266_Link_Server@ComNum+1,c
  4566  000EB2  0E00               	movlw	0
  4567  000EB4  6E33               	movwf	ESP8266_Link_Server@id+1,c
  4568  000EB6  0E07               	movlw	7
  4569  000EB8  6E32               	movwf	ESP8266_Link_Server@id,c
  4570  000EBA  0E00               	movlw	0
  4571  000EBC  ECA4  F005         	call	_ESP8266_Link_Server
  4572  000EC0  0900               	iorlw	0
  4573  000EC2  A4D8               	btfss	status,2,c
  4574  000EC4  0012               	return	
  4575  000EC6  D7ED               	goto	l4371
  4576  000EC8                     __end_of_ESP8266_client:
  4577                           	opt stack 0
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           prodh	equ	0xFF4
  4583                           prodl	equ	0xFF3
  4584                           intcon	equ	0xFF2
  4585                           postinc0	equ	0xFEE
  4586                           wreg	equ	0xFE8
  4587                           postdec1	equ	0xFE5
  4588                           fsr1l	equ	0xFE1
  4589                           indf2	equ	0xFDF
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594 ;; *************** function _STA_MODE *****************
  4595 ;; Defined at:
  4596 ;;		line 230 in file "harwave/UART.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;		None
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;		None
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4610 ;;      Params:         0       0       0       0       0       0       0
  4611 ;;      Locals:         0       0       0       0       0       0       0
  4612 ;;      Temps:          0       0       0       0       0       0       0
  4613 ;;      Totals:         0       0       0       0       0       0       0
  4614 ;;Total ram usage:        0 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:    5
  4617 ;; This function calls:
  4618 ;;		_ESP8266_Cmd
  4619 ;;		_ESP8266_Net_Mode_Choose
  4620 ;; This function is called by:
  4621 ;;		_ESP8266_client
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text20
  4626  0016A6                     __ptext20:
  4627                           	opt stack 0
  4628  0016A6                     _STA_MODE:
  4629                           	opt stack 24
  4630                           
  4631                           ;UART.c: 231: ESP8266_Net_Mode_Choose ( STA ) ;
  4632                           
  4633                           ;incstack = 0
  4634  0016A6  0E00               	movlw	0
  4635  0016A8  EC9C  F008         	call	_ESP8266_Net_Mode_Choose
  4636  0016AC                     l4283:
  4637  0016AC  0E54               	movlw	low STR_32
  4638  0016AE  6E25               	movwf	ESP8266_Cmd@cmd,c
  4639  0016B0  0E7C               	movlw	high STR_32
  4640  0016B2  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4641  0016B4  0E8F               	movlw	low STR_36
  4642  0016B6  6E27               	movwf	ESP8266_Cmd@reply1,c
  4643  0016B8  0E7C               	movlw	high STR_36
  4644  0016BA  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4645  0016BC  0EBB               	movlw	low (STR_3+5)
  4646  0016BE  6E29               	movwf	ESP8266_Cmd@reply2,c
  4647  0016C0  0E7C               	movlw	high (STR_3+5)
  4648  0016C2  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4649  0016C4  0E00               	movlw	0
  4650  0016C6  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4651  0016C8  0E64               	movlw	100
  4652  0016CA  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4653  0016CC  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  4654  0016D0  0900               	iorlw	0
  4655  0016D2  A4D8               	btfss	status,2,c
  4656  0016D4  0012               	return	
  4657  0016D6  D7EA               	goto	l4283
  4658  0016D8                     __end_of_STA_MODE:
  4659                           	opt stack 0
  4660                           tblptru	equ	0xFF8
  4661                           tblptrh	equ	0xFF7
  4662                           tblptrl	equ	0xFF6
  4663                           tablat	equ	0xFF5
  4664                           prodh	equ	0xFF4
  4665                           prodl	equ	0xFF3
  4666                           intcon	equ	0xFF2
  4667                           postinc0	equ	0xFEE
  4668                           wreg	equ	0xFE8
  4669                           postdec1	equ	0xFE5
  4670                           fsr1l	equ	0xFE1
  4671                           indf2	equ	0xFDF
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _ESP8266_Net_Mode_Choose *****************
  4677 ;; Defined at:
  4678 ;;		line 148 in file "harwave/UART.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  MODE            1    wreg     enum E3772
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  MODE            1   45[COMRAM] enum E3772
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  1    wreg      unsigned char 
  4685 ;; Registers used:
  4686 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4692 ;;      Params:         0       0       0       0       0       0       0
  4693 ;;      Locals:         1       0       0       0       0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0
  4695 ;;      Totals:         1       0       0       0       0       0       0
  4696 ;;Total ram usage:        1 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    4
  4699 ;; This function calls:
  4700 ;;		_ESP8266_Cmd
  4701 ;; This function is called by:
  4702 ;;		_STA_MODE
  4703 ;;		_AP_MODE
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           	psect	text21
  4708  001138                     __ptext21:
  4709                           	opt stack 0
  4710  001138                     _ESP8266_Net_Mode_Choose:
  4711                           	opt stack 24
  4712                           
  4713                           ;incstack = 0
  4714                           ;ESP8266_Net_Mode_Choose@MODE stored from wreg
  4715  001138  6E2E               	movwf	ESP8266_Net_Mode_Choose@MODE,c
  4716                           
  4717                           ;UART.c: 151: switch ( MODE )
  4718  00113A  D039               	goto	l4197
  4719  00113C                     l4183:
  4720                           
  4721                           ;UART.c: 154: return ESP8266_Cmd ( (void*)"AT+CWMODE=1\r\n", (void*)"OK", 0, 2500 );
  4722                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  4723  00113C  0E1C               	movlw	low STR_9
  4724  00113E  6E25               	movwf	ESP8266_Cmd@cmd,c
  4725  001140  0E7C               	movlw	high STR_9
  4726  001142  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4727  001144  0EBB               	movlw	low (STR_3+5)
  4728  001146  6E27               	movwf	ESP8266_Cmd@reply1,c
  4729  001148  0E7C               	movlw	high (STR_3+5)
  4730  00114A  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4731  00114C  0E00               	movlw	0
  4732  00114E  6E29               	movwf	ESP8266_Cmd@reply2,c
  4733  001150  0E00               	movlw	0
  4734  001152  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4735  001154  0E09               	movlw	9
  4736  001156  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4737  001158  0EC4               	movlw	196
  4738  00115A  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4739  00115C  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  4740  001160  0012               	return	
  4741  001162                     l4187:
  4742                           
  4743                           ;UART.c: 157: return ESP8266_Cmd ( (void*)"AT+CWMODE=2\r\n", (void*)"OK", 0, 2500 );
  4744                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  4745  001162  0E38               	movlw	low STR_11
  4746  001164  6E25               	movwf	ESP8266_Cmd@cmd,c
  4747  001166  0E7C               	movlw	high STR_11
  4748  001168  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4749  00116A  0EBB               	movlw	low (STR_3+5)
  4750  00116C  6E27               	movwf	ESP8266_Cmd@reply1,c
  4751  00116E  0E7C               	movlw	high (STR_3+5)
  4752  001170  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4753  001172  0E00               	movlw	0
  4754  001174  6E29               	movwf	ESP8266_Cmd@reply2,c
  4755  001176  0E00               	movlw	0
  4756  001178  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4757  00117A  0E09               	movlw	9
  4758  00117C  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4759  00117E  0EC4               	movlw	196
  4760  001180  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4761  001182  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  4762  001186  0012               	return	
  4763  001188                     l4191:
  4764                           
  4765                           ;UART.c: 160: return ESP8266_Cmd ( (void*)"AT+CWMODE=3\r\n", (void*)"OK", 0, 2500 );
  4766                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  4767  001188  0E46               	movlw	low STR_13
  4768  00118A  6E25               	movwf	ESP8266_Cmd@cmd,c
  4769  00118C  0E7C               	movlw	high STR_13
  4770  00118E  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4771  001190  0EBB               	movlw	low (STR_3+5)
  4772  001192  6E27               	movwf	ESP8266_Cmd@reply1,c
  4773  001194  0E7C               	movlw	high (STR_3+5)
  4774  001196  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4775  001198  0E00               	movlw	0
  4776  00119A  6E29               	movwf	ESP8266_Cmd@reply2,c
  4777  00119C  0E00               	movlw	0
  4778  00119E  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4779  0011A0  0E09               	movlw	9
  4780  0011A2  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4781  0011A4  0EC4               	movlw	196
  4782  0011A6  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4783  0011A8  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  4784                           
  4785                           ;UART.c: 164: }
  4786                           
  4787                           ;UART.c: 163: return 0;
  4788                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  4789                           
  4790                           ;UART.c: 162: default:
  4791  0011AC  0012               	return	
  4792  0011AE                     l4197:
  4793  0011AE  502E               	movf	ESP8266_Net_Mode_Choose@MODE,w,c
  4794                           
  4795                           ; Switch size 1, requested type "space"
  4796                           ; Number of cases is 3, Range of values is 0 to 2
  4797                           ; switch strategies available:
  4798                           ; Name         Instructions Cycles
  4799                           ; simple_byte           10     6 (average)
  4800                           ;	Chosen strategy is simple_byte
  4801  0011B0  0A00               	xorlw	0	; case 0
  4802  0011B2  B4D8               	btfsc	status,2,c
  4803  0011B4  D7C3               	goto	l4183
  4804  0011B6  0A01               	xorlw	1	; case 1
  4805  0011B8  B4D8               	btfsc	status,2,c
  4806  0011BA  D7D3               	goto	l4187
  4807  0011BC  0A03               	xorlw	3	; case 2
  4808  0011BE  A4D8               	btfss	status,2,c
  4809  0011C0  0012               	return	
  4810  0011C2  D7E2               	goto	l4191
  4811  0011C4                     __end_of_ESP8266_Net_Mode_Choose:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           postinc0	equ	0xFEE
  4821                           wreg	equ	0xFE8
  4822                           postdec1	equ	0xFE5
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           fsr2h	equ	0xFDA
  4826                           fsr2l	equ	0xFD9
  4827                           status	equ	0xFD8
  4828                           
  4829 ;; *************** function _ESP8266_Rst *****************
  4830 ;; Defined at:
  4831 ;;		line 135 in file "harwave/UART.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;		None
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;		None
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  1    wreg      void 
  4838 ;; Registers used:
  4839 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4845 ;;      Params:         0       0       0       0       0       0       0
  4846 ;;      Locals:         0       0       0       0       0       0       0
  4847 ;;      Temps:          0       0       0       0       0       0       0
  4848 ;;      Totals:         0       0       0       0       0       0       0
  4849 ;;Total ram usage:        0 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:    4
  4852 ;; This function calls:
  4853 ;;		_ESP8266_Cmd
  4854 ;; This function is called by:
  4855 ;;		_ESP8266_client
  4856 ;;		_ESP8266_Server
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           	psect	text22
  4861  0017B8                     __ptext22:
  4862                           	opt stack 0
  4863  0017B8                     _ESP8266_Rst:
  4864                           	opt stack 25
  4865                           
  4866                           ;UART.c: 138: ESP8266_Cmd ( (void*)"AT+RST\r\n", (void*)"OK", (void*)"ready", 2500 );
  4867                           
  4868                           ;incstack = 0
  4869  0017B8  0EAD               	movlw	low STR_6
  4870  0017BA  6E25               	movwf	ESP8266_Cmd@cmd,c
  4871  0017BC  0E7C               	movlw	high STR_6
  4872  0017BE  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4873  0017C0  0EBB               	movlw	low (STR_3+5)
  4874  0017C2  6E27               	movwf	ESP8266_Cmd@reply1,c
  4875  0017C4  0E7C               	movlw	high (STR_3+5)
  4876  0017C6  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4877  0017C8  0EDA               	movlw	low STR_8
  4878  0017CA  6E29               	movwf	ESP8266_Cmd@reply2,c
  4879  0017CC  0E7C               	movlw	high STR_8
  4880  0017CE  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4881  0017D0  0E09               	movlw	9
  4882  0017D2  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4883  0017D4  0EC4               	movlw	196
  4884  0017D6  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4885  0017D8  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  4886  0017DC  0012               	return		;funcret
  4887  0017DE                     __end_of_ESP8266_Rst:
  4888                           	opt stack 0
  4889                           tblptru	equ	0xFF8
  4890                           tblptrh	equ	0xFF7
  4891                           tblptrl	equ	0xFF6
  4892                           tablat	equ	0xFF5
  4893                           prodh	equ	0xFF4
  4894                           prodl	equ	0xFF3
  4895                           intcon	equ	0xFF2
  4896                           postinc0	equ	0xFEE
  4897                           wreg	equ	0xFE8
  4898                           postdec1	equ	0xFE5
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           fsr2h	equ	0xFDA
  4902                           fsr2l	equ	0xFD9
  4903                           status	equ	0xFD8
  4904                           
  4905 ;; *************** function _ESP8266_Link_Server *****************
  4906 ;; Defined at:
  4907 ;;		line 185 in file "harwave/UART.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;  enumE           1    wreg     enum E3769
  4910 ;;  ip              2   45[COMRAM] PTR unsigned char 
  4911 ;;		 -> STR_57(12), 
  4912 ;;  ComNum          2   47[COMRAM] PTR unsigned char 
  4913 ;;		 -> STR_58(5), 
  4914 ;;  id              2   49[COMRAM] int 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  enumE           1  220[BANK1 ] enum E3769
  4917 ;;  cCmd          120    0[BANK1 ] unsigned char [120]
  4918 ;;  cStr          100  120[BANK1 ] unsigned char [100]
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  1    wreg      unsigned char 
  4921 ;; Registers used:
  4922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4928 ;;      Params:         6       0       0       0       0       0       0
  4929 ;;      Locals:         0       0     221       0       0       0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0
  4931 ;;      Totals:         6       0     221       0       0       0       0
  4932 ;;Total ram usage:      227 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    4
  4935 ;; This function calls:
  4936 ;;		_ESP8266_Cmd
  4937 ;;		_sprintf
  4938 ;; This function is called by:
  4939 ;;		_ESP8266_client
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text23
  4944  000B48                     __ptext23:
  4945                           	opt stack 0
  4946  000B48                     _ESP8266_Link_Server:
  4947                           	opt stack 25
  4948                           
  4949                           ;incstack = 0
  4950                           ;ESP8266_Link_Server@enumE stored from wreg
  4951  000B48  0101               	movlb	1	; () banked
  4952  000B4A  6FDC               	movwf	ESP8266_Link_Server@enumE& (0+255),b
  4953                           
  4954                           ;UART.c: 187: char cStr [100] = { 0 }, cCmd [120];
  4955  000B4C  EE23  F000         	lfsr	2,ESP8266_Link_Server@F4048
  4956  000B50  EE11  F078         	lfsr	1,ESP8266_Link_Server@cStr
  4957  000B54  0E63               	movlw	99
  4958  000B56                     u4141:
  4959  000B56  CFDB FFE3          	movff	plusw2,plusw1
  4960  000B5A  06E8               	decf	wreg,f,c
  4961  000B5C  E2FC               	bc	u4141
  4962                           
  4963                           ;UART.c: 189: switch ( enumE )
  4964  000B5E  D02E               	goto	l4269
  4965  000B60                     l4263:
  4966                           
  4967                           ;UART.c: 192: sprintf ( cStr, (void*)"\"%s\",\"%s\",%s", "TCP", ip, ComNum );
  4968  000B60  0E78               	movlw	low ESP8266_Link_Server@cStr
  4969  000B62  6E1E               	movwf	sprintf@sp,c
  4970  000B64  0E01               	movlw	high ESP8266_Link_Server@cStr
  4971  000B66  6E1F               	movwf	sprintf@sp+1,c
  4972  000B68  0E61               	movlw	low STR_20
  4973  000B6A  6E20               	movwf	sprintf@f,c
  4974  000B6C  0E7C               	movlw	high STR_20
  4975  000B6E  6E21               	movwf	sprintf@f+1,c
  4976  000B70  0EEE               	movlw	low STR_21
  4977  000B72  6E22               	movwf	?_sprintf+4,c
  4978  000B74  0E7C               	movlw	high STR_21
  4979  000B76  6E23               	movwf	?_sprintf+5,c
  4980  000B78  C02E  F024         	movff	ESP8266_Link_Server@ip,?_sprintf+6
  4981  000B7C  C02F  F025         	movff	ESP8266_Link_Server@ip+1,?_sprintf+7
  4982  000B80  C030  F026         	movff	ESP8266_Link_Server@ComNum,?_sprintf+8
  4983  000B84  C031  F027         	movff	ESP8266_Link_Server@ComNum+1,?_sprintf+9
  4984  000B88  EC09  F000         	call	_sprintf	;wreg free
  4985                           
  4986                           ;UART.c: 193: break;
  4987  000B8C  D01F               	goto	l4271
  4988  000B8E                     l4265:
  4989                           
  4990                           ;UART.c: 196: sprintf ( cStr, (void*)"\"%s\",\"%s\",%s", "UDP", ip, ComNum );
  4991  000B8E  0E78               	movlw	low ESP8266_Link_Server@cStr
  4992  000B90  6E1E               	movwf	sprintf@sp,c
  4993  000B92  0E01               	movlw	high ESP8266_Link_Server@cStr
  4994  000B94  6E1F               	movwf	sprintf@sp+1,c
  4995  000B96  0E61               	movlw	low STR_20
  4996  000B98  6E20               	movwf	sprintf@f,c
  4997  000B9A  0E7C               	movlw	high STR_20
  4998  000B9C  6E21               	movwf	sprintf@f+1,c
  4999  000B9E  0EF2               	movlw	low STR_23
  5000  000BA0  6E22               	movwf	?_sprintf+4,c
  5001  000BA2  0E7C               	movlw	high STR_23
  5002  000BA4  6E23               	movwf	?_sprintf+5,c
  5003  000BA6  C02E  F024         	movff	ESP8266_Link_Server@ip,?_sprintf+6
  5004  000BAA  C02F  F025         	movff	ESP8266_Link_Server@ip+1,?_sprintf+7
  5005  000BAE  C030  F026         	movff	ESP8266_Link_Server@ComNum,?_sprintf+8
  5006  000BB2  C031  F027         	movff	ESP8266_Link_Server@ComNum+1,?_sprintf+9
  5007  000BB6  EC09  F000         	call	_sprintf	;wreg free
  5008                           
  5009                           ;UART.c: 201: }
  5010                           
  5011                           ;UART.c: 200: break;
  5012                           
  5013                           ;UART.c: 199: default:
  5014                           
  5015                           ;UART.c: 197: break;
  5016  000BBA  D008               	goto	l4271
  5017  000BBC                     l4269:
  5018  000BBC  0101               	movlb	1	; () banked
  5019  000BBE  51DC               	movf	ESP8266_Link_Server@enumE& (0+255),w,b
  5020                           
  5021                           ; Switch size 1, requested type "space"
  5022                           ; Number of cases is 2, Range of values is 0 to 1
  5023                           ; switch strategies available:
  5024                           ; Name         Instructions Cycles
  5025                           ; simple_byte            7     4 (average)
  5026                           ;	Chosen strategy is simple_byte
  5027  000BC0  0A00               	xorlw	0	; case 0
  5028  000BC2  B4D8               	btfsc	status,2,c
  5029  000BC4  D7CD               	goto	l4263
  5030  000BC6  0A01               	xorlw	1	; case 1
  5031  000BC8  B4D8               	btfsc	status,2,c
  5032  000BCA  D7E1               	goto	l4265
  5033  000BCC                     l4271:
  5034                           
  5035                           ;UART.c: 203: if ( id < 5 )
  5036  000BCC  BE33               	btfsc	ESP8266_Link_Server@id+1,7,c
  5037  000BCE  D006               	goto	l4273
  5038  000BD0  5033               	movf	ESP8266_Link_Server@id+1,w,c
  5039  000BD2  E117               	bnz	l4275
  5040  000BD4  0E05               	movlw	5
  5041  000BD6  5C32               	subwf	ESP8266_Link_Server@id,w,c
  5042  000BD8  B0D8               	btfsc	status,0,c
  5043  000BDA  D013               	goto	l4275
  5044  000BDC                     l4273:
  5045                           
  5046                           ;UART.c: 204: sprintf ( cCmd, (void*)"AT+CIPSTART=%d,%s\r\n", id, cStr);
  5047  000BDC  0E00               	movlw	low ESP8266_Link_Server@cCmd
  5048  000BDE  6E1E               	movwf	sprintf@sp,c
  5049  000BE0  0E01               	movlw	high ESP8266_Link_Server@cCmd
  5050  000BE2  6E1F               	movwf	sprintf@sp+1,c
  5051  000BE4  0E96               	movlw	low STR_24
  5052  000BE6  6E20               	movwf	sprintf@f,c
  5053  000BE8  0E7B               	movlw	high STR_24
  5054  000BEA  6E21               	movwf	sprintf@f+1,c
  5055  000BEC  C032  F022         	movff	ESP8266_Link_Server@id,?_sprintf+4
  5056  000BF0  C033  F023         	movff	ESP8266_Link_Server@id+1,?_sprintf+5
  5057  000BF4  0E78               	movlw	low ESP8266_Link_Server@cStr
  5058  000BF6  6E24               	movwf	?_sprintf+6,c
  5059  000BF8  0E01               	movlw	high ESP8266_Link_Server@cStr
  5060  000BFA  6E25               	movwf	?_sprintf+7,c
  5061  000BFC  EC09  F000         	call	_sprintf	;wreg free
  5062  000C00  D00E               	goto	l4277
  5063  000C02                     l4275:
  5064                           
  5065                           ;UART.c: 206: else
  5066                           ;UART.c: 207: sprintf ( cCmd, (void*)"AT+CIPSTART=%s\r\n", cStr );
  5067  000C02  0E00               	movlw	low ESP8266_Link_Server@cCmd
  5068  000C04  6E1E               	movwf	sprintf@sp,c
  5069  000C06  0E01               	movlw	high ESP8266_Link_Server@cCmd
  5070  000C08  6E1F               	movwf	sprintf@sp+1,c
  5071  000C0A  0EDF               	movlw	low STR_25
  5072  000C0C  6E20               	movwf	sprintf@f,c
  5073  000C0E  0E7B               	movlw	high STR_25
  5074  000C10  6E21               	movwf	sprintf@f+1,c
  5075  000C12  0E78               	movlw	low ESP8266_Link_Server@cStr
  5076  000C14  6E22               	movwf	?_sprintf+4,c
  5077  000C16  0E01               	movlw	high ESP8266_Link_Server@cStr
  5078  000C18  6E23               	movwf	?_sprintf+5,c
  5079  000C1A  EC09  F000         	call	_sprintf	;wreg free
  5080  000C1E                     l4277:
  5081                           
  5082                           ;UART.c: 209: return ESP8266_Cmd ( cCmd, (void*)"CONNECT",(void*)"ALREAY", 90 );
  5083  000C1E  0E00               	movlw	low ESP8266_Link_Server@cCmd
  5084  000C20  6E25               	movwf	ESP8266_Cmd@cmd,c
  5085  000C22  0E01               	movlw	high ESP8266_Link_Server@cCmd
  5086  000C24  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5087  000C26  0EBE               	movlw	low STR_26
  5088  000C28  6E27               	movwf	ESP8266_Cmd@reply1,c
  5089  000C2A  0E7C               	movlw	high STR_26
  5090  000C2C  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5091  000C2E  0ECD               	movlw	low STR_27
  5092  000C30  6E29               	movwf	ESP8266_Cmd@reply2,c
  5093  000C32  0E7C               	movlw	high STR_27
  5094  000C34  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5095  000C36  0E00               	movlw	0
  5096  000C38  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5097  000C3A  0E5A               	movlw	90
  5098  000C3C  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5099  000C3E  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  5100  000C42  0012               	return	
  5101  000C44                     __end_of_ESP8266_Link_Server:
  5102                           	opt stack 0
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           intcon	equ	0xFF2
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           postdec1	equ	0xFE5
  5113                           plusw1	equ	0xFE3
  5114                           fsr1l	equ	0xFE1
  5115                           indf2	equ	0xFDF
  5116                           plusw2	equ	0xFDB
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _ESP8266_JoinAP *****************
  5122 ;; Defined at:
  5123 ;;		line 167 in file "harwave/UART.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  pSSID           2   45[COMRAM] PTR unsigned char 
  5126 ;;		 -> STR_51(4), 
  5127 ;;  pPassWord       2   47[COMRAM] PTR unsigned char 
  5128 ;;		 -> STR_52(10), 
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;  cCmd          120    0[BANK1 ] unsigned char [120]
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  1    wreg      unsigned char 
  5133 ;; Registers used:
  5134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5140 ;;      Params:         4       0       0       0       0       0       0
  5141 ;;      Locals:         0       0     120       0       0       0       0
  5142 ;;      Temps:          0       0       0       0       0       0       0
  5143 ;;      Totals:         4       0     120       0       0       0       0
  5144 ;;Total ram usage:      124 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    4
  5147 ;; This function calls:
  5148 ;;		_ESP8266_Cmd
  5149 ;;		_sprintf
  5150 ;; This function is called by:
  5151 ;;		_ESP8266_client
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text24
  5156  00148C                     __ptext24:
  5157                           	opt stack 0
  5158  00148C                     _ESP8266_JoinAP:
  5159                           	opt stack 25
  5160                           
  5161                           ;UART.c: 169: char cCmd [120];
  5162                           ;UART.c: 171: sprintf ( cCmd, (void*)"AT+CWJAP=\"%s\",\"%s\"\r\n", pSSID, pPassWord );
  5163                           
  5164                           ;incstack = 0
  5165  00148C  0E00               	movlw	low ESP8266_JoinAP@cCmd
  5166  00148E  6E1E               	movwf	sprintf@sp,c
  5167  001490  0E01               	movlw	high ESP8266_JoinAP@cCmd
  5168  001492  6E1F               	movwf	sprintf@sp+1,c
  5169  001494  0E81               	movlw	low STR_15
  5170  001496  6E20               	movwf	sprintf@f,c
  5171  001498  0E7B               	movlw	high STR_15
  5172  00149A  6E21               	movwf	sprintf@f+1,c
  5173  00149C  C02E  F022         	movff	ESP8266_JoinAP@pSSID,?_sprintf+4
  5174  0014A0  C02F  F023         	movff	ESP8266_JoinAP@pSSID+1,?_sprintf+5
  5175  0014A4  C030  F024         	movff	ESP8266_JoinAP@pPassWord,?_sprintf+6
  5176  0014A8  C031  F025         	movff	ESP8266_JoinAP@pPassWord+1,?_sprintf+7
  5177  0014AC  EC09  F000         	call	_sprintf	;wreg free
  5178                           
  5179                           ;UART.c: 173: return ESP8266_Cmd ( cCmd, (void*)"OK", (void*)"CONNECTED", 15000 );
  5180  0014B0  0E00               	movlw	low ESP8266_JoinAP@cCmd
  5181  0014B2  6E25               	movwf	ESP8266_Cmd@cmd,c
  5182  0014B4  0E01               	movlw	high ESP8266_JoinAP@cCmd
  5183  0014B6  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5184  0014B8  0EBB               	movlw	low (STR_3+5)
  5185  0014BA  6E27               	movwf	ESP8266_Cmd@reply1,c
  5186  0014BC  0E7C               	movlw	high (STR_3+5)
  5187  0014BE  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5188  0014C0  0EA3               	movlw	low STR_17
  5189  0014C2  6E29               	movwf	ESP8266_Cmd@reply2,c
  5190  0014C4  0E7C               	movlw	high STR_17
  5191  0014C6  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5192  0014C8  0E3A               	movlw	58
  5193  0014CA  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5194  0014CC  0E98               	movlw	152
  5195  0014CE  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5196  0014D0  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  5197  0014D4  0012               	return	
  5198  0014D6                     __end_of_ESP8266_JoinAP:
  5199                           	opt stack 0
  5200                           tblptru	equ	0xFF8
  5201                           tblptrh	equ	0xFF7
  5202                           tblptrl	equ	0xFF6
  5203                           tablat	equ	0xFF5
  5204                           prodh	equ	0xFF4
  5205                           prodl	equ	0xFF3
  5206                           intcon	equ	0xFF2
  5207                           postinc0	equ	0xFEE
  5208                           wreg	equ	0xFE8
  5209                           postdec1	equ	0xFE5
  5210                           plusw1	equ	0xFE3
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           plusw2	equ	0xFDB
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function _sprintf *****************
  5219 ;; Defined at:
  5220 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  sp              2   29[COMRAM] PTR unsigned char 
  5223 ;;		 -> ESP8266_Link_Server@cCmd(120), ESP8266_Link_Server@cStr(100), ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120
      +), 
  5224 ;;		 -> ESP8266_SendString@cStr(20), 
  5225 ;;  f               2   31[COMRAM] PTR const unsigned char 
  5226 ;;		 -> STR_25(17), STR_24(20), STR_22(13), STR_20(13), 
  5227 ;;		 -> STR_18(26), STR_15(21), STR_1(19), 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  idx             1    0[BANK0 ] unsigned char 
  5230 ;;  tmpval          4    0        struct .
  5231 ;;  flag            2   19[BANK0 ] unsigned short 
  5232 ;;  width           2   16[BANK0 ] int 
  5233 ;;  val             2   13[BANK0 ] unsigned int 
  5234 ;;  ap              2   11[BANK0 ] PTR void [1]
  5235 ;;		 -> ?_sprintf(2), 
  5236 ;;  len             2    9[BANK0 ] unsigned int 
  5237 ;;  cp              2    7[BANK0 ] PTR const unsigned char 
  5238 ;;		 -> STR_63(7), sprintf@c(1), STR_58(5), STR_57(12), 
  5239 ;;		 -> STR_52(10), STR_51(4), STR_40(2), STR_39(10), 
  5240 ;;		 -> STR_38(4), STR_23(4), STR_21(4), ESP8266_Link_Server@cStr(100), 
  5241 ;;  c               1   18[BANK0 ] char 
  5242 ;;  prec            1   15[BANK0 ] char 
  5243 ;; Return value:  Size  Location     Type
  5244 ;;                  2   29[COMRAM] int 
  5245 ;; Registers used:
  5246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5247 ;; Tracked objects:
  5248 ;;		On entry : 0/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5252 ;;      Params:        10       0       0       0       0       0       0
  5253 ;;      Locals:         0      21       0       0       0       0       0
  5254 ;;      Temps:          4       0       0       0       0       0       0
  5255 ;;      Totals:        14      21       0       0       0       0       0
  5256 ;;Total ram usage:       35 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    2
  5259 ;; This function calls:
  5260 ;;		___lwdiv
  5261 ;;		___lwmod
  5262 ;;		___wmul
  5263 ;;		_isdigit
  5264 ;; This function is called by:
  5265 ;;		_ESP8266_JoinAP
  5266 ;;		_ESP8266_Link_Server
  5267 ;;		_ESP8266_SendString
  5268 ;;		_ESP8266_BuildAP
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           	psect	text25
  5273  000012                     __ptext25:
  5274                           	opt stack 0
  5275  000012                     _sprintf:
  5276                           	opt stack 26
  5277                           
  5278                           ;doprnt.c: 494: va_list ap;
  5279                           ;doprnt.c: 499: signed char c;
  5280                           ;doprnt.c: 501: int width;
  5281                           ;doprnt.c: 506: signed char prec;
  5282                           ;doprnt.c: 508: unsigned short flag;
  5283                           ;doprnt.c: 523: union {
  5284                           ;doprnt.c: 524: unsigned long vd;
  5285                           ;doprnt.c: 525: double integ;
  5286                           ;doprnt.c: 526: } tmpval;
  5287                           ;doprnt.c: 528: unsigned int val;
  5288                           ;doprnt.c: 529: unsigned len;
  5289                           ;doprnt.c: 530: const char * cp;
  5290                           ;doprnt.c: 533: *ap = __va_start();
  5291                           
  5292                           ;incstack = 0
  5293  000012  0E22               	movlw	low (?_sprintf+4)
  5294  000014  0100               	movlb	0	; () banked
  5295  000016  6F8B               	movwf	sprintf@ap& (0+255),b
  5296  000018  0E00               	movlw	high (?_sprintf+4)
  5297  00001A  0100               	movlb	0	; () banked
  5298  00001C  6F8C               	movwf	(sprintf@ap+1)& (0+255),b
  5299                           
  5300                           ;doprnt.c: 536: while(c = *f++) {
  5301  00001E  EFFD  F004         	goto	l4175
  5302  000022                     l3821:
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;doprnt.c: 538: if(c != '%')
  5306  000022  0E25               	movlw	37
  5307  000024  0100               	movlb	0	; () banked
  5308  000026  1992               	xorwf	sprintf@c& (0+255),w,b
  5309  000028  B4D8               	btfsc	status,2,c
  5310  00002A  D00A               	goto	l3827
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;doprnt.c: 540: {
  5314                           ;doprnt.c: 541: ((*sp++ = (c)));
  5315  00002C  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5316  000030  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5317  000034  C092  FFDF         	movff	sprintf@c,indf2
  5318                           
  5319                           ; BSR set to: 0
  5320  000038  4A1E               	infsnz	sprintf@sp,f,c
  5321  00003A  2A1F               	incf	sprintf@sp+1,f,c
  5322                           
  5323                           ;doprnt.c: 542: continue;
  5324  00003C  EFFD  F004         	goto	l4175
  5325  000040                     l3827:
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;doprnt.c: 543: }
  5329                           ;doprnt.c: 546: width = 0;
  5330  000040  0E00               	movlw	0
  5331  000042  0100               	movlb	0	; () banked
  5332  000044  6F91               	movwf	(sprintf@width+1)& (0+255),b
  5333  000046  0E00               	movlw	0
  5334  000048  6F90               	movwf	sprintf@width& (0+255),b
  5335                           
  5336                           ;doprnt.c: 548: flag = 0;
  5337  00004A  0E00               	movlw	0
  5338  00004C  0100               	movlb	0	; () banked
  5339  00004E  6F94               	movwf	(sprintf@flag+1)& (0+255),b
  5340  000050  0E00               	movlw	0
  5341  000052  6F93               	movwf	sprintf@flag& (0+255),b
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;doprnt.c: 551: switch(*f) {
  5345                           
  5346                           ;doprnt.c: 550: for(;;) {
  5347  000054  D00D               	goto	l3839
  5348  000056                     l3829:
  5349                           
  5350                           ;doprnt.c: 554: flag |= 0x08;
  5351  000056  0100               	movlb	0	; () banked
  5352  000058  8793               	bsf	sprintf@flag& (0+255),3,b
  5353  00005A  D008               	goto	L4
  5354  00005C                     l3831:
  5355                           
  5356                           ;doprnt.c: 561: flag |= 0x01;
  5357  00005C  0100               	movlb	0	; () banked
  5358  00005E  8193               	bsf	sprintf@flag& (0+255),0,b
  5359  000060  D005               	goto	L4
  5360  000062                     l3833:
  5361                           
  5362                           ;doprnt.c: 574: flag |= 0x800;
  5363  000062  0100               	movlb	0	; () banked
  5364  000064  8794               	bsf	(sprintf@flag+1)& (0+255),3,b
  5365  000066  D002               	goto	L4
  5366  000068                     l3835:
  5367                           
  5368                           ;doprnt.c: 580: flag |= 0x04;
  5369  000068  0100               	movlb	0	; () banked
  5370  00006A  8593               	bsf	sprintf@flag& (0+255),2,b
  5371  00006C                     L4:
  5372                           
  5373                           ;doprnt.c: 581: f++;
  5374  00006C  4A20               	infsnz	sprintf@f,f,c
  5375  00006E  2A21               	incf	sprintf@f+1,f,c
  5376  000070                     l3839:
  5377  000070  C020  FFF6         	movff	sprintf@f,tblptrl
  5378  000074  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5379  000078                     	if	0	;tblptru may be non-zero
  5380  000078                     	endif
  5381  000078                     	if	0	;tblptru may be non-zero
  5382  000078                     	endif
  5383  000078  0008               	tblrd		*
  5384  00007A  50F5               	movf	tablat,w,c
  5385                           
  5386                           ; Switch size 1, requested type "space"
  5387                           ; Number of cases is 4, Range of values is 32 to 48
  5388                           ; switch strategies available:
  5389                           ; Name         Instructions Cycles
  5390                           ; simple_byte           13     7 (average)
  5391                           ;	Chosen strategy is simple_byte
  5392  00007C  0A20               	xorlw	32	; case 32
  5393  00007E  B4D8               	btfsc	status,2,c
  5394  000080  D7ED               	goto	l3831
  5395  000082  0A03               	xorlw	3	; case 35
  5396  000084  B4D8               	btfsc	status,2,c
  5397  000086  D7ED               	goto	l3833
  5398  000088  0A0E               	xorlw	14	; case 45
  5399  00008A  B4D8               	btfsc	status,2,c
  5400  00008C  D7E4               	goto	l3829
  5401  00008E  0A1D               	xorlw	29	; case 48
  5402  000090  B4D8               	btfsc	status,2,c
  5403  000092  D7EA               	goto	l3835
  5404                           
  5405                           ;doprnt.c: 593: if(flag & 0x08)
  5406                           
  5407                           ;doprnt.c: 586: }
  5408                           
  5409                           ;doprnt.c: 585: break;
  5410  000094  0100               	movlb	0	; () banked
  5411  000096  A793               	btfss	sprintf@flag& (0+255),3,b
  5412  000098  D002               	goto	l3843
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;doprnt.c: 594: flag &= ~0x04;
  5416  00009A  0100               	movlb	0	; () banked
  5417  00009C  9593               	bcf	sprintf@flag& (0+255),2,b
  5418  00009E                     l3843:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5422  00009E  C020  FFF6         	movff	sprintf@f,tblptrl
  5423  0000A2  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5424  0000A6                     	if	0	;tblptru may be non-zero
  5425  0000A6                     	endif
  5426  0000A6                     	if	0	;tblptru may be non-zero
  5427  0000A6                     	endif
  5428  0000A6  0008               	tblrd		*
  5429  0000A8  50F5               	movf	tablat,w,c
  5430  0000AA  EC5B  F00C         	call	_isdigit
  5431  0000AE  A0D8               	btfss	status,0,c
  5432  0000B0  D036               	goto	l3855
  5433                           
  5434                           ;doprnt.c: 598: width = 0;
  5435  0000B2  0E00               	movlw	0
  5436  0000B4  0100               	movlb	0	; () banked
  5437  0000B6  6F91               	movwf	(sprintf@width+1)& (0+255),b
  5438  0000B8  0E00               	movlw	0
  5439  0000BA  6F90               	movwf	sprintf@width& (0+255),b
  5440  0000BC                     l3847:
  5441                           
  5442                           ;doprnt.c: 600: width *= 10;
  5443  0000BC  C090  F012         	movff	sprintf@width,___wmul@multiplier
  5444  0000C0  C091  F013         	movff	sprintf@width+1,___wmul@multiplier+1
  5445  0000C4  0E00               	movlw	0
  5446  0000C6  6E15               	movwf	___wmul@multiplicand+1,c
  5447  0000C8  0E0A               	movlw	10
  5448  0000CA  6E14               	movwf	___wmul@multiplicand,c
  5449  0000CC  ECEF  F00B         	call	___wmul	;wreg free
  5450  0000D0  C012  F090         	movff	?___wmul,sprintf@width
  5451  0000D4  C013  F091         	movff	?___wmul+1,sprintf@width+1
  5452                           
  5453                           ;doprnt.c: 601: width += *f++ - '0';
  5454  0000D8  0ED0               	movlw	208
  5455  0000DA  6E28               	movwf	??_sprintf& (0+255),c
  5456  0000DC  0EFF               	movlw	255
  5457  0000DE  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5458  0000E0  C020  FFF6         	movff	sprintf@f,tblptrl
  5459  0000E4  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5460  0000E8                     	if	0	;tblptru may be non-zero
  5461  0000E8                     	endif
  5462  0000E8                     	if	0	;tblptru may be non-zero
  5463  0000E8                     	endif
  5464  0000E8  0008               	tblrd		*
  5465  0000EA  50F5               	movf	tablat,w,c
  5466  0000EC  6E2A               	movwf	(??_sprintf+2)& (0+255),c
  5467  0000EE  6A2B               	clrf	(??_sprintf+3)& (0+255),c
  5468  0000F0  5028               	movf	??_sprintf,w,c
  5469  0000F2  262A               	addwf	??_sprintf+2,f,c
  5470  0000F4  5029               	movf	??_sprintf+1,w,c
  5471  0000F6  222B               	addwfc	??_sprintf+3,f,c
  5472  0000F8  502A               	movf	??_sprintf+2,w,c
  5473  0000FA  0100               	movlb	0	; () banked
  5474  0000FC  2790               	addwf	sprintf@width& (0+255),f,b
  5475  0000FE  502B               	movf	??_sprintf+3,w,c
  5476  000100  0100               	movlb	0	; () banked
  5477  000102  2391               	addwfc	(sprintf@width+1)& (0+255),f,b
  5478                           
  5479                           ; BSR set to: 0
  5480  000104  4A20               	infsnz	sprintf@f,f,c
  5481  000106  2A21               	incf	sprintf@f+1,f,c
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5485  000108  C020  FFF6         	movff	sprintf@f,tblptrl
  5486  00010C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5487  000110                     	if	0	;tblptru may be non-zero
  5488  000110                     	endif
  5489  000110                     	if	0	;tblptru may be non-zero
  5490  000110                     	endif
  5491  000110  0008               	tblrd		*
  5492  000112  50F5               	movf	tablat,w,c
  5493  000114  EC5B  F00C         	call	_isdigit
  5494  000118  A0D8               	btfss	status,0,c
  5495  00011A  D019               	goto	l3863
  5496  00011C  D7CF               	goto	l3847
  5497  00011E                     l3855:
  5498  00011E  C020  FFF6         	movff	sprintf@f,tblptrl
  5499  000122  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5500  000126                     	if	0	;tblptru may be non-zero
  5501  000126                     	endif
  5502  000126                     	if	0	;tblptru may be non-zero
  5503  000126                     	endif
  5504  000126  0008               	tblrd		*
  5505  000128  50F5               	movf	tablat,w,c
  5506  00012A  0A2A               	xorlw	42
  5507  00012C  A4D8               	btfss	status,2,c
  5508  00012E  D00F               	goto	l3863
  5509                           
  5510                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  5511  000130  C08B  FFD9         	movff	sprintf@ap,fsr2l
  5512  000134  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  5513  000138  CFDE F090          	movff	postinc2,sprintf@width
  5514  00013C  CFDD F091          	movff	postdec2,sprintf@width+1
  5515  000140  0E02               	movlw	2
  5516  000142  0100               	movlb	0	; () banked
  5517  000144  278B               	addwf	sprintf@ap& (0+255),f,b
  5518  000146  0E00               	movlw	0
  5519  000148  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;doprnt.c: 606: f++;
  5523  00014A  4A20               	infsnz	sprintf@f,f,c
  5524  00014C  2A21               	incf	sprintf@f+1,f,c
  5525  00014E                     l3863:
  5526                           
  5527                           ;doprnt.c: 608: }
  5528                           ;doprnt.c: 611: if(*f == '.') {
  5529  00014E  C020  FFF6         	movff	sprintf@f,tblptrl
  5530  000152  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5531  000156                     	if	0	;tblptru may be non-zero
  5532  000156                     	endif
  5533  000156                     	if	0	;tblptru may be non-zero
  5534  000156                     	endif
  5535  000156  0008               	tblrd		*
  5536  000158  50F5               	movf	tablat,w,c
  5537  00015A  0A2E               	xorlw	46
  5538  00015C  A4D8               	btfss	status,2,c
  5539  00015E  D03C               	goto	l3883
  5540                           
  5541                           ;doprnt.c: 612: flag |= 0x4000;
  5542  000160  0100               	movlb	0	; () banked
  5543  000162  8D94               	bsf	(sprintf@flag+1)& (0+255),6,b
  5544                           
  5545                           ;doprnt.c: 613: f++;
  5546  000164  4A20               	infsnz	sprintf@f,f,c
  5547  000166  2A21               	incf	sprintf@f+1,f,c
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;doprnt.c: 615: if(*f == '*') {
  5551  000168  C020  FFF6         	movff	sprintf@f,tblptrl
  5552  00016C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5553  000170                     	if	0	;tblptru may be non-zero
  5554  000170                     	endif
  5555  000170                     	if	0	;tblptru may be non-zero
  5556  000170                     	endif
  5557  000170  0008               	tblrd		*
  5558  000172  50F5               	movf	tablat,w,c
  5559  000174  0A2A               	xorlw	42
  5560  000176  A4D8               	btfss	status,2,c
  5561  000178  D00F               	goto	l3875
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  5565  00017A  C08B  FFD9         	movff	sprintf@ap,fsr2l
  5566  00017E  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  5567  000182  50DF               	movf	indf2,w,c
  5568  000184  0100               	movlb	0	; () banked
  5569  000186  6F8F               	movwf	sprintf@prec& (0+255),b
  5570                           
  5571                           ; BSR set to: 0
  5572  000188  0E02               	movlw	2
  5573  00018A  0100               	movlb	0	; () banked
  5574  00018C  278B               	addwf	sprintf@ap& (0+255),f,b
  5575  00018E  0E00               	movlw	0
  5576  000190  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;doprnt.c: 617: f++;
  5580  000192  4A20               	infsnz	sprintf@f,f,c
  5581  000194  2A21               	incf	sprintf@f+1,f,c
  5582                           
  5583                           ;doprnt.c: 618: } else
  5584  000196  D10F               	goto	l3953
  5585  000198                     l3875:
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;doprnt.c: 620: {
  5589                           ;doprnt.c: 621: prec = 0;
  5590  000198  0E00               	movlw	0
  5591  00019A  0100               	movlb	0	; () banked
  5592  00019C  6F8F               	movwf	sprintf@prec& (0+255),b
  5593                           
  5594                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5595  00019E  D011               	goto	l3881
  5596  0001A0                     l3877:
  5597                           
  5598                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5599  0001A0  C020  FFF6         	movff	sprintf@f,tblptrl
  5600  0001A4  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5601  0001A8                     	if	0	;tblptru may be non-zero
  5602  0001A8                     	endif
  5603  0001A8                     	if	0	;tblptru may be non-zero
  5604  0001A8                     	endif
  5605  0001A8  0008               	tblrd		*
  5606  0001AA  CFF5 F028          	movff	tablat,??_sprintf
  5607  0001AE  0100               	movlb	0	; () banked
  5608  0001B0  518F               	movf	sprintf@prec& (0+255),w,b
  5609  0001B2  0D0A               	mullw	10
  5610  0001B4  50F3               	movf	prodl,w,c
  5611  0001B6  2428               	addwf	??_sprintf,w,c
  5612  0001B8  0FD0               	addlw	208
  5613  0001BA  0100               	movlb	0	; () banked
  5614  0001BC  6F8F               	movwf	sprintf@prec& (0+255),b
  5615                           
  5616                           ; BSR set to: 0
  5617  0001BE  4A20               	infsnz	sprintf@f,f,c
  5618  0001C0  2A21               	incf	sprintf@f+1,f,c
  5619  0001C2                     l3881:
  5620                           
  5621                           ; BSR set to: 0
  5622  0001C2  C020  FFF6         	movff	sprintf@f,tblptrl
  5623  0001C6  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5624  0001CA                     	if	0	;tblptru may be non-zero
  5625  0001CA                     	endif
  5626  0001CA                     	if	0	;tblptru may be non-zero
  5627  0001CA                     	endif
  5628  0001CA  0008               	tblrd		*
  5629  0001CC  50F5               	movf	tablat,w,c
  5630  0001CE  EC5B  F00C         	call	_isdigit
  5631  0001D2  A0D8               	btfss	status,0,c
  5632  0001D4  D0F0               	goto	l3953
  5633  0001D6  D7E4               	goto	l3877
  5634  0001D8                     l3883:
  5635                           
  5636                           ;doprnt.c: 626: prec = 0;
  5637  0001D8  0E00               	movlw	0
  5638  0001DA  0100               	movlb	0	; () banked
  5639  0001DC  6F8F               	movwf	sprintf@prec& (0+255),b
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;doprnt.c: 630: }
  5643                           ;doprnt.c: 635: switch(c = *f++) {
  5644  0001DE  D0EB               	goto	l3953
  5645  0001E0                     l3885:
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;doprnt.c: 691: flag |= 0x40;
  5649  0001E0  0100               	movlb	0	; () banked
  5650  0001E2  8D93               	bsf	sprintf@flag& (0+255),6,b
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;doprnt.c: 698: case 'i':
  5654                           ;doprnt.c: 699: break;
  5655                           
  5656                           ; BSR set to: 0
  5657                           
  5658                           ;doprnt.c: 697: case 'd':
  5659                           
  5660                           ;doprnt.c: 693: break;
  5661  0001E4  D112               	goto	l3955
  5662  0001E6                     l3887:
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;doprnt.c: 707: flag |= 0x2000;
  5666  0001E6  0100               	movlb	0	; () banked
  5667  0001E8  8B94               	bsf	(sprintf@flag+1)& (0+255),5,b
  5668  0001EA                     l598:
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;doprnt.c: 714: flag |= 0x20;
  5672  0001EA  0100               	movlb	0	; () banked
  5673  0001EC  8B93               	bsf	sprintf@flag& (0+255),5,b
  5674  0001EE                     l599:
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;doprnt.c: 721: flag |= 0x80;
  5678  0001EE  0100               	movlb	0	; () banked
  5679  0001F0  8F93               	bsf	sprintf@flag& (0+255),7,b
  5680                           
  5681                           ;doprnt.c: 723: break;
  5682  0001F2  D10B               	goto	l3955
  5683  0001F4                     l3889:
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5687  0001F4  C08B  FFD9         	movff	sprintf@ap,fsr2l
  5688  0001F8  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  5689  0001FC  CFDE F087          	movff	postinc2,sprintf@cp
  5690  000200  CFDD F088          	movff	postdec2,sprintf@cp+1
  5691                           
  5692                           ; BSR set to: 0
  5693  000204  0E02               	movlw	2
  5694  000206  0100               	movlb	0	; () banked
  5695  000208  278B               	addwf	sprintf@ap& (0+255),f,b
  5696  00020A  0E00               	movlw	0
  5697  00020C  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;doprnt.c: 740: if(!cp)
  5701  00020E  0100               	movlb	0	; () banked
  5702  000210  5187               	movf	sprintf@cp& (0+255),w,b
  5703  000212  0100               	movlb	0	; () banked
  5704  000214  1188               	iorwf	(sprintf@cp+1)& (0+255),w,b
  5705  000216  A4D8               	btfss	status,2,c
  5706  000218  D006               	goto	l3897
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;doprnt.c: 741: cp = "(null)";
  5710  00021A  0EC6               	movlw	low STR_63
  5711  00021C  0100               	movlb	0	; () banked
  5712  00021E  6F87               	movwf	sprintf@cp& (0+255),b
  5713  000220  0E7C               	movlw	high STR_63
  5714  000222  0100               	movlb	0	; () banked
  5715  000224  6F88               	movwf	(sprintf@cp+1)& (0+255),b
  5716  000226                     l3897:
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;doprnt.c: 745: len = 0;
  5720  000226  0E00               	movlw	0
  5721  000228  0100               	movlb	0	; () banked
  5722  00022A  6F8A               	movwf	(sprintf@len+1)& (0+255),b
  5723  00022C  0E00               	movlw	0
  5724  00022E  6F89               	movwf	sprintf@len& (0+255),b
  5725                           
  5726                           ;doprnt.c: 746: while(cp[len])
  5727  000230  D003               	goto	l3901
  5728  000232                     l3899:
  5729                           
  5730                           ;doprnt.c: 747: len++;
  5731  000232  0100               	movlb	0	; () banked
  5732  000234  4B89               	infsnz	sprintf@len& (0+255),f,b
  5733  000236  2B8A               	incf	(sprintf@len+1)& (0+255),f,b
  5734  000238                     l3901:
  5735                           
  5736                           ; BSR set to: 0
  5737  000238  0100               	movlb	0	; () banked
  5738  00023A  5189               	movf	sprintf@len& (0+255),w,b
  5739  00023C  0100               	movlb	0	; () banked
  5740  00023E  2587               	addwf	sprintf@cp& (0+255),w,b
  5741  000240  6E28               	movwf	??_sprintf& (0+255),c
  5742  000242  0100               	movlb	0	; () banked
  5743  000244  518A               	movf	(sprintf@len+1)& (0+255),w,b
  5744  000246  0100               	movlb	0	; () banked
  5745  000248  2188               	addwfc	(sprintf@cp+1)& (0+255),w,b
  5746  00024A  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5747  00024C  C028  FFF6         	movff	??_sprintf,tblptrl
  5748  000250  C029  FFF7         	movff	??_sprintf+1,tblptrh
  5749  000254  6AF8               	clrf	tblptru,c
  5750  000256  0E05               	movlw	(high __ramtop+-1)
  5751  000258  64F7               	cpfsgt	tblptrh,c
  5752  00025A  D003               	bra	u3527
  5753  00025C  0008               	tblrd		*
  5754  00025E  50F5               	movf	tablat,w,c
  5755  000260  D005               	bra	u3520
  5756  000262                     u3527:
  5757  000262  CFF6 FFE9          	movff	tblptrl,fsr0l
  5758  000266  CFF7 FFEA          	movff	tblptrh,fsr0h
  5759  00026A  50EF               	movf	indf0,w,c
  5760  00026C                     u3520:
  5761  00026C  0900               	iorlw	0
  5762  00026E  A4D8               	btfss	status,2,c
  5763  000270  D7E0               	goto	l3899
  5764  000272                     l3903:
  5765                           
  5766                           ;doprnt.c: 753: if(prec && prec < len)
  5767  000272  0100               	movlb	0	; () banked
  5768  000274  518F               	movf	sprintf@prec& (0+255),w,b
  5769  000276  0100               	movlb	0	; () banked
  5770  000278  B4D8               	btfsc	status,2,c
  5771  00027A  D014               	goto	l3909
  5772                           
  5773                           ; BSR set to: 0
  5774  00027C  C08F  F028         	movff	sprintf@prec,??_sprintf
  5775  000280  6A29               	clrf	(??_sprintf+1)& (0+255),c
  5776  000282  BE28               	btfsc	??_sprintf& (0+255),7,c
  5777  000284  0629               	decf	(??_sprintf+1)& (0+255),f,c
  5778  000286  0100               	movlb	0	; () banked
  5779  000288  5189               	movf	sprintf@len& (0+255),w,b
  5780  00028A  5C28               	subwf	??_sprintf,w,c
  5781  00028C  0100               	movlb	0	; () banked
  5782  00028E  518A               	movf	(sprintf@len+1)& (0+255),w,b
  5783  000290  5829               	subwfb	??_sprintf+1,w,c
  5784  000292  B0D8               	btfsc	status,0,c
  5785  000294  D007               	goto	l3909
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;doprnt.c: 754: len = prec;
  5789  000296  0100               	movlb	0	; () banked
  5790  000298  518F               	movf	sprintf@prec& (0+255),w,b
  5791  00029A  0100               	movlb	0	; () banked
  5792  00029C  6F89               	movwf	sprintf@len& (0+255),b
  5793  00029E  6B8A               	clrf	(sprintf@len+1)& (0+255),b
  5794  0002A0  BF89               	btfsc	sprintf@len& (0+255),7,b
  5795  0002A2  078A               	decf	(sprintf@len+1)& (0+255),f,b
  5796  0002A4                     l3909:
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;doprnt.c: 757: if(width > len)
  5800  0002A4  0100               	movlb	0	; () banked
  5801  0002A6  5190               	movf	sprintf@width& (0+255),w,b
  5802  0002A8  0100               	movlb	0	; () banked
  5803  0002AA  5D89               	subwf	sprintf@len& (0+255),w,b
  5804  0002AC  0100               	movlb	0	; () banked
  5805  0002AE  5191               	movf	(sprintf@width+1)& (0+255),w,b
  5806  0002B0  0100               	movlb	0	; () banked
  5807  0002B2  598A               	subwfb	(sprintf@len+1)& (0+255),w,b
  5808  0002B4  B0D8               	btfsc	status,0,c
  5809  0002B6  D009               	goto	l3913
  5810                           
  5811                           ; BSR set to: 0
  5812                           ;doprnt.c: 758: width -= len;
  5813  0002B8  0100               	movlb	0	; () banked
  5814  0002BA  5189               	movf	sprintf@len& (0+255),w,b
  5815  0002BC  0100               	movlb	0	; () banked
  5816  0002BE  5F90               	subwf	sprintf@width& (0+255),f,b
  5817  0002C0  0100               	movlb	0	; () banked
  5818  0002C2  518A               	movf	(sprintf@len+1)& (0+255),w,b
  5819  0002C4  0100               	movlb	0	; () banked
  5820  0002C6  5B91               	subwfb	(sprintf@width+1)& (0+255),f,b
  5821  0002C8  D005               	goto	l3915
  5822  0002CA                     l3913:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;doprnt.c: 759: else
  5826                           ;doprnt.c: 760: width = 0;
  5827  0002CA  0E00               	movlw	0
  5828  0002CC  0100               	movlb	0	; () banked
  5829  0002CE  6F91               	movwf	(sprintf@width+1)& (0+255),b
  5830  0002D0  0E00               	movlw	0
  5831  0002D2  6F90               	movwf	sprintf@width& (0+255),b
  5832  0002D4                     l3915:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;doprnt.c: 762: if(!(flag & 0x08))
  5836  0002D4  0100               	movlb	0	; () banked
  5837  0002D6  A793               	btfss	sprintf@flag& (0+255),3,b
  5838  0002D8  D009               	goto	l3923
  5839  0002DA  D02E               	goto	l3931
  5840  0002DC                     l3919:
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;doprnt.c: 765: ((*sp++ = (' ')));
  5844  0002DC  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5845  0002E0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5846  0002E4  0E20               	movlw	32
  5847  0002E6  6EDF               	movwf	indf2,c
  5848                           
  5849                           ; BSR set to: 0
  5850  0002E8  4A1E               	infsnz	sprintf@sp,f,c
  5851  0002EA  2A1F               	incf	sprintf@sp+1,f,c
  5852  0002EC                     l3923:
  5853                           
  5854                           ; BSR set to: 0
  5855  0002EC  0100               	movlb	0	; () banked
  5856  0002EE  0790               	decf	sprintf@width& (0+255),f,b
  5857  0002F0  A0D8               	btfss	status,0,c
  5858  0002F2  0791               	decf	(sprintf@width+1)& (0+255),f,b
  5859  0002F4  0100               	movlb	0	; () banked
  5860  0002F6  2990               	incf	sprintf@width& (0+255),w,b
  5861  0002F8  E1F1               	bnz	l3919
  5862  0002FA  0100               	movlb	0	; () banked
  5863  0002FC  2991               	incf	(sprintf@width+1)& (0+255),w,b
  5864  0002FE  B4D8               	btfsc	status,2,c
  5865  000300  D01B               	goto	l3931
  5866  000302  D7EC               	goto	l3919
  5867  000304                     l3925:
  5868                           
  5869                           ; BSR set to: 0
  5870                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  5871  000304  C087  FFF6         	movff	sprintf@cp,tblptrl
  5872  000308  C088  FFF7         	movff	sprintf@cp+1,tblptrh
  5873  00030C  6AF8               	clrf	tblptru,c
  5874  00030E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5875  000312  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5876  000316  0E05               	movlw	(high __ramtop+-1)
  5877  000318  64F7               	cpfsgt	tblptrh,c
  5878  00031A  D003               	bra	u3597
  5879  00031C  0008               	tblrd		*
  5880  00031E  50F5               	movf	tablat,w,c
  5881  000320  D005               	bra	u3590
  5882  000322                     u3597:
  5883  000322  CFF6 FFE9          	movff	tblptrl,fsr0l
  5884  000326  CFF7 FFEA          	movff	tblptrh,fsr0h
  5885  00032A  50EF               	movf	indf0,w,c
  5886  00032C                     u3590:
  5887  00032C  6EDF               	movwf	indf2,c
  5888  00032E  0100               	movlb	0	; () banked
  5889  000330  4B87               	infsnz	sprintf@cp& (0+255),f,b
  5890  000332  2B88               	incf	(sprintf@cp+1)& (0+255),f,b
  5891                           
  5892                           ; BSR set to: 0
  5893  000334  4A1E               	infsnz	sprintf@sp,f,c
  5894  000336  2A1F               	incf	sprintf@sp+1,f,c
  5895  000338                     l3931:
  5896                           
  5897                           ; BSR set to: 0
  5898  000338  0100               	movlb	0	; () banked
  5899  00033A  0789               	decf	sprintf@len& (0+255),f,b
  5900  00033C  A0D8               	btfss	status,0,c
  5901  00033E  078A               	decf	(sprintf@len+1)& (0+255),f,b
  5902  000340  0100               	movlb	0	; () banked
  5903  000342  2989               	incf	sprintf@len& (0+255),w,b
  5904  000344  E1DF               	bnz	l3925
  5905  000346  0100               	movlb	0	; () banked
  5906  000348  298A               	incf	(sprintf@len+1)& (0+255),w,b
  5907  00034A  A4D8               	btfss	status,2,c
  5908  00034C  D7DB               	goto	l3925
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;doprnt.c: 770: if(flag & 0x08)
  5912  00034E  0100               	movlb	0	; () banked
  5913  000350  B793               	btfsc	sprintf@flag& (0+255),3,b
  5914  000352  D009               	goto	l3939
  5915  000354  D352               	goto	l4175
  5916  000356                     l3935:
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;doprnt.c: 772: ((*sp++ = (' ')));
  5920  000356  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5921  00035A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5922  00035E  0E20               	movlw	32
  5923  000360  6EDF               	movwf	indf2,c
  5924                           
  5925                           ; BSR set to: 0
  5926  000362  4A1E               	infsnz	sprintf@sp,f,c
  5927  000364  2A1F               	incf	sprintf@sp+1,f,c
  5928  000366                     l3939:
  5929                           
  5930                           ; BSR set to: 0
  5931  000366  0100               	movlb	0	; () banked
  5932  000368  0790               	decf	sprintf@width& (0+255),f,b
  5933  00036A  A0D8               	btfss	status,0,c
  5934  00036C  0791               	decf	(sprintf@width+1)& (0+255),f,b
  5935  00036E  0100               	movlb	0	; () banked
  5936  000370  2990               	incf	sprintf@width& (0+255),w,b
  5937  000372  E1F1               	bnz	l3935
  5938  000374  0100               	movlb	0	; () banked
  5939  000376  2991               	incf	(sprintf@width+1)& (0+255),w,b
  5940  000378  B4D8               	btfsc	status,2,c
  5941  00037A  D33F               	goto	l4175
  5942  00037C  D7EC               	goto	l3935
  5943  00037E                     l3941:
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5947  00037E  C08B  FFD9         	movff	sprintf@ap,fsr2l
  5948  000382  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  5949  000386  50DF               	movf	indf2,w,c
  5950  000388  0100               	movlb	0	; () banked
  5951  00038A  6F92               	movwf	sprintf@c& (0+255),b
  5952                           
  5953                           ; BSR set to: 0
  5954  00038C  0E02               	movlw	2
  5955  00038E  0100               	movlb	0	; () banked
  5956  000390  278B               	addwf	sprintf@ap& (0+255),f,b
  5957  000392  0E00               	movlw	0
  5958  000394  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5959  000396                     l3945:
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;doprnt.c: 805: cp = (char *)&c;
  5963  000396  0E92               	movlw	low sprintf@c
  5964  000398  0100               	movlb	0	; () banked
  5965  00039A  6F87               	movwf	sprintf@cp& (0+255),b
  5966  00039C  0E00               	movlw	high sprintf@c
  5967  00039E  0100               	movlb	0	; () banked
  5968  0003A0  6F88               	movwf	(sprintf@cp+1)& (0+255),b
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;doprnt.c: 806: len = 1;
  5972  0003A2  0E00               	movlw	0
  5973  0003A4  0100               	movlb	0	; () banked
  5974  0003A6  6F8A               	movwf	(sprintf@len+1)& (0+255),b
  5975  0003A8  0E01               	movlw	1
  5976  0003AA  6F89               	movwf	sprintf@len& (0+255),b
  5977                           
  5978                           ;doprnt.c: 807: goto dostring;
  5979  0003AC  D762               	goto	l3903
  5980  0003AE                     l3949:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;doprnt.c: 818: flag |= 0xC0;
  5984  0003AE  0EC0               	movlw	192
  5985  0003B0  0100               	movlb	0	; () banked
  5986  0003B2  1393               	iorwf	sprintf@flag& (0+255),f,b
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;doprnt.c: 822: }
  5990                           
  5991                           ;doprnt.c: 819: break;
  5992  0003B4  D02A               	goto	l3955
  5993  0003B6                     l3953:
  5994  0003B6  C020  FFF6         	movff	sprintf@f,tblptrl
  5995  0003BA  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5996  0003BE  4A20               	infsnz	sprintf@f,f,c
  5997  0003C0  2A21               	incf	sprintf@f+1,f,c
  5998  0003C2                     	if	0	;tblptru may be non-zero
  5999  0003C2                     	endif
  6000  0003C2                     	if	0	;tblptru may be non-zero
  6001  0003C2                     	endif
  6002  0003C2  0008               	tblrd		*
  6003  0003C4  CFF5 F092          	movff	tablat,sprintf@c
  6004  0003C8  0100               	movlb	0	; () banked
  6005  0003CA  5192               	movf	sprintf@c& (0+255),w,b
  6006                           
  6007                           ; Switch size 1, requested type "space"
  6008                           ; Number of cases is 10, Range of values is 0 to 120
  6009                           ; switch strategies available:
  6010                           ; Name         Instructions Cycles
  6011                           ; simple_byte           31    16 (average)
  6012                           ;	Chosen strategy is simple_byte
  6013  0003CC  0A00               	xorlw	0	; case 0
  6014  0003CE  B4D8               	btfsc	status,2,c
  6015  0003D0  D322               	goto	l4177
  6016  0003D2  0A58               	xorlw	88	; case 88
  6017  0003D4  B4D8               	btfsc	status,2,c
  6018  0003D6  D709               	goto	l598
  6019  0003D8  0A3B               	xorlw	59	; case 99
  6020  0003DA  B4D8               	btfsc	status,2,c
  6021  0003DC  D7D0               	goto	l3941
  6022  0003DE  0A07               	xorlw	7	; case 100
  6023  0003E0  B4D8               	btfsc	status,2,c
  6024  0003E2  D013               	goto	l3955
  6025  0003E4  0A0D               	xorlw	13	; case 105
  6026  0003E6  B4D8               	btfsc	status,2,c
  6027  0003E8  D010               	goto	l3955
  6028  0003EA  0A06               	xorlw	6	; case 111
  6029  0003EC  B4D8               	btfsc	status,2,c
  6030  0003EE  D6F8               	goto	l3885
  6031  0003F0  0A1F               	xorlw	31	; case 112
  6032  0003F2  B4D8               	btfsc	status,2,c
  6033  0003F4  D6F8               	goto	l3887
  6034  0003F6  0A03               	xorlw	3	; case 115
  6035  0003F8  B4D8               	btfsc	status,2,c
  6036  0003FA  D6FC               	goto	l3889
  6037  0003FC  0A06               	xorlw	6	; case 117
  6038  0003FE  B4D8               	btfsc	status,2,c
  6039  000400  D7D6               	goto	l3949
  6040  000402  0A0D               	xorlw	13	; case 120
  6041  000404  B4D8               	btfsc	status,2,c
  6042  000406  D6F3               	goto	l599
  6043  000408  D7C6               	goto	l3945
  6044  00040A                     l3955:
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  6048  00040A  0EC0               	movlw	192
  6049  00040C  0100               	movlb	0	; () banked
  6050  00040E  1593               	andwf	sprintf@flag& (0+255),w,b
  6051  000410  6E28               	movwf	??_sprintf& (0+255),c
  6052  000412  0E00               	movlw	0
  6053  000414  0100               	movlb	0	; () banked
  6054  000416  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  6055  000418  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6056  00041A  5028               	movf	??_sprintf,w,c
  6057  00041C  1029               	iorwf	??_sprintf+1,w,c
  6058  00041E  A4D8               	btfss	status,2,c
  6059  000420  D019               	goto	l3967
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;doprnt.c: 1253: {
  6063                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6064  000422  C08B  FFD9         	movff	sprintf@ap,fsr2l
  6065  000426  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  6066  00042A  CFDE F08D          	movff	postinc2,sprintf@val
  6067  00042E  CFDD F08E          	movff	postdec2,sprintf@val+1
  6068                           
  6069                           ; BSR set to: 0
  6070  000432  0E02               	movlw	2
  6071  000434  0100               	movlb	0	; () banked
  6072  000436  278B               	addwf	sprintf@ap& (0+255),f,b
  6073  000438  0E00               	movlw	0
  6074  00043A  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;doprnt.c: 1261: if((int)val < 0) {
  6078  00043C  0100               	movlb	0	; () banked
  6079  00043E  AF8E               	btfss	(sprintf@val+1)& (0+255),7,b
  6080  000440  D016               	goto	l3971
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;doprnt.c: 1262: flag |= 0x03;
  6084  000442  0E03               	movlw	3
  6085  000444  0100               	movlb	0	; () banked
  6086  000446  1393               	iorwf	sprintf@flag& (0+255),f,b
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;doprnt.c: 1263: val = -val;
  6090  000448  0100               	movlb	0	; () banked
  6091  00044A  6D8D               	negf	sprintf@val& (0+255),b
  6092  00044C  1F8E               	comf	(sprintf@val+1)& (0+255),f,b
  6093  00044E  B0D8               	btfsc	status,0,c
  6094  000450  2B8E               	incf	(sprintf@val+1)& (0+255),f,b
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;doprnt.c: 1264: }
  6098                           ;doprnt.c: 1266: }
  6099  000452  D00D               	goto	l3971
  6100  000454                     l3967:
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;doprnt.c: 1268: else
  6104                           ;doprnt.c: 1273: {
  6105                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6106  000454  C08B  FFD9         	movff	sprintf@ap,fsr2l
  6107  000458  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  6108  00045C  CFDE F08D          	movff	postinc2,sprintf@val
  6109  000460  CFDD F08E          	movff	postdec2,sprintf@val+1
  6110                           
  6111                           ; BSR set to: 0
  6112  000464  0E02               	movlw	2
  6113  000466  0100               	movlb	0	; () banked
  6114  000468  278B               	addwf	sprintf@ap& (0+255),f,b
  6115  00046A  0E00               	movlw	0
  6116  00046C  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6117  00046E                     l3971:
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;doprnt.c: 1287: }
  6121                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6122  00046E  0100               	movlb	0	; () banked
  6123  000470  518F               	movf	sprintf@prec& (0+255),w,b
  6124  000472  0100               	movlb	0	; () banked
  6125  000474  A4D8               	btfss	status,2,c
  6126  000476  D063               	goto	l4021
  6127                           
  6128                           ; BSR set to: 0
  6129  000478  0100               	movlb	0	; () banked
  6130  00047A  518D               	movf	sprintf@val& (0+255),w,b
  6131  00047C  0100               	movlb	0	; () banked
  6132  00047E  118E               	iorwf	(sprintf@val+1)& (0+255),w,b
  6133  000480  A4D8               	btfss	status,2,c
  6134  000482  D05D               	goto	l4021
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;doprnt.c: 1291: prec++;
  6138  000484  0100               	movlb	0	; () banked
  6139  000486  2B8F               	incf	sprintf@prec& (0+255),f,b
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  6143  000488  D05A               	goto	l4021
  6144  00048A                     l3977:
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;doprnt.c: 1302: case 0xC0:
  6148                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6149  00048A  0E01               	movlw	1
  6150  00048C  0100               	movlb	0	; () banked
  6151  00048E  6F92               	movwf	sprintf@c& (0+255),b
  6152  000490                     l3979:
  6153                           
  6154                           ; BSR set to: 0
  6155  000490  0E05               	movlw	5
  6156  000492  0100               	movlb	0	; () banked
  6157  000494  1992               	xorwf	sprintf@c& (0+255),w,b
  6158  000496  B4D8               	btfsc	status,2,c
  6159  000498  D061               	goto	l4023
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;doprnt.c: 1306: if(val < dpowers[c])
  6163                           
  6164                           ; BSR set to: 0
  6165                           
  6166                           ; BSR set to: 0
  6167  00049A  0100               	movlb	0	; () banked
  6168  00049C  5192               	movf	sprintf@c& (0+255),w,b
  6169  00049E  0D02               	mullw	2
  6170  0004A0  0E0F               	movlw	low _dpowers
  6171  0004A2  24F3               	addwf	prodl,w,c
  6172  0004A4  6EF6               	movwf	tblptrl,c
  6173  0004A6  0E7B               	movlw	high _dpowers
  6174  0004A8  20F4               	addwfc	prodh,w,c
  6175  0004AA  6EF7               	movwf	tblptrh,c
  6176  0004AC                     	if	0	;There are less than 3 active tblptr bytes
  6177  0004AC                     	endif
  6178  0004AC  0009               	tblrd		*+
  6179  0004AE  50F5               	movf	tablat,w,c
  6180  0004B0  0100               	movlb	0	; () banked
  6181  0004B2  5D8D               	subwf	sprintf@val& (0+255),w,b
  6182  0004B4  0009               	tblrd		*+
  6183  0004B6  50F5               	movf	tablat,w,c
  6184  0004B8  0100               	movlb	0	; () banked
  6185  0004BA  598E               	subwfb	(sprintf@val+1)& (0+255),w,b
  6186  0004BC  A0D8               	btfss	status,0,c
  6187  0004BE  D04E               	goto	l4023
  6188                           
  6189                           ; BSR set to: 0
  6190                           
  6191                           ; BSR set to: 0
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;doprnt.c: 1307: break;
  6195  0004C0  0100               	movlb	0	; () banked
  6196  0004C2  2B92               	incf	sprintf@c& (0+255),f,b
  6197  0004C4  D7E5               	goto	l3979
  6198  0004C6                     l3991:
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6202  0004C6  0E01               	movlw	1
  6203  0004C8  0100               	movlb	0	; () banked
  6204  0004CA  6F92               	movwf	sprintf@c& (0+255),b
  6205  0004CC                     l3993:
  6206                           
  6207                           ; BSR set to: 0
  6208  0004CC  0E04               	movlw	4
  6209  0004CE  0100               	movlb	0	; () banked
  6210  0004D0  1992               	xorwf	sprintf@c& (0+255),w,b
  6211  0004D2  B4D8               	btfsc	status,2,c
  6212  0004D4  D043               	goto	l4023
  6213                           
  6214                           ; BSR set to: 0
  6215                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6216                           
  6217                           ; BSR set to: 0
  6218                           
  6219                           ; BSR set to: 0
  6220  0004D6  0100               	movlb	0	; () banked
  6221  0004D8  5192               	movf	sprintf@c& (0+255),w,b
  6222  0004DA  0D02               	mullw	2
  6223  0004DC  0E19               	movlw	low _hexpowers
  6224  0004DE  24F3               	addwf	prodl,w,c
  6225  0004E0  6EF6               	movwf	tblptrl,c
  6226  0004E2  0E7B               	movlw	high _hexpowers
  6227  0004E4  20F4               	addwfc	prodh,w,c
  6228  0004E6  6EF7               	movwf	tblptrh,c
  6229  0004E8                     	if	0	;There are less than 3 active tblptr bytes
  6230  0004E8                     	endif
  6231  0004E8  0009               	tblrd		*+
  6232  0004EA  50F5               	movf	tablat,w,c
  6233  0004EC  0100               	movlb	0	; () banked
  6234  0004EE  5D8D               	subwf	sprintf@val& (0+255),w,b
  6235  0004F0  0009               	tblrd		*+
  6236  0004F2  50F5               	movf	tablat,w,c
  6237  0004F4  0100               	movlb	0	; () banked
  6238  0004F6  598E               	subwfb	(sprintf@val+1)& (0+255),w,b
  6239  0004F8  A0D8               	btfss	status,0,c
  6240  0004FA  D030               	goto	l4023
  6241                           
  6242                           ; BSR set to: 0
  6243                           
  6244                           ; BSR set to: 0
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;doprnt.c: 1318: break;
  6248  0004FC  0100               	movlb	0	; () banked
  6249  0004FE  2B92               	incf	sprintf@c& (0+255),f,b
  6250  000500  D7E5               	goto	l3993
  6251  000502                     l4005:
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  6255  000502  0E01               	movlw	1
  6256  000504  0100               	movlb	0	; () banked
  6257  000506  6F92               	movwf	sprintf@c& (0+255),b
  6258  000508                     l4007:
  6259                           
  6260                           ; BSR set to: 0
  6261  000508  0E06               	movlw	6
  6262  00050A  0100               	movlb	0	; () banked
  6263  00050C  1992               	xorwf	sprintf@c& (0+255),w,b
  6264  00050E  B4D8               	btfsc	status,2,c
  6265  000510  D025               	goto	l4023
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;doprnt.c: 1329: if(val < octpowers[c])
  6269                           
  6270                           ; BSR set to: 0
  6271                           
  6272                           ; BSR set to: 0
  6273  000512  0100               	movlb	0	; () banked
  6274  000514  5192               	movf	sprintf@c& (0+255),w,b
  6275  000516  0D02               	mullw	2
  6276  000518  0E03               	movlw	low _octpowers
  6277  00051A  24F3               	addwf	prodl,w,c
  6278  00051C  6EF6               	movwf	tblptrl,c
  6279  00051E  0E7B               	movlw	high _octpowers
  6280  000520  20F4               	addwfc	prodh,w,c
  6281  000522  6EF7               	movwf	tblptrh,c
  6282  000524                     	if	0	;There are less than 3 active tblptr bytes
  6283  000524                     	endif
  6284  000524  0009               	tblrd		*+
  6285  000526  50F5               	movf	tablat,w,c
  6286  000528  0100               	movlb	0	; () banked
  6287  00052A  5D8D               	subwf	sprintf@val& (0+255),w,b
  6288  00052C  0009               	tblrd		*+
  6289  00052E  50F5               	movf	tablat,w,c
  6290  000530  0100               	movlb	0	; () banked
  6291  000532  598E               	subwfb	(sprintf@val+1)& (0+255),w,b
  6292  000534  A0D8               	btfss	status,0,c
  6293  000536  D012               	goto	l4023
  6294                           
  6295                           ; BSR set to: 0
  6296                           
  6297                           ; BSR set to: 0
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;doprnt.c: 1330: break;
  6301  000538  0100               	movlb	0	; () banked
  6302  00053A  2B92               	incf	sprintf@c& (0+255),f,b
  6303  00053C  D7E5               	goto	l4007
  6304  00053E                     l4021:
  6305                           
  6306                           ; BSR set to: 0
  6307  00053E  0100               	movlb	0	; () banked
  6308  000540  5193               	movf	sprintf@flag& (0+255),w,b
  6309  000542  0BC0               	andlw	192
  6310                           
  6311                           ; Switch size 1, requested type "space"
  6312                           ; Number of cases is 4, Range of values is 0 to 192
  6313                           ; switch strategies available:
  6314                           ; Name         Instructions Cycles
  6315                           ; simple_byte           13     7 (average)
  6316                           ;	Chosen strategy is simple_byte
  6317  000544  0A00               	xorlw	0	; case 0
  6318  000546  B4D8               	btfsc	status,2,c
  6319  000548  D7A0               	goto	l3977
  6320  00054A  0A40               	xorlw	64	; case 64
  6321  00054C  B4D8               	btfsc	status,2,c
  6322  00054E  D7D9               	goto	l4005
  6323  000550  0AC0               	xorlw	192	; case 128
  6324  000552  B4D8               	btfsc	status,2,c
  6325  000554  D7B8               	goto	l3991
  6326  000556  0A40               	xorlw	64	; case 192
  6327  000558  B4D8               	btfsc	status,2,c
  6328  00055A  D797               	goto	l3977
  6329  00055C                     l4023:
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;doprnt.c: 1339: if(c < prec)
  6333  00055C  0100               	movlb	0	; () banked
  6334  00055E  5192               	movf	sprintf@c& (0+255),w,b
  6335  000560  0A80               	xorlw	128
  6336  000562  6E28               	movwf	??_sprintf& (0+255),c
  6337  000564  0100               	movlb	0	; () banked
  6338  000566  518F               	movf	sprintf@prec& (0+255),w,b
  6339  000568  0A80               	xorlw	128
  6340  00056A  5C28               	subwf	??_sprintf& (0+255),w,c
  6341  00056C  B0D8               	btfsc	status,0,c
  6342  00056E  D003               	goto	l4027
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;doprnt.c: 1340: c = prec;
  6346  000570  C08F  F092         	movff	sprintf@prec,sprintf@c
  6347  000574  D00B               	goto	l4031
  6348  000576                     l4027:
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;doprnt.c: 1341: else if(prec < c)
  6352  000576  0100               	movlb	0	; () banked
  6353  000578  518F               	movf	sprintf@prec& (0+255),w,b
  6354  00057A  0A80               	xorlw	128
  6355  00057C  6E28               	movwf	??_sprintf& (0+255),c
  6356  00057E  0100               	movlb	0	; () banked
  6357  000580  5192               	movf	sprintf@c& (0+255),w,b
  6358  000582  0A80               	xorlw	128
  6359  000584  5C28               	subwf	??_sprintf& (0+255),w,c
  6360  000586  A0D8               	btfss	status,0,c
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;doprnt.c: 1342: prec = c;
  6364  000588  C092  F08F         	movff	sprintf@c,sprintf@prec
  6365  00058C                     l4031:
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6369  00058C  0100               	movlb	0	; () banked
  6370  00058E  5190               	movf	sprintf@width& (0+255),w,b
  6371  000590  0100               	movlb	0	; () banked
  6372  000592  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6373  000594  B4D8               	btfsc	status,2,c
  6374  000596  D010               	goto	l4037
  6375                           
  6376                           ; BSR set to: 0
  6377  000598  0E03               	movlw	3
  6378  00059A  0100               	movlb	0	; () banked
  6379  00059C  1593               	andwf	sprintf@flag& (0+255),w,b
  6380  00059E  6E28               	movwf	??_sprintf& (0+255),c
  6381  0005A0  0E00               	movlw	0
  6382  0005A2  0100               	movlb	0	; () banked
  6383  0005A4  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  6384  0005A6  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6385  0005A8  5028               	movf	??_sprintf,w,c
  6386  0005AA  1029               	iorwf	??_sprintf+1,w,c
  6387  0005AC  B4D8               	btfsc	status,2,c
  6388  0005AE  D004               	goto	l4037
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;doprnt.c: 1346: width--;
  6392  0005B0  0100               	movlb	0	; () banked
  6393  0005B2  0790               	decf	sprintf@width& (0+255),f,b
  6394  0005B4  A0D8               	btfss	status,0,c
  6395  0005B6  0791               	decf	(sprintf@width+1)& (0+255),f,b
  6396  0005B8                     l4037:
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6400  0005B8  0100               	movlb	0	; () banked
  6401  0005BA  AD94               	btfss	(sprintf@flag+1)& (0+255),6,b
  6402  0005BC  D01F               	goto	l4045
  6403                           
  6404                           ; BSR set to: 0
  6405                           ;doprnt.c: 1349: if(width > prec)
  6406  0005BE  0E80               	movlw	128
  6407  0005C0  0100               	movlb	0	; () banked
  6408  0005C2  BF8F               	btfsc	sprintf@prec& (0+255),7,b
  6409  0005C4  0E7F               	movlw	127
  6410  0005C6  6E28               	movwf	??_sprintf& (0+255),c
  6411  0005C8  0100               	movlb	0	; () banked
  6412  0005CA  5190               	movf	sprintf@width& (0+255),w,b
  6413  0005CC  0100               	movlb	0	; () banked
  6414  0005CE  5D8F               	subwf	sprintf@prec& (0+255),w,b
  6415  0005D0  0100               	movlb	0	; () banked
  6416  0005D2  5191               	movf	(sprintf@width+1)& (0+255),w,b
  6417  0005D4  0A80               	xorlw	128
  6418  0005D6  5828               	subwfb	??_sprintf& (0+255),w,c
  6419  0005D8  B0D8               	btfsc	status,0,c
  6420  0005DA  D00B               	goto	l4043
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;doprnt.c: 1350: width -= prec;
  6424  0005DC  0100               	movlb	0	; () banked
  6425  0005DE  518F               	movf	sprintf@prec& (0+255),w,b
  6426  0005E0  0100               	movlb	0	; () banked
  6427  0005E2  5F90               	subwf	sprintf@width& (0+255),f,b
  6428  0005E4  0E00               	movlw	0
  6429  0005E6  0100               	movlb	0	; () banked
  6430  0005E8  BF8F               	btfsc	sprintf@prec& (0+255),7,b
  6431  0005EA  0EFF               	movlw	255
  6432  0005EC  0100               	movlb	0	; () banked
  6433  0005EE  5B91               	subwfb	(sprintf@width+1)& (0+255),f,b
  6434  0005F0  D005               	goto	l4045
  6435  0005F2                     l4043:
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;doprnt.c: 1351: else
  6439                           ;doprnt.c: 1352: width = 0;
  6440  0005F2  0E00               	movlw	0
  6441  0005F4  0100               	movlb	0	; () banked
  6442  0005F6  6F91               	movwf	(sprintf@width+1)& (0+255),b
  6443  0005F8  0E00               	movlw	0
  6444  0005FA  6F90               	movwf	sprintf@width& (0+255),b
  6445  0005FC                     l4045:
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;doprnt.c: 1353: }
  6449                           ;doprnt.c: 1357: if((flag & (
  6450                           ;doprnt.c: 1359: 0x04|
  6451                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  6452  0005FC  0EC4               	movlw	196
  6453  0005FE  6E28               	movwf	??_sprintf& (0+255),c
  6454  000600  0E08               	movlw	8
  6455  000602  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6456  000604  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  6457  000608  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6458  00060C  5028               	movf	??_sprintf,w,c
  6459  00060E  162A               	andwf	??_sprintf+2,f,c
  6460  000610  5029               	movf	??_sprintf+1,w,c
  6461  000612  162B               	andwf	??_sprintf+3,f,c
  6462  000614  0E40               	movlw	64
  6463  000616  182A               	xorwf	??_sprintf+2,w,c
  6464  000618  E10F               	bnz	l4051
  6465  00061A  0E08               	movlw	8
  6466  00061C  182B               	xorwf	??_sprintf+3,w,c
  6467  00061E  A4D8               	btfss	status,2,c
  6468  000620  D00B               	goto	l4051
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;doprnt.c: 1362: if(width)
  6472  000622  0100               	movlb	0	; () banked
  6473  000624  5190               	movf	sprintf@width& (0+255),w,b
  6474  000626  0100               	movlb	0	; () banked
  6475  000628  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6476  00062A  B4D8               	btfsc	status,2,c
  6477  00062C  D02E               	goto	l4059
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;doprnt.c: 1363: width--;
  6481  00062E  0100               	movlb	0	; () banked
  6482  000630  0790               	decf	sprintf@width& (0+255),f,b
  6483  000632  A0D8               	btfss	status,0,c
  6484  000634  0791               	decf	(sprintf@width+1)& (0+255),f,b
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;doprnt.c: 1364: } else
  6488  000636  D029               	goto	l4059
  6489  000638                     l4051:
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6493  000638  0EC0               	movlw	192
  6494  00063A  6E28               	movwf	??_sprintf& (0+255),c
  6495  00063C  0E08               	movlw	8
  6496  00063E  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6497  000640  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  6498  000644  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6499  000648  5028               	movf	??_sprintf,w,c
  6500  00064A  162A               	andwf	??_sprintf+2,f,c
  6501  00064C  5029               	movf	??_sprintf+1,w,c
  6502  00064E  162B               	andwf	??_sprintf+3,f,c
  6503  000650  0E80               	movlw	128
  6504  000652  182A               	xorwf	??_sprintf+2,w,c
  6505  000654  E11A               	bnz	l4059
  6506  000656  0E08               	movlw	8
  6507  000658  182B               	xorwf	??_sprintf+3,w,c
  6508  00065A  A4D8               	btfss	status,2,c
  6509  00065C  D016               	goto	l4059
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;doprnt.c: 1372: if(width > 2)
  6513  00065E  0100               	movlb	0	; () banked
  6514  000660  BF91               	btfsc	(sprintf@width+1)& (0+255),7,b
  6515  000662  D00E               	goto	l4057
  6516  000664  0100               	movlb	0	; () banked
  6517  000666  5191               	movf	(sprintf@width+1)& (0+255),w,b
  6518  000668  E105               	bnz	u3850
  6519  00066A  0E03               	movlw	3
  6520  00066C  0100               	movlb	0	; () banked
  6521  00066E  5D90               	subwf	sprintf@width& (0+255),w,b
  6522  000670  A0D8               	btfss	status,0,c
  6523  000672  D006               	goto	l4057
  6524  000674                     u3850:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;doprnt.c: 1373: width -= 2;
  6528  000674  0100               	movlb	0	; () banked
  6529  000676  0EFE               	movlw	254
  6530  000678  2790               	addwf	sprintf@width& (0+255),f,b
  6531  00067A  0EFF               	movlw	255
  6532  00067C  2391               	addwfc	(sprintf@width+1)& (0+255),f,b
  6533  00067E  D005               	goto	l4059
  6534  000680                     l4057:
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;doprnt.c: 1374: else
  6538                           ;doprnt.c: 1375: width = 0;
  6539  000680  0E00               	movlw	0
  6540  000682  0100               	movlb	0	; () banked
  6541  000684  6F91               	movwf	(sprintf@width+1)& (0+255),b
  6542  000686  0E00               	movlw	0
  6543  000688  6F90               	movwf	sprintf@width& (0+255),b
  6544  00068A                     l4059:
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;doprnt.c: 1376: }
  6548                           ;doprnt.c: 1381: if(width > c)
  6549  00068A  0E80               	movlw	128
  6550  00068C  0100               	movlb	0	; () banked
  6551  00068E  BF92               	btfsc	sprintf@c& (0+255),7,b
  6552  000690  0E7F               	movlw	127
  6553  000692  6E28               	movwf	??_sprintf& (0+255),c
  6554  000694  0100               	movlb	0	; () banked
  6555  000696  5190               	movf	sprintf@width& (0+255),w,b
  6556  000698  0100               	movlb	0	; () banked
  6557  00069A  5D92               	subwf	sprintf@c& (0+255),w,b
  6558  00069C  0100               	movlb	0	; () banked
  6559  00069E  5191               	movf	(sprintf@width+1)& (0+255),w,b
  6560  0006A0  0A80               	xorlw	128
  6561  0006A2  5828               	subwfb	??_sprintf& (0+255),w,c
  6562  0006A4  B0D8               	btfsc	status,0,c
  6563  0006A6  D00B               	goto	l4063
  6564                           
  6565                           ; BSR set to: 0
  6566                           ;doprnt.c: 1382: width -= c;
  6567  0006A8  0100               	movlb	0	; () banked
  6568  0006AA  5192               	movf	sprintf@c& (0+255),w,b
  6569  0006AC  0100               	movlb	0	; () banked
  6570  0006AE  5F90               	subwf	sprintf@width& (0+255),f,b
  6571  0006B0  0E00               	movlw	0
  6572  0006B2  0100               	movlb	0	; () banked
  6573  0006B4  BF92               	btfsc	sprintf@c& (0+255),7,b
  6574  0006B6  0EFF               	movlw	255
  6575  0006B8  0100               	movlb	0	; () banked
  6576  0006BA  5B91               	subwfb	(sprintf@width+1)& (0+255),f,b
  6577  0006BC  D005               	goto	l4065
  6578  0006BE                     l4063:
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;doprnt.c: 1383: else
  6582                           ;doprnt.c: 1384: width = 0;
  6583  0006BE  0E00               	movlw	0
  6584  0006C0  0100               	movlb	0	; () banked
  6585  0006C2  6F91               	movwf	(sprintf@width+1)& (0+255),b
  6586  0006C4  0E00               	movlw	0
  6587  0006C6  6F90               	movwf	sprintf@width& (0+255),b
  6588  0006C8                     l4065:
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;doprnt.c: 1387: if(flag & 0x04) {
  6592  0006C8  0100               	movlb	0	; () banked
  6593  0006CA  A593               	btfss	sprintf@flag& (0+255),2,b
  6594  0006CC  D061               	goto	l4101
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;doprnt.c: 1392: if(flag & 0x03)
  6598  0006CE  0E03               	movlw	3
  6599  0006D0  0100               	movlb	0	; () banked
  6600  0006D2  1593               	andwf	sprintf@flag& (0+255),w,b
  6601  0006D4  6E28               	movwf	??_sprintf& (0+255),c
  6602  0006D6  0E00               	movlw	0
  6603  0006D8  0100               	movlb	0	; () banked
  6604  0006DA  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  6605  0006DC  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6606  0006DE  5028               	movf	??_sprintf,w,c
  6607  0006E0  1029               	iorwf	??_sprintf+1,w,c
  6608  0006E2  B4D8               	btfsc	status,2,c
  6609  0006E4  D009               	goto	l658
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  6613  0006E6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6614  0006EA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6615  0006EE  0E2D               	movlw	45
  6616  0006F0  D00B               	goto	L5
  6617  0006F2                     l4071:
  6618                           
  6619                           ; BSR set to: 0
  6620  0006F2  4A1E               	infsnz	sprintf@sp,f,c
  6621  0006F4  2A1F               	incf	sprintf@sp+1,f,c
  6622  0006F6  D039               	goto	l4093
  6623  0006F8                     l658:
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;doprnt.c: 1396: else
  6627                           ;doprnt.c: 1399: if(flag & 0x01)
  6628  0006F8  0100               	movlb	0	; () banked
  6629  0006FA  A193               	btfss	sprintf@flag& (0+255),0,b
  6630  0006FC  D007               	goto	l4077
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  6634  0006FE  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6635  000702  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6636  000706  0E20               	movlw	32
  6637  000708                     L5:
  6638  000708  6EDF               	movwf	indf2,c
  6639  00070A  D7F3               	goto	l4071
  6640  00070C                     l4077:
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6644  00070C  0EC0               	movlw	192
  6645  00070E  6E28               	movwf	??_sprintf& (0+255),c
  6646  000710  0E08               	movlw	8
  6647  000712  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6648  000714  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  6649  000718  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6650  00071C  5028               	movf	??_sprintf,w,c
  6651  00071E  162A               	andwf	??_sprintf+2,f,c
  6652  000720  5029               	movf	??_sprintf+1,w,c
  6653  000722  162B               	andwf	??_sprintf+3,f,c
  6654  000724  0E80               	movlw	128
  6655  000726  182A               	xorwf	??_sprintf+2,w,c
  6656  000728  E120               	bnz	l4093
  6657  00072A  0E08               	movlw	8
  6658  00072C  182B               	xorwf	??_sprintf+3,w,c
  6659  00072E  A4D8               	btfss	status,2,c
  6660  000730  D01C               	goto	l4093
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  6664  000732  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6665  000736  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6666  00073A  0E30               	movlw	48
  6667  00073C  6EDF               	movwf	indf2,c
  6668                           
  6669                           ; BSR set to: 0
  6670  00073E  4A1E               	infsnz	sprintf@sp,f,c
  6671  000740  2A1F               	incf	sprintf@sp+1,f,c
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  6675  000742  0100               	movlb	0	; () banked
  6676  000744  BB93               	btfsc	sprintf@flag& (0+255),5,b
  6677  000746  D005               	goto	l4087
  6678                           
  6679                           ; BSR set to: 0
  6680  000748  0E00               	movlw	0
  6681  00074A  0100               	movlb	0	; () banked
  6682  00074C  6F82               	movwf	(_sprintf$1439+1)& (0+255),b
  6683  00074E  0E78               	movlw	120
  6684  000750  D004               	goto	L6
  6685  000752                     l4087:
  6686                           
  6687                           ; BSR set to: 0
  6688  000752  0E00               	movlw	0
  6689  000754  0100               	movlb	0	; () banked
  6690  000756  6F82               	movwf	(_sprintf$1439+1)& (0+255),b
  6691  000758  0E58               	movlw	88
  6692  00075A                     L6:
  6693  00075A  6F81               	movwf	_sprintf$1439& (0+255),b
  6694                           
  6695                           ; BSR set to: 0
  6696                           
  6697                           ; BSR set to: 0
  6698  00075C  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6699  000760  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6700  000764  C081  FFDF         	movff	_sprintf$1439,indf2
  6701  000768  D7C4               	goto	l4071
  6702  00076A                     l4093:
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;doprnt.c: 1412: }
  6706                           ;doprnt.c: 1415: if(width)
  6707  00076A  0100               	movlb	0	; () banked
  6708  00076C  5190               	movf	sprintf@width& (0+255),w,b
  6709  00076E  0100               	movlb	0	; () banked
  6710  000770  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6711  000772  B4D8               	btfsc	status,2,c
  6712  000774  D11D               	goto	l4165
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  6716                           
  6717                           ; BSR set to: 0
  6718                           
  6719                           ;doprnt.c: 1416: do
  6720  000776  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6721  00077A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6722  00077E  0E30               	movlw	48
  6723  000780  6EDF               	movwf	indf2,c
  6724                           
  6725                           ; BSR set to: 0
  6726  000782  4A1E               	infsnz	sprintf@sp,f,c
  6727  000784  2A1F               	incf	sprintf@sp+1,f,c
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;doprnt.c: 1418: while(--width);
  6731  000786  0100               	movlb	0	; () banked
  6732  000788  0790               	decf	sprintf@width& (0+255),f,b
  6733  00078A  A0D8               	btfss	status,0,c
  6734  00078C  0791               	decf	(sprintf@width+1)& (0+255),f,b
  6735  00078E  D7ED               	goto	l4093
  6736  000790                     l4101:
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;doprnt.c: 1422: {
  6740                           ;doprnt.c: 1424: if(width
  6741                           ;doprnt.c: 1426: && !(flag & 0x08)
  6742                           ;doprnt.c: 1428: )
  6743  000790  0100               	movlb	0	; () banked
  6744  000792  5190               	movf	sprintf@width& (0+255),w,b
  6745  000794  0100               	movlb	0	; () banked
  6746  000796  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6747  000798  B4D8               	btfsc	status,2,c
  6748  00079A  D015               	goto	l4111
  6749                           
  6750                           ; BSR set to: 0
  6751  00079C  0100               	movlb	0	; () banked
  6752  00079E  B793               	btfsc	sprintf@flag& (0+255),3,b
  6753  0007A0  D012               	goto	l4111
  6754  0007A2                     l4105:
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  6758  0007A2  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6759  0007A6  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6760  0007AA  0E20               	movlw	32
  6761  0007AC  6EDF               	movwf	indf2,c
  6762                           
  6763                           ; BSR set to: 0
  6764  0007AE  4A1E               	infsnz	sprintf@sp,f,c
  6765  0007B0  2A1F               	incf	sprintf@sp+1,f,c
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;doprnt.c: 1431: while(--width);
  6769  0007B2  0100               	movlb	0	; () banked
  6770  0007B4  0790               	decf	sprintf@width& (0+255),f,b
  6771  0007B6  A0D8               	btfss	status,0,c
  6772  0007B8  0791               	decf	(sprintf@width+1)& (0+255),f,b
  6773  0007BA  0100               	movlb	0	; () banked
  6774  0007BC  5190               	movf	sprintf@width& (0+255),w,b
  6775  0007BE  0100               	movlb	0	; () banked
  6776  0007C0  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6777  0007C2  A4D8               	btfss	status,2,c
  6778  0007C4  D7EE               	goto	l4105
  6779  0007C6                     l4111:
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;doprnt.c: 1438: if(flag & 0x03)
  6783  0007C6  0E03               	movlw	3
  6784  0007C8  0100               	movlb	0	; () banked
  6785  0007CA  1593               	andwf	sprintf@flag& (0+255),w,b
  6786  0007CC  6E28               	movwf	??_sprintf& (0+255),c
  6787  0007CE  0E00               	movlw	0
  6788  0007D0  0100               	movlb	0	; () banked
  6789  0007D2  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  6790  0007D4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6791  0007D6  5028               	movf	??_sprintf,w,c
  6792  0007D8  1029               	iorwf	??_sprintf+1,w,c
  6793  0007DA  B4D8               	btfsc	status,2,c
  6794  0007DC  D009               	goto	l674
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  6798  0007DE  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6799  0007E2  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6800  0007E6  0E2D               	movlw	45
  6801  0007E8  D00B               	goto	L7
  6802  0007EA                     l4115:
  6803                           
  6804                           ; BSR set to: 0
  6805  0007EA  4A1E               	infsnz	sprintf@sp,f,c
  6806  0007EC  2A1F               	incf	sprintf@sp+1,f,c
  6807  0007EE  D00A               	goto	l4121
  6808  0007F0                     l674:
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;doprnt.c: 1443: else if(flag & 0x01)
  6812  0007F0  0100               	movlb	0	; () banked
  6813  0007F2  A193               	btfss	sprintf@flag& (0+255),0,b
  6814  0007F4  D007               	goto	l4121
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  6818  0007F6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6819  0007FA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6820  0007FE  0E20               	movlw	32
  6821  000800                     L7:
  6822  000800  6EDF               	movwf	indf2,c
  6823  000802  D7F3               	goto	l4115
  6824  000804                     l4121:
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  6828  000804  0EC0               	movlw	192
  6829  000806  6E28               	movwf	??_sprintf& (0+255),c
  6830  000808  0E08               	movlw	8
  6831  00080A  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6832  00080C  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  6833  000810  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6834  000814  5028               	movf	??_sprintf,w,c
  6835  000816  162A               	andwf	??_sprintf+2,f,c
  6836  000818  5029               	movf	??_sprintf+1,w,c
  6837  00081A  162B               	andwf	??_sprintf+3,f,c
  6838  00081C  0E40               	movlw	64
  6839  00081E  182A               	xorwf	??_sprintf+2,w,c
  6840  000820  E10B               	bnz	l4127
  6841  000822  0E08               	movlw	8
  6842  000824  182B               	xorwf	??_sprintf+3,w,c
  6843  000826  A4D8               	btfss	status,2,c
  6844  000828  D007               	goto	l4127
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  6848  00082A  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6849  00082E  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6850  000832  0E30               	movlw	48
  6851  000834  6EDF               	movwf	indf2,c
  6852  000836  D0BA               	goto	l4163
  6853  000838                     l4127:
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;doprnt.c: 1450: else
  6857                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6858  000838  0EC0               	movlw	192
  6859  00083A  6E28               	movwf	??_sprintf& (0+255),c
  6860  00083C  0E08               	movlw	8
  6861  00083E  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6862  000840  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  6863  000844  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6864  000848  5028               	movf	??_sprintf,w,c
  6865  00084A  162A               	andwf	??_sprintf+2,f,c
  6866  00084C  5029               	movf	??_sprintf+1,w,c
  6867  00084E  162B               	andwf	??_sprintf+3,f,c
  6868  000850  0E80               	movlw	128
  6869  000852  182A               	xorwf	??_sprintf+2,w,c
  6870  000854  E103               	bnz	u4001
  6871  000856  0E08               	movlw	8
  6872  000858  182B               	xorwf	??_sprintf+3,w,c
  6873  00085A  A4D8               	btfss	status,2,c
  6874  00085C                     u4001:
  6875  00085C  D0A9               	goto	l4165
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  6879  00085E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6880  000862  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6881  000866  0E30               	movlw	48
  6882  000868  6EDF               	movwf	indf2,c
  6883                           
  6884                           ; BSR set to: 0
  6885  00086A  4A1E               	infsnz	sprintf@sp,f,c
  6886  00086C  2A1F               	incf	sprintf@sp+1,f,c
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  6890  00086E  0100               	movlb	0	; () banked
  6891  000870  BB93               	btfsc	sprintf@flag& (0+255),5,b
  6892  000872  D005               	goto	l4137
  6893                           
  6894                           ; BSR set to: 0
  6895  000874  0E00               	movlw	0
  6896  000876  0100               	movlb	0	; () banked
  6897  000878  6F84               	movwf	(_sprintf$1440+1)& (0+255),b
  6898  00087A  0E78               	movlw	120
  6899  00087C  D004               	goto	L8
  6900  00087E                     l4137:
  6901                           
  6902                           ; BSR set to: 0
  6903  00087E  0E00               	movlw	0
  6904  000880  0100               	movlb	0	; () banked
  6905  000882  6F84               	movwf	(_sprintf$1440+1)& (0+255),b
  6906  000884  0E58               	movlw	88
  6907  000886                     L8:
  6908  000886  6F83               	movwf	_sprintf$1440& (0+255),b
  6909                           
  6910                           ; BSR set to: 0
  6911                           
  6912                           ; BSR set to: 0
  6913  000888  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6914  00088C  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6915  000890  C083  FFDF         	movff	_sprintf$1440,indf2
  6916  000894  D08B               	goto	l4163
  6917  000896                     l4143:
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;doprnt.c: 1486: case 0xC0:
  6921                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6922  000896  0100               	movlb	0	; () banked
  6923  000898  518F               	movf	sprintf@prec& (0+255),w,b
  6924  00089A  0D02               	mullw	2
  6925  00089C  0E0F               	movlw	low _dpowers
  6926  00089E  24F3               	addwf	prodl,w,c
  6927  0008A0  6EF6               	movwf	tblptrl,c
  6928  0008A2  0E7B               	movlw	high _dpowers
  6929  0008A4  20F4               	addwfc	prodh,w,c
  6930  0008A6  6EF7               	movwf	tblptrh,c
  6931  0008A8                     	if	0	;There are less than 3 active tblptr bytes
  6932  0008A8                     	endif
  6933  0008A8  0009               	tblrd		*+
  6934  0008AA  CFF5 F014          	movff	tablat,___lwdiv@divisor
  6935  0008AE  000A               	tblrd		*-
  6936  0008B0  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  6937  0008B4  C08D  F012         	movff	sprintf@val,___lwdiv@dividend
  6938  0008B8  C08E  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  6939  0008BC  EC1D  F00A         	call	___lwdiv	;wreg free
  6940  0008C0  C012  F019         	movff	?___lwdiv,___lwmod@dividend
  6941  0008C4  C013  F01A         	movff	?___lwdiv+1,___lwmod@dividend+1
  6942  0008C8  0E00               	movlw	0
  6943  0008CA  6E1C               	movwf	___lwmod@divisor+1,c
  6944  0008CC  0E0A               	movlw	10
  6945  0008CE  6E1B               	movwf	___lwmod@divisor,c
  6946  0008D0  EC6B  F00A         	call	___lwmod	;wreg free
  6947  0008D4  5019               	movf	?___lwmod,w,c
  6948  0008D6  D051               	goto	L9
  6949  0008D8                     l4145:
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;doprnt.c: 1499: {
  6953                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6954  0008D8  C08D  F012         	movff	sprintf@val,___lwdiv@dividend
  6955  0008DC  C08E  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  6956  0008E0  0100               	movlb	0	; () banked
  6957  0008E2  518F               	movf	sprintf@prec& (0+255),w,b
  6958  0008E4  0D02               	mullw	2
  6959  0008E6  0E19               	movlw	low _hexpowers
  6960  0008E8  24F3               	addwf	prodl,w,c
  6961  0008EA  6EF6               	movwf	tblptrl,c
  6962  0008EC  0E7B               	movlw	high _hexpowers
  6963  0008EE  20F4               	addwfc	prodh,w,c
  6964  0008F0  6EF7               	movwf	tblptrh,c
  6965  0008F2                     	if	0	;There are less than 3 active tblptr bytes
  6966  0008F2                     	endif
  6967  0008F2  0009               	tblrd		*+
  6968  0008F4  CFF5 F014          	movff	tablat,___lwdiv@divisor
  6969  0008F8  000A               	tblrd		*-
  6970  0008FA  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  6971  0008FE  EC1D  F00A         	call	___lwdiv	;wreg free
  6972  000902  5012               	movf	?___lwdiv,w,c
  6973  000904  0B0F               	andlw	15
  6974  000906  0100               	movlb	0	; () banked
  6975  000908  6F80               	movwf	sprintf@idx& (0+255),b
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  6979  00090A  0100               	movlb	0	; () banked
  6980  00090C  BB93               	btfsc	sprintf@flag& (0+255),5,b
  6981  00090E  D005               	goto	l4151
  6982                           
  6983                           ; BSR set to: 0
  6984  000910  0ECE               	movlw	low STR_65
  6985  000912  0100               	movlb	0	; () banked
  6986  000914  6F85               	movwf	_sprintf$1446& (0+255),b
  6987  000916  0E7B               	movlw	high STR_65
  6988  000918  D004               	goto	L10
  6989  00091A                     l4151:
  6990                           
  6991                           ; BSR set to: 0
  6992  00091A  0EBD               	movlw	low STR_64
  6993  00091C  0100               	movlb	0	; () banked
  6994  00091E  6F85               	movwf	_sprintf$1446& (0+255),b
  6995  000920  0E7B               	movlw	high STR_64
  6996  000922                     L10:
  6997  000922  0100               	movlb	0	; () banked
  6998  000924  6F86               	movwf	(_sprintf$1446+1)& (0+255),b
  6999                           
  7000                           ; BSR set to: 0
  7001                           
  7002                           ; BSR set to: 0
  7003  000926  0100               	movlb	0	; () banked
  7004  000928  5180               	movf	sprintf@idx& (0+255),w,b
  7005  00092A  0D01               	mullw	1
  7006  00092C  C085  F028         	movff	_sprintf$1446,??_sprintf
  7007  000930  C086  F029         	movff	_sprintf$1446+1,??_sprintf+1
  7008  000934  50F3               	movf	prodl,w,c
  7009  000936  2628               	addwf	??_sprintf,f,c
  7010  000938  50F4               	movf	prodh,w,c
  7011  00093A  2229               	addwfc	??_sprintf+1,f,c
  7012  00093C  C028  FFF6         	movff	??_sprintf,tblptrl
  7013  000940  C029  FFF7         	movff	??_sprintf+1,tblptrh
  7014  000944                     	if	0	;tblptru may be non-zero
  7015  000944                     	endif
  7016  000944                     	if	0	;tblptru may be non-zero
  7017  000944                     	endif
  7018  000944  0008               	tblrd		*
  7019  000946  CFF5 F092          	movff	tablat,sprintf@c
  7020                           
  7021                           ;doprnt.c: 1508: }
  7022                           ;doprnt.c: 1510: break;
  7023  00094A  D02A               	goto	l4161
  7024  00094C                     l4155:
  7025                           
  7026                           ; BSR set to: 0
  7027                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  7028  00094C  C08D  F012         	movff	sprintf@val,___lwdiv@dividend
  7029  000950  C08E  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  7030  000954  0100               	movlb	0	; () banked
  7031  000956  518F               	movf	sprintf@prec& (0+255),w,b
  7032  000958  0D02               	mullw	2
  7033  00095A  0E03               	movlw	low _octpowers
  7034  00095C  24F3               	addwf	prodl,w,c
  7035  00095E  6EF6               	movwf	tblptrl,c
  7036  000960  0E7B               	movlw	high _octpowers
  7037  000962  20F4               	addwfc	prodh,w,c
  7038  000964  6EF7               	movwf	tblptrh,c
  7039  000966                     	if	0	;There are less than 3 active tblptr bytes
  7040  000966                     	endif
  7041  000966  0009               	tblrd		*+
  7042  000968  CFF5 F014          	movff	tablat,___lwdiv@divisor
  7043  00096C  000A               	tblrd		*-
  7044  00096E  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  7045  000972  EC1D  F00A         	call	___lwdiv	;wreg free
  7046  000976  5012               	movf	?___lwdiv,w,c
  7047  000978  0B07               	andlw	7
  7048  00097A                     L9:
  7049  00097A  0F30               	addlw	48
  7050  00097C  0100               	movlb	0	; () banked
  7051  00097E  6F92               	movwf	sprintf@c& (0+255),b
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;doprnt.c: 1523: }
  7055                           
  7056                           ;doprnt.c: 1520: break;
  7057  000980  D00F               	goto	l4161
  7058  000982                     l4159:
  7059                           
  7060                           ; BSR set to: 0
  7061  000982  0100               	movlb	0	; () banked
  7062  000984  5193               	movf	sprintf@flag& (0+255),w,b
  7063  000986  0BC0               	andlw	192
  7064                           
  7065                           ; Switch size 1, requested type "space"
  7066                           ; Number of cases is 4, Range of values is 0 to 192
  7067                           ; switch strategies available:
  7068                           ; Name         Instructions Cycles
  7069                           ; simple_byte           13     7 (average)
  7070                           ;	Chosen strategy is simple_byte
  7071  000988  0A00               	xorlw	0	; case 0
  7072  00098A  B4D8               	btfsc	status,2,c
  7073  00098C  D784               	goto	l4143
  7074  00098E  0A40               	xorlw	64	; case 64
  7075  000990  B4D8               	btfsc	status,2,c
  7076  000992  D7DC               	goto	l4155
  7077  000994  0AC0               	xorlw	192	; case 128
  7078  000996  B4D8               	btfsc	status,2,c
  7079  000998  D79F               	goto	l4145
  7080  00099A  0A40               	xorlw	64	; case 192
  7081  00099C  B4D8               	btfsc	status,2,c
  7082  00099E  D77B               	goto	l4143
  7083  0009A0                     l4161:
  7084                           
  7085                           ; BSR set to: 0
  7086                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7087  0009A0  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7088  0009A4  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7089  0009A8  C092  FFDF         	movff	sprintf@c,indf2
  7090  0009AC                     l4163:
  7091                           
  7092                           ; BSR set to: 0
  7093  0009AC  4A1E               	infsnz	sprintf@sp,f,c
  7094  0009AE  2A1F               	incf	sprintf@sp+1,f,c
  7095  0009B0                     l4165:
  7096                           
  7097                           ; BSR set to: 0
  7098  0009B0  0100               	movlb	0	; () banked
  7099  0009B2  078F               	decf	sprintf@prec& (0+255),f,b
  7100  0009B4  0100               	movlb	0	; () banked
  7101  0009B6  298F               	incf	sprintf@prec& (0+255),w,b
  7102  0009B8  A4D8               	btfss	status,2,c
  7103  0009BA  D7E3               	goto	l4159
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;doprnt.c: 1525: }
  7107                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  7108  0009BC  0100               	movlb	0	; () banked
  7109  0009BE  A793               	btfss	sprintf@flag& (0+255),3,b
  7110  0009C0  D01C               	goto	l4175
  7111                           
  7112                           ; BSR set to: 0
  7113  0009C2  0100               	movlb	0	; () banked
  7114  0009C4  BF91               	btfsc	(sprintf@width+1)& (0+255),7,b
  7115  0009C6  D019               	goto	l4175
  7116  0009C8  0100               	movlb	0	; () banked
  7117  0009CA  5191               	movf	(sprintf@width+1)& (0+255),w,b
  7118  0009CC  E104               	bnz	l4169
  7119  0009CE  0100               	movlb	0	; () banked
  7120  0009D0  0590               	decf	sprintf@width& (0+255),w,b
  7121  0009D2  A0D8               	btfss	status,0,c
  7122  0009D4  D012               	goto	l4175
  7123  0009D6                     l4169:
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  7127  0009D6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7128  0009DA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7129  0009DE  0E20               	movlw	32
  7130  0009E0  6EDF               	movwf	indf2,c
  7131                           
  7132                           ; BSR set to: 0
  7133  0009E2  4A1E               	infsnz	sprintf@sp,f,c
  7134  0009E4  2A1F               	incf	sprintf@sp+1,f,c
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;doprnt.c: 1531: while(--width);
  7138  0009E6  0100               	movlb	0	; () banked
  7139  0009E8  0790               	decf	sprintf@width& (0+255),f,b
  7140  0009EA  A0D8               	btfss	status,0,c
  7141  0009EC  0791               	decf	(sprintf@width+1)& (0+255),f,b
  7142  0009EE  0100               	movlb	0	; () banked
  7143  0009F0  5190               	movf	sprintf@width& (0+255),w,b
  7144  0009F2  0100               	movlb	0	; () banked
  7145  0009F4  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  7146  0009F6  A4D8               	btfss	status,2,c
  7147  0009F8  D7EE               	goto	l4169
  7148  0009FA                     l4175:
  7149                           
  7150                           ; BSR set to: 0
  7151  0009FA  C020  FFF6         	movff	sprintf@f,tblptrl
  7152  0009FE  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7153  000A02  4A20               	infsnz	sprintf@f,f,c
  7154  000A04  2A21               	incf	sprintf@f+1,f,c
  7155  000A06                     	if	0	;tblptru may be non-zero
  7156  000A06                     	endif
  7157  000A06                     	if	0	;tblptru may be non-zero
  7158  000A06                     	endif
  7159  000A06  0008               	tblrd		*
  7160  000A08  CFF5 F092          	movff	tablat,sprintf@c
  7161  000A0C  0100               	movlb	0	; () banked
  7162  000A0E  5192               	movf	sprintf@c& (0+255),w,b
  7163  000A10  A4D8               	btfss	status,2,c
  7164  000A12  EF11  F000         	goto	l3821
  7165  000A16                     l4177:
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;doprnt.c: 1538: *sp = 0;
  7169  000A16  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7170  000A1A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7171  000A1E  0E00               	movlw	0
  7172  000A20  6EDF               	movwf	indf2,c
  7173  000A22  0012               	return	
  7174  000A24                     __end_of_sprintf:
  7175                           	opt stack 0
  7176                           tblptru	equ	0xFF8
  7177                           tblptrh	equ	0xFF7
  7178                           tblptrl	equ	0xFF6
  7179                           tablat	equ	0xFF5
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           indf0	equ	0xFEF
  7184                           postinc0	equ	0xFEE
  7185                           fsr0h	equ	0xFEA
  7186                           fsr0l	equ	0xFE9
  7187                           wreg	equ	0xFE8
  7188                           postdec1	equ	0xFE5
  7189                           plusw1	equ	0xFE3
  7190                           fsr1l	equ	0xFE1
  7191                           indf2	equ	0xFDF
  7192                           postinc2	equ	0xFDE
  7193                           postdec2	equ	0xFDD
  7194                           plusw2	equ	0xFDB
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function _isdigit *****************
  7200 ;; Defined at:
  7201 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;  c               1    wreg     unsigned char 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  c               1   19[COMRAM] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;		None               void
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7215 ;;      Params:         0       0       0       0       0       0       0
  7216 ;;      Locals:         2       0       0       0       0       0       0
  7217 ;;      Temps:          1       0       0       0       0       0       0
  7218 ;;      Totals:         3       0       0       0       0       0       0
  7219 ;;Total ram usage:        3 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    1
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_sprintf
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text26
  7230  0018B6                     __ptext26:
  7231                           	opt stack 0
  7232  0018B6                     _isdigit:
  7233                           	opt stack 26
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;incstack = 0
  7237                           ;isdigit@c stored from wreg
  7238  0018B6  6E14               	movwf	isdigit@c,c
  7239  0018B8  0E00               	movlw	0
  7240  0018BA  6E13               	movwf	_isdigit$1676,c
  7241  0018BC  0E3A               	movlw	58
  7242  0018BE  6014               	cpfslt	isdigit@c,c
  7243  0018C0  D005               	goto	l3759
  7244  0018C2  0E2F               	movlw	47
  7245  0018C4  6414               	cpfsgt	isdigit@c,c
  7246  0018C6  D002               	goto	l3759
  7247  0018C8  0E01               	movlw	1
  7248  0018CA  6E13               	movwf	_isdigit$1676,c
  7249  0018CC                     l3759:
  7250  0018CC  C013  F012         	movff	_isdigit$1676,??_isdigit
  7251  0018D0  3012               	rrcf	??_isdigit,w,c
  7252  0018D2  0012               	return	
  7253  0018D4                     __end_of_isdigit:
  7254                           	opt stack 0
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           prodh	equ	0xFF4
  7260                           prodl	equ	0xFF3
  7261                           intcon	equ	0xFF2
  7262                           indf0	equ	0xFEF
  7263                           postinc0	equ	0xFEE
  7264                           fsr0h	equ	0xFEA
  7265                           fsr0l	equ	0xFE9
  7266                           wreg	equ	0xFE8
  7267                           postdec1	equ	0xFE5
  7268                           plusw1	equ	0xFE3
  7269                           fsr1l	equ	0xFE1
  7270                           indf2	equ	0xFDF
  7271                           postinc2	equ	0xFDE
  7272                           postdec2	equ	0xFDD
  7273                           plusw2	equ	0xFDB
  7274                           fsr2h	equ	0xFDA
  7275                           fsr2l	equ	0xFD9
  7276                           status	equ	0xFD8
  7277                           
  7278 ;; *************** function ___wmul *****************
  7279 ;; Defined at:
  7280 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;  multiplier      2   17[COMRAM] unsigned int 
  7283 ;;  multiplicand    2   19[COMRAM] unsigned int 
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  product         2   21[COMRAM] unsigned int 
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  2   17[COMRAM] unsigned int 
  7288 ;; Registers used:
  7289 ;;		wreg, status,2, status,0, prodl, prodh
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7295 ;;      Params:         4       0       0       0       0       0       0
  7296 ;;      Locals:         2       0       0       0       0       0       0
  7297 ;;      Temps:          0       0       0       0       0       0       0
  7298 ;;      Totals:         6       0       0       0       0       0       0
  7299 ;;Total ram usage:        6 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    1
  7302 ;; This function calls:
  7303 ;;		Nothing
  7304 ;; This function is called by:
  7305 ;;		_sprintf
  7306 ;;		_delay_ms1
  7307 ;;		_delay_us1
  7308 ;; This function uses a non-reentrant model
  7309 ;;
  7310                           
  7311                           	psect	text27
  7312  0017DE                     __ptext27:
  7313                           	opt stack 0
  7314  0017DE                     ___wmul:
  7315                           	opt stack 26
  7316                           
  7317                           ;incstack = 0
  7318  0017DE  5012               	movf	___wmul@multiplier,w,c
  7319  0017E0  0214               	mulwf	___wmul@multiplicand,c
  7320  0017E2  CFF3 F016          	movff	prodl,___wmul@product
  7321  0017E6  CFF4 F017          	movff	prodh,___wmul@product+1
  7322  0017EA  5012               	movf	___wmul@multiplier,w,c
  7323  0017EC  0215               	mulwf	___wmul@multiplicand+1,c
  7324  0017EE  50F3               	movf	prodl,w,c
  7325  0017F0  2617               	addwf	___wmul@product+1,f,c
  7326  0017F2  5013               	movf	___wmul@multiplier+1,w,c
  7327  0017F4  0214               	mulwf	___wmul@multiplicand,c
  7328  0017F6  50F3               	movf	prodl,w,c
  7329  0017F8  2617               	addwf	___wmul@product+1,f,c
  7330  0017FA  C016  F012         	movff	___wmul@product,?___wmul
  7331  0017FE  C017  F013         	movff	___wmul@product+1,?___wmul+1
  7332  001802  0012               	return	
  7333  001804                     __end_of___wmul:
  7334                           	opt stack 0
  7335                           tblptru	equ	0xFF8
  7336                           tblptrh	equ	0xFF7
  7337                           tblptrl	equ	0xFF6
  7338                           tablat	equ	0xFF5
  7339                           prodh	equ	0xFF4
  7340                           prodl	equ	0xFF3
  7341                           intcon	equ	0xFF2
  7342                           indf0	equ	0xFEF
  7343                           postinc0	equ	0xFEE
  7344                           fsr0h	equ	0xFEA
  7345                           fsr0l	equ	0xFE9
  7346                           wreg	equ	0xFE8
  7347                           postdec1	equ	0xFE5
  7348                           plusw1	equ	0xFE3
  7349                           fsr1l	equ	0xFE1
  7350                           indf2	equ	0xFDF
  7351                           postinc2	equ	0xFDE
  7352                           postdec2	equ	0xFDD
  7353                           plusw2	equ	0xFDB
  7354                           fsr2h	equ	0xFDA
  7355                           fsr2l	equ	0xFD9
  7356                           status	equ	0xFD8
  7357                           
  7358 ;; *************** function ___lwmod *****************
  7359 ;; Defined at:
  7360 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;  dividend        2   24[COMRAM] unsigned int 
  7363 ;;  divisor         2   26[COMRAM] unsigned int 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;  counter         1   28[COMRAM] unsigned char 
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  2   24[COMRAM] unsigned int 
  7368 ;; Registers used:
  7369 ;;		wreg, status,2, status,0
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7375 ;;      Params:         4       0       0       0       0       0       0
  7376 ;;      Locals:         1       0       0       0       0       0       0
  7377 ;;      Temps:          0       0       0       0       0       0       0
  7378 ;;      Totals:         5       0       0       0       0       0       0
  7379 ;;Total ram usage:        5 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    1
  7382 ;; This function calls:
  7383 ;;		Nothing
  7384 ;; This function is called by:
  7385 ;;		_sprintf
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           	psect	text28
  7390  0014D6                     __ptext28:
  7391                           	opt stack 0
  7392  0014D6                     ___lwmod:
  7393                           	opt stack 26
  7394                           
  7395                           ;incstack = 0
  7396  0014D6  501B               	movf	___lwmod@divisor,w,c
  7397  0014D8  101C               	iorwf	___lwmod@divisor+1,w,c
  7398  0014DA  B4D8               	btfsc	status,2,c
  7399  0014DC  D018               	goto	l1140
  7400  0014DE  0E01               	movlw	1
  7401  0014E0  6E1D               	movwf	___lwmod@counter,c
  7402  0014E2  D004               	goto	l3797
  7403  0014E4                     l3795:
  7404  0014E4  90D8               	bcf	status,0,c
  7405  0014E6  361B               	rlcf	___lwmod@divisor,f,c
  7406  0014E8  361C               	rlcf	___lwmod@divisor+1,f,c
  7407  0014EA  2A1D               	incf	___lwmod@counter,f,c
  7408  0014EC                     l3797:
  7409  0014EC  AE1C               	btfss	___lwmod@divisor+1,7,c
  7410  0014EE  D7FA               	goto	l3795
  7411  0014F0                     l3799:
  7412  0014F0  501B               	movf	___lwmod@divisor,w,c
  7413  0014F2  5C19               	subwf	___lwmod@dividend,w,c
  7414  0014F4  501C               	movf	___lwmod@divisor+1,w,c
  7415  0014F6  581A               	subwfb	___lwmod@dividend+1,w,c
  7416  0014F8  A0D8               	btfss	status,0,c
  7417  0014FA  D004               	goto	l3803
  7418  0014FC  501B               	movf	___lwmod@divisor,w,c
  7419  0014FE  5E19               	subwf	___lwmod@dividend,f,c
  7420  001500  501C               	movf	___lwmod@divisor+1,w,c
  7421  001502  5A1A               	subwfb	___lwmod@dividend+1,f,c
  7422  001504                     l3803:
  7423  001504  90D8               	bcf	status,0,c
  7424  001506  321C               	rrcf	___lwmod@divisor+1,f,c
  7425  001508  321B               	rrcf	___lwmod@divisor,f,c
  7426  00150A  2E1D               	decfsz	___lwmod@counter,f,c
  7427  00150C  D7F1               	goto	l3799
  7428  00150E                     l1140:
  7429  00150E  C019  F019         	movff	___lwmod@dividend,?___lwmod
  7430  001512  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  7431  001516  0012               	return		;funcret
  7432  001518                     __end_of___lwmod:
  7433                           	opt stack 0
  7434                           tblptru	equ	0xFF8
  7435                           tblptrh	equ	0xFF7
  7436                           tblptrl	equ	0xFF6
  7437                           tablat	equ	0xFF5
  7438                           prodh	equ	0xFF4
  7439                           prodl	equ	0xFF3
  7440                           intcon	equ	0xFF2
  7441                           indf0	equ	0xFEF
  7442                           postinc0	equ	0xFEE
  7443                           fsr0h	equ	0xFEA
  7444                           fsr0l	equ	0xFE9
  7445                           wreg	equ	0xFE8
  7446                           postdec1	equ	0xFE5
  7447                           plusw1	equ	0xFE3
  7448                           fsr1l	equ	0xFE1
  7449                           indf2	equ	0xFDF
  7450                           postinc2	equ	0xFDE
  7451                           postdec2	equ	0xFDD
  7452                           plusw2	equ	0xFDB
  7453                           fsr2h	equ	0xFDA
  7454                           fsr2l	equ	0xFD9
  7455                           status	equ	0xFD8
  7456                           
  7457 ;; *************** function ___lwdiv *****************
  7458 ;; Defined at:
  7459 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;  dividend        2   17[COMRAM] unsigned int 
  7462 ;;  divisor         2   19[COMRAM] unsigned int 
  7463 ;; Auto vars:     Size  Location     Type
  7464 ;;  quotient        2   22[COMRAM] unsigned int 
  7465 ;;  counter         1   21[COMRAM] unsigned char 
  7466 ;; Return value:  Size  Location     Type
  7467 ;;                  2   17[COMRAM] unsigned int 
  7468 ;; Registers used:
  7469 ;;		wreg, status,2, status,0
  7470 ;; Tracked objects:
  7471 ;;		On entry : 0/0
  7472 ;;		On exit  : 0/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7475 ;;      Params:         4       0       0       0       0       0       0
  7476 ;;      Locals:         3       0       0       0       0       0       0
  7477 ;;      Temps:          0       0       0       0       0       0       0
  7478 ;;      Totals:         7       0       0       0       0       0       0
  7479 ;;Total ram usage:        7 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; Hardware stack levels required when called:    1
  7482 ;; This function calls:
  7483 ;;		Nothing
  7484 ;; This function is called by:
  7485 ;;		_sprintf
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           	psect	text29
  7490  00143A                     __ptext29:
  7491                           	opt stack 0
  7492  00143A                     ___lwdiv:
  7493                           	opt stack 26
  7494                           
  7495                           ;incstack = 0
  7496  00143A  0E00               	movlw	0
  7497  00143C  6E18               	movwf	___lwdiv@quotient+1,c
  7498  00143E  0E00               	movlw	0
  7499  001440  6E17               	movwf	___lwdiv@quotient,c
  7500  001442  5014               	movf	___lwdiv@divisor,w,c
  7501  001444  1015               	iorwf	___lwdiv@divisor+1,w,c
  7502  001446  B4D8               	btfsc	status,2,c
  7503  001448  D01C               	goto	l1130
  7504  00144A  0E01               	movlw	1
  7505  00144C  6E16               	movwf	___lwdiv@counter,c
  7506  00144E  D004               	goto	l3777
  7507  001450                     l3775:
  7508  001450  90D8               	bcf	status,0,c
  7509  001452  3614               	rlcf	___lwdiv@divisor,f,c
  7510  001454  3615               	rlcf	___lwdiv@divisor+1,f,c
  7511  001456  2A16               	incf	___lwdiv@counter,f,c
  7512  001458                     l3777:
  7513  001458  AE15               	btfss	___lwdiv@divisor+1,7,c
  7514  00145A  D7FA               	goto	l3775
  7515  00145C                     l3779:
  7516  00145C  90D8               	bcf	status,0,c
  7517  00145E  3617               	rlcf	___lwdiv@quotient,f,c
  7518  001460  3618               	rlcf	___lwdiv@quotient+1,f,c
  7519  001462  5014               	movf	___lwdiv@divisor,w,c
  7520  001464  5C12               	subwf	___lwdiv@dividend,w,c
  7521  001466  5015               	movf	___lwdiv@divisor+1,w,c
  7522  001468  5813               	subwfb	___lwdiv@dividend+1,w,c
  7523  00146A  A0D8               	btfss	status,0,c
  7524  00146C  D005               	goto	l3787
  7525  00146E  5014               	movf	___lwdiv@divisor,w,c
  7526  001470  5E12               	subwf	___lwdiv@dividend,f,c
  7527  001472  5015               	movf	___lwdiv@divisor+1,w,c
  7528  001474  5A13               	subwfb	___lwdiv@dividend+1,f,c
  7529  001476  8017               	bsf	___lwdiv@quotient,0,c
  7530  001478                     l3787:
  7531  001478  90D8               	bcf	status,0,c
  7532  00147A  3215               	rrcf	___lwdiv@divisor+1,f,c
  7533  00147C  3214               	rrcf	___lwdiv@divisor,f,c
  7534  00147E  2E16               	decfsz	___lwdiv@counter,f,c
  7535  001480  D7ED               	goto	l3779
  7536  001482                     l1130:
  7537  001482  C017  F012         	movff	___lwdiv@quotient,?___lwdiv
  7538  001486  C018  F013         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7539  00148A  0012               	return		;funcret
  7540  00148C                     __end_of___lwdiv:
  7541                           	opt stack 0
  7542                           tblptru	equ	0xFF8
  7543                           tblptrh	equ	0xFF7
  7544                           tblptrl	equ	0xFF6
  7545                           tablat	equ	0xFF5
  7546                           prodh	equ	0xFF4
  7547                           prodl	equ	0xFF3
  7548                           intcon	equ	0xFF2
  7549                           indf0	equ	0xFEF
  7550                           postinc0	equ	0xFEE
  7551                           fsr0h	equ	0xFEA
  7552                           fsr0l	equ	0xFE9
  7553                           wreg	equ	0xFE8
  7554                           postdec1	equ	0xFE5
  7555                           plusw1	equ	0xFE3
  7556                           fsr1l	equ	0xFE1
  7557                           indf2	equ	0xFDF
  7558                           postinc2	equ	0xFDE
  7559                           postdec2	equ	0xFDD
  7560                           plusw2	equ	0xFDB
  7561                           fsr2h	equ	0xFDA
  7562                           fsr2l	equ	0xFD9
  7563                           status	equ	0xFD8
  7564                           
  7565 ;; *************** function _ESP8266_AT_Test *****************
  7566 ;; Defined at:
  7567 ;;		line 130 in file "harwave/UART.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;		None
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;		None
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      void 
  7574 ;; Registers used:
  7575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7581 ;;      Params:         0       0       0       0       0       0       0
  7582 ;;      Locals:         0       0       0       0       0       0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0
  7584 ;;      Totals:         0       0       0       0       0       0       0
  7585 ;;Total ram usage:        0 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    4
  7588 ;; This function calls:
  7589 ;;		_ESP8266_Cmd
  7590 ;; This function is called by:
  7591 ;;		_ESP8266_client
  7592 ;;		_ESP8266_Server
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596                           	psect	text30
  7597  001762                     __ptext30:
  7598                           	opt stack 0
  7599  001762                     _ESP8266_AT_Test:
  7600                           	opt stack 25
  7601  001762                     l4251:
  7602  001762  0EE0               	movlw	low STR_4
  7603  001764  6E25               	movwf	ESP8266_Cmd@cmd,c
  7604  001766  0E7C               	movlw	high STR_4
  7605  001768  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  7606  00176A  0EBB               	movlw	low (STR_3+5)
  7607  00176C  6E27               	movwf	ESP8266_Cmd@reply1,c
  7608  00176E  0E7C               	movlw	high (STR_3+5)
  7609  001770  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  7610  001772  0E00               	movlw	0
  7611  001774  6E29               	movwf	ESP8266_Cmd@reply2,c
  7612  001776  0E00               	movlw	0
  7613  001778  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  7614  00177A  0E00               	movlw	0
  7615  00177C  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  7616  00177E  0EC8               	movlw	200
  7617  001780  6E2B               	movwf	ESP8266_Cmd@waittime,c
  7618  001782  EC9E  F006         	call	_ESP8266_Cmd	;wreg free
  7619  001786  0900               	iorlw	0
  7620  001788  A4D8               	btfss	status,2,c
  7621  00178A  0012               	return	
  7622  00178C  D7EA               	goto	l4251
  7623  00178E                     __end_of_ESP8266_AT_Test:
  7624                           	opt stack 0
  7625                           tblptru	equ	0xFF8
  7626                           tblptrh	equ	0xFF7
  7627                           tblptrl	equ	0xFF6
  7628                           tablat	equ	0xFF5
  7629                           prodh	equ	0xFF4
  7630                           prodl	equ	0xFF3
  7631                           intcon	equ	0xFF2
  7632                           indf0	equ	0xFEF
  7633                           postinc0	equ	0xFEE
  7634                           fsr0h	equ	0xFEA
  7635                           fsr0l	equ	0xFE9
  7636                           wreg	equ	0xFE8
  7637                           postdec1	equ	0xFE5
  7638                           plusw1	equ	0xFE3
  7639                           fsr1l	equ	0xFE1
  7640                           indf2	equ	0xFDF
  7641                           postinc2	equ	0xFDE
  7642                           postdec2	equ	0xFDD
  7643                           plusw2	equ	0xFDB
  7644                           fsr2h	equ	0xFDA
  7645                           fsr2l	equ	0xFD9
  7646                           status	equ	0xFD8
  7647                           
  7648 ;; *************** function _ESP8266_Cmd *****************
  7649 ;; Defined at:
  7650 ;;		line 86 in file "harwave/UART.c"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;  cmd             2   36[COMRAM] PTR unsigned char 
  7653 ;;		 -> STR_55(14), STR_53(15), STR_49(11), STR_47(22), 
  7654 ;;		 -> STR_45(14), STR_43(15), STR_41(14), STR_35(13), 
  7655 ;;		 -> STR_32(13), STR_30(25), STR_28(23), ESP8266_Link_Server@cCmd(120), 
  7656 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_13(14), STR_11(14), 
  7657 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@cStr(20), 
  7658 ;;  reply1          2   38[COMRAM] PTR unsigned char 
  7659 ;;		 -> STR_56(3), STR_54(3), STR_50(3), STR_48(3), 
  7660 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_36(10), 
  7661 ;;		 -> STR_33(10), STR_31(3), STR_29(3), STR_26(8), 
  7662 ;;		 -> STR_19(3), STR_16(3), STR_14(3), STR_12(3), 
  7663 ;;		 -> STR_10(3), STR_7(3), STR_5(3), STR_3(8), 
  7664 ;;		 -> STR_2(3), 
  7665 ;;  reply2          2   40[COMRAM] PTR unsigned char 
  7666 ;;		 -> STR_37(3), STR_34(3), STR_27(7), STR_17(10), 
  7667 ;;		 -> STR_8(6), NULL(0), 
  7668 ;;  waittime        2   42[COMRAM] unsigned int 
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;		None
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      unsigned char 
  7673 ;; Registers used:
  7674 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7680 ;;      Params:         8       0       0       0       0       0       0
  7681 ;;      Locals:         1       0       0       0       0       0       0
  7682 ;;      Temps:          0       0       0       0       0       0       0
  7683 ;;      Totals:         9       0       0       0       0       0       0
  7684 ;;Total ram usage:        9 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    3
  7687 ;; This function calls:
  7688 ;;		_ESP8266_Uart
  7689 ;;		_delay_ms
  7690 ;;		_strstr
  7691 ;; This function is called by:
  7692 ;;		_ESP8266_AT_Test
  7693 ;;		_ESP8266_Rst
  7694 ;;		_ESP8266_Net_Mode_Choose
  7695 ;;		_ESP8266_JoinAP
  7696 ;;		_ESP8266_Link_Server
  7697 ;;		_STA_MODE
  7698 ;;		_ESP8266_client
  7699 ;;		_ESP8266_SendString
  7700 ;;		_ESP8266_BuildAP
  7701 ;;		_set_baudrate
  7702 ;;		_AP_MODE
  7703 ;;		_ESP8266_Server
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           	psect	text31
  7708  000D3C                     __ptext31:
  7709                           	opt stack 0
  7710  000D3C                     _ESP8266_Cmd:
  7711                           	opt stack 24
  7712                           
  7713                           ;UART.c: 88: test_index=0;
  7714                           
  7715                           ;incstack = 0
  7716  000D3C  0E00               	movlw	0
  7717  000D3E  6E59               	movwf	_test_index+1,c
  7718  000D40  0E00               	movlw	0
  7719  000D42  6E58               	movwf	_test_index,c
  7720                           
  7721                           ;UART.c: 89: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  7722  000D44  0102               	movlb	2	; () banked
  7723  000D46  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  7724  000D48  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  7725  000D4A  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  7726  000D4C  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  7727  000D4E  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  7728  000D50  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  7729  000D52  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  7730                           
  7731                           ; BSR set to: 2
  7732                           ;UART.c: 93: ESP8266_Uart( cmd);
  7733  000D54  C025  F012         	movff	ESP8266_Cmd@cmd,ESP8266_Uart@cmd
  7734  000D58  C026  F013         	movff	ESP8266_Cmd@cmd+1,ESP8266_Uart@cmd+1
  7735  000D5C  EC65  F009         	call	_ESP8266_Uart	;wreg free
  7736                           
  7737                           ;UART.c: 96: if ( ( reply1 == 0 ) && ( reply2 == 0 ) )
  7738  000D60  5027               	movf	ESP8266_Cmd@reply1,w,c
  7739  000D62  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  7740  000D64  A4D8               	btfss	status,2,c
  7741  000D66  D006               	goto	l3721
  7742  000D68  5029               	movf	ESP8266_Cmd@reply2,w,c
  7743  000D6A  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  7744  000D6C  A4D8               	btfss	status,2,c
  7745  000D6E  D002               	goto	l3721
  7746                           
  7747                           ;UART.c: 97: return 1;
  7748  000D70  0E01               	movlw	1
  7749  000D72  0012               	return	
  7750  000D74                     l3721:
  7751                           
  7752                           ;UART.c: 99: delay_ms ( waittime );
  7753  000D74  C02B  F014         	movff	ESP8266_Cmd@waittime,delay_ms@ms
  7754  000D78  C02C  F015         	movff	ESP8266_Cmd@waittime+1,delay_ms@ms+1
  7755  000D7C  EC76  F00C         	call	_delay_ms	;wreg free
  7756                           
  7757                           ;UART.c: 106: if ( ( reply1 != 0 ) && ( reply2 != 0 ) )
  7758  000D80  5027               	movf	ESP8266_Cmd@reply1,w,c
  7759  000D82  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  7760  000D84  B4D8               	btfsc	status,2,c
  7761  000D86  D022               	goto	l3739
  7762  000D88  5029               	movf	ESP8266_Cmd@reply2,w,c
  7763  000D8A  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  7764  000D8C  B4D8               	btfsc	status,2,c
  7765  000D8E  D01E               	goto	l3739
  7766                           
  7767                           ;UART.c: 107: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) || (u
      +                          8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  7768  000D90  0E01               	movlw	1
  7769  000D92  6E2D               	movwf	_ESP8266_Cmd$1210,c
  7770  000D94  0E9A               	movlw	low _strEsp8266_Fram_Record
  7771  000D96  6E21               	movwf	strstr@s1,c
  7772  000D98  0E02               	movlw	high _strEsp8266_Fram_Record
  7773  000D9A  6E22               	movwf	strstr@s1+1,c
  7774  000D9C  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  7775  000DA0  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  7776  000DA4  ECE2  F008         	call	_strstr	;wreg free
  7777  000DA8  6621               	tstfsz	?_strstr,c
  7778  000DAA  D00E               	goto	l352
  7779  000DAC  0E9A               	movlw	low _strEsp8266_Fram_Record
  7780  000DAE  6E21               	movwf	strstr@s1,c
  7781  000DB0  0E02               	movlw	high _strEsp8266_Fram_Record
  7782  000DB2  6E22               	movwf	strstr@s1+1,c
  7783  000DB4  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  7784  000DB8  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  7785  000DBC  ECE2  F008         	call	_strstr	;wreg free
  7786  000DC0  6621               	tstfsz	?_strstr,c
  7787  000DC2  D002               	goto	l352
  7788  000DC4  0E00               	movlw	0
  7789  000DC6  6E2D               	movwf	_ESP8266_Cmd$1210,c
  7790  000DC8                     l352:
  7791  000DC8  502D               	movf	_ESP8266_Cmd$1210,w,c
  7792  000DCA  0012               	return	
  7793  000DCC                     l3739:
  7794                           
  7795                           ;UART.c: 108: else if ( reply1 != 0 )
  7796  000DCC  5027               	movf	ESP8266_Cmd@reply1,w,c
  7797  000DCE  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  7798  000DD0  B4D8               	btfsc	status,2,c
  7799  000DD2  D00C               	goto	l3747
  7800                           
  7801                           ;UART.c: 109: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) );
  7802  000DD4  0E9A               	movlw	low _strEsp8266_Fram_Record
  7803  000DD6  6E21               	movwf	strstr@s1,c
  7804  000DD8  0E02               	movlw	high _strEsp8266_Fram_Record
  7805  000DDA  6E22               	movwf	strstr@s1+1,c
  7806  000DDC  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  7807  000DE0  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  7808  000DE4  ECE2  F008         	call	_strstr	;wreg free
  7809  000DE8  5021               	movf	?_strstr,w,c
  7810  000DEA  0012               	return	
  7811  000DEC                     l3747:
  7812                           
  7813                           ;UART.c: 110: else
  7814                           ;UART.c: 111: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  7815  000DEC  0E9A               	movlw	low _strEsp8266_Fram_Record
  7816  000DEE  6E21               	movwf	strstr@s1,c
  7817  000DF0  0E02               	movlw	high _strEsp8266_Fram_Record
  7818  000DF2  6E22               	movwf	strstr@s1+1,c
  7819  000DF4  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  7820  000DF8  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  7821  000DFC  ECE2  F008         	call	_strstr	;wreg free
  7822  000E00  5021               	movf	?_strstr,w,c
  7823  000E02  0012               	return	
  7824  000E04                     __end_of_ESP8266_Cmd:
  7825                           	opt stack 0
  7826                           tblptru	equ	0xFF8
  7827                           tblptrh	equ	0xFF7
  7828                           tblptrl	equ	0xFF6
  7829                           tablat	equ	0xFF5
  7830                           prodh	equ	0xFF4
  7831                           prodl	equ	0xFF3
  7832                           intcon	equ	0xFF2
  7833                           indf0	equ	0xFEF
  7834                           postinc0	equ	0xFEE
  7835                           fsr0h	equ	0xFEA
  7836                           fsr0l	equ	0xFE9
  7837                           wreg	equ	0xFE8
  7838                           postdec1	equ	0xFE5
  7839                           plusw1	equ	0xFE3
  7840                           fsr1l	equ	0xFE1
  7841                           indf2	equ	0xFDF
  7842                           postinc2	equ	0xFDE
  7843                           postdec2	equ	0xFDD
  7844                           plusw2	equ	0xFDB
  7845                           fsr2h	equ	0xFDA
  7846                           fsr2l	equ	0xFD9
  7847                           status	equ	0xFD8
  7848                           
  7849 ;; *************** function _ESP8266_Uart *****************
  7850 ;; Defined at:
  7851 ;;		line 73 in file "harwave/UART.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;  cmd             2   17[COMRAM] PTR unsigned char 
  7854 ;;		 -> STR_55(14), STR_53(15), STR_49(11), STR_47(22), 
  7855 ;;		 -> STR_45(14), STR_43(15), STR_41(14), STR_35(13), 
  7856 ;;		 -> STR_32(13), STR_30(25), STR_28(23), ESP8266_Link_Server@cCmd(120), 
  7857 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_13(14), STR_11(14), 
  7858 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@cStr(20), 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;  index           2   21[COMRAM] int 
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      void 
  7863 ;; Registers used:
  7864 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7870 ;;      Params:         2       0       0       0       0       0       0
  7871 ;;      Locals:         2       0       0       0       0       0       0
  7872 ;;      Temps:          2       0       0       0       0       0       0
  7873 ;;      Totals:         6       0       0       0       0       0       0
  7874 ;;Total ram usage:        6 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    1
  7877 ;; This function calls:
  7878 ;;		Nothing
  7879 ;; This function is called by:
  7880 ;;		_ESP8266_Cmd
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           	psect	text32
  7885  0012CA                     __ptext32:
  7886                           	opt stack 0
  7887  0012CA                     _ESP8266_Uart:
  7888                           	opt stack 25
  7889                           
  7890                           ;UART.c: 74: int index=-1;
  7891                           
  7892                           ;incstack = 0
  7893  0012CA  6816               	setf	ESP8266_Uart@index,c
  7894  0012CC  6817               	setf	ESP8266_Uart@index+1,c
  7895  0012CE                     l3683:
  7896                           
  7897                           ;UART.c: 77: {
  7898                           ;UART.c: 78: index++;
  7899  0012CE  4A16               	infsnz	ESP8266_Uart@index,f,c
  7900  0012D0  2A17               	incf	ESP8266_Uart@index+1,f,c
  7901  0012D2                     l338:
  7902  0012D2  A89E               	btfss	3998,4,c	;volatile
  7903  0012D4  D7FE               	goto	l338
  7904                           
  7905                           ;UART.c: 80: TXREG=cmd[index];
  7906  0012D6  5016               	movf	ESP8266_Uart@index,w,c
  7907  0012D8  2412               	addwf	ESP8266_Uart@cmd,w,c
  7908  0012DA  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  7909  0012DC  5017               	movf	ESP8266_Uart@index+1,w,c
  7910  0012DE  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  7911  0012E0  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  7912  0012E2  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  7913  0012E6  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  7914  0012EA  6AF8               	clrf	tblptru,c
  7915  0012EC  0E05               	movlw	(high __ramtop+-1)
  7916  0012EE  64F7               	cpfsgt	tblptrh,c
  7917  0012F0  D003               	bra	u3217
  7918  0012F2  0008               	tblrd		*
  7919  0012F4  50F5               	movf	tablat,w,c
  7920  0012F6  D005               	bra	u3210
  7921  0012F8                     u3217:
  7922  0012F8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7923  0012FC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7924  001300  50EF               	movf	indf0,w,c
  7925  001302                     u3210:
  7926  001302  6EAD               	movwf	4013,c	;volatile
  7927                           
  7928                           ;UART.c: 81: }while(cmd[index]!='\0');
  7929  001304  5016               	movf	ESP8266_Uart@index,w,c
  7930  001306  2412               	addwf	ESP8266_Uart@cmd,w,c
  7931  001308  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  7932  00130A  5017               	movf	ESP8266_Uart@index+1,w,c
  7933  00130C  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  7934  00130E  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  7935  001310  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  7936  001314  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  7937  001318  6AF8               	clrf	tblptru,c
  7938  00131A  0E05               	movlw	(high __ramtop+-1)
  7939  00131C  64F7               	cpfsgt	tblptrh,c
  7940  00131E  D003               	bra	u3227
  7941  001320  0008               	tblrd		*
  7942  001322  50F5               	movf	tablat,w,c
  7943  001324  D005               	bra	u3220
  7944  001326                     u3227:
  7945  001326  CFF6 FFE9          	movff	tblptrl,fsr0l
  7946  00132A  CFF7 FFEA          	movff	tblptrh,fsr0h
  7947  00132E  50EF               	movf	indf0,w,c
  7948  001330                     u3220:
  7949  001330  0900               	iorlw	0
  7950  001332  A4D8               	btfss	status,2,c
  7951  001334  D7CC               	goto	l3683
  7952  001336                     l342:
  7953  001336  B2AC               	btfsc	4012,1,c	;volatile
  7954  001338  0012               	return	
  7955  00133A  D7FD               	goto	l342
  7956  00133C                     __end_of_ESP8266_Uart:
  7957                           	opt stack 0
  7958                           tblptru	equ	0xFF8
  7959                           tblptrh	equ	0xFF7
  7960                           tblptrl	equ	0xFF6
  7961                           tablat	equ	0xFF5
  7962                           prodh	equ	0xFF4
  7963                           prodl	equ	0xFF3
  7964                           intcon	equ	0xFF2
  7965                           indf0	equ	0xFEF
  7966                           postinc0	equ	0xFEE
  7967                           fsr0h	equ	0xFEA
  7968                           fsr0l	equ	0xFE9
  7969                           wreg	equ	0xFE8
  7970                           postdec1	equ	0xFE5
  7971                           plusw1	equ	0xFE3
  7972                           fsr1l	equ	0xFE1
  7973                           indf2	equ	0xFDF
  7974                           postinc2	equ	0xFDE
  7975                           postdec2	equ	0xFDD
  7976                           plusw2	equ	0xFDB
  7977                           fsr2h	equ	0xFDA
  7978                           fsr2l	equ	0xFD9
  7979                           status	equ	0xFD8
  7980                           
  7981 ;; *************** function _ESP8266_ReceiveString *****************
  7982 ;; Defined at:
  7983 ;;		line 257 in file "harwave/UART.c"
  7984 ;; Parameters:    Size  Location     Type
  7985 ;;		None
  7986 ;; Auto vars:     Size  Location     Type
  7987 ;;  pRecStr         2   38[COMRAM] PTR unsigned char 
  7988 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  2   36[COMRAM] PTR unsigned char 
  7991 ;; Registers used:
  7992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7998 ;;      Params:         2       0       0       0       0       0       0
  7999 ;;      Locals:         2       0       0       0       0       0       0
  8000 ;;      Temps:          0       0       0       0       0       0       0
  8001 ;;      Totals:         4       0       0       0       0       0       0
  8002 ;;Total ram usage:        4 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    3
  8005 ;; This function calls:
  8006 ;;		_strstr
  8007 ;; This function is called by:
  8008 ;;		_main
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text33
  8013  00101C                     __ptext33:
  8014                           	opt stack 0
  8015  00101C                     _ESP8266_ReceiveString:
  8016                           	opt stack 27
  8017                           
  8018                           ;UART.c: 259: char * pRecStr = 0;
  8019                           
  8020                           ;incstack = 0
  8021  00101C  0E00               	movlw	0
  8022  00101E  6E27               	movwf	ESP8266_ReceiveString@pRecStr,c
  8023  001020  0E00               	movlw	0
  8024  001022  6E28               	movwf	ESP8266_ReceiveString@pRecStr+1,c
  8025                           
  8026                           ;UART.c: 260: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  8027  001024  0102               	movlb	2	; () banked
  8028  001026  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  8029  001028  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  8030  00102A  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  8031  00102C  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  8032  00102E  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  8033  001030  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  8034  001032  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  8035  001034                     l4379:
  8036  001034  0E9A               	movlw	low _strEsp8266_Fram_Record
  8037  001036  6E21               	movwf	strstr@s1,c
  8038  001038  0E02               	movlw	high _strEsp8266_Fram_Record
  8039  00103A  6E22               	movwf	strstr@s1+1,c
  8040  00103C  0EFB               	movlw	low STR_59
  8041  00103E  6E23               	movwf	strstr@s2,c
  8042  001040  0E7C               	movlw	high STR_59
  8043  001042  6E24               	movwf	strstr@s2+1,c
  8044  001044  ECE2  F008         	call	_strstr	;wreg free
  8045  001048  5021               	movf	?_strstr,w,c
  8046  00104A  B4D8               	btfsc	status,2,c
  8047  00104C  D7F3               	goto	l4379
  8048                           
  8049                           ;UART.c: 266: }
  8050                           ;UART.c: 267: }
  8051                           ;UART.c: 268: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  8052  00104E  0102               	movlb	2	; () banked
  8053  001050  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  8054  001052  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  8055  001054  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  8056  001056  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  8057  001058  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  8058  00105A  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  8059  00105C  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  8060                           
  8061                           ;UART.c: 269: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 0;
  8062  00105E  0102               	movlb	2	; () banked
  8063  001060  9FCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),7,b
  8064  001062                     l4381:
  8065  001062  0E9A               	movlw	low _strEsp8266_Fram_Record
  8066  001064  6E21               	movwf	strstr@s1,c
  8067  001066  0E02               	movlw	high _strEsp8266_Fram_Record
  8068  001068  6E22               	movwf	strstr@s1+1,c
  8069  00106A  0EF9               	movlw	low STR_60
  8070  00106C  6E23               	movwf	strstr@s2,c
  8071  00106E  0E7C               	movlw	high STR_60
  8072  001070  6E24               	movwf	strstr@s2+1,c
  8073  001072  ECE2  F008         	call	_strstr	;wreg free
  8074  001076  5021               	movf	?_strstr,w,c
  8075  001078  1022               	iorwf	?_strstr+1,w,c
  8076  00107A  B4D8               	btfsc	status,2,c
  8077  00107C  D7F2               	goto	l4381
  8078                           
  8079                           ;UART.c: 271: if ( strstr ( strEsp8266_Fram_Record .Data_RX_BUF, "\0" ) )
  8080  00107E  0E9A               	movlw	low _strEsp8266_Fram_Record
  8081  001080  6E21               	movwf	strstr@s1,c
  8082  001082  0E02               	movlw	high _strEsp8266_Fram_Record
  8083  001084  6E22               	movwf	strstr@s1+1,c
  8084  001086  0EF9               	movlw	low STR_60
  8085  001088  6E23               	movwf	strstr@s2,c
  8086  00108A  0E7C               	movlw	high STR_60
  8087  00108C  6E24               	movwf	strstr@s2+1,c
  8088  00108E  ECE2  F008         	call	_strstr	;wreg free
  8089  001092  5021               	movf	?_strstr,w,c
  8090  001094  1022               	iorwf	?_strstr+1,w,c
  8091  001096  B4D8               	btfsc	status,2,c
  8092  001098  D004               	goto	l463
  8093                           
  8094                           ;UART.c: 272: pRecStr = strEsp8266_Fram_Record .Data_RX_BUF;
  8095  00109A  0E9A               	movlw	low _strEsp8266_Fram_Record
  8096  00109C  6E27               	movwf	ESP8266_ReceiveString@pRecStr,c
  8097  00109E  0E02               	movlw	high _strEsp8266_Fram_Record
  8098  0010A0  6E28               	movwf	ESP8266_ReceiveString@pRecStr+1,c
  8099  0010A2                     l463:
  8100                           
  8101                           ;UART.c: 275: return pRecStr;
  8102  0010A2  C027  F025         	movff	ESP8266_ReceiveString@pRecStr,?_ESP8266_ReceiveString
  8103  0010A6  C028  F026         	movff	ESP8266_ReceiveString@pRecStr+1,?_ESP8266_ReceiveString+1
  8104  0010AA  0012               	return	
  8105  0010AC                     __end_of_ESP8266_ReceiveString:
  8106                           	opt stack 0
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           intcon	equ	0xFF2
  8114                           indf0	equ	0xFEF
  8115                           postinc0	equ	0xFEE
  8116                           fsr0h	equ	0xFEA
  8117                           fsr0l	equ	0xFE9
  8118                           wreg	equ	0xFE8
  8119                           postdec1	equ	0xFE5
  8120                           plusw1	equ	0xFE3
  8121                           fsr1l	equ	0xFE1
  8122                           indf2	equ	0xFDF
  8123                           postinc2	equ	0xFDE
  8124                           postdec2	equ	0xFDD
  8125                           plusw2	equ	0xFDB
  8126                           fsr2h	equ	0xFDA
  8127                           fsr2l	equ	0xFD9
  8128                           status	equ	0xFD8
  8129                           
  8130 ;; *************** function _strstr *****************
  8131 ;; Defined at:
  8132 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strstr.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;  s1              2   32[COMRAM] PTR const unsigned char 
  8135 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8136 ;;  s2              2   34[COMRAM] PTR const unsigned char 
  8137 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8138 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8139 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8140 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8141 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8142 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8143 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8144 ;;		 -> STR_2(3), NULL(0), 
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;		None
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  2   32[COMRAM] PTR unsigned char 
  8149 ;; Registers used:
  8150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8156 ;;      Params:         4       0       0       0       0       0       0
  8157 ;;      Locals:         0       0       0       0       0       0       0
  8158 ;;      Temps:          0       0       0       0       0       0       0
  8159 ;;      Totals:         4       0       0       0       0       0       0
  8160 ;;Total ram usage:        4 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    2
  8163 ;; This function calls:
  8164 ;;		_strchr
  8165 ;;		_strlen
  8166 ;;		_strncmp
  8167 ;; This function is called by:
  8168 ;;		_ESP8266_Cmd
  8169 ;;		_ESP8266_ReceiveString
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           	psect	text34
  8174  0011C4                     __ptext34:
  8175                           	opt stack 0
  8176  0011C4                     _strstr:
  8177                           	opt stack 24
  8178                           
  8179                           ;incstack = 0
  8180  0011C4  D031               	goto	l3697
  8181  0011C6                     l3689:
  8182  0011C6  C021  F018         	movff	strstr@s1,strncmp@s1
  8183  0011CA  C022  F019         	movff	strstr@s1+1,strncmp@s1+1
  8184  0011CE  C023  F01A         	movff	strstr@s2,strncmp@s2
  8185  0011D2  C024  F01B         	movff	strstr@s2+1,strncmp@s2+1
  8186  0011D6  C023  F012         	movff	strstr@s2,strlen@s
  8187  0011DA  C024  F013         	movff	strstr@s2+1,strlen@s+1
  8188  0011DE  ECAB  F00A         	call	_strlen	;wreg free
  8189  0011E2  C012  F01C         	movff	?_strlen,strncmp@len
  8190  0011E6  C013  F01D         	movff	?_strlen+1,strncmp@len+1
  8191  0011EA  EC24  F009         	call	_strncmp	;wreg free
  8192  0011EE  5018               	movf	?_strncmp,w,c
  8193  0011F0  1019               	iorwf	?_strncmp+1,w,c
  8194  0011F2  A4D8               	btfss	status,2,c
  8195  0011F4  D005               	goto	l3695
  8196  0011F6  C021  F021         	movff	strstr@s1,?_strstr
  8197  0011FA  C022  F022         	movff	strstr@s1+1,?_strstr+1
  8198  0011FE  0012               	return	
  8199  001200                     l3695:
  8200  001200  0E01               	movlw	1
  8201  001202  2421               	addwf	strstr@s1,w,c
  8202  001204  6E12               	movwf	strchr@ptr,c
  8203  001206  0E00               	movlw	0
  8204  001208  2022               	addwfc	strstr@s1+1,w,c
  8205  00120A  6E13               	movwf	strchr@ptr+1,c
  8206  00120C  C023  FFF6         	movff	strstr@s2,tblptrl
  8207  001210  C024  FFF7         	movff	strstr@s2+1,tblptrh
  8208  001214                     	if	0	;tblptru may be non-zero
  8209  001214                     	endif
  8210  001214                     	if	0	;tblptru may be non-zero
  8211  001214                     	endif
  8212  001214  0008               	tblrd		*
  8213  001216  50F5               	movf	tablat,w,c
  8214  001218  6E14               	movwf	strchr@chr,c
  8215  00121A  6A15               	clrf	strchr@chr+1,c
  8216  00121C  EC02  F00B         	call	_strchr	;wreg free
  8217  001220  C012  F021         	movff	?_strchr,strstr@s1
  8218  001224  C013  F022         	movff	?_strchr+1,strstr@s1+1
  8219  001228                     l3697:
  8220  001228  5021               	movf	strstr@s1,w,c
  8221  00122A  1022               	iorwf	strstr@s1+1,w,c
  8222  00122C  B4D8               	btfsc	status,2,c
  8223  00122E  D007               	goto	l3701
  8224  001230  C021  FFD9         	movff	strstr@s1,fsr2l
  8225  001234  C022  FFDA         	movff	strstr@s1+1,fsr2h
  8226  001238  50DF               	movf	indf2,w,c
  8227  00123A  A4D8               	btfss	status,2,c
  8228  00123C  D7C4               	goto	l3689
  8229  00123E                     l3701:
  8230  00123E  0E00               	movlw	0
  8231  001240  6E21               	movwf	?_strstr,c
  8232  001242  0E00               	movlw	0
  8233  001244  6E22               	movwf	?_strstr+1,c
  8234  001246  0012               	return	
  8235  001248                     __end_of_strstr:
  8236                           	opt stack 0
  8237                           tblptru	equ	0xFF8
  8238                           tblptrh	equ	0xFF7
  8239                           tblptrl	equ	0xFF6
  8240                           tablat	equ	0xFF5
  8241                           prodh	equ	0xFF4
  8242                           prodl	equ	0xFF3
  8243                           intcon	equ	0xFF2
  8244                           indf0	equ	0xFEF
  8245                           postinc0	equ	0xFEE
  8246                           fsr0h	equ	0xFEA
  8247                           fsr0l	equ	0xFE9
  8248                           wreg	equ	0xFE8
  8249                           postdec1	equ	0xFE5
  8250                           plusw1	equ	0xFE3
  8251                           fsr1l	equ	0xFE1
  8252                           indf2	equ	0xFDF
  8253                           postinc2	equ	0xFDE
  8254                           postdec2	equ	0xFDD
  8255                           plusw2	equ	0xFDB
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function _strncmp *****************
  8261 ;; Defined at:
  8262 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  8265 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8266 ;;  s2              2   25[COMRAM] PTR const unsigned char 
  8267 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8268 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8269 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8270 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8271 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8272 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8273 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8274 ;;		 -> STR_2(3), NULL(0), 
  8275 ;;  len             2   27[COMRAM] unsigned int 
  8276 ;; Auto vars:     Size  Location     Type
  8277 ;;		None
  8278 ;; Return value:  Size  Location     Type
  8279 ;;                  2   23[COMRAM] int 
  8280 ;; Registers used:
  8281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8287 ;;      Params:         6       0       0       0       0       0       0
  8288 ;;      Locals:         0       0       0       0       0       0       0
  8289 ;;      Temps:          3       0       0       0       0       0       0
  8290 ;;      Totals:         9       0       0       0       0       0       0
  8291 ;;Total ram usage:        9 bytes
  8292 ;; Hardware stack levels used:    1
  8293 ;; Hardware stack levels required when called:    1
  8294 ;; This function calls:
  8295 ;;		Nothing
  8296 ;; This function is called by:
  8297 ;;		_strstr
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           	psect	text35
  8302  001248                     __ptext35:
  8303                           	opt stack 0
  8304  001248                     _strncmp:
  8305                           	opt stack 24
  8306                           
  8307                           ;incstack = 0
  8308  001248  D033               	goto	l3657
  8309  00124A                     l3647:
  8310  00124A  C018  FFD9         	movff	strncmp@s1,fsr2l
  8311  00124E  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  8312  001252  50DF               	movf	indf2,w,c
  8313  001254  B4D8               	btfsc	status,2,c
  8314  001256  D00F               	goto	l3651
  8315  001258  C018  FFD9         	movff	strncmp@s1,fsr2l
  8316  00125C  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  8317  001260  50DF               	movf	indf2,w,c
  8318  001262  6E1E               	movwf	??_strncmp& (0+255),c
  8319  001264  C01A  FFF6         	movff	strncmp@s2,tblptrl
  8320  001268  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  8321  00126C                     	if	0	;tblptru may be non-zero
  8322  00126C                     	endif
  8323  00126C                     	if	0	;tblptru may be non-zero
  8324  00126C                     	endif
  8325  00126C  0008               	tblrd		*
  8326  00126E  50F5               	movf	tablat,w,c
  8327  001270  181E               	xorwf	??_strncmp,w,c
  8328  001272  B4D8               	btfsc	status,2,c
  8329  001274  D019               	goto	l3655
  8330  001276                     l3651:
  8331  001276  C01A  FFF6         	movff	strncmp@s2,tblptrl
  8332  00127A  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  8333  00127E                     	if	0	;tblptru may be non-zero
  8334  00127E                     	endif
  8335  00127E                     	if	0	;tblptru may be non-zero
  8336  00127E                     	endif
  8337  00127E  0008               	tblrd		*
  8338  001280  50F5               	movf	tablat,w,c
  8339  001282  6E1E               	movwf	??_strncmp& (0+255),c
  8340  001284  6A1F               	clrf	(??_strncmp+1)& (0+255),c
  8341  001286  1E1E               	comf	??_strncmp,f,c
  8342  001288  1E1F               	comf	??_strncmp+1,f,c
  8343  00128A  4A1E               	infsnz	??_strncmp,f,c
  8344  00128C  2A1F               	incf	??_strncmp+1,f,c
  8345  00128E  C018  FFD9         	movff	strncmp@s1,fsr2l
  8346  001292  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  8347  001296  50DF               	movf	indf2,w,c
  8348  001298  6E20               	movwf	(??_strncmp+2)& (0+255),c
  8349  00129A  5020               	movf	??_strncmp+2,w,c
  8350  00129C  241E               	addwf	??_strncmp,w,c
  8351  00129E  6E18               	movwf	?_strncmp,c
  8352  0012A0  0E00               	movlw	0
  8353  0012A2  201F               	addwfc	??_strncmp+1,w,c
  8354  0012A4  6E19               	movwf	?_strncmp+1,c
  8355  0012A6  0012               	return	
  8356  0012A8                     l3655:
  8357  0012A8  4A18               	infsnz	strncmp@s1,f,c
  8358  0012AA  2A19               	incf	strncmp@s1+1,f,c
  8359  0012AC  4A1A               	infsnz	strncmp@s2,f,c
  8360  0012AE  2A1B               	incf	strncmp@s2+1,f,c
  8361  0012B0                     l3657:
  8362  0012B0  061C               	decf	strncmp@len,f,c
  8363  0012B2  A0D8               	btfss	status,0,c
  8364  0012B4  061D               	decf	strncmp@len+1,f,c
  8365  0012B6  281C               	incf	strncmp@len,w,c
  8366  0012B8  E1C8               	bnz	l3647
  8367  0012BA  281D               	incf	strncmp@len+1,w,c
  8368  0012BC  A4D8               	btfss	status,2,c
  8369  0012BE  D7C5               	goto	l3647
  8370  0012C0  0E00               	movlw	0
  8371  0012C2  6E19               	movwf	?_strncmp+1,c
  8372  0012C4  0E00               	movlw	0
  8373  0012C6  6E18               	movwf	?_strncmp,c
  8374  0012C8  0012               	return	
  8375  0012CA                     __end_of_strncmp:
  8376                           	opt stack 0
  8377                           tblptru	equ	0xFF8
  8378                           tblptrh	equ	0xFF7
  8379                           tblptrl	equ	0xFF6
  8380                           tablat	equ	0xFF5
  8381                           prodh	equ	0xFF4
  8382                           prodl	equ	0xFF3
  8383                           intcon	equ	0xFF2
  8384                           indf0	equ	0xFEF
  8385                           postinc0	equ	0xFEE
  8386                           fsr0h	equ	0xFEA
  8387                           fsr0l	equ	0xFE9
  8388                           wreg	equ	0xFE8
  8389                           postdec1	equ	0xFE5
  8390                           plusw1	equ	0xFE3
  8391                           fsr1l	equ	0xFE1
  8392                           indf2	equ	0xFDF
  8393                           postinc2	equ	0xFDE
  8394                           postdec2	equ	0xFDD
  8395                           plusw2	equ	0xFDB
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function _strlen *****************
  8401 ;; Defined at:
  8402 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;  s               2   17[COMRAM] PTR const unsigned char 
  8405 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8406 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8407 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8408 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8409 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8410 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8411 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8412 ;;		 -> STR_2(3), NULL(0), 
  8413 ;; Auto vars:     Size  Location     Type
  8414 ;;  cp              2   21[COMRAM] PTR const unsigned char 
  8415 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8416 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8417 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8418 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8419 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8420 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8421 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8422 ;;		 -> STR_2(3), NULL(0), 
  8423 ;; Return value:  Size  Location     Type
  8424 ;;                  2   17[COMRAM] unsigned int 
  8425 ;; Registers used:
  8426 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  8427 ;; Tracked objects:
  8428 ;;		On entry : 0/0
  8429 ;;		On exit  : 0/0
  8430 ;;		Unchanged: 0/0
  8431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8432 ;;      Params:         2       0       0       0       0       0       0
  8433 ;;      Locals:         2       0       0       0       0       0       0
  8434 ;;      Temps:          2       0       0       0       0       0       0
  8435 ;;      Totals:         6       0       0       0       0       0       0
  8436 ;;Total ram usage:        6 bytes
  8437 ;; Hardware stack levels used:    1
  8438 ;; Hardware stack levels required when called:    1
  8439 ;; This function calls:
  8440 ;;		Nothing
  8441 ;; This function is called by:
  8442 ;;		_strstr
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           	psect	text36
  8447  001556                     __ptext36:
  8448                           	opt stack 0
  8449  001556                     _strlen:
  8450                           	opt stack 24
  8451                           
  8452                           ;incstack = 0
  8453  001556  C012  F016         	movff	strlen@s,strlen@cp
  8454  00155A  C013  F017         	movff	strlen@s+1,strlen@cp+1
  8455  00155E  D002               	goto	l3639
  8456  001560                     l3637:
  8457  001560  4A16               	infsnz	strlen@cp,f,c
  8458  001562  2A17               	incf	strlen@cp+1,f,c
  8459  001564                     l3639:
  8460  001564  C016  FFF6         	movff	strlen@cp,tblptrl
  8461  001568  C017  FFF7         	movff	strlen@cp+1,tblptrh
  8462  00156C                     	if	0	;tblptru may be non-zero
  8463  00156C                     	endif
  8464  00156C                     	if	0	;tblptru may be non-zero
  8465  00156C                     	endif
  8466  00156C  0008               	tblrd		*
  8467  00156E  50F5               	movf	tablat,w,c
  8468  001570  0900               	iorlw	0
  8469  001572  A4D8               	btfss	status,2,c
  8470  001574  D7F5               	goto	l3637
  8471  001576  C012  F014         	movff	strlen@s,??_strlen
  8472  00157A  C013  F015         	movff	strlen@s+1,??_strlen+1
  8473  00157E  1E14               	comf	??_strlen,f,c
  8474  001580  1E15               	comf	??_strlen+1,f,c
  8475  001582  4A14               	infsnz	??_strlen,f,c
  8476  001584  2A15               	incf	??_strlen+1,f,c
  8477  001586  5016               	movf	strlen@cp,w,c
  8478  001588  2414               	addwf	??_strlen,w,c
  8479  00158A  6E12               	movwf	?_strlen,c
  8480  00158C  5017               	movf	strlen@cp+1,w,c
  8481  00158E  2015               	addwfc	??_strlen+1,w,c
  8482  001590  6E13               	movwf	?_strlen+1,c
  8483  001592  0012               	return	
  8484  001594                     __end_of_strlen:
  8485                           	opt stack 0
  8486                           tblptru	equ	0xFF8
  8487                           tblptrh	equ	0xFF7
  8488                           tblptrl	equ	0xFF6
  8489                           tablat	equ	0xFF5
  8490                           prodh	equ	0xFF4
  8491                           prodl	equ	0xFF3
  8492                           intcon	equ	0xFF2
  8493                           indf0	equ	0xFEF
  8494                           postinc0	equ	0xFEE
  8495                           fsr0h	equ	0xFEA
  8496                           fsr0l	equ	0xFE9
  8497                           wreg	equ	0xFE8
  8498                           postdec1	equ	0xFE5
  8499                           plusw1	equ	0xFE3
  8500                           fsr1l	equ	0xFE1
  8501                           indf2	equ	0xFDF
  8502                           postinc2	equ	0xFDE
  8503                           postdec2	equ	0xFDD
  8504                           plusw2	equ	0xFDB
  8505                           fsr2h	equ	0xFDA
  8506                           fsr2l	equ	0xFD9
  8507                           status	equ	0xFD8
  8508                           
  8509 ;; *************** function _strchr *****************
  8510 ;; Defined at:
  8511 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strchr.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;  ptr             2   17[COMRAM] PTR const unsigned char 
  8514 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8515 ;;  chr             2   19[COMRAM] int 
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;		None
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  2   17[COMRAM] PTR unsigned char 
  8520 ;; Registers used:
  8521 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8527 ;;      Params:         4       0       0       0       0       0       0
  8528 ;;      Locals:         0       0       0       0       0       0       0
  8529 ;;      Temps:          1       0       0       0       0       0       0
  8530 ;;      Totals:         5       0       0       0       0       0       0
  8531 ;;Total ram usage:        5 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:    1
  8534 ;; This function calls:
  8535 ;;		Nothing
  8536 ;; This function is called by:
  8537 ;;		_strstr
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           	psect	text37
  8542  001604                     __ptext37:
  8543                           	opt stack 0
  8544  001604                     _strchr:
  8545                           	opt stack 24
  8546  001604  C012  FFD9         	movff	strchr@ptr,fsr2l
  8547  001608  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  8548  00160C  5014               	movf	strchr@chr,w,c
  8549  00160E  18DE               	xorwf	postinc2,w,c
  8550  001610  A4D8               	btfss	status,2,c
  8551  001612  D005               	goto	l3669
  8552  001614  C012  F012         	movff	strchr@ptr,?_strchr
  8553  001618  C013  F013         	movff	strchr@ptr+1,?_strchr+1
  8554  00161C  0012               	return	
  8555  00161E                     l3669:
  8556  00161E  C012  FFD9         	movff	strchr@ptr,fsr2l
  8557  001622  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  8558  001626  4A12               	infsnz	strchr@ptr,f,c
  8559  001628  2A13               	incf	strchr@ptr+1,f,c
  8560  00162A  50DF               	movf	indf2,w,c
  8561  00162C  A4D8               	btfss	status,2,c
  8562  00162E  D7EA               	goto	l3663
  8563  001630  0E00               	movlw	0
  8564  001632  6E12               	movwf	?_strchr,c
  8565  001634  0E00               	movlw	0
  8566  001636  6E13               	movwf	?_strchr+1,c
  8567  001638  0012               	return	
  8568  00163A                     __end_of_strchr:
  8569                           	opt stack 0
  8570                           tblptru	equ	0xFF8
  8571                           tblptrh	equ	0xFF7
  8572                           tblptrl	equ	0xFF6
  8573                           tablat	equ	0xFF5
  8574                           prodh	equ	0xFF4
  8575                           prodl	equ	0xFF3
  8576                           intcon	equ	0xFF2
  8577                           indf0	equ	0xFEF
  8578                           postinc0	equ	0xFEE
  8579                           fsr0h	equ	0xFEA
  8580                           fsr0l	equ	0xFE9
  8581                           wreg	equ	0xFE8
  8582                           postdec1	equ	0xFE5
  8583                           plusw1	equ	0xFE3
  8584                           fsr1l	equ	0xFE1
  8585                           indf2	equ	0xFDF
  8586                           postinc2	equ	0xFDE
  8587                           postdec2	equ	0xFDD
  8588                           plusw2	equ	0xFDB
  8589                           fsr2h	equ	0xFDA
  8590                           fsr2l	equ	0xFD9
  8591                           status	equ	0xFD8
  8592                           
  8593 ;; *************** function _ADtoPWM *****************
  8594 ;; Defined at:
  8595 ;;		line 16 in file "harwave/flex.c"
  8596 ;; Parameters:    Size  Location     Type
  8597 ;;  AD              2   35[COMRAM] PTR unsigned char 
  8598 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;  w4              2   43[COMRAM] unsigned int 
  8601 ;;  u4              2   41[COMRAM] unsigned int 
  8602 ;;  w3              2    0        unsigned int 
  8603 ;;  w2              2    0        unsigned int 
  8604 ;;  w1              2    0        unsigned int 
  8605 ;;  w0              2    0        unsigned int 
  8606 ;;  u3              2    0        unsigned int 
  8607 ;;  u2              2    0        unsigned int 
  8608 ;;  u1              2    0        unsigned int 
  8609 ;;  u0              2    0        unsigned int 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  1    wreg      void 
  8612 ;; Registers used:
  8613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8619 ;;      Params:         2       0       0       0       0       0       0
  8620 ;;      Locals:         4       0       0       0       0       0       0
  8621 ;;      Temps:          4       0       0       0       0       0       0
  8622 ;;      Totals:        10       0       0       0       0       0       0
  8623 ;;Total ram usage:       10 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    8
  8626 ;; This function calls:
  8627 ;;		_PWMt0PCA
  8628 ;; This function is called by:
  8629 ;;		_main
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           	psect	text38
  8634  000EC8                     __ptext38:
  8635                           	opt stack 0
  8636  000EC8                     _ADtoPWM:
  8637                           	opt stack 22
  8638                           
  8639                           ;flex.c: 17: u16 u0,u1,u2,u3,u4,w0,w1,w2,w3,w4;
  8640                           ;flex.c: 25: if(*(AD+9)>=136)
  8641                           
  8642                           ;incstack = 0
  8643  000EC8  EE20 F009          	lfsr	2,9
  8644  000ECC  5024               	movf	ADtoPWM@AD,w,c
  8645  000ECE  26D9               	addwf	fsr2l,f,c
  8646  000ED0  5025               	movf	ADtoPWM@AD+1,w,c
  8647  000ED2  22DA               	addwfc	fsr2h,f,c
  8648  000ED4  0E87               	movlw	135
  8649  000ED6  64DF               	cpfsgt	indf2,c
  8650  000ED8  D020               	goto	l4289
  8651                           
  8652                           ;flex.c: 26: w4=finger_under_4[*(AD+9)-136];
  8653  000EDA  0EF0               	movlw	240
  8654  000EDC  6E26               	movwf	??_ADtoPWM& (0+255),c
  8655  000EDE  0EFE               	movlw	254
  8656  000EE0  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  8657  000EE2  EE20 F009          	lfsr	2,9
  8658  000EE6  5024               	movf	ADtoPWM@AD,w,c
  8659  000EE8  26D9               	addwf	fsr2l,f,c
  8660  000EEA  5025               	movf	ADtoPWM@AD+1,w,c
  8661  000EEC  22DA               	addwfc	fsr2h,f,c
  8662  000EEE  50DF               	movf	indf2,w,c
  8663  000EF0  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  8664  000EF2  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  8665  000EF4  90D8               	bcf	status,0,c
  8666  000EF6  3628               	rlcf	??_ADtoPWM+2,f,c
  8667  000EF8  3629               	rlcf	??_ADtoPWM+3,f,c
  8668  000EFA  5026               	movf	??_ADtoPWM,w,c
  8669  000EFC  2628               	addwf	??_ADtoPWM+2,f,c
  8670  000EFE  5027               	movf	??_ADtoPWM+1,w,c
  8671  000F00  2229               	addwfc	??_ADtoPWM+3,f,c
  8672  000F02  0E0F               	movlw	low _finger_under_4
  8673  000F04  2428               	addwf	??_ADtoPWM+2,w,c
  8674  000F06  6EF6               	movwf	tblptrl,c
  8675  000F08  0E76               	movlw	high _finger_under_4
  8676  000F0A  2029               	addwfc	??_ADtoPWM+3,w,c
  8677  000F0C  6EF7               	movwf	tblptrh,c
  8678  000F0E                     	if	0	;There are less than 3 active tblptr bytes
  8679  000F0E                     	endif
  8680  000F0E  0009               	tblrd		*+
  8681  000F10  CFF5 F02C          	movff	tablat,ADtoPWM@w4
  8682  000F14  000A               	tblrd		*-
  8683  000F16  CFF5 F02D          	movff	tablat,ADtoPWM@w4+1
  8684  000F1A                     l4289:
  8685                           
  8686                           ;flex.c: 34: if(*(AD+8)>=105)
  8687  000F1A  EE20 F008          	lfsr	2,8
  8688  000F1E  5024               	movf	ADtoPWM@AD,w,c
  8689  000F20  26D9               	addwf	fsr2l,f,c
  8690  000F22  5025               	movf	ADtoPWM@AD+1,w,c
  8691  000F24  22DA               	addwfc	fsr2h,f,c
  8692  000F26  0E68               	movlw	104
  8693  000F28  64DF               	cpfsgt	indf2,c
  8694  000F2A  D020               	goto	l4293
  8695                           
  8696                           ;flex.c: 35: u4=finger_up_4[*(AD+8)-105];
  8697  000F2C  0E2E               	movlw	46
  8698  000F2E  6E26               	movwf	??_ADtoPWM& (0+255),c
  8699  000F30  0EFF               	movlw	255
  8700  000F32  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  8701  000F34  EE20 F008          	lfsr	2,8
  8702  000F38  5024               	movf	ADtoPWM@AD,w,c
  8703  000F3A  26D9               	addwf	fsr2l,f,c
  8704  000F3C  5025               	movf	ADtoPWM@AD+1,w,c
  8705  000F3E  22DA               	addwfc	fsr2h,f,c
  8706  000F40  50DF               	movf	indf2,w,c
  8707  000F42  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  8708  000F44  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  8709  000F46  90D8               	bcf	status,0,c
  8710  000F48  3628               	rlcf	??_ADtoPWM+2,f,c
  8711  000F4A  3629               	rlcf	??_ADtoPWM+3,f,c
  8712  000F4C  5026               	movf	??_ADtoPWM,w,c
  8713  000F4E  2628               	addwf	??_ADtoPWM+2,f,c
  8714  000F50  5027               	movf	??_ADtoPWM+1,w,c
  8715  000F52  2229               	addwfc	??_ADtoPWM+3,f,c
  8716  000F54  0EBB               	movlw	low _finger_up_4
  8717  000F56  2428               	addwf	??_ADtoPWM+2,w,c
  8718  000F58  6EF6               	movwf	tblptrl,c
  8719  000F5A  0E72               	movlw	high _finger_up_4
  8720  000F5C  2029               	addwfc	??_ADtoPWM+3,w,c
  8721  000F5E  6EF7               	movwf	tblptrh,c
  8722  000F60                     	if	0	;There are less than 3 active tblptr bytes
  8723  000F60                     	endif
  8724  000F60  0009               	tblrd		*+
  8725  000F62  CFF5 F02A          	movff	tablat,ADtoPWM@u4
  8726  000F66  000A               	tblrd		*-
  8727  000F68  CFF5 F02B          	movff	tablat,ADtoPWM@u4+1
  8728  000F6C                     l4293:
  8729                           
  8730                           ;flex.c: 43: PWMt0PCA(u4,w4,pink);
  8731  000F6C  C02A  F01F         	movff	ADtoPWM@u4,PWMt0PCA@up
  8732  000F70  C02B  F020         	movff	ADtoPWM@u4+1,PWMt0PCA@up+1
  8733  000F74  C02C  F021         	movff	ADtoPWM@w4,PWMt0PCA@low
  8734  000F78  C02D  F022         	movff	ADtoPWM@w4+1,PWMt0PCA@low+1
  8735  000F7C  0E04               	movlw	4
  8736  000F7E  6E23               	movwf	PWMt0PCA@finger,c
  8737  000F80  EC12  F005         	call	_PWMt0PCA	;wreg free
  8738  000F84  0012               	return		;funcret
  8739  000F86                     __end_of_ADtoPWM:
  8740                           	opt stack 0
  8741                           tblptru	equ	0xFF8
  8742                           tblptrh	equ	0xFF7
  8743                           tblptrl	equ	0xFF6
  8744                           tablat	equ	0xFF5
  8745                           prodh	equ	0xFF4
  8746                           prodl	equ	0xFF3
  8747                           intcon	equ	0xFF2
  8748                           indf0	equ	0xFEF
  8749                           postinc0	equ	0xFEE
  8750                           fsr0h	equ	0xFEA
  8751                           fsr0l	equ	0xFE9
  8752                           wreg	equ	0xFE8
  8753                           postdec1	equ	0xFE5
  8754                           plusw1	equ	0xFE3
  8755                           fsr1l	equ	0xFE1
  8756                           indf2	equ	0xFDF
  8757                           postinc2	equ	0xFDE
  8758                           postdec2	equ	0xFDD
  8759                           plusw2	equ	0xFDB
  8760                           fsr2h	equ	0xFDA
  8761                           fsr2l	equ	0xFD9
  8762                           status	equ	0xFD8
  8763                           
  8764 ;; *************** function _PWMt0PCA *****************
  8765 ;; Defined at:
  8766 ;;		line 47 in file "harwave/flex.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  up              2   30[COMRAM] unsigned int 
  8769 ;;  low             2   32[COMRAM] unsigned int 
  8770 ;;  finger          1   34[COMRAM] enum E3769
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;		None
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  1    wreg      void 
  8775 ;; Registers used:
  8776 ;;		wreg, status,2, status,0, cstack
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8782 ;;      Params:         5       0       0       0       0       0       0
  8783 ;;      Locals:         0       0       0       0       0       0       0
  8784 ;;      Temps:          0       0       0       0       0       0       0
  8785 ;;      Totals:         5       0       0       0       0       0       0
  8786 ;;Total ram usage:        5 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    7
  8789 ;; This function calls:
  8790 ;;		_transmit_finger
  8791 ;; This function is called by:
  8792 ;;		_ADtoPWM
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           	psect	text39
  8797  000A24                     __ptext39:
  8798                           	opt stack 0
  8799  000A24                     _PWMt0PCA:
  8800                           	opt stack 22
  8801                           
  8802                           ;flex.c: 48: switch (finger){
  8803                           
  8804                           ;incstack = 0
  8805  000A24  D080               	goto	l4233
  8806  000A26                     l4201:
  8807                           
  8808                           ;flex.c: 50: if( up > 0 )
  8809  000A26  501F               	movf	PWMt0PCA@up,w,c
  8810  000A28  1020               	iorwf	PWMt0PCA@up+1,w,c
  8811  000A2A  B4D8               	btfsc	status,2,c
  8812  000A2C  D009               	goto	l4205
  8813                           
  8814                           ;flex.c: 51: transmit_finger(up ,0x06 );
  8815  000A2E  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8816  000A32  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8817  000A36  0E06               	movlw	6
  8818  000A38  6E1C               	movwf	transmit_finger@finger,c
  8819  000A3A  EC1D  F00B         	call	_transmit_finger	;wreg free
  8820  000A3E  0012               	return	
  8821  000A40                     l4205:
  8822                           
  8823                           ;flex.c: 52: else
  8824                           ;flex.c: 53: transmit_finger( up+low , 0x06 );
  8825  000A40  5021               	movf	PWMt0PCA@low,w,c
  8826  000A42  241F               	addwf	PWMt0PCA@up,w,c
  8827  000A44  6E1A               	movwf	transmit_finger@HL_Value,c
  8828  000A46  5022               	movf	PWMt0PCA@low+1,w,c
  8829  000A48  2020               	addwfc	PWMt0PCA@up+1,w,c
  8830  000A4A  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8831  000A4C  0E06               	movlw	6
  8832  000A4E  6E1C               	movwf	transmit_finger@finger,c
  8833  000A50  EC1D  F00B         	call	_transmit_finger	;wreg free
  8834                           
  8835                           ;flex.c: 54: break;
  8836  000A54  0012               	return	
  8837  000A56                     l4207:
  8838                           
  8839                           ;flex.c: 56: if( up <= 1651 )
  8840  000A56  0E74               	movlw	116
  8841  000A58  5C1F               	subwf	PWMt0PCA@up,w,c
  8842  000A5A  0E06               	movlw	6
  8843  000A5C  5820               	subwfb	PWMt0PCA@up+1,w,c
  8844  000A5E  B0D8               	btfsc	status,0,c
  8845  000A60  D009               	goto	l4211
  8846                           
  8847                           ;flex.c: 57: transmit_finger(up ,0x0A );
  8848  000A62  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8849  000A66  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8850  000A6A  0E0A               	movlw	10
  8851  000A6C  6E1C               	movwf	transmit_finger@finger,c
  8852  000A6E  EC1D  F00B         	call	_transmit_finger	;wreg free
  8853  000A72  0012               	return	
  8854  000A74                     l4211:
  8855                           
  8856                           ;flex.c: 58: else
  8857                           ;flex.c: 59: transmit_finger( up+low , 0x0A );
  8858  000A74  5021               	movf	PWMt0PCA@low,w,c
  8859  000A76  241F               	addwf	PWMt0PCA@up,w,c
  8860  000A78  6E1A               	movwf	transmit_finger@HL_Value,c
  8861  000A7A  5022               	movf	PWMt0PCA@low+1,w,c
  8862  000A7C  2020               	addwfc	PWMt0PCA@up+1,w,c
  8863  000A7E  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8864  000A80  0E0A               	movlw	10
  8865  000A82  6E1C               	movwf	transmit_finger@finger,c
  8866  000A84  EC1D  F00B         	call	_transmit_finger	;wreg free
  8867                           
  8868                           ;flex.c: 60: break;
  8869  000A88  0012               	return	
  8870  000A8A                     l4213:
  8871                           
  8872                           ;flex.c: 62: if( up <= 2000 )
  8873  000A8A  0ED1               	movlw	209
  8874  000A8C  5C1F               	subwf	PWMt0PCA@up,w,c
  8875  000A8E  0E07               	movlw	7
  8876  000A90  5820               	subwfb	PWMt0PCA@up+1,w,c
  8877  000A92  B0D8               	btfsc	status,0,c
  8878  000A94  D009               	goto	l4217
  8879                           
  8880                           ;flex.c: 63: transmit_finger(up ,0x0E );
  8881  000A96  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8882  000A9A  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8883  000A9E  0E0E               	movlw	14
  8884  000AA0  6E1C               	movwf	transmit_finger@finger,c
  8885  000AA2  EC1D  F00B         	call	_transmit_finger	;wreg free
  8886  000AA6  0012               	return	
  8887  000AA8                     l4217:
  8888                           
  8889                           ;flex.c: 64: else
  8890                           ;flex.c: 65: transmit_finger( up+low , 0x0E );
  8891  000AA8  5021               	movf	PWMt0PCA@low,w,c
  8892  000AAA  241F               	addwf	PWMt0PCA@up,w,c
  8893  000AAC  6E1A               	movwf	transmit_finger@HL_Value,c
  8894  000AAE  5022               	movf	PWMt0PCA@low+1,w,c
  8895  000AB0  2020               	addwfc	PWMt0PCA@up+1,w,c
  8896  000AB2  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8897  000AB4  0E0E               	movlw	14
  8898  000AB6  6E1C               	movwf	transmit_finger@finger,c
  8899  000AB8  EC1D  F00B         	call	_transmit_finger	;wreg free
  8900                           
  8901                           ;flex.c: 66: break;
  8902  000ABC  0012               	return	
  8903  000ABE                     l4219:
  8904                           
  8905                           ;flex.c: 68: if( up <= 1722 )
  8906  000ABE  0EBB               	movlw	187
  8907  000AC0  5C1F               	subwf	PWMt0PCA@up,w,c
  8908  000AC2  0E06               	movlw	6
  8909  000AC4  5820               	subwfb	PWMt0PCA@up+1,w,c
  8910  000AC6  B0D8               	btfsc	status,0,c
  8911  000AC8  D009               	goto	l4223
  8912                           
  8913                           ;flex.c: 69: transmit_finger(up ,0x12 );
  8914  000ACA  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8915  000ACE  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8916  000AD2  0E12               	movlw	18
  8917  000AD4  6E1C               	movwf	transmit_finger@finger,c
  8918  000AD6  EC1D  F00B         	call	_transmit_finger	;wreg free
  8919  000ADA  0012               	return	
  8920  000ADC                     l4223:
  8921                           
  8922                           ;flex.c: 70: else
  8923                           ;flex.c: 71: transmit_finger( up+low , 0x12 );
  8924  000ADC  5021               	movf	PWMt0PCA@low,w,c
  8925  000ADE  241F               	addwf	PWMt0PCA@up,w,c
  8926  000AE0  6E1A               	movwf	transmit_finger@HL_Value,c
  8927  000AE2  5022               	movf	PWMt0PCA@low+1,w,c
  8928  000AE4  2020               	addwfc	PWMt0PCA@up+1,w,c
  8929  000AE6  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8930  000AE8  0E12               	movlw	18
  8931  000AEA  6E1C               	movwf	transmit_finger@finger,c
  8932  000AEC  EC1D  F00B         	call	_transmit_finger	;wreg free
  8933                           
  8934                           ;flex.c: 72: break;
  8935  000AF0  0012               	return	
  8936  000AF2                     l4225:
  8937                           
  8938                           ;flex.c: 74: if( up <= 1580 )
  8939  000AF2  0E2D               	movlw	45
  8940  000AF4  5C1F               	subwf	PWMt0PCA@up,w,c
  8941  000AF6  0E06               	movlw	6
  8942  000AF8  5820               	subwfb	PWMt0PCA@up+1,w,c
  8943  000AFA  B0D8               	btfsc	status,0,c
  8944  000AFC  D009               	goto	l4229
  8945                           
  8946                           ;flex.c: 75: transmit_finger(up ,0x16 );
  8947  000AFE  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8948  000B02  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8949  000B06  0E16               	movlw	22
  8950  000B08  6E1C               	movwf	transmit_finger@finger,c
  8951  000B0A  EC1D  F00B         	call	_transmit_finger	;wreg free
  8952  000B0E  0012               	return	
  8953  000B10                     l4229:
  8954                           
  8955                           ;flex.c: 76: else
  8956                           ;flex.c: 77: transmit_finger( up+low , 0x16 );
  8957  000B10  5021               	movf	PWMt0PCA@low,w,c
  8958  000B12  241F               	addwf	PWMt0PCA@up,w,c
  8959  000B14  6E1A               	movwf	transmit_finger@HL_Value,c
  8960  000B16  5022               	movf	PWMt0PCA@low+1,w,c
  8961  000B18  2020               	addwfc	PWMt0PCA@up+1,w,c
  8962  000B1A  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8963  000B1C  0E16               	movlw	22
  8964  000B1E  6E1C               	movwf	transmit_finger@finger,c
  8965  000B20  EC1D  F00B         	call	_transmit_finger	;wreg free
  8966                           
  8967                           ;flex.c: 79: }
  8968                           
  8969                           ;flex.c: 78: break;
  8970  000B24  0012               	return	
  8971  000B26                     l4233:
  8972  000B26  5023               	movf	PWMt0PCA@finger,w,c
  8973                           
  8974                           ; Switch size 1, requested type "space"
  8975                           ; Number of cases is 5, Range of values is 0 to 4
  8976                           ; switch strategies available:
  8977                           ; Name         Instructions Cycles
  8978                           ; simple_byte           16     9 (average)
  8979                           ;	Chosen strategy is simple_byte
  8980  000B28  0A00               	xorlw	0	; case 0
  8981  000B2A  B4D8               	btfsc	status,2,c
  8982  000B2C  D77C               	goto	l4201
  8983  000B2E  0A01               	xorlw	1	; case 1
  8984  000B30  B4D8               	btfsc	status,2,c
  8985  000B32  D791               	goto	l4207
  8986  000B34  0A03               	xorlw	3	; case 2
  8987  000B36  B4D8               	btfsc	status,2,c
  8988  000B38  D7A8               	goto	l4213
  8989  000B3A  0A01               	xorlw	1	; case 3
  8990  000B3C  B4D8               	btfsc	status,2,c
  8991  000B3E  D7BF               	goto	l4219
  8992  000B40  0A07               	xorlw	7	; case 4
  8993  000B42  A4D8               	btfss	status,2,c
  8994  000B44  0012               	return	
  8995  000B46  D7D5               	goto	l4225
  8996  000B48                     __end_of_PWMt0PCA:
  8997                           	opt stack 0
  8998                           tblptru	equ	0xFF8
  8999                           tblptrh	equ	0xFF7
  9000                           tblptrl	equ	0xFF6
  9001                           tablat	equ	0xFF5
  9002                           prodh	equ	0xFF4
  9003                           prodl	equ	0xFF3
  9004                           intcon	equ	0xFF2
  9005                           indf0	equ	0xFEF
  9006                           postinc0	equ	0xFEE
  9007                           fsr0h	equ	0xFEA
  9008                           fsr0l	equ	0xFE9
  9009                           wreg	equ	0xFE8
  9010                           postdec1	equ	0xFE5
  9011                           plusw1	equ	0xFE3
  9012                           fsr1l	equ	0xFE1
  9013                           indf2	equ	0xFDF
  9014                           postinc2	equ	0xFDE
  9015                           postdec2	equ	0xFDD
  9016                           plusw2	equ	0xFDB
  9017                           fsr2h	equ	0xFDA
  9018                           fsr2l	equ	0xFD9
  9019                           status	equ	0xFD8
  9020                           
  9021 ;; *************** function _transmit_finger *****************
  9022 ;; Defined at:
  9023 ;;		line 7 in file "harwave/flex.c"
  9024 ;; Parameters:    Size  Location     Type
  9025 ;;  HL_Value        2   25[COMRAM] unsigned int 
  9026 ;;  finger          1   27[COMRAM] unsigned char 
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;  Lbyte           1   29[COMRAM] unsigned char 
  9029 ;;  Hbyte           1   28[COMRAM] unsigned char 
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  1    wreg      void 
  9032 ;; Registers used:
  9033 ;;		wreg, status,2, status,0, cstack
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9039 ;;      Params:         3       0       0       0       0       0       0
  9040 ;;      Locals:         2       0       0       0       0       0       0
  9041 ;;      Temps:          0       0       0       0       0       0       0
  9042 ;;      Totals:         5       0       0       0       0       0       0
  9043 ;;Total ram usage:        5 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    6
  9046 ;; This function calls:
  9047 ;;		_PCA9685_writeOneByte
  9048 ;; This function is called by:
  9049 ;;		_PWMt0PCA
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           	psect	text40
  9054  00163A                     __ptext40:
  9055                           	opt stack 0
  9056  00163A                     _transmit_finger:
  9057                           	opt stack 22
  9058                           
  9059                           ;flex.c: 8: u8 Hbyte , Lbyte ;
  9060                           ;flex.c: 9: Lbyte = HL_Value ;
  9061                           
  9062                           ;incstack = 0
  9063  00163A  C01A  F01E         	movff	transmit_finger@HL_Value,transmit_finger@Lbyte
  9064                           
  9065                           ;flex.c: 10: Hbyte = HL_Value >> 8 ;
  9066  00163E  501B               	movf	transmit_finger@HL_Value+1,w,c
  9067  001640  6E1D               	movwf	transmit_finger@Hbyte,c
  9068                           
  9069                           ;flex.c: 11: PCA9685_writeOneByte(finger,0x00);
  9070  001642  0E00               	movlw	0
  9071  001644  6E18               	movwf	PCA9685_writeOneByte@data,c
  9072  001646  501C               	movf	transmit_finger@finger,w,c
  9073  001648  EC38  F00B         	call	_PCA9685_writeOneByte
  9074                           
  9075                           ;flex.c: 12: PCA9685_writeOneByte(finger+1,0x00);
  9076  00164C  0E00               	movlw	0
  9077  00164E  6E18               	movwf	PCA9685_writeOneByte@data,c
  9078  001650  281C               	incf	transmit_finger@finger,w,c
  9079  001652  EC38  F00B         	call	_PCA9685_writeOneByte
  9080                           
  9081                           ;flex.c: 13: PCA9685_writeOneByte(finger+2,Lbyte);
  9082  001656  C01E  F018         	movff	transmit_finger@Lbyte,PCA9685_writeOneByte@data
  9083  00165A  501C               	movf	transmit_finger@finger,w,c
  9084  00165C  0F02               	addlw	2
  9085  00165E  EC38  F00B         	call	_PCA9685_writeOneByte
  9086                           
  9087                           ;flex.c: 14: PCA9685_writeOneByte(finger+3,Hbyte);
  9088  001662  C01D  F018         	movff	transmit_finger@Hbyte,PCA9685_writeOneByte@data
  9089  001666  501C               	movf	transmit_finger@finger,w,c
  9090  001668  0F03               	addlw	3
  9091  00166A  EC38  F00B         	call	_PCA9685_writeOneByte
  9092  00166E  0012               	return		;funcret
  9093  001670                     __end_of_transmit_finger:
  9094                           	opt stack 0
  9095                           tblptru	equ	0xFF8
  9096                           tblptrh	equ	0xFF7
  9097                           tblptrl	equ	0xFF6
  9098                           tablat	equ	0xFF5
  9099                           prodh	equ	0xFF4
  9100                           prodl	equ	0xFF3
  9101                           intcon	equ	0xFF2
  9102                           indf0	equ	0xFEF
  9103                           postinc0	equ	0xFEE
  9104                           fsr0h	equ	0xFEA
  9105                           fsr0l	equ	0xFE9
  9106                           wreg	equ	0xFE8
  9107                           postdec1	equ	0xFE5
  9108                           plusw1	equ	0xFE3
  9109                           fsr1l	equ	0xFE1
  9110                           indf2	equ	0xFDF
  9111                           postinc2	equ	0xFDE
  9112                           postdec2	equ	0xFDD
  9113                           plusw2	equ	0xFDB
  9114                           fsr2h	equ	0xFDA
  9115                           fsr2l	equ	0xFD9
  9116                           status	equ	0xFD8
  9117                           
  9118 ;; *************** function _PCA9685_writeOneByte *****************
  9119 ;; Defined at:
  9120 ;;		line 6 in file "harwave/PCA9685.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;  addr            1    wreg     unsigned char 
  9123 ;;  data            1   23[COMRAM] unsigned char 
  9124 ;; Auto vars:     Size  Location     Type
  9125 ;;  addr            1   24[COMRAM] unsigned char 
  9126 ;; Return value:  Size  Location     Type
  9127 ;;                  1    wreg      void 
  9128 ;; Registers used:
  9129 ;;		wreg, status,2, status,0, cstack
  9130 ;; Tracked objects:
  9131 ;;		On entry : 0/0
  9132 ;;		On exit  : 0/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9135 ;;      Params:         1       0       0       0       0       0       0
  9136 ;;      Locals:         1       0       0       0       0       0       0
  9137 ;;      Temps:          0       0       0       0       0       0       0
  9138 ;;      Totals:         2       0       0       0       0       0       0
  9139 ;;Total ram usage:        2 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    5
  9142 ;; This function calls:
  9143 ;;		_IIC_Send_Byte
  9144 ;;		_IIC_Start
  9145 ;;		_IIC_Stop
  9146 ;;		_IIC_Wait_Ack
  9147 ;;		_delay_ms
  9148 ;; This function is called by:
  9149 ;;		_transmit_finger
  9150 ;;		_PCA9685_init
  9151 ;;		_PCA9685_Write
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           	psect	text41
  9156  001670                     __ptext41:
  9157                           	opt stack 0
  9158  001670                     _PCA9685_writeOneByte:
  9159                           	opt stack 24
  9160                           
  9161                           ;incstack = 0
  9162                           ;PCA9685_writeOneByte@addr stored from wreg
  9163  001670  6E19               	movwf	PCA9685_writeOneByte@addr,c
  9164                           
  9165                           ;PCA9685.c: 8: IIC_Start();
  9166  001672  EC38  F00C         	call	_IIC_Start	;wreg free
  9167                           
  9168                           ;PCA9685.c: 9: IIC_Send_Byte(0x80);
  9169  001676  0E80               	movlw	128
  9170  001678  EC9E  F009         	call	_IIC_Send_Byte
  9171                           
  9172                           ;PCA9685.c: 10: IIC_Wait_Ack();
  9173  00167C  ECCA  F00A         	call	_IIC_Wait_Ack	;wreg free
  9174                           
  9175                           ;PCA9685.c: 11: IIC_Send_Byte(addr&0xff);
  9176  001680  5019               	movf	PCA9685_writeOneByte@addr,w,c
  9177  001682  EC9E  F009         	call	_IIC_Send_Byte
  9178                           
  9179                           ;PCA9685.c: 12: IIC_Wait_Ack();
  9180  001686  ECCA  F00A         	call	_IIC_Wait_Ack	;wreg free
  9181                           
  9182                           ;PCA9685.c: 13: IIC_Send_Byte(data);
  9183  00168A  5018               	movf	PCA9685_writeOneByte@data,w,c
  9184  00168C  EC9E  F009         	call	_IIC_Send_Byte
  9185                           
  9186                           ;PCA9685.c: 14: IIC_Wait_Ack();
  9187  001690  ECCA  F00A         	call	_IIC_Wait_Ack	;wreg free
  9188                           
  9189                           ;PCA9685.c: 15: IIC_Stop();
  9190  001694  EC26  F00C         	call	_IIC_Stop	;wreg free
  9191                           
  9192                           ;PCA9685.c: 16: delay_ms(10);
  9193  001698  0E00               	movlw	0
  9194  00169A  6E15               	movwf	delay_ms@ms+1,c
  9195  00169C  0E0A               	movlw	10
  9196  00169E  6E14               	movwf	delay_ms@ms,c
  9197  0016A0  EC76  F00C         	call	_delay_ms	;wreg free
  9198  0016A4  0012               	return		;funcret
  9199  0016A6                     __end_of_PCA9685_writeOneByte:
  9200                           	opt stack 0
  9201                           tblptru	equ	0xFF8
  9202                           tblptrh	equ	0xFF7
  9203                           tblptrl	equ	0xFF6
  9204                           tablat	equ	0xFF5
  9205                           prodh	equ	0xFF4
  9206                           prodl	equ	0xFF3
  9207                           intcon	equ	0xFF2
  9208                           indf0	equ	0xFEF
  9209                           postinc0	equ	0xFEE
  9210                           fsr0h	equ	0xFEA
  9211                           fsr0l	equ	0xFE9
  9212                           wreg	equ	0xFE8
  9213                           postdec1	equ	0xFE5
  9214                           plusw1	equ	0xFE3
  9215                           fsr1l	equ	0xFE1
  9216                           indf2	equ	0xFDF
  9217                           postinc2	equ	0xFDE
  9218                           postdec2	equ	0xFDD
  9219                           plusw2	equ	0xFDB
  9220                           fsr2h	equ	0xFDA
  9221                           fsr2l	equ	0xFD9
  9222                           status	equ	0xFD8
  9223                           
  9224 ;; *************** function _delay_ms *****************
  9225 ;; Defined at:
  9226 ;;		line 3 in file "harwave/mydelay.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;  ms              2   19[COMRAM] int 
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;		None
  9231 ;; Return value:  Size  Location     Type
  9232 ;;                  1    wreg      void 
  9233 ;; Registers used:
  9234 ;;		wreg, status,2, status,0, cstack
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9240 ;;      Params:         2       0       0       0       0       0       0
  9241 ;;      Locals:         0       0       0       0       0       0       0
  9242 ;;      Temps:          0       0       0       0       0       0       0
  9243 ;;      Totals:         2       0       0       0       0       0       0
  9244 ;;Total ram usage:        2 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:    2
  9247 ;; This function calls:
  9248 ;;		_Delay10KTCYx
  9249 ;; This function is called by:
  9250 ;;		_LCD_Initialize
  9251 ;;		_LCD_WriteCmd
  9252 ;;		_LCD_GotoXY
  9253 ;;		_LCD_WriteData
  9254 ;;		_PCA9685_writeOneByte
  9255 ;;		_ESP8266_Cmd
  9256 ;;		_main
  9257 ;; This function uses a non-reentrant model
  9258 ;;
  9259                           
  9260                           	psect	text42
  9261  0018EC                     __ptext42:
  9262                           	opt stack 0
  9263  0018EC                     _delay_ms:
  9264                           	opt stack 28
  9265  0018EC                     
  9266                           ;mydelay.c: 6: Delay10KTCYx(1);
  9267  0018EC  0E01               	movlw	1
  9268  0018EE  EC81  F00C         	call	_Delay10KTCYx
  9269                           
  9270                           ;mydelay.c: 7: ms--;
  9271  0018F2  0614               	decf	delay_ms@ms,f,c
  9272  0018F4  A0D8               	btfss	status,0,c
  9273  0018F6  0615               	decf	delay_ms@ms+1,f,c
  9274                           
  9275                           ;mydelay.c: 8: }while(ms);
  9276  0018F8  5014               	movf	delay_ms@ms,w,c
  9277  0018FA  1015               	iorwf	delay_ms@ms+1,w,c
  9278  0018FC  B4D8               	btfsc	status,2,c
  9279  0018FE  0012               	return	
  9280  001900  D7F5               	goto	l3675
  9281  001902                     __end_of_delay_ms:
  9282                           	opt stack 0
  9283                           tblptru	equ	0xFF8
  9284                           tblptrh	equ	0xFF7
  9285                           tblptrl	equ	0xFF6
  9286                           tablat	equ	0xFF5
  9287                           prodh	equ	0xFF4
  9288                           prodl	equ	0xFF3
  9289                           intcon	equ	0xFF2
  9290                           indf0	equ	0xFEF
  9291                           postinc0	equ	0xFEE
  9292                           fsr0h	equ	0xFEA
  9293                           fsr0l	equ	0xFE9
  9294                           wreg	equ	0xFE8
  9295                           postdec1	equ	0xFE5
  9296                           plusw1	equ	0xFE3
  9297                           fsr1l	equ	0xFE1
  9298                           indf2	equ	0xFDF
  9299                           postinc2	equ	0xFDE
  9300                           postdec2	equ	0xFDD
  9301                           plusw2	equ	0xFDB
  9302                           fsr2h	equ	0xFDA
  9303                           fsr2l	equ	0xFD9
  9304                           status	equ	0xFD8
  9305                           
  9306 ;; *************** function _Delay10KTCYx *****************
  9307 ;; Defined at:
  9308 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10ktcyx.c"
  9309 ;; Parameters:    Size  Location     Type
  9310 ;;  unit            1    wreg     unsigned char 
  9311 ;; Auto vars:     Size  Location     Type
  9312 ;;  unit            1   18[COMRAM] unsigned char 
  9313 ;; Return value:  Size  Location     Type
  9314 ;;                  1    wreg      void 
  9315 ;; Registers used:
  9316 ;;		wreg
  9317 ;; Tracked objects:
  9318 ;;		On entry : 0/0
  9319 ;;		On exit  : 0/0
  9320 ;;		Unchanged: 0/0
  9321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9322 ;;      Params:         0       0       0       0       0       0       0
  9323 ;;      Locals:         1       0       0       0       0       0       0
  9324 ;;      Temps:          1       0       0       0       0       0       0
  9325 ;;      Totals:         2       0       0       0       0       0       0
  9326 ;;Total ram usage:        2 bytes
  9327 ;; Hardware stack levels used:    1
  9328 ;; Hardware stack levels required when called:    1
  9329 ;; This function calls:
  9330 ;;		Nothing
  9331 ;; This function is called by:
  9332 ;;		_delay_ms
  9333 ;; This function uses a non-reentrant model
  9334 ;;
  9335                           
  9336                           	psect	text43
  9337  001902                     __ptext43:
  9338                           	opt stack 0
  9339  001902                     _Delay10KTCYx:
  9340                           	opt stack 28
  9341                           
  9342                           ;incstack = 0
  9343                           ;Delay10KTCYx@unit stored from wreg
  9344  001902  6E13               	movwf	Delay10KTCYx@unit,c
  9345  001904  0E0D               	movlw	13
  9346  001906  6E12               	movwf	??_Delay10KTCYx& (0+255),c
  9347  001908  0EFC               	movlw	252
  9348  00190A                     u4517:
  9349  00190A  2EE8               	decfsz	wreg,f,c
  9350  00190C  D7FE               	bra	u4517
  9351  00190E  2E12               	decfsz	??_Delay10KTCYx& (0+255),f,c
  9352  001910  D7FC               	bra	u4517
  9353  001912  2E13               	decfsz	Delay10KTCYx@unit,f,c
  9354  001914  D7F7               	goto	l3631
  9355  001916  0012               	return	
  9356  001918                     __end_of_Delay10KTCYx:
  9357                           	opt stack 0
  9358                           tblptru	equ	0xFF8
  9359                           tblptrh	equ	0xFF7
  9360                           tblptrl	equ	0xFF6
  9361                           tablat	equ	0xFF5
  9362                           prodh	equ	0xFF4
  9363                           prodl	equ	0xFF3
  9364                           intcon	equ	0xFF2
  9365                           indf0	equ	0xFEF
  9366                           postinc0	equ	0xFEE
  9367                           fsr0h	equ	0xFEA
  9368                           fsr0l	equ	0xFE9
  9369                           wreg	equ	0xFE8
  9370                           postdec1	equ	0xFE5
  9371                           plusw1	equ	0xFE3
  9372                           fsr1l	equ	0xFE1
  9373                           indf2	equ	0xFDF
  9374                           postinc2	equ	0xFDE
  9375                           postdec2	equ	0xFDD
  9376                           plusw2	equ	0xFDB
  9377                           fsr2h	equ	0xFDA
  9378                           fsr2l	equ	0xFD9
  9379                           status	equ	0xFD8
  9380                           
  9381 ;; *************** function _IIC_Wait_Ack *****************
  9382 ;; Defined at:
  9383 ;;		line 43 in file "harwave/softIIC.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;		None
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;  ucErrTime       1   20[COMRAM] unsigned char 
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  1    wreg      unsigned char 
  9390 ;; Registers used:
  9391 ;;		wreg, status,2, status,0, cstack
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/0
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9397 ;;      Params:         0       0       0       0       0       0       0
  9398 ;;      Locals:         1       0       0       0       0       0       0
  9399 ;;      Temps:          0       0       0       0       0       0       0
  9400 ;;      Totals:         1       0       0       0       0       0       0
  9401 ;;Total ram usage:        1 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:    4
  9404 ;; This function calls:
  9405 ;;		_IIC_Stop
  9406 ;;		_delay_us
  9407 ;; This function is called by:
  9408 ;;		_PCA9685_writeOneByte
  9409 ;;		_PCA9685_readOneByte
  9410 ;; This function uses a non-reentrant model
  9411 ;;
  9412                           
  9413                           	psect	text44
  9414  001594                     __ptext44:
  9415                           	opt stack 0
  9416  001594                     _IIC_Wait_Ack:
  9417                           	opt stack 24
  9418                           
  9419                           ;softIIC.c: 45: u8 ucErrTime=0;
  9420                           
  9421                           ;incstack = 0
  9422  001594  0E00               	movlw	0
  9423  001596  6E15               	movwf	IIC_Wait_Ack@ucErrTime,c
  9424                           
  9425                           ;softIIC.c: 46: {TRISBbits.TRISB0=1;};
  9426  001598  8093               	bsf	3987,0,c	;volatile
  9427                           
  9428                           ;softIIC.c: 47: PORTBbits.RB0=1;
  9429  00159A  8081               	bsf	3969,0,c	;volatile
  9430                           
  9431                           ;softIIC.c: 49: delay_us(1);
  9432  00159C  0E00               	movlw	0
  9433  00159E  6E14               	movwf	delay_us@us+1,c
  9434  0015A0  0E01               	movlw	1
  9435  0015A2  6E13               	movwf	delay_us@us,c
  9436  0015A4  EC8C  F00C         	call	_delay_us	;wreg free
  9437                           
  9438                           ;softIIC.c: 50: PORTBbits.RB1=1;
  9439  0015A8  8281               	bsf	3969,1,c	;volatile
  9440                           
  9441                           ;softIIC.c: 52: delay_us(1);
  9442  0015AA  0E00               	movlw	0
  9443  0015AC  6E14               	movwf	delay_us@us+1,c
  9444  0015AE  0E01               	movlw	1
  9445  0015B0  6E13               	movwf	delay_us@us,c
  9446  0015B2  EC8C  F00C         	call	_delay_us	;wreg free
  9447                           
  9448                           ;softIIC.c: 53: while(PORTBbits.RB0)
  9449  0015B6  D007               	goto	l268
  9450  0015B8                     l2621:
  9451                           
  9452                           ;softIIC.c: 54: {
  9453                           ;softIIC.c: 55: ucErrTime++;
  9454  0015B8  2A15               	incf	IIC_Wait_Ack@ucErrTime,f,c
  9455                           
  9456                           ;softIIC.c: 56: if(ucErrTime>250)
  9457  0015BA  0EFA               	movlw	250
  9458  0015BC  6415               	cpfsgt	IIC_Wait_Ack@ucErrTime,c
  9459  0015BE  D003               	goto	l268
  9460                           
  9461                           ;softIIC.c: 57: {
  9462                           ;softIIC.c: 58: IIC_Stop();
  9463  0015C0  EC26  F00C         	call	_IIC_Stop	;wreg free
  9464                           
  9465                           ;softIIC.c: 59: return 1;
  9466                           ;	Return value of _IIC_Wait_Ack is never used
  9467  0015C4  0012               	return	
  9468  0015C6                     l268:
  9469  0015C6  B081               	btfsc	3969,0,c	;volatile
  9470  0015C8  D7F7               	goto	l2621
  9471                           
  9472                           ;softIIC.c: 60: }
  9473                           ;softIIC.c: 61: }
  9474                           ;softIIC.c: 62: PORTBbits.RB1=0;
  9475  0015CA  9281               	bcf	3969,1,c	;volatile
  9476                           
  9477                           ;softIIC.c: 63: return 0;
  9478                           ;	Return value of _IIC_Wait_Ack is never used
  9479  0015CC  0012               	return		;funcret
  9480  0015CE                     __end_of_IIC_Wait_Ack:
  9481                           	opt stack 0
  9482                           tblptru	equ	0xFF8
  9483                           tblptrh	equ	0xFF7
  9484                           tblptrl	equ	0xFF6
  9485                           tablat	equ	0xFF5
  9486                           prodh	equ	0xFF4
  9487                           prodl	equ	0xFF3
  9488                           intcon	equ	0xFF2
  9489                           indf0	equ	0xFEF
  9490                           postinc0	equ	0xFEE
  9491                           fsr0h	equ	0xFEA
  9492                           fsr0l	equ	0xFE9
  9493                           wreg	equ	0xFE8
  9494                           postdec1	equ	0xFE5
  9495                           plusw1	equ	0xFE3
  9496                           fsr1l	equ	0xFE1
  9497                           indf2	equ	0xFDF
  9498                           postinc2	equ	0xFDE
  9499                           postdec2	equ	0xFDD
  9500                           plusw2	equ	0xFDB
  9501                           fsr2h	equ	0xFDA
  9502                           fsr2l	equ	0xFD9
  9503                           status	equ	0xFD8
  9504                           
  9505 ;; *************** function _IIC_Stop *****************
  9506 ;; Defined at:
  9507 ;;		line 29 in file "harwave/softIIC.c"
  9508 ;; Parameters:    Size  Location     Type
  9509 ;;		None
  9510 ;; Auto vars:     Size  Location     Type
  9511 ;;		None
  9512 ;; Return value:  Size  Location     Type
  9513 ;;                  1    wreg      void 
  9514 ;; Registers used:
  9515 ;;		wreg, status,2, status,0, cstack
  9516 ;; Tracked objects:
  9517 ;;		On entry : 0/0
  9518 ;;		On exit  : 0/0
  9519 ;;		Unchanged: 0/0
  9520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9521 ;;      Params:         0       0       0       0       0       0       0
  9522 ;;      Locals:         0       0       0       0       0       0       0
  9523 ;;      Temps:          0       0       0       0       0       0       0
  9524 ;;      Totals:         0       0       0       0       0       0       0
  9525 ;;Total ram usage:        0 bytes
  9526 ;; Hardware stack levels used:    1
  9527 ;; Hardware stack levels required when called:    3
  9528 ;; This function calls:
  9529 ;;		_delay_us
  9530 ;; This function is called by:
  9531 ;;		_PCA9685_writeOneByte
  9532 ;;		_IIC_Wait_Ack
  9533 ;;		_PCA9685_readOneByte
  9534 ;; This function uses a non-reentrant model
  9535 ;;
  9536                           
  9537                           	psect	text45
  9538  00184C                     __ptext45:
  9539                           	opt stack 0
  9540  00184C                     _IIC_Stop:
  9541                           	opt stack 24
  9542                           
  9543                           ;softIIC.c: 31: {TRISBbits.TRISB0=0;};
  9544                           
  9545                           ;incstack = 0
  9546  00184C  9093               	bcf	3987,0,c	;volatile
  9547                           
  9548                           ;softIIC.c: 32: PORTBbits.RB1=0;
  9549  00184E  9281               	bcf	3969,1,c	;volatile
  9550                           
  9551                           ;softIIC.c: 33: PORTBbits.RB0=0;
  9552  001850  9081               	bcf	3969,0,c	;volatile
  9553                           
  9554                           ;softIIC.c: 34: delay_us(4);
  9555  001852  0E00               	movlw	0
  9556  001854  6E14               	movwf	delay_us@us+1,c
  9557  001856  0E04               	movlw	4
  9558  001858  6E13               	movwf	delay_us@us,c
  9559  00185A  EC8C  F00C         	call	_delay_us	;wreg free
  9560                           
  9561                           ;softIIC.c: 35: PORTBbits.RB1=1;
  9562  00185E  8281               	bsf	3969,1,c	;volatile
  9563                           
  9564                           ;softIIC.c: 36: delay_us(4);
  9565  001860  0E00               	movlw	0
  9566  001862  6E14               	movwf	delay_us@us+1,c
  9567  001864  0E04               	movlw	4
  9568  001866  6E13               	movwf	delay_us@us,c
  9569  001868  EC8C  F00C         	call	_delay_us	;wreg free
  9570                           
  9571                           ;softIIC.c: 37: PORTBbits.RB0=1;
  9572  00186C  8081               	bsf	3969,0,c	;volatile
  9573  00186E  0012               	return		;funcret
  9574  001870                     __end_of_IIC_Stop:
  9575                           	opt stack 0
  9576                           tblptru	equ	0xFF8
  9577                           tblptrh	equ	0xFF7
  9578                           tblptrl	equ	0xFF6
  9579                           tablat	equ	0xFF5
  9580                           prodh	equ	0xFF4
  9581                           prodl	equ	0xFF3
  9582                           intcon	equ	0xFF2
  9583                           indf0	equ	0xFEF
  9584                           postinc0	equ	0xFEE
  9585                           fsr0h	equ	0xFEA
  9586                           fsr0l	equ	0xFE9
  9587                           wreg	equ	0xFE8
  9588                           postdec1	equ	0xFE5
  9589                           plusw1	equ	0xFE3
  9590                           fsr1l	equ	0xFE1
  9591                           indf2	equ	0xFDF
  9592                           postinc2	equ	0xFDE
  9593                           postdec2	equ	0xFDD
  9594                           plusw2	equ	0xFDB
  9595                           fsr2h	equ	0xFDA
  9596                           fsr2l	equ	0xFD9
  9597                           status	equ	0xFD8
  9598                           
  9599 ;; *************** function _IIC_Start *****************
  9600 ;; Defined at:
  9601 ;;		line 18 in file "harwave/softIIC.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;		None
  9606 ;; Return value:  Size  Location     Type
  9607 ;;                  1    wreg      void 
  9608 ;; Registers used:
  9609 ;;		wreg, status,2, status,0, cstack
  9610 ;; Tracked objects:
  9611 ;;		On entry : 0/0
  9612 ;;		On exit  : 0/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9615 ;;      Params:         0       0       0       0       0       0       0
  9616 ;;      Locals:         0       0       0       0       0       0       0
  9617 ;;      Temps:          0       0       0       0       0       0       0
  9618 ;;      Totals:         0       0       0       0       0       0       0
  9619 ;;Total ram usage:        0 bytes
  9620 ;; Hardware stack levels used:    1
  9621 ;; Hardware stack levels required when called:    3
  9622 ;; This function calls:
  9623 ;;		_delay_us
  9624 ;; This function is called by:
  9625 ;;		_PCA9685_writeOneByte
  9626 ;;		_PCA9685_readOneByte
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           	psect	text46
  9631  001870                     __ptext46:
  9632                           	opt stack 0
  9633  001870                     _IIC_Start:
  9634                           	opt stack 25
  9635                           
  9636                           ;softIIC.c: 20: {TRISBbits.TRISB0=0;};
  9637                           
  9638                           ;incstack = 0
  9639  001870  9093               	bcf	3987,0,c	;volatile
  9640                           
  9641                           ;softIIC.c: 21: PORTBbits.RB0=1;
  9642  001872  8081               	bsf	3969,0,c	;volatile
  9643                           
  9644                           ;softIIC.c: 22: PORTBbits.RB1=1;
  9645  001874  8281               	bsf	3969,1,c	;volatile
  9646                           
  9647                           ;softIIC.c: 23: delay_us(4);
  9648  001876  0E00               	movlw	0
  9649  001878  6E14               	movwf	delay_us@us+1,c
  9650  00187A  0E04               	movlw	4
  9651  00187C  6E13               	movwf	delay_us@us,c
  9652  00187E  EC8C  F00C         	call	_delay_us	;wreg free
  9653                           
  9654                           ;softIIC.c: 24: PORTBbits.RB0=0;
  9655  001882  9081               	bcf	3969,0,c	;volatile
  9656                           
  9657                           ;softIIC.c: 25: delay_us(4);
  9658  001884  0E00               	movlw	0
  9659  001886  6E14               	movwf	delay_us@us+1,c
  9660  001888  0E04               	movlw	4
  9661  00188A  6E13               	movwf	delay_us@us,c
  9662  00188C  EC8C  F00C         	call	_delay_us	;wreg free
  9663                           
  9664                           ;softIIC.c: 26: PORTBbits.RB1=0;
  9665  001890  9281               	bcf	3969,1,c	;volatile
  9666  001892  0012               	return		;funcret
  9667  001894                     __end_of_IIC_Start:
  9668                           	opt stack 0
  9669                           tblptru	equ	0xFF8
  9670                           tblptrh	equ	0xFF7
  9671                           tblptrl	equ	0xFF6
  9672                           tablat	equ	0xFF5
  9673                           prodh	equ	0xFF4
  9674                           prodl	equ	0xFF3
  9675                           intcon	equ	0xFF2
  9676                           indf0	equ	0xFEF
  9677                           postinc0	equ	0xFEE
  9678                           fsr0h	equ	0xFEA
  9679                           fsr0l	equ	0xFE9
  9680                           wreg	equ	0xFE8
  9681                           postdec1	equ	0xFE5
  9682                           plusw1	equ	0xFE3
  9683                           fsr1l	equ	0xFE1
  9684                           indf2	equ	0xFDF
  9685                           postinc2	equ	0xFDE
  9686                           postdec2	equ	0xFDD
  9687                           plusw2	equ	0xFDB
  9688                           fsr2h	equ	0xFDA
  9689                           fsr2l	equ	0xFD9
  9690                           status	equ	0xFD8
  9691                           
  9692 ;; *************** function _IIC_Send_Byte *****************
  9693 ;; Defined at:
  9694 ;;		line 91 in file "harwave/softIIC.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;  txd             1    wreg     unsigned char 
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;  txd             1   21[COMRAM] unsigned char 
  9699 ;;  t               1   22[COMRAM] unsigned char 
  9700 ;; Return value:  Size  Location     Type
  9701 ;;                  1    wreg      void 
  9702 ;; Registers used:
  9703 ;;		wreg, status,2, status,0, cstack
  9704 ;; Tracked objects:
  9705 ;;		On entry : 0/0
  9706 ;;		On exit  : 0/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9709 ;;      Params:         0       0       0       0       0       0       0
  9710 ;;      Locals:         2       0       0       0       0       0       0
  9711 ;;      Temps:          1       0       0       0       0       0       0
  9712 ;;      Totals:         3       0       0       0       0       0       0
  9713 ;;Total ram usage:        3 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:    3
  9716 ;; This function calls:
  9717 ;;		_delay_us
  9718 ;; This function is called by:
  9719 ;;		_PCA9685_writeOneByte
  9720 ;;		_PCA9685_readOneByte
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text47
  9725  00133C                     __ptext47:
  9726                           	opt stack 0
  9727  00133C                     _IIC_Send_Byte:
  9728                           	opt stack 25
  9729                           
  9730                           ;incstack = 0
  9731                           ;IIC_Send_Byte@txd stored from wreg
  9732  00133C  6E16               	movwf	IIC_Send_Byte@txd,c
  9733                           
  9734                           ;softIIC.c: 93: u8 t;
  9735                           ;softIIC.c: 94: {TRISBbits.TRISB0=0;};
  9736  00133E  9093               	bcf	3987,0,c	;volatile
  9737                           
  9738                           ;softIIC.c: 95: PORTBbits.RB1=0;
  9739  001340  9281               	bcf	3969,1,c	;volatile
  9740                           
  9741                           ;softIIC.c: 96: for(t=0;t<8;t++)
  9742  001342  0E00               	movlw	0
  9743  001344  6E17               	movwf	IIC_Send_Byte@t,c
  9744  001346                     l2589:
  9745  001346  0E07               	movlw	7
  9746  001348  6417               	cpfsgt	IIC_Send_Byte@t,c
  9747  00134A  D001               	goto	l2593
  9748  00134C  0012               	return	
  9749  00134E                     l2593:
  9750                           
  9751                           ;softIIC.c: 97: {
  9752                           ;softIIC.c: 98: PORTBbits.RB0=(txd&0x80)>>7;
  9753  00134E  6A15               	clrf	??_IIC_Send_Byte& (0+255),c
  9754  001350  AE16               	btfss	IIC_Send_Byte@txd,7,c
  9755  001352  D001               	bra	u1665
  9756  001354  2A15               	incf	??_IIC_Send_Byte& (0+255),f,c
  9757  001356                     u1665:
  9758  001356  0E01               	movlw	1
  9759  001358  1615               	andwf	??_IIC_Send_Byte,f,c
  9760  00135A  5081               	movf	3969,w,c	;volatile
  9761  00135C  1815               	xorwf	??_IIC_Send_Byte,w,c
  9762  00135E  0BFE               	andlw	-2
  9763  001360  1815               	xorwf	??_IIC_Send_Byte,w,c
  9764  001362  6E81               	movwf	3969,c	;volatile
  9765                           
  9766                           ;softIIC.c: 99: txd<<=1;
  9767  001364  90D8               	bcf	status,0,c
  9768  001366  3616               	rlcf	IIC_Send_Byte@txd,f,c
  9769                           
  9770                           ;softIIC.c: 100: delay_us(2);
  9771  001368  0E00               	movlw	0
  9772  00136A  6E14               	movwf	delay_us@us+1,c
  9773  00136C  0E02               	movlw	2
  9774  00136E  6E13               	movwf	delay_us@us,c
  9775  001370  EC8C  F00C         	call	_delay_us	;wreg free
  9776                           
  9777                           ;softIIC.c: 101: PORTBbits.RB1=1;
  9778  001374  8281               	bsf	3969,1,c	;volatile
  9779                           
  9780                           ;softIIC.c: 102: delay_us(2);
  9781  001376  0E00               	movlw	0
  9782  001378  6E14               	movwf	delay_us@us+1,c
  9783  00137A  0E02               	movlw	2
  9784  00137C  6E13               	movwf	delay_us@us,c
  9785  00137E  EC8C  F00C         	call	_delay_us	;wreg free
  9786                           
  9787                           ;softIIC.c: 103: PORTBbits.RB1=0;
  9788  001382  9281               	bcf	3969,1,c	;volatile
  9789                           
  9790                           ;softIIC.c: 104: delay_us(2);
  9791  001384  0E00               	movlw	0
  9792  001386  6E14               	movwf	delay_us@us+1,c
  9793  001388  0E02               	movlw	2
  9794  00138A  6E13               	movwf	delay_us@us,c
  9795  00138C  EC8C  F00C         	call	_delay_us	;wreg free
  9796  001390  2A17               	incf	IIC_Send_Byte@t,f,c
  9797  001392  D7D9               	goto	l2589
  9798  001394                     __end_of_IIC_Send_Byte:
  9799                           	opt stack 0
  9800                           tblptru	equ	0xFF8
  9801                           tblptrh	equ	0xFF7
  9802                           tblptrl	equ	0xFF6
  9803                           tablat	equ	0xFF5
  9804                           prodh	equ	0xFF4
  9805                           prodl	equ	0xFF3
  9806                           intcon	equ	0xFF2
  9807                           indf0	equ	0xFEF
  9808                           postinc0	equ	0xFEE
  9809                           fsr0h	equ	0xFEA
  9810                           fsr0l	equ	0xFE9
  9811                           wreg	equ	0xFE8
  9812                           postdec1	equ	0xFE5
  9813                           plusw1	equ	0xFE3
  9814                           fsr1l	equ	0xFE1
  9815                           indf2	equ	0xFDF
  9816                           postinc2	equ	0xFDE
  9817                           postdec2	equ	0xFDD
  9818                           plusw2	equ	0xFDB
  9819                           fsr2h	equ	0xFDA
  9820                           fsr2l	equ	0xFD9
  9821                           status	equ	0xFD8
  9822                           
  9823 ;; *************** function _delay_us *****************
  9824 ;; Defined at:
  9825 ;;		line 11 in file "harwave/mydelay.c"
  9826 ;; Parameters:    Size  Location     Type
  9827 ;;  us              2   18[COMRAM] int 
  9828 ;; Auto vars:     Size  Location     Type
  9829 ;;		None
  9830 ;; Return value:  Size  Location     Type
  9831 ;;                  1    wreg      void 
  9832 ;; Registers used:
  9833 ;;		wreg, status,2, status,0, cstack
  9834 ;; Tracked objects:
  9835 ;;		On entry : 0/0
  9836 ;;		On exit  : 0/0
  9837 ;;		Unchanged: 0/0
  9838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9839 ;;      Params:         2       0       0       0       0       0       0
  9840 ;;      Locals:         0       0       0       0       0       0       0
  9841 ;;      Temps:          0       0       0       0       0       0       0
  9842 ;;      Totals:         2       0       0       0       0       0       0
  9843 ;;Total ram usage:        2 bytes
  9844 ;; Hardware stack levels used:    1
  9845 ;; Hardware stack levels required when called:    2
  9846 ;; This function calls:
  9847 ;;		_Delay10TCYx
  9848 ;; This function is called by:
  9849 ;;		_IIC_Init
  9850 ;;		_IIC_Start
  9851 ;;		_IIC_Stop
  9852 ;;		_IIC_Wait_Ack
  9853 ;;		_IIC_Send_Byte
  9854 ;;		_IIC_Ack
  9855 ;;		_IIC_NAck
  9856 ;;		_IIC_Read_Byte
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           	psect	text48
  9861  001918                     __ptext48:
  9862                           	opt stack 0
  9863  001918                     _delay_us:
  9864                           	opt stack 25
  9865  001918                     
  9866                           ;mydelay.c: 14: Delay10TCYx(1);
  9867  001918  0E01               	movlw	1
  9868  00191A  EC9F  F00C         	call	_Delay10TCYx
  9869                           
  9870                           ;mydelay.c: 15: us--;
  9871  00191E  0613               	decf	delay_us@us,f,c
  9872  001920  A0D8               	btfss	status,0,c
  9873  001922  0614               	decf	delay_us@us+1,f,c
  9874                           
  9875                           ;mydelay.c: 16: }while(us);
  9876  001924  5013               	movf	delay_us@us,w,c
  9877  001926  1014               	iorwf	delay_us@us+1,w,c
  9878  001928  B4D8               	btfsc	status,2,c
  9879  00192A  0012               	return	
  9880  00192C  D7F5               	goto	l2513
  9881  00192E                     __end_of_delay_us:
  9882                           	opt stack 0
  9883                           tblptru	equ	0xFF8
  9884                           tblptrh	equ	0xFF7
  9885                           tblptrl	equ	0xFF6
  9886                           tablat	equ	0xFF5
  9887                           prodh	equ	0xFF4
  9888                           prodl	equ	0xFF3
  9889                           intcon	equ	0xFF2
  9890                           indf0	equ	0xFEF
  9891                           postinc0	equ	0xFEE
  9892                           fsr0h	equ	0xFEA
  9893                           fsr0l	equ	0xFE9
  9894                           wreg	equ	0xFE8
  9895                           postdec1	equ	0xFE5
  9896                           plusw1	equ	0xFE3
  9897                           fsr1l	equ	0xFE1
  9898                           indf2	equ	0xFDF
  9899                           postinc2	equ	0xFDE
  9900                           postdec2	equ	0xFDD
  9901                           plusw2	equ	0xFDB
  9902                           fsr2h	equ	0xFDA
  9903                           fsr2l	equ	0xFD9
  9904                           status	equ	0xFD8
  9905                           
  9906 ;; *************** function _Delay10TCYx *****************
  9907 ;; Defined at:
  9908 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10tcyx.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;  unit            1    wreg     unsigned char 
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;  unit            1   17[COMRAM] unsigned char 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  1    wreg      void 
  9915 ;; Registers used:
  9916 ;;		wreg
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9922 ;;      Params:         0       0       0       0       0       0       0
  9923 ;;      Locals:         1       0       0       0       0       0       0
  9924 ;;      Temps:          0       0       0       0       0       0       0
  9925 ;;      Totals:         1       0       0       0       0       0       0
  9926 ;;Total ram usage:        1 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    1
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_delay_us
  9933 ;;		_delay_ms1
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           	psect	text49
  9938  00193E                     __ptext49:
  9939                           	opt stack 0
  9940  00193E                     _Delay10TCYx:
  9941                           	opt stack 25
  9942                           
  9943                           ;incstack = 0
  9944                           ;Delay10TCYx@unit stored from wreg
  9945  00193E  6E12               	movwf	Delay10TCYx@unit,c
  9946  001940  0E03               	movlw	3
  9947  001942                     u4527:
  9948  001942  2EE8               	decfsz	wreg,f,c
  9949  001944  D7FE               	bra	u4527
  9950  001946  F000               	nop	
  9951  001948  2E12               	decfsz	Delay10TCYx@unit,f,c
  9952  00194A  D7FA               	goto	l2509
  9953  00194C  0012               	return	
  9954  00194E                     __end_of_Delay10TCYx:
  9955                           	opt stack 0
  9956                           tblptru	equ	0xFF8
  9957                           tblptrh	equ	0xFF7
  9958                           tblptrl	equ	0xFF6
  9959                           tablat	equ	0xFF5
  9960                           prodh	equ	0xFF4
  9961                           prodl	equ	0xFF3
  9962                           intcon	equ	0xFF2
  9963                           indf0	equ	0xFEF
  9964                           postinc0	equ	0xFEE
  9965                           fsr0h	equ	0xFEA
  9966                           fsr0l	equ	0xFE9
  9967                           wreg	equ	0xFE8
  9968                           postdec1	equ	0xFE5
  9969                           plusw1	equ	0xFE3
  9970                           fsr1l	equ	0xFE1
  9971                           indf2	equ	0xFDF
  9972                           postinc2	equ	0xFDE
  9973                           postdec2	equ	0xFDD
  9974                           plusw2	equ	0xFDB
  9975                           fsr2h	equ	0xFDA
  9976                           fsr2l	equ	0xFD9
  9977                           status	equ	0xFD8
  9978                           
  9979 ;; *************** function _time_adc *****************
  9980 ;; Defined at:
  9981 ;;		line 129 in file "main.c"
  9982 ;; Parameters:    Size  Location     Type
  9983 ;;		None
  9984 ;; Auto vars:     Size  Location     Type
  9985 ;;  ch              1   16[COMRAM] unsigned char 
  9986 ;; Return value:  Size  Location     Type
  9987 ;;                  1    wreg      void 
  9988 ;; Registers used:
  9989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9990 ;; Tracked objects:
  9991 ;;		On entry : 0/0
  9992 ;;		On exit  : 0/0
  9993 ;;		Unchanged: 0/0
  9994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9995 ;;      Params:         0       0       0       0       0       0       0
  9996 ;;      Locals:         1       0       0       0       0       0       0
  9997 ;;      Temps:         16       0       0       0       0       0       0
  9998 ;;      Totals:        17       0       0       0       0       0       0
  9999 ;;Total ram usage:       17 bytes
 10000 ;; Hardware stack levels used:    1
 10001 ;; This function calls:
 10002 ;;		Nothing
 10003 ;; This function is called by:
 10004 ;;		Interrupt level 2
 10005 ;; This function uses a non-reentrant model
 10006 ;;
 10007                           
 10008                           	psect	intcode
 10009  000008                     __pintcode:
 10010                           	opt stack 0
 10011  000008                     _time_adc:
 10012                           	opt stack 22
 10013                           
 10014                           ;incstack = 0
 10015  000008  8265               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10016  00000A  ED22  F006         	call	int_func,f	;refresh shadow registers
 10017                           tblptru	equ	0xFF8
 10018                           tblptrh	equ	0xFF7
 10019                           tblptrl	equ	0xFF6
 10020                           tablat	equ	0xFF5
 10021                           prodh	equ	0xFF4
 10022                           prodl	equ	0xFF3
 10023                           intcon	equ	0xFF2
 10024                           indf0	equ	0xFEF
 10025                           postinc0	equ	0xFEE
 10026                           fsr0h	equ	0xFEA
 10027                           fsr0l	equ	0xFE9
 10028                           wreg	equ	0xFE8
 10029                           postdec1	equ	0xFE5
 10030                           plusw1	equ	0xFE3
 10031                           fsr1l	equ	0xFE1
 10032                           indf2	equ	0xFDF
 10033                           postinc2	equ	0xFDE
 10034                           postdec2	equ	0xFDD
 10035                           plusw2	equ	0xFDB
 10036                           fsr2h	equ	0xFDA
 10037                           fsr2l	equ	0xFD9
 10038                           status	equ	0xFD8
 10039                           
 10040                           	psect	intcode_body
 10041  000C44                     __pintcode_body:
 10042                           	opt stack 22
 10043  000C44                     int_func:
 10044                           	opt stack 22
 10045  000C44  0006               	pop		; remove dummy address from shadow register refresh
 10046  000C46  CFFA F003          	movff	pclath,??_time_adc+2
 10047  000C4A  CFFB F004          	movff	pclatu,??_time_adc+3
 10048  000C4E  CFE9 F005          	movff	fsr0l,??_time_adc+4
 10049  000C52  CFEA F006          	movff	fsr0h,??_time_adc+5
 10050  000C56  CFE1 F007          	movff	fsr1l,??_time_adc+6
 10051  000C5A  CFE2 F008          	movff	fsr1h,??_time_adc+7
 10052  000C5E  CFD9 F009          	movff	fsr2l,??_time_adc+8
 10053  000C62  CFDA F00A          	movff	fsr2h,??_time_adc+9
 10054  000C66  CFF3 F00B          	movff	prodl,??_time_adc+10
 10055  000C6A  CFF4 F00C          	movff	prodh,??_time_adc+11
 10056  000C6E  CFF6 F00D          	movff	tblptrl,??_time_adc+12
 10057  000C72  CFF7 F00E          	movff	tblptrh,??_time_adc+13
 10058  000C76  CFF8 F00F          	movff	tblptru,??_time_adc+14
 10059  000C7A  CFF5 F010          	movff	tablat,??_time_adc+15
 10060                           
 10061                           ;main.c: 130: if(PIR1bits.RCIF ){
 10062  000C7E  AA9E               	btfss	3998,5,c	;volatile
 10063  000C80  D038               	goto	i2l537
 10064                           
 10065                           ;main.c: 131: char ch;
 10066                           ;main.c: 132: ch = RCREG;
 10067  000C82  CFAE F011          	movff	4014,time_adc@ch	;volatile
 10068                           
 10069                           ;main.c: 133: if( strEsp8266_Fram_Record .InfBit .FramLength < ( 50 - 1 ) ) {
 10070  000C86  0102               	movlb	2	; () banked
 10071  000C88  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10072  000C8A  0B7F               	andlw	127
 10073  000C8C  6E01               	movwf	??_time_adc& (0+255),c
 10074  000C8E  0E31               	movlw	49
 10075  000C90  6001               	cpfslt	??_time_adc,c
 10076  000C92  D02E               	goto	i2l538
 10077                           
 10078                           ; BSR set to: 2
 10079                           ;main.c: 134: strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .Fram
      +                          Length ++ ] = ch;
 10080  000C94  0102               	movlb	2	; () banked
 10081  000C96  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10082  000C98  0B7F               	andlw	127
 10083  000C9A  6E01               	movwf	??_time_adc& (0+255),c
 10084  000C9C  5001               	movf	??_time_adc,w,c
 10085  000C9E  0D01               	mullw	1
 10086  000CA0  0E9A               	movlw	low _strEsp8266_Fram_Record
 10087  000CA2  24F3               	addwf	prodl,w,c
 10088  000CA4  6ED9               	movwf	fsr2l,c
 10089  000CA6  0E02               	movlw	high _strEsp8266_Fram_Record
 10090  000CA8  20F4               	addwfc	prodh,w,c
 10091  000CAA  6EDA               	movwf	fsr2h,c
 10092  000CAC  C011  FFDF         	movff	time_adc@ch,indf2
 10093                           
 10094                           ; BSR set to: 2
 10095  000CB0  0E01               	movlw	1
 10096  000CB2  6E01               	movwf	??_time_adc& (0+255),c
 10097  000CB4  0102               	movlb	2	; () banked
 10098  000CB6  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10099  000CB8  0B7F               	andlw	127
 10100  000CBA  6E02               	movwf	(??_time_adc+1)& (0+255),c
 10101  000CBC  5001               	movf	??_time_adc,w,c
 10102  000CBE  2602               	addwf	??_time_adc+1,f,c
 10103  000CC0  0102               	movlb	2	; () banked
 10104  000CC2  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10105  000CC4  1802               	xorwf	(??_time_adc+1)& (0+255),w,c
 10106  000CC6  0B80               	andlw	-128
 10107  000CC8  1802               	xorwf	(??_time_adc+1)& (0+255),w,c
 10108  000CCA  0102               	movlb	2	; () banked
 10109  000CCC  6FCC               	movwf	(_strEsp8266_Fram_Record+50)& (0+255),b
 10110                           
 10111                           ; BSR set to: 2
 10112                           ;main.c: 137: if(strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .F
      +                          ramLength] == '\0')
 10113  000CCE  0102               	movlb	2	; () banked
 10114  000CD0  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10115  000CD2  0B7F               	andlw	127
 10116  000CD4  6E01               	movwf	??_time_adc& (0+255),c
 10117  000CD6  5001               	movf	??_time_adc,w,c
 10118  000CD8  0D01               	mullw	1
 10119  000CDA  0E9A               	movlw	low _strEsp8266_Fram_Record
 10120  000CDC  24F3               	addwf	prodl,w,c
 10121  000CDE  6ED9               	movwf	fsr2l,c
 10122  000CE0  0E02               	movlw	high _strEsp8266_Fram_Record
 10123  000CE2  20F4               	addwfc	prodh,w,c
 10124  000CE4  6EDA               	movwf	fsr2h,c
 10125  000CE6  50DF               	movf	indf2,w,c
 10126  000CE8  A4D8               	btfss	status,2,c
 10127  000CEA  D002               	goto	i2l538
 10128                           
 10129                           ; BSR set to: 2
 10130                           ;main.c: 138: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 1;
 10131  000CEC  0102               	movlb	2	; () banked
 10132  000CEE  8FCC               	bsf	(_strEsp8266_Fram_Record+50)& (0+255),7,b
 10133  000CF0                     i2l538:
 10134                           
 10135                           ; BSR set to: 2
 10136                           ;main.c: 140: }
 10137                           ;main.c: 141: PIR1bits.RCIF=0;
 10138  000CF0  9A9E               	bcf	3998,5,c	;volatile
 10139  000CF2                     i2l537:
 10140                           
 10141                           ;main.c: 142: }
 10142                           ;main.c: 144: if(PIR1bits.TMR2IF){
 10143  000CF2  A29E               	btfss	3998,1,c	;volatile
 10144  000CF4  D005               	goto	i2l541
 10145                           
 10146                           ;main.c: 145: s++;
 10147  000CF6  4A54               	infsnz	_s,f,c
 10148  000CF8  2A55               	incf	_s+1,f,c
 10149                           
 10150                           ;main.c: 146: IP++;
 10151  000CFA  4A56               	infsnz	_IP,f,c
 10152  000CFC  2A57               	incf	_IP+1,f,c
 10153                           
 10154                           ;main.c: 147: PIR1bits.TMR2IF=0;
 10155  000CFE  929E               	bcf	3998,1,c	;volatile
 10156  000D00                     i2l541:
 10157  000D00  C010  FFF5         	movff	??_time_adc+15,tablat
 10158  000D04  C00F  FFF8         	movff	??_time_adc+14,tblptru
 10159  000D08  C00E  FFF7         	movff	??_time_adc+13,tblptrh
 10160  000D0C  C00D  FFF6         	movff	??_time_adc+12,tblptrl
 10161  000D10  C00C  FFF4         	movff	??_time_adc+11,prodh
 10162  000D14  C00B  FFF3         	movff	??_time_adc+10,prodl
 10163  000D18  C00A  FFDA         	movff	??_time_adc+9,fsr2h
 10164  000D1C  C009  FFD9         	movff	??_time_adc+8,fsr2l
 10165  000D20  C008  FFE2         	movff	??_time_adc+7,fsr1h
 10166  000D24  C007  FFE1         	movff	??_time_adc+6,fsr1l
 10167  000D28  C006  FFEA         	movff	??_time_adc+5,fsr0h
 10168  000D2C  C005  FFE9         	movff	??_time_adc+4,fsr0l
 10169  000D30  C004  FFFB         	movff	??_time_adc+3,pclatu
 10170  000D34  C003  FFFA         	movff	??_time_adc+2,pclath
 10171  000D38  9265               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10172  000D3A  0011               	retfie		f
 10173  000D3C                     __end_of_time_adc:
 10174                           	opt stack 0
 10175                           pclatu	equ	0xFFB
 10176                           pclath	equ	0xFFA
 10177                           tblptru	equ	0xFF8
 10178                           tblptrh	equ	0xFF7
 10179                           tblptrl	equ	0xFF6
 10180                           tablat	equ	0xFF5
 10181                           prodh	equ	0xFF4
 10182                           prodl	equ	0xFF3
 10183                           intcon	equ	0xFF2
 10184                           indf0	equ	0xFEF
 10185                           postinc0	equ	0xFEE
 10186                           fsr0h	equ	0xFEA
 10187                           fsr0l	equ	0xFE9
 10188                           wreg	equ	0xFE8
 10189                           postdec1	equ	0xFE5
 10190                           plusw1	equ	0xFE3
 10191                           fsr1h	equ	0xFE2
 10192                           fsr1l	equ	0xFE1
 10193                           indf2	equ	0xFDF
 10194                           postinc2	equ	0xFDE
 10195                           postdec2	equ	0xFDD
 10196                           plusw2	equ	0xFDB
 10197                           fsr2h	equ	0xFDA
 10198                           fsr2l	equ	0xFD9
 10199                           status	equ	0xFD8
 10200                           pclatu	equ	0xFFB
 10201                           pclath	equ	0xFFA
 10202                           tblptru	equ	0xFF8
 10203                           tblptrh	equ	0xFF7
 10204                           tblptrl	equ	0xFF6
 10205                           tablat	equ	0xFF5
 10206                           prodh	equ	0xFF4
 10207                           prodl	equ	0xFF3
 10208                           intcon	equ	0xFF2
 10209                           indf0	equ	0xFEF
 10210                           postinc0	equ	0xFEE
 10211                           fsr0h	equ	0xFEA
 10212                           fsr0l	equ	0xFE9
 10213                           wreg	equ	0xFE8
 10214                           postdec1	equ	0xFE5
 10215                           plusw1	equ	0xFE3
 10216                           fsr1h	equ	0xFE2
 10217                           fsr1l	equ	0xFE1
 10218                           indf2	equ	0xFDF
 10219                           postinc2	equ	0xFDE
 10220                           postdec2	equ	0xFDD
 10221                           plusw2	equ	0xFDB
 10222                           fsr2h	equ	0xFDA
 10223                           fsr2l	equ	0xFD9
 10224                           status	equ	0xFD8
 10225                           
 10226                           	psect	rparam
 10227  0000                     pclatu	equ	0xFFB
 10228                           pclath	equ	0xFFA
 10229                           tblptru	equ	0xFF8
 10230                           tblptrh	equ	0xFF7
 10231                           tblptrl	equ	0xFF6
 10232                           tablat	equ	0xFF5
 10233                           prodh	equ	0xFF4
 10234                           prodl	equ	0xFF3
 10235                           intcon	equ	0xFF2
 10236                           indf0	equ	0xFEF
 10237                           postinc0	equ	0xFEE
 10238                           fsr0h	equ	0xFEA
 10239                           fsr0l	equ	0xFE9
 10240                           wreg	equ	0xFE8
 10241                           postdec1	equ	0xFE5
 10242                           plusw1	equ	0xFE3
 10243                           fsr1h	equ	0xFE2
 10244                           fsr1l	equ	0xFE1
 10245                           indf2	equ	0xFDF
 10246                           postinc2	equ	0xFDE
 10247                           postdec2	equ	0xFDD
 10248                           plusw2	equ	0xFDB
 10249                           fsr2h	equ	0xFDA
 10250                           fsr2l	equ	0xFD9
 10251                           status	equ	0xFD8
 10252                           
 10253                           	psect	temp
 10254  000065                     btemp:
 10255                           	opt stack 0
 10256  000065                     	ds	1
 10257  0000                     int$flags	set	btemp
 10258                           pclatu	equ	0xFFB
 10259                           pclath	equ	0xFFA
 10260                           tblptru	equ	0xFF8
 10261                           tblptrh	equ	0xFF7
 10262                           tblptrl	equ	0xFF6
 10263                           tablat	equ	0xFF5
 10264                           prodh	equ	0xFF4
 10265                           prodl	equ	0xFF3
 10266                           intcon	equ	0xFF2
 10267                           indf0	equ	0xFEF
 10268                           postinc0	equ	0xFEE
 10269                           fsr0h	equ	0xFEA
 10270                           fsr0l	equ	0xFE9
 10271                           wreg	equ	0xFE8
 10272                           postdec1	equ	0xFE5
 10273                           plusw1	equ	0xFE3
 10274                           fsr1h	equ	0xFE2
 10275                           fsr1l	equ	0xFE1
 10276                           indf2	equ	0xFDF
 10277                           postinc2	equ	0xFDE
 10278                           postdec2	equ	0xFDD
 10279                           plusw2	equ	0xFDB
 10280                           fsr2h	equ	0xFDA
 10281                           fsr2l	equ	0xFD9
 10282                           status	equ	0xFD8


Data Sizes:
    Strings     478
    Constant    2460
    Data        8
    BSS         345
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     53     100
    BANK0           128     21      21
    BANK1           256    221     221
    BANK2           256      0     206
    BANK3           256      0     100
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    memset@p1	PTR void  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    memset@p	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    sprintf$1446	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_65(CODE[17]), STR_64(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 100
		 -> STR_63(CODE[7]), sprintf@c(BANK0[1]), STR_58(CODE[5]), STR_57(CODE[12]), 
		 -> STR_52(CODE[10]), STR_51(CODE[4]), STR_40(CODE[2]), STR_39(CODE[10]), 
		 -> STR_38(CODE[4]), STR_23(CODE[4]), STR_21(CODE[4]), ESP8266_Link_Server@cStr(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_25(CODE[17]), STR_24(CODE[20]), STR_22(CODE[13]), STR_20(CODE[13]), 
		 -> STR_18(CODE[26]), STR_15(CODE[21]), STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 120
		 -> ESP8266_Link_Server@cCmd(BANK1[120]), ESP8266_Link_Server@cStr(BANK1[100]), ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK1[120]), 
		 -> ESP8266_SendString@cStr(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    main@temp	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    sp__memset	PTR void  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    sp__ESP8266_ReceiveString	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_ReceiveString@pRecStr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_Link_Server@ComNum	PTR unsigned char  size(2) Largest target is 5
		 -> STR_58(CODE[5]), 

    ESP8266_Link_Server@ip	PTR unsigned char  size(2) Largest target is 12
		 -> STR_57(CODE[12]), 

    ESP8266_JoinAP@pPassWord	PTR unsigned char  size(2) Largest target is 10
		 -> STR_52(CODE[10]), 

    ESP8266_JoinAP@pSSID	PTR unsigned char  size(2) Largest target is 4
		 -> STR_51(CODE[4]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_Cmd@reply2	PTR unsigned char  size(2) Largest target is 10
		 -> STR_37(CODE[3]), STR_34(CODE[3]), STR_27(CODE[7]), STR_17(CODE[10]), 
		 -> STR_8(CODE[6]), NULL(NULL[0]), 

    ESP8266_Cmd@reply1	PTR unsigned char  size(2) Largest target is 10
		 -> STR_56(CODE[3]), STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_36(CODE[10]), 
		 -> STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), STR_26(CODE[8]), 
		 -> STR_19(CODE[3]), STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), 
		 -> STR_10(CODE[3]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), 

    ESP8266_Cmd@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_55(CODE[14]), STR_53(CODE[15]), STR_49(CODE[11]), STR_47(CODE[22]), 
		 -> STR_45(CODE[14]), STR_43(CODE[15]), STR_41(CODE[14]), STR_35(CODE[13]), 
		 -> STR_32(CODE[13]), STR_30(CODE[25]), STR_28(CODE[23]), ESP8266_Link_Server@cCmd(BANK1[120]), 
		 -> ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK1[120]), STR_13(CODE[14]), STR_11(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@cStr(COMRAM[20]), 

    ESP8266_Uart@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_55(CODE[14]), STR_53(CODE[15]), STR_49(CODE[11]), STR_47(CODE[22]), 
		 -> STR_45(CODE[14]), STR_43(CODE[15]), STR_41(CODE[14]), STR_35(CODE[13]), 
		 -> STR_32(CODE[13]), STR_30(CODE[25]), STR_28(CODE[23]), ESP8266_Link_Server@cCmd(BANK1[120]), 
		 -> ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK1[120]), STR_13(CODE[14]), STR_11(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@cStr(COMRAM[20]), 

    LCD_WritetStr@str	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_62(CODE[6]), 

    ADtoPWM@AD	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 


Critical Paths under _main in COMRAM

    _PCA9685_init->_PCA9685_writeOneByte
    _IIC_Init->_delay_us
    _LCD_WritetStr->_LCD_WriteData
    _LCD_WriteData->_delay_ms
    _LCD_Initialize->_LCD_WriteCmd
    _delayFor18Tcy->_Delay1TCYx
    _LCD_GotoXY->_LCD_WriteCmd
    _LCD_WriteCmd->_delay_ms
    _ESP8266_client->_ESP8266_Link_Server
    _STA_MODE->_ESP8266_Net_Mode_Choose
    _ESP8266_Net_Mode_Choose->_ESP8266_Cmd
    _ESP8266_Rst->_ESP8266_Cmd
    _ESP8266_Link_Server->_ESP8266_Cmd
    _ESP8266_JoinAP->_ESP8266_Cmd
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ESP8266_AT_Test->_ESP8266_Cmd
    _ESP8266_Cmd->_strstr
    _ESP8266_ReceiveString->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _ADtoPWM->_PWMt0PCA
    _PWMt0PCA->_transmit_finger
    _transmit_finger->_PCA9685_writeOneByte
    _PCA9685_writeOneByte->_IIC_Send_Byte
    _delay_ms->_Delay10KTCYx
    _IIC_Wait_Ack->_delay_us
    _IIC_Stop->_delay_us
    _IIC_Start->_delay_us
    _IIC_Send_Byte->_delay_us
    _delay_us->_Delay10TCYx

Critical Paths under _time_adc in COMRAM

    None.

Critical Paths under _main in BANK0

    _ESP8266_Link_Server->_sprintf
    _ESP8266_JoinAP->_sprintf

Critical Paths under _time_adc in BANK0

    None.

Critical Paths under _main in BANK1

    _ESP8266_client->_ESP8266_Link_Server

Critical Paths under _time_adc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _time_adc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _time_adc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _time_adc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _time_adc in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0  115930
                                             51 COMRAM     2     2      0
                            _ADtoPWM
              _ESP8266_ReceiveString
                     _ESP8266_client
                       _GPIO_initial
                         _LCD_GotoXY
                     _LCD_Initialize
                       _LCD_WriteCmd
                      _LCD_WritetStr
                       _PCA9685_init
                           _delay_ms
                       _finger_reset
                       _initial_UART
                             _memset
                 _oclillator_initial
                    _timer_2_initial
            _timer_intrrupt_initinal
 ---------------------------------------------------------------------------------
 (1) _timer_intrrupt_initinal                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_2_initial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _oclillator_initial                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     288
                                             17 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _initial_UART                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _finger_reset                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PCA9685_init                                         0     0      0    8404
                           _IIC_Init
               _PCA9685_writeOneByte
 ---------------------------------------------------------------------------------
 (2) _IIC_Init                                             0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _LCD_WritetStr                                        5     3      2    1484
                                             22 COMRAM     5     3      2
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        1     1      0    1277
                                             21 COMRAM     1     1      0
                     _LCDWriteNibble
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       0     0      0    2134
                       _LCD_WaitBusy
                       _LCD_WriteCmd
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _LCD_WaitBusy                                         0     0      0      22
                      _delayFor18Tcy
 ---------------------------------------------------------------------------------
 (3) _delayFor18Tcy                                        0     0      0      22
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (4) _Delay1TCYx                                           1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_GotoXY                                           6     5      1    2458
                                             22 COMRAM     6     5      1
                       _LCD_WriteCmd
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteCmd                                         1     1      0    1277
                                             21 COMRAM     1     1      0
                     _LCDWriteNibble
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     346
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _GPIO_initial                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP8266_client                                       0     0      0   86526
                    _ESP8266_AT_Test
                        _ESP8266_Cmd
                     _ESP8266_JoinAP
                _ESP8266_Link_Server
                        _ESP8266_Rst
                           _STA_MODE
 ---------------------------------------------------------------------------------
 (2) _STA_MODE                                             0     0      0   20281
                        _ESP8266_Cmd
            _ESP8266_Net_Mode_Choose
 ---------------------------------------------------------------------------------
 (3) _ESP8266_Net_Mode_Choose                              1     1      0   10156
                                             45 COMRAM     1     1      0
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Rst                                          0     0      0   10125
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Link_Server                                227   221      6   18187
                                             45 COMRAM     6     0      6
                                              0 BANK1    221   221      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ESP8266_JoinAP                                     124   120      4   17683
                                             45 COMRAM     4     0      4
                                              0 BANK1    120   120      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             39    29     10    7166
                                             29 COMRAM    14     4     10
                                              0 BANK0     21    21      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     694
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             24 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     703
                                             17 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ESP8266_AT_Test                                      0     0      0   10125
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (4) _ESP8266_Cmd                                          9     1      8   10125
                                             36 COMRAM     9     1      8
                       _ESP8266_Uart
                           _delay_ms
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _ESP8266_Uart                                         6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ESP8266_ReceiveString                                4     2      2    2274
                                             36 COMRAM     4     2      2
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _strstr                                               4     0      4    2237
                                             32 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     3      6     423
                                             23 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (6) _strlen                                               6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _strchr                                               5     1      4     278
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _ADtoPWM                                             26    24      2   10216
                                             35 COMRAM    10     8      2
                           _PWMt0PCA
 ---------------------------------------------------------------------------------
 (2) _PWMt0PCA                                             5     0      5    9947
                                             30 COMRAM     5     0      5
                    _transmit_finger
 ---------------------------------------------------------------------------------
 (3) _transmit_finger                                      5     2      3    9065
                                             25 COMRAM     5     2      3
               _PCA9685_writeOneByte
 ---------------------------------------------------------------------------------
 (2) _PCA9685_writeOneByte                                 2     1      1    7271
                                             23 COMRAM     2     1      1
                      _IIC_Send_Byte
                          _IIC_Start
                           _IIC_Stop
                       _IIC_Wait_Ack
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             2     0      2     835
                                             19 COMRAM     2     0      2
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (2) _Delay10KTCYx                                         2     2      0      31
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _IIC_Wait_Ack                                         1     1      0    2290
                                             20 COMRAM     1     1      0
                           _IIC_Stop
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _IIC_Stop                                             0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _IIC_Start                                            0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _IIC_Send_Byte                                        3     3      0    1202
                                             20 COMRAM     3     3      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     0      2    1133
                                             18 COMRAM     2     0      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (5) _Delay10TCYx                                          1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _time_adc                                            17    17      0      23
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADtoPWM
     _PWMt0PCA
       _transmit_finger
         _PCA9685_writeOneByte
           _IIC_Send_Byte
             _delay_us
               _Delay10TCYx
           _IIC_Start
             _delay_us
               _Delay10TCYx
           _IIC_Stop
             _delay_us
               _Delay10TCYx
           _IIC_Wait_Ack
             _IIC_Stop
               _delay_us
                 _Delay10TCYx
             _delay_us
               _Delay10TCYx
           _delay_ms
             _Delay10KTCYx
   _ESP8266_ReceiveString
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)
   _ESP8266_client
     _ESP8266_AT_Test
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _ESP8266_Cmd
       _ESP8266_Uart
       _delay_ms
         _Delay10KTCYx
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _ESP8266_JoinAP
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Link_Server
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Rst
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _STA_MODE
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _ESP8266_Net_Mode_Choose
         _ESP8266_Cmd
           _ESP8266_Uart
           _delay_ms
             _Delay10KTCYx
           _strstr
             _strchr
             _strlen
             _strncmp
               _strlen (ARG)
   _GPIO_initial
   _LCD_GotoXY
     _LCD_WriteCmd
       _LCDWriteNibble
       _delay_ms
         _Delay10KTCYx
     _delay_ms
       _Delay10KTCYx
   _LCD_Initialize
     _LCD_WaitBusy
       _delayFor18Tcy
         _Delay1TCYx
     _LCD_WriteCmd
       _LCDWriteNibble
       _delay_ms
         _Delay10KTCYx
     _delay_ms
       _Delay10KTCYx
   _LCD_WriteCmd
     _LCDWriteNibble
     _delay_ms
       _Delay10KTCYx
   _LCD_WritetStr
     _LCD_WriteData
       _LCDWriteNibble
       _delay_ms
         _Delay10KTCYx
   _PCA9685_init
     _IIC_Init
       _delay_us
         _Delay10TCYx
     _PCA9685_writeOneByte
       _IIC_Send_Byte
         _delay_us
           _Delay10TCYx
       _IIC_Start
         _delay_us
           _Delay10TCYx
       _IIC_Stop
         _delay_us
           _Delay10TCYx
       _IIC_Wait_Ack
         _IIC_Stop
           _delay_us
             _Delay10TCYx
         _delay_us
           _Delay10TCYx
       _delay_ms
         _Delay10KTCYx
   _delay_ms
     _Delay10KTCYx
   _finger_reset
   _initial_UART
   _memset
   _oclillator_initial
   _timer_2_initial
   _timer_intrrupt_initinal

 _time_adc (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0      64      10       39.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100     DD      DD       6       86.3%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80     15      15       4       16.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     35      64       1       79.4%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     288      14        0.0%
DATA                 0      0     288      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jan 29 20:17:14 2019

             _ESP8266_Link_Server 0B48                     ?_finger_reset 0001  
                               _s 0054                    _LCD_Initialize 0F86  
                     ?_LCD_GotoXY 0017                                _IP 0056  
             ___wmul@multiplicand 0014                       __CFG_BORV$3 000000  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                             l172 16FA                               l342 1336  
                             l352 0DC8                               l338 12D2  
                             l268 15C6                               l463 10A2  
                             l674 07F0                               l658 06F8  
                             l917 195E                               l598 01EA  
                             l599 01EE                      __CFG_CPB$OFF 000000  
                             _PR2 000FCB                      __CFG_CPD$OFF 000000  
               ??_timer_2_initial 0012                               prod 000FF3  
                             wreg 000FE8              ?_ESP8266_Link_Server 002E  
                   ?_IIC_Wait_Ack 0001         ??_ESP8266_Net_Mode_Choose 002E  
                    __CFG_LVP$OFF 000000                        _Delay1TCYx 195C  
                    __CFG_WDT$OFF 000000                   __end_of_ADtoPWM 0F86  
                            l1130 1482                              l1140 150E  
                            l4101 0790                              l4005 0502  
                            l4021 053E                              l4111 07C6  
                            l4031 058C                              l4007 0508  
                            l4023 055C                              l2513 1918  
                            l4201 0A26                              l4121 0804  
                            l4105 07A2                              l4211 0A74  
                            l4115 07EA                              l4051 0638  
                            l4043 05F2                              l4027 0576  
                            l2509 1940                              l2621 15B8  
                            l4213 0A8A                              l4205 0A40  
                            l4045 05FC                              l4037 05B8  
                            l4223 0ADC                              l4207 0A56  
                            l4151 091A                              l4143 0896  
                            l4127 0838                              l4071 06F2  
                            l4063 06BE                              l4311 0FC4  
                            l4225 0AF2                              l4217 0AA8  
                            l4233 0B26                              l4145 08D8  
                            l4161 09A0                              l4137 087E  
                            l4065 06C8                              l4057 0680  
                            l4219 0ABE                              l4251 1762  
                            l4163 09AC                              l4155 094C  
                            l4059 068A                              l4323 0FF4  
                            l4315 0FD4                              l3443 1740  
                            l4229 0B10                              l3701 123E  
                            l4165 09B0                              l4077 070C  
                            l4093 076A                              l3631 1904  
                            l4159 0982                              l4087 0752  
                            l4175 09FA                              l4271 0BCC  
                            l4263 0B60                              l4191 1188  
                            l4183 113C                              l4335 1528  
                            l4327 100A                              l4319 0FE4  
                            l4351 13C0                              l3447 1750  
                            l4503 111E                              l2593 134E  
                            l3721 0D74                              l4169 09D6  
                            l4177 0A16                              l4273 0BDC  
                            l4265 0B8E                              l3651 1276  
                            l3803 1504                              l4275 0C02  
                            l4187 1162                              l4283 16AC  
                            l4371 0EA2                              l4339 1532  
                            l4347 139A                              l2589 1346  
                            l4293 0F6C                              l3637 1560  
                            l4381 1062                              l3901 0238  
                            l3821 0022                              l4277 0C1E  
                            l4269 0BBC                              l4197 11AE  
                            l4365 0E34                              l3663 1604  
                            l3639 1564                              l3655 12A8  
                            l3647 124A                              l3903 0272  
                            l3831 005C                              l4367 0E4E  
                            l4289 0F1A                              l3657 12B0  
                            l3913 02CA                              l3833 0062  
                            l4369 0E78                              l3675 18EC  
                            l4379 1034                              l3683 12CE  
                            l3747 0DEC                              l3739 0DCC  
                            l3923 02EC                              l3931 0338  
                            l3915 02D4                              l3843 009E  
                            l3835 0068                              l3827 0040  
                            l3669 161E                              l3941 037E  
                            l3925 0304                              l3909 02A4  
                            l3829 0056                              l3695 1200  
                            l3775 1450                              l3759 18CC  
                            l3935 0356                              l3919 02DC  
                            l3863 014E                              l3847 00BC  
                            l3855 011E                              l3839 0070  
                            l3689 11C6                              l3697 1228  
                            l3777 1458                              l3945 0396  
                            l3881 01C2                              l3953 03B6  
                            l3787 1478                              l3779 145C  
                            l3795 14E4                              l3971 046E  
                            l3939 0366                              l3955 040A  
                            l3875 0198                              l3883 01D8  
                            l3797 14EC                              l3949 03AE  
                            l3885 01E0                              l3877 01A0  
                            l3799 14F0                              l3991 04C6  
                            l3967 0454                              l3887 01E6  
                            l3993 04CC                              l3977 048A  
                            l3897 0226                              l3889 01F4  
                            l3979 0490                              l3899 0232  
                            STR_1 7BAA                              STR_2 7CF6  
                            STR_3 7CB6                              STR_4 7CE0  
                            STR_5 7CBB                              STR_6 7CAD  
                            STR_7 7CBB                              STR_8 7CDA  
                            STR_9 7C1C                              _LATD 000F8C  
                            u4001 085C                              u3210 1302  
                            u3220 1330                              u3217 12F8  
                            u3227 1326                              u4141 0B56  
                            u3520 026C                              u1665 1356  
                            u3527 0262                              u1935 172C  
                            u1936 172E                              u4517 190A  
                            u3590 032C                              u4527 1942  
                   ?_LCD_WaitBusy 0001                              u3850 0674  
                            u3597 0322                              _TRMT 007D61  
                            _TXIF 007CF4                              _main 10AC  
            _strPc1_1_Fram_Record 0267                              _test 0036  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 0065         ??_timer_intrrupt_initinal 0012  
              __size_of_IIC_Start 0024                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                   __CFG_IESO$OFF 000000                    ?_IIC_Send_Byte 0001  
                    _sprintf$1440 0083                      _sprintf$1446 0085  
                    _sprintf$1439 0081                     ?_LCD_WriteCmd 0001  
          __end_of_LCD_Initialize 101C                     _LCD_WriteData 178E  
                   __CFG_MCLRE$ON 000000                    ??_finger_reset 0012  
                    ___param_bank 000000                     _LCD_WritetStr 1394  
                     _Delay10TCYx 193E                  __end_of_IIC_Init 18B6  
                __end_of_IIC_Stop 1870              __end_of_PCA9685_init 184C  
                           ?_main 0001                             STR_10 7CBB  
                           STR_11 7C38                             STR_12 7CBB  
                           STR_20 7C61                             STR_21 7CEE  
                           STR_13 7C46                             STR_14 7CBB  
                           STR_22 7C61                             STR_30 7B3B  
                           STR_23 7CF2                             STR_15 7B81  
                           STR_16 7CBB                             STR_40 7CFD  
                           STR_32 7C54                             STR_24 7B96  
                           STR_17 7CA3                             STR_33 7C99  
                           STR_41 7C0E                             STR_25 7BDF  
                           STR_50 7CBB                             STR_26 7CBE  
                           STR_18 7B21                             STR_35 7C54  
                           STR_51 7CEA                             STR_27 7CCD  
                           STR_43 7BF0                             STR_52 7C85  
                           STR_60 7CF9                             STR_36 7C8F  
                           STR_28 7B54                             STR_61 7CF9  
                           STR_37 7CBB                             STR_45 7C2A  
                           STR_53 7BFF                             STR_54 7CBB  
                           STR_38 7CEA                             STR_62 7CD4  
                           STR_55 7C0E                             STR_63 7CC6  
                           STR_39 7C85                             STR_47 7B6B  
                           STR_56 7CBB                             STR_64 7BBD  
                           STR_49 7C7A                             STR_57 7C6E  
                           STR_65 7BCE                             STR_58 7CE5  
                           STR_59 7CFB                   __end_of___lwdiv 148C  
                 __end_of___lwmod 1518                             i2l541 0D00  
                           i2l537 0CF2                             i2l538 0CF0  
                           _RCREG 000FAE                             _SPBRG 000FAF  
                           _PORTD 000F83                             _TRISD 000F95  
            __end_of_ESP8266_Uart 133C                             _TXREG 000FAD  
           __size_of_Delay10KTCYx 0016                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000             ??_ESP8266_Link_Server 0034  
                  __CFG_EBTR2$OFF 000000                    ??_IIC_Wait_Ack 0015  
                  __CFG_EBTR3$OFF 000000                     ?_GPIO_initial 0001  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
           __end_of_delayFor18Tcy 197E                   __end_of_dpowers 7B19  
                           _count 005C                  __end_of_STA_MODE 16D8  
                 __end_of_isdigit 18D4                    ??_LCD_WaitBusy 0013  
                           _write 005B                  __end_of_PWMt0PCA 0B48  
             __size_of_LCD_GotoXY 003E                             pclath 000FFA  
                           tablat 000FF5           __size_of_ESP8266_JoinAP 004A  
                           plusw1 000FE3                             plusw2 000FDB  
                           status 000FD8                   __end_of_sprintf 0A24  
      __end_of_oclillator_initial 1976                   __end_of_strncmp 12CA  
                  ??_LCD_WriteCmd 0016           __size_of_ESP8266_client 00C4  
                  ?_LCD_WriteData 0001                      LCD_GotoXY@ln 0017  
                 ?_LCD_Initialize 0001                 ??_transmit_finger 001D  
                 __initialization 13E8                    ?_LCD_WritetStr 0017  
                    __end_of_main 1138              __size_of_ESP8266_Cmd 00C8  
            __size_of_ESP8266_Rst 0026                      _Delay10KTCYx 1902  
                  __CFG_OSC$HSPLL 000000             _ESP8266_ReceiveString 101C  
                  ESP8266_Cmd@cmd 0025                            ??_main 0034  
 __end_of_timer_intrrupt_initinal 193E                     __activetblptr 000002  
               __end_of_IIC_Start 1894                         ??_ADtoPWM 0026  
                  ??_GPIO_initial 0012             ESP8266_Link_Server@id 0032  
           ESP8266_Link_Server@ip 002E                  IIC_Send_Byte@txd 0016  
                     ?_Delay1TCYx 0001                            _SPBRGH 000FB0  
                   ?_initial_UART 0001                   ??_IIC_Send_Byte 0015  
                  _LCDWriteNibble 1708                  __end_of_delay_ms 1902  
                __end_of_delay_us 192E                    __CFG_XINST$OFF 000000  
                _ESP8266_Cmd$1210 002D               ESP8266_JoinAP@pSSID 002E  
        __size_of_ESP8266_AT_Test 002C                            ___wmul 17DE  
                  __CFG_STVREN$ON 000000                         ??___lwdiv 0016  
                       ??___lwmod 001D                 ESP8266_Cmd@reply1 0027  
               ESP8266_Cmd@reply2 0029                            _memset 1736  
                          clear_0 140E                            clear_1 141A  
                          clear_2 1426                            _strchr 1604  
                          _strlen 1556                            _strstr 11C4  
           IIC_Wait_Ack@ucErrTime 0015                      __pdataCOMRAM 005D  
                       ??_isdigit 0012                  __end_of_time_adc 0D3C  
                    __mediumconst 7184                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
            __end_of_finger_reset 1980                         ??_sprintf 0028  
       ESP8266_Link_Server@ComNum 0030                         ??_strncmp 001E  
          __end_of_LCDWriteNibble 1736                        __accesstop 0080  
         __end_of__initialization 142C                         ?_IIC_Init 0001  
                  ??_initial_UART 0012                   __CFG_PBADEN$OFF 000000  
                       ?_IIC_Stop 0001                   ??_LCD_WriteData 0016  
                   ___rparam_used 000001                   ??_LCD_WritetStr 0019  
         transmit_finger@HL_Value 001A                     LCD_GotoXY@pos 001C  
                  __pcstackCOMRAM 0001                   _timer_2_initial 18D4  
            __end_of_IIC_Wait_Ack 15CE             __size_of_PCA9685_init 0024  
                    ??_LCD_GotoXY 0018           ESP8266_JoinAP@pPassWord 0030  
          ?_ESP8266_ReceiveString 0025              __end_of_LCD_WaitBusy 1708  
             __size_of_Delay1TCYx 000A                         ?_STA_MODE 0001  
           __size_of_ESP8266_Uart 0072                         ?_PWMt0PCA 001F  
                       ADtoPWM@AD 0024                         ADtoPWM@u4 002A  
                       ADtoPWM@w4 002C                  LCD_WritetStr@str 0017  
            __end_of_LCD_WriteCmd 1604     __size_of_PCA9685_writeOneByte 0036  
                    sprintf@width 0090                    _ESP8266_JoinAP 148C  
                      __pbssBANK2 0200                        __pbssBANK3 0300  
        ESP8266_Link_Server@F4048 0300                __end_of_LCD_GotoXY 1556  
                 ?_LCDWriteNibble 0012                        ??_IIC_Init 0015  
                      ??_IIC_Stop 0015                      _PCA9685_init 1828  
                  _ESP8266_client 0E04                      _ESP8266_Uart 12CA  
              __CFG_CCP2MX$PORTBE 000000              __end_of_GPIO_initial 195C  
        ESP8266_Link_Server@enumE 01DC                      ?_Delay10TCYx 0001  
                         ?___wmul 0012             transmit_finger@finger 001C  
                 ESP8266_Uart@cmd 0012                        ??_STA_MODE 002F  
                         ?_memset 0012                        ??_PWMt0PCA 0024  
               ??_ESP8266_AT_Test 002E                           ?_strchr 0012  
                         ?_strlen 0012                           ?_strstr 0021  
                         _ADtoPWM 0EC8                         ?_delay_ms 0014  
                       ?_delay_us 0013            __end_of_ESP8266_JoinAP 14D6  
               ESP8266_Uart@index 0016                   _transmit_finger 163A  
    ESP8266_ReceiveString@pRecStr 0027            __end_of_ESP8266_client 0EC8  
                ??_LCD_Initialize 0017           __end_of_timer_2_initial 18EC  
                         __Hparam 0000                           __Lparam 0000  
                       ?_time_adc 0001                   __size_of___wmul 0026  
                         ___lwdiv 143A                           ___lwmod 14D6  
              _oclillator_initial 196E                           __pcinit 13E8  
                 __size_of_memset 002C                   Delay10TCYx@unit 0012  
                         __ramtop 0600       __end_of_ESP8266_Link_Server 0C44  
                         __ptext0 10AC                           __ptext1 192E  
                         __ptext2 18D4                           __ptext3 196E  
                         __ptext4 1736                           __ptext5 1804  
                         __ptext6 197E                           __ptext7 1828  
                         __ptext8 1894                           __ptext9 1394  
                       _T0CONbits 000FD5              __end_of_initial_UART 1828  
                 __size_of_strchr 0036             __size_of_finger_reset 0002  
                 __size_of_strlen 003E                 __end_of_hexpowers 7B21  
                 __size_of_strstr 0084                           _dpowers 7B0F  
        ?_ESP8266_Net_Mode_Choose 0001                         _T2CONbits 000FCA  
                         _isdigit 18B6               ?_oclillator_initial 0001  
                      ??_delay_ms 0016                        ??_delay_us 0015  
                 ?_ESP8266_JoinAP 002E                         _IIC_Start 1870  
                    ??_Delay1TCYx 0012                           _sprintf 0012  
                         _strncmp 1248                    __pintcode_body 0C44  
                      delay_ms@ms 0014              end_of_initialization 142C  
               __end_of_octpowers 7B0F          ?_timer_intrrupt_initinal 0001  
                      delay_us@us 0013                   ?_ESP8266_client 0001  
                         memset@c 0014                           memset@n 0016  
                         memset@p 0018                     __Lmediumconst 7184  
                         int_func 0C44             __size_of_IIC_Wait_Ack 003A  
                   ??_ESP8266_Cmd 002D              ??_oclillator_initial 0012  
                   ??_ESP8266_Rst 002E             __size_of_LCD_WaitBusy 0030  
                      ??_time_adc 0001                         _RCSTAbits 000FAB  
                         postdec1 000FE5                           postdec2 000FDD  
                    _finger_reset 197E                           postinc0 000FEE  
                         postinc2 000FDE            __size_of_delayFor18Tcy 0008  
                         strlen@s 0012                __end_of_Delay1TCYx 1966  
           __size_of_LCD_WriteCmd 0036                         _PORTBbits 000F81  
                       _PORTDbits 000F83                        _test_index 0058  
         __end_of_transmit_finger 1670                         _TRISAbits 000F92  
                       _TRISBbits 000F93                      _IIC_Wait_Ack 1594  
                      ?_IIC_Start 0001                      _LCD_WaitBusy 16D8  
           __size_of_GPIO_initial 000E                  ?_timer_2_initial 0001  
                       _TXSTAbits 000FAC                 __size_of_IIC_Init 0022  
               __size_of_IIC_Stop 0024             __end_of_IIC_Send_Byte 1394  
         ??_ESP8266_ReceiveString 0027                      _LCD_WriteCmd 15CE  
                  IIC_Send_Byte@t 0017               __end_of_ESP8266_Cmd 0E04  
 __end_of_ESP8266_Net_Mode_Choose 11C4                    __end_of___wmul 1804  
             __end_of_ESP8266_Rst 17DE                       _BAUDCONbits 000FB8  
            __size_of_Delay10TCYx 0010                     __pidataCOMRAM 1966  
                  __end_of_memset 1762                 __size_of_STA_MODE 0032  
                  __end_of_strchr 163A                 __size_of_PWMt0PCA 0124  
                  __end_of_strlen 1594                    __end_of_strstr 1248  
             start_initialization 13E8                  ??_LCDWriteNibble 0013  
                    _GPIO_initial 194E                     _delayFor18Tcy 1976  
                     PWMt0PCA@low 0021             __end_of_LCD_WriteData 17B8  
                 _ESP8266_AT_Test 1762                ESP8266_JoinAP@cCmd 0100  
    __end_of_PCA9685_writeOneByte 16A6             __end_of_LCD_WritetStr 13E8  
                 LCD_WriteData@ch 0016                          ??___wmul 0016  
           __size_of_initial_UART 0024                  __CFG_LPT1OSC$OFF 000000  
                        ??_memset 0018               __end_of_finger_up_0 72BB  
             __end_of_finger_up_1 77EB               __end_of_finger_up_2 760F  
             __end_of_finger_up_3 750D               __end_of_finger_up_4 73E9  
                        ??_strchr 0016                          ??_strlen 0014  
                        ??_strstr 0025       ESP8266_Net_Mode_Choose@MODE 002E  
                        ?_ADtoPWM 0024                  ?_transmit_finger 001A  
                     __pbssCOMRAM 0036                     __pcstackBANK0 0080  
                   __pcstackBANK1 0100                    ?_delayFor18Tcy 0001  
                     ??_IIC_Start 0015                      _isdigit$1676 0013  
                   _str1_1esp8266 0234                 __size_of_delay_ms 0016  
               __size_of_delay_us 0016                       sprintf@flag 0093  
                     sprintf@prec 008F                      _initial_UART 1804  
            transmit_finger@Hbyte 001D                       _ESP8266_Cmd 0D3C  
            transmit_finger@Lbyte 001E           ESP8266_Link_Server@cCmd 0100  
                ___lwdiv@dividend 0012                       _ESP8266_Rst 17B8  
         ESP8266_Link_Server@cStr 0178                         __pintcode 0008  
                   __pmediumconst 7184                     ?_Delay10KTCYx 0001  
                        ?___lwdiv 0012                          ?___lwmod 0019  
               __size_of_time_adc 0D34                    PWMt0PCA@finger 0023  
                LCDWriteNibble@ch 0013                  LCDWriteNibble@rs 0012  
                ??_ESP8266_JoinAP 0032                          ?_isdigit 0001  
                       _hexpowers 7B19                  ??_ESP8266_client 0034  
                ___lwdiv@quotient 0017                          ?_sprintf 001E  
                        ?_strncmp 0018           __end_of_ESP8266_AT_Test 178E  
                        _IIC_Init 1894                    ___wmul@product 0016  
                        _IIC_Stop 184C  __size_of_ESP8266_Net_Mode_Choose 008C  
                        _LATAbits 000F89                         _octpowers 7B03  
                        _PIE1bits 000F9D                        time_adc@ch 0011  
                        _PIR1bits 000F9E                       _finger_up_0 7185  
                     _finger_up_1 76FF                       _finger_up_2 750D  
                     _finger_up_3 73E9                       _finger_up_4 72BB  
                        _RCONbits 000FD0                  __CFG_WDTPS$32768 000000  
                  ??_Delay10KTCYx 0012  __size_of_timer_intrrupt_initinal 0010  
                        _STA_MODE 16A6                          _PWMt0PCA 0A24  
               ___wmul@multiplier 0012                   ??_delayFor18Tcy 0013  
                Delay10KTCYx@unit 0013                  __size_of_ADtoPWM 00BE  
    __size_of_ESP8266_Link_Server 00FC              _PCA9685_writeOneByte 1670  
                       _work_flag 005A                         copy_data0 13FC  
                      PWMt0PCA@up 001F                          __Hrparam 0000  
     __size_of_oclillator_initial 0008                    LCD_WriteCmd@ch 0016  
                        __Lrparam 0000          PCA9685_writeOneByte@addr 0019  
              __CFG_BOREN$SBORDIS 000000          PCA9685_writeOneByte@data 0018  
  __size_of_ESP8266_ReceiveString 0090     __end_of_ESP8266_ReceiveString 10AC  
         __size_of_LCD_Initialize 0096                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042               LCD_CreateFont@F3803 005D  
                  LCD_WritetStr@i 001B                        sprintf@idx 0080  
                      sprintf@len 0089                        sprintf@val 008D  
                __size_of_isdigit 001E                          _delay_ms 18EC  
                        _delay_us 1918                   ___lwdiv@divisor 0014  
           ?_PCA9685_writeOneByte 0018                   ___lwdiv@counter 0016  
                        __ptext10 178E                          __ptext11 0F86  
                        __ptext20 16A6                          __ptext12 16D8  
                        __ptext21 1138                          __ptext13 1976  
                        __ptext30 1762                          __ptext22 17B8  
                        __ptext14 195C                          __ptext31 0D3C  
                        __ptext23 0B48                          __ptext15 1518  
                        __ptext40 163A                          __ptext32 12CA  
                        __ptext24 148C                          __ptext16 15CE  
                        __ptext41 1670                          __ptext33 101C  
                        __ptext25 0012                          __ptext17 1708  
                        __ptext42 18EC                          __ptext34 11C4  
                        __ptext26 18B6                          __ptext18 194E  
                        __ptext43 1902                          __ptext35 1248  
                        __ptext27 17DE                          __ptext19 0E04  
                        __ptext44 1594                          __ptext36 1556  
                        __ptext28 14D6                          __ptext45 184C  
                        __ptext37 1604                          __ptext29 143A  
                        __ptext46 1870                          __ptext38 0EC8  
                        __ptext47 133C                          __ptext39 0A24  
                        __ptext48 1918                          __ptext49 193E  
                __size_of_sprintf 0A12                  __size_of_strncmp 0082  
                ?_ESP8266_AT_Test 0001                     ?_PCA9685_init 0001  
                   __size_of_main 008C                    Delay1TCYx@unit 0012  
             ESP8266_Cmd@waittime 002B                        strncmp@len 001C  
                   ?_ESP8266_Uart 0012                          _time_adc 0008  
                   ??_Delay10TCYx 0012                          int$flags 0065  
        __size_of_timer_2_initial 0018                        _LCD_GotoXY 1518  
               _strPc_Fram_Record 0200                          main@temp 0034  
                  _finger_under_0 78CD                    _finger_under_1 79A5  
                  _finger_under_2 77EB                    _finger_under_3 7A65  
                  _finger_under_4 760F                        _INTCONbits 000FF2  
          __size_of_IIC_Send_Byte 0058                          isdigit@c 0014  
                        memset@p1 0012              __end_of_Delay10KTCYx 1918  
                        intlevel2 0000                         sprintf@ap 008B  
                       sprintf@cp 0087                         sprintf@sp 001E  
         _ESP8266_Net_Mode_Choose 1138                    ??_PCA9685_init 001A  
                       strchr@chr 0014                  ___lwmod@dividend 0019  
                       strchr@ptr 0012                    ??_ESP8266_Uart 0014  
                       strncmp@s1 0018                         strncmp@s2 001A  
                    ?_ESP8266_Cmd 0025                        _OSCCONbits 000FD3  
                    ?_ESP8266_Rst 0001           _timer_intrrupt_initinal 192E  
          __end_of_finger_under_0 79A5            __end_of_finger_under_1 7A65  
          __end_of_finger_under_2 78CD            __end_of_finger_under_3 7B03  
          __end_of_finger_under_4 76FF               __end_of_Delay10TCYx 194E  
                        sprintf@c 0092                          sprintf@f 0020  
                 ___lwmod@divisor 001B                          strlen@cp 0016  
                 ___lwmod@counter 001D            ??_PCA9685_writeOneByte 0019  
          __size_of_LCD_WriteData 002A            _strEsp8266_Fram_Record 029A  
                        strstr@s1 0021                          strstr@s2 0023  
          __size_of_LCD_WritetStr 0054          __size_of_transmit_finger 0036  
                  _LCD_GotoXY$640 001A           __size_of_LCDWriteNibble 002E  
                   _IIC_Send_Byte 133C  
