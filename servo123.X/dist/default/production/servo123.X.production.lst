

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jan 29 23:22:18 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           ; Version 1.41
    75                           ; Generated 25/01/2017 GMT
    76                           ; 
    77                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F4520 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataCOMRAM
   110  0018FC                     __pidataCOMRAM:
   111                           	opt stack 0
   112                           
   113                           ;initializer for LCD_CreateFont@F3803
   114  0018FC  1F                 	db	31
   115  0018FD  11                 	db	17
   116  0018FE  11                 	db	17
   117  0018FF  1F                 	db	31
   118  001900  11                 	db	17
   119  001901  11                 	db	17
   120  001902  1F                 	db	31
   121  001903  00                 	db	0
   122                           
   123                           	psect	mediumconst
   124  007480                     __pmediumconst:
   125                           	opt stack 0
   126  007480  00                 	db	0
   127  007481                     _finger_up_0:
   128                           	opt stack 0
   129  007481  02E1               	dw	737
   130  007483  00                 	db	0
   131  007484  00                 	db	0
   132  007485  00                 	db	0
   133  007486  00                 	db	0
   134  007487  00                 	db	0
   135  007488  00                 	db	0
   136  007489  00                 	db	0
   137  00748A  00                 	db	0
   138  00748B  00                 	db	0
   139  00748C  00                 	db	0
   140  00748D  00                 	db	0
   141  00748E  00                 	db	0
   142  00748F  00                 	db	0
   143  007490  00                 	db	0
   144  007491  00                 	db	0
   145  007492  00                 	db	0
   146  007493  00                 	db	0
   147  007494  00                 	db	0
   148  007495  00                 	db	0
   149  007496  00                 	db	0
   150  007497  00                 	db	0
   151  007498  00                 	db	0
   152  007499  00                 	db	0
   153  00749A  00                 	db	0
   154  00749B  00                 	db	0
   155  00749C  00                 	db	0
   156  00749D  00                 	db	0
   157  00749E  00                 	db	0
   158  00749F  00                 	db	0
   159  0074A0  00                 	db	0
   160  0074A1  00                 	db	0
   161  0074A2  00                 	db	0
   162  0074A3  00                 	db	0
   163  0074A4  00                 	db	0
   164  0074A5  00                 	db	0
   165  0074A6  00                 	db	0
   166  0074A7  00                 	db	0
   167  0074A8  00                 	db	0
   168  0074A9  00                 	db	0
   169  0074AA  00                 	db	0
   170  0074AB  00                 	db	0
   171  0074AC  00                 	db	0
   172  0074AD  00                 	db	0
   173  0074AE  00                 	db	0
   174  0074AF  00                 	db	0
   175  0074B0  00                 	db	0
   176  0074B1  00                 	db	0
   177  0074B2  00                 	db	0
   178  0074B3  00                 	db	0
   179  0074B4  00                 	db	0
   180  0074B5  00                 	db	0
   181  0074B6  00                 	db	0
   182  0074B7  00                 	db	0
   183  0074B8  00                 	db	0
   184  0074B9  00                 	db	0
   185  0074BA  00                 	db	0
   186  0074BB  00                 	db	0
   187  0074BC  00                 	db	0
   188  0074BD  00                 	db	0
   189  0074BE  00                 	db	0
   190  0074BF  00                 	db	0
   191  0074C0  00                 	db	0
   192  0074C1  00                 	db	0
   193  0074C2  00                 	db	0
   194  0074C3  00                 	db	0
   195  0074C4  00                 	db	0
   196  0074C5  00                 	db	0
   197  0074C6  00                 	db	0
   198  0074C7  00                 	db	0
   199  0074C8  00                 	db	0
   200  0074C9  00                 	db	0
   201  0074CA  00                 	db	0
   202  0074CB  00                 	db	0
   203  0074CC  00                 	db	0
   204  0074CD  00                 	db	0
   205  0074CE  00                 	db	0
   206  0074CF  00                 	db	0
   207  0074D0  00                 	db	0
   208  0074D1  00                 	db	0
   209  0074D2  00                 	db	0
   210  0074D3  00                 	db	0
   211  0074D4  00                 	db	0
   212  0074D5  00                 	db	0
   213  0074D6  00                 	db	0
   214  0074D7  00                 	db	0
   215  0074D8  00                 	db	0
   216  0074D9  00                 	db	0
   217  0074DA  00                 	db	0
   218  0074DB  00                 	db	0
   219  0074DC  00                 	db	0
   220  0074DD  00                 	db	0
   221  0074DE  00                 	db	0
   222  0074DF  00                 	db	0
   223  0074E0  00                 	db	0
   224  0074E1  00                 	db	0
   225  0074E2  00                 	db	0
   226  0074E3  00                 	db	0
   227  0074E4  00                 	db	0
   228  0074E5  00                 	db	0
   229  0074E6  00                 	db	0
   230  0074E7  00                 	db	0
   231  0074E8  00                 	db	0
   232  0074E9  00                 	db	0
   233  0074EA  00                 	db	0
   234  0074EB  00                 	db	0
   235  0074EC  00                 	db	0
   236  0074ED  00                 	db	0
   237  0074EE  00                 	db	0
   238  0074EF  00                 	db	0
   239  0074F0  00                 	db	0
   240  0074F1  00                 	db	0
   241  0074F2  00                 	db	0
   242  0074F3  00                 	db	0
   243  0074F4  00                 	db	0
   244  0074F5  00                 	db	0
   245  0074F6  00                 	db	0
   246  0074F7  00                 	db	0
   247  0074F8  00                 	db	0
   248  0074F9  00                 	db	0
   249  0074FA  00                 	db	0
   250  0074FB  00                 	db	0
   251  0074FC  00                 	db	0
   252  0074FD  00                 	db	0
   253  0074FE  00                 	db	0
   254  0074FF  00                 	db	0
   255  007500  00                 	db	0
   256  007501  00                 	db	0
   257  007502  00                 	db	0
   258  007503  00                 	db	0
   259  007504  00                 	db	0
   260  007505  00                 	db	0
   261  007506  00                 	db	0
   262  007507  00                 	db	0
   263  007508  00                 	db	0
   264  007509  00                 	db	0
   265  00750A  00                 	db	0
   266  00750B  00                 	db	0
   267  00750C  00                 	db	0
   268  00750D  00                 	db	0
   269  00750E  00                 	db	0
   270  00750F  00                 	db	0
   271  007510  00                 	db	0
   272  007511  00                 	db	0
   273  007512  00                 	db	0
   274  007513  00                 	db	0
   275  007514  00                 	db	0
   276  007515  00                 	db	0
   277  007516  00                 	db	0
   278  007517  00                 	db	0
   279  007518  00                 	db	0
   280  007519  00                 	db	0
   281  00751A  00                 	db	0
   282  00751B  00                 	db	0
   283  00751C  00                 	db	0
   284  00751D  00                 	db	0
   285  00751E  00                 	db	0
   286  00751F  00                 	db	0
   287  007520  00                 	db	0
   288  007521  00                 	db	0
   289  007522  00                 	db	0
   290  007523  00                 	db	0
   291  007524  00                 	db	0
   292  007525  00                 	db	0
   293  007526  00                 	db	0
   294  007527  00                 	db	0
   295  007528  00                 	db	0
   296  007529  00                 	db	0
   297  00752A  00                 	db	0
   298  00752B  00                 	db	0
   299  00752C  00                 	db	0
   300  00752D  00                 	db	0
   301  00752E  00                 	db	0
   302  00752F  00                 	db	0
   303  007530  00                 	db	0
   304  007531  00                 	db	0
   305  007532  00                 	db	0
   306  007533  00                 	db	0
   307  007534  00                 	db	0
   308  007535  00                 	db	0
   309  007536  00                 	db	0
   310  007537  00                 	db	0
   311  007538  00                 	db	0
   312  007539  00                 	db	0
   313  00753A  00                 	db	0
   314  00753B  00                 	db	0
   315  00753C  00                 	db	0
   316  00753D  00                 	db	0
   317  00753E  00                 	db	0
   318  00753F  00                 	db	0
   319  007540  00                 	db	0
   320  007541  00                 	db	0
   321  007542  00                 	db	0
   322  007543  00                 	db	0
   323  007544  00                 	db	0
   324  007545  00                 	db	0
   325  007546  00                 	db	0
   326  007547  00                 	db	0
   327  007548  00                 	db	0
   328  007549  00                 	db	0
   329  00754A  00                 	db	0
   330  00754B  00                 	db	0
   331  00754C  00                 	db	0
   332  00754D  00                 	db	0
   333  00754E  00                 	db	0
   334  00754F  00                 	db	0
   335  007550  00                 	db	0
   336  007551  00                 	db	0
   337  007552  00                 	db	0
   338  007553  00                 	db	0
   339  007554  00                 	db	0
   340  007555  00                 	db	0
   341  007556  00                 	db	0
   342  007557  00                 	db	0
   343  007558  00                 	db	0
   344  007559  00                 	db	0
   345  00755A  00                 	db	0
   346  00755B  00                 	db	0
   347  00755C  00                 	db	0
   348  00755D  00                 	db	0
   349  00755E  00                 	db	0
   350  00755F  00                 	db	0
   351  007560  00                 	db	0
   352  007561  00                 	db	0
   353  007562  00                 	db	0
   354  007563  00                 	db	0
   355  007564  00                 	db	0
   356  007565  00                 	db	0
   357  007566  00                 	db	0
   358  007567  00                 	db	0
   359  007568  00                 	db	0
   360  007569  00                 	db	0
   361  00756A  00                 	db	0
   362  00756B  00                 	db	0
   363  00756C  00                 	db	0
   364  00756D  00                 	db	0
   365  00756E  00                 	db	0
   366  00756F  00                 	db	0
   367  007570  00                 	db	0
   368  007571  00                 	db	0
   369  007572  00                 	db	0
   370  007573  00                 	db	0
   371  007574  00                 	db	0
   372  007575  00                 	db	0
   373  007576  00                 	db	0
   374  007577  00                 	db	0
   375  007578  00                 	db	0
   376  007579  00                 	db	0
   377  00757A  00                 	db	0
   378  00757B  00                 	db	0
   379  00757C  00                 	db	0
   380  00757D  00                 	db	0
   381  00757E  00                 	db	0
   382  00757F  00                 	db	0
   383  007580  00                 	db	0
   384  007581  00                 	db	0
   385  007582  00                 	db	0
   386  007583  00                 	db	0
   387  007584  00                 	db	0
   388  007585  00                 	db	0
   389  007586  00                 	db	0
   390  007587  00                 	db	0
   391  007588  00                 	db	0
   392  007589  00                 	db	0
   393  00758A  00                 	db	0
   394  00758B  00                 	db	0
   395  00758C  00                 	db	0
   396  00758D  00                 	db	0
   397  00758E  00                 	db	0
   398  00758F  00                 	db	0
   399  007590  00                 	db	0
   400  007591  00                 	db	0
   401  007592  00                 	db	0
   402  007593  00                 	db	0
   403  007594  00                 	db	0
   404  007595  00                 	db	0
   405  007596  00                 	db	0
   406  007597  00                 	db	0
   407  007598  00                 	db	0
   408  007599  00                 	db	0
   409  00759A  00                 	db	0
   410  00759B  00                 	db	0
   411  00759C  00                 	db	0
   412  00759D  00                 	db	0
   413  00759E  00                 	db	0
   414  00759F  00                 	db	0
   415  0075A0  00                 	db	0
   416  0075A1  00                 	db	0
   417  0075A2  00                 	db	0
   418  0075A3  00                 	db	0
   419  0075A4  00                 	db	0
   420  0075A5  00                 	db	0
   421  0075A6  00                 	db	0
   422  0075A7  00                 	db	0
   423  0075A8  00                 	db	0
   424  0075A9  00                 	db	0
   425  0075AA  00                 	db	0
   426  0075AB  00                 	db	0
   427  0075AC  00                 	db	0
   428  0075AD  00                 	db	0
   429  0075AE  00                 	db	0
   430  0075AF  00                 	db	0
   431  0075B0  00                 	db	0
   432  0075B1  00                 	db	0
   433  0075B2  00                 	db	0
   434  0075B3  00                 	db	0
   435  0075B4  00                 	db	0
   436  0075B5  00                 	db	0
   437  0075B6  00                 	db	0
   438  0075B7                     __end_of_finger_up_0:
   439                           	opt stack 0
   440  0075B7                     _finger_up_4:
   441                           	opt stack 0
   442  0075B7  02E1               	dw	737
   443  0075B9  02E7               	dw	743
   444  0075BB  02ED               	dw	749
   445  0075BD  02F3               	dw	755
   446  0075BF  02F9               	dw	761
   447  0075C1  02FF               	dw	767
   448  0075C3  0305               	dw	773
   449  0075C5  030B               	dw	779
   450  0075C7  0311               	dw	785
   451  0075C9  0317               	dw	791
   452  0075CB  031D               	dw	797
   453  0075CD  0323               	dw	803
   454  0075CF  0329               	dw	809
   455  0075D1  032F               	dw	815
   456  0075D3  0335               	dw	821
   457  0075D5  033B               	dw	827
   458  0075D7  0341               	dw	833
   459  0075D9  0347               	dw	839
   460  0075DB  034D               	dw	845
   461  0075DD  0353               	dw	851
   462  0075DF  0359               	dw	857
   463  0075E1  035F               	dw	863
   464  0075E3  0365               	dw	869
   465  0075E5  036B               	dw	875
   466  0075E7  0371               	dw	881
   467  0075E9  0377               	dw	887
   468  0075EB  037D               	dw	893
   469  0075ED  0383               	dw	899
   470  0075EF  0389               	dw	905
   471  0075F1  038F               	dw	911
   472  0075F3  0395               	dw	917
   473  0075F5  039B               	dw	923
   474  0075F7  03A1               	dw	929
   475  0075F9  03A7               	dw	935
   476  0075FB  03AD               	dw	941
   477  0075FD  03B3               	dw	947
   478  0075FF  03B9               	dw	953
   479  007601  03BF               	dw	959
   480  007603  03C6               	dw	966
   481  007605  03CC               	dw	972
   482  007607  03D2               	dw	978
   483  007609  03D8               	dw	984
   484  00760B  03DE               	dw	990
   485  00760D  03E4               	dw	996
   486  00760F  03EA               	dw	1002
   487  007611  03F0               	dw	1008
   488  007613  03F6               	dw	1014
   489  007615  03FC               	dw	1020
   490  007617  0402               	dw	1026
   491  007619  0408               	dw	1032
   492  00761B  040E               	dw	1038
   493  00761D  0414               	dw	1044
   494  00761F  041A               	dw	1050
   495  007621  0420               	dw	1056
   496  007623  0426               	dw	1062
   497  007625  042C               	dw	1068
   498  007627  0432               	dw	1074
   499  007629  0438               	dw	1080
   500  00762B  043E               	dw	1086
   501  00762D  0444               	dw	1092
   502  00762F  044A               	dw	1098
   503  007631  0450               	dw	1104
   504  007633  0456               	dw	1110
   505  007635  045C               	dw	1116
   506  007637  0462               	dw	1122
   507  007639  0468               	dw	1128
   508  00763B  046E               	dw	1134
   509  00763D  0474               	dw	1140
   510  00763F  047A               	dw	1146
   511  007641  0480               	dw	1152
   512  007643  0486               	dw	1158
   513  007645  048C               	dw	1164
   514  007647  0492               	dw	1170
   515  007649  0498               	dw	1176
   516  00764B  049E               	dw	1182
   517  00764D  04A5               	dw	1189
   518  00764F  04AB               	dw	1195
   519  007651  04B1               	dw	1201
   520  007653  04B7               	dw	1207
   521  007655  04BD               	dw	1213
   522  007657  04C3               	dw	1219
   523  007659  04C9               	dw	1225
   524  00765B  04CF               	dw	1231
   525  00765D  04D5               	dw	1237
   526  00765F  04DB               	dw	1243
   527  007661  04E1               	dw	1249
   528  007663  04E7               	dw	1255
   529  007665  04ED               	dw	1261
   530  007667  04F3               	dw	1267
   531  007669  04F9               	dw	1273
   532  00766B  04FF               	dw	1279
   533  00766D  0505               	dw	1285
   534  00766F  050B               	dw	1291
   535  007671  0511               	dw	1297
   536  007673  0517               	dw	1303
   537  007675  051D               	dw	1309
   538  007677  0523               	dw	1315
   539  007679  0529               	dw	1321
   540  00767B  052F               	dw	1327
   541  00767D  0535               	dw	1333
   542  00767F  053B               	dw	1339
   543  007681  0541               	dw	1345
   544  007683  0547               	dw	1351
   545  007685  054D               	dw	1357
   546  007687  0553               	dw	1363
   547  007689  0559               	dw	1369
   548  00768B  055F               	dw	1375
   549  00768D  0565               	dw	1381
   550  00768F  056B               	dw	1387
   551  007691  0571               	dw	1393
   552  007693  0577               	dw	1399
   553  007695  057D               	dw	1405
   554  007697  0583               	dw	1411
   555  007699  058A               	dw	1418
   556  00769B  0590               	dw	1424
   557  00769D  0596               	dw	1430
   558  00769F  059C               	dw	1436
   559  0076A1  05A2               	dw	1442
   560  0076A3  05A8               	dw	1448
   561  0076A5  05AE               	dw	1454
   562  0076A7  05B4               	dw	1460
   563  0076A9  05BA               	dw	1466
   564  0076AB  05C0               	dw	1472
   565  0076AD  05C6               	dw	1478
   566  0076AF  05CC               	dw	1484
   567  0076B1  05D2               	dw	1490
   568  0076B3  05D8               	dw	1496
   569  0076B5  05DE               	dw	1502
   570  0076B7  05E4               	dw	1508
   571  0076B9  05EA               	dw	1514
   572  0076BB  05F0               	dw	1520
   573  0076BD  05F6               	dw	1526
   574  0076BF  05FC               	dw	1532
   575  0076C1  0602               	dw	1538
   576  0076C3  0608               	dw	1544
   577  0076C5  060E               	dw	1550
   578  0076C7  0614               	dw	1556
   579  0076C9  061A               	dw	1562
   580  0076CB  0620               	dw	1568
   581  0076CD  0626               	dw	1574
   582  0076CF  062C               	dw	1580
   583  0076D1  0632               	dw	1586
   584  0076D3  0638               	dw	1592
   585  0076D5  063E               	dw	1598
   586  0076D7  0644               	dw	1604
   587  0076D9  064A               	dw	1610
   588  0076DB  0650               	dw	1616
   589  0076DD  0656               	dw	1622
   590  0076DF  065C               	dw	1628
   591  0076E1  0662               	dw	1634
   592  0076E3  0669               	dw	1641
   593  0076E5                     __end_of_finger_up_4:
   594                           	opt stack 0
   595  0076E5                     _finger_up_3:
   596                           	opt stack 0
   597  0076E5  02E1               	dw	737
   598  0076E7  02E8               	dw	744
   599  0076E9  02EF               	dw	751
   600  0076EB  02F7               	dw	759
   601  0076ED  02FE               	dw	766
   602  0076EF  0305               	dw	773
   603  0076F1  030D               	dw	781
   604  0076F3  0314               	dw	788
   605  0076F5  031C               	dw	796
   606  0076F7  0323               	dw	803
   607  0076F9  032A               	dw	810
   608  0076FB  0332               	dw	818
   609  0076FD  0339               	dw	825
   610  0076FF  0340               	dw	832
   611  007701  0348               	dw	840
   612  007703  034F               	dw	847
   613  007705  0357               	dw	855
   614  007707  035E               	dw	862
   615  007709  0365               	dw	869
   616  00770B  036D               	dw	877
   617  00770D  0374               	dw	884
   618  00770F  037B               	dw	891
   619  007711  0383               	dw	899
   620  007713  038A               	dw	906
   621  007715  0392               	dw	914
   622  007717  0399               	dw	921
   623  007719  03A0               	dw	928
   624  00771B  03A8               	dw	936
   625  00771D  03AF               	dw	943
   626  00771F  03B7               	dw	951
   627  007721  03BE               	dw	958
   628  007723  03C5               	dw	965
   629  007725  03CD               	dw	973
   630  007727  03D4               	dw	980
   631  007729  03DB               	dw	987
   632  00772B  03E3               	dw	995
   633  00772D  03EA               	dw	1002
   634  00772F  03F2               	dw	1010
   635  007731  03F9               	dw	1017
   636  007733  0400               	dw	1024
   637  007735  0408               	dw	1032
   638  007737  040F               	dw	1039
   639  007739  0416               	dw	1046
   640  00773B  041E               	dw	1054
   641  00773D  0425               	dw	1061
   642  00773F  042D               	dw	1069
   643  007741  0434               	dw	1076
   644  007743  043B               	dw	1083
   645  007745  0443               	dw	1091
   646  007747  044A               	dw	1098
   647  007749  0451               	dw	1105
   648  00774B  0459               	dw	1113
   649  00774D  0460               	dw	1120
   650  00774F  0468               	dw	1128
   651  007751  046F               	dw	1135
   652  007753  0476               	dw	1142
   653  007755  047E               	dw	1150
   654  007757  0485               	dw	1157
   655  007759  048D               	dw	1165
   656  00775B  0494               	dw	1172
   657  00775D  049B               	dw	1179
   658  00775F  04A3               	dw	1187
   659  007761  04AA               	dw	1194
   660  007763  04B1               	dw	1201
   661  007765  04B9               	dw	1209
   662  007767  04C0               	dw	1216
   663  007769  04C8               	dw	1224
   664  00776B  04CF               	dw	1231
   665  00776D  04D6               	dw	1238
   666  00776F  04DE               	dw	1246
   667  007771  04E5               	dw	1253
   668  007773  04EC               	dw	1260
   669  007775  04F4               	dw	1268
   670  007777  04FB               	dw	1275
   671  007779  0503               	dw	1283
   672  00777B  050A               	dw	1290
   673  00777D  0511               	dw	1297
   674  00777F  0519               	dw	1305
   675  007781  0520               	dw	1312
   676  007783  0527               	dw	1319
   677  007785  052F               	dw	1327
   678  007787  0536               	dw	1334
   679  007789  053E               	dw	1342
   680  00778B  0545               	dw	1349
   681  00778D  054C               	dw	1356
   682  00778F  0554               	dw	1364
   683  007791  055B               	dw	1371
   684  007793  0563               	dw	1379
   685  007795  056A               	dw	1386
   686  007797  0571               	dw	1393
   687  007799  0579               	dw	1401
   688  00779B  0580               	dw	1408
   689  00779D  0587               	dw	1415
   690  00779F  058F               	dw	1423
   691  0077A1  0596               	dw	1430
   692  0077A3  059E               	dw	1438
   693  0077A5  05A5               	dw	1445
   694  0077A7  05AC               	dw	1452
   695  0077A9  05B4               	dw	1460
   696  0077AB  05BB               	dw	1467
   697  0077AD  05C2               	dw	1474
   698  0077AF  05CA               	dw	1482
   699  0077B1  05D1               	dw	1489
   700  0077B3  05D9               	dw	1497
   701  0077B5  05E0               	dw	1504
   702  0077B7  05E7               	dw	1511
   703  0077B9  05EF               	dw	1519
   704  0077BB  05F6               	dw	1526
   705  0077BD  05FD               	dw	1533
   706  0077BF  0605               	dw	1541
   707  0077C1  060C               	dw	1548
   708  0077C3  0614               	dw	1556
   709  0077C5  061B               	dw	1563
   710  0077C7  0622               	dw	1570
   711  0077C9  062A               	dw	1578
   712  0077CB  0631               	dw	1585
   713  0077CD  0639               	dw	1593
   714  0077CF  0640               	dw	1600
   715  0077D1  0647               	dw	1607
   716  0077D3  064F               	dw	1615
   717  0077D5  0656               	dw	1622
   718  0077D7  065D               	dw	1629
   719  0077D9  0665               	dw	1637
   720  0077DB  066C               	dw	1644
   721  0077DD  0674               	dw	1652
   722  0077DF  067B               	dw	1659
   723  0077E1  0682               	dw	1666
   724  0077E3  068A               	dw	1674
   725  0077E5  0691               	dw	1681
   726  0077E7  0698               	dw	1688
   727  0077E9  06A0               	dw	1696
   728  0077EB  06A7               	dw	1703
   729  0077ED  06AF               	dw	1711
   730  0077EF  06B6               	dw	1718
   731  0077F1  06BD               	dw	1725
   732  0077F3  06C5               	dw	1733
   733  0077F5  06CC               	dw	1740
   734  0077F7  06D3               	dw	1747
   735  0077F9  06DB               	dw	1755
   736  0077FB  06E2               	dw	1762
   737  0077FD  06EA               	dw	1770
   738  0077FF  06F1               	dw	1777
   739  007801  06F8               	dw	1784
   740  007803  0700               	dw	1792
   741  007805  0707               	dw	1799
   742  007807  070F               	dw	1807
   743  007809                     __end_of_finger_up_3:
   744                           	opt stack 0
   745  007809                     _finger_up_2:
   746                           	opt stack 0
   747  007809  02E1               	dw	737
   748  00780B  02EB               	dw	747
   749  00780D  02F6               	dw	758
   750  00780F  0301               	dw	769
   751  007811  030B               	dw	779
   752  007813  0316               	dw	790
   753  007815  0321               	dw	801
   754  007817  032B               	dw	811
   755  007819  0336               	dw	822
   756  00781B  0341               	dw	833
   757  00781D  034C               	dw	844
   758  00781F  0356               	dw	854
   759  007821  0361               	dw	865
   760  007823  036C               	dw	876
   761  007825  0376               	dw	886
   762  007827  0381               	dw	897
   763  007829  038C               	dw	908
   764  00782B  0397               	dw	919
   765  00782D  03A1               	dw	929
   766  00782F  03AC               	dw	940
   767  007831  03B7               	dw	951
   768  007833  03C1               	dw	961
   769  007835  03CC               	dw	972
   770  007837  03D7               	dw	983
   771  007839  03E2               	dw	994
   772  00783B  03EC               	dw	1004
   773  00783D  03F7               	dw	1015
   774  00783F  0402               	dw	1026
   775  007841  040C               	dw	1036
   776  007843  0417               	dw	1047
   777  007845  0422               	dw	1058
   778  007847  042D               	dw	1069
   779  007849  0437               	dw	1079
   780  00784B  0442               	dw	1090
   781  00784D  044D               	dw	1101
   782  00784F  0457               	dw	1111
   783  007851  0462               	dw	1122
   784  007853  046D               	dw	1133
   785  007855  0478               	dw	1144
   786  007857  0482               	dw	1154
   787  007859  048D               	dw	1165
   788  00785B  0498               	dw	1176
   789  00785D  04A2               	dw	1186
   790  00785F  04AD               	dw	1197
   791  007861  04B8               	dw	1208
   792  007863  04C2               	dw	1218
   793  007865  04CD               	dw	1229
   794  007867  04D8               	dw	1240
   795  007869  04E3               	dw	1251
   796  00786B  04ED               	dw	1261
   797  00786D  04F8               	dw	1272
   798  00786F  0503               	dw	1283
   799  007871  050D               	dw	1293
   800  007873  0518               	dw	1304
   801  007875  0523               	dw	1315
   802  007877  052E               	dw	1326
   803  007879  0538               	dw	1336
   804  00787B  0543               	dw	1347
   805  00787D  054E               	dw	1358
   806  00787F  0558               	dw	1368
   807  007881  0563               	dw	1379
   808  007883  056E               	dw	1390
   809  007885  0579               	dw	1401
   810  007887  0583               	dw	1411
   811  007889  058E               	dw	1422
   812  00788B  0599               	dw	1433
   813  00788D  05A3               	dw	1443
   814  00788F  05AE               	dw	1454
   815  007891  05B9               	dw	1465
   816  007893  05C4               	dw	1476
   817  007895  05CE               	dw	1486
   818  007897  05D9               	dw	1497
   819  007899  05E4               	dw	1508
   820  00789B  05EE               	dw	1518
   821  00789D  05F9               	dw	1529
   822  00789F  0604               	dw	1540
   823  0078A1  060F               	dw	1551
   824  0078A3  0619               	dw	1561
   825  0078A5  0624               	dw	1572
   826  0078A7  062F               	dw	1583
   827  0078A9  0639               	dw	1593
   828  0078AB  0644               	dw	1604
   829  0078AD  064F               	dw	1615
   830  0078AF  065A               	dw	1626
   831  0078B1  0664               	dw	1636
   832  0078B3  066F               	dw	1647
   833  0078B5  067A               	dw	1658
   834  0078B7  0684               	dw	1668
   835  0078B9  068F               	dw	1679
   836  0078BB  069A               	dw	1690
   837  0078BD  06A4               	dw	1700
   838  0078BF  06AF               	dw	1711
   839  0078C1  06BA               	dw	1722
   840  0078C3  06C5               	dw	1733
   841  0078C5  06CF               	dw	1743
   842  0078C7  06DA               	dw	1754
   843  0078C9  06E5               	dw	1765
   844  0078CB  06EF               	dw	1775
   845  0078CD  06FA               	dw	1786
   846  0078CF  0705               	dw	1797
   847  0078D1  0710               	dw	1808
   848  0078D3  071A               	dw	1818
   849  0078D5  0725               	dw	1829
   850  0078D7  0730               	dw	1840
   851  0078D9  073A               	dw	1850
   852  0078DB  0745               	dw	1861
   853  0078DD  0750               	dw	1872
   854  0078DF  075B               	dw	1883
   855  0078E1  0765               	dw	1893
   856  0078E3  0770               	dw	1904
   857  0078E5  077B               	dw	1915
   858  0078E7  0785               	dw	1925
   859  0078E9  0790               	dw	1936
   860  0078EB  079B               	dw	1947
   861  0078ED  07A6               	dw	1958
   862  0078EF  07B0               	dw	1968
   863  0078F1  07BB               	dw	1979
   864  0078F3  07C6               	dw	1990
   865  0078F5  07D0               	dw	2000
   866  0078F7  07DB               	dw	2011
   867  0078F9  07E6               	dw	2022
   868  0078FB  07F1               	dw	2033
   869  0078FD  07FB               	dw	2043
   870  0078FF  0806               	dw	2054
   871  007901  0811               	dw	2065
   872  007903  081B               	dw	2075
   873  007905  0826               	dw	2086
   874  007907  0831               	dw	2097
   875  007909  083C               	dw	2108
   876  00790B                     __end_of_finger_up_2:
   877                           	opt stack 0
   878  00790B                     _finger_under_4:
   879                           	opt stack 0
   880  00790B  0000               	dw	0
   881  00790D  0007               	dw	7
   882  00790F  000F               	dw	15
   883  007911  0017               	dw	23
   884  007913  001F               	dw	31
   885  007915  0027               	dw	39
   886  007917  002F               	dw	47
   887  007919  0036               	dw	54
   888  00791B  003E               	dw	62
   889  00791D  0046               	dw	70
   890  00791F  004E               	dw	78
   891  007921  0056               	dw	86
   892  007923  005E               	dw	94
   893  007925  0066               	dw	102
   894  007927  006D               	dw	109
   895  007929  0075               	dw	117
   896  00792B  007D               	dw	125
   897  00792D  0085               	dw	133
   898  00792F  008D               	dw	141
   899  007931  0095               	dw	149
   900  007933  009C               	dw	156
   901  007935  00A4               	dw	164
   902  007937  00AC               	dw	172
   903  007939  00B4               	dw	180
   904  00793B  00BC               	dw	188
   905  00793D  00C4               	dw	196
   906  00793F  00CC               	dw	204
   907  007941  00D3               	dw	211
   908  007943  00DB               	dw	219
   909  007945  00E3               	dw	227
   910  007947  00EB               	dw	235
   911  007949  00F3               	dw	243
   912  00794B  00FB               	dw	251
   913  00794D  0103               	dw	259
   914  00794F  010A               	dw	266
   915  007951  0112               	dw	274
   916  007953  011A               	dw	282
   917  007955  0122               	dw	290
   918  007957  012A               	dw	298
   919  007959  0132               	dw	306
   920  00795B  0139               	dw	313
   921  00795D  0141               	dw	321
   922  00795F  0149               	dw	329
   923  007961  0151               	dw	337
   924  007963  0159               	dw	345
   925  007965  0161               	dw	353
   926  007967  0169               	dw	361
   927  007969  0170               	dw	368
   928  00796B  0178               	dw	376
   929  00796D  0180               	dw	384
   930  00796F  0188               	dw	392
   931  007971  0190               	dw	400
   932  007973  0198               	dw	408
   933  007975  019F               	dw	415
   934  007977  01A7               	dw	423
   935  007979  01AF               	dw	431
   936  00797B  01B7               	dw	439
   937  00797D  01BF               	dw	447
   938  00797F  01C7               	dw	455
   939  007981  01CF               	dw	463
   940  007983  01D6               	dw	470
   941  007985  01DE               	dw	478
   942  007987  01E6               	dw	486
   943  007989  01EE               	dw	494
   944  00798B  01F6               	dw	502
   945  00798D  01FE               	dw	510
   946  00798F  0206               	dw	518
   947  007991  020D               	dw	525
   948  007993  0215               	dw	533
   949  007995  021D               	dw	541
   950  007997  0225               	dw	549
   951  007999  022D               	dw	557
   952  00799B  0235               	dw	565
   953  00799D  023C               	dw	572
   954  00799F  0244               	dw	580
   955  0079A1  024C               	dw	588
   956  0079A3  0254               	dw	596
   957  0079A5  025C               	dw	604
   958  0079A7  0264               	dw	612
   959  0079A9  026C               	dw	620
   960  0079AB  0273               	dw	627
   961  0079AD  027B               	dw	635
   962  0079AF  0283               	dw	643
   963  0079B1  028B               	dw	651
   964  0079B3  0293               	dw	659
   965  0079B5  029B               	dw	667
   966  0079B7  02A2               	dw	674
   967  0079B9  02AA               	dw	682
   968  0079BB  02B2               	dw	690
   969  0079BD  02BA               	dw	698
   970  0079BF  02C2               	dw	706
   971  0079C1  02CA               	dw	714
   972  0079C3  02D2               	dw	722
   973  0079C5  02D9               	dw	729
   974  0079C7  02E1               	dw	737
   975  0079C9  02E9               	dw	745
   976  0079CB  02F1               	dw	753
   977  0079CD  02F9               	dw	761
   978  0079CF  0301               	dw	769
   979  0079D1  0309               	dw	777
   980  0079D3  0310               	dw	784
   981  0079D5  0318               	dw	792
   982  0079D7  0320               	dw	800
   983  0079D9  0328               	dw	808
   984  0079DB  0330               	dw	816
   985  0079DD  0338               	dw	824
   986  0079DF  033F               	dw	831
   987  0079E1  0347               	dw	839
   988  0079E3  034F               	dw	847
   989  0079E5  0357               	dw	855
   990  0079E7  035F               	dw	863
   991  0079E9  0367               	dw	871
   992  0079EB  036F               	dw	879
   993  0079ED  0376               	dw	886
   994  0079EF  037E               	dw	894
   995  0079F1  0386               	dw	902
   996  0079F3  038E               	dw	910
   997  0079F5  0396               	dw	918
   998  0079F7  039E               	dw	926
   999  0079F9  03A6               	dw	934
  1000  0079FB                     __end_of_finger_under_4:
  1001                           	opt stack 0
  1002  0079FB                     _finger_up_1:
  1003                           	opt stack 0
  1004  0079FB  02E1               	dw	737
  1005  0079FD  02E9               	dw	745
  1006  0079FF  02F2               	dw	754
  1007  007A01  02FA               	dw	762
  1008  007A03  0303               	dw	771
  1009  007A05  030C               	dw	780
  1010  007A07  0314               	dw	788
  1011  007A09  031D               	dw	797
  1012  007A0B  0325               	dw	805
  1013  007A0D  032E               	dw	814
  1014  007A0F  0337               	dw	823
  1015  007A11  033F               	dw	831
  1016  007A13  0348               	dw	840
  1017  007A15  0351               	dw	849
  1018  007A17  0359               	dw	857
  1019  007A19  0362               	dw	866
  1020  007A1B  036A               	dw	874
  1021  007A1D  0373               	dw	883
  1022  007A1F  037C               	dw	892
  1023  007A21  0384               	dw	900
  1024  007A23  038D               	dw	909
  1025  007A25  0396               	dw	918
  1026  007A27  039E               	dw	926
  1027  007A29  03A7               	dw	935
  1028  007A2B  03AF               	dw	943
  1029  007A2D  03B8               	dw	952
  1030  007A2F  03C1               	dw	961
  1031  007A31  03C9               	dw	969
  1032  007A33  03D2               	dw	978
  1033  007A35  03DB               	dw	987
  1034  007A37  03E3               	dw	995
  1035  007A39  03EC               	dw	1004
  1036  007A3B  03F4               	dw	1012
  1037  007A3D  03FD               	dw	1021
  1038  007A3F  0406               	dw	1030
  1039  007A41  040E               	dw	1038
  1040  007A43  0417               	dw	1047
  1041  007A45  0420               	dw	1056
  1042  007A47  0428               	dw	1064
  1043  007A49  0431               	dw	1073
  1044  007A4B  0439               	dw	1081
  1045  007A4D  0442               	dw	1090
  1046  007A4F  044B               	dw	1099
  1047  007A51  0453               	dw	1107
  1048  007A53  045C               	dw	1116
  1049  007A55  0465               	dw	1125
  1050  007A57  046D               	dw	1133
  1051  007A59  0476               	dw	1142
  1052  007A5B  047E               	dw	1150
  1053  007A5D  0487               	dw	1159
  1054  007A5F  0490               	dw	1168
  1055  007A61  0498               	dw	1176
  1056  007A63  04A1               	dw	1185
  1057  007A65  04AA               	dw	1194
  1058  007A67  04B2               	dw	1202
  1059  007A69  04BB               	dw	1211
  1060  007A6B  04C3               	dw	1219
  1061  007A6D  04CC               	dw	1228
  1062  007A6F  04D5               	dw	1237
  1063  007A71  04DD               	dw	1245
  1064  007A73  04E6               	dw	1254
  1065  007A75  04EF               	dw	1263
  1066  007A77  04F7               	dw	1271
  1067  007A79  0500               	dw	1280
  1068  007A7B  0508               	dw	1288
  1069  007A7D  0511               	dw	1297
  1070  007A7F  051A               	dw	1306
  1071  007A81  0522               	dw	1314
  1072  007A83  052B               	dw	1323
  1073  007A85  0534               	dw	1332
  1074  007A87  053C               	dw	1340
  1075  007A89  0545               	dw	1349
  1076  007A8B  054D               	dw	1357
  1077  007A8D  0556               	dw	1366
  1078  007A8F  055F               	dw	1375
  1079  007A91  0567               	dw	1383
  1080  007A93  0570               	dw	1392
  1081  007A95  0579               	dw	1401
  1082  007A97  0581               	dw	1409
  1083  007A99  058A               	dw	1418
  1084  007A9B  0592               	dw	1426
  1085  007A9D  059B               	dw	1435
  1086  007A9F  05A4               	dw	1444
  1087  007AA1  05AC               	dw	1452
  1088  007AA3  05B5               	dw	1461
  1089  007AA5  05BE               	dw	1470
  1090  007AA7  05C6               	dw	1478
  1091  007AA9  05CF               	dw	1487
  1092  007AAB  05D7               	dw	1495
  1093  007AAD  05E0               	dw	1504
  1094  007AAF  05E9               	dw	1513
  1095  007AB1  05F1               	dw	1521
  1096  007AB3  05FA               	dw	1530
  1097  007AB5  0603               	dw	1539
  1098  007AB7  060B               	dw	1547
  1099  007AB9  0614               	dw	1556
  1100  007ABB  061C               	dw	1564
  1101  007ABD  0625               	dw	1573
  1102  007ABF  062E               	dw	1582
  1103  007AC1  0636               	dw	1590
  1104  007AC3  063F               	dw	1599
  1105  007AC5  0648               	dw	1608
  1106  007AC7  0650               	dw	1616
  1107  007AC9  0659               	dw	1625
  1108  007ACB  0661               	dw	1633
  1109  007ACD  066A               	dw	1642
  1110  007ACF  0673               	dw	1651
  1111  007AD1  067B               	dw	1659
  1112  007AD3  0684               	dw	1668
  1113  007AD5  068D               	dw	1677
  1114  007AD7  0695               	dw	1685
  1115  007AD9  069E               	dw	1694
  1116  007ADB  06A6               	dw	1702
  1117  007ADD  06AF               	dw	1711
  1118  007ADF  06B8               	dw	1720
  1119  007AE1  06C0               	dw	1728
  1120  007AE3  06C9               	dw	1737
  1121  007AE5  06D2               	dw	1746
  1122  007AE7                     __end_of_finger_up_1:
  1123                           	opt stack 0
  1124  007AE7                     _finger_under_2:
  1125                           	opt stack 0
  1126  007AE7  0000               	dw	0
  1127  007AE9  0002               	dw	2
  1128  007AEB  0005               	dw	5
  1129  007AED  0007               	dw	7
  1130  007AEF  000A               	dw	10
  1131  007AF1  000C               	dw	12
  1132  007AF3  000F               	dw	15
  1133  007AF5  0011               	dw	17
  1134  007AF7  0014               	dw	20
  1135  007AF9  0016               	dw	22
  1136  007AFB  0019               	dw	25
  1137  007AFD  001C               	dw	28
  1138  007AFF  001E               	dw	30
  1139  007B01  0021               	dw	33
  1140  007B03  0023               	dw	35
  1141  007B05  0026               	dw	38
  1142  007B07  0028               	dw	40
  1143  007B09  002B               	dw	43
  1144  007B0B  002D               	dw	45
  1145  007B0D  0030               	dw	48
  1146  007B0F  0033               	dw	51
  1147  007B11  0035               	dw	53
  1148  007B13  0038               	dw	56
  1149  007B15  003A               	dw	58
  1150  007B17  003D               	dw	61
  1151  007B19  003F               	dw	63
  1152  007B1B  0042               	dw	66
  1153  007B1D  0044               	dw	68
  1154  007B1F  0047               	dw	71
  1155  007B21  004A               	dw	74
  1156  007B23  004C               	dw	76
  1157  007B25  004F               	dw	79
  1158  007B27  0051               	dw	81
  1159  007B29  0054               	dw	84
  1160  007B2B  0056               	dw	86
  1161  007B2D  0059               	dw	89
  1162  007B2F  005B               	dw	91
  1163  007B31  005E               	dw	94
  1164  007B33  0061               	dw	97
  1165  007B35  0063               	dw	99
  1166  007B37  0066               	dw	102
  1167  007B39  0068               	dw	104
  1168  007B3B  006B               	dw	107
  1169  007B3D  006D               	dw	109
  1170  007B3F  0070               	dw	112
  1171  007B41  0072               	dw	114
  1172  007B43  0075               	dw	117
  1173  007B45  0078               	dw	120
  1174  007B47  007A               	dw	122
  1175  007B49  007D               	dw	125
  1176  007B4B  007F               	dw	127
  1177  007B4D  0082               	dw	130
  1178  007B4F  0084               	dw	132
  1179  007B51  0087               	dw	135
  1180  007B53  0089               	dw	137
  1181  007B55  008C               	dw	140
  1182  007B57  008F               	dw	143
  1183  007B59  0091               	dw	145
  1184  007B5B  0094               	dw	148
  1185  007B5D  0096               	dw	150
  1186  007B5F  0099               	dw	153
  1187  007B61  009B               	dw	155
  1188  007B63  009E               	dw	158
  1189  007B65  00A0               	dw	160
  1190  007B67  00A3               	dw	163
  1191  007B69  00A5               	dw	165
  1192  007B6B  00A8               	dw	168
  1193  007B6D  00AB               	dw	171
  1194  007B6F  00AD               	dw	173
  1195  007B71  00B0               	dw	176
  1196  007B73  00B2               	dw	178
  1197  007B75  00B5               	dw	181
  1198  007B77  00B7               	dw	183
  1199  007B79  00BA               	dw	186
  1200  007B7B  00BC               	dw	188
  1201  007B7D  00BF               	dw	191
  1202  007B7F  00C2               	dw	194
  1203  007B81  00C4               	dw	196
  1204  007B83  00C7               	dw	199
  1205  007B85  00C9               	dw	201
  1206  007B87  00CC               	dw	204
  1207  007B89  00CE               	dw	206
  1208  007B8B  00D1               	dw	209
  1209  007B8D  00D3               	dw	211
  1210  007B8F  00D6               	dw	214
  1211  007B91  00D9               	dw	217
  1212  007B93  00DB               	dw	219
  1213  007B95  00DE               	dw	222
  1214  007B97  00E0               	dw	224
  1215  007B99  00E3               	dw	227
  1216  007B9B  00E5               	dw	229
  1217  007B9D  00E8               	dw	232
  1218  007B9F  00EA               	dw	234
  1219  007BA1  00ED               	dw	237
  1220  007BA3  00F0               	dw	240
  1221  007BA5  00F2               	dw	242
  1222  007BA7  00F5               	dw	245
  1223  007BA9  00F7               	dw	247
  1224  007BAB  00FA               	dw	250
  1225  007BAD  00FC               	dw	252
  1226  007BAF  00FF               	dw	255
  1227  007BB1  0101               	dw	257
  1228  007BB3  0104               	dw	260
  1229  007BB5  0107               	dw	263
  1230  007BB7  0109               	dw	265
  1231  007BB9  010C               	dw	268
  1232  007BBB  010E               	dw	270
  1233  007BBD  0111               	dw	273
  1234  007BBF  0113               	dw	275
  1235  007BC1  0116               	dw	278
  1236  007BC3  0118               	dw	280
  1237  007BC5  011B               	dw	283
  1238  007BC7  011E               	dw	286
  1239  007BC9                     __end_of_finger_under_2:
  1240                           	opt stack 0
  1241  007BC9                     _finger_under_0:
  1242                           	opt stack 0
  1243  007BC9  0000               	dw	0
  1244  007BCB  00                 	db	0
  1245  007BCC  00                 	db	0
  1246  007BCD  00                 	db	0
  1247  007BCE  00                 	db	0
  1248  007BCF  00                 	db	0
  1249  007BD0  00                 	db	0
  1250  007BD1  00                 	db	0
  1251  007BD2  00                 	db	0
  1252  007BD3  00                 	db	0
  1253  007BD4  00                 	db	0
  1254  007BD5  00                 	db	0
  1255  007BD6  00                 	db	0
  1256  007BD7  00                 	db	0
  1257  007BD8  00                 	db	0
  1258  007BD9  00                 	db	0
  1259  007BDA  00                 	db	0
  1260  007BDB  00                 	db	0
  1261  007BDC  00                 	db	0
  1262  007BDD  00                 	db	0
  1263  007BDE  00                 	db	0
  1264  007BDF  00                 	db	0
  1265  007BE0  00                 	db	0
  1266  007BE1  00                 	db	0
  1267  007BE2  00                 	db	0
  1268  007BE3  00                 	db	0
  1269  007BE4  00                 	db	0
  1270  007BE5  00                 	db	0
  1271  007BE6  00                 	db	0
  1272  007BE7  00                 	db	0
  1273  007BE8  00                 	db	0
  1274  007BE9  00                 	db	0
  1275  007BEA  00                 	db	0
  1276  007BEB  00                 	db	0
  1277  007BEC  00                 	db	0
  1278  007BED  00                 	db	0
  1279  007BEE  00                 	db	0
  1280  007BEF  00                 	db	0
  1281  007BF0  00                 	db	0
  1282  007BF1  00                 	db	0
  1283  007BF2  00                 	db	0
  1284  007BF3  00                 	db	0
  1285  007BF4  00                 	db	0
  1286  007BF5  00                 	db	0
  1287  007BF6  00                 	db	0
  1288  007BF7  00                 	db	0
  1289  007BF8  00                 	db	0
  1290  007BF9  00                 	db	0
  1291  007BFA  00                 	db	0
  1292  007BFB  00                 	db	0
  1293  007BFC  00                 	db	0
  1294  007BFD  00                 	db	0
  1295  007BFE  00                 	db	0
  1296  007BFF  00                 	db	0
  1297  007C00  00                 	db	0
  1298  007C01  00                 	db	0
  1299  007C02  00                 	db	0
  1300  007C03  00                 	db	0
  1301  007C04  00                 	db	0
  1302  007C05  00                 	db	0
  1303  007C06  00                 	db	0
  1304  007C07  00                 	db	0
  1305  007C08  00                 	db	0
  1306  007C09  00                 	db	0
  1307  007C0A  00                 	db	0
  1308  007C0B  00                 	db	0
  1309  007C0C  00                 	db	0
  1310  007C0D  00                 	db	0
  1311  007C0E  00                 	db	0
  1312  007C0F  00                 	db	0
  1313  007C10  00                 	db	0
  1314  007C11  00                 	db	0
  1315  007C12  00                 	db	0
  1316  007C13  00                 	db	0
  1317  007C14  00                 	db	0
  1318  007C15  00                 	db	0
  1319  007C16  00                 	db	0
  1320  007C17  00                 	db	0
  1321  007C18  00                 	db	0
  1322  007C19  00                 	db	0
  1323  007C1A  00                 	db	0
  1324  007C1B  00                 	db	0
  1325  007C1C  00                 	db	0
  1326  007C1D  00                 	db	0
  1327  007C1E  00                 	db	0
  1328  007C1F  00                 	db	0
  1329  007C20  00                 	db	0
  1330  007C21  00                 	db	0
  1331  007C22  00                 	db	0
  1332  007C23  00                 	db	0
  1333  007C24  00                 	db	0
  1334  007C25  00                 	db	0
  1335  007C26  00                 	db	0
  1336  007C27  00                 	db	0
  1337  007C28  00                 	db	0
  1338  007C29  00                 	db	0
  1339  007C2A  00                 	db	0
  1340  007C2B  00                 	db	0
  1341  007C2C  00                 	db	0
  1342  007C2D  00                 	db	0
  1343  007C2E  00                 	db	0
  1344  007C2F  00                 	db	0
  1345  007C30  00                 	db	0
  1346  007C31  00                 	db	0
  1347  007C32  00                 	db	0
  1348  007C33  00                 	db	0
  1349  007C34  00                 	db	0
  1350  007C35  00                 	db	0
  1351  007C36  00                 	db	0
  1352  007C37  00                 	db	0
  1353  007C38  00                 	db	0
  1354  007C39  00                 	db	0
  1355  007C3A  00                 	db	0
  1356  007C3B  00                 	db	0
  1357  007C3C  00                 	db	0
  1358  007C3D  00                 	db	0
  1359  007C3E  00                 	db	0
  1360  007C3F  00                 	db	0
  1361  007C40  00                 	db	0
  1362  007C41  00                 	db	0
  1363  007C42  00                 	db	0
  1364  007C43  00                 	db	0
  1365  007C44  00                 	db	0
  1366  007C45  00                 	db	0
  1367  007C46  00                 	db	0
  1368  007C47  00                 	db	0
  1369  007C48  00                 	db	0
  1370  007C49  00                 	db	0
  1371  007C4A  00                 	db	0
  1372  007C4B  00                 	db	0
  1373  007C4C  00                 	db	0
  1374  007C4D  00                 	db	0
  1375  007C4E  00                 	db	0
  1376  007C4F  00                 	db	0
  1377  007C50  00                 	db	0
  1378  007C51  00                 	db	0
  1379  007C52  00                 	db	0
  1380  007C53  00                 	db	0
  1381  007C54  00                 	db	0
  1382  007C55  00                 	db	0
  1383  007C56  00                 	db	0
  1384  007C57  00                 	db	0
  1385  007C58  00                 	db	0
  1386  007C59  00                 	db	0
  1387  007C5A  00                 	db	0
  1388  007C5B  00                 	db	0
  1389  007C5C  00                 	db	0
  1390  007C5D  00                 	db	0
  1391  007C5E  00                 	db	0
  1392  007C5F  00                 	db	0
  1393  007C60  00                 	db	0
  1394  007C61  00                 	db	0
  1395  007C62  00                 	db	0
  1396  007C63  00                 	db	0
  1397  007C64  00                 	db	0
  1398  007C65  00                 	db	0
  1399  007C66  00                 	db	0
  1400  007C67  00                 	db	0
  1401  007C68  00                 	db	0
  1402  007C69  00                 	db	0
  1403  007C6A  00                 	db	0
  1404  007C6B  00                 	db	0
  1405  007C6C  00                 	db	0
  1406  007C6D  00                 	db	0
  1407  007C6E  00                 	db	0
  1408  007C6F  00                 	db	0
  1409  007C70  00                 	db	0
  1410  007C71  00                 	db	0
  1411  007C72  00                 	db	0
  1412  007C73  00                 	db	0
  1413  007C74  00                 	db	0
  1414  007C75  00                 	db	0
  1415  007C76  00                 	db	0
  1416  007C77  00                 	db	0
  1417  007C78  00                 	db	0
  1418  007C79  00                 	db	0
  1419  007C7A  00                 	db	0
  1420  007C7B  00                 	db	0
  1421  007C7C  00                 	db	0
  1422  007C7D  00                 	db	0
  1423  007C7E  00                 	db	0
  1424  007C7F  00                 	db	0
  1425  007C80  00                 	db	0
  1426  007C81  00                 	db	0
  1427  007C82  00                 	db	0
  1428  007C83  00                 	db	0
  1429  007C84  00                 	db	0
  1430  007C85  00                 	db	0
  1431  007C86  00                 	db	0
  1432  007C87  00                 	db	0
  1433  007C88  00                 	db	0
  1434  007C89  00                 	db	0
  1435  007C8A  00                 	db	0
  1436  007C8B  00                 	db	0
  1437  007C8C  00                 	db	0
  1438  007C8D  00                 	db	0
  1439  007C8E  00                 	db	0
  1440  007C8F  00                 	db	0
  1441  007C90  00                 	db	0
  1442  007C91  00                 	db	0
  1443  007C92  00                 	db	0
  1444  007C93  00                 	db	0
  1445  007C94  00                 	db	0
  1446  007C95  00                 	db	0
  1447  007C96  00                 	db	0
  1448  007C97  00                 	db	0
  1449  007C98  00                 	db	0
  1450  007C99  00                 	db	0
  1451  007C9A  00                 	db	0
  1452  007C9B  00                 	db	0
  1453  007C9C  00                 	db	0
  1454  007C9D  00                 	db	0
  1455  007C9E  00                 	db	0
  1456  007C9F  00                 	db	0
  1457  007CA0  00                 	db	0
  1458  007CA1                     __end_of_finger_under_0:
  1459                           	opt stack 0
  1460  007CA1                     _finger_under_1:
  1461                           	opt stack 0
  1462  007CA1  0000               	dw	0
  1463  007CA3  0006               	dw	6
  1464  007CA5  000D               	dw	13
  1465  007CA7  0013               	dw	19
  1466  007CA9  001A               	dw	26
  1467  007CAB  0021               	dw	33
  1468  007CAD  0027               	dw	39
  1469  007CAF  002E               	dw	46
  1470  007CB1  0035               	dw	53
  1471  007CB3  003B               	dw	59
  1472  007CB5  0042               	dw	66
  1473  007CB7  0049               	dw	73
  1474  007CB9  004F               	dw	79
  1475  007CBB  0056               	dw	86
  1476  007CBD  005D               	dw	93
  1477  007CBF  0063               	dw	99
  1478  007CC1  006A               	dw	106
  1479  007CC3  0071               	dw	113
  1480  007CC5  0077               	dw	119
  1481  007CC7  007E               	dw	126
  1482  007CC9  0085               	dw	133
  1483  007CCB  008B               	dw	139
  1484  007CCD  0092               	dw	146
  1485  007CCF  0099               	dw	153
  1486  007CD1  009F               	dw	159
  1487  007CD3  00A6               	dw	166
  1488  007CD5  00AD               	dw	173
  1489  007CD7  00B3               	dw	179
  1490  007CD9  00BA               	dw	186
  1491  007CDB  00C1               	dw	193
  1492  007CDD  00C7               	dw	199
  1493  007CDF  00CE               	dw	206
  1494  007CE1  00D5               	dw	213
  1495  007CE3  00DB               	dw	219
  1496  007CE5  00E2               	dw	226
  1497  007CE7  00E9               	dw	233
  1498  007CE9  00EF               	dw	239
  1499  007CEB  00F6               	dw	246
  1500  007CED  00FD               	dw	253
  1501  007CEF  0103               	dw	259
  1502  007CF1  010A               	dw	266
  1503  007CF3  0111               	dw	273
  1504  007CF5  0117               	dw	279
  1505  007CF7  011E               	dw	286
  1506  007CF9  0125               	dw	293
  1507  007CFB  012B               	dw	299
  1508  007CFD  0132               	dw	306
  1509  007CFF  0139               	dw	313
  1510  007D01  013F               	dw	319
  1511  007D03  0146               	dw	326
  1512  007D05  014D               	dw	333
  1513  007D07  0153               	dw	339
  1514  007D09  015A               	dw	346
  1515  007D0B  0161               	dw	353
  1516  007D0D  0167               	dw	359
  1517  007D0F  016E               	dw	366
  1518  007D11  0175               	dw	373
  1519  007D13  017B               	dw	379
  1520  007D15  0182               	dw	386
  1521  007D17  0189               	dw	393
  1522  007D19  018F               	dw	399
  1523  007D1B  0196               	dw	406
  1524  007D1D  019D               	dw	413
  1525  007D1F  01A3               	dw	419
  1526  007D21  01AA               	dw	426
  1527  007D23  01B1               	dw	433
  1528  007D25  01B7               	dw	439
  1529  007D27  01BE               	dw	446
  1530  007D29  01C5               	dw	453
  1531  007D2B  01CB               	dw	459
  1532  007D2D  01D2               	dw	466
  1533  007D2F  01D9               	dw	473
  1534  007D31  01DF               	dw	479
  1535  007D33  01E6               	dw	486
  1536  007D35  01ED               	dw	493
  1537  007D37  01F3               	dw	499
  1538  007D39  01FA               	dw	506
  1539  007D3B  0201               	dw	513
  1540  007D3D  0207               	dw	519
  1541  007D3F  020E               	dw	526
  1542  007D41  0215               	dw	533
  1543  007D43  021B               	dw	539
  1544  007D45  0222               	dw	546
  1545  007D47  0229               	dw	553
  1546  007D49  022F               	dw	559
  1547  007D4B  0236               	dw	566
  1548  007D4D  023D               	dw	573
  1549  007D4F  0243               	dw	579
  1550  007D51  024A               	dw	586
  1551  007D53  0251               	dw	593
  1552  007D55  0257               	dw	599
  1553  007D57  025E               	dw	606
  1554  007D59  0265               	dw	613
  1555  007D5B  026B               	dw	619
  1556  007D5D  0272               	dw	626
  1557  007D5F  0279               	dw	633
  1558  007D61                     __end_of_finger_under_1:
  1559                           	opt stack 0
  1560  007D61                     _finger_under_3:
  1561                           	opt stack 0
  1562  007D61  0000               	dw	0
  1563  007D63  000B               	dw	11
  1564  007D65  0017               	dw	23
  1565  007D67  0022               	dw	34
  1566  007D69  002E               	dw	46
  1567  007D6B  0039               	dw	57
  1568  007D6D  0045               	dw	69
  1569  007D6F  0051               	dw	81
  1570  007D71  005C               	dw	92
  1571  007D73  0068               	dw	104
  1572  007D75  0073               	dw	115
  1573  007D77  007F               	dw	127
  1574  007D79  008A               	dw	138
  1575  007D7B  0096               	dw	150
  1576  007D7D  00A2               	dw	162
  1577  007D7F  00AD               	dw	173
  1578  007D81  00B9               	dw	185
  1579  007D83  00C4               	dw	196
  1580  007D85  00D0               	dw	208
  1581  007D87  00DB               	dw	219
  1582  007D89  00E7               	dw	231
  1583  007D8B  00F3               	dw	243
  1584  007D8D  00FE               	dw	254
  1585  007D8F  010A               	dw	266
  1586  007D91  0115               	dw	277
  1587  007D93  0121               	dw	289
  1588  007D95  012D               	dw	301
  1589  007D97  0138               	dw	312
  1590  007D99  0144               	dw	324
  1591  007D9B  014F               	dw	335
  1592  007D9D  015B               	dw	347
  1593  007D9F  0166               	dw	358
  1594  007DA1  0172               	dw	370
  1595  007DA3  017E               	dw	382
  1596  007DA5  0189               	dw	393
  1597  007DA7  0195               	dw	405
  1598  007DA9  01A0               	dw	416
  1599  007DAB  01AC               	dw	428
  1600  007DAD  01B7               	dw	439
  1601  007DAF  01C3               	dw	451
  1602  007DB1  01CF               	dw	463
  1603  007DB3  01DA               	dw	474
  1604  007DB5  01E6               	dw	486
  1605  007DB7  01F1               	dw	497
  1606  007DB9  01FD               	dw	509
  1607  007DBB  0208               	dw	520
  1608  007DBD  0214               	dw	532
  1609  007DBF  0220               	dw	544
  1610  007DC1  022B               	dw	555
  1611  007DC3  0237               	dw	567
  1612  007DC5  0242               	dw	578
  1613  007DC7  024E               	dw	590
  1614  007DC9  025A               	dw	602
  1615  007DCB  0265               	dw	613
  1616  007DCD  0271               	dw	625
  1617  007DCF  027C               	dw	636
  1618  007DD1  0288               	dw	648
  1619  007DD3  0293               	dw	659
  1620  007DD5  029F               	dw	671
  1621  007DD7  02AB               	dw	683
  1622  007DD9  02B6               	dw	694
  1623  007DDB  02C2               	dw	706
  1624  007DDD  02CD               	dw	717
  1625  007DDF  02D9               	dw	729
  1626  007DE1  02E4               	dw	740
  1627  007DE3  02F0               	dw	752
  1628  007DE5  02FC               	dw	764
  1629  007DE7  0307               	dw	775
  1630  007DE9  0313               	dw	787
  1631  007DEB  031E               	dw	798
  1632  007DED  032A               	dw	810
  1633  007DEF  0335               	dw	821
  1634  007DF1  0341               	dw	833
  1635  007DF3  034D               	dw	845
  1636  007DF5  0358               	dw	856
  1637  007DF7  0364               	dw	868
  1638  007DF9  036F               	dw	879
  1639  007DFB  037B               	dw	891
  1640  007DFD  0387               	dw	903
  1641  007DFF                     __end_of_finger_under_3:
  1642                           	opt stack 0
  1643  007DFF                     _octpowers:
  1644                           	opt stack 0
  1645  007DFF  0001               	dw	1
  1646  007E01  0008               	dw	8
  1647  007E03  0040               	dw	64
  1648  007E05  0200               	dw	512
  1649  007E07  1000               	dw	4096
  1650  007E09  8000               	dw	32768
  1651  007E0B                     __end_of_octpowers:
  1652                           	opt stack 0
  1653  007E0B                     _dpowers:
  1654                           	opt stack 0
  1655  007E0B  0001               	dw	1
  1656  007E0D  000A               	dw	10
  1657  007E0F  0064               	dw	100
  1658  007E11  03E8               	dw	1000
  1659  007E13  2710               	dw	10000
  1660  007E15                     __end_of_dpowers:
  1661                           	opt stack 0
  1662  007E15                     _hexpowers:
  1663                           	opt stack 0
  1664  007E15  0001               	dw	1
  1665  007E17  0010               	dw	16
  1666  007E19  0100               	dw	256
  1667  007E1B  1000               	dw	4096
  1668  007E1D                     __end_of_hexpowers:
  1669                           	opt stack 0
  1670  0000                     _RCREG	set	4014
  1671  0000                     _TXREG	set	4013
  1672  0000                     _SPBRG	set	4015
  1673  0000                     _SPBRGH	set	4016
  1674  0000                     _BAUDCONbits	set	4024
  1675  0000                     _RCSTAbits	set	4011
  1676  0000                     _TXSTAbits	set	4012
  1677  0000                     _PORTBbits	set	3969
  1678  0000                     _TRISBbits	set	3987
  1679  0000                     _PORTDbits	set	3971
  1680  0000                     _PORTD	set	3971
  1681  0000                     _T2CONbits	set	4042
  1682  0000                     _PR2	set	4043
  1683  0000                     _PIR1bits	set	3998
  1684  0000                     _PIE1bits	set	3997
  1685  0000                     _INTCONbits	set	4082
  1686  0000                     _RCONbits	set	4048
  1687  0000                     _T0CONbits	set	4053
  1688  0000                     _OSCCONbits	set	4051
  1689  0000                     _LATAbits	set	3977
  1690  0000                     _TRISAbits	set	3986
  1691  0000                     _LATD	set	3980
  1692  0000                     _TRISD	set	3989
  1693  0000                     _TRMT	set	32097
  1694  0000                     _TXIF	set	31988
  1695  007E1D  41                 	db	65	;'A'
  1696  007E1E  54                 	db	84	;'T'
  1697  007E1F  2B                 	db	43
  1698  007E20  43                 	db	67	;'C'
  1699  007E21  57                 	db	87	;'W'
  1700  007E22  53                 	db	83	;'S'
  1701  007E23  41                 	db	65	;'A'
  1702  007E24  50                 	db	80	;'P'
  1703  007E25  3D                 	db	61	;'='
  1704  007E26  22                 	db	34
  1705  007E27  25                 	db	37
  1706  007E28  73                 	db	115	;'s'
  1707  007E29  22                 	db	34
  1708  007E2A  2C                 	db	44
  1709  007E2B  22                 	db	34
  1710  007E2C  25                 	db	37
  1711  007E2D  73                 	db	115	;'s'
  1712  007E2E  22                 	db	34
  1713  007E2F  2C                 	db	44
  1714  007E30  31                 	db	49	;'1'
  1715  007E31  2C                 	db	44
  1716  007E32  25                 	db	37
  1717  007E33  73                 	db	115	;'s'
  1718  007E34  0D                 	db	13
  1719  007E35  0A                 	db	10
  1720  007E36  00                 	db	0
  1721  007E37  41                 	db	65	;'A'
  1722  007E38  54                 	db	84	;'T'
  1723  007E39  2B                 	db	43
  1724  007E3A  55                 	db	85	;'U'
  1725  007E3B  41                 	db	65	;'A'
  1726  007E3C  52                 	db	82	;'R'
  1727  007E3D  54                 	db	84	;'T'
  1728  007E3E  3D                 	db	61	;'='
  1729  007E3F  31                 	db	49	;'1'
  1730  007E40  31                 	db	49	;'1'
  1731  007E41  35                 	db	53	;'5'
  1732  007E42  32                 	db	50	;'2'
  1733  007E43  30                 	db	48	;'0'
  1734  007E44  30                 	db	48	;'0'
  1735  007E45  2C                 	db	44
  1736  007E46  38                 	db	56	;'8'
  1737  007E47  2C                 	db	44
  1738  007E48  31                 	db	49	;'1'
  1739  007E49  2C                 	db	44
  1740  007E4A  30                 	db	48	;'0'
  1741  007E4B  2C                 	db	44
  1742  007E4C  30                 	db	48	;'0'
  1743  007E4D  0D                 	db	13
  1744  007E4E  0A                 	db	10
  1745  007E4F  00                 	db	0
  1746  007E50  41                 	db	65	;'A'
  1747  007E51  54                 	db	84	;'T'
  1748  007E52  2B                 	db	43
  1749  007E53  55                 	db	85	;'U'
  1750  007E54  41                 	db	65	;'A'
  1751  007E55  52                 	db	82	;'R'
  1752  007E56  54                 	db	84	;'T'
  1753  007E57  3D                 	db	61	;'='
  1754  007E58  39                 	db	57	;'9'
  1755  007E59  36                 	db	54	;'6'
  1756  007E5A  30                 	db	48	;'0'
  1757  007E5B  30                 	db	48	;'0'
  1758  007E5C  2C                 	db	44
  1759  007E5D  38                 	db	56	;'8'
  1760  007E5E  2C                 	db	44
  1761  007E5F  31                 	db	49	;'1'
  1762  007E60  2C                 	db	44
  1763  007E61  30                 	db	48	;'0'
  1764  007E62  2C                 	db	44
  1765  007E63  30                 	db	48	;'0'
  1766  007E64  0D                 	db	13
  1767  007E65  0A                 	db	10
  1768  007E66  00                 	db	0
  1769  007E67  41                 	db	65	;'A'
  1770  007E68  54                 	db	84	;'T'
  1771  007E69  2B                 	db	43
  1772  007E6A  43                 	db	67	;'C'
  1773  007E6B  49                 	db	73	;'I'
  1774  007E6C  50                 	db	80	;'P'
  1775  007E6D  53                 	db	83	;'S'
  1776  007E6E  45                 	db	69	;'E'
  1777  007E6F  52                 	db	82	;'R'
  1778  007E70  56                 	db	86	;'V'
  1779  007E71  45                 	db	69	;'E'
  1780  007E72  52                 	db	82	;'R'
  1781  007E73  3D                 	db	61	;'='
  1782  007E74  31                 	db	49	;'1'
  1783  007E75  2C                 	db	44
  1784  007E76  35                 	db	53	;'5'
  1785  007E77  30                 	db	48	;'0'
  1786  007E78  30                 	db	48	;'0'
  1787  007E79  30                 	db	48	;'0'
  1788  007E7A  0D                 	db	13
  1789  007E7B  0A                 	db	10
  1790  007E7C  00                 	db	0
  1791  007E7D                     STR_15:
  1792  007E7D  41                 	db	65	;'A'
  1793  007E7E  54                 	db	84	;'T'
  1794  007E7F  2B                 	db	43
  1795  007E80  43                 	db	67	;'C'
  1796  007E81  57                 	db	87	;'W'
  1797  007E82  4A                 	db	74	;'J'
  1798  007E83  41                 	db	65	;'A'
  1799  007E84  50                 	db	80	;'P'
  1800  007E85  3D                 	db	61	;'='
  1801  007E86  22                 	db	34
  1802  007E87  25                 	db	37
  1803  007E88  73                 	db	115	;'s'
  1804  007E89  22                 	db	34
  1805  007E8A  2C                 	db	44
  1806  007E8B  22                 	db	34
  1807  007E8C  25                 	db	37
  1808  007E8D  73                 	db	115	;'s'
  1809  007E8E  22                 	db	34
  1810  007E8F  0D                 	db	13
  1811  007E90  0A                 	db	10
  1812  007E91  00                 	db	0
  1813  007E92                     STR_24:
  1814  007E92  41                 	db	65	;'A'
  1815  007E93  54                 	db	84	;'T'
  1816  007E94  2B                 	db	43
  1817  007E95  43                 	db	67	;'C'
  1818  007E96  49                 	db	73	;'I'
  1819  007E97  50                 	db	80	;'P'
  1820  007E98  53                 	db	83	;'S'
  1821  007E99  54                 	db	84	;'T'
  1822  007E9A  41                 	db	65	;'A'
  1823  007E9B  52                 	db	82	;'R'
  1824  007E9C  54                 	db	84	;'T'
  1825  007E9D  3D                 	db	61	;'='
  1826  007E9E  25                 	db	37
  1827  007E9F  64                 	db	100	;'d'
  1828  007EA0  2C                 	db	44
  1829  007EA1  25                 	db	37
  1830  007EA2  73                 	db	115	;'s'
  1831  007EA3  0D                 	db	13
  1832  007EA4  0A                 	db	10
  1833  007EA5  00                 	db	0
  1834  007EA6  41                 	db	65	;'A'
  1835  007EA7  54                 	db	84	;'T'
  1836  007EA8  2B                 	db	43
  1837  007EA9  43                 	db	67	;'C'
  1838  007EAA  49                 	db	73	;'I'
  1839  007EAB  50                 	db	80	;'P'
  1840  007EAC  53                 	db	83	;'S'
  1841  007EAD  45                 	db	69	;'E'
  1842  007EAE  4E                 	db	78	;'N'
  1843  007EAF  44                 	db	68	;'D'
  1844  007EB0  3D                 	db	61	;'='
  1845  007EB1  25                 	db	37
  1846  007EB2  64                 	db	100	;'d'
  1847  007EB3  2C                 	db	44
  1848  007EB4  25                 	db	37
  1849  007EB5  64                 	db	100	;'d'
  1850  007EB6  0D                 	db	13
  1851  007EB7  0A                 	db	10
  1852  007EB8  00                 	db	0
  1853  007EB9                     STR_66:
  1854  007EB9  30                 	db	48	;'0'
  1855  007EBA  31                 	db	49	;'1'
  1856  007EBB  32                 	db	50	;'2'
  1857  007EBC  33                 	db	51	;'3'
  1858  007EBD  34                 	db	52	;'4'
  1859  007EBE  35                 	db	53	;'5'
  1860  007EBF  36                 	db	54	;'6'
  1861  007EC0  37                 	db	55	;'7'
  1862  007EC1  38                 	db	56	;'8'
  1863  007EC2  39                 	db	57	;'9'
  1864  007EC3  41                 	db	65	;'A'
  1865  007EC4  42                 	db	66	;'B'
  1866  007EC5  43                 	db	67	;'C'
  1867  007EC6  44                 	db	68	;'D'
  1868  007EC7  45                 	db	69	;'E'
  1869  007EC8  46                 	db	70	;'F'
  1870  007EC9  00                 	db	0
  1871  007ECA                     STR_67:
  1872  007ECA  30                 	db	48	;'0'
  1873  007ECB  31                 	db	49	;'1'
  1874  007ECC  32                 	db	50	;'2'
  1875  007ECD  33                 	db	51	;'3'
  1876  007ECE  34                 	db	52	;'4'
  1877  007ECF  35                 	db	53	;'5'
  1878  007ED0  36                 	db	54	;'6'
  1879  007ED1  37                 	db	55	;'7'
  1880  007ED2  38                 	db	56	;'8'
  1881  007ED3  39                 	db	57	;'9'
  1882  007ED4  61                 	db	97	;'a'
  1883  007ED5  62                 	db	98	;'b'
  1884  007ED6  63                 	db	99	;'c'
  1885  007ED7  64                 	db	100	;'d'
  1886  007ED8  65                 	db	101	;'e'
  1887  007ED9  66                 	db	102	;'f'
  1888  007EDA  00                 	db	0
  1889  007EDB                     STR_25:
  1890  007EDB  41                 	db	65	;'A'
  1891  007EDC  54                 	db	84	;'T'
  1892  007EDD  2B                 	db	43
  1893  007EDE  43                 	db	67	;'C'
  1894  007EDF  49                 	db	73	;'I'
  1895  007EE0  50                 	db	80	;'P'
  1896  007EE1  53                 	db	83	;'S'
  1897  007EE2  54                 	db	84	;'T'
  1898  007EE3  41                 	db	65	;'A'
  1899  007EE4  52                 	db	82	;'R'
  1900  007EE5  54                 	db	84	;'T'
  1901  007EE6  3D                 	db	61	;'='
  1902  007EE7  25                 	db	37
  1903  007EE8  73                 	db	115	;'s'
  1904  007EE9  0D                 	db	13
  1905  007EEA  0A                 	db	10
  1906  007EEB  00                 	db	0
  1907  007EEC  41                 	db	65	;'A'
  1908  007EED  54                 	db	84	;'T'
  1909  007EEE  2B                 	db	43
  1910  007EEF  43                 	db	67	;'C'
  1911  007EF0  49                 	db	73	;'I'
  1912  007EF1  50                 	db	80	;'P'
  1913  007EF2  4D                 	db	77	;'M'
  1914  007EF3  4F                 	db	79	;'O'
  1915  007EF4  44                 	db	68	;'D'
  1916  007EF5  45                 	db	69	;'E'
  1917  007EF6  3D                 	db	61	;'='
  1918  007EF7  30                 	db	48	;'0'
  1919  007EF8  0D                 	db	13
  1920  007EF9  0A                 	db	10
  1921  007EFA  00                 	db	0
  1922  007EFB                     STR_53:
  1923  007EFB  41                 	db	65	;'A'
  1924  007EFC  54                 	db	84	;'T'
  1925  007EFD  2B                 	db	43
  1926  007EFE  43                 	db	67	;'C'
  1927  007EFF  49                 	db	73	;'I'
  1928  007F00  50                 	db	80	;'P'
  1929  007F01  4D                 	db	77	;'M'
  1930  007F02  4F                 	db	79	;'O'
  1931  007F03  44                 	db	68	;'D'
  1932  007F04  45                 	db	69	;'E'
  1933  007F05  3D                 	db	61	;'='
  1934  007F06  31                 	db	49	;'1'
  1935  007F07  0D                 	db	13
  1936  007F08  0A                 	db	10
  1937  007F09  00                 	db	0
  1938  007F0A                     STR_41:
  1939  007F0A  41                 	db	65	;'A'
  1940  007F0B  54                 	db	84	;'T'
  1941  007F0C  2B                 	db	43
  1942  007F0D  43                 	db	67	;'C'
  1943  007F0E  49                 	db	73	;'I'
  1944  007F0F  50                 	db	80	;'P'
  1945  007F10  4D                 	db	77	;'M'
  1946  007F11  55                 	db	85	;'U'
  1947  007F12  58                 	db	88	;'X'
  1948  007F13  3D                 	db	61	;'='
  1949  007F14  30                 	db	48	;'0'
  1950  007F15  0D                 	db	13
  1951  007F16  0A                 	db	10
  1952  007F17  00                 	db	0
  1953  007F18                     STR_9:
  1954  007F18  41                 	db	65	;'A'
  1955  007F19  54                 	db	84	;'T'
  1956  007F1A  2B                 	db	43
  1957  007F1B  43                 	db	67	;'C'
  1958  007F1C  57                 	db	87	;'W'
  1959  007F1D  4D                 	db	77	;'M'
  1960  007F1E  4F                 	db	79	;'O'
  1961  007F1F  44                 	db	68	;'D'
  1962  007F20  45                 	db	69	;'E'
  1963  007F21  3D                 	db	61	;'='
  1964  007F22  31                 	db	49	;'1'
  1965  007F23  0D                 	db	13
  1966  007F24  0A                 	db	10
  1967  007F25  00                 	db	0
  1968  007F26  41                 	db	65	;'A'
  1969  007F27  54                 	db	84	;'T'
  1970  007F28  2B                 	db	43
  1971  007F29  43                 	db	67	;'C'
  1972  007F2A  49                 	db	73	;'I'
  1973  007F2B  50                 	db	80	;'P'
  1974  007F2C  4D                 	db	77	;'M'
  1975  007F2D  55                 	db	85	;'U'
  1976  007F2E  58                 	db	88	;'X'
  1977  007F2F  3D                 	db	61	;'='
  1978  007F30  31                 	db	49	;'1'
  1979  007F31  0D                 	db	13
  1980  007F32  0A                 	db	10
  1981  007F33  00                 	db	0
  1982  007F34                     STR_11:
  1983  007F34  41                 	db	65	;'A'
  1984  007F35  54                 	db	84	;'T'
  1985  007F36  2B                 	db	43
  1986  007F37  43                 	db	67	;'C'
  1987  007F38  57                 	db	87	;'W'
  1988  007F39  4D                 	db	77	;'M'
  1989  007F3A  4F                 	db	79	;'O'
  1990  007F3B  44                 	db	68	;'D'
  1991  007F3C  45                 	db	69	;'E'
  1992  007F3D  3D                 	db	61	;'='
  1993  007F3E  32                 	db	50	;'2'
  1994  007F3F  0D                 	db	13
  1995  007F40  0A                 	db	10
  1996  007F41  00                 	db	0
  1997  007F42                     STR_13:
  1998  007F42  41                 	db	65	;'A'
  1999  007F43  54                 	db	84	;'T'
  2000  007F44  2B                 	db	43
  2001  007F45  43                 	db	67	;'C'
  2002  007F46  57                 	db	87	;'W'
  2003  007F47  4D                 	db	77	;'M'
  2004  007F48  4F                 	db	79	;'O'
  2005  007F49  44                 	db	68	;'D'
  2006  007F4A  45                 	db	69	;'E'
  2007  007F4B  3D                 	db	61	;'='
  2008  007F4C  33                 	db	51	;'3'
  2009  007F4D  0D                 	db	13
  2010  007F4E  0A                 	db	10
  2011  007F4F  00                 	db	0
  2012  007F50                     STR_32:
  2013  007F50  41                 	db	65	;'A'
  2014  007F51  54                 	db	84	;'T'
  2015  007F52  2B                 	db	43
  2016  007F53  43                 	db	67	;'C'
  2017  007F54  57                 	db	87	;'W'
  2018  007F55  4D                 	db	77	;'M'
  2019  007F56  4F                 	db	79	;'O'
  2020  007F57  44                 	db	68	;'D'
  2021  007F58  45                 	db	69	;'E'
  2022  007F59  3F                 	db	63	;'?'
  2023  007F5A  0D                 	db	13
  2024  007F5B  0A                 	db	10
  2025  007F5C  00                 	db	0
  2026  007F5D                     STR_20:
  2027  007F5D  22                 	db	34
  2028  007F5E  25                 	db	37
  2029  007F5F  73                 	db	115	;'s'
  2030  007F60  22                 	db	34
  2031  007F61  2C                 	db	44
  2032  007F62  22                 	db	34
  2033  007F63  25                 	db	37
  2034  007F64  73                 	db	115	;'s'
  2035  007F65  22                 	db	34
  2036  007F66  2C                 	db	44
  2037  007F67  25                 	db	37
  2038  007F68  73                 	db	115	;'s'
  2039  007F69  00                 	db	0
  2040  007F6A                     STR_57:
  2041  007F6A  31                 	db	49	;'1'
  2042  007F6B  39                 	db	57	;'9'
  2043  007F6C  32                 	db	50	;'2'
  2044  007F6D  2E                 	db	46
  2045  007F6E  31                 	db	49	;'1'
  2046  007F6F  36                 	db	54	;'6'
  2047  007F70  38                 	db	56	;'8'
  2048  007F71  2E                 	db	46
  2049  007F72  34                 	db	52	;'4'
  2050  007F73  2E                 	db	46
  2051  007F74  31                 	db	49	;'1'
  2052  007F75  00                 	db	0
  2053  007F76                     STR_49:
  2054  007F76  41                 	db	65	;'A'
  2055  007F77  54                 	db	84	;'T'
  2056  007F78  2B                 	db	43
  2057  007F79  43                 	db	67	;'C'
  2058  007F7A  57                 	db	87	;'W'
  2059  007F7B  51                 	db	81	;'Q'
  2060  007F7C  41                 	db	65	;'A'
  2061  007F7D  50                 	db	80	;'P'
  2062  007F7E  0D                 	db	13
  2063  007F7F  0A                 	db	10
  2064  007F80  00                 	db	0
  2065  007F81                     STR_39:
  2066  007F81  7A                 	db	122	;'z'
  2067  007F82  78                 	db	120	;'x'
  2068  007F83  34                 	db	52	;'4'
  2069  007F84  35                 	db	53	;'5'
  2070  007F85  32                 	db	50	;'2'
  2071  007F86  32                 	db	50	;'2'
  2072  007F87  33                 	db	51	;'3'
  2073  007F88  33                 	db	51	;'3'
  2074  007F89  31                 	db	49	;'1'
  2075  007F8A  00                 	db	0
  2076  007F8B                     STR_36:
  2077  007F8B  2B                 	db	43
  2078  007F8C  43                 	db	67	;'C'
  2079  007F8D  57                 	db	87	;'W'
  2080  007F8E  4D                 	db	77	;'M'
  2081  007F8F  4F                 	db	79	;'O'
  2082  007F90  44                 	db	68	;'D'
  2083  007F91  45                 	db	69	;'E'
  2084  007F92  3A                 	db	58	;':'
  2085  007F93  31                 	db	49	;'1'
  2086  007F94  00                 	db	0
  2087  007F95  2B                 	db	43
  2088  007F96  43                 	db	67	;'C'
  2089  007F97  57                 	db	87	;'W'
  2090  007F98  4D                 	db	77	;'M'
  2091  007F99  4F                 	db	79	;'O'
  2092  007F9A  44                 	db	68	;'D'
  2093  007F9B  45                 	db	69	;'E'
  2094  007F9C  3A                 	db	58	;':'
  2095  007F9D  32                 	db	50	;'2'
  2096  007F9E  00                 	db	0
  2097  007F9F                     STR_17:
  2098  007F9F  43                 	db	67	;'C'
  2099  007FA0  4F                 	db	79	;'O'
  2100  007FA1  4E                 	db	78	;'N'
  2101  007FA2  4E                 	db	78	;'N'
  2102  007FA3  45                 	db	69	;'E'
  2103  007FA4  43                 	db	67	;'C'
  2104  007FA5  54                 	db	84	;'T'
  2105  007FA6  45                 	db	69	;'E'
  2106  007FA7  44                 	db	68	;'D'
  2107  007FA8  00                 	db	0
  2108  007FA9                     STR_6:
  2109  007FA9  41                 	db	65	;'A'
  2110  007FAA  54                 	db	84	;'T'
  2111  007FAB  2B                 	db	43
  2112  007FAC  52                 	db	82	;'R'
  2113  007FAD  53                 	db	83	;'S'
  2114  007FAE  54                 	db	84	;'T'
  2115  007FAF  0D                 	db	13
  2116  007FB0  0A                 	db	10
  2117  007FB1  00                 	db	0
  2118  007FB2                     STR_3:
  2119  007FB2  53                 	db	83	;'S'
  2120  007FB3  45                 	db	69	;'E'
  2121  007FB4  4E                 	db	78	;'N'
  2122  007FB5  44                 	db	68	;'D'
  2123  007FB6  20                 	db	32
  2124  007FB7  4F                 	db	79	;'O'
  2125  007FB8  4B                 	db	75	;'K'
  2126  007FB9  00                 	db	0
  2127  007FBA                     STR_26:
  2128  007FBA  43                 	db	67	;'C'
  2129  007FBB  4F                 	db	79	;'O'
  2130  007FBC  4E                 	db	78	;'N'
  2131  007FBD  4E                 	db	78	;'N'
  2132  007FBE  45                 	db	69	;'E'
  2133  007FBF  43                 	db	67	;'C'
  2134  007FC0  54                 	db	84	;'T'
  2135  007FC1  00                 	db	0
  2136  007FC2                     STR_65:
  2137  007FC2  28                 	db	40
  2138  007FC3  6E                 	db	110	;'n'
  2139  007FC4  75                 	db	117	;'u'
  2140  007FC5  6C                 	db	108	;'l'
  2141  007FC6  6C                 	db	108	;'l'
  2142  007FC7  29                 	db	41
  2143  007FC8  00                 	db	0
  2144  007FC9                     STR_27:
  2145  007FC9  41                 	db	65	;'A'
  2146  007FCA  4C                 	db	76	;'L'
  2147  007FCB  52                 	db	82	;'R'
  2148  007FCC  45                 	db	69	;'E'
  2149  007FCD  41                 	db	65	;'A'
  2150  007FCE  59                 	db	89	;'Y'
  2151  007FCF  00                 	db	0
  2152  007FD0                     STR_62:
  2153  007FD0  48                 	db	72	;'H'
  2154  007FD1  65                 	db	101	;'e'
  2155  007FD2  6C                 	db	108	;'l'
  2156  007FD3  6C                 	db	108	;'l'
  2157  007FD4  6F                 	db	111	;'o'
  2158  007FD5  00                 	db	0
  2159  007FD6                     STR_8:
  2160  007FD6  72                 	db	114	;'r'
  2161  007FD7  65                 	db	101	;'e'
  2162  007FD8  61                 	db	97	;'a'
  2163  007FD9  64                 	db	100	;'d'
  2164  007FDA  79                 	db	121	;'y'
  2165  007FDB  00                 	db	0
  2166  007FDC                     STR_4:
  2167  007FDC  41                 	db	65	;'A'
  2168  007FDD  54                 	db	84	;'T'
  2169  007FDE  0D                 	db	13
  2170  007FDF  0A                 	db	10
  2171  007FE0  00                 	db	0
  2172  007FE1                     STR_58:
  2173  007FE1  35                 	db	53	;'5'
  2174  007FE2  30                 	db	48	;'0'
  2175  007FE3  30                 	db	48	;'0'
  2176  007FE4  30                 	db	48	;'0'
  2177  007FE5  00                 	db	0
  2178  007FE6                     STR_38:
  2179  007FE6  4B                 	db	75	;'K'
  2180  007FE7  45                 	db	69	;'E'
  2181  007FE8  4E                 	db	78	;'N'
  2182  007FE9  00                 	db	0
  2183  007FEA                     STR_21:
  2184  007FEA  54                 	db	84	;'T'
  2185  007FEB  43                 	db	67	;'C'
  2186  007FEC  50                 	db	80	;'P'
  2187  007FED  00                 	db	0
  2188  007FEE                     STR_23:
  2189  007FEE  55                 	db	85	;'U'
  2190  007FEF  44                 	db	68	;'D'
  2191  007FF0  50                 	db	80	;'P'
  2192  007FF1  00                 	db	0
  2193  007FF2                     STR_63:
  2194  007FF2  25                 	db	37
  2195  007FF3  64                 	db	100	;'d'
  2196  007FF4  00                 	db	0
  2197  007FF5  3E                 	db	62	;'>'
  2198  007FF6  20                 	db	32
  2199  007FF7  00                 	db	0
  2200  007FF8                     STR_60:
  2201  007FF8  00                 	db	0
  2202  007FF9  00                 	db	0
  2203  007FFA                     STR_59:
  2204  007FFA  21                 	db	33
  2205  007FFB  00                 	db	0
  2206  007FFC  34                 	db	52	;'4'
  2207  007FFD  00                 	db	0
  2208  0000                     
  2209                           ; #config settings
  2210  007FFE  00                 	db	0	; dummy byte at the end
  2211  0000                     
  2212                           	psect	cinit
  2213  0012EC                     __pcinit:
  2214                           	opt stack 0
  2215  0012EC                     start_initialization:
  2216                           	opt stack 0
  2217  0012EC                     __initialization:
  2218                           	opt stack 0
  2219                           
  2220                           ; Initialize objects allocated to COMRAM (8 bytes)
  2221                           ; load TBLPTR registers with __pidataCOMRAM
  2222  0012EC  0EFC               	movlw	low __pidataCOMRAM
  2223  0012EE  6EF6               	movwf	tblptrl,c
  2224  0012F0  0E18               	movlw	high __pidataCOMRAM
  2225  0012F2  6EF7               	movwf	tblptrh,c
  2226  0012F4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2227  0012F6  6EF8               	movwf	tblptru,c
  2228  0012F8  EE00  F051         	lfsr	0,__pdataCOMRAM
  2229  0012FC  EE10 F008          	lfsr	1,8
  2230  001300                     copy_data0:
  2231  001300  0009               	tblrd		*+
  2232  001302  CFF5 FFEE          	movff	tablat,postinc0
  2233  001306  50E5               	movf	postdec1,w,c
  2234  001308  50E1               	movf	fsr1l,w,c
  2235  00130A  E1FA               	bnz	copy_data0
  2236                           
  2237                           ; Clear objects allocated to BANK3 (100 bytes)
  2238  00130C  EE03  F000         	lfsr	0,__pbssBANK3
  2239  001310  0E64               	movlw	100
  2240  001312                     clear_0:
  2241  001312  6AEE               	clrf	postinc0,c
  2242  001314  06E8               	decf	wreg,f,c
  2243  001316  E1FD               	bnz	clear_0
  2244                           
  2245                           ; Clear objects allocated to BANK2 (206 bytes)
  2246  001318  EE02  F000         	lfsr	0,__pbssBANK2
  2247  00131C  0ECE               	movlw	206
  2248  00131E                     clear_1:
  2249  00131E  6AEE               	clrf	postinc0,c
  2250  001320  06E8               	decf	wreg,f,c
  2251  001322  E1FD               	bnz	clear_1
  2252                           
  2253                           ; Clear objects allocated to BANK1 (30 bytes)
  2254  001324  EE01  F0DD         	lfsr	0,__pbssBANK1
  2255  001328  0E1E               	movlw	30
  2256  00132A                     clear_2:
  2257  00132A  6AEE               	clrf	postinc0,c
  2258  00132C  06E8               	decf	wreg,f,c
  2259  00132E  E1FD               	bnz	clear_2
  2260                           
  2261                           ; Clear objects allocated to COMRAM (9 bytes)
  2262  001330  EE00  F048         	lfsr	0,__pbssCOMRAM
  2263  001334  0E09               	movlw	9
  2264  001336                     clear_3:
  2265  001336  6AEE               	clrf	postinc0,c
  2266  001338  06E8               	decf	wreg,f,c
  2267  00133A  E1FD               	bnz	clear_3
  2268  00133C                     end_of_initialization:
  2269                           	opt stack 0
  2270  00133C                     __end_of__initialization:
  2271                           	opt stack 0
  2272  00133C  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2273  00133E  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2274  001340  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2275  001342  6EF8               	movwf	tblptru,c
  2276  001344  0100               	movlb	0
  2277  001346  EF5A  F004         	goto	_main	;jump to C main() function
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           postdec1	equ	0xFE5
  2285                           fsr1l	equ	0xFE1
  2286                           
  2287                           	psect	bssCOMRAM
  2288  000048                     __pbssCOMRAM:
  2289                           	opt stack 0
  2290  000048                     _s:
  2291                           	opt stack 0
  2292  000048                     	ds	2
  2293  00004A                     _IP:
  2294                           	opt stack 0
  2295  00004A                     	ds	2
  2296  00004C                     _test_index:
  2297                           	opt stack 0
  2298  00004C                     	ds	2
  2299  00004E                     _work_flag:
  2300                           	opt stack 0
  2301  00004E                     	ds	1
  2302  00004F                     _write:
  2303                           	opt stack 0
  2304  00004F                     	ds	1
  2305  000050                     _count:
  2306                           	opt stack 0
  2307  000050                     	ds	1
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           postinc0	equ	0xFEE
  2313                           wreg	equ	0xFE8
  2314                           postdec1	equ	0xFE5
  2315                           fsr1l	equ	0xFE1
  2316                           
  2317                           	psect	dataCOMRAM
  2318  000051                     __pdataCOMRAM:
  2319                           	opt stack 0
  2320  000051                     LCD_CreateFont@F3803:
  2321                           	opt stack 0
  2322  000051                     	ds	8
  2323                           tblptru	equ	0xFF8
  2324                           tblptrh	equ	0xFF7
  2325                           tblptrl	equ	0xFF6
  2326                           tablat	equ	0xFF5
  2327                           postinc0	equ	0xFEE
  2328                           wreg	equ	0xFE8
  2329                           postdec1	equ	0xFE5
  2330                           fsr1l	equ	0xFE1
  2331                           
  2332                           	psect	bssBANK1
  2333  0001DD                     __pbssBANK1:
  2334                           	opt stack 0
  2335  0001DD                     _test:
  2336                           	opt stack 0
  2337  0001DD                     	ds	30
  2338                           tblptru	equ	0xFF8
  2339                           tblptrh	equ	0xFF7
  2340                           tblptrl	equ	0xFF6
  2341                           tablat	equ	0xFF5
  2342                           postinc0	equ	0xFEE
  2343                           wreg	equ	0xFE8
  2344                           postdec1	equ	0xFE5
  2345                           fsr1l	equ	0xFE1
  2346                           
  2347                           	psect	bssBANK2
  2348  000200                     __pbssBANK2:
  2349                           	opt stack 0
  2350  000200                     _strPc_Fram_Record:
  2351                           	opt stack 0
  2352  000200                     	ds	52
  2353  000234                     _str1_1esp8266:
  2354                           	opt stack 0
  2355  000234                     	ds	51
  2356  000267                     _strPc1_1_Fram_Record:
  2357                           	opt stack 0
  2358  000267                     	ds	51
  2359  00029A                     _strEsp8266_Fram_Record:
  2360                           	opt stack 0
  2361  00029A                     	ds	52
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           postinc0	equ	0xFEE
  2367                           wreg	equ	0xFE8
  2368                           postdec1	equ	0xFE5
  2369                           fsr1l	equ	0xFE1
  2370                           
  2371                           	psect	bssBANK3
  2372  000300                     __pbssBANK3:
  2373                           	opt stack 0
  2374  000300                     ESP8266_Link_Server@F4048:
  2375                           	opt stack 0
  2376  000300                     	ds	100
  2377                           tblptru	equ	0xFF8
  2378                           tblptrh	equ	0xFF7
  2379                           tblptrl	equ	0xFF6
  2380                           tablat	equ	0xFF5
  2381                           postinc0	equ	0xFEE
  2382                           wreg	equ	0xFE8
  2383                           postdec1	equ	0xFE5
  2384                           fsr1l	equ	0xFE1
  2385                           
  2386                           	psect	cstackBANK2
  2387  0002CE                     __pcstackBANK2:
  2388                           	opt stack 0
  2389  0002CE                     main@t:
  2390                           	opt stack 0
  2391                           
  2392                           ; 20 bytes @ 0x0
  2393  0002CE                     	ds	20
  2394  0002E2                     main@print:
  2395                           	opt stack 0
  2396                           
  2397                           ; 5 bytes @ 0x14
  2398  0002E2                     	ds	5
  2399  0002E7                     main@temp:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x19
  2403  0002E7                     	ds	2
  2404                           tblptru	equ	0xFF8
  2405                           tblptrh	equ	0xFF7
  2406                           tblptrl	equ	0xFF6
  2407                           tablat	equ	0xFF5
  2408                           postinc0	equ	0xFEE
  2409                           wreg	equ	0xFE8
  2410                           postdec1	equ	0xFE5
  2411                           fsr1l	equ	0xFE1
  2412                           
  2413                           	psect	cstackBANK1
  2414  000100                     __pcstackBANK1:
  2415                           	opt stack 0
  2416  000100                     ESP8266_Link_Server@cCmd:
  2417                           	opt stack 0
  2418                           
  2419                           ; 120 bytes @ 0x0
  2420  000100                     	ds	120
  2421  000178                     ESP8266_Link_Server@cStr:
  2422                           	opt stack 0
  2423                           
  2424                           ; 100 bytes @ 0x78
  2425  000178                     	ds	100
  2426  0001DC                     ESP8266_Link_Server@enumE:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0xDC
  2430  0001DC                     	ds	1
  2431                           tblptru	equ	0xFF8
  2432                           tblptrh	equ	0xFF7
  2433                           tblptrl	equ	0xFF6
  2434                           tablat	equ	0xFF5
  2435                           postinc0	equ	0xFEE
  2436                           wreg	equ	0xFE8
  2437                           postdec1	equ	0xFE5
  2438                           fsr1l	equ	0xFE1
  2439                           
  2440                           	psect	cstackBANK0
  2441  000080                     __pcstackBANK0:
  2442                           	opt stack 0
  2443  000080                     ESP8266_JoinAP@cCmd:
  2444                           	opt stack 0
  2445                           
  2446                           ; 120 bytes @ 0x0
  2447  000080                     	ds	120
  2448                           tblptru	equ	0xFF8
  2449                           tblptrh	equ	0xFF7
  2450                           tblptrl	equ	0xFF6
  2451                           tablat	equ	0xFF5
  2452                           postinc0	equ	0xFEE
  2453                           wreg	equ	0xFE8
  2454                           postdec1	equ	0xFE5
  2455                           fsr1l	equ	0xFE1
  2456                           
  2457                           	psect	cstackCOMRAM
  2458  000001                     __pcstackCOMRAM:
  2459                           	opt stack 0
  2460  000001                     ??_time_adc:
  2461  000001                     
  2462                           ; 1 bytes @ 0x0
  2463  000001                     	ds	16
  2464  000011                     time_adc@ch:
  2465                           	opt stack 0
  2466                           
  2467                           ; 1 bytes @ 0x10
  2468  000011                     	ds	1
  2469  000012                     ??_Delay10KTCYx:
  2470  000012                     ??_isdigit:
  2471  000012                     ?_strlen:
  2472                           	opt stack 0
  2473  000012                     ?_strchr:
  2474                           	opt stack 0
  2475  000012                     ?___wmul:
  2476                           	opt stack 0
  2477  000012                     ?___lwdiv:
  2478                           	opt stack 0
  2479  000012                     LCDWriteNibble@rs:
  2480                           	opt stack 0
  2481  000012                     Delay10TCYx@unit:
  2482                           	opt stack 0
  2483  000012                     Delay1TCYx@unit:
  2484                           	opt stack 0
  2485  000012                     ESP8266_Uart@cmd:
  2486                           	opt stack 0
  2487  000012                     ___wmul@multiplier:
  2488                           	opt stack 0
  2489  000012                     ___lwdiv@dividend:
  2490                           	opt stack 0
  2491  000012                     memset@p1:
  2492                           	opt stack 0
  2493  000012                     strcpy@to:
  2494                           	opt stack 0
  2495  000012                     strchr@ptr:
  2496                           	opt stack 0
  2497  000012                     strlen@s:
  2498                           	opt stack 0
  2499                           
  2500                           ; 2 bytes @ 0x11
  2501  000012                     	ds	1
  2502  000013                     LCDWriteNibble@ch:
  2503                           	opt stack 0
  2504  000013                     Delay10KTCYx@unit:
  2505                           	opt stack 0
  2506  000013                     _isdigit$1685:
  2507                           	opt stack 0
  2508  000013                     delay_us@us:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x12
  2512  000013                     	ds	1
  2513  000014                     ??_strlen:
  2514  000014                     ??_ESP8266_Uart:
  2515  000014                     isdigit@c:
  2516                           	opt stack 0
  2517  000014                     delay_ms@ms:
  2518                           	opt stack 0
  2519  000014                     ___wmul@multiplicand:
  2520                           	opt stack 0
  2521  000014                     ___lwdiv@divisor:
  2522                           	opt stack 0
  2523  000014                     memset@c:
  2524                           	opt stack 0
  2525  000014                     strcpy@from:
  2526                           	opt stack 0
  2527  000014                     strchr@chr:
  2528                           	opt stack 0
  2529                           
  2530                           ; 2 bytes @ 0x13
  2531  000014                     	ds	1
  2532  000015                     ??_IIC_Send_Byte:
  2533  000015                     IIC_Wait_Ack@ucErrTime:
  2534                           	opt stack 0
  2535                           
  2536                           ; 1 bytes @ 0x14
  2537  000015                     	ds	1
  2538  000016                     LCD_WriteCmd@ch:
  2539                           	opt stack 0
  2540  000016                     LCD_WriteData@ch:
  2541                           	opt stack 0
  2542  000016                     IIC_Send_Byte@txd:
  2543                           	opt stack 0
  2544  000016                     ___lwdiv@counter:
  2545                           	opt stack 0
  2546  000016                     ESP8266_Uart@index:
  2547                           	opt stack 0
  2548  000016                     ___wmul@product:
  2549                           	opt stack 0
  2550  000016                     memset@n:
  2551                           	opt stack 0
  2552  000016                     strcpy@cp:
  2553                           	opt stack 0
  2554  000016                     strlen@cp:
  2555                           	opt stack 0
  2556                           
  2557                           ; 2 bytes @ 0x15
  2558  000016                     	ds	1
  2559  000017                     LCD_GotoXY@ln:
  2560                           	opt stack 0
  2561  000017                     IIC_Send_Byte@t:
  2562                           	opt stack 0
  2563  000017                     LCD_WritetStr@str:
  2564                           	opt stack 0
  2565  000017                     ___lwdiv@quotient:
  2566                           	opt stack 0
  2567                           
  2568                           ; 2 bytes @ 0x16
  2569  000017                     	ds	1
  2570  000018                     ??_LCD_GotoXY:
  2571  000018                     ?_strncmp:
  2572                           	opt stack 0
  2573  000018                     PCA9685_writeOneByte@data:
  2574                           	opt stack 0
  2575  000018                     memset@p:
  2576                           	opt stack 0
  2577  000018                     strncmp@s1:
  2578                           	opt stack 0
  2579                           
  2580                           ; 2 bytes @ 0x17
  2581  000018                     	ds	1
  2582  000019                     ??_LCD_WritetStr:
  2583  000019                     ?___lwmod:
  2584                           	opt stack 0
  2585  000019                     PCA9685_writeOneByte@addr:
  2586                           	opt stack 0
  2587  000019                     ___lwmod@dividend:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x18
  2591  000019                     	ds	1
  2592  00001A                     transmit_finger@HL_Value:
  2593                           	opt stack 0
  2594  00001A                     _LCD_GotoXY$640:
  2595                           	opt stack 0
  2596  00001A                     strncmp@s2:
  2597                           	opt stack 0
  2598                           
  2599                           ; 2 bytes @ 0x19
  2600  00001A                     	ds	1
  2601  00001B                     LCD_WritetStr@i:
  2602                           	opt stack 0
  2603  00001B                     ___lwmod@divisor:
  2604                           	opt stack 0
  2605                           
  2606                           ; 2 bytes @ 0x1A
  2607  00001B                     	ds	1
  2608  00001C                     transmit_finger@finger:
  2609                           	opt stack 0
  2610  00001C                     LCD_GotoXY@pos:
  2611                           	opt stack 0
  2612  00001C                     strncmp@len:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x1B
  2616  00001C                     	ds	1
  2617  00001D                     transmit_finger@Hbyte:
  2618                           	opt stack 0
  2619  00001D                     ___lwmod@counter:
  2620                           	opt stack 0
  2621                           
  2622                           ; 1 bytes @ 0x1C
  2623  00001D                     	ds	1
  2624  00001E                     ??_strncmp:
  2625  00001E                     ?_sprintf:
  2626                           	opt stack 0
  2627  00001E                     transmit_finger@Lbyte:
  2628                           	opt stack 0
  2629  00001E                     sprintf@sp:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0x1D
  2633  00001E                     	ds	1
  2634  00001F                     PWMt0PCA@up:
  2635                           	opt stack 0
  2636                           
  2637                           ; 2 bytes @ 0x1E
  2638  00001F                     	ds	1
  2639  000020                     sprintf@f:
  2640                           	opt stack 0
  2641                           
  2642                           ; 2 bytes @ 0x1F
  2643  000020                     	ds	1
  2644  000021                     ?_strstr:
  2645                           	opt stack 0
  2646  000021                     PWMt0PCA@low:
  2647                           	opt stack 0
  2648  000021                     strstr@s1:
  2649                           	opt stack 0
  2650                           
  2651                           ; 2 bytes @ 0x20
  2652  000021                     	ds	2
  2653  000023                     PWMt0PCA@finger:
  2654                           	opt stack 0
  2655  000023                     strstr@s2:
  2656                           	opt stack 0
  2657                           
  2658                           ; 2 bytes @ 0x22
  2659  000023                     	ds	1
  2660  000024                     ADtoPWM@AD:
  2661                           	opt stack 0
  2662                           
  2663                           ; 2 bytes @ 0x23
  2664  000024                     	ds	1
  2665  000025                     ?_ESP8266_ReceiveString:
  2666                           	opt stack 0
  2667  000025                     ESP8266_Cmd@cmd:
  2668                           	opt stack 0
  2669                           
  2670                           ; 2 bytes @ 0x24
  2671  000025                     	ds	1
  2672  000026                     ??_ADtoPWM:
  2673                           
  2674                           ; 1 bytes @ 0x25
  2675  000026                     	ds	1
  2676  000027                     ESP8266_Cmd@reply1:
  2677                           	opt stack 0
  2678  000027                     ESP8266_ReceiveString@pRecStr:
  2679                           	opt stack 0
  2680                           
  2681                           ; 2 bytes @ 0x26
  2682  000027                     	ds	1
  2683  000028                     ??_sprintf:
  2684                           
  2685                           ; 1 bytes @ 0x27
  2686  000028                     	ds	1
  2687  000029                     ESP8266_Cmd@reply2:
  2688                           	opt stack 0
  2689                           
  2690                           ; 2 bytes @ 0x28
  2691  000029                     	ds	1
  2692  00002A                     ADtoPWM@u4:
  2693                           	opt stack 0
  2694                           
  2695                           ; 2 bytes @ 0x29
  2696  00002A                     	ds	1
  2697  00002B                     ESP8266_Cmd@waittime:
  2698                           	opt stack 0
  2699                           
  2700                           ; 2 bytes @ 0x2A
  2701  00002B                     	ds	1
  2702  00002C                     sprintf@idx:
  2703                           	opt stack 0
  2704  00002C                     ADtoPWM@w4:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x2B
  2708  00002C                     	ds	1
  2709  00002D                     _ESP8266_Cmd$1210:
  2710                           	opt stack 0
  2711  00002D                     _sprintf$1448:
  2712                           	opt stack 0
  2713                           
  2714                           ; 2 bytes @ 0x2C
  2715  00002D                     	ds	1
  2716  00002E                     ESP8266_Net_Mode_Choose@MODE:
  2717                           	opt stack 0
  2718                           
  2719                           ; 1 bytes @ 0x2D
  2720  00002E                     	ds	1
  2721  00002F                     _sprintf$1449:
  2722                           	opt stack 0
  2723                           
  2724                           ; 2 bytes @ 0x2E
  2725  00002F                     	ds	2
  2726  000031                     _sprintf$1455:
  2727                           	opt stack 0
  2728                           
  2729                           ; 2 bytes @ 0x30
  2730  000031                     	ds	2
  2731  000033                     sprintf@cp:
  2732                           	opt stack 0
  2733                           
  2734                           ; 2 bytes @ 0x32
  2735  000033                     	ds	2
  2736  000035                     sprintf@len:
  2737                           	opt stack 0
  2738                           
  2739                           ; 2 bytes @ 0x34
  2740  000035                     	ds	2
  2741  000037                     sprintf@ap:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x36
  2745  000037                     	ds	2
  2746  000039                     sprintf@val:
  2747                           	opt stack 0
  2748                           
  2749                           ; 2 bytes @ 0x38
  2750  000039                     	ds	2
  2751  00003B                     sprintf@prec:
  2752                           	opt stack 0
  2753                           
  2754                           ; 1 bytes @ 0x3A
  2755  00003B                     	ds	1
  2756  00003C                     sprintf@width:
  2757                           	opt stack 0
  2758                           
  2759                           ; 2 bytes @ 0x3B
  2760  00003C                     	ds	2
  2761  00003E                     sprintf@c:
  2762                           	opt stack 0
  2763                           
  2764                           ; 1 bytes @ 0x3D
  2765  00003E                     	ds	1
  2766  00003F                     sprintf@flag:
  2767                           	opt stack 0
  2768                           
  2769                           ; 2 bytes @ 0x3E
  2770  00003F                     	ds	2
  2771  000041                     ESP8266_JoinAP@pSSID:
  2772                           	opt stack 0
  2773  000041                     ESP8266_Link_Server@ip:
  2774                           	opt stack 0
  2775                           
  2776                           ; 2 bytes @ 0x40
  2777  000041                     	ds	2
  2778  000043                     ESP8266_JoinAP@pPassWord:
  2779                           	opt stack 0
  2780  000043                     ESP8266_Link_Server@ComNum:
  2781                           	opt stack 0
  2782                           
  2783                           ; 2 bytes @ 0x42
  2784  000043                     	ds	2
  2785  000045                     ESP8266_Link_Server@id:
  2786                           	opt stack 0
  2787                           
  2788                           ; 2 bytes @ 0x44
  2789  000045                     	ds	2
  2790  000047                     ??_main:
  2791                           
  2792                           ; 1 bytes @ 0x46
  2793  000047                     	ds	1
  2794                           tblptru	equ	0xFF8
  2795                           tblptrh	equ	0xFF7
  2796                           tblptrl	equ	0xFF6
  2797                           tablat	equ	0xFF5
  2798                           postinc0	equ	0xFEE
  2799                           wreg	equ	0xFE8
  2800                           postdec1	equ	0xFE5
  2801                           fsr1l	equ	0xFE1
  2802                           
  2803 ;;
  2804 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2805 ;;
  2806 ;; *************** function _main *****************
  2807 ;; Defined at:
  2808 ;;		line 153 in file "main.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;		None
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  t              20    0[BANK2 ] unsigned char [20]
  2813 ;;  print           5   20[BANK2 ] unsigned char [5]
  2814 ;;  temp            2   25[BANK2 ] PTR unsigned char 
  2815 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2825 ;;      Params:         0       0       0       0       0       0       0
  2826 ;;      Locals:         0       0       0      27       0       0       0
  2827 ;;      Temps:          1       0       0       0       0       0       0
  2828 ;;      Totals:         1       0       0      27       0       0       0
  2829 ;;Total ram usage:       28 bytes
  2830 ;; Hardware stack levels required when called:    9
  2831 ;; This function calls:
  2832 ;;		_ADtoPWM
  2833 ;;		_ESP8266_ReceiveString
  2834 ;;		_ESP8266_client
  2835 ;;		_GPIO_initial
  2836 ;;		_LCD_GotoXY
  2837 ;;		_LCD_Initialize
  2838 ;;		_LCD_WriteCmd
  2839 ;;		_LCD_WritetStr
  2840 ;;		_PCA9685_init
  2841 ;;		_delay_ms
  2842 ;;		_finger_reset
  2843 ;;		_initial_UART
  2844 ;;		_memset
  2845 ;;		_oclillator_initial
  2846 ;;		_sprintf
  2847 ;;		_strcpy
  2848 ;;		_timer_2_initial
  2849 ;;		_timer_intrrupt_initinal
  2850 ;; This function is called by:
  2851 ;;		Startup code after reset
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text0
  2856  0008B4                     __ptext0:
  2857                           	opt stack 0
  2858  0008B4                     _main:
  2859                           	opt stack 22
  2860                           
  2861                           ;main.c: 155: oclillator_initial();
  2862                           
  2863                           ;incstack = 0
  2864  0008B4  EC82  F00C         	call	_oclillator_initial	;wreg free
  2865                           
  2866                           ;main.c: 156: GPIO_initial();
  2867  0008B8  EC72  F00C         	call	_GPIO_initial	;wreg free
  2868                           
  2869                           ;main.c: 157: PCA9685_init();
  2870  0008BC  ECDF  F00B         	call	_PCA9685_init	;wreg free
  2871                           
  2872                           ;main.c: 158: timer_2_initial() ;
  2873  0008C0  EC35  F00C         	call	_timer_2_initial	;wreg free
  2874                           
  2875                           ;main.c: 159: timer_intrrupt_initinal();
  2876  0008C4  EC62  F00C         	call	_timer_intrrupt_initinal	;wreg free
  2877                           
  2878                           ;main.c: 160: LCD_Initialize();
  2879  0008C8  ECA3  F007         	call	_LCD_Initialize	;wreg free
  2880                           
  2881                           ;main.c: 161: initial_UART();
  2882  0008CC  ECCD  F00B         	call	_initial_UART	;wreg free
  2883                           
  2884                           ;main.c: 162: ESP8266_client();
  2885  0008D0  ECE2  F006         	call	_ESP8266_client	;wreg free
  2886                           
  2887                           ;main.c: 163: LCD_WriteCmd(0x01);
  2888  0008D4  0E01               	movlw	1
  2889  0008D6  EC9B  F00A         	call	_LCD_WriteCmd
  2890                           
  2891                           ;main.c: 164: LCD_GotoXY(0,0);
  2892  0008DA  0E00               	movlw	0
  2893  0008DC  6E17               	movwf	LCD_GotoXY@ln,c
  2894  0008DE  0E00               	movlw	0
  2895  0008E0  EC40  F00A         	call	_LCD_GotoXY
  2896                           
  2897                           ;main.c: 165: LCD_WritetStr("Hello");
  2898  0008E4  0ED0               	movlw	low STR_62
  2899  0008E6  6E17               	movwf	LCD_WritetStr@str,c
  2900  0008E8  0E7F               	movlw	high STR_62
  2901  0008EA  6E18               	movwf	LCD_WritetStr@str+1,c
  2902  0008EC  ECFF  F008         	call	_LCD_WritetStr	;wreg free
  2903                           
  2904                           ;main.c: 166: delay_ms ( 3000 );
  2905  0008F0  0E0B               	movlw	11
  2906  0008F2  6E15               	movwf	delay_ms@ms+1,c
  2907  0008F4  0EB8               	movlw	184
  2908  0008F6  6E14               	movwf	delay_ms@ms,c
  2909  0008F8  EC41  F00C         	call	_delay_ms	;wreg free
  2910                           
  2911                           ;main.c: 167: LCD_WriteCmd(0x01);
  2912  0008FC  0E01               	movlw	1
  2913  0008FE  EC9B  F00A         	call	_LCD_WriteCmd
  2914                           
  2915                           ;main.c: 168: finger_reset();
  2916  000902  EC8A  F00C         	call	_finger_reset	;wreg free
  2917                           
  2918                           ;main.c: 169: char* temp;
  2919                           ;main.c: 170: char t[20];
  2920                           ;main.c: 171: char print[5];
  2921                           ;main.c: 172: write=0;
  2922  000906  0E00               	movlw	0
  2923  000908  6E4F               	movwf	_write,c
  2924                           
  2925                           ;main.c: 174: memset(&(strEsp8266_Fram_Record.Data_RX_BUF[0]), '\0', 50);
  2926  00090A  0E9A               	movlw	low _strEsp8266_Fram_Record
  2927  00090C  6E12               	movwf	memset@p1,c
  2928  00090E  0E02               	movlw	high _strEsp8266_Fram_Record
  2929  000910  6E13               	movwf	memset@p1+1,c
  2930  000912  0E00               	movlw	0
  2931  000914  6E15               	movwf	memset@c+1,c
  2932  000916  0E00               	movlw	0
  2933  000918  6E14               	movwf	memset@c,c
  2934  00091A  0E00               	movlw	0
  2935  00091C  6E17               	movwf	memset@n+1,c
  2936  00091E  0E32               	movlw	50
  2937  000920  6E16               	movwf	memset@n,c
  2938  000922  EC66  F00B         	call	_memset	;wreg free
  2939  000926                     l4789:
  2940                           
  2941                           ;main.c: 176: {
  2942                           ;main.c: 177: temp=ESP8266_ReceiveString();
  2943  000926  ECEE  F007         	call	_ESP8266_ReceiveString	;wreg free
  2944  00092A  C025  F2E7         	movff	?_ESP8266_ReceiveString,main@temp
  2945  00092E  C026  F2E8         	movff	?_ESP8266_ReceiveString+1,main@temp+1
  2946                           
  2947                           ;main.c: 179: strcpy(t,temp);
  2948  000932  0ECE               	movlw	low main@t
  2949  000934  6E12               	movwf	strcpy@to,c
  2950  000936  0E02               	movlw	high main@t
  2951  000938  6E13               	movwf	strcpy@to+1,c
  2952  00093A  C2E7  F014         	movff	main@temp,strcpy@from
  2953  00093E  C2E8  F015         	movff	main@temp+1,strcpy@from+1
  2954  000942  EC38  F00B         	call	_strcpy	;wreg free
  2955                           
  2956                           ;main.c: 180: delay_ms(10);
  2957  000946  0E00               	movlw	0
  2958  000948  6E15               	movwf	delay_ms@ms+1,c
  2959  00094A  0E0A               	movlw	10
  2960  00094C  6E14               	movwf	delay_ms@ms,c
  2961  00094E  EC41  F00C         	call	_delay_ms	;wreg free
  2962                           
  2963                           ;main.c: 181: LCD_GotoXY(0,0);
  2964  000952  0E00               	movlw	0
  2965  000954  6E17               	movwf	LCD_GotoXY@ln,c
  2966  000956  0E00               	movlw	0
  2967  000958  EC40  F00A         	call	_LCD_GotoXY
  2968                           
  2969                           ;main.c: 182: sprintf(print,"%d",(int)*(temp+8));
  2970  00095C  0EE2               	movlw	low main@print
  2971  00095E  6E1E               	movwf	sprintf@sp,c
  2972  000960  0E02               	movlw	high main@print
  2973  000962  6E1F               	movwf	sprintf@sp+1,c
  2974  000964  0EF2               	movlw	low STR_63
  2975  000966  6E20               	movwf	sprintf@f,c
  2976  000968  0E7F               	movlw	high STR_63
  2977  00096A  6E21               	movwf	sprintf@f+1,c
  2978  00096C  0102               	movlb	2	; () banked
  2979  00096E  EE20 F008          	lfsr	2,8
  2980  000972  51E7               	movf	main@temp& (0+255),w,b
  2981  000974  26D9               	addwf	fsr2l,f,c
  2982  000976  51E8               	movf	(main@temp+1)& (0+255),w,b
  2983  000978  22DA               	addwfc	fsr2h,f,c
  2984  00097A  50DF               	movf	indf2,w,c
  2985  00097C  6E47               	movwf	??_main& (0+255),c
  2986  00097E  5047               	movf	??_main,w,c
  2987  000980  6E22               	movwf	?_sprintf+4,c
  2988  000982  6A23               	clrf	?_sprintf+5,c
  2989  000984  EC09  F000         	call	_sprintf	;wreg free
  2990                           
  2991                           ;main.c: 183: LCD_WritetStr(print);
  2992  000988  0EE2               	movlw	low main@print
  2993  00098A  6E17               	movwf	LCD_WritetStr@str,c
  2994  00098C  0E02               	movlw	high main@print
  2995  00098E  6E18               	movwf	LCD_WritetStr@str+1,c
  2996  000990  ECFF  F008         	call	_LCD_WritetStr	;wreg free
  2997                           
  2998                           ;main.c: 184: LCD_GotoXY(4,0);
  2999  000994  0E00               	movlw	0
  3000  000996  6E17               	movwf	LCD_GotoXY@ln,c
  3001  000998  0E04               	movlw	4
  3002  00099A  EC40  F00A         	call	_LCD_GotoXY
  3003                           
  3004                           ;main.c: 185: sprintf(print,"%d",(int)*(temp+9));
  3005  00099E  0EE2               	movlw	low main@print
  3006  0009A0  6E1E               	movwf	sprintf@sp,c
  3007  0009A2  0E02               	movlw	high main@print
  3008  0009A4  6E1F               	movwf	sprintf@sp+1,c
  3009  0009A6  0EF2               	movlw	low STR_63
  3010  0009A8  6E20               	movwf	sprintf@f,c
  3011  0009AA  0E7F               	movlw	high STR_63
  3012  0009AC  6E21               	movwf	sprintf@f+1,c
  3013  0009AE  0102               	movlb	2	; () banked
  3014  0009B0  EE20 F009          	lfsr	2,9
  3015  0009B4  51E7               	movf	main@temp& (0+255),w,b
  3016  0009B6  26D9               	addwf	fsr2l,f,c
  3017  0009B8  51E8               	movf	(main@temp+1)& (0+255),w,b
  3018  0009BA  22DA               	addwfc	fsr2h,f,c
  3019  0009BC  50DF               	movf	indf2,w,c
  3020  0009BE  6E47               	movwf	??_main& (0+255),c
  3021  0009C0  5047               	movf	??_main,w,c
  3022  0009C2  6E22               	movwf	?_sprintf+4,c
  3023  0009C4  6A23               	clrf	?_sprintf+5,c
  3024  0009C6  EC09  F000         	call	_sprintf	;wreg free
  3025                           
  3026                           ;main.c: 186: LCD_WritetStr(print);
  3027  0009CA  0EE2               	movlw	low main@print
  3028  0009CC  6E17               	movwf	LCD_WritetStr@str,c
  3029  0009CE  0E02               	movlw	high main@print
  3030  0009D0  6E18               	movwf	LCD_WritetStr@str+1,c
  3031  0009D2  ECFF  F008         	call	_LCD_WritetStr	;wreg free
  3032                           
  3033                           ;main.c: 202: ADtoPWM(temp);
  3034  0009D6  C2E7  F024         	movff	main@temp,ADtoPWM@AD
  3035  0009DA  C2E8  F025         	movff	main@temp+1,ADtoPWM@AD+1
  3036  0009DE  EC44  F007         	call	_ADtoPWM	;wreg free
  3037  0009E2  D7A1               	goto	l4789
  3038  0009E4                     __end_of_main:
  3039                           	opt stack 0
  3040                           tblptru	equ	0xFF8
  3041                           tblptrh	equ	0xFF7
  3042                           tblptrl	equ	0xFF6
  3043                           tablat	equ	0xFF5
  3044                           postinc0	equ	0xFEE
  3045                           wreg	equ	0xFE8
  3046                           postdec1	equ	0xFE5
  3047                           fsr1l	equ	0xFE1
  3048                           indf2	equ	0xFDF
  3049                           fsr2h	equ	0xFDA
  3050                           fsr2l	equ	0xFD9
  3051                           
  3052 ;; *************** function _timer_intrrupt_initinal *****************
  3053 ;; Defined at:
  3054 ;;		line 36 in file "harwave/initial.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;		None
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;		None
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  1    wreg      void 
  3061 ;; Registers used:
  3062 ;;		None
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3068 ;;      Params:         0       0       0       0       0       0       0
  3069 ;;      Locals:         0       0       0       0       0       0       0
  3070 ;;      Temps:          0       0       0       0       0       0       0
  3071 ;;      Totals:         0       0       0       0       0       0       0
  3072 ;;Total ram usage:        0 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    1
  3075 ;; This function calls:
  3076 ;;		Nothing
  3077 ;; This function is called by:
  3078 ;;		_main
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text1
  3083  0018C4                     __ptext1:
  3084                           	opt stack 0
  3085  0018C4                     _timer_intrrupt_initinal:
  3086                           	opt stack 29
  3087                           
  3088                           ;initial.c: 38: RCONbits.IPEN=1;
  3089                           
  3090                           ;incstack = 0
  3091  0018C4  8ED0               	bsf	4048,7,c	;volatile
  3092                           
  3093                           ;initial.c: 39: INTCONbits.GIE=1;
  3094  0018C6  8EF2               	bsf	intcon,7,c	;volatile
  3095                           
  3096                           ;initial.c: 40: INTCONbits.PEIE=1;
  3097  0018C8  8CF2               	bsf	intcon,6,c	;volatile
  3098                           
  3099                           ;initial.c: 41: INTCONbits.TMR0IE=0;
  3100  0018CA  9AF2               	bcf	intcon,5,c	;volatile
  3101                           
  3102                           ;initial.c: 42: INTCONbits.TMR0IF=0;
  3103  0018CC  94F2               	bcf	intcon,2,c	;volatile
  3104                           
  3105                           ;initial.c: 43: PIE1bits.TMR2IE=1;
  3106  0018CE  829D               	bsf	3997,1,c	;volatile
  3107                           
  3108                           ;initial.c: 44: PIR1bits.TMR2IF=0;
  3109  0018D0  929E               	bcf	3998,1,c	;volatile
  3110  0018D2  0012               	return		;funcret
  3111  0018D4                     __end_of_timer_intrrupt_initinal:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           intcon	equ	0xFF2
  3118                           postinc0	equ	0xFEE
  3119                           wreg	equ	0xFE8
  3120                           postdec1	equ	0xFE5
  3121                           fsr1l	equ	0xFE1
  3122                           indf2	equ	0xFDF
  3123                           fsr2h	equ	0xFDA
  3124                           fsr2l	equ	0xFD9
  3125                           
  3126 ;; *************** function _timer_2_initial *****************
  3127 ;; Defined at:
  3128 ;;		line 46 in file "harwave/initial.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3142 ;;      Params:         0       0       0       0       0       0       0
  3143 ;;      Locals:         0       0       0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0
  3145 ;;      Totals:         0       0       0       0       0       0       0
  3146 ;;Total ram usage:        0 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    1
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_main
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text2
  3157  00186A                     __ptext2:
  3158                           	opt stack 0
  3159  00186A                     _timer_2_initial:
  3160                           	opt stack 29
  3161                           
  3162                           ;initial.c: 48: PR2 = 249;
  3163                           
  3164                           ;incstack = 0
  3165  00186A  0EF9               	movlw	249
  3166  00186C  6ECB               	movwf	4043,c	;volatile
  3167                           
  3168                           ;initial.c: 49: T2CONbits.T2OUTPS=0b1001;
  3169  00186E  50CA               	movf	4042,w,c	;volatile
  3170  001870  0B87               	andlw	-121
  3171  001872  0948               	iorlw	72
  3172  001874  6ECA               	movwf	4042,c	;volatile
  3173                           
  3174                           ;initial.c: 50: T2CONbits.T2CKPS=0b01;
  3175  001876  50CA               	movf	4042,w,c	;volatile
  3176  001878  0BFC               	andlw	-4
  3177  00187A  0901               	iorlw	1
  3178  00187C  6ECA               	movwf	4042,c	;volatile
  3179                           
  3180                           ;initial.c: 51: T2CONbits.TMR2ON=1;
  3181  00187E  84CA               	bsf	4042,2,c	;volatile
  3182  001880  0012               	return		;funcret
  3183  001882                     __end_of_timer_2_initial:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           intcon	equ	0xFF2
  3190                           postinc0	equ	0xFEE
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           fsr1l	equ	0xFE1
  3194                           indf2	equ	0xFDF
  3195                           fsr2h	equ	0xFDA
  3196                           fsr2l	equ	0xFD9
  3197                           
  3198 ;; *************** function _strcpy *****************
  3199 ;; Defined at:
  3200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  to              2   17[COMRAM] PTR unsigned char 
  3203 ;;		 -> main@t(20), 
  3204 ;;  from            2   19[COMRAM] PTR const unsigned char 
  3205 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  cp              2   21[COMRAM] PTR unsigned char 
  3208 ;;		 -> main@t(20), 
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  2   17[COMRAM] PTR unsigned char 
  3211 ;; Registers used:
  3212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3218 ;;      Params:         4       0       0       0       0       0       0
  3219 ;;      Locals:         2       0       0       0       0       0       0
  3220 ;;      Temps:          0       0       0       0       0       0       0
  3221 ;;      Totals:         6       0       0       0       0       0       0
  3222 ;;Total ram usage:        6 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    1
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_main
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           	psect	text3
  3233  001670                     __ptext3:
  3234                           	opt stack 0
  3235  001670                     _strcpy:
  3236                           	opt stack 29
  3237                           
  3238                           ;incstack = 0
  3239  001670  C012  F016         	movff	strcpy@to,strcpy@cp
  3240  001674  C013  F017         	movff	strcpy@to+1,strcpy@cp+1
  3241  001678  D004               	goto	l4627
  3242  00167A                     l4625:
  3243  00167A  4A16               	infsnz	strcpy@cp,f,c
  3244  00167C  2A17               	incf	strcpy@cp+1,f,c
  3245  00167E  4A14               	infsnz	strcpy@from,f,c
  3246  001680  2A15               	incf	strcpy@from+1,f,c
  3247  001682                     l4627:
  3248  001682  C014  FFD9         	movff	strcpy@from,fsr2l
  3249  001686  C015  FFDA         	movff	strcpy@from+1,fsr2h
  3250  00168A  C016  FFE1         	movff	strcpy@cp,fsr1l
  3251  00168E  C017  FFE2         	movff	strcpy@cp+1,fsr1h
  3252  001692  CFDF FFE7          	movff	indf2,indf1
  3253  001696  50E7               	movf	indf1,w,c
  3254  001698  B4D8               	btfsc	status,2,c
  3255  00169A  0012               	return	
  3256  00169C  D7EE               	goto	l4625
  3257  00169E                     __end_of_strcpy:
  3258                           	opt stack 0
  3259                           tblptru	equ	0xFF8
  3260                           tblptrh	equ	0xFF7
  3261                           tblptrl	equ	0xFF6
  3262                           tablat	equ	0xFF5
  3263                           intcon	equ	0xFF2
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           indf1	equ	0xFE7
  3267                           postdec1	equ	0xFE5
  3268                           fsr1h	equ	0xFE2
  3269                           fsr1l	equ	0xFE1
  3270                           indf2	equ	0xFDF
  3271                           fsr2h	equ	0xFDA
  3272                           fsr2l	equ	0xFD9
  3273                           status	equ	0xFD8
  3274                           
  3275 ;; *************** function _oclillator_initial *****************
  3276 ;; Defined at:
  3277 ;;		line 13 in file "harwave/initial.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;		None
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		None
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3291 ;;      Params:         0       0       0       0       0       0       0
  3292 ;;      Locals:         0       0       0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0
  3294 ;;      Totals:         0       0       0       0       0       0       0
  3295 ;;Total ram usage:        0 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    1
  3298 ;; This function calls:
  3299 ;;		Nothing
  3300 ;; This function is called by:
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text4
  3306  001904                     __ptext4:
  3307                           	opt stack 0
  3308  001904                     _oclillator_initial:
  3309                           	opt stack 29
  3310                           
  3311                           ;initial.c: 15: OSCCONbits.IOFS=0;
  3312                           
  3313                           ;incstack = 0
  3314  001904  94D3               	bcf	4051,2,c	;volatile
  3315                           
  3316                           ;initial.c: 16: OSCCONbits.SCS0=0;
  3317  001906  90D3               	bcf	4051,0,c	;volatile
  3318                           
  3319                           ;initial.c: 17: OSCCONbits.SCS1=0;
  3320  001908  92D3               	bcf	4051,1,c	;volatile
  3321  00190A  0012               	return		;funcret
  3322  00190C                     __end_of_oclillator_initial:
  3323                           	opt stack 0
  3324                           tblptru	equ	0xFF8
  3325                           tblptrh	equ	0xFF7
  3326                           tblptrl	equ	0xFF6
  3327                           tablat	equ	0xFF5
  3328                           intcon	equ	0xFF2
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           indf1	equ	0xFE7
  3332                           postdec1	equ	0xFE5
  3333                           fsr1h	equ	0xFE2
  3334                           fsr1l	equ	0xFE1
  3335                           indf2	equ	0xFDF
  3336                           fsr2h	equ	0xFDA
  3337                           fsr2l	equ	0xFD9
  3338                           status	equ	0xFD8
  3339                           
  3340 ;; *************** function _memset *****************
  3341 ;; Defined at:
  3342 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memset.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  p1              2   17[COMRAM] PTR void 
  3345 ;;		 -> strEsp8266_Fram_Record(52), 
  3346 ;;  c               2   19[COMRAM] int 
  3347 ;;  n               2   21[COMRAM] unsigned int 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  p               2   23[COMRAM] PTR unsigned char 
  3350 ;;		 -> strEsp8266_Fram_Record(52), 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  2   17[COMRAM] PTR void 
  3353 ;; Registers used:
  3354 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3360 ;;      Params:         6       0       0       0       0       0       0
  3361 ;;      Locals:         2       0       0       0       0       0       0
  3362 ;;      Temps:          0       0       0       0       0       0       0
  3363 ;;      Totals:         8       0       0       0       0       0       0
  3364 ;;Total ram usage:        8 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    1
  3367 ;; This function calls:
  3368 ;;		Nothing
  3369 ;; This function is called by:
  3370 ;;		_main
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text5
  3375  0016CC                     __ptext5:
  3376                           	opt stack 0
  3377  0016CC                     _memset:
  3378                           	opt stack 29
  3379                           
  3380                           ;incstack = 0
  3381  0016CC  C012  F018         	movff	memset@p1,memset@p
  3382  0016D0  C013  F019         	movff	memset@p1+1,memset@p+1
  3383  0016D4  D008               	goto	l4621
  3384  0016D6                     l4617:
  3385  0016D6  C018  FFD9         	movff	memset@p,fsr2l
  3386  0016DA  C019  FFDA         	movff	memset@p+1,fsr2h
  3387  0016DE  C014  FFDF         	movff	memset@c,indf2
  3388  0016E2  4A18               	infsnz	memset@p,f,c
  3389  0016E4  2A19               	incf	memset@p+1,f,c
  3390  0016E6                     l4621:
  3391  0016E6  0616               	decf	memset@n,f,c
  3392  0016E8  A0D8               	btfss	status,0,c
  3393  0016EA  0617               	decf	memset@n+1,f,c
  3394  0016EC  2816               	incf	memset@n,w,c
  3395  0016EE  E1F3               	bnz	l4617
  3396  0016F0  2817               	incf	memset@n+1,w,c
  3397  0016F2  B4D8               	btfsc	status,2,c
  3398  0016F4  0012               	return	
  3399  0016F6  D7EF               	goto	l4617
  3400  0016F8                     __end_of_memset:
  3401                           	opt stack 0
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           intcon	equ	0xFF2
  3407                           postinc0	equ	0xFEE
  3408                           wreg	equ	0xFE8
  3409                           indf1	equ	0xFE7
  3410                           postdec1	equ	0xFE5
  3411                           fsr1h	equ	0xFE2
  3412                           fsr1l	equ	0xFE1
  3413                           indf2	equ	0xFDF
  3414                           fsr2h	equ	0xFDA
  3415                           fsr2l	equ	0xFD9
  3416                           status	equ	0xFD8
  3417                           
  3418 ;; *************** function _initial_UART *****************
  3419 ;; Defined at:
  3420 ;;		line 36 in file "harwave/UART.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;		None
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;		None
  3425 ;; Return value:  Size  Location     Type
  3426 ;;                  1    wreg      void 
  3427 ;; Registers used:
  3428 ;;		wreg, status,2
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3434 ;;      Params:         0       0       0       0       0       0       0
  3435 ;;      Locals:         0       0       0       0       0       0       0
  3436 ;;      Temps:          0       0       0       0       0       0       0
  3437 ;;      Totals:         0       0       0       0       0       0       0
  3438 ;;Total ram usage:        0 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    1
  3441 ;; This function calls:
  3442 ;;		Nothing
  3443 ;; This function is called by:
  3444 ;;		_main
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text6
  3449  00179A                     __ptext6:
  3450                           	opt stack 0
  3451  00179A                     _initial_UART:
  3452                           	opt stack 29
  3453                           
  3454                           ;UART.c: 37: TXSTAbits.SYNC=0;
  3455                           
  3456                           ;incstack = 0
  3457  00179A  98AC               	bcf	4012,4,c	;volatile
  3458                           
  3459                           ;UART.c: 38: TXSTAbits.TX9=0;
  3460  00179C  9CAC               	bcf	4012,6,c	;volatile
  3461                           
  3462                           ;UART.c: 39: RCSTAbits.SPEN=1;
  3463  00179E  8EAB               	bsf	4011,7,c	;volatile
  3464                           
  3465                           ;UART.c: 40: PIE1bits.TX1IE=0;
  3466  0017A0  989D               	bcf	3997,4,c	;volatile
  3467                           
  3468                           ;UART.c: 41: TXSTAbits.TXEN=1;
  3469  0017A2  8AAC               	bsf	4012,5,c	;volatile
  3470                           
  3471                           ;UART.c: 43: RCONbits.IPEN=1;
  3472  0017A4  8ED0               	bsf	4048,7,c	;volatile
  3473                           
  3474                           ;UART.c: 44: INTCONbits.GIE=1;
  3475  0017A6  8EF2               	bsf	intcon,7,c	;volatile
  3476                           
  3477                           ;UART.c: 45: INTCONbits.PEIE=1;
  3478  0017A8  8CF2               	bsf	intcon,6,c	;volatile
  3479                           
  3480                           ;UART.c: 47: RCSTAbits.CREN=1;
  3481  0017AA  88AB               	bsf	4011,4,c	;volatile
  3482                           
  3483                           ;UART.c: 48: PIE1bits.RCIE=1;
  3484  0017AC  8A9D               	bsf	3997,5,c	;volatile
  3485                           
  3486                           ;UART.c: 49: RCSTAbits.RC9 = 0;
  3487  0017AE  9CAB               	bcf	4011,6,c	;volatile
  3488                           
  3489                           ;UART.c: 50: TXSTAbits.BRGH=1;
  3490  0017B0  84AC               	bsf	4012,2,c	;volatile
  3491                           
  3492                           ;UART.c: 51: BAUDCONbits.BRG16=1;
  3493  0017B2  86B8               	bsf	4024,3,c	;volatile
  3494                           
  3495                           ;UART.c: 52: SPBRGH=0;
  3496  0017B4  0E00               	movlw	0
  3497  0017B6  6EB0               	movwf	4016,c	;volatile
  3498                           
  3499                           ;UART.c: 53: SPBRG=86;
  3500  0017B8  0E56               	movlw	86
  3501  0017BA  6EAF               	movwf	4015,c	;volatile
  3502  0017BC  0012               	return		;funcret
  3503  0017BE                     __end_of_initial_UART:
  3504                           	opt stack 0
  3505                           tblptru	equ	0xFF8
  3506                           tblptrh	equ	0xFF7
  3507                           tblptrl	equ	0xFF6
  3508                           tablat	equ	0xFF5
  3509                           intcon	equ	0xFF2
  3510                           postinc0	equ	0xFEE
  3511                           wreg	equ	0xFE8
  3512                           indf1	equ	0xFE7
  3513                           postdec1	equ	0xFE5
  3514                           fsr1h	equ	0xFE2
  3515                           fsr1l	equ	0xFE1
  3516                           indf2	equ	0xFDF
  3517                           fsr2h	equ	0xFDA
  3518                           fsr2l	equ	0xFD9
  3519                           status	equ	0xFD8
  3520                           
  3521 ;; *************** function _finger_reset *****************
  3522 ;; Defined at:
  3523 ;;		line 150 in file "main.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;		None
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;		None
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		None
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3537 ;;      Params:         0       0       0       0       0       0       0
  3538 ;;      Locals:         0       0       0       0       0       0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0
  3540 ;;      Totals:         0       0       0       0       0       0       0
  3541 ;;Total ram usage:        0 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    1
  3544 ;; This function calls:
  3545 ;;		Nothing
  3546 ;; This function is called by:
  3547 ;;		_main
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text7
  3552  001914                     __ptext7:
  3553                           	opt stack 0
  3554  001914                     _finger_reset:
  3555                           	opt stack 29
  3556                           
  3557                           ;incstack = 0
  3558  001914  0012               	return		;funcret
  3559  001916                     __end_of_finger_reset:
  3560                           	opt stack 0
  3561                           tblptru	equ	0xFF8
  3562                           tblptrh	equ	0xFF7
  3563                           tblptrl	equ	0xFF6
  3564                           tablat	equ	0xFF5
  3565                           intcon	equ	0xFF2
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           indf1	equ	0xFE7
  3569                           postdec1	equ	0xFE5
  3570                           fsr1h	equ	0xFE2
  3571                           fsr1l	equ	0xFE1
  3572                           indf2	equ	0xFDF
  3573                           fsr2h	equ	0xFDA
  3574                           fsr2l	equ	0xFD9
  3575                           status	equ	0xFD8
  3576                           
  3577 ;; *************** function _PCA9685_init *****************
  3578 ;; Defined at:
  3579 ;;		line 19 in file "harwave/initial.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;		None
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, status,2, status,0, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3593 ;;      Params:         0       0       0       0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0
  3596 ;;      Totals:         0       0       0       0       0       0       0
  3597 ;;Total ram usage:        0 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    6
  3600 ;; This function calls:
  3601 ;;		_IIC_Init
  3602 ;;		_PCA9685_writeOneByte
  3603 ;; This function is called by:
  3604 ;;		_main
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text8
  3609  0017BE                     __ptext8:
  3610                           	opt stack 0
  3611  0017BE                     _PCA9685_init:
  3612                           	opt stack 24
  3613                           
  3614                           ;initial.c: 20: IIC_Init();
  3615                           
  3616                           ;incstack = 0
  3617  0017BE  EC15  F00C         	call	_IIC_Init	;wreg free
  3618                           
  3619                           ;initial.c: 21: PCA9685_writeOneByte(0x00,0x11);
  3620  0017C2  0E11               	movlw	17
  3621  0017C4  6E18               	movwf	PCA9685_writeOneByte@data,c
  3622  0017C6  0E00               	movlw	0
  3623  0017C8  ECEC  F00A         	call	_PCA9685_writeOneByte
  3624                           
  3625                           ;initial.c: 22: PCA9685_writeOneByte(0xFE,(25000000/4096/267)-1);
  3626  0017CC  0E15               	movlw	21
  3627  0017CE  6E18               	movwf	PCA9685_writeOneByte@data,c
  3628  0017D0  0EFE               	movlw	254
  3629  0017D2  ECEC  F00A         	call	_PCA9685_writeOneByte
  3630                           
  3631                           ;initial.c: 23: PCA9685_writeOneByte(0x00,0x01);
  3632  0017D6  0E01               	movlw	1
  3633  0017D8  6E18               	movwf	PCA9685_writeOneByte@data,c
  3634  0017DA  0E00               	movlw	0
  3635  0017DC  ECEC  F00A         	call	_PCA9685_writeOneByte
  3636  0017E0  0012               	return		;funcret
  3637  0017E2                     __end_of_PCA9685_init:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           intcon	equ	0xFF2
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           indf1	equ	0xFE7
  3647                           postdec1	equ	0xFE5
  3648                           fsr1h	equ	0xFE2
  3649                           fsr1l	equ	0xFE1
  3650                           indf2	equ	0xFDF
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655 ;; *************** function _IIC_Init *****************
  3656 ;; Defined at:
  3657 ;;		line 5 in file "harwave/softIIC.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;		None
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;		None
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      void 
  3664 ;; Registers used:
  3665 ;;		wreg, status,2, status,0, cstack
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3671 ;;      Params:         0       0       0       0       0       0       0
  3672 ;;      Locals:         0       0       0       0       0       0       0
  3673 ;;      Temps:          0       0       0       0       0       0       0
  3674 ;;      Totals:         0       0       0       0       0       0       0
  3675 ;;Total ram usage:        0 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    3
  3678 ;; This function calls:
  3679 ;;		_delay_us
  3680 ;; This function is called by:
  3681 ;;		_PCA9685_init
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text9
  3686  00182A                     __ptext9:
  3687                           	opt stack 0
  3688  00182A                     _IIC_Init:
  3689                           	opt stack 26
  3690                           
  3691                           ;softIIC.c: 8: TRISBbits.TRISB1 = 0;
  3692                           
  3693                           ;incstack = 0
  3694  00182A  9293               	bcf	3987,1,c	;volatile
  3695                           
  3696                           ;softIIC.c: 9: TRISBbits.TRISB0 = 0;
  3697  00182C  9093               	bcf	3987,0,c	;volatile
  3698                           
  3699                           ;softIIC.c: 12: PORTBbits.RB1 = 1;
  3700  00182E  8281               	bsf	3969,1,c	;volatile
  3701                           
  3702                           ;softIIC.c: 13: delay_us(2);
  3703  001830  0E00               	movlw	0
  3704  001832  6E14               	movwf	delay_us@us+1,c
  3705  001834  0E02               	movlw	2
  3706  001836  6E13               	movwf	delay_us@us,c
  3707  001838  EC57  F00C         	call	_delay_us	;wreg free
  3708                           
  3709                           ;softIIC.c: 14: PORTBbits.RB0 = 1;
  3710  00183C  8081               	bsf	3969,0,c	;volatile
  3711                           
  3712                           ;softIIC.c: 15: delay_us(2);
  3713  00183E  0E00               	movlw	0
  3714  001840  6E14               	movwf	delay_us@us+1,c
  3715  001842  0E02               	movlw	2
  3716  001844  6E13               	movwf	delay_us@us,c
  3717  001846  EC57  F00C         	call	_delay_us	;wreg free
  3718  00184A  0012               	return		;funcret
  3719  00184C                     __end_of_IIC_Init:
  3720                           	opt stack 0
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           intcon	equ	0xFF2
  3726                           postinc0	equ	0xFEE
  3727                           wreg	equ	0xFE8
  3728                           indf1	equ	0xFE7
  3729                           postdec1	equ	0xFE5
  3730                           fsr1h	equ	0xFE2
  3731                           fsr1l	equ	0xFE1
  3732                           indf2	equ	0xFDF
  3733                           fsr2h	equ	0xFDA
  3734                           fsr2l	equ	0xFD9
  3735                           status	equ	0xFD8
  3736                           
  3737 ;; *************** function _LCD_WritetStr *****************
  3738 ;; Defined at:
  3739 ;;		line 119 in file "harwave/lcd.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;  str             2   22[COMRAM] PTR const unsigned char 
  3742 ;;		 -> main@print(5), STR_62(6), 
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;  i               1   26[COMRAM] unsigned char 
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1    wreg      void 
  3747 ;; Registers used:
  3748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3754 ;;      Params:         2       0       0       0       0       0       0
  3755 ;;      Locals:         1       0       0       0       0       0       0
  3756 ;;      Temps:          2       0       0       0       0       0       0
  3757 ;;      Totals:         5       0       0       0       0       0       0
  3758 ;;Total ram usage:        5 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; Hardware stack levels required when called:    4
  3761 ;; This function calls:
  3762 ;;		_LCD_WriteData
  3763 ;; This function is called by:
  3764 ;;		_main
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           	psect	text10
  3769  0011FE                     __ptext10:
  3770                           	opt stack 0
  3771  0011FE                     _LCD_WritetStr:
  3772                           	opt stack 26
  3773                           
  3774                           ;lcd.c: 121: u8 i=0;
  3775                           
  3776                           ;incstack = 0
  3777  0011FE  0E00               	movlw	0
  3778  001200  6E1B               	movwf	LCD_WritetStr@i,c
  3779                           
  3780                           ;lcd.c: 124: while (str[i])
  3781  001202  D01D               	goto	l4533
  3782  001204                     l4529:
  3783                           
  3784                           ;lcd.c: 125: {
  3785                           ;lcd.c: 127: LCD_WriteData(str[i++]);
  3786  001204  501B               	movf	LCD_WritetStr@i,w,c
  3787  001206  0D01               	mullw	1
  3788  001208  C017  F019         	movff	LCD_WritetStr@str,??_LCD_WritetStr
  3789  00120C  C018  F01A         	movff	LCD_WritetStr@str+1,??_LCD_WritetStr+1
  3790  001210  50F3               	movf	prodl,w,c
  3791  001212  2619               	addwf	??_LCD_WritetStr,f,c
  3792  001214  50F4               	movf	prodh,w,c
  3793  001216  221A               	addwfc	??_LCD_WritetStr+1,f,c
  3794  001218  C019  FFF6         	movff	??_LCD_WritetStr,tblptrl
  3795  00121C  C01A  FFF7         	movff	??_LCD_WritetStr+1,tblptrh
  3796  001220  6AF8               	clrf	tblptru,c
  3797  001222  0E05               	movlw	(high __ramtop+-1)
  3798  001224  64F7               	cpfsgt	tblptrh,c
  3799  001226  D003               	bra	u4417
  3800  001228  0008               	tblrd		*
  3801  00122A  50F5               	movf	tablat,w,c
  3802  00122C  D005               	bra	u4410
  3803  00122E                     u4417:
  3804  00122E  CFF6 FFE9          	movff	tblptrl,fsr0l
  3805  001232  CFF7 FFEA          	movff	tblptrh,fsr0h
  3806  001236  50EF               	movf	indf0,w,c
  3807  001238                     u4410:
  3808  001238  EC92  F00B         	call	_LCD_WriteData
  3809  00123C  2A1B               	incf	LCD_WritetStr@i,f,c
  3810  00123E                     l4533:
  3811  00123E  501B               	movf	LCD_WritetStr@i,w,c
  3812  001240  0D01               	mullw	1
  3813  001242  C017  F019         	movff	LCD_WritetStr@str,??_LCD_WritetStr
  3814  001246  C018  F01A         	movff	LCD_WritetStr@str+1,??_LCD_WritetStr+1
  3815  00124A  50F3               	movf	prodl,w,c
  3816  00124C  2619               	addwf	??_LCD_WritetStr,f,c
  3817  00124E  50F4               	movf	prodh,w,c
  3818  001250  221A               	addwfc	??_LCD_WritetStr+1,f,c
  3819  001252  C019  FFF6         	movff	??_LCD_WritetStr,tblptrl
  3820  001256  C01A  FFF7         	movff	??_LCD_WritetStr+1,tblptrh
  3821  00125A  6AF8               	clrf	tblptru,c
  3822  00125C  0E05               	movlw	(high __ramtop+-1)
  3823  00125E  64F7               	cpfsgt	tblptrh,c
  3824  001260  D003               	bra	u4427
  3825  001262  0008               	tblrd		*
  3826  001264  50F5               	movf	tablat,w,c
  3827  001266  D005               	bra	u4420
  3828  001268                     u4427:
  3829  001268  CFF6 FFE9          	movff	tblptrl,fsr0l
  3830  00126C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3831  001270  50EF               	movf	indf0,w,c
  3832  001272                     u4420:
  3833  001272  0900               	iorlw	0
  3834  001274  B4D8               	btfsc	status,2,c
  3835  001276  0012               	return	
  3836  001278  D7C5               	goto	l4529
  3837  00127A                     __end_of_LCD_WritetStr:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           tblptrh	equ	0xFF7
  3841                           tblptrl	equ	0xFF6
  3842                           tablat	equ	0xFF5
  3843                           prodh	equ	0xFF4
  3844                           prodl	equ	0xFF3
  3845                           intcon	equ	0xFF2
  3846                           indf0	equ	0xFEF
  3847                           postinc0	equ	0xFEE
  3848                           fsr0h	equ	0xFEA
  3849                           fsr0l	equ	0xFE9
  3850                           wreg	equ	0xFE8
  3851                           indf1	equ	0xFE7
  3852                           postdec1	equ	0xFE5
  3853                           fsr1h	equ	0xFE2
  3854                           fsr1l	equ	0xFE1
  3855                           indf2	equ	0xFDF
  3856                           fsr2h	equ	0xFDA
  3857                           fsr2l	equ	0xFD9
  3858                           status	equ	0xFD8
  3859                           
  3860 ;; *************** function _LCD_WriteData *****************
  3861 ;; Defined at:
  3862 ;;		line 105 in file "harwave/lcd.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  ch              1    wreg     unsigned char 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  ch              1   21[COMRAM] unsigned char 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  1    wreg      void 
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3876 ;;      Params:         0       0       0       0       0       0       0
  3877 ;;      Locals:         1       0       0       0       0       0       0
  3878 ;;      Temps:          0       0       0       0       0       0       0
  3879 ;;      Totals:         1       0       0       0       0       0       0
  3880 ;;Total ram usage:        1 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    3
  3883 ;; This function calls:
  3884 ;;		_LCDWriteNibble
  3885 ;;		_delay_ms
  3886 ;; This function is called by:
  3887 ;;		_LCD_WritetStr
  3888 ;;		_LCD_CreateFont
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text11
  3893  001724                     __ptext11:
  3894                           	opt stack 0
  3895  001724                     _LCD_WriteData:
  3896                           	opt stack 26
  3897                           
  3898                           ;incstack = 0
  3899                           ;LCD_WriteData@ch stored from wreg
  3900  001724  6E16               	movwf	LCD_WriteData@ch,c
  3901                           
  3902                           ;lcd.c: 107: delay_ms(5);
  3903  001726  0E00               	movlw	0
  3904  001728  6E15               	movwf	delay_ms@ms+1,c
  3905  00172A  0E05               	movlw	5
  3906  00172C  6E14               	movwf	delay_ms@ms,c
  3907  00172E  EC41  F00C         	call	_delay_ms	;wreg free
  3908                           
  3909                           ;lcd.c: 110: LCDWriteNibble(ch,1);
  3910  001732  0E01               	movlw	1
  3911  001734  6E12               	movwf	LCDWriteNibble@rs,c
  3912  001736  5016               	movf	LCD_WriteData@ch,w,c
  3913  001738  EC4F  F00B         	call	_LCDWriteNibble
  3914                           
  3915                           ;lcd.c: 113: ch = (ch << 4);
  3916  00173C  3816               	swapf	LCD_WriteData@ch,w,c
  3917  00173E  0BF0               	andlw	240
  3918  001740  6E16               	movwf	LCD_WriteData@ch,c
  3919                           
  3920                           ;lcd.c: 116: LCDWriteNibble(ch,1);
  3921  001742  0E01               	movlw	1
  3922  001744  6E12               	movwf	LCDWriteNibble@rs,c
  3923  001746  5016               	movf	LCD_WriteData@ch,w,c
  3924  001748  EC4F  F00B         	call	_LCDWriteNibble
  3925  00174C  0012               	return		;funcret
  3926  00174E                     __end_of_LCD_WriteData:
  3927                           	opt stack 0
  3928                           tblptru	equ	0xFF8
  3929                           tblptrh	equ	0xFF7
  3930                           tblptrl	equ	0xFF6
  3931                           tablat	equ	0xFF5
  3932                           prodh	equ	0xFF4
  3933                           prodl	equ	0xFF3
  3934                           intcon	equ	0xFF2
  3935                           indf0	equ	0xFEF
  3936                           postinc0	equ	0xFEE
  3937                           fsr0h	equ	0xFEA
  3938                           fsr0l	equ	0xFE9
  3939                           wreg	equ	0xFE8
  3940                           indf1	equ	0xFE7
  3941                           postdec1	equ	0xFE5
  3942                           fsr1h	equ	0xFE2
  3943                           fsr1l	equ	0xFE1
  3944                           indf2	equ	0xFDF
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function _LCD_Initialize *****************
  3950 ;; Defined at:
  3951 ;;		line 4 in file "harwave/lcd.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;		None
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3965 ;;      Params:         0       0       0       0       0       0       0
  3966 ;;      Locals:         0       0       0       0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0
  3968 ;;      Totals:         0       0       0       0       0       0       0
  3969 ;;Total ram usage:        0 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    4
  3972 ;; This function calls:
  3973 ;;		_LCD_WaitBusy
  3974 ;;		_LCD_WriteCmd
  3975 ;;		_delay_ms
  3976 ;; This function is called by:
  3977 ;;		_main
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           	psect	text12
  3982  000F46                     __ptext12:
  3983                           	opt stack 0
  3984  000F46                     _LCD_Initialize:
  3985                           	opt stack 26
  3986                           
  3987                           ;lcd.c: 7: PORTD = 0;
  3988                           
  3989                           ;incstack = 0
  3990  000F46  0E00               	movlw	0
  3991  000F48  6E83               	movwf	3971,c	;volatile
  3992                           
  3993                           ;lcd.c: 9: TRISD = 0;
  3994  000F4A  0E00               	movlw	0
  3995  000F4C  6E95               	movwf	3989,c	;volatile
  3996                           
  3997                           ;lcd.c: 10: delay_ms(15);
  3998  000F4E  0E00               	movlw	0
  3999  000F50  6E15               	movwf	delay_ms@ms+1,c
  4000  000F52  0E0F               	movlw	15
  4001  000F54  6E14               	movwf	delay_ms@ms,c
  4002  000F56  EC41  F00C         	call	_delay_ms	;wreg free
  4003                           
  4004                           ;lcd.c: 12: LCD_WriteCmd(0X30);
  4005  000F5A  0E30               	movlw	48
  4006  000F5C  EC9B  F00A         	call	_LCD_WriteCmd
  4007                           
  4008                           ;lcd.c: 13: delay_ms(5);
  4009  000F60  0E00               	movlw	0
  4010  000F62  6E15               	movwf	delay_ms@ms+1,c
  4011  000F64  0E05               	movlw	5
  4012  000F66  6E14               	movwf	delay_ms@ms,c
  4013  000F68  EC41  F00C         	call	_delay_ms	;wreg free
  4014                           
  4015                           ;lcd.c: 15: LCD_WriteCmd(0X30);
  4016  000F6C  0E30               	movlw	48
  4017  000F6E  EC9B  F00A         	call	_LCD_WriteCmd
  4018                           
  4019                           ;lcd.c: 16: delay_ms(5);
  4020  000F72  0E00               	movlw	0
  4021  000F74  6E15               	movwf	delay_ms@ms+1,c
  4022  000F76  0E05               	movlw	5
  4023  000F78  6E14               	movwf	delay_ms@ms,c
  4024  000F7A  EC41  F00C         	call	_delay_ms	;wreg free
  4025                           
  4026                           ;lcd.c: 18: LCD_WriteCmd(0x32);
  4027  000F7E  0E32               	movlw	50
  4028  000F80  EC9B  F00A         	call	_LCD_WriteCmd
  4029  000F84                     l4493:
  4030  000F84  EC20  F00B         	call	_LCD_WaitBusy	;wreg free
  4031  000F88  0900               	iorlw	0
  4032  000F8A  A4D8               	btfss	status,2,c
  4033  000F8C  D7FB               	goto	l4493
  4034                           
  4035                           ;lcd.c: 22: LCD_WriteCmd(0x28);
  4036  000F8E  0E28               	movlw	40
  4037  000F90  EC9B  F00A         	call	_LCD_WriteCmd
  4038  000F94                     l4497:
  4039  000F94  EC20  F00B         	call	_LCD_WaitBusy	;wreg free
  4040  000F98  0900               	iorlw	0
  4041  000F9A  A4D8               	btfss	status,2,c
  4042  000F9C  D7FB               	goto	l4497
  4043                           
  4044                           ;lcd.c: 25: LCD_WriteCmd(0b00001011&0b00001101&0b00001110);
  4045  000F9E  0E08               	movlw	8
  4046  000FA0  EC9B  F00A         	call	_LCD_WriteCmd
  4047  000FA4                     l4501:
  4048  000FA4  EC20  F00B         	call	_LCD_WaitBusy	;wreg free
  4049  000FA8  0900               	iorlw	0
  4050  000FAA  A4D8               	btfss	status,2,c
  4051  000FAC  D7FB               	goto	l4501
  4052                           
  4053                           ;lcd.c: 28: LCD_WriteCmd(0b00001111&0b00001101&0b00001110);
  4054  000FAE  0E0C               	movlw	12
  4055  000FB0  EC9B  F00A         	call	_LCD_WriteCmd
  4056  000FB4                     l4505:
  4057  000FB4  EC20  F00B         	call	_LCD_WaitBusy	;wreg free
  4058  000FB8  0900               	iorlw	0
  4059  000FBA  A4D8               	btfss	status,2,c
  4060  000FBC  D7FB               	goto	l4505
  4061                           
  4062                           ;lcd.c: 31: LCD_WriteCmd(0x01);
  4063  000FBE  0E01               	movlw	1
  4064  000FC0  EC9B  F00A         	call	_LCD_WriteCmd
  4065                           
  4066                           ;lcd.c: 34: LCD_WriteCmd(0x06);
  4067  000FC4  0E06               	movlw	6
  4068  000FC6  EC9B  F00A         	call	_LCD_WriteCmd
  4069  000FCA                     l4509:
  4070  000FCA  EC20  F00B         	call	_LCD_WaitBusy	;wreg free
  4071  000FCE  0900               	iorlw	0
  4072  000FD0  A4D8               	btfss	status,2,c
  4073  000FD2  D7FB               	goto	l4509
  4074                           
  4075                           ;lcd.c: 37: LCD_WriteCmd(0x01);
  4076  000FD4  0E01               	movlw	1
  4077  000FD6  EC9B  F00A         	call	_LCD_WriteCmd
  4078  000FDA  0012               	return		;funcret
  4079  000FDC                     __end_of_LCD_Initialize:
  4080                           	opt stack 0
  4081                           tblptru	equ	0xFF8
  4082                           tblptrh	equ	0xFF7
  4083                           tblptrl	equ	0xFF6
  4084                           tablat	equ	0xFF5
  4085                           prodh	equ	0xFF4
  4086                           prodl	equ	0xFF3
  4087                           intcon	equ	0xFF2
  4088                           indf0	equ	0xFEF
  4089                           postinc0	equ	0xFEE
  4090                           fsr0h	equ	0xFEA
  4091                           fsr0l	equ	0xFE9
  4092                           wreg	equ	0xFE8
  4093                           indf1	equ	0xFE7
  4094                           postdec1	equ	0xFE5
  4095                           fsr1h	equ	0xFE2
  4096                           fsr1l	equ	0xFE1
  4097                           indf2	equ	0xFDF
  4098                           fsr2h	equ	0xFDA
  4099                           fsr2l	equ	0xFD9
  4100                           status	equ	0xFD8
  4101                           
  4102 ;; *************** function _LCD_WaitBusy *****************
  4103 ;; Defined at:
  4104 ;;		line 138 in file "harwave/lcd.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;		None
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;		None
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  1    wreg      unsigned char 
  4111 ;; Registers used:
  4112 ;;		wreg, status,2, status,0, cstack
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4118 ;;      Params:         0       0       0       0       0       0       0
  4119 ;;      Locals:         0       0       0       0       0       0       0
  4120 ;;      Temps:          0       0       0       0       0       0       0
  4121 ;;      Totals:         0       0       0       0       0       0       0
  4122 ;;Total ram usage:        0 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    3
  4125 ;; This function calls:
  4126 ;;		_delayFor18Tcy
  4127 ;; This function is called by:
  4128 ;;		_LCD_Initialize
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text13
  4133  001640                     __ptext13:
  4134                           	opt stack 0
  4135  001640                     _LCD_WaitBusy:
  4136                           	opt stack 26
  4137                           
  4138                           ;lcd.c: 140: PORTDbits.RD0 = 0;
  4139                           
  4140                           ;incstack = 0
  4141  001640  9083               	bcf	3971,0,c	;volatile
  4142                           
  4143                           ;lcd.c: 141: PORTDbits.RD1 = 1;
  4144  001642  8283               	bsf	3971,1,c	;volatile
  4145                           
  4146                           ;lcd.c: 142: delayFor18Tcy();
  4147  001644  EC86  F00C         	call	_delayFor18Tcy	;wreg free
  4148                           
  4149                           ;lcd.c: 143: PORTDbits.RD2 = 1;
  4150  001648  8483               	bsf	3971,2,c	;volatile
  4151                           
  4152                           ;lcd.c: 144: delayFor18Tcy();
  4153  00164A  EC86  F00C         	call	_delayFor18Tcy	;wreg free
  4154                           
  4155                           ;lcd.c: 146: TRISD |= 0x80;
  4156  00164E  8E95               	bsf	3989,7,c	;volatile
  4157                           
  4158                           ;lcd.c: 147: if(PORTD&0x80)
  4159  001650  AE83               	btfss	3971,7,c	;volatile
  4160  001652  D007               	goto	l172
  4161                           
  4162                           ;lcd.c: 148: {
  4163                           ;lcd.c: 149: PORTDbits.RD2 = 0;
  4164  001654  9483               	bcf	3971,2,c	;volatile
  4165                           
  4166                           ;lcd.c: 150: PORTDbits.RD2 = 1;
  4167  001656  8483               	bsf	3971,2,c	;volatile
  4168                           
  4169                           ;lcd.c: 151: PORTDbits.RD2 = 0;
  4170  001658  9483               	bcf	3971,2,c	;volatile
  4171                           
  4172                           ;lcd.c: 152: PORTDbits.RD1 = 0;
  4173  00165A  9283               	bcf	3971,1,c	;volatile
  4174                           
  4175                           ;lcd.c: 153: TRISD &=~(1<<7);
  4176  00165C  9E95               	bcf	3989,7,c	;volatile
  4177                           
  4178                           ;lcd.c: 154: return 1;
  4179  00165E  0E01               	movlw	1
  4180                           
  4181                           ;lcd.c: 155: }
  4182  001660  0012               	return	
  4183  001662                     l172:
  4184                           
  4185                           ;lcd.c: 156: else
  4186                           ;lcd.c: 157: {
  4187                           ;lcd.c: 158: PORTDbits.RD2 = 0;
  4188  001662  9483               	bcf	3971,2,c	;volatile
  4189                           
  4190                           ;lcd.c: 159: PORTDbits.RD2 = 1;
  4191  001664  8483               	bsf	3971,2,c	;volatile
  4192                           
  4193                           ;lcd.c: 160: PORTDbits.RD2 = 0;
  4194  001666  9483               	bcf	3971,2,c	;volatile
  4195                           
  4196                           ;lcd.c: 161: PORTDbits.RD1 = 0;
  4197  001668  9283               	bcf	3971,1,c	;volatile
  4198                           
  4199                           ;lcd.c: 162: TRISD &=~(1<<7);
  4200  00166A  9E95               	bcf	3989,7,c	;volatile
  4201                           
  4202                           ;lcd.c: 163: return 0;
  4203  00166C  0E00               	movlw	0
  4204  00166E  0012               	return	
  4205  001670                     __end_of_LCD_WaitBusy:
  4206                           	opt stack 0
  4207                           tblptru	equ	0xFF8
  4208                           tblptrh	equ	0xFF7
  4209                           tblptrl	equ	0xFF6
  4210                           tablat	equ	0xFF5
  4211                           prodh	equ	0xFF4
  4212                           prodl	equ	0xFF3
  4213                           intcon	equ	0xFF2
  4214                           indf0	equ	0xFEF
  4215                           postinc0	equ	0xFEE
  4216                           fsr0h	equ	0xFEA
  4217                           fsr0l	equ	0xFE9
  4218                           wreg	equ	0xFE8
  4219                           indf1	equ	0xFE7
  4220                           postdec1	equ	0xFE5
  4221                           fsr1h	equ	0xFE2
  4222                           fsr1l	equ	0xFE1
  4223                           indf2	equ	0xFDF
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function _delayFor18Tcy *****************
  4229 ;; Defined at:
  4230 ;;		line 18 in file "harwave/mydelay.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;		None
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      void 
  4237 ;; Registers used:
  4238 ;;		wreg, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4244 ;;      Params:         0       0       0       0       0       0       0
  4245 ;;      Locals:         0       0       0       0       0       0       0
  4246 ;;      Temps:          0       0       0       0       0       0       0
  4247 ;;      Totals:         0       0       0       0       0       0       0
  4248 ;;Total ram usage:        0 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    2
  4251 ;; This function calls:
  4252 ;;		_Delay1TCYx
  4253 ;; This function is called by:
  4254 ;;		_LCD_WaitBusy
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           	psect	text14
  4259  00190C                     __ptext14:
  4260                           	opt stack 0
  4261  00190C                     _delayFor18Tcy:
  4262                           	opt stack 26
  4263                           
  4264                           ;mydelay.c: 20: Delay1TCYx(18);
  4265                           
  4266                           ;incstack = 0
  4267  00190C  0E12               	movlw	18
  4268  00190E  EC79  F00C         	call	_Delay1TCYx
  4269  001912  0012               	return		;funcret
  4270  001914                     __end_of_delayFor18Tcy:
  4271                           	opt stack 0
  4272                           tblptru	equ	0xFF8
  4273                           tblptrh	equ	0xFF7
  4274                           tblptrl	equ	0xFF6
  4275                           tablat	equ	0xFF5
  4276                           prodh	equ	0xFF4
  4277                           prodl	equ	0xFF3
  4278                           intcon	equ	0xFF2
  4279                           indf0	equ	0xFEF
  4280                           postinc0	equ	0xFEE
  4281                           fsr0h	equ	0xFEA
  4282                           fsr0l	equ	0xFE9
  4283                           wreg	equ	0xFE8
  4284                           indf1	equ	0xFE7
  4285                           postdec1	equ	0xFE5
  4286                           fsr1h	equ	0xFE2
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           fsr2h	equ	0xFDA
  4290                           fsr2l	equ	0xFD9
  4291                           status	equ	0xFD8
  4292                           
  4293 ;; *************** function _Delay1TCYx *****************
  4294 ;; Defined at:
  4295 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d1tcyx.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;  unit            1    wreg     unsigned char 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  unit            1   17[COMRAM] unsigned char 
  4300 ;; Return value:  Size  Location     Type
  4301 ;;                  1    wreg      void 
  4302 ;; Registers used:
  4303 ;;		wreg
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4309 ;;      Params:         0       0       0       0       0       0       0
  4310 ;;      Locals:         1       0       0       0       0       0       0
  4311 ;;      Temps:          0       0       0       0       0       0       0
  4312 ;;      Totals:         1       0       0       0       0       0       0
  4313 ;;Total ram usage:        1 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    1
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_delayFor18Tcy
  4320 ;;		_delay_us1
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text15
  4325  0018F2                     __ptext15:
  4326                           	opt stack 0
  4327  0018F2                     _Delay1TCYx:
  4328                           	opt stack 26
  4329                           
  4330                           ;incstack = 0
  4331                           ;Delay1TCYx@unit stored from wreg
  4332  0018F2  6E12               	movwf	Delay1TCYx@unit,c
  4333  0018F4                     l921:
  4334  0018F4  F000               	nop	
  4335  0018F6  2E12               	decfsz	Delay1TCYx@unit,f,c
  4336  0018F8  D7FD               	goto	l921
  4337  0018FA  0012               	return	
  4338  0018FC                     __end_of_Delay1TCYx:
  4339                           	opt stack 0
  4340                           tblptru	equ	0xFF8
  4341                           tblptrh	equ	0xFF7
  4342                           tblptrl	equ	0xFF6
  4343                           tablat	equ	0xFF5
  4344                           prodh	equ	0xFF4
  4345                           prodl	equ	0xFF3
  4346                           intcon	equ	0xFF2
  4347                           indf0	equ	0xFEF
  4348                           postinc0	equ	0xFEE
  4349                           fsr0h	equ	0xFEA
  4350                           fsr0l	equ	0xFE9
  4351                           wreg	equ	0xFE8
  4352                           indf1	equ	0xFE7
  4353                           postdec1	equ	0xFE5
  4354                           fsr1h	equ	0xFE2
  4355                           fsr1l	equ	0xFE1
  4356                           indf2	equ	0xFDF
  4357                           fsr2h	equ	0xFDA
  4358                           fsr2l	equ	0xFD9
  4359                           status	equ	0xFD8
  4360                           
  4361 ;; *************** function _LCD_GotoXY *****************
  4362 ;; Defined at:
  4363 ;;		line 89 in file "harwave/lcd.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  pos             1    wreg     unsigned char 
  4366 ;;  ln              1   22[COMRAM] unsigned char 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  pos             1   27[COMRAM] unsigned char 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      void 
  4371 ;; Registers used:
  4372 ;;		wreg, status,2, status,0, cstack
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4378 ;;      Params:         1       0       0       0       0       0       0
  4379 ;;      Locals:         3       0       0       0       0       0       0
  4380 ;;      Temps:          2       0       0       0       0       0       0
  4381 ;;      Totals:         6       0       0       0       0       0       0
  4382 ;;Total ram usage:        6 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    4
  4385 ;; This function calls:
  4386 ;;		_LCD_WriteCmd
  4387 ;;		_delay_ms
  4388 ;; This function is called by:
  4389 ;;		_main
  4390 ;;		_LCD_CreateFont
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           	psect	text16
  4395  001480                     __ptext16:
  4396                           	opt stack 0
  4397  001480                     _LCD_GotoXY:
  4398                           	opt stack 26
  4399                           
  4400                           ;incstack = 0
  4401                           ;LCD_GotoXY@pos stored from wreg
  4402  001480  6E1C               	movwf	LCD_GotoXY@pos,c
  4403                           
  4404                           ;lcd.c: 92: if ((ln > (2-1)) || (pos > (16-1)))
  4405  001482  0E02               	movlw	2
  4406  001484  6017               	cpfslt	LCD_GotoXY@ln,c
  4407  001486  0012               	return	
  4408  001488  0E0F               	movlw	15
  4409  00148A  641C               	cpfsgt	LCD_GotoXY@pos,c
  4410  00148C  D001               	goto	l4517
  4411  00148E  0012               	return	
  4412  001490                     l4517:
  4413                           
  4414                           ;lcd.c: 96: }
  4415                           ;lcd.c: 99: LCD_WriteCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  4416  001490  0417               	decf	LCD_GotoXY@ln,w,c
  4417  001492  B4D8               	btfsc	status,2,c
  4418  001494  D002               	goto	l4521
  4419  001496  0E80               	movlw	128
  4420  001498  D001               	goto	L1
  4421  00149A                     l4521:
  4422  00149A  0EC0               	movlw	192
  4423  00149C                     L1:
  4424  00149C  C01C  F018         	movff	LCD_GotoXY@pos,??_LCD_GotoXY
  4425  0014A0  6A19               	clrf	(??_LCD_GotoXY+1)& (0+255),c
  4426  0014A2  1018               	iorwf	??_LCD_GotoXY,w,c
  4427  0014A4  6E1A               	movwf	_LCD_GotoXY$640,c
  4428  0014A6  5019               	movf	??_LCD_GotoXY+1,w,c
  4429  0014A8  6E1B               	movwf	_LCD_GotoXY$640+1,c
  4430  0014AA  501A               	movf	_LCD_GotoXY$640,w,c
  4431  0014AC  EC9B  F00A         	call	_LCD_WriteCmd
  4432                           
  4433                           ;lcd.c: 102: delay_ms(5);
  4434  0014B0  0E00               	movlw	0
  4435  0014B2  6E15               	movwf	delay_ms@ms+1,c
  4436  0014B4  0E05               	movlw	5
  4437  0014B6  6E14               	movwf	delay_ms@ms,c
  4438  0014B8  EC41  F00C         	call	_delay_ms	;wreg free
  4439  0014BC  0012               	return		;funcret
  4440  0014BE                     __end_of_LCD_GotoXY:
  4441                           	opt stack 0
  4442                           tblptru	equ	0xFF8
  4443                           tblptrh	equ	0xFF7
  4444                           tblptrl	equ	0xFF6
  4445                           tablat	equ	0xFF5
  4446                           prodh	equ	0xFF4
  4447                           prodl	equ	0xFF3
  4448                           intcon	equ	0xFF2
  4449                           indf0	equ	0xFEF
  4450                           postinc0	equ	0xFEE
  4451                           fsr0h	equ	0xFEA
  4452                           fsr0l	equ	0xFE9
  4453                           wreg	equ	0xFE8
  4454                           indf1	equ	0xFE7
  4455                           postdec1	equ	0xFE5
  4456                           fsr1h	equ	0xFE2
  4457                           fsr1l	equ	0xFE1
  4458                           indf2	equ	0xFDF
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _LCD_WriteCmd *****************
  4464 ;; Defined at:
  4465 ;;		line 74 in file "harwave/lcd.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  ch              1    wreg     unsigned char 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;  ch              1   21[COMRAM] unsigned char 
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  1    wreg      void 
  4472 ;; Registers used:
  4473 ;;		wreg, status,2, status,0, cstack
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4479 ;;      Params:         0       0       0       0       0       0       0
  4480 ;;      Locals:         1       0       0       0       0       0       0
  4481 ;;      Temps:          0       0       0       0       0       0       0
  4482 ;;      Totals:         1       0       0       0       0       0       0
  4483 ;;Total ram usage:        1 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:    3
  4486 ;; This function calls:
  4487 ;;		_LCDWriteNibble
  4488 ;;		_delay_ms
  4489 ;; This function is called by:
  4490 ;;		_LCD_Initialize
  4491 ;;		_LCD_GotoXY
  4492 ;;		_main
  4493 ;;		_LCD_CreateFont
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text17
  4498  001536                     __ptext17:
  4499                           	opt stack 0
  4500  001536                     _LCD_WriteCmd:
  4501                           	opt stack 27
  4502                           
  4503                           ;incstack = 0
  4504                           ;LCD_WriteCmd@ch stored from wreg
  4505  001536  6E16               	movwf	LCD_WriteCmd@ch,c
  4506                           
  4507                           ;lcd.c: 76: delay_ms(5);
  4508  001538  0E00               	movlw	0
  4509  00153A  6E15               	movwf	delay_ms@ms+1,c
  4510  00153C  0E05               	movlw	5
  4511  00153E  6E14               	movwf	delay_ms@ms,c
  4512  001540  EC41  F00C         	call	_delay_ms	;wreg free
  4513                           
  4514                           ;lcd.c: 79: LCDWriteNibble(ch,0);
  4515  001544  0E00               	movlw	0
  4516  001546  6E12               	movwf	LCDWriteNibble@rs,c
  4517  001548  5016               	movf	LCD_WriteCmd@ch,w,c
  4518  00154A  EC4F  F00B         	call	_LCDWriteNibble
  4519                           
  4520                           ;lcd.c: 82: ch = (ch << 4);
  4521  00154E  3816               	swapf	LCD_WriteCmd@ch,w,c
  4522  001550  0BF0               	andlw	240
  4523  001552  6E16               	movwf	LCD_WriteCmd@ch,c
  4524                           
  4525                           ;lcd.c: 84: delay_ms(1);
  4526  001554  0E00               	movlw	0
  4527  001556  6E15               	movwf	delay_ms@ms+1,c
  4528  001558  0E01               	movlw	1
  4529  00155A  6E14               	movwf	delay_ms@ms,c
  4530  00155C  EC41  F00C         	call	_delay_ms	;wreg free
  4531                           
  4532                           ;lcd.c: 87: LCDWriteNibble(ch,0);
  4533  001560  0E00               	movlw	0
  4534  001562  6E12               	movwf	LCDWriteNibble@rs,c
  4535  001564  5016               	movf	LCD_WriteCmd@ch,w,c
  4536  001566  EC4F  F00B         	call	_LCDWriteNibble
  4537  00156A  0012               	return		;funcret
  4538  00156C                     __end_of_LCD_WriteCmd:
  4539                           	opt stack 0
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           prodh	equ	0xFF4
  4545                           prodl	equ	0xFF3
  4546                           intcon	equ	0xFF2
  4547                           indf0	equ	0xFEF
  4548                           postinc0	equ	0xFEE
  4549                           fsr0h	equ	0xFEA
  4550                           fsr0l	equ	0xFE9
  4551                           wreg	equ	0xFE8
  4552                           indf1	equ	0xFE7
  4553                           postdec1	equ	0xFE5
  4554                           fsr1h	equ	0xFE2
  4555                           fsr1l	equ	0xFE1
  4556                           indf2	equ	0xFDF
  4557                           fsr2h	equ	0xFDA
  4558                           fsr2l	equ	0xFD9
  4559                           status	equ	0xFD8
  4560                           
  4561 ;; *************** function _LCDWriteNibble *****************
  4562 ;; Defined at:
  4563 ;;		line 41 in file "harwave/lcd.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;  ch              1    wreg     unsigned char 
  4566 ;;  rs              1   17[COMRAM] unsigned char 
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;  ch              1   18[COMRAM] unsigned char 
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		wreg, status,2, status,0
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4578 ;;      Params:         1       0       0       0       0       0       0
  4579 ;;      Locals:         1       0       0       0       0       0       0
  4580 ;;      Temps:          0       0       0       0       0       0       0
  4581 ;;      Totals:         2       0       0       0       0       0       0
  4582 ;;Total ram usage:        2 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    1
  4585 ;; This function calls:
  4586 ;;		Nothing
  4587 ;; This function is called by:
  4588 ;;		_LCD_WriteCmd
  4589 ;;		_LCD_WriteData
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           	psect	text18
  4594  00169E                     __ptext18:
  4595                           	opt stack 0
  4596  00169E                     _LCDWriteNibble:
  4597                           	opt stack 27
  4598                           
  4599                           ;incstack = 0
  4600                           ;LCDWriteNibble@ch stored from wreg
  4601  00169E  6E13               	movwf	LCDWriteNibble@ch,c
  4602                           
  4603                           ;lcd.c: 44: ch = (ch >> 4);
  4604  0016A0  3813               	swapf	LCDWriteNibble@ch,w,c
  4605  0016A2  0B0F               	andlw	15
  4606  0016A4  6E13               	movwf	LCDWriteNibble@ch,c
  4607                           
  4608                           ;lcd.c: 47: ch = (ch & 0x0F);
  4609  0016A6  5013               	movf	LCDWriteNibble@ch,w,c
  4610  0016A8  0B0F               	andlw	15
  4611  0016AA  6E13               	movwf	LCDWriteNibble@ch,c
  4612                           
  4613                           ;lcd.c: 50: PORTD = (PORTD & 0x0F);
  4614  0016AC  5083               	movf	3971,w,c	;volatile
  4615  0016AE  0B0F               	andlw	15
  4616  0016B0  6E83               	movwf	3971,c	;volatile
  4617                           
  4618                           ;lcd.c: 53: PORTD = (PORTD | (ch << 4));
  4619  0016B2  3813               	swapf	LCDWriteNibble@ch,w,c
  4620  0016B4  0BF0               	andlw	240
  4621  0016B6  1083               	iorwf	3971,w,c	;volatile
  4622  0016B8  6E83               	movwf	3971,c	;volatile
  4623                           
  4624                           ;lcd.c: 62: PORTDbits.RD0 = rs;
  4625  0016BA  B012               	btfsc	LCDWriteNibble@rs,0,c
  4626  0016BC  D002               	bra	u3555
  4627  0016BE  9083               	bcf	3971,0,c	;volatile
  4628  0016C0  D001               	bra	u3556
  4629  0016C2                     u3555:
  4630  0016C2  8083               	bsf	3971,0,c	;volatile
  4631  0016C4                     u3556:
  4632                           
  4633                           ;lcd.c: 65: PORTDbits.RD1 = 0;
  4634  0016C4  9283               	bcf	3971,1,c	;volatile
  4635                           
  4636                           ;lcd.c: 68: PORTDbits.RD2 = 1;
  4637  0016C6  8483               	bsf	3971,2,c	;volatile
  4638                           
  4639                           ;lcd.c: 71: PORTDbits.RD2 = 0;
  4640  0016C8  9483               	bcf	3971,2,c	;volatile
  4641  0016CA  0012               	return		;funcret
  4642  0016CC                     __end_of_LCDWriteNibble:
  4643                           	opt stack 0
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           prodh	equ	0xFF4
  4649                           prodl	equ	0xFF3
  4650                           intcon	equ	0xFF2
  4651                           indf0	equ	0xFEF
  4652                           postinc0	equ	0xFEE
  4653                           fsr0h	equ	0xFEA
  4654                           fsr0l	equ	0xFE9
  4655                           wreg	equ	0xFE8
  4656                           indf1	equ	0xFE7
  4657                           postdec1	equ	0xFE5
  4658                           fsr1h	equ	0xFE2
  4659                           fsr1l	equ	0xFE1
  4660                           indf2	equ	0xFDF
  4661                           fsr2h	equ	0xFDA
  4662                           fsr2l	equ	0xFD9
  4663                           status	equ	0xFD8
  4664                           
  4665 ;; *************** function _GPIO_initial *****************
  4666 ;; Defined at:
  4667 ;;		line 5 in file "harwave/initial.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;		None
  4670 ;; Auto vars:     Size  Location     Type
  4671 ;;		None
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  1    wreg      void 
  4674 ;; Registers used:
  4675 ;;		wreg, status,2
  4676 ;; Tracked objects:
  4677 ;;		On entry : 0/0
  4678 ;;		On exit  : 0/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4681 ;;      Params:         0       0       0       0       0       0       0
  4682 ;;      Locals:         0       0       0       0       0       0       0
  4683 ;;      Temps:          0       0       0       0       0       0       0
  4684 ;;      Totals:         0       0       0       0       0       0       0
  4685 ;;Total ram usage:        0 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; Hardware stack levels required when called:    1
  4688 ;; This function calls:
  4689 ;;		Nothing
  4690 ;; This function is called by:
  4691 ;;		_main
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text19
  4696  0018E4                     __ptext19:
  4697                           	opt stack 0
  4698  0018E4                     _GPIO_initial:
  4699                           	opt stack 29
  4700                           
  4701                           ;initial.c: 7: TRISD = 0x00;
  4702                           
  4703                           ;incstack = 0
  4704  0018E4  0E00               	movlw	0
  4705  0018E6  6E95               	movwf	3989,c	;volatile
  4706                           
  4707                           ;initial.c: 8: LATD = 0x00;
  4708  0018E8  0E00               	movlw	0
  4709  0018EA  6E8C               	movwf	3980,c	;volatile
  4710                           
  4711                           ;initial.c: 9: TRISAbits.RA0=0;
  4712  0018EC  9092               	bcf	3986,0,c	;volatile
  4713                           
  4714                           ;initial.c: 10: LATAbits.LA0=0;
  4715  0018EE  9089               	bcf	3977,0,c	;volatile
  4716  0018F0  0012               	return		;funcret
  4717  0018F2                     __end_of_GPIO_initial:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           indf0	equ	0xFEF
  4727                           postinc0	equ	0xFEE
  4728                           fsr0h	equ	0xFEA
  4729                           fsr0l	equ	0xFE9
  4730                           wreg	equ	0xFE8
  4731                           indf1	equ	0xFE7
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           fsr2h	equ	0xFDA
  4737                           fsr2l	equ	0xFD9
  4738                           status	equ	0xFD8
  4739                           
  4740 ;; *************** function _ESP8266_client *****************
  4741 ;; Defined at:
  4742 ;;		line 246 in file "harwave/UART.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;		None
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;		None
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  1    wreg      void 
  4749 ;; Registers used:
  4750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4756 ;;      Params:         0       0       0       0       0       0       0
  4757 ;;      Locals:         0       0       0       0       0       0       0
  4758 ;;      Temps:          0       0       0       0       0       0       0
  4759 ;;      Totals:         0       0       0       0       0       0       0
  4760 ;;Total ram usage:        0 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    6
  4763 ;; This function calls:
  4764 ;;		_ESP8266_AT_Test
  4765 ;;		_ESP8266_Cmd
  4766 ;;		_ESP8266_JoinAP
  4767 ;;		_ESP8266_Link_Server
  4768 ;;		_ESP8266_Rst
  4769 ;;		_STA_MODE
  4770 ;; This function is called by:
  4771 ;;		_main
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text20
  4776  000DC4                     __ptext20:
  4777                           	opt stack 0
  4778  000DC4                     _ESP8266_client:
  4779                           	opt stack 24
  4780                           
  4781                           ;UART.c: 247: ESP8266_Rst ();
  4782                           
  4783                           ;incstack = 0
  4784  000DC4  ECA7  F00B         	call	_ESP8266_Rst	;wreg free
  4785                           
  4786                           ;UART.c: 248: ESP8266_AT_Test () ;
  4787  000DC8  EC7C  F00B         	call	_ESP8266_AT_Test	;wreg free
  4788                           
  4789                           ;UART.c: 249: ESP8266_Cmd ( (void *)"AT+CWQAP\r\n",(void *)"OK", 0 , 500 );
  4790  000DCC  0E76               	movlw	low STR_49
  4791  000DCE  6E25               	movwf	ESP8266_Cmd@cmd,c
  4792  000DD0  0E7F               	movlw	high STR_49
  4793  000DD2  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4794  000DD4  0EB7               	movlw	low (STR_3+5)
  4795  000DD6  6E27               	movwf	ESP8266_Cmd@reply1,c
  4796  000DD8  0E7F               	movlw	high (STR_3+5)
  4797  000DDA  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4798  000DDC  0E00               	movlw	0
  4799  000DDE  6E29               	movwf	ESP8266_Cmd@reply2,c
  4800  000DE0  0E00               	movlw	0
  4801  000DE2  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4802  000DE4  0E01               	movlw	1
  4803  000DE6  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4804  000DE8  0EF4               	movlw	244
  4805  000DEA  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4806  000DEC  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  4807                           
  4808                           ;UART.c: 250: STA_MODE();
  4809  000DF0  EC07  F00B         	call	_STA_MODE	;wreg free
  4810  000DF4                     l4591:
  4811  000DF4  0EE6               	movlw	low STR_38
  4812  000DF6  6E41               	movwf	ESP8266_JoinAP@pSSID,c
  4813  000DF8  0E7F               	movlw	high STR_38
  4814  000DFA  6E42               	movwf	ESP8266_JoinAP@pSSID+1,c
  4815  000DFC  0E81               	movlw	low STR_39
  4816  000DFE  6E43               	movwf	ESP8266_JoinAP@pPassWord,c
  4817  000E00  0E7F               	movlw	high STR_39
  4818  000E02  6E44               	movwf	ESP8266_JoinAP@pPassWord+1,c
  4819  000E04  ECFA  F009         	call	_ESP8266_JoinAP	;wreg free
  4820  000E08  0900               	iorlw	0
  4821  000E0A  B4D8               	btfsc	status,2,c
  4822  000E0C  D7F3               	goto	l4591
  4823  000E0E                     l4593:
  4824  000E0E  0EFB               	movlw	low STR_53
  4825  000E10  6E25               	movwf	ESP8266_Cmd@cmd,c
  4826  000E12  0E7E               	movlw	high STR_53
  4827  000E14  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4828  000E16  0EB7               	movlw	low (STR_3+5)
  4829  000E18  6E27               	movwf	ESP8266_Cmd@reply1,c
  4830  000E1A  0E7F               	movlw	high (STR_3+5)
  4831  000E1C  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4832  000E1E  0E00               	movlw	0
  4833  000E20  6E29               	movwf	ESP8266_Cmd@reply2,c
  4834  000E22  0E00               	movlw	0
  4835  000E24  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4836  000E26  0E01               	movlw	1
  4837  000E28  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4838  000E2A  0EF4               	movlw	244
  4839  000E2C  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4840  000E2E  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  4841  000E32  0900               	iorlw	0
  4842  000E34  B4D8               	btfsc	status,2,c
  4843  000E36  D7EB               	goto	l4593
  4844  000E38                     l4595:
  4845  000E38  0E0A               	movlw	low STR_41
  4846  000E3A  6E25               	movwf	ESP8266_Cmd@cmd,c
  4847  000E3C  0E7F               	movlw	high STR_41
  4848  000E3E  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4849  000E40  0EB7               	movlw	low (STR_3+5)
  4850  000E42  6E27               	movwf	ESP8266_Cmd@reply1,c
  4851  000E44  0E7F               	movlw	high (STR_3+5)
  4852  000E46  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4853  000E48  0E00               	movlw	0
  4854  000E4A  6E29               	movwf	ESP8266_Cmd@reply2,c
  4855  000E4C  0E00               	movlw	0
  4856  000E4E  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4857  000E50  0E01               	movlw	1
  4858  000E52  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4859  000E54  0EF4               	movlw	244
  4860  000E56  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4861  000E58  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  4862  000E5C  0900               	iorlw	0
  4863  000E5E  B4D8               	btfsc	status,2,c
  4864  000E60  D7EB               	goto	l4595
  4865  000E62                     l4597:
  4866  000E62  0E6A               	movlw	low STR_57
  4867  000E64  6E41               	movwf	ESP8266_Link_Server@ip,c
  4868  000E66  0E7F               	movlw	high STR_57
  4869  000E68  6E42               	movwf	ESP8266_Link_Server@ip+1,c
  4870  000E6A  0EE1               	movlw	low STR_58
  4871  000E6C  6E43               	movwf	ESP8266_Link_Server@ComNum,c
  4872  000E6E  0E7F               	movlw	high STR_58
  4873  000E70  6E44               	movwf	ESP8266_Link_Server@ComNum+1,c
  4874  000E72  0E00               	movlw	0
  4875  000E74  6E46               	movwf	ESP8266_Link_Server@id+1,c
  4876  000E76  0E07               	movlw	7
  4877  000E78  6E45               	movwf	ESP8266_Link_Server@id,c
  4878  000E7A  0E00               	movlw	0
  4879  000E7C  EC84  F005         	call	_ESP8266_Link_Server
  4880  000E80  0900               	iorlw	0
  4881  000E82  A4D8               	btfss	status,2,c
  4882  000E84  0012               	return	
  4883  000E86  D7ED               	goto	l4597
  4884  000E88                     __end_of_ESP8266_client:
  4885                           	opt stack 0
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           intcon	equ	0xFF2
  4893                           indf0	equ	0xFEF
  4894                           postinc0	equ	0xFEE
  4895                           fsr0h	equ	0xFEA
  4896                           fsr0l	equ	0xFE9
  4897                           wreg	equ	0xFE8
  4898                           indf1	equ	0xFE7
  4899                           postdec1	equ	0xFE5
  4900                           fsr1h	equ	0xFE2
  4901                           fsr1l	equ	0xFE1
  4902                           indf2	equ	0xFDF
  4903                           fsr2h	equ	0xFDA
  4904                           fsr2l	equ	0xFD9
  4905                           status	equ	0xFD8
  4906                           
  4907 ;; *************** function _STA_MODE *****************
  4908 ;; Defined at:
  4909 ;;		line 230 in file "harwave/UART.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;		None
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;		None
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  1    wreg      void 
  4916 ;; Registers used:
  4917 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4923 ;;      Params:         0       0       0       0       0       0       0
  4924 ;;      Locals:         0       0       0       0       0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0
  4926 ;;      Totals:         0       0       0       0       0       0       0
  4927 ;;Total ram usage:        0 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    5
  4930 ;; This function calls:
  4931 ;;		_ESP8266_Cmd
  4932 ;;		_ESP8266_Net_Mode_Choose
  4933 ;; This function is called by:
  4934 ;;		_ESP8266_client
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text21
  4939  00160E                     __ptext21:
  4940                           	opt stack 0
  4941  00160E                     _STA_MODE:
  4942                           	opt stack 24
  4943                           
  4944                           ;UART.c: 231: ESP8266_Net_Mode_Choose ( STA ) ;
  4945                           
  4946                           ;incstack = 0
  4947  00160E  0E00               	movlw	0
  4948  001610  EC36  F008         	call	_ESP8266_Net_Mode_Choose
  4949  001614                     l4451:
  4950  001614  0E50               	movlw	low STR_32
  4951  001616  6E25               	movwf	ESP8266_Cmd@cmd,c
  4952  001618  0E7F               	movlw	high STR_32
  4953  00161A  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4954  00161C  0E8B               	movlw	low STR_36
  4955  00161E  6E27               	movwf	ESP8266_Cmd@reply1,c
  4956  001620  0E7F               	movlw	high STR_36
  4957  001622  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4958  001624  0EB7               	movlw	low (STR_3+5)
  4959  001626  6E29               	movwf	ESP8266_Cmd@reply2,c
  4960  001628  0E7F               	movlw	high (STR_3+5)
  4961  00162A  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4962  00162C  0E00               	movlw	0
  4963  00162E  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4964  001630  0E64               	movlw	100
  4965  001632  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4966  001634  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  4967  001638  0900               	iorlw	0
  4968  00163A  A4D8               	btfss	status,2,c
  4969  00163C  0012               	return	
  4970  00163E  D7EA               	goto	l4451
  4971  001640                     __end_of_STA_MODE:
  4972                           	opt stack 0
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           intcon	equ	0xFF2
  4980                           indf0	equ	0xFEF
  4981                           postinc0	equ	0xFEE
  4982                           fsr0h	equ	0xFEA
  4983                           fsr0l	equ	0xFE9
  4984                           wreg	equ	0xFE8
  4985                           indf1	equ	0xFE7
  4986                           postdec1	equ	0xFE5
  4987                           fsr1h	equ	0xFE2
  4988                           fsr1l	equ	0xFE1
  4989                           indf2	equ	0xFDF
  4990                           fsr2h	equ	0xFDA
  4991                           fsr2l	equ	0xFD9
  4992                           status	equ	0xFD8
  4993                           
  4994 ;; *************** function _ESP8266_Net_Mode_Choose *****************
  4995 ;; Defined at:
  4996 ;;		line 148 in file "harwave/UART.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  MODE            1    wreg     enum E3772
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;  MODE            1   45[COMRAM] enum E3772
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      unsigned char 
  5003 ;; Registers used:
  5004 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5010 ;;      Params:         0       0       0       0       0       0       0
  5011 ;;      Locals:         1       0       0       0       0       0       0
  5012 ;;      Temps:          0       0       0       0       0       0       0
  5013 ;;      Totals:         1       0       0       0       0       0       0
  5014 ;;Total ram usage:        1 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    4
  5017 ;; This function calls:
  5018 ;;		_ESP8266_Cmd
  5019 ;; This function is called by:
  5020 ;;		_STA_MODE
  5021 ;;		_AP_MODE
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           	psect	text22
  5026  00106C                     __ptext22:
  5027                           	opt stack 0
  5028  00106C                     _ESP8266_Net_Mode_Choose:
  5029                           	opt stack 24
  5030                           
  5031                           ;incstack = 0
  5032                           ;ESP8266_Net_Mode_Choose@MODE stored from wreg
  5033  00106C  6E2E               	movwf	ESP8266_Net_Mode_Choose@MODE,c
  5034                           
  5035                           ;UART.c: 151: switch ( MODE )
  5036  00106E  D039               	goto	l4333
  5037  001070                     l4319:
  5038                           
  5039                           ;UART.c: 154: return ESP8266_Cmd ( (void*)"AT+CWMODE=1\r\n", (void*)"OK", 0, 2500 );
  5040                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  5041  001070  0E18               	movlw	low STR_9
  5042  001072  6E25               	movwf	ESP8266_Cmd@cmd,c
  5043  001074  0E7F               	movlw	high STR_9
  5044  001076  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5045  001078  0EB7               	movlw	low (STR_3+5)
  5046  00107A  6E27               	movwf	ESP8266_Cmd@reply1,c
  5047  00107C  0E7F               	movlw	high (STR_3+5)
  5048  00107E  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5049  001080  0E00               	movlw	0
  5050  001082  6E29               	movwf	ESP8266_Cmd@reply2,c
  5051  001084  0E00               	movlw	0
  5052  001086  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5053  001088  0E09               	movlw	9
  5054  00108A  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5055  00108C  0EC4               	movlw	196
  5056  00108E  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5057  001090  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  5058  001094  0012               	return	
  5059  001096                     l4323:
  5060                           
  5061                           ;UART.c: 157: return ESP8266_Cmd ( (void*)"AT+CWMODE=2\r\n", (void*)"OK", 0, 2500 );
  5062                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  5063  001096  0E34               	movlw	low STR_11
  5064  001098  6E25               	movwf	ESP8266_Cmd@cmd,c
  5065  00109A  0E7F               	movlw	high STR_11
  5066  00109C  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5067  00109E  0EB7               	movlw	low (STR_3+5)
  5068  0010A0  6E27               	movwf	ESP8266_Cmd@reply1,c
  5069  0010A2  0E7F               	movlw	high (STR_3+5)
  5070  0010A4  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5071  0010A6  0E00               	movlw	0
  5072  0010A8  6E29               	movwf	ESP8266_Cmd@reply2,c
  5073  0010AA  0E00               	movlw	0
  5074  0010AC  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5075  0010AE  0E09               	movlw	9
  5076  0010B0  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5077  0010B2  0EC4               	movlw	196
  5078  0010B4  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5079  0010B6  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  5080  0010BA  0012               	return	
  5081  0010BC                     l4327:
  5082                           
  5083                           ;UART.c: 160: return ESP8266_Cmd ( (void*)"AT+CWMODE=3\r\n", (void*)"OK", 0, 2500 );
  5084                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  5085  0010BC  0E42               	movlw	low STR_13
  5086  0010BE  6E25               	movwf	ESP8266_Cmd@cmd,c
  5087  0010C0  0E7F               	movlw	high STR_13
  5088  0010C2  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5089  0010C4  0EB7               	movlw	low (STR_3+5)
  5090  0010C6  6E27               	movwf	ESP8266_Cmd@reply1,c
  5091  0010C8  0E7F               	movlw	high (STR_3+5)
  5092  0010CA  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5093  0010CC  0E00               	movlw	0
  5094  0010CE  6E29               	movwf	ESP8266_Cmd@reply2,c
  5095  0010D0  0E00               	movlw	0
  5096  0010D2  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5097  0010D4  0E09               	movlw	9
  5098  0010D6  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5099  0010D8  0EC4               	movlw	196
  5100  0010DA  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5101  0010DC  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  5102                           
  5103                           ;UART.c: 164: }
  5104                           
  5105                           ;UART.c: 163: return 0;
  5106                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  5107                           
  5108                           ;UART.c: 162: default:
  5109  0010E0  0012               	return	
  5110  0010E2                     l4333:
  5111  0010E2  502E               	movf	ESP8266_Net_Mode_Choose@MODE,w,c
  5112                           
  5113                           ; Switch size 1, requested type "space"
  5114                           ; Number of cases is 3, Range of values is 0 to 2
  5115                           ; switch strategies available:
  5116                           ; Name         Instructions Cycles
  5117                           ; simple_byte           10     6 (average)
  5118                           ;	Chosen strategy is simple_byte
  5119  0010E4  0A00               	xorlw	0	; case 0
  5120  0010E6  B4D8               	btfsc	status,2,c
  5121  0010E8  D7C3               	goto	l4319
  5122  0010EA  0A01               	xorlw	1	; case 1
  5123  0010EC  B4D8               	btfsc	status,2,c
  5124  0010EE  D7D3               	goto	l4323
  5125  0010F0  0A03               	xorlw	3	; case 2
  5126  0010F2  A4D8               	btfss	status,2,c
  5127  0010F4  0012               	return	
  5128  0010F6  D7E2               	goto	l4327
  5129  0010F8                     __end_of_ESP8266_Net_Mode_Choose:
  5130                           	opt stack 0
  5131                           tblptru	equ	0xFF8
  5132                           tblptrh	equ	0xFF7
  5133                           tblptrl	equ	0xFF6
  5134                           tablat	equ	0xFF5
  5135                           prodh	equ	0xFF4
  5136                           prodl	equ	0xFF3
  5137                           intcon	equ	0xFF2
  5138                           indf0	equ	0xFEF
  5139                           postinc0	equ	0xFEE
  5140                           fsr0h	equ	0xFEA
  5141                           fsr0l	equ	0xFE9
  5142                           wreg	equ	0xFE8
  5143                           indf1	equ	0xFE7
  5144                           postdec1	equ	0xFE5
  5145                           fsr1h	equ	0xFE2
  5146                           fsr1l	equ	0xFE1
  5147                           indf2	equ	0xFDF
  5148                           fsr2h	equ	0xFDA
  5149                           fsr2l	equ	0xFD9
  5150                           status	equ	0xFD8
  5151                           
  5152 ;; *************** function _ESP8266_Rst *****************
  5153 ;; Defined at:
  5154 ;;		line 135 in file "harwave/UART.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;		None
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;		None
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  1    wreg      void 
  5161 ;; Registers used:
  5162 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5168 ;;      Params:         0       0       0       0       0       0       0
  5169 ;;      Locals:         0       0       0       0       0       0       0
  5170 ;;      Temps:          0       0       0       0       0       0       0
  5171 ;;      Totals:         0       0       0       0       0       0       0
  5172 ;;Total ram usage:        0 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:    4
  5175 ;; This function calls:
  5176 ;;		_ESP8266_Cmd
  5177 ;; This function is called by:
  5178 ;;		_ESP8266_client
  5179 ;;		_ESP8266_Server
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text23
  5184  00174E                     __ptext23:
  5185                           	opt stack 0
  5186  00174E                     _ESP8266_Rst:
  5187                           	opt stack 25
  5188                           
  5189                           ;UART.c: 138: ESP8266_Cmd ( (void*)"AT+RST\r\n", (void*)"OK", (void*)"ready", 2500 );
  5190                           
  5191                           ;incstack = 0
  5192  00174E  0EA9               	movlw	low STR_6
  5193  001750  6E25               	movwf	ESP8266_Cmd@cmd,c
  5194  001752  0E7F               	movlw	high STR_6
  5195  001754  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5196  001756  0EB7               	movlw	low (STR_3+5)
  5197  001758  6E27               	movwf	ESP8266_Cmd@reply1,c
  5198  00175A  0E7F               	movlw	high (STR_3+5)
  5199  00175C  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5200  00175E  0ED6               	movlw	low STR_8
  5201  001760  6E29               	movwf	ESP8266_Cmd@reply2,c
  5202  001762  0E7F               	movlw	high STR_8
  5203  001764  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5204  001766  0E09               	movlw	9
  5205  001768  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5206  00176A  0EC4               	movlw	196
  5207  00176C  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5208  00176E  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  5209  001772  0012               	return		;funcret
  5210  001774                     __end_of_ESP8266_Rst:
  5211                           	opt stack 0
  5212                           tblptru	equ	0xFF8
  5213                           tblptrh	equ	0xFF7
  5214                           tblptrl	equ	0xFF6
  5215                           tablat	equ	0xFF5
  5216                           prodh	equ	0xFF4
  5217                           prodl	equ	0xFF3
  5218                           intcon	equ	0xFF2
  5219                           indf0	equ	0xFEF
  5220                           postinc0	equ	0xFEE
  5221                           fsr0h	equ	0xFEA
  5222                           fsr0l	equ	0xFE9
  5223                           wreg	equ	0xFE8
  5224                           indf1	equ	0xFE7
  5225                           postdec1	equ	0xFE5
  5226                           fsr1h	equ	0xFE2
  5227                           fsr1l	equ	0xFE1
  5228                           indf2	equ	0xFDF
  5229                           fsr2h	equ	0xFDA
  5230                           fsr2l	equ	0xFD9
  5231                           status	equ	0xFD8
  5232                           
  5233 ;; *************** function _ESP8266_Link_Server *****************
  5234 ;; Defined at:
  5235 ;;		line 185 in file "harwave/UART.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;  enumE           1    wreg     enum E3769
  5238 ;;  ip              2   64[COMRAM] PTR unsigned char 
  5239 ;;		 -> STR_57(12), 
  5240 ;;  ComNum          2   66[COMRAM] PTR unsigned char 
  5241 ;;		 -> STR_58(5), 
  5242 ;;  id              2   68[COMRAM] int 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  enumE           1  220[BANK1 ] enum E3769
  5245 ;;  cCmd          120    0[BANK1 ] unsigned char [120]
  5246 ;;  cStr          100  120[BANK1 ] unsigned char [100]
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  1    wreg      unsigned char 
  5249 ;; Registers used:
  5250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5256 ;;      Params:         6       0       0       0       0       0       0
  5257 ;;      Locals:         0       0     221       0       0       0       0
  5258 ;;      Temps:          0       0       0       0       0       0       0
  5259 ;;      Totals:         6       0     221       0       0       0       0
  5260 ;;Total ram usage:      227 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    4
  5263 ;; This function calls:
  5264 ;;		_ESP8266_Cmd
  5265 ;;		_sprintf
  5266 ;; This function is called by:
  5267 ;;		_ESP8266_client
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text24
  5272  000B08                     __ptext24:
  5273                           	opt stack 0
  5274  000B08                     _ESP8266_Link_Server:
  5275                           	opt stack 25
  5276                           
  5277                           ;incstack = 0
  5278                           ;ESP8266_Link_Server@enumE stored from wreg
  5279  000B08  0101               	movlb	1	; () banked
  5280  000B0A  6FDC               	movwf	ESP8266_Link_Server@enumE& (0+255),b
  5281                           
  5282                           ;UART.c: 187: char cStr [100] = { 0 }, cCmd [120];
  5283  000B0C  EE23  F000         	lfsr	2,ESP8266_Link_Server@F4048
  5284  000B10  EE11  F078         	lfsr	1,ESP8266_Link_Server@cStr
  5285  000B14  0E63               	movlw	99
  5286  000B16                     u4281:
  5287  000B16  CFDB FFE3          	movff	plusw2,plusw1
  5288  000B1A  06E8               	decf	wreg,f,c
  5289  000B1C  E2FC               	bc	u4281
  5290                           
  5291                           ;UART.c: 189: switch ( enumE )
  5292  000B1E  D02E               	goto	l4437
  5293  000B20                     l4431:
  5294                           
  5295                           ;UART.c: 192: sprintf ( cStr, (void*)"\"%s\",\"%s\",%s", "TCP", ip, ComNum );
  5296  000B20  0E78               	movlw	low ESP8266_Link_Server@cStr
  5297  000B22  6E1E               	movwf	sprintf@sp,c
  5298  000B24  0E01               	movlw	high ESP8266_Link_Server@cStr
  5299  000B26  6E1F               	movwf	sprintf@sp+1,c
  5300  000B28  0E5D               	movlw	low STR_20
  5301  000B2A  6E20               	movwf	sprintf@f,c
  5302  000B2C  0E7F               	movlw	high STR_20
  5303  000B2E  6E21               	movwf	sprintf@f+1,c
  5304  000B30  0EEA               	movlw	low STR_21
  5305  000B32  6E22               	movwf	?_sprintf+4,c
  5306  000B34  0E7F               	movlw	high STR_21
  5307  000B36  6E23               	movwf	?_sprintf+5,c
  5308  000B38  C041  F024         	movff	ESP8266_Link_Server@ip,?_sprintf+6
  5309  000B3C  C042  F025         	movff	ESP8266_Link_Server@ip+1,?_sprintf+7
  5310  000B40  C043  F026         	movff	ESP8266_Link_Server@ComNum,?_sprintf+8
  5311  000B44  C044  F027         	movff	ESP8266_Link_Server@ComNum+1,?_sprintf+9
  5312  000B48  EC09  F000         	call	_sprintf	;wreg free
  5313                           
  5314                           ;UART.c: 193: break;
  5315  000B4C  D01F               	goto	l4439
  5316  000B4E                     l4433:
  5317                           
  5318                           ;UART.c: 196: sprintf ( cStr, (void*)"\"%s\",\"%s\",%s", "UDP", ip, ComNum );
  5319  000B4E  0E78               	movlw	low ESP8266_Link_Server@cStr
  5320  000B50  6E1E               	movwf	sprintf@sp,c
  5321  000B52  0E01               	movlw	high ESP8266_Link_Server@cStr
  5322  000B54  6E1F               	movwf	sprintf@sp+1,c
  5323  000B56  0E5D               	movlw	low STR_20
  5324  000B58  6E20               	movwf	sprintf@f,c
  5325  000B5A  0E7F               	movlw	high STR_20
  5326  000B5C  6E21               	movwf	sprintf@f+1,c
  5327  000B5E  0EEE               	movlw	low STR_23
  5328  000B60  6E22               	movwf	?_sprintf+4,c
  5329  000B62  0E7F               	movlw	high STR_23
  5330  000B64  6E23               	movwf	?_sprintf+5,c
  5331  000B66  C041  F024         	movff	ESP8266_Link_Server@ip,?_sprintf+6
  5332  000B6A  C042  F025         	movff	ESP8266_Link_Server@ip+1,?_sprintf+7
  5333  000B6E  C043  F026         	movff	ESP8266_Link_Server@ComNum,?_sprintf+8
  5334  000B72  C044  F027         	movff	ESP8266_Link_Server@ComNum+1,?_sprintf+9
  5335  000B76  EC09  F000         	call	_sprintf	;wreg free
  5336                           
  5337                           ;UART.c: 201: }
  5338                           
  5339                           ;UART.c: 200: break;
  5340                           
  5341                           ;UART.c: 199: default:
  5342                           
  5343                           ;UART.c: 197: break;
  5344  000B7A  D008               	goto	l4439
  5345  000B7C                     l4437:
  5346  000B7C  0101               	movlb	1	; () banked
  5347  000B7E  51DC               	movf	ESP8266_Link_Server@enumE& (0+255),w,b
  5348                           
  5349                           ; Switch size 1, requested type "space"
  5350                           ; Number of cases is 2, Range of values is 0 to 1
  5351                           ; switch strategies available:
  5352                           ; Name         Instructions Cycles
  5353                           ; simple_byte            7     4 (average)
  5354                           ;	Chosen strategy is simple_byte
  5355  000B80  0A00               	xorlw	0	; case 0
  5356  000B82  B4D8               	btfsc	status,2,c
  5357  000B84  D7CD               	goto	l4431
  5358  000B86  0A01               	xorlw	1	; case 1
  5359  000B88  B4D8               	btfsc	status,2,c
  5360  000B8A  D7E1               	goto	l4433
  5361  000B8C                     l4439:
  5362                           
  5363                           ;UART.c: 203: if ( id < 5 )
  5364  000B8C  BE46               	btfsc	ESP8266_Link_Server@id+1,7,c
  5365  000B8E  D006               	goto	l4441
  5366  000B90  5046               	movf	ESP8266_Link_Server@id+1,w,c
  5367  000B92  E117               	bnz	l4443
  5368  000B94  0E05               	movlw	5
  5369  000B96  5C45               	subwf	ESP8266_Link_Server@id,w,c
  5370  000B98  B0D8               	btfsc	status,0,c
  5371  000B9A  D013               	goto	l4443
  5372  000B9C                     l4441:
  5373                           
  5374                           ;UART.c: 204: sprintf ( cCmd, (void*)"AT+CIPSTART=%d,%s\r\n", id, cStr);
  5375  000B9C  0E00               	movlw	low ESP8266_Link_Server@cCmd
  5376  000B9E  6E1E               	movwf	sprintf@sp,c
  5377  000BA0  0E01               	movlw	high ESP8266_Link_Server@cCmd
  5378  000BA2  6E1F               	movwf	sprintf@sp+1,c
  5379  000BA4  0E92               	movlw	low STR_24
  5380  000BA6  6E20               	movwf	sprintf@f,c
  5381  000BA8  0E7E               	movlw	high STR_24
  5382  000BAA  6E21               	movwf	sprintf@f+1,c
  5383  000BAC  C045  F022         	movff	ESP8266_Link_Server@id,?_sprintf+4
  5384  000BB0  C046  F023         	movff	ESP8266_Link_Server@id+1,?_sprintf+5
  5385  000BB4  0E78               	movlw	low ESP8266_Link_Server@cStr
  5386  000BB6  6E24               	movwf	?_sprintf+6,c
  5387  000BB8  0E01               	movlw	high ESP8266_Link_Server@cStr
  5388  000BBA  6E25               	movwf	?_sprintf+7,c
  5389  000BBC  EC09  F000         	call	_sprintf	;wreg free
  5390  000BC0  D00E               	goto	l4445
  5391  000BC2                     l4443:
  5392                           
  5393                           ;UART.c: 206: else
  5394                           ;UART.c: 207: sprintf ( cCmd, (void*)"AT+CIPSTART=%s\r\n", cStr );
  5395  000BC2  0E00               	movlw	low ESP8266_Link_Server@cCmd
  5396  000BC4  6E1E               	movwf	sprintf@sp,c
  5397  000BC6  0E01               	movlw	high ESP8266_Link_Server@cCmd
  5398  000BC8  6E1F               	movwf	sprintf@sp+1,c
  5399  000BCA  0EDB               	movlw	low STR_25
  5400  000BCC  6E20               	movwf	sprintf@f,c
  5401  000BCE  0E7E               	movlw	high STR_25
  5402  000BD0  6E21               	movwf	sprintf@f+1,c
  5403  000BD2  0E78               	movlw	low ESP8266_Link_Server@cStr
  5404  000BD4  6E22               	movwf	?_sprintf+4,c
  5405  000BD6  0E01               	movlw	high ESP8266_Link_Server@cStr
  5406  000BD8  6E23               	movwf	?_sprintf+5,c
  5407  000BDA  EC09  F000         	call	_sprintf	;wreg free
  5408  000BDE                     l4445:
  5409                           
  5410                           ;UART.c: 209: return ESP8266_Cmd ( cCmd, (void*)"CONNECT",(void*)"ALREAY", 90 );
  5411  000BDE  0E00               	movlw	low ESP8266_Link_Server@cCmd
  5412  000BE0  6E25               	movwf	ESP8266_Cmd@cmd,c
  5413  000BE2  0E01               	movlw	high ESP8266_Link_Server@cCmd
  5414  000BE4  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5415  000BE6  0EBA               	movlw	low STR_26
  5416  000BE8  6E27               	movwf	ESP8266_Cmd@reply1,c
  5417  000BEA  0E7F               	movlw	high STR_26
  5418  000BEC  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5419  000BEE  0EC9               	movlw	low STR_27
  5420  000BF0  6E29               	movwf	ESP8266_Cmd@reply2,c
  5421  000BF2  0E7F               	movlw	high STR_27
  5422  000BF4  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5423  000BF6  0E00               	movlw	0
  5424  000BF8  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5425  000BFA  0E5A               	movlw	90
  5426  000BFC  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5427  000BFE  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  5428  000C02  0012               	return	
  5429  000C04                     __end_of_ESP8266_Link_Server:
  5430                           	opt stack 0
  5431                           tblptru	equ	0xFF8
  5432                           tblptrh	equ	0xFF7
  5433                           tblptrl	equ	0xFF6
  5434                           tablat	equ	0xFF5
  5435                           prodh	equ	0xFF4
  5436                           prodl	equ	0xFF3
  5437                           intcon	equ	0xFF2
  5438                           indf0	equ	0xFEF
  5439                           postinc0	equ	0xFEE
  5440                           fsr0h	equ	0xFEA
  5441                           fsr0l	equ	0xFE9
  5442                           wreg	equ	0xFE8
  5443                           indf1	equ	0xFE7
  5444                           postdec1	equ	0xFE5
  5445                           plusw1	equ	0xFE3
  5446                           fsr1h	equ	0xFE2
  5447                           fsr1l	equ	0xFE1
  5448                           indf2	equ	0xFDF
  5449                           plusw2	equ	0xFDB
  5450                           fsr2h	equ	0xFDA
  5451                           fsr2l	equ	0xFD9
  5452                           status	equ	0xFD8
  5453                           
  5454 ;; *************** function _ESP8266_JoinAP *****************
  5455 ;; Defined at:
  5456 ;;		line 167 in file "harwave/UART.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;  pSSID           2   64[COMRAM] PTR unsigned char 
  5459 ;;		 -> STR_51(4), 
  5460 ;;  pPassWord       2   66[COMRAM] PTR unsigned char 
  5461 ;;		 -> STR_52(10), 
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;  cCmd          120    0[BANK0 ] unsigned char [120]
  5464 ;; Return value:  Size  Location     Type
  5465 ;;                  1    wreg      unsigned char 
  5466 ;; Registers used:
  5467 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5473 ;;      Params:         4       0       0       0       0       0       0
  5474 ;;      Locals:         0     120       0       0       0       0       0
  5475 ;;      Temps:          0       0       0       0       0       0       0
  5476 ;;      Totals:         4     120       0       0       0       0       0
  5477 ;;Total ram usage:      124 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    4
  5480 ;; This function calls:
  5481 ;;		_ESP8266_Cmd
  5482 ;;		_sprintf
  5483 ;; This function is called by:
  5484 ;;		_ESP8266_client
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           	psect	text25
  5489  0013F4                     __ptext25:
  5490                           	opt stack 0
  5491  0013F4                     _ESP8266_JoinAP:
  5492                           	opt stack 25
  5493                           
  5494                           ;UART.c: 169: char cCmd [120];
  5495                           ;UART.c: 171: sprintf ( cCmd, (void*)"AT+CWJAP=\"%s\",\"%s\"\r\n", pSSID, pPassWord );
  5496                           
  5497                           ;incstack = 0
  5498  0013F4  0E80               	movlw	low ESP8266_JoinAP@cCmd
  5499  0013F6  6E1E               	movwf	sprintf@sp,c
  5500  0013F8  0E00               	movlw	high ESP8266_JoinAP@cCmd
  5501  0013FA  6E1F               	movwf	sprintf@sp+1,c
  5502  0013FC  0E7D               	movlw	low STR_15
  5503  0013FE  6E20               	movwf	sprintf@f,c
  5504  001400  0E7E               	movlw	high STR_15
  5505  001402  6E21               	movwf	sprintf@f+1,c
  5506  001404  C041  F022         	movff	ESP8266_JoinAP@pSSID,?_sprintf+4
  5507  001408  C042  F023         	movff	ESP8266_JoinAP@pSSID+1,?_sprintf+5
  5508  00140C  C043  F024         	movff	ESP8266_JoinAP@pPassWord,?_sprintf+6
  5509  001410  C044  F025         	movff	ESP8266_JoinAP@pPassWord+1,?_sprintf+7
  5510  001414  EC09  F000         	call	_sprintf	;wreg free
  5511                           
  5512                           ;UART.c: 173: return ESP8266_Cmd ( cCmd, (void*)"OK", (void*)"CONNECTED", 15000 );
  5513  001418  0E80               	movlw	low ESP8266_JoinAP@cCmd
  5514  00141A  6E25               	movwf	ESP8266_Cmd@cmd,c
  5515  00141C  0E00               	movlw	high ESP8266_JoinAP@cCmd
  5516  00141E  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5517  001420  0EB7               	movlw	low (STR_3+5)
  5518  001422  6E27               	movwf	ESP8266_Cmd@reply1,c
  5519  001424  0E7F               	movlw	high (STR_3+5)
  5520  001426  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5521  001428  0E9F               	movlw	low STR_17
  5522  00142A  6E29               	movwf	ESP8266_Cmd@reply2,c
  5523  00142C  0E7F               	movlw	high STR_17
  5524  00142E  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5525  001430  0E3A               	movlw	58
  5526  001432  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5527  001434  0E98               	movlw	152
  5528  001436  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5529  001438  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  5530  00143C  0012               	return	
  5531  00143E                     __end_of_ESP8266_JoinAP:
  5532                           	opt stack 0
  5533                           tblptru	equ	0xFF8
  5534                           tblptrh	equ	0xFF7
  5535                           tblptrl	equ	0xFF6
  5536                           tablat	equ	0xFF5
  5537                           prodh	equ	0xFF4
  5538                           prodl	equ	0xFF3
  5539                           intcon	equ	0xFF2
  5540                           indf0	equ	0xFEF
  5541                           postinc0	equ	0xFEE
  5542                           fsr0h	equ	0xFEA
  5543                           fsr0l	equ	0xFE9
  5544                           wreg	equ	0xFE8
  5545                           indf1	equ	0xFE7
  5546                           postdec1	equ	0xFE5
  5547                           plusw1	equ	0xFE3
  5548                           fsr1h	equ	0xFE2
  5549                           fsr1l	equ	0xFE1
  5550                           indf2	equ	0xFDF
  5551                           plusw2	equ	0xFDB
  5552                           fsr2h	equ	0xFDA
  5553                           fsr2l	equ	0xFD9
  5554                           status	equ	0xFD8
  5555                           
  5556 ;; *************** function _sprintf *****************
  5557 ;; Defined at:
  5558 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  sp              2   29[COMRAM] PTR unsigned char 
  5561 ;;		 -> main@print(5), ESP8266_Link_Server@cCmd(120), ESP8266_Link_Server@cStr(100), ESP8266_BuildAP@cCmd(120), 
  5562 ;;		 -> ESP8266_JoinAP@cCmd(120), ESP8266_SendString@cStr(20), 
  5563 ;;  f               2   31[COMRAM] PTR const unsigned char 
  5564 ;;		 -> STR_64(3), STR_63(3), STR_25(17), STR_24(20), 
  5565 ;;		 -> STR_22(13), STR_20(13), STR_18(26), STR_15(21), 
  5566 ;;		 -> STR_1(19), 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  idx             1   43[COMRAM] unsigned char 
  5569 ;;  tmpval          4    0        struct .
  5570 ;;  flag            2   62[COMRAM] unsigned short 
  5571 ;;  width           2   59[COMRAM] int 
  5572 ;;  val             2   56[COMRAM] unsigned int 
  5573 ;;  ap              2   54[COMRAM] PTR void [1]
  5574 ;;		 -> ?_sprintf(2), 
  5575 ;;  len             2   52[COMRAM] unsigned int 
  5576 ;;  cp              2   50[COMRAM] PTR const unsigned char 
  5577 ;;		 -> STR_65(7), sprintf@c(1), STR_58(5), STR_57(12), 
  5578 ;;		 -> STR_52(10), STR_51(4), STR_40(2), STR_39(10), 
  5579 ;;		 -> STR_38(4), STR_23(4), STR_21(4), ESP8266_Link_Server@cStr(100), 
  5580 ;;  c               1   61[COMRAM] char 
  5581 ;;  prec            1   58[COMRAM] char 
  5582 ;; Return value:  Size  Location     Type
  5583 ;;                  2   29[COMRAM] int 
  5584 ;; Registers used:
  5585 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5591 ;;      Params:        10       0       0       0       0       0       0
  5592 ;;      Locals:        21       0       0       0       0       0       0
  5593 ;;      Temps:          4       0       0       0       0       0       0
  5594 ;;      Totals:        35       0       0       0       0       0       0
  5595 ;;Total ram usage:       35 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    2
  5598 ;; This function calls:
  5599 ;;		___lwdiv
  5600 ;;		___lwmod
  5601 ;;		___wmul
  5602 ;;		_isdigit
  5603 ;; This function is called by:
  5604 ;;		_ESP8266_JoinAP
  5605 ;;		_ESP8266_Link_Server
  5606 ;;		_main
  5607 ;;		_ESP8266_SendString
  5608 ;;		_ESP8266_BuildAP
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text26
  5613  000012                     __ptext26:
  5614                           	opt stack 0
  5615  000012                     _sprintf:
  5616                           	opt stack 28
  5617                           
  5618                           ;doprnt.c: 494: va_list ap;
  5619                           ;doprnt.c: 499: signed char c;
  5620                           ;doprnt.c: 501: int width;
  5621                           ;doprnt.c: 506: signed char prec;
  5622                           ;doprnt.c: 508: unsigned short flag;
  5623                           ;doprnt.c: 523: union {
  5624                           ;doprnt.c: 524: unsigned long vd;
  5625                           ;doprnt.c: 525: double integ;
  5626                           ;doprnt.c: 526: } tmpval;
  5627                           ;doprnt.c: 528: unsigned int val;
  5628                           ;doprnt.c: 529: unsigned len;
  5629                           ;doprnt.c: 530: const char * cp;
  5630                           ;doprnt.c: 533: *ap = __va_start();
  5631                           
  5632                           ;incstack = 0
  5633  000012  0E22               	movlw	low (?_sprintf+4)
  5634  000014  6E37               	movwf	sprintf@ap,c
  5635  000016  0E00               	movlw	high (?_sprintf+4)
  5636  000018  6E38               	movwf	sprintf@ap+1,c
  5637                           
  5638                           ;doprnt.c: 536: while(c = *f++) {
  5639  00001A  EF46  F004         	goto	l4311
  5640  00001E                     l3957:
  5641                           
  5642                           ;doprnt.c: 538: if(c != '%')
  5643  00001E  0E25               	movlw	37
  5644  000020  183E               	xorwf	sprintf@c,w,c
  5645  000022  B4D8               	btfsc	status,2,c
  5646  000024  D00A               	goto	l3963
  5647                           
  5648                           ;doprnt.c: 540: {
  5649                           ;doprnt.c: 541: ((*sp++ = (c)));
  5650  000026  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5651  00002A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5652  00002E  C03E  FFDF         	movff	sprintf@c,indf2
  5653  000032  4A1E               	infsnz	sprintf@sp,f,c
  5654  000034  2A1F               	incf	sprintf@sp+1,f,c
  5655                           
  5656                           ;doprnt.c: 542: continue;
  5657  000036  EF46  F004         	goto	l4311
  5658  00003A                     l3963:
  5659                           
  5660                           ;doprnt.c: 543: }
  5661                           ;doprnt.c: 546: width = 0;
  5662  00003A  0E00               	movlw	0
  5663  00003C  6E3D               	movwf	sprintf@width+1,c
  5664  00003E  0E00               	movlw	0
  5665  000040  6E3C               	movwf	sprintf@width,c
  5666                           
  5667                           ;doprnt.c: 548: flag = 0;
  5668  000042  0E00               	movlw	0
  5669  000044  6E40               	movwf	sprintf@flag+1,c
  5670  000046  0E00               	movlw	0
  5671  000048  6E3F               	movwf	sprintf@flag,c
  5672                           
  5673                           ;doprnt.c: 551: switch(*f) {
  5674                           
  5675                           ;doprnt.c: 550: for(;;) {
  5676  00004A  D009               	goto	l3975
  5677  00004C                     l3965:
  5678                           
  5679                           ;doprnt.c: 554: flag |= 0x08;
  5680  00004C  863F               	bsf	sprintf@flag,3,c
  5681  00004E  D005               	goto	L4
  5682  000050                     l3967:
  5683                           
  5684                           ;doprnt.c: 561: flag |= 0x01;
  5685  000050  803F               	bsf	sprintf@flag,0,c
  5686  000052  D003               	goto	L4
  5687  000054                     l3969:
  5688                           
  5689                           ;doprnt.c: 574: flag |= 0x800;
  5690  000054  8640               	bsf	sprintf@flag+1,3,c
  5691  000056  D001               	goto	L4
  5692  000058                     l3971:
  5693                           
  5694                           ;doprnt.c: 580: flag |= 0x04;
  5695  000058  843F               	bsf	sprintf@flag,2,c
  5696  00005A                     L4:
  5697                           
  5698                           ;doprnt.c: 581: f++;
  5699  00005A  4A20               	infsnz	sprintf@f,f,c
  5700  00005C  2A21               	incf	sprintf@f+1,f,c
  5701  00005E                     l3975:
  5702  00005E  C020  FFF6         	movff	sprintf@f,tblptrl
  5703  000062  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5704  000066                     	if	0	;tblptru may be non-zero
  5705  000066                     	endif
  5706  000066                     	if	0	;tblptru may be non-zero
  5707  000066                     	endif
  5708  000066  0008               	tblrd		*
  5709  000068  50F5               	movf	tablat,w,c
  5710                           
  5711                           ; Switch size 1, requested type "space"
  5712                           ; Number of cases is 4, Range of values is 32 to 48
  5713                           ; switch strategies available:
  5714                           ; Name         Instructions Cycles
  5715                           ; simple_byte           13     7 (average)
  5716                           ;	Chosen strategy is simple_byte
  5717  00006A  0A20               	xorlw	32	; case 32
  5718  00006C  B4D8               	btfsc	status,2,c
  5719  00006E  D7F0               	goto	l3967
  5720  000070  0A03               	xorlw	3	; case 35
  5721  000072  B4D8               	btfsc	status,2,c
  5722  000074  D7EF               	goto	l3969
  5723  000076  0A0E               	xorlw	14	; case 45
  5724  000078  B4D8               	btfsc	status,2,c
  5725  00007A  D7E8               	goto	l3965
  5726  00007C  0A1D               	xorlw	29	; case 48
  5727  00007E  B4D8               	btfsc	status,2,c
  5728  000080  D7EB               	goto	l3971
  5729                           
  5730                           ;doprnt.c: 593: if(flag & 0x08)
  5731                           
  5732                           ;doprnt.c: 586: }
  5733                           
  5734                           ;doprnt.c: 585: break;
  5735  000082  B63F               	btfsc	sprintf@flag,3,c
  5736                           
  5737                           ;doprnt.c: 594: flag &= ~0x04;
  5738  000084  943F               	bcf	sprintf@flag,2,c
  5739                           
  5740                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5741  000086  C020  FFF6         	movff	sprintf@f,tblptrl
  5742  00008A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5743  00008E                     	if	0	;tblptru may be non-zero
  5744  00008E                     	endif
  5745  00008E                     	if	0	;tblptru may be non-zero
  5746  00008E                     	endif
  5747  00008E  0008               	tblrd		*
  5748  000090  50F5               	movf	tablat,w,c
  5749  000092  EC26  F00C         	call	_isdigit
  5750  000096  A0D8               	btfss	status,0,c
  5751  000098  D033               	goto	l3991
  5752                           
  5753                           ;doprnt.c: 598: width = 0;
  5754  00009A  0E00               	movlw	0
  5755  00009C  6E3D               	movwf	sprintf@width+1,c
  5756  00009E  0E00               	movlw	0
  5757  0000A0  6E3C               	movwf	sprintf@width,c
  5758  0000A2                     l3983:
  5759                           
  5760                           ;doprnt.c: 600: width *= 10;
  5761  0000A2  C03C  F012         	movff	sprintf@width,___wmul@multiplier
  5762  0000A6  C03D  F013         	movff	sprintf@width+1,___wmul@multiplier+1
  5763  0000AA  0E00               	movlw	0
  5764  0000AC  6E15               	movwf	___wmul@multiplicand+1,c
  5765  0000AE  0E0A               	movlw	10
  5766  0000B0  6E14               	movwf	___wmul@multiplicand,c
  5767  0000B2  ECBA  F00B         	call	___wmul	;wreg free
  5768  0000B6  C012  F03C         	movff	?___wmul,sprintf@width
  5769  0000BA  C013  F03D         	movff	?___wmul+1,sprintf@width+1
  5770                           
  5771                           ;doprnt.c: 601: width += *f++ - '0';
  5772  0000BE  0ED0               	movlw	208
  5773  0000C0  6E28               	movwf	??_sprintf& (0+255),c
  5774  0000C2  0EFF               	movlw	255
  5775  0000C4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5776  0000C6  C020  FFF6         	movff	sprintf@f,tblptrl
  5777  0000CA  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5778  0000CE                     	if	0	;tblptru may be non-zero
  5779  0000CE                     	endif
  5780  0000CE                     	if	0	;tblptru may be non-zero
  5781  0000CE                     	endif
  5782  0000CE  0008               	tblrd		*
  5783  0000D0  50F5               	movf	tablat,w,c
  5784  0000D2  6E2A               	movwf	(??_sprintf+2)& (0+255),c
  5785  0000D4  6A2B               	clrf	(??_sprintf+3)& (0+255),c
  5786  0000D6  5028               	movf	??_sprintf,w,c
  5787  0000D8  262A               	addwf	??_sprintf+2,f,c
  5788  0000DA  5029               	movf	??_sprintf+1,w,c
  5789  0000DC  222B               	addwfc	??_sprintf+3,f,c
  5790  0000DE  502A               	movf	??_sprintf+2,w,c
  5791  0000E0  263C               	addwf	sprintf@width,f,c
  5792  0000E2  502B               	movf	??_sprintf+3,w,c
  5793  0000E4  223D               	addwfc	sprintf@width+1,f,c
  5794  0000E6  4A20               	infsnz	sprintf@f,f,c
  5795  0000E8  2A21               	incf	sprintf@f+1,f,c
  5796                           
  5797                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5798  0000EA  C020  FFF6         	movff	sprintf@f,tblptrl
  5799  0000EE  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5800  0000F2                     	if	0	;tblptru may be non-zero
  5801  0000F2                     	endif
  5802  0000F2                     	if	0	;tblptru may be non-zero
  5803  0000F2                     	endif
  5804  0000F2  0008               	tblrd		*
  5805  0000F4  50F5               	movf	tablat,w,c
  5806  0000F6  EC26  F00C         	call	_isdigit
  5807  0000FA  A0D8               	btfss	status,0,c
  5808  0000FC  D018               	goto	l3999
  5809  0000FE  D7D1               	goto	l3983
  5810  000100                     l3991:
  5811  000100  C020  FFF6         	movff	sprintf@f,tblptrl
  5812  000104  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5813  000108                     	if	0	;tblptru may be non-zero
  5814  000108                     	endif
  5815  000108                     	if	0	;tblptru may be non-zero
  5816  000108                     	endif
  5817  000108  0008               	tblrd		*
  5818  00010A  50F5               	movf	tablat,w,c
  5819  00010C  0A2A               	xorlw	42
  5820  00010E  A4D8               	btfss	status,2,c
  5821  000110  D00E               	goto	l3999
  5822                           
  5823                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  5824  000112  C037  FFD9         	movff	sprintf@ap,fsr2l
  5825  000116  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  5826  00011A  CFDE F03C          	movff	postinc2,sprintf@width
  5827  00011E  CFDD F03D          	movff	postdec2,sprintf@width+1
  5828  000122  0E02               	movlw	2
  5829  000124  2637               	addwf	sprintf@ap,f,c
  5830  000126  0E00               	movlw	0
  5831  000128  2238               	addwfc	sprintf@ap+1,f,c
  5832                           
  5833                           ;doprnt.c: 606: f++;
  5834  00012A  4A20               	infsnz	sprintf@f,f,c
  5835  00012C  2A21               	incf	sprintf@f+1,f,c
  5836  00012E                     l3999:
  5837                           
  5838                           ;doprnt.c: 608: }
  5839                           ;doprnt.c: 611: if(*f == '.') {
  5840  00012E  C020  FFF6         	movff	sprintf@f,tblptrl
  5841  000132  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5842  000136                     	if	0	;tblptru may be non-zero
  5843  000136                     	endif
  5844  000136                     	if	0	;tblptru may be non-zero
  5845  000136                     	endif
  5846  000136  0008               	tblrd		*
  5847  000138  50F5               	movf	tablat,w,c
  5848  00013A  0A2E               	xorlw	46
  5849  00013C  A4D8               	btfss	status,2,c
  5850  00013E  D036               	goto	l4019
  5851                           
  5852                           ;doprnt.c: 612: flag |= 0x4000;
  5853  000140  8C40               	bsf	sprintf@flag+1,6,c
  5854                           
  5855                           ;doprnt.c: 613: f++;
  5856  000142  4A20               	infsnz	sprintf@f,f,c
  5857  000144  2A21               	incf	sprintf@f+1,f,c
  5858                           
  5859                           ;doprnt.c: 615: if(*f == '*') {
  5860  000146  C020  FFF6         	movff	sprintf@f,tblptrl
  5861  00014A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5862  00014E                     	if	0	;tblptru may be non-zero
  5863  00014E                     	endif
  5864  00014E                     	if	0	;tblptru may be non-zero
  5865  00014E                     	endif
  5866  00014E  0008               	tblrd		*
  5867  000150  50F5               	movf	tablat,w,c
  5868  000152  0A2A               	xorlw	42
  5869  000154  A4D8               	btfss	status,2,c
  5870  000156  D00D               	goto	l4011
  5871                           
  5872                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  5873  000158  C037  FFD9         	movff	sprintf@ap,fsr2l
  5874  00015C  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  5875  000160  50DF               	movf	indf2,w,c
  5876  000162  6E3B               	movwf	sprintf@prec,c
  5877  000164  0E02               	movlw	2
  5878  000166  2637               	addwf	sprintf@ap,f,c
  5879  000168  0E00               	movlw	0
  5880  00016A  2238               	addwfc	sprintf@ap+1,f,c
  5881                           
  5882                           ;doprnt.c: 617: f++;
  5883  00016C  4A20               	infsnz	sprintf@f,f,c
  5884  00016E  2A21               	incf	sprintf@f+1,f,c
  5885                           
  5886                           ;doprnt.c: 618: } else
  5887  000170  D0DB               	goto	l4089
  5888  000172                     l4011:
  5889                           
  5890                           ;doprnt.c: 620: {
  5891                           ;doprnt.c: 621: prec = 0;
  5892  000172  0E00               	movlw	0
  5893  000174  6E3B               	movwf	sprintf@prec,c
  5894                           
  5895                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5896  000176  D00F               	goto	l4017
  5897  000178                     l4013:
  5898                           
  5899                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5900  000178  C020  FFF6         	movff	sprintf@f,tblptrl
  5901  00017C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5902  000180                     	if	0	;tblptru may be non-zero
  5903  000180                     	endif
  5904  000180                     	if	0	;tblptru may be non-zero
  5905  000180                     	endif
  5906  000180  0008               	tblrd		*
  5907  000182  CFF5 F028          	movff	tablat,??_sprintf
  5908  000186  503B               	movf	sprintf@prec,w,c
  5909  000188  0D0A               	mullw	10
  5910  00018A  50F3               	movf	prodl,w,c
  5911  00018C  2428               	addwf	??_sprintf,w,c
  5912  00018E  0FD0               	addlw	208
  5913  000190  6E3B               	movwf	sprintf@prec,c
  5914  000192  4A20               	infsnz	sprintf@f,f,c
  5915  000194  2A21               	incf	sprintf@f+1,f,c
  5916  000196                     l4017:
  5917  000196  C020  FFF6         	movff	sprintf@f,tblptrl
  5918  00019A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5919  00019E                     	if	0	;tblptru may be non-zero
  5920  00019E                     	endif
  5921  00019E                     	if	0	;tblptru may be non-zero
  5922  00019E                     	endif
  5923  00019E  0008               	tblrd		*
  5924  0001A0  50F5               	movf	tablat,w,c
  5925  0001A2  EC26  F00C         	call	_isdigit
  5926  0001A6  A0D8               	btfss	status,0,c
  5927  0001A8  D0BF               	goto	l4089
  5928  0001AA  D7E6               	goto	l4013
  5929  0001AC                     l4019:
  5930                           
  5931                           ;doprnt.c: 626: prec = 0;
  5932  0001AC  0E00               	movlw	0
  5933  0001AE  6E3B               	movwf	sprintf@prec,c
  5934                           
  5935                           ;doprnt.c: 630: }
  5936                           ;doprnt.c: 635: switch(c = *f++) {
  5937  0001B0  D0BB               	goto	l4089
  5938  0001B2                     l4021:
  5939                           
  5940                           ;doprnt.c: 691: flag |= 0x40;
  5941  0001B2  8C3F               	bsf	sprintf@flag,6,c
  5942                           
  5943                           ;doprnt.c: 698: case 'i':
  5944                           ;doprnt.c: 699: break;
  5945                           
  5946                           ;doprnt.c: 697: case 'd':
  5947                           
  5948                           ;doprnt.c: 693: break;
  5949  0001B4  D0E2               	goto	l4091
  5950  0001B6                     l4023:
  5951                           
  5952                           ;doprnt.c: 707: flag |= 0x2000;
  5953  0001B6  8A40               	bsf	sprintf@flag+1,5,c
  5954  0001B8                     l602:
  5955                           
  5956                           ;doprnt.c: 714: flag |= 0x20;
  5957  0001B8  8A3F               	bsf	sprintf@flag,5,c
  5958  0001BA                     l603:
  5959                           
  5960                           ;doprnt.c: 721: flag |= 0x80;
  5961  0001BA  8E3F               	bsf	sprintf@flag,7,c
  5962                           
  5963                           ;doprnt.c: 723: break;
  5964  0001BC  D0DE               	goto	l4091
  5965  0001BE                     l4025:
  5966                           
  5967                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5968  0001BE  C037  FFD9         	movff	sprintf@ap,fsr2l
  5969  0001C2  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  5970  0001C6  CFDE F033          	movff	postinc2,sprintf@cp
  5971  0001CA  CFDD F034          	movff	postdec2,sprintf@cp+1
  5972  0001CE  0E02               	movlw	2
  5973  0001D0  2637               	addwf	sprintf@ap,f,c
  5974  0001D2  0E00               	movlw	0
  5975  0001D4  2238               	addwfc	sprintf@ap+1,f,c
  5976                           
  5977                           ;doprnt.c: 740: if(!cp)
  5978  0001D6  5033               	movf	sprintf@cp,w,c
  5979  0001D8  1034               	iorwf	sprintf@cp+1,w,c
  5980  0001DA  A4D8               	btfss	status,2,c
  5981  0001DC  D004               	goto	l4033
  5982                           
  5983                           ;doprnt.c: 741: cp = "(null)";
  5984  0001DE  0EC2               	movlw	low STR_65
  5985  0001E0  6E33               	movwf	sprintf@cp,c
  5986  0001E2  0E7F               	movlw	high STR_65
  5987  0001E4  6E34               	movwf	sprintf@cp+1,c
  5988  0001E6                     l4033:
  5989                           
  5990                           ;doprnt.c: 745: len = 0;
  5991  0001E6  0E00               	movlw	0
  5992  0001E8  6E36               	movwf	sprintf@len+1,c
  5993  0001EA  0E00               	movlw	0
  5994  0001EC  6E35               	movwf	sprintf@len,c
  5995                           
  5996                           ;doprnt.c: 746: while(cp[len])
  5997  0001EE  D002               	goto	l4037
  5998  0001F0                     l4035:
  5999                           
  6000                           ;doprnt.c: 747: len++;
  6001  0001F0  4A35               	infsnz	sprintf@len,f,c
  6002  0001F2  2A36               	incf	sprintf@len+1,f,c
  6003  0001F4                     l4037:
  6004  0001F4  5035               	movf	sprintf@len,w,c
  6005  0001F6  2433               	addwf	sprintf@cp,w,c
  6006  0001F8  6E28               	movwf	??_sprintf& (0+255),c
  6007  0001FA  5036               	movf	sprintf@len+1,w,c
  6008  0001FC  2034               	addwfc	sprintf@cp+1,w,c
  6009  0001FE  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6010  000200  C028  FFF6         	movff	??_sprintf,tblptrl
  6011  000204  C029  FFF7         	movff	??_sprintf+1,tblptrh
  6012  000208  6AF8               	clrf	tblptru,c
  6013  00020A  0E05               	movlw	(high __ramtop+-1)
  6014  00020C  64F7               	cpfsgt	tblptrh,c
  6015  00020E  D003               	bra	u3657
  6016  000210  0008               	tblrd		*
  6017  000212  50F5               	movf	tablat,w,c
  6018  000214  D005               	bra	u3650
  6019  000216                     u3657:
  6020  000216  CFF6 FFE9          	movff	tblptrl,fsr0l
  6021  00021A  CFF7 FFEA          	movff	tblptrh,fsr0h
  6022  00021E  50EF               	movf	indf0,w,c
  6023  000220                     u3650:
  6024  000220  0900               	iorlw	0
  6025  000222  A4D8               	btfss	status,2,c
  6026  000224  D7E5               	goto	l4035
  6027  000226                     l4039:
  6028                           
  6029                           ;doprnt.c: 753: if(prec && prec < len)
  6030  000226  503B               	movf	sprintf@prec,w,c
  6031  000228  B4D8               	btfsc	status,2,c
  6032  00022A  D010               	goto	l4045
  6033  00022C  C03B  F028         	movff	sprintf@prec,??_sprintf
  6034  000230  6A29               	clrf	(??_sprintf+1)& (0+255),c
  6035  000232  BE28               	btfsc	??_sprintf& (0+255),7,c
  6036  000234  0629               	decf	(??_sprintf+1)& (0+255),f,c
  6037  000236  5035               	movf	sprintf@len,w,c
  6038  000238  5C28               	subwf	??_sprintf,w,c
  6039  00023A  5036               	movf	sprintf@len+1,w,c
  6040  00023C  5829               	subwfb	??_sprintf+1,w,c
  6041  00023E  B0D8               	btfsc	status,0,c
  6042  000240  D005               	goto	l4045
  6043                           
  6044                           ;doprnt.c: 754: len = prec;
  6045  000242  503B               	movf	sprintf@prec,w,c
  6046  000244  6E35               	movwf	sprintf@len,c
  6047  000246  6A36               	clrf	sprintf@len+1,c
  6048  000248  BE35               	btfsc	sprintf@len,7,c
  6049  00024A  0636               	decf	sprintf@len+1,f,c
  6050  00024C                     l4045:
  6051                           
  6052                           ;doprnt.c: 757: if(width > len)
  6053  00024C  503C               	movf	sprintf@width,w,c
  6054  00024E  5C35               	subwf	sprintf@len,w,c
  6055  000250  503D               	movf	sprintf@width+1,w,c
  6056  000252  5836               	subwfb	sprintf@len+1,w,c
  6057  000254  B0D8               	btfsc	status,0,c
  6058  000256  D005               	goto	l4049
  6059                           
  6060                           ;doprnt.c: 758: width -= len;
  6061  000258  5035               	movf	sprintf@len,w,c
  6062  00025A  5E3C               	subwf	sprintf@width,f,c
  6063  00025C  5036               	movf	sprintf@len+1,w,c
  6064  00025E  5A3D               	subwfb	sprintf@width+1,f,c
  6065  000260  D004               	goto	l4051
  6066  000262                     l4049:
  6067                           
  6068                           ;doprnt.c: 759: else
  6069                           ;doprnt.c: 760: width = 0;
  6070  000262  0E00               	movlw	0
  6071  000264  6E3D               	movwf	sprintf@width+1,c
  6072  000266  0E00               	movlw	0
  6073  000268  6E3C               	movwf	sprintf@width,c
  6074  00026A                     l4051:
  6075                           
  6076                           ;doprnt.c: 762: if(!(flag & 0x08))
  6077  00026A  A63F               	btfss	sprintf@flag,3,c
  6078  00026C  D009               	goto	l4059
  6079  00026E  D02A               	goto	l4067
  6080  000270                     l4055:
  6081                           
  6082                           ;doprnt.c: 765: ((*sp++ = (' ')));
  6083  000270  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6084  000274  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6085  000278  0E20               	movlw	32
  6086  00027A  6EDF               	movwf	indf2,c
  6087  00027C  4A1E               	infsnz	sprintf@sp,f,c
  6088  00027E  2A1F               	incf	sprintf@sp+1,f,c
  6089  000280                     l4059:
  6090  000280  063C               	decf	sprintf@width,f,c
  6091  000282  A0D8               	btfss	status,0,c
  6092  000284  063D               	decf	sprintf@width+1,f,c
  6093  000286  283C               	incf	sprintf@width,w,c
  6094  000288  E1F3               	bnz	l4055
  6095  00028A  283D               	incf	sprintf@width+1,w,c
  6096  00028C  B4D8               	btfsc	status,2,c
  6097  00028E  D01A               	goto	l4067
  6098  000290  D7EF               	goto	l4055
  6099  000292                     l4061:
  6100                           
  6101                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  6102  000292  C033  FFF6         	movff	sprintf@cp,tblptrl
  6103  000296  C034  FFF7         	movff	sprintf@cp+1,tblptrh
  6104  00029A  6AF8               	clrf	tblptru,c
  6105  00029C  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6106  0002A0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6107  0002A4  0E05               	movlw	(high __ramtop+-1)
  6108  0002A6  64F7               	cpfsgt	tblptrh,c
  6109  0002A8  D003               	bra	u3727
  6110  0002AA  0008               	tblrd		*
  6111  0002AC  50F5               	movf	tablat,w,c
  6112  0002AE  D005               	bra	u3720
  6113  0002B0                     u3727:
  6114  0002B0  CFF6 FFE9          	movff	tblptrl,fsr0l
  6115  0002B4  CFF7 FFEA          	movff	tblptrh,fsr0h
  6116  0002B8  50EF               	movf	indf0,w,c
  6117  0002BA                     u3720:
  6118  0002BA  6EDF               	movwf	indf2,c
  6119  0002BC  4A33               	infsnz	sprintf@cp,f,c
  6120  0002BE  2A34               	incf	sprintf@cp+1,f,c
  6121  0002C0  4A1E               	infsnz	sprintf@sp,f,c
  6122  0002C2  2A1F               	incf	sprintf@sp+1,f,c
  6123  0002C4                     l4067:
  6124  0002C4  0635               	decf	sprintf@len,f,c
  6125  0002C6  A0D8               	btfss	status,0,c
  6126  0002C8  0636               	decf	sprintf@len+1,f,c
  6127  0002CA  2835               	incf	sprintf@len,w,c
  6128  0002CC  E1E2               	bnz	l4061
  6129  0002CE  2836               	incf	sprintf@len+1,w,c
  6130  0002D0  A4D8               	btfss	status,2,c
  6131  0002D2  D7DF               	goto	l4061
  6132                           
  6133                           ;doprnt.c: 770: if(flag & 0x08)
  6134  0002D4  B63F               	btfsc	sprintf@flag,3,c
  6135  0002D6  D009               	goto	l4075
  6136  0002D8  D2D9               	goto	l4311
  6137  0002DA                     l4071:
  6138                           
  6139                           ;doprnt.c: 772: ((*sp++ = (' ')));
  6140  0002DA  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6141  0002DE  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6142  0002E2  0E20               	movlw	32
  6143  0002E4  6EDF               	movwf	indf2,c
  6144  0002E6  4A1E               	infsnz	sprintf@sp,f,c
  6145  0002E8  2A1F               	incf	sprintf@sp+1,f,c
  6146  0002EA                     l4075:
  6147  0002EA  063C               	decf	sprintf@width,f,c
  6148  0002EC  A0D8               	btfss	status,0,c
  6149  0002EE  063D               	decf	sprintf@width+1,f,c
  6150  0002F0  283C               	incf	sprintf@width,w,c
  6151  0002F2  E1F3               	bnz	l4071
  6152  0002F4  283D               	incf	sprintf@width+1,w,c
  6153  0002F6  B4D8               	btfsc	status,2,c
  6154  0002F8  D2C9               	goto	l4311
  6155  0002FA  D7EF               	goto	l4071
  6156  0002FC                     l4077:
  6157                           
  6158                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6159  0002FC  C037  FFD9         	movff	sprintf@ap,fsr2l
  6160  000300  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  6161  000304  50DF               	movf	indf2,w,c
  6162  000306  6E3E               	movwf	sprintf@c,c
  6163  000308  0E02               	movlw	2
  6164  00030A  2637               	addwf	sprintf@ap,f,c
  6165  00030C  0E00               	movlw	0
  6166  00030E  2238               	addwfc	sprintf@ap+1,f,c
  6167  000310                     l4081:
  6168                           
  6169                           ;doprnt.c: 805: cp = (char *)&c;
  6170  000310  0E3E               	movlw	low sprintf@c
  6171  000312  6E33               	movwf	sprintf@cp,c
  6172  000314  0E00               	movlw	high sprintf@c
  6173  000316  6E34               	movwf	sprintf@cp+1,c
  6174                           
  6175                           ;doprnt.c: 806: len = 1;
  6176  000318  0E00               	movlw	0
  6177  00031A  6E36               	movwf	sprintf@len+1,c
  6178  00031C  0E01               	movlw	1
  6179  00031E  6E35               	movwf	sprintf@len,c
  6180                           
  6181                           ;doprnt.c: 807: goto dostring;
  6182  000320  D782               	goto	l4039
  6183  000322                     l4085:
  6184                           
  6185                           ;doprnt.c: 818: flag |= 0xC0;
  6186  000322  0EC0               	movlw	192
  6187  000324  123F               	iorwf	sprintf@flag,f,c
  6188                           
  6189                           ;doprnt.c: 822: }
  6190                           
  6191                           ;doprnt.c: 819: break;
  6192  000326  D029               	goto	l4091
  6193  000328                     l4089:
  6194  000328  C020  FFF6         	movff	sprintf@f,tblptrl
  6195  00032C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  6196  000330  4A20               	infsnz	sprintf@f,f,c
  6197  000332  2A21               	incf	sprintf@f+1,f,c
  6198  000334                     	if	0	;tblptru may be non-zero
  6199  000334                     	endif
  6200  000334                     	if	0	;tblptru may be non-zero
  6201  000334                     	endif
  6202  000334  0008               	tblrd		*
  6203  000336  CFF5 F03E          	movff	tablat,sprintf@c
  6204  00033A  503E               	movf	sprintf@c,w,c
  6205                           
  6206                           ; Switch size 1, requested type "space"
  6207                           ; Number of cases is 10, Range of values is 0 to 120
  6208                           ; switch strategies available:
  6209                           ; Name         Instructions Cycles
  6210                           ; simple_byte           31    16 (average)
  6211                           ;	Chosen strategy is simple_byte
  6212  00033C  0A00               	xorlw	0	; case 0
  6213  00033E  B4D8               	btfsc	status,2,c
  6214  000340  D2B2               	goto	l4313
  6215  000342  0A58               	xorlw	88	; case 88
  6216  000344  B4D8               	btfsc	status,2,c
  6217  000346  D738               	goto	l602
  6218  000348  0A3B               	xorlw	59	; case 99
  6219  00034A  B4D8               	btfsc	status,2,c
  6220  00034C  D7D7               	goto	l4077
  6221  00034E  0A07               	xorlw	7	; case 100
  6222  000350  B4D8               	btfsc	status,2,c
  6223  000352  D013               	goto	l4091
  6224  000354  0A0D               	xorlw	13	; case 105
  6225  000356  B4D8               	btfsc	status,2,c
  6226  000358  D010               	goto	l4091
  6227  00035A  0A06               	xorlw	6	; case 111
  6228  00035C  B4D8               	btfsc	status,2,c
  6229  00035E  D729               	goto	l4021
  6230  000360  0A1F               	xorlw	31	; case 112
  6231  000362  B4D8               	btfsc	status,2,c
  6232  000364  D728               	goto	l4023
  6233  000366  0A03               	xorlw	3	; case 115
  6234  000368  B4D8               	btfsc	status,2,c
  6235  00036A  D729               	goto	l4025
  6236  00036C  0A06               	xorlw	6	; case 117
  6237  00036E  B4D8               	btfsc	status,2,c
  6238  000370  D7D8               	goto	l4085
  6239  000372  0A0D               	xorlw	13	; case 120
  6240  000374  B4D8               	btfsc	status,2,c
  6241  000376  D721               	goto	l603
  6242  000378  D7CB               	goto	l4081
  6243  00037A                     l4091:
  6244                           
  6245                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  6246  00037A  0EC0               	movlw	192
  6247  00037C  143F               	andwf	sprintf@flag,w,c
  6248  00037E  6E28               	movwf	??_sprintf& (0+255),c
  6249  000380  0E00               	movlw	0
  6250  000382  1440               	andwf	sprintf@flag+1,w,c
  6251  000384  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6252  000386  5028               	movf	??_sprintf,w,c
  6253  000388  1029               	iorwf	??_sprintf+1,w,c
  6254  00038A  A4D8               	btfss	status,2,c
  6255  00038C  D015               	goto	l4103
  6256                           
  6257                           ;doprnt.c: 1253: {
  6258                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6259  00038E  C037  FFD9         	movff	sprintf@ap,fsr2l
  6260  000392  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  6261  000396  CFDE F039          	movff	postinc2,sprintf@val
  6262  00039A  CFDD F03A          	movff	postdec2,sprintf@val+1
  6263  00039E  0E02               	movlw	2
  6264  0003A0  2637               	addwf	sprintf@ap,f,c
  6265  0003A2  0E00               	movlw	0
  6266  0003A4  2238               	addwfc	sprintf@ap+1,f,c
  6267                           
  6268                           ;doprnt.c: 1261: if((int)val < 0) {
  6269  0003A6  AE3A               	btfss	sprintf@val+1,7,c
  6270  0003A8  D013               	goto	l4107
  6271                           
  6272                           ;doprnt.c: 1262: flag |= 0x03;
  6273  0003AA  0E03               	movlw	3
  6274  0003AC  123F               	iorwf	sprintf@flag,f,c
  6275                           
  6276                           ;doprnt.c: 1263: val = -val;
  6277  0003AE  6C39               	negf	sprintf@val,c
  6278  0003B0  1E3A               	comf	sprintf@val+1,f,c
  6279  0003B2  B0D8               	btfsc	status,0,c
  6280  0003B4  2A3A               	incf	sprintf@val+1,f,c
  6281                           
  6282                           ;doprnt.c: 1264: }
  6283                           ;doprnt.c: 1266: }
  6284  0003B6  D00C               	goto	l4107
  6285  0003B8                     l4103:
  6286                           
  6287                           ;doprnt.c: 1268: else
  6288                           ;doprnt.c: 1273: {
  6289                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6290  0003B8  C037  FFD9         	movff	sprintf@ap,fsr2l
  6291  0003BC  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  6292  0003C0  CFDE F039          	movff	postinc2,sprintf@val
  6293  0003C4  CFDD F03A          	movff	postdec2,sprintf@val+1
  6294  0003C8  0E02               	movlw	2
  6295  0003CA  2637               	addwf	sprintf@ap,f,c
  6296  0003CC  0E00               	movlw	0
  6297  0003CE  2238               	addwfc	sprintf@ap+1,f,c
  6298  0003D0                     l4107:
  6299                           
  6300                           ;doprnt.c: 1287: }
  6301                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6302  0003D0  503B               	movf	sprintf@prec,w,c
  6303  0003D2  A4D8               	btfss	status,2,c
  6304  0003D4  D04E               	goto	l4157
  6305  0003D6  5039               	movf	sprintf@val,w,c
  6306  0003D8  103A               	iorwf	sprintf@val+1,w,c
  6307  0003DA  A4D8               	btfss	status,2,c
  6308  0003DC  D04A               	goto	l4157
  6309                           
  6310                           ;doprnt.c: 1291: prec++;
  6311  0003DE  2A3B               	incf	sprintf@prec,f,c
  6312                           
  6313                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  6314  0003E0  D048               	goto	l4157
  6315  0003E2                     l4113:
  6316                           
  6317                           ;doprnt.c: 1302: case 0xC0:
  6318                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6319  0003E2  0E01               	movlw	1
  6320  0003E4  6E3E               	movwf	sprintf@c,c
  6321  0003E6                     l4115:
  6322  0003E6  0E05               	movlw	5
  6323  0003E8  183E               	xorwf	sprintf@c,w,c
  6324  0003EA  B4D8               	btfsc	status,2,c
  6325  0003EC  D050               	goto	l4159
  6326                           
  6327                           ;doprnt.c: 1306: if(val < dpowers[c])
  6328  0003EE  503E               	movf	sprintf@c,w,c
  6329  0003F0  0D02               	mullw	2
  6330  0003F2  0E0B               	movlw	low _dpowers
  6331  0003F4  24F3               	addwf	prodl,w,c
  6332  0003F6  6EF6               	movwf	tblptrl,c
  6333  0003F8  0E7E               	movlw	high _dpowers
  6334  0003FA  20F4               	addwfc	prodh,w,c
  6335  0003FC  6EF7               	movwf	tblptrh,c
  6336  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  6337  0003FE                     	endif
  6338  0003FE  0009               	tblrd		*+
  6339  000400  50F5               	movf	tablat,w,c
  6340  000402  5C39               	subwf	sprintf@val,w,c
  6341  000404  0009               	tblrd		*+
  6342  000406  50F5               	movf	tablat,w,c
  6343  000408  583A               	subwfb	sprintf@val+1,w,c
  6344  00040A  A0D8               	btfss	status,0,c
  6345  00040C  D040               	goto	l4159
  6346                           
  6347                           ;doprnt.c: 1307: break;
  6348  00040E  2A3E               	incf	sprintf@c,f,c
  6349  000410  D7EA               	goto	l4115
  6350  000412                     l4127:
  6351                           
  6352                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6353  000412  0E01               	movlw	1
  6354  000414  6E3E               	movwf	sprintf@c,c
  6355  000416                     l4129:
  6356  000416  0E04               	movlw	4
  6357  000418  183E               	xorwf	sprintf@c,w,c
  6358  00041A  B4D8               	btfsc	status,2,c
  6359  00041C  D038               	goto	l4159
  6360                           
  6361                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6362  00041E  503E               	movf	sprintf@c,w,c
  6363  000420  0D02               	mullw	2
  6364  000422  0E15               	movlw	low _hexpowers
  6365  000424  24F3               	addwf	prodl,w,c
  6366  000426  6EF6               	movwf	tblptrl,c
  6367  000428  0E7E               	movlw	high _hexpowers
  6368  00042A  20F4               	addwfc	prodh,w,c
  6369  00042C  6EF7               	movwf	tblptrh,c
  6370  00042E                     	if	0	;There are less than 3 active tblptr bytes
  6371  00042E                     	endif
  6372  00042E  0009               	tblrd		*+
  6373  000430  50F5               	movf	tablat,w,c
  6374  000432  5C39               	subwf	sprintf@val,w,c
  6375  000434  0009               	tblrd		*+
  6376  000436  50F5               	movf	tablat,w,c
  6377  000438  583A               	subwfb	sprintf@val+1,w,c
  6378  00043A  A0D8               	btfss	status,0,c
  6379  00043C  D028               	goto	l4159
  6380                           
  6381                           ;doprnt.c: 1318: break;
  6382  00043E  2A3E               	incf	sprintf@c,f,c
  6383  000440  D7EA               	goto	l4129
  6384  000442                     l4141:
  6385                           
  6386                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  6387  000442  0E01               	movlw	1
  6388  000444  6E3E               	movwf	sprintf@c,c
  6389  000446                     l4143:
  6390  000446  0E06               	movlw	6
  6391  000448  183E               	xorwf	sprintf@c,w,c
  6392  00044A  B4D8               	btfsc	status,2,c
  6393  00044C  D020               	goto	l4159
  6394                           
  6395                           ;doprnt.c: 1329: if(val < octpowers[c])
  6396  00044E  503E               	movf	sprintf@c,w,c
  6397  000450  0D02               	mullw	2
  6398  000452  0EFF               	movlw	low _octpowers
  6399  000454  24F3               	addwf	prodl,w,c
  6400  000456  6EF6               	movwf	tblptrl,c
  6401  000458  0E7D               	movlw	high _octpowers
  6402  00045A  20F4               	addwfc	prodh,w,c
  6403  00045C  6EF7               	movwf	tblptrh,c
  6404  00045E                     	if	0	;There are less than 3 active tblptr bytes
  6405  00045E                     	endif
  6406  00045E  0009               	tblrd		*+
  6407  000460  50F5               	movf	tablat,w,c
  6408  000462  5C39               	subwf	sprintf@val,w,c
  6409  000464  0009               	tblrd		*+
  6410  000466  50F5               	movf	tablat,w,c
  6411  000468  583A               	subwfb	sprintf@val+1,w,c
  6412  00046A  A0D8               	btfss	status,0,c
  6413  00046C  D010               	goto	l4159
  6414                           
  6415                           ;doprnt.c: 1330: break;
  6416  00046E  2A3E               	incf	sprintf@c,f,c
  6417  000470  D7EA               	goto	l4143
  6418  000472                     l4157:
  6419  000472  503F               	movf	sprintf@flag,w,c
  6420  000474  0BC0               	andlw	192
  6421                           
  6422                           ; Switch size 1, requested type "space"
  6423                           ; Number of cases is 4, Range of values is 0 to 192
  6424                           ; switch strategies available:
  6425                           ; Name         Instructions Cycles
  6426                           ; simple_byte           13     7 (average)
  6427                           ;	Chosen strategy is simple_byte
  6428  000476  0A00               	xorlw	0	; case 0
  6429  000478  B4D8               	btfsc	status,2,c
  6430  00047A  D7B3               	goto	l4113
  6431  00047C  0A40               	xorlw	64	; case 64
  6432  00047E  B4D8               	btfsc	status,2,c
  6433  000480  D7E0               	goto	l4141
  6434  000482  0AC0               	xorlw	192	; case 128
  6435  000484  B4D8               	btfsc	status,2,c
  6436  000486  D7C5               	goto	l4127
  6437  000488  0A40               	xorlw	64	; case 192
  6438  00048A  B4D8               	btfsc	status,2,c
  6439  00048C  D7AA               	goto	l4113
  6440  00048E                     l4159:
  6441                           
  6442                           ;doprnt.c: 1339: if(c < prec)
  6443  00048E  503E               	movf	sprintf@c,w,c
  6444  000490  0A80               	xorlw	128
  6445  000492  6E28               	movwf	??_sprintf& (0+255),c
  6446  000494  503B               	movf	sprintf@prec,w,c
  6447  000496  0A80               	xorlw	128
  6448  000498  5C28               	subwf	??_sprintf& (0+255),w,c
  6449  00049A  B0D8               	btfsc	status,0,c
  6450  00049C  D003               	goto	l4163
  6451                           
  6452                           ;doprnt.c: 1340: c = prec;
  6453  00049E  C03B  F03E         	movff	sprintf@prec,sprintf@c
  6454  0004A2  D009               	goto	l4167
  6455  0004A4                     l4163:
  6456                           
  6457                           ;doprnt.c: 1341: else if(prec < c)
  6458  0004A4  503B               	movf	sprintf@prec,w,c
  6459  0004A6  0A80               	xorlw	128
  6460  0004A8  6E28               	movwf	??_sprintf& (0+255),c
  6461  0004AA  503E               	movf	sprintf@c,w,c
  6462  0004AC  0A80               	xorlw	128
  6463  0004AE  5C28               	subwf	??_sprintf& (0+255),w,c
  6464  0004B0  A0D8               	btfss	status,0,c
  6465                           
  6466                           ;doprnt.c: 1342: prec = c;
  6467  0004B2  C03E  F03B         	movff	sprintf@c,sprintf@prec
  6468  0004B6                     l4167:
  6469                           
  6470                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6471  0004B6  503C               	movf	sprintf@width,w,c
  6472  0004B8  103D               	iorwf	sprintf@width+1,w,c
  6473  0004BA  B4D8               	btfsc	status,2,c
  6474  0004BC  D00D               	goto	l4173
  6475  0004BE  0E03               	movlw	3
  6476  0004C0  143F               	andwf	sprintf@flag,w,c
  6477  0004C2  6E28               	movwf	??_sprintf& (0+255),c
  6478  0004C4  0E00               	movlw	0
  6479  0004C6  1440               	andwf	sprintf@flag+1,w,c
  6480  0004C8  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6481  0004CA  5028               	movf	??_sprintf,w,c
  6482  0004CC  1029               	iorwf	??_sprintf+1,w,c
  6483  0004CE  B4D8               	btfsc	status,2,c
  6484  0004D0  D003               	goto	l4173
  6485                           
  6486                           ;doprnt.c: 1346: width--;
  6487  0004D2  063C               	decf	sprintf@width,f,c
  6488  0004D4  A0D8               	btfss	status,0,c
  6489  0004D6  063D               	decf	sprintf@width+1,f,c
  6490  0004D8                     l4173:
  6491                           
  6492                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6493  0004D8  AC40               	btfss	sprintf@flag+1,6,c
  6494  0004DA  D016               	goto	l4181
  6495                           
  6496                           ;doprnt.c: 1349: if(width > prec)
  6497  0004DC  0E80               	movlw	128
  6498  0004DE  BE3B               	btfsc	sprintf@prec,7,c
  6499  0004E0  0E7F               	movlw	127
  6500  0004E2  6E28               	movwf	??_sprintf& (0+255),c
  6501  0004E4  503C               	movf	sprintf@width,w,c
  6502  0004E6  5C3B               	subwf	sprintf@prec,w,c
  6503  0004E8  503D               	movf	sprintf@width+1,w,c
  6504  0004EA  0A80               	xorlw	128
  6505  0004EC  5828               	subwfb	??_sprintf& (0+255),w,c
  6506  0004EE  B0D8               	btfsc	status,0,c
  6507  0004F0  D007               	goto	l4179
  6508                           
  6509                           ;doprnt.c: 1350: width -= prec;
  6510  0004F2  503B               	movf	sprintf@prec,w,c
  6511  0004F4  5E3C               	subwf	sprintf@width,f,c
  6512  0004F6  0E00               	movlw	0
  6513  0004F8  BE3B               	btfsc	sprintf@prec,7,c
  6514  0004FA  0EFF               	movlw	255
  6515  0004FC  5A3D               	subwfb	sprintf@width+1,f,c
  6516  0004FE  D004               	goto	l4181
  6517  000500                     l4179:
  6518                           
  6519                           ;doprnt.c: 1351: else
  6520                           ;doprnt.c: 1352: width = 0;
  6521  000500  0E00               	movlw	0
  6522  000502  6E3D               	movwf	sprintf@width+1,c
  6523  000504  0E00               	movlw	0
  6524  000506  6E3C               	movwf	sprintf@width,c
  6525  000508                     l4181:
  6526                           
  6527                           ;doprnt.c: 1353: }
  6528                           ;doprnt.c: 1357: if((flag & (
  6529                           ;doprnt.c: 1359: 0x04|
  6530                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  6531  000508  0EC4               	movlw	196
  6532  00050A  6E28               	movwf	??_sprintf& (0+255),c
  6533  00050C  0E08               	movlw	8
  6534  00050E  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6535  000510  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  6536  000514  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6537  000518  5028               	movf	??_sprintf,w,c
  6538  00051A  162A               	andwf	??_sprintf+2,f,c
  6539  00051C  5029               	movf	??_sprintf+1,w,c
  6540  00051E  162B               	andwf	??_sprintf+3,f,c
  6541  000520  0E40               	movlw	64
  6542  000522  182A               	xorwf	??_sprintf+2,w,c
  6543  000524  E10C               	bnz	l4187
  6544  000526  0E08               	movlw	8
  6545  000528  182B               	xorwf	??_sprintf+3,w,c
  6546  00052A  A4D8               	btfss	status,2,c
  6547  00052C  D008               	goto	l4187
  6548                           
  6549                           ;doprnt.c: 1362: if(width)
  6550  00052E  503C               	movf	sprintf@width,w,c
  6551  000530  103D               	iorwf	sprintf@width+1,w,c
  6552  000532  B4D8               	btfsc	status,2,c
  6553  000534  D028               	goto	l4195
  6554                           
  6555                           ;doprnt.c: 1363: width--;
  6556  000536  063C               	decf	sprintf@width,f,c
  6557  000538  A0D8               	btfss	status,0,c
  6558  00053A  063D               	decf	sprintf@width+1,f,c
  6559                           
  6560                           ;doprnt.c: 1364: } else
  6561  00053C  D024               	goto	l4195
  6562  00053E                     l4187:
  6563                           
  6564                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6565  00053E  0EC0               	movlw	192
  6566  000540  6E28               	movwf	??_sprintf& (0+255),c
  6567  000542  0E08               	movlw	8
  6568  000544  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6569  000546  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  6570  00054A  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6571  00054E  5028               	movf	??_sprintf,w,c
  6572  000550  162A               	andwf	??_sprintf+2,f,c
  6573  000552  5029               	movf	??_sprintf+1,w,c
  6574  000554  162B               	andwf	??_sprintf+3,f,c
  6575  000556  0E80               	movlw	128
  6576  000558  182A               	xorwf	??_sprintf+2,w,c
  6577  00055A  E115               	bnz	l4195
  6578  00055C  0E08               	movlw	8
  6579  00055E  182B               	xorwf	??_sprintf+3,w,c
  6580  000560  A4D8               	btfss	status,2,c
  6581  000562  D011               	goto	l4195
  6582                           
  6583                           ;doprnt.c: 1372: if(width > 2)
  6584  000564  BE3D               	btfsc	sprintf@width+1,7,c
  6585  000566  D00B               	goto	l4193
  6586  000568  503D               	movf	sprintf@width+1,w,c
  6587  00056A  E104               	bnz	u3980
  6588  00056C  0E03               	movlw	3
  6589  00056E  5C3C               	subwf	sprintf@width,w,c
  6590  000570  A0D8               	btfss	status,0,c
  6591  000572  D005               	goto	l4193
  6592  000574                     u3980:
  6593                           
  6594                           ;doprnt.c: 1373: width -= 2;
  6595  000574  0EFE               	movlw	254
  6596  000576  263C               	addwf	sprintf@width,f,c
  6597  000578  0EFF               	movlw	255
  6598  00057A  223D               	addwfc	sprintf@width+1,f,c
  6599  00057C  D004               	goto	l4195
  6600  00057E                     l4193:
  6601                           
  6602                           ;doprnt.c: 1374: else
  6603                           ;doprnt.c: 1375: width = 0;
  6604  00057E  0E00               	movlw	0
  6605  000580  6E3D               	movwf	sprintf@width+1,c
  6606  000582  0E00               	movlw	0
  6607  000584  6E3C               	movwf	sprintf@width,c
  6608  000586                     l4195:
  6609                           
  6610                           ;doprnt.c: 1376: }
  6611                           ;doprnt.c: 1381: if(width > c)
  6612  000586  0E80               	movlw	128
  6613  000588  BE3E               	btfsc	sprintf@c,7,c
  6614  00058A  0E7F               	movlw	127
  6615  00058C  6E28               	movwf	??_sprintf& (0+255),c
  6616  00058E  503C               	movf	sprintf@width,w,c
  6617  000590  5C3E               	subwf	sprintf@c,w,c
  6618  000592  503D               	movf	sprintf@width+1,w,c
  6619  000594  0A80               	xorlw	128
  6620  000596  5828               	subwfb	??_sprintf& (0+255),w,c
  6621  000598  B0D8               	btfsc	status,0,c
  6622  00059A  D007               	goto	l4199
  6623                           
  6624                           ;doprnt.c: 1382: width -= c;
  6625  00059C  503E               	movf	sprintf@c,w,c
  6626  00059E  5E3C               	subwf	sprintf@width,f,c
  6627  0005A0  0E00               	movlw	0
  6628  0005A2  BE3E               	btfsc	sprintf@c,7,c
  6629  0005A4  0EFF               	movlw	255
  6630  0005A6  5A3D               	subwfb	sprintf@width+1,f,c
  6631  0005A8  D004               	goto	l4201
  6632  0005AA                     l4199:
  6633                           
  6634                           ;doprnt.c: 1383: else
  6635                           ;doprnt.c: 1384: width = 0;
  6636  0005AA  0E00               	movlw	0
  6637  0005AC  6E3D               	movwf	sprintf@width+1,c
  6638  0005AE  0E00               	movlw	0
  6639  0005B0  6E3C               	movwf	sprintf@width,c
  6640  0005B2                     l4201:
  6641                           
  6642                           ;doprnt.c: 1387: if(flag & 0x04) {
  6643  0005B2  A43F               	btfss	sprintf@flag,2,c
  6644  0005B4  D058               	goto	l4237
  6645                           
  6646                           ;doprnt.c: 1392: if(flag & 0x03)
  6647  0005B6  0E03               	movlw	3
  6648  0005B8  143F               	andwf	sprintf@flag,w,c
  6649  0005BA  6E28               	movwf	??_sprintf& (0+255),c
  6650  0005BC  0E00               	movlw	0
  6651  0005BE  1440               	andwf	sprintf@flag+1,w,c
  6652  0005C0  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6653  0005C2  5028               	movf	??_sprintf,w,c
  6654  0005C4  1029               	iorwf	??_sprintf+1,w,c
  6655  0005C6  B4D8               	btfsc	status,2,c
  6656  0005C8  D009               	goto	l662
  6657                           
  6658                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  6659  0005CA  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6660  0005CE  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6661  0005D2  0E2D               	movlw	45
  6662  0005D4  D00A               	goto	L5
  6663  0005D6                     l4207:
  6664  0005D6  4A1E               	infsnz	sprintf@sp,f,c
  6665  0005D8  2A1F               	incf	sprintf@sp+1,f,c
  6666  0005DA  D035               	goto	l4229
  6667  0005DC                     l662:
  6668                           
  6669                           ;doprnt.c: 1396: else
  6670                           ;doprnt.c: 1399: if(flag & 0x01)
  6671  0005DC  A03F               	btfss	sprintf@flag,0,c
  6672  0005DE  D007               	goto	l4213
  6673                           
  6674                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  6675  0005E0  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6676  0005E4  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6677  0005E8  0E20               	movlw	32
  6678  0005EA                     L5:
  6679  0005EA  6EDF               	movwf	indf2,c
  6680  0005EC  D7F4               	goto	l4207
  6681  0005EE                     l4213:
  6682                           
  6683                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6684  0005EE  0EC0               	movlw	192
  6685  0005F0  6E28               	movwf	??_sprintf& (0+255),c
  6686  0005F2  0E08               	movlw	8
  6687  0005F4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6688  0005F6  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  6689  0005FA  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6690  0005FE  5028               	movf	??_sprintf,w,c
  6691  000600  162A               	andwf	??_sprintf+2,f,c
  6692  000602  5029               	movf	??_sprintf+1,w,c
  6693  000604  162B               	andwf	??_sprintf+3,f,c
  6694  000606  0E80               	movlw	128
  6695  000608  182A               	xorwf	??_sprintf+2,w,c
  6696  00060A  E11D               	bnz	l4229
  6697  00060C  0E08               	movlw	8
  6698  00060E  182B               	xorwf	??_sprintf+3,w,c
  6699  000610  A4D8               	btfss	status,2,c
  6700  000612  D019               	goto	l4229
  6701                           
  6702                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  6703  000614  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6704  000618  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6705  00061C  0E30               	movlw	48
  6706  00061E  6EDF               	movwf	indf2,c
  6707  000620  4A1E               	infsnz	sprintf@sp,f,c
  6708  000622  2A1F               	incf	sprintf@sp+1,f,c
  6709                           
  6710                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  6711  000624  BA3F               	btfsc	sprintf@flag,5,c
  6712  000626  D004               	goto	l4223
  6713  000628  0E00               	movlw	0
  6714  00062A  6E2E               	movwf	_sprintf$1448+1,c
  6715  00062C  0E78               	movlw	120
  6716  00062E  D003               	goto	L6
  6717  000630                     l4223:
  6718  000630  0E00               	movlw	0
  6719  000632  6E2E               	movwf	_sprintf$1448+1,c
  6720  000634  0E58               	movlw	88
  6721  000636                     L6:
  6722  000636  6E2D               	movwf	_sprintf$1448,c
  6723  000638  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6724  00063C  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6725  000640  C02D  FFDF         	movff	_sprintf$1448,indf2
  6726  000644  D7C8               	goto	l4207
  6727  000646                     l4229:
  6728                           
  6729                           ;doprnt.c: 1412: }
  6730                           ;doprnt.c: 1415: if(width)
  6731  000646  503C               	movf	sprintf@width,w,c
  6732  000648  103D               	iorwf	sprintf@width+1,w,c
  6733  00064A  B4D8               	btfsc	status,2,c
  6734  00064C  D104               	goto	l4301
  6735                           
  6736                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  6737                           
  6738                           ;doprnt.c: 1416: do
  6739  00064E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6740  000652  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6741  000656  0E30               	movlw	48
  6742  000658  6EDF               	movwf	indf2,c
  6743  00065A  4A1E               	infsnz	sprintf@sp,f,c
  6744  00065C  2A1F               	incf	sprintf@sp+1,f,c
  6745                           
  6746                           ;doprnt.c: 1418: while(--width);
  6747  00065E  063C               	decf	sprintf@width,f,c
  6748  000660  A0D8               	btfss	status,0,c
  6749  000662  063D               	decf	sprintf@width+1,f,c
  6750  000664  D7F0               	goto	l4229
  6751  000666                     l4237:
  6752                           
  6753                           ;doprnt.c: 1422: {
  6754                           ;doprnt.c: 1424: if(width
  6755                           ;doprnt.c: 1426: && !(flag & 0x08)
  6756                           ;doprnt.c: 1428: )
  6757  000666  503C               	movf	sprintf@width,w,c
  6758  000668  103D               	iorwf	sprintf@width+1,w,c
  6759  00066A  A4D8               	btfss	status,2,c
  6760  00066C  B63F               	btfsc	sprintf@flag,3,c
  6761  00066E  D00F               	goto	l4247
  6762  000670                     l4241:
  6763                           
  6764                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  6765  000670  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6766  000674  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6767  000678  0E20               	movlw	32
  6768  00067A  6EDF               	movwf	indf2,c
  6769  00067C  4A1E               	infsnz	sprintf@sp,f,c
  6770  00067E  2A1F               	incf	sprintf@sp+1,f,c
  6771                           
  6772                           ;doprnt.c: 1431: while(--width);
  6773  000680  063C               	decf	sprintf@width,f,c
  6774  000682  A0D8               	btfss	status,0,c
  6775  000684  063D               	decf	sprintf@width+1,f,c
  6776  000686  503C               	movf	sprintf@width,w,c
  6777  000688  103D               	iorwf	sprintf@width+1,w,c
  6778  00068A  A4D8               	btfss	status,2,c
  6779  00068C  D7F1               	goto	l4241
  6780  00068E                     l4247:
  6781                           
  6782                           ;doprnt.c: 1438: if(flag & 0x03)
  6783  00068E  0E03               	movlw	3
  6784  000690  143F               	andwf	sprintf@flag,w,c
  6785  000692  6E28               	movwf	??_sprintf& (0+255),c
  6786  000694  0E00               	movlw	0
  6787  000696  1440               	andwf	sprintf@flag+1,w,c
  6788  000698  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6789  00069A  5028               	movf	??_sprintf,w,c
  6790  00069C  1029               	iorwf	??_sprintf+1,w,c
  6791  00069E  B4D8               	btfsc	status,2,c
  6792  0006A0  D009               	goto	l678
  6793                           
  6794                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  6795  0006A2  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6796  0006A6  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6797  0006AA  0E2D               	movlw	45
  6798  0006AC  D00A               	goto	L7
  6799  0006AE                     l4251:
  6800  0006AE  4A1E               	infsnz	sprintf@sp,f,c
  6801  0006B0  2A1F               	incf	sprintf@sp+1,f,c
  6802  0006B2  D009               	goto	l4257
  6803  0006B4                     l678:
  6804                           
  6805                           ;doprnt.c: 1443: else if(flag & 0x01)
  6806  0006B4  A03F               	btfss	sprintf@flag,0,c
  6807  0006B6  D007               	goto	l4257
  6808                           
  6809                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  6810  0006B8  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6811  0006BC  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6812  0006C0  0E20               	movlw	32
  6813  0006C2                     L7:
  6814  0006C2  6EDF               	movwf	indf2,c
  6815  0006C4  D7F4               	goto	l4251
  6816  0006C6                     l4257:
  6817                           
  6818                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  6819  0006C6  0EC0               	movlw	192
  6820  0006C8  6E28               	movwf	??_sprintf& (0+255),c
  6821  0006CA  0E08               	movlw	8
  6822  0006CC  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6823  0006CE  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  6824  0006D2  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6825  0006D6  5028               	movf	??_sprintf,w,c
  6826  0006D8  162A               	andwf	??_sprintf+2,f,c
  6827  0006DA  5029               	movf	??_sprintf+1,w,c
  6828  0006DC  162B               	andwf	??_sprintf+3,f,c
  6829  0006DE  0E40               	movlw	64
  6830  0006E0  182A               	xorwf	??_sprintf+2,w,c
  6831  0006E2  E10B               	bnz	l4263
  6832  0006E4  0E08               	movlw	8
  6833  0006E6  182B               	xorwf	??_sprintf+3,w,c
  6834  0006E8  A4D8               	btfss	status,2,c
  6835  0006EA  D007               	goto	l4263
  6836                           
  6837                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  6838  0006EC  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6839  0006F0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6840  0006F4  0E30               	movlw	48
  6841  0006F6  6EDF               	movwf	indf2,c
  6842  0006F8  D0AC               	goto	l4299
  6843  0006FA                     l4263:
  6844                           
  6845                           ;doprnt.c: 1450: else
  6846                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6847  0006FA  0EC0               	movlw	192
  6848  0006FC  6E28               	movwf	??_sprintf& (0+255),c
  6849  0006FE  0E08               	movlw	8
  6850  000700  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6851  000702  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  6852  000706  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6853  00070A  5028               	movf	??_sprintf,w,c
  6854  00070C  162A               	andwf	??_sprintf+2,f,c
  6855  00070E  5029               	movf	??_sprintf+1,w,c
  6856  000710  162B               	andwf	??_sprintf+3,f,c
  6857  000712  0E80               	movlw	128
  6858  000714  182A               	xorwf	??_sprintf+2,w,c
  6859  000716  E103               	bnz	u4131
  6860  000718  0E08               	movlw	8
  6861  00071A  182B               	xorwf	??_sprintf+3,w,c
  6862  00071C  A4D8               	btfss	status,2,c
  6863  00071E                     u4131:
  6864  00071E  D09B               	goto	l4301
  6865                           
  6866                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  6867  000720  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6868  000724  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6869  000728  0E30               	movlw	48
  6870  00072A  6EDF               	movwf	indf2,c
  6871  00072C  4A1E               	infsnz	sprintf@sp,f,c
  6872  00072E  2A1F               	incf	sprintf@sp+1,f,c
  6873                           
  6874                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  6875  000730  BA3F               	btfsc	sprintf@flag,5,c
  6876  000732  D004               	goto	l4273
  6877  000734  0E00               	movlw	0
  6878  000736  6E30               	movwf	_sprintf$1449+1,c
  6879  000738  0E78               	movlw	120
  6880  00073A  D003               	goto	L8
  6881  00073C                     l4273:
  6882  00073C  0E00               	movlw	0
  6883  00073E  6E30               	movwf	_sprintf$1449+1,c
  6884  000740  0E58               	movlw	88
  6885  000742                     L8:
  6886  000742  6E2F               	movwf	_sprintf$1449,c
  6887  000744  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6888  000748  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6889  00074C  C02F  FFDF         	movff	_sprintf$1449,indf2
  6890  000750  D080               	goto	l4299
  6891  000752                     l4279:
  6892                           
  6893                           ;doprnt.c: 1486: case 0xC0:
  6894                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6895  000752  503B               	movf	sprintf@prec,w,c
  6896  000754  0D02               	mullw	2
  6897  000756  0E0B               	movlw	low _dpowers
  6898  000758  24F3               	addwf	prodl,w,c
  6899  00075A  6EF6               	movwf	tblptrl,c
  6900  00075C  0E7E               	movlw	high _dpowers
  6901  00075E  20F4               	addwfc	prodh,w,c
  6902  000760  6EF7               	movwf	tblptrh,c
  6903  000762                     	if	0	;There are less than 3 active tblptr bytes
  6904  000762                     	endif
  6905  000762  0009               	tblrd		*+
  6906  000764  CFF5 F014          	movff	tablat,___lwdiv@divisor
  6907  000768  000A               	tblrd		*-
  6908  00076A  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  6909  00076E  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  6910  000772  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  6911  000776  ECD1  F009         	call	___lwdiv	;wreg free
  6912  00077A  C012  F019         	movff	?___lwdiv,___lwmod@dividend
  6913  00077E  C013  F01A         	movff	?___lwdiv+1,___lwmod@dividend+1
  6914  000782  0E00               	movlw	0
  6915  000784  6E1C               	movwf	___lwmod@divisor+1,c
  6916  000786  0E0A               	movlw	10
  6917  000788  6E1B               	movwf	___lwmod@divisor,c
  6918  00078A  EC1F  F00A         	call	___lwmod	;wreg free
  6919  00078E  5019               	movf	?___lwmod,w,c
  6920  000790  D049               	goto	L9
  6921  000792                     l4281:
  6922                           
  6923                           ;doprnt.c: 1499: {
  6924                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6925  000792  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  6926  000796  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  6927  00079A  503B               	movf	sprintf@prec,w,c
  6928  00079C  0D02               	mullw	2
  6929  00079E  0E15               	movlw	low _hexpowers
  6930  0007A0  24F3               	addwf	prodl,w,c
  6931  0007A2  6EF6               	movwf	tblptrl,c
  6932  0007A4  0E7E               	movlw	high _hexpowers
  6933  0007A6  20F4               	addwfc	prodh,w,c
  6934  0007A8  6EF7               	movwf	tblptrh,c
  6935  0007AA                     	if	0	;There are less than 3 active tblptr bytes
  6936  0007AA                     	endif
  6937  0007AA  0009               	tblrd		*+
  6938  0007AC  CFF5 F014          	movff	tablat,___lwdiv@divisor
  6939  0007B0  000A               	tblrd		*-
  6940  0007B2  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  6941  0007B6  ECD1  F009         	call	___lwdiv	;wreg free
  6942  0007BA  5012               	movf	?___lwdiv,w,c
  6943  0007BC  0B0F               	andlw	15
  6944  0007BE  6E2C               	movwf	sprintf@idx,c
  6945                           
  6946                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  6947  0007C0  BA3F               	btfsc	sprintf@flag,5,c
  6948  0007C2  D004               	goto	l4287
  6949  0007C4  0ECA               	movlw	low STR_67
  6950  0007C6  6E31               	movwf	_sprintf$1455,c
  6951  0007C8  0E7E               	movlw	high STR_67
  6952  0007CA  D003               	goto	L10
  6953  0007CC                     l4287:
  6954  0007CC  0EB9               	movlw	low STR_66
  6955  0007CE  6E31               	movwf	_sprintf$1455,c
  6956  0007D0  0E7E               	movlw	high STR_66
  6957  0007D2                     L10:
  6958  0007D2  6E32               	movwf	_sprintf$1455+1,c
  6959  0007D4  502C               	movf	sprintf@idx,w,c
  6960  0007D6  0D01               	mullw	1
  6961  0007D8  C031  F028         	movff	_sprintf$1455,??_sprintf
  6962  0007DC  C032  F029         	movff	_sprintf$1455+1,??_sprintf+1
  6963  0007E0  50F3               	movf	prodl,w,c
  6964  0007E2  2628               	addwf	??_sprintf,f,c
  6965  0007E4  50F4               	movf	prodh,w,c
  6966  0007E6  2229               	addwfc	??_sprintf+1,f,c
  6967  0007E8  C028  FFF6         	movff	??_sprintf,tblptrl
  6968  0007EC  C029  FFF7         	movff	??_sprintf+1,tblptrh
  6969  0007F0                     	if	0	;tblptru may be non-zero
  6970  0007F0                     	endif
  6971  0007F0                     	if	0	;tblptru may be non-zero
  6972  0007F0                     	endif
  6973  0007F0  0008               	tblrd		*
  6974  0007F2  CFF5 F03E          	movff	tablat,sprintf@c
  6975                           
  6976                           ;doprnt.c: 1508: }
  6977                           ;doprnt.c: 1510: break;
  6978  0007F6  D027               	goto	l4297
  6979  0007F8                     l4291:
  6980                           
  6981                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  6982  0007F8  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  6983  0007FC  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  6984  000800  503B               	movf	sprintf@prec,w,c
  6985  000802  0D02               	mullw	2
  6986  000804  0EFF               	movlw	low _octpowers
  6987  000806  24F3               	addwf	prodl,w,c
  6988  000808  6EF6               	movwf	tblptrl,c
  6989  00080A  0E7D               	movlw	high _octpowers
  6990  00080C  20F4               	addwfc	prodh,w,c
  6991  00080E  6EF7               	movwf	tblptrh,c
  6992  000810                     	if	0	;There are less than 3 active tblptr bytes
  6993  000810                     	endif
  6994  000810  0009               	tblrd		*+
  6995  000812  CFF5 F014          	movff	tablat,___lwdiv@divisor
  6996  000816  000A               	tblrd		*-
  6997  000818  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  6998  00081C  ECD1  F009         	call	___lwdiv	;wreg free
  6999  000820  5012               	movf	?___lwdiv,w,c
  7000  000822  0B07               	andlw	7
  7001  000824                     L9:
  7002  000824  0F30               	addlw	48
  7003  000826  6E3E               	movwf	sprintf@c,c
  7004                           
  7005                           ;doprnt.c: 1523: }
  7006                           
  7007                           ;doprnt.c: 1520: break;
  7008  000828  D00E               	goto	l4297
  7009  00082A                     l4295:
  7010  00082A  503F               	movf	sprintf@flag,w,c
  7011  00082C  0BC0               	andlw	192
  7012                           
  7013                           ; Switch size 1, requested type "space"
  7014                           ; Number of cases is 4, Range of values is 0 to 192
  7015                           ; switch strategies available:
  7016                           ; Name         Instructions Cycles
  7017                           ; simple_byte           13     7 (average)
  7018                           ;	Chosen strategy is simple_byte
  7019  00082E  0A00               	xorlw	0	; case 0
  7020  000830  B4D8               	btfsc	status,2,c
  7021  000832  D78F               	goto	l4279
  7022  000834  0A40               	xorlw	64	; case 64
  7023  000836  B4D8               	btfsc	status,2,c
  7024  000838  D7DF               	goto	l4291
  7025  00083A  0AC0               	xorlw	192	; case 128
  7026  00083C  B4D8               	btfsc	status,2,c
  7027  00083E  D7A9               	goto	l4281
  7028  000840  0A40               	xorlw	64	; case 192
  7029  000842  B4D8               	btfsc	status,2,c
  7030  000844  D786               	goto	l4279
  7031  000846                     l4297:
  7032                           
  7033                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7034  000846  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7035  00084A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7036  00084E  C03E  FFDF         	movff	sprintf@c,indf2
  7037  000852                     l4299:
  7038  000852  4A1E               	infsnz	sprintf@sp,f,c
  7039  000854  2A1F               	incf	sprintf@sp+1,f,c
  7040  000856                     l4301:
  7041  000856  063B               	decf	sprintf@prec,f,c
  7042  000858  283B               	incf	sprintf@prec,w,c
  7043  00085A  A4D8               	btfss	status,2,c
  7044  00085C  D7E6               	goto	l4295
  7045                           
  7046                           ;doprnt.c: 1525: }
  7047                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  7048  00085E  B63F               	btfsc	sprintf@flag,3,c
  7049  000860  BE3D               	btfsc	sprintf@width+1,7,c
  7050  000862  D014               	goto	l4311
  7051  000864  503D               	movf	sprintf@width+1,w,c
  7052  000866  E103               	bnz	l4305
  7053  000868  043C               	decf	sprintf@width,w,c
  7054  00086A  A0D8               	btfss	status,0,c
  7055  00086C  D00F               	goto	l4311
  7056  00086E                     l4305:
  7057                           
  7058                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  7059  00086E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7060  000872  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7061  000876  0E20               	movlw	32
  7062  000878  6EDF               	movwf	indf2,c
  7063  00087A  4A1E               	infsnz	sprintf@sp,f,c
  7064  00087C  2A1F               	incf	sprintf@sp+1,f,c
  7065                           
  7066                           ;doprnt.c: 1531: while(--width);
  7067  00087E  063C               	decf	sprintf@width,f,c
  7068  000880  A0D8               	btfss	status,0,c
  7069  000882  063D               	decf	sprintf@width+1,f,c
  7070  000884  503C               	movf	sprintf@width,w,c
  7071  000886  103D               	iorwf	sprintf@width+1,w,c
  7072  000888  A4D8               	btfss	status,2,c
  7073  00088A  D7F1               	goto	l4305
  7074  00088C                     l4311:
  7075  00088C  C020  FFF6         	movff	sprintf@f,tblptrl
  7076  000890  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7077  000894  4A20               	infsnz	sprintf@f,f,c
  7078  000896  2A21               	incf	sprintf@f+1,f,c
  7079  000898                     	if	0	;tblptru may be non-zero
  7080  000898                     	endif
  7081  000898                     	if	0	;tblptru may be non-zero
  7082  000898                     	endif
  7083  000898  0008               	tblrd		*
  7084  00089A  CFF5 F03E          	movff	tablat,sprintf@c
  7085  00089E  503E               	movf	sprintf@c,w,c
  7086  0008A0  A4D8               	btfss	status,2,c
  7087  0008A2  EF0F  F000         	goto	l3957
  7088  0008A6                     l4313:
  7089                           
  7090                           ;doprnt.c: 1538: *sp = 0;
  7091  0008A6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7092  0008AA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7093  0008AE  0E00               	movlw	0
  7094  0008B0  6EDF               	movwf	indf2,c
  7095  0008B2  0012               	return	
  7096  0008B4                     __end_of_sprintf:
  7097                           	opt stack 0
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           indf0	equ	0xFEF
  7106                           postinc0	equ	0xFEE
  7107                           fsr0h	equ	0xFEA
  7108                           fsr0l	equ	0xFE9
  7109                           wreg	equ	0xFE8
  7110                           indf1	equ	0xFE7
  7111                           postdec1	equ	0xFE5
  7112                           plusw1	equ	0xFE3
  7113                           fsr1h	equ	0xFE2
  7114                           fsr1l	equ	0xFE1
  7115                           indf2	equ	0xFDF
  7116                           postinc2	equ	0xFDE
  7117                           postdec2	equ	0xFDD
  7118                           plusw2	equ	0xFDB
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function _isdigit *****************
  7124 ;; Defined at:
  7125 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  c               1    wreg     unsigned char 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  c               1   19[COMRAM] unsigned char 
  7130 ;; Return value:  Size  Location     Type
  7131 ;;		None               void
  7132 ;; Registers used:
  7133 ;;		wreg, status,2, status,0
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7139 ;;      Params:         0       0       0       0       0       0       0
  7140 ;;      Locals:         2       0       0       0       0       0       0
  7141 ;;      Temps:          1       0       0       0       0       0       0
  7142 ;;      Totals:         3       0       0       0       0       0       0
  7143 ;;Total ram usage:        3 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    1
  7146 ;; This function calls:
  7147 ;;		Nothing
  7148 ;; This function is called by:
  7149 ;;		_sprintf
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text27
  7154  00184C                     __ptext27:
  7155                           	opt stack 0
  7156  00184C                     _isdigit:
  7157                           	opt stack 28
  7158                           
  7159                           ;incstack = 0
  7160                           ;isdigit@c stored from wreg
  7161  00184C  6E14               	movwf	isdigit@c,c
  7162  00184E  0E00               	movlw	0
  7163  001850  6E13               	movwf	_isdigit$1685,c
  7164  001852  0E3A               	movlw	58
  7165  001854  6014               	cpfslt	isdigit@c,c
  7166  001856  D005               	goto	l3883
  7167  001858  0E2F               	movlw	47
  7168  00185A  6414               	cpfsgt	isdigit@c,c
  7169  00185C  D002               	goto	l3883
  7170  00185E  0E01               	movlw	1
  7171  001860  6E13               	movwf	_isdigit$1685,c
  7172  001862                     l3883:
  7173  001862  C013  F012         	movff	_isdigit$1685,??_isdigit
  7174  001866  3012               	rrcf	??_isdigit,w,c
  7175  001868  0012               	return	
  7176  00186A                     __end_of_isdigit:
  7177                           	opt stack 0
  7178                           tblptru	equ	0xFF8
  7179                           tblptrh	equ	0xFF7
  7180                           tblptrl	equ	0xFF6
  7181                           tablat	equ	0xFF5
  7182                           prodh	equ	0xFF4
  7183                           prodl	equ	0xFF3
  7184                           intcon	equ	0xFF2
  7185                           indf0	equ	0xFEF
  7186                           postinc0	equ	0xFEE
  7187                           fsr0h	equ	0xFEA
  7188                           fsr0l	equ	0xFE9
  7189                           wreg	equ	0xFE8
  7190                           indf1	equ	0xFE7
  7191                           postdec1	equ	0xFE5
  7192                           plusw1	equ	0xFE3
  7193                           fsr1h	equ	0xFE2
  7194                           fsr1l	equ	0xFE1
  7195                           indf2	equ	0xFDF
  7196                           postinc2	equ	0xFDE
  7197                           postdec2	equ	0xFDD
  7198                           plusw2	equ	0xFDB
  7199                           fsr2h	equ	0xFDA
  7200                           fsr2l	equ	0xFD9
  7201                           status	equ	0xFD8
  7202                           
  7203 ;; *************** function ___wmul *****************
  7204 ;; Defined at:
  7205 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  multiplier      2   17[COMRAM] unsigned int 
  7208 ;;  multiplicand    2   19[COMRAM] unsigned int 
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  product         2   21[COMRAM] unsigned int 
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  2   17[COMRAM] unsigned int 
  7213 ;; Registers used:
  7214 ;;		wreg, status,2, status,0, prodl, prodh
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7220 ;;      Params:         4       0       0       0       0       0       0
  7221 ;;      Locals:         2       0       0       0       0       0       0
  7222 ;;      Temps:          0       0       0       0       0       0       0
  7223 ;;      Totals:         6       0       0       0       0       0       0
  7224 ;;Total ram usage:        6 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    1
  7227 ;; This function calls:
  7228 ;;		Nothing
  7229 ;; This function is called by:
  7230 ;;		_sprintf
  7231 ;;		_delay_ms1
  7232 ;;		_delay_us1
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           	psect	text28
  7237  001774                     __ptext28:
  7238                           	opt stack 0
  7239  001774                     ___wmul:
  7240                           	opt stack 28
  7241                           
  7242                           ;incstack = 0
  7243  001774  5012               	movf	___wmul@multiplier,w,c
  7244  001776  0214               	mulwf	___wmul@multiplicand,c
  7245  001778  CFF3 F016          	movff	prodl,___wmul@product
  7246  00177C  CFF4 F017          	movff	prodh,___wmul@product+1
  7247  001780  5012               	movf	___wmul@multiplier,w,c
  7248  001782  0215               	mulwf	___wmul@multiplicand+1,c
  7249  001784  50F3               	movf	prodl,w,c
  7250  001786  2617               	addwf	___wmul@product+1,f,c
  7251  001788  5013               	movf	___wmul@multiplier+1,w,c
  7252  00178A  0214               	mulwf	___wmul@multiplicand,c
  7253  00178C  50F3               	movf	prodl,w,c
  7254  00178E  2617               	addwf	___wmul@product+1,f,c
  7255  001790  C016  F012         	movff	___wmul@product,?___wmul
  7256  001794  C017  F013         	movff	___wmul@product+1,?___wmul+1
  7257  001798  0012               	return	
  7258  00179A                     __end_of___wmul:
  7259                           	opt stack 0
  7260                           tblptru	equ	0xFF8
  7261                           tblptrh	equ	0xFF7
  7262                           tblptrl	equ	0xFF6
  7263                           tablat	equ	0xFF5
  7264                           prodh	equ	0xFF4
  7265                           prodl	equ	0xFF3
  7266                           intcon	equ	0xFF2
  7267                           indf0	equ	0xFEF
  7268                           postinc0	equ	0xFEE
  7269                           fsr0h	equ	0xFEA
  7270                           fsr0l	equ	0xFE9
  7271                           wreg	equ	0xFE8
  7272                           indf1	equ	0xFE7
  7273                           postdec1	equ	0xFE5
  7274                           plusw1	equ	0xFE3
  7275                           fsr1h	equ	0xFE2
  7276                           fsr1l	equ	0xFE1
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           plusw2	equ	0xFDB
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function ___lwmod *****************
  7286 ;; Defined at:
  7287 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  dividend        2   24[COMRAM] unsigned int 
  7290 ;;  divisor         2   26[COMRAM] unsigned int 
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;  counter         1   28[COMRAM] unsigned char 
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  2   24[COMRAM] unsigned int 
  7295 ;; Registers used:
  7296 ;;		wreg, status,2, status,0
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7302 ;;      Params:         4       0       0       0       0       0       0
  7303 ;;      Locals:         1       0       0       0       0       0       0
  7304 ;;      Temps:          0       0       0       0       0       0       0
  7305 ;;      Totals:         5       0       0       0       0       0       0
  7306 ;;Total ram usage:        5 bytes
  7307 ;; Hardware stack levels used:    1
  7308 ;; Hardware stack levels required when called:    1
  7309 ;; This function calls:
  7310 ;;		Nothing
  7311 ;; This function is called by:
  7312 ;;		_sprintf
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           	psect	text29
  7317  00143E                     __ptext29:
  7318                           	opt stack 0
  7319  00143E                     ___lwmod:
  7320                           	opt stack 28
  7321                           
  7322                           ;incstack = 0
  7323  00143E  501B               	movf	___lwmod@divisor,w,c
  7324  001440  101C               	iorwf	___lwmod@divisor+1,w,c
  7325  001442  B4D8               	btfsc	status,2,c
  7326  001444  D018               	goto	l1144
  7327  001446  0E01               	movlw	1
  7328  001448  6E1D               	movwf	___lwmod@counter,c
  7329  00144A  D004               	goto	l3921
  7330  00144C                     l3919:
  7331  00144C  90D8               	bcf	status,0,c
  7332  00144E  361B               	rlcf	___lwmod@divisor,f,c
  7333  001450  361C               	rlcf	___lwmod@divisor+1,f,c
  7334  001452  2A1D               	incf	___lwmod@counter,f,c
  7335  001454                     l3921:
  7336  001454  AE1C               	btfss	___lwmod@divisor+1,7,c
  7337  001456  D7FA               	goto	l3919
  7338  001458                     l3923:
  7339  001458  501B               	movf	___lwmod@divisor,w,c
  7340  00145A  5C19               	subwf	___lwmod@dividend,w,c
  7341  00145C  501C               	movf	___lwmod@divisor+1,w,c
  7342  00145E  581A               	subwfb	___lwmod@dividend+1,w,c
  7343  001460  A0D8               	btfss	status,0,c
  7344  001462  D004               	goto	l3927
  7345  001464  501B               	movf	___lwmod@divisor,w,c
  7346  001466  5E19               	subwf	___lwmod@dividend,f,c
  7347  001468  501C               	movf	___lwmod@divisor+1,w,c
  7348  00146A  5A1A               	subwfb	___lwmod@dividend+1,f,c
  7349  00146C                     l3927:
  7350  00146C  90D8               	bcf	status,0,c
  7351  00146E  321C               	rrcf	___lwmod@divisor+1,f,c
  7352  001470  321B               	rrcf	___lwmod@divisor,f,c
  7353  001472  2E1D               	decfsz	___lwmod@counter,f,c
  7354  001474  D7F1               	goto	l3923
  7355  001476                     l1144:
  7356  001476  C019  F019         	movff	___lwmod@dividend,?___lwmod
  7357  00147A  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  7358  00147E  0012               	return		;funcret
  7359  001480                     __end_of___lwmod:
  7360                           	opt stack 0
  7361                           tblptru	equ	0xFF8
  7362                           tblptrh	equ	0xFF7
  7363                           tblptrl	equ	0xFF6
  7364                           tablat	equ	0xFF5
  7365                           prodh	equ	0xFF4
  7366                           prodl	equ	0xFF3
  7367                           intcon	equ	0xFF2
  7368                           indf0	equ	0xFEF
  7369                           postinc0	equ	0xFEE
  7370                           fsr0h	equ	0xFEA
  7371                           fsr0l	equ	0xFE9
  7372                           wreg	equ	0xFE8
  7373                           indf1	equ	0xFE7
  7374                           postdec1	equ	0xFE5
  7375                           plusw1	equ	0xFE3
  7376                           fsr1h	equ	0xFE2
  7377                           fsr1l	equ	0xFE1
  7378                           indf2	equ	0xFDF
  7379                           postinc2	equ	0xFDE
  7380                           postdec2	equ	0xFDD
  7381                           plusw2	equ	0xFDB
  7382                           fsr2h	equ	0xFDA
  7383                           fsr2l	equ	0xFD9
  7384                           status	equ	0xFD8
  7385                           
  7386 ;; *************** function ___lwdiv *****************
  7387 ;; Defined at:
  7388 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  dividend        2   17[COMRAM] unsigned int 
  7391 ;;  divisor         2   19[COMRAM] unsigned int 
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;  quotient        2   22[COMRAM] unsigned int 
  7394 ;;  counter         1   21[COMRAM] unsigned char 
  7395 ;; Return value:  Size  Location     Type
  7396 ;;                  2   17[COMRAM] unsigned int 
  7397 ;; Registers used:
  7398 ;;		wreg, status,2, status,0
  7399 ;; Tracked objects:
  7400 ;;		On entry : 0/0
  7401 ;;		On exit  : 0/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7404 ;;      Params:         4       0       0       0       0       0       0
  7405 ;;      Locals:         3       0       0       0       0       0       0
  7406 ;;      Temps:          0       0       0       0       0       0       0
  7407 ;;      Totals:         7       0       0       0       0       0       0
  7408 ;;Total ram usage:        7 bytes
  7409 ;; Hardware stack levels used:    1
  7410 ;; Hardware stack levels required when called:    1
  7411 ;; This function calls:
  7412 ;;		Nothing
  7413 ;; This function is called by:
  7414 ;;		_sprintf
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           	psect	text30
  7419  0013A2                     __ptext30:
  7420                           	opt stack 0
  7421  0013A2                     ___lwdiv:
  7422                           	opt stack 28
  7423                           
  7424                           ;incstack = 0
  7425  0013A2  0E00               	movlw	0
  7426  0013A4  6E18               	movwf	___lwdiv@quotient+1,c
  7427  0013A6  0E00               	movlw	0
  7428  0013A8  6E17               	movwf	___lwdiv@quotient,c
  7429  0013AA  5014               	movf	___lwdiv@divisor,w,c
  7430  0013AC  1015               	iorwf	___lwdiv@divisor+1,w,c
  7431  0013AE  B4D8               	btfsc	status,2,c
  7432  0013B0  D01C               	goto	l1134
  7433  0013B2  0E01               	movlw	1
  7434  0013B4  6E16               	movwf	___lwdiv@counter,c
  7435  0013B6  D004               	goto	l3901
  7436  0013B8                     l3899:
  7437  0013B8  90D8               	bcf	status,0,c
  7438  0013BA  3614               	rlcf	___lwdiv@divisor,f,c
  7439  0013BC  3615               	rlcf	___lwdiv@divisor+1,f,c
  7440  0013BE  2A16               	incf	___lwdiv@counter,f,c
  7441  0013C0                     l3901:
  7442  0013C0  AE15               	btfss	___lwdiv@divisor+1,7,c
  7443  0013C2  D7FA               	goto	l3899
  7444  0013C4                     l3903:
  7445  0013C4  90D8               	bcf	status,0,c
  7446  0013C6  3617               	rlcf	___lwdiv@quotient,f,c
  7447  0013C8  3618               	rlcf	___lwdiv@quotient+1,f,c
  7448  0013CA  5014               	movf	___lwdiv@divisor,w,c
  7449  0013CC  5C12               	subwf	___lwdiv@dividend,w,c
  7450  0013CE  5015               	movf	___lwdiv@divisor+1,w,c
  7451  0013D0  5813               	subwfb	___lwdiv@dividend+1,w,c
  7452  0013D2  A0D8               	btfss	status,0,c
  7453  0013D4  D005               	goto	l3911
  7454  0013D6  5014               	movf	___lwdiv@divisor,w,c
  7455  0013D8  5E12               	subwf	___lwdiv@dividend,f,c
  7456  0013DA  5015               	movf	___lwdiv@divisor+1,w,c
  7457  0013DC  5A13               	subwfb	___lwdiv@dividend+1,f,c
  7458  0013DE  8017               	bsf	___lwdiv@quotient,0,c
  7459  0013E0                     l3911:
  7460  0013E0  90D8               	bcf	status,0,c
  7461  0013E2  3215               	rrcf	___lwdiv@divisor+1,f,c
  7462  0013E4  3214               	rrcf	___lwdiv@divisor,f,c
  7463  0013E6  2E16               	decfsz	___lwdiv@counter,f,c
  7464  0013E8  D7ED               	goto	l3903
  7465  0013EA                     l1134:
  7466  0013EA  C017  F012         	movff	___lwdiv@quotient,?___lwdiv
  7467  0013EE  C018  F013         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7468  0013F2  0012               	return		;funcret
  7469  0013F4                     __end_of___lwdiv:
  7470                           	opt stack 0
  7471                           tblptru	equ	0xFF8
  7472                           tblptrh	equ	0xFF7
  7473                           tblptrl	equ	0xFF6
  7474                           tablat	equ	0xFF5
  7475                           prodh	equ	0xFF4
  7476                           prodl	equ	0xFF3
  7477                           intcon	equ	0xFF2
  7478                           indf0	equ	0xFEF
  7479                           postinc0	equ	0xFEE
  7480                           fsr0h	equ	0xFEA
  7481                           fsr0l	equ	0xFE9
  7482                           wreg	equ	0xFE8
  7483                           indf1	equ	0xFE7
  7484                           postdec1	equ	0xFE5
  7485                           plusw1	equ	0xFE3
  7486                           fsr1h	equ	0xFE2
  7487                           fsr1l	equ	0xFE1
  7488                           indf2	equ	0xFDF
  7489                           postinc2	equ	0xFDE
  7490                           postdec2	equ	0xFDD
  7491                           plusw2	equ	0xFDB
  7492                           fsr2h	equ	0xFDA
  7493                           fsr2l	equ	0xFD9
  7494                           status	equ	0xFD8
  7495                           
  7496 ;; *************** function _ESP8266_AT_Test *****************
  7497 ;; Defined at:
  7498 ;;		line 130 in file "harwave/UART.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;		None
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;		None
  7503 ;; Return value:  Size  Location     Type
  7504 ;;                  1    wreg      void 
  7505 ;; Registers used:
  7506 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7512 ;;      Params:         0       0       0       0       0       0       0
  7513 ;;      Locals:         0       0       0       0       0       0       0
  7514 ;;      Temps:          0       0       0       0       0       0       0
  7515 ;;      Totals:         0       0       0       0       0       0       0
  7516 ;;Total ram usage:        0 bytes
  7517 ;; Hardware stack levels used:    1
  7518 ;; Hardware stack levels required when called:    4
  7519 ;; This function calls:
  7520 ;;		_ESP8266_Cmd
  7521 ;; This function is called by:
  7522 ;;		_ESP8266_client
  7523 ;;		_ESP8266_Server
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text31
  7528  0016F8                     __ptext31:
  7529                           	opt stack 0
  7530  0016F8                     _ESP8266_AT_Test:
  7531                           	opt stack 25
  7532  0016F8                     l4419:
  7533  0016F8  0EDC               	movlw	low STR_4
  7534  0016FA  6E25               	movwf	ESP8266_Cmd@cmd,c
  7535  0016FC  0E7F               	movlw	high STR_4
  7536  0016FE  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  7537  001700  0EB7               	movlw	low (STR_3+5)
  7538  001702  6E27               	movwf	ESP8266_Cmd@reply1,c
  7539  001704  0E7F               	movlw	high (STR_3+5)
  7540  001706  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  7541  001708  0E00               	movlw	0
  7542  00170A  6E29               	movwf	ESP8266_Cmd@reply2,c
  7543  00170C  0E00               	movlw	0
  7544  00170E  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  7545  001710  0E00               	movlw	0
  7546  001712  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  7547  001714  0EC8               	movlw	200
  7548  001716  6E2B               	movwf	ESP8266_Cmd@waittime,c
  7549  001718  EC7E  F006         	call	_ESP8266_Cmd	;wreg free
  7550  00171C  0900               	iorlw	0
  7551  00171E  A4D8               	btfss	status,2,c
  7552  001720  0012               	return	
  7553  001722  D7EA               	goto	l4419
  7554  001724                     __end_of_ESP8266_AT_Test:
  7555                           	opt stack 0
  7556                           tblptru	equ	0xFF8
  7557                           tblptrh	equ	0xFF7
  7558                           tblptrl	equ	0xFF6
  7559                           tablat	equ	0xFF5
  7560                           prodh	equ	0xFF4
  7561                           prodl	equ	0xFF3
  7562                           intcon	equ	0xFF2
  7563                           indf0	equ	0xFEF
  7564                           postinc0	equ	0xFEE
  7565                           fsr0h	equ	0xFEA
  7566                           fsr0l	equ	0xFE9
  7567                           wreg	equ	0xFE8
  7568                           indf1	equ	0xFE7
  7569                           postdec1	equ	0xFE5
  7570                           plusw1	equ	0xFE3
  7571                           fsr1h	equ	0xFE2
  7572                           fsr1l	equ	0xFE1
  7573                           indf2	equ	0xFDF
  7574                           postinc2	equ	0xFDE
  7575                           postdec2	equ	0xFDD
  7576                           plusw2	equ	0xFDB
  7577                           fsr2h	equ	0xFDA
  7578                           fsr2l	equ	0xFD9
  7579                           status	equ	0xFD8
  7580                           
  7581 ;; *************** function _ESP8266_Cmd *****************
  7582 ;; Defined at:
  7583 ;;		line 86 in file "harwave/UART.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;  cmd             2   36[COMRAM] PTR unsigned char 
  7586 ;;		 -> STR_55(14), STR_53(15), STR_49(11), STR_47(22), 
  7587 ;;		 -> STR_45(14), STR_43(15), STR_41(14), STR_35(13), 
  7588 ;;		 -> STR_32(13), STR_30(25), STR_28(23), ESP8266_Link_Server@cCmd(120), 
  7589 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_13(14), STR_11(14), 
  7590 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@cStr(20), 
  7591 ;;  reply1          2   38[COMRAM] PTR unsigned char 
  7592 ;;		 -> STR_56(3), STR_54(3), STR_50(3), STR_48(3), 
  7593 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_36(10), 
  7594 ;;		 -> STR_33(10), STR_31(3), STR_29(3), STR_26(8), 
  7595 ;;		 -> STR_19(3), STR_16(3), STR_14(3), STR_12(3), 
  7596 ;;		 -> STR_10(3), STR_7(3), STR_5(3), STR_3(8), 
  7597 ;;		 -> STR_2(3), 
  7598 ;;  reply2          2   40[COMRAM] PTR unsigned char 
  7599 ;;		 -> STR_37(3), STR_34(3), STR_27(7), STR_17(10), 
  7600 ;;		 -> STR_8(6), NULL(0), 
  7601 ;;  waittime        2   42[COMRAM] unsigned int 
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;		None
  7604 ;; Return value:  Size  Location     Type
  7605 ;;                  1    wreg      unsigned char 
  7606 ;; Registers used:
  7607 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7608 ;; Tracked objects:
  7609 ;;		On entry : 0/0
  7610 ;;		On exit  : 0/0
  7611 ;;		Unchanged: 0/0
  7612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7613 ;;      Params:         8       0       0       0       0       0       0
  7614 ;;      Locals:         1       0       0       0       0       0       0
  7615 ;;      Temps:          0       0       0       0       0       0       0
  7616 ;;      Totals:         9       0       0       0       0       0       0
  7617 ;;Total ram usage:        9 bytes
  7618 ;; Hardware stack levels used:    1
  7619 ;; Hardware stack levels required when called:    3
  7620 ;; This function calls:
  7621 ;;		_ESP8266_Uart
  7622 ;;		_delay_ms
  7623 ;;		_strstr
  7624 ;; This function is called by:
  7625 ;;		_ESP8266_AT_Test
  7626 ;;		_ESP8266_Rst
  7627 ;;		_ESP8266_Net_Mode_Choose
  7628 ;;		_ESP8266_JoinAP
  7629 ;;		_ESP8266_Link_Server
  7630 ;;		_STA_MODE
  7631 ;;		_ESP8266_client
  7632 ;;		_ESP8266_SendString
  7633 ;;		_ESP8266_BuildAP
  7634 ;;		_set_baudrate
  7635 ;;		_AP_MODE
  7636 ;;		_ESP8266_Server
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text32
  7641  000CFC                     __ptext32:
  7642                           	opt stack 0
  7643  000CFC                     _ESP8266_Cmd:
  7644                           	opt stack 24
  7645                           
  7646                           ;UART.c: 88: test_index=0;
  7647                           
  7648                           ;incstack = 0
  7649  000CFC  0E00               	movlw	0
  7650  000CFE  6E4D               	movwf	_test_index+1,c
  7651  000D00  0E00               	movlw	0
  7652  000D02  6E4C               	movwf	_test_index,c
  7653                           
  7654                           ;UART.c: 89: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  7655  000D04  0102               	movlb	2	; () banked
  7656  000D06  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  7657  000D08  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  7658  000D0A  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  7659  000D0C  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  7660  000D0E  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  7661  000D10  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  7662  000D12  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  7663                           
  7664                           ; BSR set to: 2
  7665                           ;UART.c: 93: ESP8266_Uart( cmd);
  7666  000D14  C025  F012         	movff	ESP8266_Cmd@cmd,ESP8266_Uart@cmd
  7667  000D18  C026  F013         	movff	ESP8266_Cmd@cmd+1,ESP8266_Uart@cmd+1
  7668  000D1C  EC3D  F009         	call	_ESP8266_Uart	;wreg free
  7669                           
  7670                           ;UART.c: 96: if ( ( reply1 == 0 ) && ( reply2 == 0 ) )
  7671  000D20  5027               	movf	ESP8266_Cmd@reply1,w,c
  7672  000D22  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  7673  000D24  A4D8               	btfss	status,2,c
  7674  000D26  D006               	goto	l3845
  7675  000D28  5029               	movf	ESP8266_Cmd@reply2,w,c
  7676  000D2A  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  7677  000D2C  A4D8               	btfss	status,2,c
  7678  000D2E  D002               	goto	l3845
  7679                           
  7680                           ;UART.c: 97: return 1;
  7681  000D30  0E01               	movlw	1
  7682  000D32  0012               	return	
  7683  000D34                     l3845:
  7684                           
  7685                           ;UART.c: 99: delay_ms ( waittime );
  7686  000D34  C02B  F014         	movff	ESP8266_Cmd@waittime,delay_ms@ms
  7687  000D38  C02C  F015         	movff	ESP8266_Cmd@waittime+1,delay_ms@ms+1
  7688  000D3C  EC41  F00C         	call	_delay_ms	;wreg free
  7689                           
  7690                           ;UART.c: 106: if ( ( reply1 != 0 ) && ( reply2 != 0 ) )
  7691  000D40  5027               	movf	ESP8266_Cmd@reply1,w,c
  7692  000D42  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  7693  000D44  B4D8               	btfsc	status,2,c
  7694  000D46  D022               	goto	l3863
  7695  000D48  5029               	movf	ESP8266_Cmd@reply2,w,c
  7696  000D4A  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  7697  000D4C  B4D8               	btfsc	status,2,c
  7698  000D4E  D01E               	goto	l3863
  7699                           
  7700                           ;UART.c: 107: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) || (u
      +                          8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  7701  000D50  0E01               	movlw	1
  7702  000D52  6E2D               	movwf	_ESP8266_Cmd$1210,c
  7703  000D54  0E9A               	movlw	low _strEsp8266_Fram_Record
  7704  000D56  6E21               	movwf	strstr@s1,c
  7705  000D58  0E02               	movlw	high _strEsp8266_Fram_Record
  7706  000D5A  6E22               	movwf	strstr@s1+1,c
  7707  000D5C  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  7708  000D60  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  7709  000D64  EC7C  F008         	call	_strstr	;wreg free
  7710  000D68  6621               	tstfsz	?_strstr,c
  7711  000D6A  D00E               	goto	l352
  7712  000D6C  0E9A               	movlw	low _strEsp8266_Fram_Record
  7713  000D6E  6E21               	movwf	strstr@s1,c
  7714  000D70  0E02               	movlw	high _strEsp8266_Fram_Record
  7715  000D72  6E22               	movwf	strstr@s1+1,c
  7716  000D74  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  7717  000D78  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  7718  000D7C  EC7C  F008         	call	_strstr	;wreg free
  7719  000D80  6621               	tstfsz	?_strstr,c
  7720  000D82  D002               	goto	l352
  7721  000D84  0E00               	movlw	0
  7722  000D86  6E2D               	movwf	_ESP8266_Cmd$1210,c
  7723  000D88                     l352:
  7724  000D88  502D               	movf	_ESP8266_Cmd$1210,w,c
  7725  000D8A  0012               	return	
  7726  000D8C                     l3863:
  7727                           
  7728                           ;UART.c: 108: else if ( reply1 != 0 )
  7729  000D8C  5027               	movf	ESP8266_Cmd@reply1,w,c
  7730  000D8E  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  7731  000D90  B4D8               	btfsc	status,2,c
  7732  000D92  D00C               	goto	l3871
  7733                           
  7734                           ;UART.c: 109: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) );
  7735  000D94  0E9A               	movlw	low _strEsp8266_Fram_Record
  7736  000D96  6E21               	movwf	strstr@s1,c
  7737  000D98  0E02               	movlw	high _strEsp8266_Fram_Record
  7738  000D9A  6E22               	movwf	strstr@s1+1,c
  7739  000D9C  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  7740  000DA0  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  7741  000DA4  EC7C  F008         	call	_strstr	;wreg free
  7742  000DA8  5021               	movf	?_strstr,w,c
  7743  000DAA  0012               	return	
  7744  000DAC                     l3871:
  7745                           
  7746                           ;UART.c: 110: else
  7747                           ;UART.c: 111: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  7748  000DAC  0E9A               	movlw	low _strEsp8266_Fram_Record
  7749  000DAE  6E21               	movwf	strstr@s1,c
  7750  000DB0  0E02               	movlw	high _strEsp8266_Fram_Record
  7751  000DB2  6E22               	movwf	strstr@s1+1,c
  7752  000DB4  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  7753  000DB8  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  7754  000DBC  EC7C  F008         	call	_strstr	;wreg free
  7755  000DC0  5021               	movf	?_strstr,w,c
  7756  000DC2  0012               	return	
  7757  000DC4                     __end_of_ESP8266_Cmd:
  7758                           	opt stack 0
  7759                           tblptru	equ	0xFF8
  7760                           tblptrh	equ	0xFF7
  7761                           tblptrl	equ	0xFF6
  7762                           tablat	equ	0xFF5
  7763                           prodh	equ	0xFF4
  7764                           prodl	equ	0xFF3
  7765                           intcon	equ	0xFF2
  7766                           indf0	equ	0xFEF
  7767                           postinc0	equ	0xFEE
  7768                           fsr0h	equ	0xFEA
  7769                           fsr0l	equ	0xFE9
  7770                           wreg	equ	0xFE8
  7771                           indf1	equ	0xFE7
  7772                           postdec1	equ	0xFE5
  7773                           plusw1	equ	0xFE3
  7774                           fsr1h	equ	0xFE2
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           plusw2	equ	0xFDB
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           
  7784 ;; *************** function _ESP8266_Uart *****************
  7785 ;; Defined at:
  7786 ;;		line 73 in file "harwave/UART.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;  cmd             2   17[COMRAM] PTR unsigned char 
  7789 ;;		 -> STR_55(14), STR_53(15), STR_49(11), STR_47(22), 
  7790 ;;		 -> STR_45(14), STR_43(15), STR_41(14), STR_35(13), 
  7791 ;;		 -> STR_32(13), STR_30(25), STR_28(23), ESP8266_Link_Server@cCmd(120), 
  7792 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_13(14), STR_11(14), 
  7793 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@cStr(20), 
  7794 ;; Auto vars:     Size  Location     Type
  7795 ;;  index           2   21[COMRAM] int 
  7796 ;; Return value:  Size  Location     Type
  7797 ;;                  1    wreg      void 
  7798 ;; Registers used:
  7799 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  7800 ;; Tracked objects:
  7801 ;;		On entry : 0/0
  7802 ;;		On exit  : 0/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7805 ;;      Params:         2       0       0       0       0       0       0
  7806 ;;      Locals:         2       0       0       0       0       0       0
  7807 ;;      Temps:          2       0       0       0       0       0       0
  7808 ;;      Totals:         6       0       0       0       0       0       0
  7809 ;;Total ram usage:        6 bytes
  7810 ;; Hardware stack levels used:    1
  7811 ;; Hardware stack levels required when called:    1
  7812 ;; This function calls:
  7813 ;;		Nothing
  7814 ;; This function is called by:
  7815 ;;		_ESP8266_Cmd
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text33
  7820  00127A                     __ptext33:
  7821                           	opt stack 0
  7822  00127A                     _ESP8266_Uart:
  7823                           	opt stack 25
  7824                           
  7825                           ;UART.c: 74: int index=-1;
  7826                           
  7827                           ;incstack = 0
  7828  00127A  6816               	setf	ESP8266_Uart@index,c
  7829  00127C  6817               	setf	ESP8266_Uart@index+1,c
  7830  00127E                     l3805:
  7831                           
  7832                           ;UART.c: 77: {
  7833                           ;UART.c: 78: index++;
  7834  00127E  4A16               	infsnz	ESP8266_Uart@index,f,c
  7835  001280  2A17               	incf	ESP8266_Uart@index+1,f,c
  7836  001282                     l338:
  7837  001282  A89E               	btfss	3998,4,c	;volatile
  7838  001284  D7FE               	goto	l338
  7839                           
  7840                           ;UART.c: 80: TXREG=cmd[index];
  7841  001286  5016               	movf	ESP8266_Uart@index,w,c
  7842  001288  2412               	addwf	ESP8266_Uart@cmd,w,c
  7843  00128A  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  7844  00128C  5017               	movf	ESP8266_Uart@index+1,w,c
  7845  00128E  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  7846  001290  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  7847  001292  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  7848  001296  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  7849  00129A  6AF8               	clrf	tblptru,c
  7850  00129C  0E05               	movlw	(high __ramtop+-1)
  7851  00129E  64F7               	cpfsgt	tblptrh,c
  7852  0012A0  D003               	bra	u3337
  7853  0012A2  0008               	tblrd		*
  7854  0012A4  50F5               	movf	tablat,w,c
  7855  0012A6  D005               	bra	u3330
  7856  0012A8                     u3337:
  7857  0012A8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7858  0012AC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7859  0012B0  50EF               	movf	indf0,w,c
  7860  0012B2                     u3330:
  7861  0012B2  6EAD               	movwf	4013,c	;volatile
  7862                           
  7863                           ;UART.c: 81: }while(cmd[index]!='\0');
  7864  0012B4  5016               	movf	ESP8266_Uart@index,w,c
  7865  0012B6  2412               	addwf	ESP8266_Uart@cmd,w,c
  7866  0012B8  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  7867  0012BA  5017               	movf	ESP8266_Uart@index+1,w,c
  7868  0012BC  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  7869  0012BE  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  7870  0012C0  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  7871  0012C4  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  7872  0012C8  6AF8               	clrf	tblptru,c
  7873  0012CA  0E05               	movlw	(high __ramtop+-1)
  7874  0012CC  64F7               	cpfsgt	tblptrh,c
  7875  0012CE  D003               	bra	u3347
  7876  0012D0  0008               	tblrd		*
  7877  0012D2  50F5               	movf	tablat,w,c
  7878  0012D4  D005               	bra	u3340
  7879  0012D6                     u3347:
  7880  0012D6  CFF6 FFE9          	movff	tblptrl,fsr0l
  7881  0012DA  CFF7 FFEA          	movff	tblptrh,fsr0h
  7882  0012DE  50EF               	movf	indf0,w,c
  7883  0012E0                     u3340:
  7884  0012E0  0900               	iorlw	0
  7885  0012E2  A4D8               	btfss	status,2,c
  7886  0012E4  D7CC               	goto	l3805
  7887  0012E6                     l342:
  7888  0012E6  B2AC               	btfsc	4012,1,c	;volatile
  7889  0012E8  0012               	return	
  7890  0012EA  D7FD               	goto	l342
  7891  0012EC                     __end_of_ESP8266_Uart:
  7892                           	opt stack 0
  7893                           tblptru	equ	0xFF8
  7894                           tblptrh	equ	0xFF7
  7895                           tblptrl	equ	0xFF6
  7896                           tablat	equ	0xFF5
  7897                           prodh	equ	0xFF4
  7898                           prodl	equ	0xFF3
  7899                           intcon	equ	0xFF2
  7900                           indf0	equ	0xFEF
  7901                           postinc0	equ	0xFEE
  7902                           fsr0h	equ	0xFEA
  7903                           fsr0l	equ	0xFE9
  7904                           wreg	equ	0xFE8
  7905                           indf1	equ	0xFE7
  7906                           postdec1	equ	0xFE5
  7907                           plusw1	equ	0xFE3
  7908                           fsr1h	equ	0xFE2
  7909                           fsr1l	equ	0xFE1
  7910                           indf2	equ	0xFDF
  7911                           postinc2	equ	0xFDE
  7912                           postdec2	equ	0xFDD
  7913                           plusw2	equ	0xFDB
  7914                           fsr2h	equ	0xFDA
  7915                           fsr2l	equ	0xFD9
  7916                           status	equ	0xFD8
  7917                           
  7918 ;; *************** function _ESP8266_ReceiveString *****************
  7919 ;; Defined at:
  7920 ;;		line 257 in file "harwave/UART.c"
  7921 ;; Parameters:    Size  Location     Type
  7922 ;;		None
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  pRecStr         2   38[COMRAM] PTR unsigned char 
  7925 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  2   36[COMRAM] PTR unsigned char 
  7928 ;; Registers used:
  7929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7935 ;;      Params:         2       0       0       0       0       0       0
  7936 ;;      Locals:         2       0       0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0
  7938 ;;      Totals:         4       0       0       0       0       0       0
  7939 ;;Total ram usage:        4 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:    3
  7942 ;; This function calls:
  7943 ;;		_strstr
  7944 ;; This function is called by:
  7945 ;;		_main
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	text34
  7950  000FDC                     __ptext34:
  7951                           	opt stack 0
  7952  000FDC                     _ESP8266_ReceiveString:
  7953                           	opt stack 27
  7954                           
  7955                           ;UART.c: 259: char * pRecStr = 0;
  7956                           
  7957                           ;incstack = 0
  7958  000FDC  0E00               	movlw	0
  7959  000FDE  6E27               	movwf	ESP8266_ReceiveString@pRecStr,c
  7960  000FE0  0E00               	movlw	0
  7961  000FE2  6E28               	movwf	ESP8266_ReceiveString@pRecStr+1,c
  7962                           
  7963                           ;UART.c: 260: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  7964  000FE4  0102               	movlb	2	; () banked
  7965  000FE6  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  7966  000FE8  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  7967  000FEA  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  7968  000FEC  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  7969  000FEE  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  7970  000FF0  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  7971  000FF2  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  7972  000FF4                     l4605:
  7973  000FF4  0E9A               	movlw	low _strEsp8266_Fram_Record
  7974  000FF6  6E21               	movwf	strstr@s1,c
  7975  000FF8  0E02               	movlw	high _strEsp8266_Fram_Record
  7976  000FFA  6E22               	movwf	strstr@s1+1,c
  7977  000FFC  0EFA               	movlw	low STR_59
  7978  000FFE  6E23               	movwf	strstr@s2,c
  7979  001000  0E7F               	movlw	high STR_59
  7980  001002  6E24               	movwf	strstr@s2+1,c
  7981  001004  EC7C  F008         	call	_strstr	;wreg free
  7982  001008  5021               	movf	?_strstr,w,c
  7983  00100A  B4D8               	btfsc	status,2,c
  7984  00100C  D7F3               	goto	l4605
  7985                           
  7986                           ;UART.c: 266: }
  7987                           ;UART.c: 267: }
  7988                           ;UART.c: 268: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  7989  00100E  0102               	movlb	2	; () banked
  7990  001010  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  7991  001012  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  7992  001014  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  7993  001016  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  7994  001018  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  7995  00101A  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  7996  00101C  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  7997                           
  7998                           ;UART.c: 269: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 0;
  7999  00101E  0102               	movlb	2	; () banked
  8000  001020  9FCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),7,b
  8001  001022                     l4607:
  8002  001022  0E9A               	movlw	low _strEsp8266_Fram_Record
  8003  001024  6E21               	movwf	strstr@s1,c
  8004  001026  0E02               	movlw	high _strEsp8266_Fram_Record
  8005  001028  6E22               	movwf	strstr@s1+1,c
  8006  00102A  0EF8               	movlw	low STR_60
  8007  00102C  6E23               	movwf	strstr@s2,c
  8008  00102E  0E7F               	movlw	high STR_60
  8009  001030  6E24               	movwf	strstr@s2+1,c
  8010  001032  EC7C  F008         	call	_strstr	;wreg free
  8011  001036  5021               	movf	?_strstr,w,c
  8012  001038  1022               	iorwf	?_strstr+1,w,c
  8013  00103A  B4D8               	btfsc	status,2,c
  8014  00103C  D7F2               	goto	l4607
  8015                           
  8016                           ;UART.c: 271: if ( strstr ( strEsp8266_Fram_Record .Data_RX_BUF, "\0" ) )
  8017  00103E  0E9A               	movlw	low _strEsp8266_Fram_Record
  8018  001040  6E21               	movwf	strstr@s1,c
  8019  001042  0E02               	movlw	high _strEsp8266_Fram_Record
  8020  001044  6E22               	movwf	strstr@s1+1,c
  8021  001046  0EF8               	movlw	low STR_60
  8022  001048  6E23               	movwf	strstr@s2,c
  8023  00104A  0E7F               	movlw	high STR_60
  8024  00104C  6E24               	movwf	strstr@s2+1,c
  8025  00104E  EC7C  F008         	call	_strstr	;wreg free
  8026  001052  5021               	movf	?_strstr,w,c
  8027  001054  1022               	iorwf	?_strstr+1,w,c
  8028  001056  B4D8               	btfsc	status,2,c
  8029  001058  D004               	goto	l463
  8030                           
  8031                           ;UART.c: 272: pRecStr = strEsp8266_Fram_Record .Data_RX_BUF;
  8032  00105A  0E9A               	movlw	low _strEsp8266_Fram_Record
  8033  00105C  6E27               	movwf	ESP8266_ReceiveString@pRecStr,c
  8034  00105E  0E02               	movlw	high _strEsp8266_Fram_Record
  8035  001060  6E28               	movwf	ESP8266_ReceiveString@pRecStr+1,c
  8036  001062                     l463:
  8037                           
  8038                           ;UART.c: 275: return pRecStr;
  8039  001062  C027  F025         	movff	ESP8266_ReceiveString@pRecStr,?_ESP8266_ReceiveString
  8040  001066  C028  F026         	movff	ESP8266_ReceiveString@pRecStr+1,?_ESP8266_ReceiveString+1
  8041  00106A  0012               	return	
  8042  00106C                     __end_of_ESP8266_ReceiveString:
  8043                           	opt stack 0
  8044                           tblptru	equ	0xFF8
  8045                           tblptrh	equ	0xFF7
  8046                           tblptrl	equ	0xFF6
  8047                           tablat	equ	0xFF5
  8048                           prodh	equ	0xFF4
  8049                           prodl	equ	0xFF3
  8050                           intcon	equ	0xFF2
  8051                           indf0	equ	0xFEF
  8052                           postinc0	equ	0xFEE
  8053                           fsr0h	equ	0xFEA
  8054                           fsr0l	equ	0xFE9
  8055                           wreg	equ	0xFE8
  8056                           indf1	equ	0xFE7
  8057                           postdec1	equ	0xFE5
  8058                           plusw1	equ	0xFE3
  8059                           fsr1h	equ	0xFE2
  8060                           fsr1l	equ	0xFE1
  8061                           indf2	equ	0xFDF
  8062                           postinc2	equ	0xFDE
  8063                           postdec2	equ	0xFDD
  8064                           plusw2	equ	0xFDB
  8065                           fsr2h	equ	0xFDA
  8066                           fsr2l	equ	0xFD9
  8067                           status	equ	0xFD8
  8068                           
  8069 ;; *************** function _strstr *****************
  8070 ;; Defined at:
  8071 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strstr.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;  s1              2   32[COMRAM] PTR const unsigned char 
  8074 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8075 ;;  s2              2   34[COMRAM] PTR const unsigned char 
  8076 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8077 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8078 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8079 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8080 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8081 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8082 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8083 ;;		 -> STR_2(3), NULL(0), 
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;		None
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  2   32[COMRAM] PTR unsigned char 
  8088 ;; Registers used:
  8089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8095 ;;      Params:         4       0       0       0       0       0       0
  8096 ;;      Locals:         0       0       0       0       0       0       0
  8097 ;;      Temps:          0       0       0       0       0       0       0
  8098 ;;      Totals:         4       0       0       0       0       0       0
  8099 ;;Total ram usage:        4 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    2
  8102 ;; This function calls:
  8103 ;;		_strchr
  8104 ;;		_strlen
  8105 ;;		_strncmp
  8106 ;; This function is called by:
  8107 ;;		_ESP8266_Cmd
  8108 ;;		_ESP8266_ReceiveString
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           	psect	text35
  8113  0010F8                     __ptext35:
  8114                           	opt stack 0
  8115  0010F8                     _strstr:
  8116                           	opt stack 24
  8117                           
  8118                           ;incstack = 0
  8119  0010F8  D031               	goto	l3819
  8120  0010FA                     l3811:
  8121  0010FA  C021  F018         	movff	strstr@s1,strncmp@s1
  8122  0010FE  C022  F019         	movff	strstr@s1+1,strncmp@s1+1
  8123  001102  C023  F01A         	movff	strstr@s2,strncmp@s2
  8124  001106  C024  F01B         	movff	strstr@s2+1,strncmp@s2+1
  8125  00110A  C023  F012         	movff	strstr@s2,strlen@s
  8126  00110E  C024  F013         	movff	strstr@s2+1,strlen@s+1
  8127  001112  EC5F  F00A         	call	_strlen	;wreg free
  8128  001116  C012  F01C         	movff	?_strlen,strncmp@len
  8129  00111A  C013  F01D         	movff	?_strlen+1,strncmp@len+1
  8130  00111E  ECBE  F008         	call	_strncmp	;wreg free
  8131  001122  5018               	movf	?_strncmp,w,c
  8132  001124  1019               	iorwf	?_strncmp+1,w,c
  8133  001126  A4D8               	btfss	status,2,c
  8134  001128  D005               	goto	l3817
  8135  00112A  C021  F021         	movff	strstr@s1,?_strstr
  8136  00112E  C022  F022         	movff	strstr@s1+1,?_strstr+1
  8137  001132  0012               	return	
  8138  001134                     l3817:
  8139  001134  0E01               	movlw	1
  8140  001136  2421               	addwf	strstr@s1,w,c
  8141  001138  6E12               	movwf	strchr@ptr,c
  8142  00113A  0E00               	movlw	0
  8143  00113C  2022               	addwfc	strstr@s1+1,w,c
  8144  00113E  6E13               	movwf	strchr@ptr+1,c
  8145  001140  C023  FFF6         	movff	strstr@s2,tblptrl
  8146  001144  C024  FFF7         	movff	strstr@s2+1,tblptrh
  8147  001148                     	if	0	;tblptru may be non-zero
  8148  001148                     	endif
  8149  001148                     	if	0	;tblptru may be non-zero
  8150  001148                     	endif
  8151  001148  0008               	tblrd		*
  8152  00114A  50F5               	movf	tablat,w,c
  8153  00114C  6E14               	movwf	strchr@chr,c
  8154  00114E  6A15               	clrf	strchr@chr+1,c
  8155  001150  ECB6  F00A         	call	_strchr	;wreg free
  8156  001154  C012  F021         	movff	?_strchr,strstr@s1
  8157  001158  C013  F022         	movff	?_strchr+1,strstr@s1+1
  8158  00115C                     l3819:
  8159  00115C  5021               	movf	strstr@s1,w,c
  8160  00115E  1022               	iorwf	strstr@s1+1,w,c
  8161  001160  B4D8               	btfsc	status,2,c
  8162  001162  D007               	goto	l3823
  8163  001164  C021  FFD9         	movff	strstr@s1,fsr2l
  8164  001168  C022  FFDA         	movff	strstr@s1+1,fsr2h
  8165  00116C  50DF               	movf	indf2,w,c
  8166  00116E  A4D8               	btfss	status,2,c
  8167  001170  D7C4               	goto	l3811
  8168  001172                     l3823:
  8169  001172  0E00               	movlw	0
  8170  001174  6E21               	movwf	?_strstr,c
  8171  001176  0E00               	movlw	0
  8172  001178  6E22               	movwf	?_strstr+1,c
  8173  00117A  0012               	return	
  8174  00117C                     __end_of_strstr:
  8175                           	opt stack 0
  8176                           tblptru	equ	0xFF8
  8177                           tblptrh	equ	0xFF7
  8178                           tblptrl	equ	0xFF6
  8179                           tablat	equ	0xFF5
  8180                           prodh	equ	0xFF4
  8181                           prodl	equ	0xFF3
  8182                           intcon	equ	0xFF2
  8183                           indf0	equ	0xFEF
  8184                           postinc0	equ	0xFEE
  8185                           fsr0h	equ	0xFEA
  8186                           fsr0l	equ	0xFE9
  8187                           wreg	equ	0xFE8
  8188                           indf1	equ	0xFE7
  8189                           postdec1	equ	0xFE5
  8190                           plusw1	equ	0xFE3
  8191                           fsr1h	equ	0xFE2
  8192                           fsr1l	equ	0xFE1
  8193                           indf2	equ	0xFDF
  8194                           postinc2	equ	0xFDE
  8195                           postdec2	equ	0xFDD
  8196                           plusw2	equ	0xFDB
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function _strncmp *****************
  8202 ;; Defined at:
  8203 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  8206 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8207 ;;  s2              2   25[COMRAM] PTR const unsigned char 
  8208 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8209 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8210 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8211 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8212 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8213 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8214 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8215 ;;		 -> STR_2(3), NULL(0), 
  8216 ;;  len             2   27[COMRAM] unsigned int 
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;		None
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  2   23[COMRAM] int 
  8221 ;; Registers used:
  8222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8228 ;;      Params:         6       0       0       0       0       0       0
  8229 ;;      Locals:         0       0       0       0       0       0       0
  8230 ;;      Temps:          3       0       0       0       0       0       0
  8231 ;;      Totals:         9       0       0       0       0       0       0
  8232 ;;Total ram usage:        9 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    1
  8235 ;; This function calls:
  8236 ;;		Nothing
  8237 ;; This function is called by:
  8238 ;;		_strstr
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           	psect	text36
  8243  00117C                     __ptext36:
  8244                           	opt stack 0
  8245  00117C                     _strncmp:
  8246                           	opt stack 24
  8247                           
  8248                           ;incstack = 0
  8249  00117C  D033               	goto	l3727
  8250  00117E                     l3717:
  8251  00117E  C018  FFD9         	movff	strncmp@s1,fsr2l
  8252  001182  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  8253  001186  50DF               	movf	indf2,w,c
  8254  001188  B4D8               	btfsc	status,2,c
  8255  00118A  D00F               	goto	l3721
  8256  00118C  C018  FFD9         	movff	strncmp@s1,fsr2l
  8257  001190  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  8258  001194  50DF               	movf	indf2,w,c
  8259  001196  6E1E               	movwf	??_strncmp& (0+255),c
  8260  001198  C01A  FFF6         	movff	strncmp@s2,tblptrl
  8261  00119C  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  8262  0011A0                     	if	0	;tblptru may be non-zero
  8263  0011A0                     	endif
  8264  0011A0                     	if	0	;tblptru may be non-zero
  8265  0011A0                     	endif
  8266  0011A0  0008               	tblrd		*
  8267  0011A2  50F5               	movf	tablat,w,c
  8268  0011A4  181E               	xorwf	??_strncmp,w,c
  8269  0011A6  B4D8               	btfsc	status,2,c
  8270  0011A8  D019               	goto	l3725
  8271  0011AA                     l3721:
  8272  0011AA  C01A  FFF6         	movff	strncmp@s2,tblptrl
  8273  0011AE  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  8274  0011B2                     	if	0	;tblptru may be non-zero
  8275  0011B2                     	endif
  8276  0011B2                     	if	0	;tblptru may be non-zero
  8277  0011B2                     	endif
  8278  0011B2  0008               	tblrd		*
  8279  0011B4  50F5               	movf	tablat,w,c
  8280  0011B6  6E1E               	movwf	??_strncmp& (0+255),c
  8281  0011B8  6A1F               	clrf	(??_strncmp+1)& (0+255),c
  8282  0011BA  1E1E               	comf	??_strncmp,f,c
  8283  0011BC  1E1F               	comf	??_strncmp+1,f,c
  8284  0011BE  4A1E               	infsnz	??_strncmp,f,c
  8285  0011C0  2A1F               	incf	??_strncmp+1,f,c
  8286  0011C2  C018  FFD9         	movff	strncmp@s1,fsr2l
  8287  0011C6  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  8288  0011CA  50DF               	movf	indf2,w,c
  8289  0011CC  6E20               	movwf	(??_strncmp+2)& (0+255),c
  8290  0011CE  5020               	movf	??_strncmp+2,w,c
  8291  0011D0  241E               	addwf	??_strncmp,w,c
  8292  0011D2  6E18               	movwf	?_strncmp,c
  8293  0011D4  0E00               	movlw	0
  8294  0011D6  201F               	addwfc	??_strncmp+1,w,c
  8295  0011D8  6E19               	movwf	?_strncmp+1,c
  8296  0011DA  0012               	return	
  8297  0011DC                     l3725:
  8298  0011DC  4A18               	infsnz	strncmp@s1,f,c
  8299  0011DE  2A19               	incf	strncmp@s1+1,f,c
  8300  0011E0  4A1A               	infsnz	strncmp@s2,f,c
  8301  0011E2  2A1B               	incf	strncmp@s2+1,f,c
  8302  0011E4                     l3727:
  8303  0011E4  061C               	decf	strncmp@len,f,c
  8304  0011E6  A0D8               	btfss	status,0,c
  8305  0011E8  061D               	decf	strncmp@len+1,f,c
  8306  0011EA  281C               	incf	strncmp@len,w,c
  8307  0011EC  E1C8               	bnz	l3717
  8308  0011EE  281D               	incf	strncmp@len+1,w,c
  8309  0011F0  A4D8               	btfss	status,2,c
  8310  0011F2  D7C5               	goto	l3717
  8311  0011F4  0E00               	movlw	0
  8312  0011F6  6E19               	movwf	?_strncmp+1,c
  8313  0011F8  0E00               	movlw	0
  8314  0011FA  6E18               	movwf	?_strncmp,c
  8315  0011FC  0012               	return	
  8316  0011FE                     __end_of_strncmp:
  8317                           	opt stack 0
  8318                           tblptru	equ	0xFF8
  8319                           tblptrh	equ	0xFF7
  8320                           tblptrl	equ	0xFF6
  8321                           tablat	equ	0xFF5
  8322                           prodh	equ	0xFF4
  8323                           prodl	equ	0xFF3
  8324                           intcon	equ	0xFF2
  8325                           indf0	equ	0xFEF
  8326                           postinc0	equ	0xFEE
  8327                           fsr0h	equ	0xFEA
  8328                           fsr0l	equ	0xFE9
  8329                           wreg	equ	0xFE8
  8330                           indf1	equ	0xFE7
  8331                           postdec1	equ	0xFE5
  8332                           plusw1	equ	0xFE3
  8333                           fsr1h	equ	0xFE2
  8334                           fsr1l	equ	0xFE1
  8335                           indf2	equ	0xFDF
  8336                           postinc2	equ	0xFDE
  8337                           postdec2	equ	0xFDD
  8338                           plusw2	equ	0xFDB
  8339                           fsr2h	equ	0xFDA
  8340                           fsr2l	equ	0xFD9
  8341                           status	equ	0xFD8
  8342                           
  8343 ;; *************** function _strlen *****************
  8344 ;; Defined at:
  8345 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;  s               2   17[COMRAM] PTR const unsigned char 
  8348 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8349 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8350 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8351 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8352 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8353 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8354 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8355 ;;		 -> STR_2(3), NULL(0), 
  8356 ;; Auto vars:     Size  Location     Type
  8357 ;;  cp              2   21[COMRAM] PTR const unsigned char 
  8358 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8359 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8360 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8361 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8362 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8363 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8364 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8365 ;;		 -> STR_2(3), NULL(0), 
  8366 ;; Return value:  Size  Location     Type
  8367 ;;                  2   17[COMRAM] unsigned int 
  8368 ;; Registers used:
  8369 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  8370 ;; Tracked objects:
  8371 ;;		On entry : 0/0
  8372 ;;		On exit  : 0/0
  8373 ;;		Unchanged: 0/0
  8374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8375 ;;      Params:         2       0       0       0       0       0       0
  8376 ;;      Locals:         2       0       0       0       0       0       0
  8377 ;;      Temps:          2       0       0       0       0       0       0
  8378 ;;      Totals:         6       0       0       0       0       0       0
  8379 ;;Total ram usage:        6 bytes
  8380 ;; Hardware stack levels used:    1
  8381 ;; Hardware stack levels required when called:    1
  8382 ;; This function calls:
  8383 ;;		Nothing
  8384 ;; This function is called by:
  8385 ;;		_strstr
  8386 ;; This function uses a non-reentrant model
  8387 ;;
  8388                           
  8389                           	psect	text37
  8390  0014BE                     __ptext37:
  8391                           	opt stack 0
  8392  0014BE                     _strlen:
  8393                           	opt stack 24
  8394                           
  8395                           ;incstack = 0
  8396  0014BE  C012  F016         	movff	strlen@s,strlen@cp
  8397  0014C2  C013  F017         	movff	strlen@s+1,strlen@cp+1
  8398  0014C6  D002               	goto	l3709
  8399  0014C8                     l3707:
  8400  0014C8  4A16               	infsnz	strlen@cp,f,c
  8401  0014CA  2A17               	incf	strlen@cp+1,f,c
  8402  0014CC                     l3709:
  8403  0014CC  C016  FFF6         	movff	strlen@cp,tblptrl
  8404  0014D0  C017  FFF7         	movff	strlen@cp+1,tblptrh
  8405  0014D4                     	if	0	;tblptru may be non-zero
  8406  0014D4                     	endif
  8407  0014D4                     	if	0	;tblptru may be non-zero
  8408  0014D4                     	endif
  8409  0014D4  0008               	tblrd		*
  8410  0014D6  50F5               	movf	tablat,w,c
  8411  0014D8  0900               	iorlw	0
  8412  0014DA  A4D8               	btfss	status,2,c
  8413  0014DC  D7F5               	goto	l3707
  8414  0014DE  C012  F014         	movff	strlen@s,??_strlen
  8415  0014E2  C013  F015         	movff	strlen@s+1,??_strlen+1
  8416  0014E6  1E14               	comf	??_strlen,f,c
  8417  0014E8  1E15               	comf	??_strlen+1,f,c
  8418  0014EA  4A14               	infsnz	??_strlen,f,c
  8419  0014EC  2A15               	incf	??_strlen+1,f,c
  8420  0014EE  5016               	movf	strlen@cp,w,c
  8421  0014F0  2414               	addwf	??_strlen,w,c
  8422  0014F2  6E12               	movwf	?_strlen,c
  8423  0014F4  5017               	movf	strlen@cp+1,w,c
  8424  0014F6  2015               	addwfc	??_strlen+1,w,c
  8425  0014F8  6E13               	movwf	?_strlen+1,c
  8426  0014FA  0012               	return	
  8427  0014FC                     __end_of_strlen:
  8428                           	opt stack 0
  8429                           tblptru	equ	0xFF8
  8430                           tblptrh	equ	0xFF7
  8431                           tblptrl	equ	0xFF6
  8432                           tablat	equ	0xFF5
  8433                           prodh	equ	0xFF4
  8434                           prodl	equ	0xFF3
  8435                           intcon	equ	0xFF2
  8436                           indf0	equ	0xFEF
  8437                           postinc0	equ	0xFEE
  8438                           fsr0h	equ	0xFEA
  8439                           fsr0l	equ	0xFE9
  8440                           wreg	equ	0xFE8
  8441                           indf1	equ	0xFE7
  8442                           postdec1	equ	0xFE5
  8443                           plusw1	equ	0xFE3
  8444                           fsr1h	equ	0xFE2
  8445                           fsr1l	equ	0xFE1
  8446                           indf2	equ	0xFDF
  8447                           postinc2	equ	0xFDE
  8448                           postdec2	equ	0xFDD
  8449                           plusw2	equ	0xFDB
  8450                           fsr2h	equ	0xFDA
  8451                           fsr2l	equ	0xFD9
  8452                           status	equ	0xFD8
  8453                           
  8454 ;; *************** function _strchr *****************
  8455 ;; Defined at:
  8456 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strchr.c"
  8457 ;; Parameters:    Size  Location     Type
  8458 ;;  ptr             2   17[COMRAM] PTR const unsigned char 
  8459 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8460 ;;  chr             2   19[COMRAM] int 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;		None
  8463 ;; Return value:  Size  Location     Type
  8464 ;;                  2   17[COMRAM] PTR unsigned char 
  8465 ;; Registers used:
  8466 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8472 ;;      Params:         4       0       0       0       0       0       0
  8473 ;;      Locals:         0       0       0       0       0       0       0
  8474 ;;      Temps:          1       0       0       0       0       0       0
  8475 ;;      Totals:         5       0       0       0       0       0       0
  8476 ;;Total ram usage:        5 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    1
  8479 ;; This function calls:
  8480 ;;		Nothing
  8481 ;; This function is called by:
  8482 ;;		_strstr
  8483 ;; This function uses a non-reentrant model
  8484 ;;
  8485                           
  8486                           	psect	text38
  8487  00156C                     __ptext38:
  8488                           	opt stack 0
  8489  00156C                     _strchr:
  8490                           	opt stack 24
  8491  00156C  C012  FFD9         	movff	strchr@ptr,fsr2l
  8492  001570  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  8493  001574  5014               	movf	strchr@chr,w,c
  8494  001576  18DE               	xorwf	postinc2,w,c
  8495  001578  A4D8               	btfss	status,2,c
  8496  00157A  D005               	goto	l3739
  8497  00157C  C012  F012         	movff	strchr@ptr,?_strchr
  8498  001580  C013  F013         	movff	strchr@ptr+1,?_strchr+1
  8499  001584  0012               	return	
  8500  001586                     l3739:
  8501  001586  C012  FFD9         	movff	strchr@ptr,fsr2l
  8502  00158A  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  8503  00158E  4A12               	infsnz	strchr@ptr,f,c
  8504  001590  2A13               	incf	strchr@ptr+1,f,c
  8505  001592  50DF               	movf	indf2,w,c
  8506  001594  A4D8               	btfss	status,2,c
  8507  001596  D7EA               	goto	l3733
  8508  001598  0E00               	movlw	0
  8509  00159A  6E12               	movwf	?_strchr,c
  8510  00159C  0E00               	movlw	0
  8511  00159E  6E13               	movwf	?_strchr+1,c
  8512  0015A0  0012               	return	
  8513  0015A2                     __end_of_strchr:
  8514                           	opt stack 0
  8515                           tblptru	equ	0xFF8
  8516                           tblptrh	equ	0xFF7
  8517                           tblptrl	equ	0xFF6
  8518                           tablat	equ	0xFF5
  8519                           prodh	equ	0xFF4
  8520                           prodl	equ	0xFF3
  8521                           intcon	equ	0xFF2
  8522                           indf0	equ	0xFEF
  8523                           postinc0	equ	0xFEE
  8524                           fsr0h	equ	0xFEA
  8525                           fsr0l	equ	0xFE9
  8526                           wreg	equ	0xFE8
  8527                           indf1	equ	0xFE7
  8528                           postdec1	equ	0xFE5
  8529                           plusw1	equ	0xFE3
  8530                           fsr1h	equ	0xFE2
  8531                           fsr1l	equ	0xFE1
  8532                           indf2	equ	0xFDF
  8533                           postinc2	equ	0xFDE
  8534                           postdec2	equ	0xFDD
  8535                           plusw2	equ	0xFDB
  8536                           fsr2h	equ	0xFDA
  8537                           fsr2l	equ	0xFD9
  8538                           status	equ	0xFD8
  8539                           
  8540 ;; *************** function _ADtoPWM *****************
  8541 ;; Defined at:
  8542 ;;		line 16 in file "harwave/flex.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;  AD              2   35[COMRAM] PTR unsigned char 
  8545 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;  w4              2   43[COMRAM] unsigned int 
  8548 ;;  u4              2   41[COMRAM] unsigned int 
  8549 ;;  w3              2    0        unsigned int 
  8550 ;;  w2              2    0        unsigned int 
  8551 ;;  w1              2    0        unsigned int 
  8552 ;;  w0              2    0        unsigned int 
  8553 ;;  u3              2    0        unsigned int 
  8554 ;;  u2              2    0        unsigned int 
  8555 ;;  u1              2    0        unsigned int 
  8556 ;;  u0              2    0        unsigned int 
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  1    wreg      void 
  8559 ;; Registers used:
  8560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8566 ;;      Params:         2       0       0       0       0       0       0
  8567 ;;      Locals:         4       0       0       0       0       0       0
  8568 ;;      Temps:          4       0       0       0       0       0       0
  8569 ;;      Totals:        10       0       0       0       0       0       0
  8570 ;;Total ram usage:       10 bytes
  8571 ;; Hardware stack levels used:    1
  8572 ;; Hardware stack levels required when called:    8
  8573 ;; This function calls:
  8574 ;;		_PWMt0PCA
  8575 ;; This function is called by:
  8576 ;;		_main
  8577 ;; This function uses a non-reentrant model
  8578 ;;
  8579                           
  8580                           	psect	text39
  8581  000E88                     __ptext39:
  8582                           	opt stack 0
  8583  000E88                     _ADtoPWM:
  8584                           	opt stack 22
  8585                           
  8586                           ;flex.c: 17: u16 u0,u1,u2,u3,u4,w0,w1,w2,w3,w4;
  8587                           ;flex.c: 25: if(*(AD+9)>=136)
  8588                           
  8589                           ;incstack = 0
  8590  000E88  EE20 F009          	lfsr	2,9
  8591  000E8C  5024               	movf	ADtoPWM@AD,w,c
  8592  000E8E  26D9               	addwf	fsr2l,f,c
  8593  000E90  5025               	movf	ADtoPWM@AD+1,w,c
  8594  000E92  22DA               	addwfc	fsr2h,f,c
  8595  000E94  0E87               	movlw	135
  8596  000E96  64DF               	cpfsgt	indf2,c
  8597  000E98  D020               	goto	l4457
  8598                           
  8599                           ;flex.c: 26: w4=finger_under_4[*(AD+9)-136];
  8600  000E9A  0EF0               	movlw	240
  8601  000E9C  6E26               	movwf	??_ADtoPWM& (0+255),c
  8602  000E9E  0EFE               	movlw	254
  8603  000EA0  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  8604  000EA2  EE20 F009          	lfsr	2,9
  8605  000EA6  5024               	movf	ADtoPWM@AD,w,c
  8606  000EA8  26D9               	addwf	fsr2l,f,c
  8607  000EAA  5025               	movf	ADtoPWM@AD+1,w,c
  8608  000EAC  22DA               	addwfc	fsr2h,f,c
  8609  000EAE  50DF               	movf	indf2,w,c
  8610  000EB0  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  8611  000EB2  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  8612  000EB4  90D8               	bcf	status,0,c
  8613  000EB6  3628               	rlcf	??_ADtoPWM+2,f,c
  8614  000EB8  3629               	rlcf	??_ADtoPWM+3,f,c
  8615  000EBA  5026               	movf	??_ADtoPWM,w,c
  8616  000EBC  2628               	addwf	??_ADtoPWM+2,f,c
  8617  000EBE  5027               	movf	??_ADtoPWM+1,w,c
  8618  000EC0  2229               	addwfc	??_ADtoPWM+3,f,c
  8619  000EC2  0E0B               	movlw	low _finger_under_4
  8620  000EC4  2428               	addwf	??_ADtoPWM+2,w,c
  8621  000EC6  6EF6               	movwf	tblptrl,c
  8622  000EC8  0E79               	movlw	high _finger_under_4
  8623  000ECA  2029               	addwfc	??_ADtoPWM+3,w,c
  8624  000ECC  6EF7               	movwf	tblptrh,c
  8625  000ECE                     	if	0	;There are less than 3 active tblptr bytes
  8626  000ECE                     	endif
  8627  000ECE  0009               	tblrd		*+
  8628  000ED0  CFF5 F02C          	movff	tablat,ADtoPWM@w4
  8629  000ED4  000A               	tblrd		*-
  8630  000ED6  CFF5 F02D          	movff	tablat,ADtoPWM@w4+1
  8631  000EDA                     l4457:
  8632                           
  8633                           ;flex.c: 34: if(*(AD+8)>=105)
  8634  000EDA  EE20 F008          	lfsr	2,8
  8635  000EDE  5024               	movf	ADtoPWM@AD,w,c
  8636  000EE0  26D9               	addwf	fsr2l,f,c
  8637  000EE2  5025               	movf	ADtoPWM@AD+1,w,c
  8638  000EE4  22DA               	addwfc	fsr2h,f,c
  8639  000EE6  0E68               	movlw	104
  8640  000EE8  64DF               	cpfsgt	indf2,c
  8641  000EEA  D020               	goto	l4461
  8642                           
  8643                           ;flex.c: 35: u4=finger_up_4[*(AD+8)-105];
  8644  000EEC  0E2E               	movlw	46
  8645  000EEE  6E26               	movwf	??_ADtoPWM& (0+255),c
  8646  000EF0  0EFF               	movlw	255
  8647  000EF2  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  8648  000EF4  EE20 F008          	lfsr	2,8
  8649  000EF8  5024               	movf	ADtoPWM@AD,w,c
  8650  000EFA  26D9               	addwf	fsr2l,f,c
  8651  000EFC  5025               	movf	ADtoPWM@AD+1,w,c
  8652  000EFE  22DA               	addwfc	fsr2h,f,c
  8653  000F00  50DF               	movf	indf2,w,c
  8654  000F02  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  8655  000F04  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  8656  000F06  90D8               	bcf	status,0,c
  8657  000F08  3628               	rlcf	??_ADtoPWM+2,f,c
  8658  000F0A  3629               	rlcf	??_ADtoPWM+3,f,c
  8659  000F0C  5026               	movf	??_ADtoPWM,w,c
  8660  000F0E  2628               	addwf	??_ADtoPWM+2,f,c
  8661  000F10  5027               	movf	??_ADtoPWM+1,w,c
  8662  000F12  2229               	addwfc	??_ADtoPWM+3,f,c
  8663  000F14  0EB7               	movlw	low _finger_up_4
  8664  000F16  2428               	addwf	??_ADtoPWM+2,w,c
  8665  000F18  6EF6               	movwf	tblptrl,c
  8666  000F1A  0E75               	movlw	high _finger_up_4
  8667  000F1C  2029               	addwfc	??_ADtoPWM+3,w,c
  8668  000F1E  6EF7               	movwf	tblptrh,c
  8669  000F20                     	if	0	;There are less than 3 active tblptr bytes
  8670  000F20                     	endif
  8671  000F20  0009               	tblrd		*+
  8672  000F22  CFF5 F02A          	movff	tablat,ADtoPWM@u4
  8673  000F26  000A               	tblrd		*-
  8674  000F28  CFF5 F02B          	movff	tablat,ADtoPWM@u4+1
  8675  000F2C                     l4461:
  8676                           
  8677                           ;flex.c: 43: PWMt0PCA(u4,w4,pink);
  8678  000F2C  C02A  F01F         	movff	ADtoPWM@u4,PWMt0PCA@up
  8679  000F30  C02B  F020         	movff	ADtoPWM@u4+1,PWMt0PCA@up+1
  8680  000F34  C02C  F021         	movff	ADtoPWM@w4,PWMt0PCA@low
  8681  000F38  C02D  F022         	movff	ADtoPWM@w4+1,PWMt0PCA@low+1
  8682  000F3C  0E04               	movlw	4
  8683  000F3E  6E23               	movwf	PWMt0PCA@finger,c
  8684  000F40  ECF2  F004         	call	_PWMt0PCA	;wreg free
  8685  000F44  0012               	return		;funcret
  8686  000F46                     __end_of_ADtoPWM:
  8687                           	opt stack 0
  8688                           tblptru	equ	0xFF8
  8689                           tblptrh	equ	0xFF7
  8690                           tblptrl	equ	0xFF6
  8691                           tablat	equ	0xFF5
  8692                           prodh	equ	0xFF4
  8693                           prodl	equ	0xFF3
  8694                           intcon	equ	0xFF2
  8695                           indf0	equ	0xFEF
  8696                           postinc0	equ	0xFEE
  8697                           fsr0h	equ	0xFEA
  8698                           fsr0l	equ	0xFE9
  8699                           wreg	equ	0xFE8
  8700                           indf1	equ	0xFE7
  8701                           postdec1	equ	0xFE5
  8702                           plusw1	equ	0xFE3
  8703                           fsr1h	equ	0xFE2
  8704                           fsr1l	equ	0xFE1
  8705                           indf2	equ	0xFDF
  8706                           postinc2	equ	0xFDE
  8707                           postdec2	equ	0xFDD
  8708                           plusw2	equ	0xFDB
  8709                           fsr2h	equ	0xFDA
  8710                           fsr2l	equ	0xFD9
  8711                           status	equ	0xFD8
  8712                           
  8713 ;; *************** function _PWMt0PCA *****************
  8714 ;; Defined at:
  8715 ;;		line 47 in file "harwave/flex.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  up              2   30[COMRAM] unsigned int 
  8718 ;;  low             2   32[COMRAM] unsigned int 
  8719 ;;  finger          1   34[COMRAM] enum E3769
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;		None
  8722 ;; Return value:  Size  Location     Type
  8723 ;;                  1    wreg      void 
  8724 ;; Registers used:
  8725 ;;		wreg, status,2, status,0, cstack
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8731 ;;      Params:         5       0       0       0       0       0       0
  8732 ;;      Locals:         0       0       0       0       0       0       0
  8733 ;;      Temps:          0       0       0       0       0       0       0
  8734 ;;      Totals:         5       0       0       0       0       0       0
  8735 ;;Total ram usage:        5 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:    7
  8738 ;; This function calls:
  8739 ;;		_transmit_finger
  8740 ;; This function is called by:
  8741 ;;		_ADtoPWM
  8742 ;; This function uses a non-reentrant model
  8743 ;;
  8744                           
  8745                           	psect	text40
  8746  0009E4                     __ptext40:
  8747                           	opt stack 0
  8748  0009E4                     _PWMt0PCA:
  8749                           	opt stack 22
  8750                           
  8751                           ;flex.c: 48: switch (finger){
  8752                           
  8753                           ;incstack = 0
  8754  0009E4  D080               	goto	l4369
  8755  0009E6                     l4337:
  8756                           
  8757                           ;flex.c: 50: if( up > 0 )
  8758  0009E6  501F               	movf	PWMt0PCA@up,w,c
  8759  0009E8  1020               	iorwf	PWMt0PCA@up+1,w,c
  8760  0009EA  B4D8               	btfsc	status,2,c
  8761  0009EC  D009               	goto	l4341
  8762                           
  8763                           ;flex.c: 51: transmit_finger(up ,0x06 );
  8764  0009EE  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8765  0009F2  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8766  0009F6  0E06               	movlw	6
  8767  0009F8  6E1C               	movwf	transmit_finger@finger,c
  8768  0009FA  ECD1  F00A         	call	_transmit_finger	;wreg free
  8769  0009FE  0012               	return	
  8770  000A00                     l4341:
  8771                           
  8772                           ;flex.c: 52: else
  8773                           ;flex.c: 53: transmit_finger( up+low , 0x06 );
  8774  000A00  5021               	movf	PWMt0PCA@low,w,c
  8775  000A02  241F               	addwf	PWMt0PCA@up,w,c
  8776  000A04  6E1A               	movwf	transmit_finger@HL_Value,c
  8777  000A06  5022               	movf	PWMt0PCA@low+1,w,c
  8778  000A08  2020               	addwfc	PWMt0PCA@up+1,w,c
  8779  000A0A  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8780  000A0C  0E06               	movlw	6
  8781  000A0E  6E1C               	movwf	transmit_finger@finger,c
  8782  000A10  ECD1  F00A         	call	_transmit_finger	;wreg free
  8783                           
  8784                           ;flex.c: 54: break;
  8785  000A14  0012               	return	
  8786  000A16                     l4343:
  8787                           
  8788                           ;flex.c: 56: if( up <= 1651 )
  8789  000A16  0E74               	movlw	116
  8790  000A18  5C1F               	subwf	PWMt0PCA@up,w,c
  8791  000A1A  0E06               	movlw	6
  8792  000A1C  5820               	subwfb	PWMt0PCA@up+1,w,c
  8793  000A1E  B0D8               	btfsc	status,0,c
  8794  000A20  D009               	goto	l4347
  8795                           
  8796                           ;flex.c: 57: transmit_finger(up ,0x0A );
  8797  000A22  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8798  000A26  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8799  000A2A  0E0A               	movlw	10
  8800  000A2C  6E1C               	movwf	transmit_finger@finger,c
  8801  000A2E  ECD1  F00A         	call	_transmit_finger	;wreg free
  8802  000A32  0012               	return	
  8803  000A34                     l4347:
  8804                           
  8805                           ;flex.c: 58: else
  8806                           ;flex.c: 59: transmit_finger( up+low , 0x0A );
  8807  000A34  5021               	movf	PWMt0PCA@low,w,c
  8808  000A36  241F               	addwf	PWMt0PCA@up,w,c
  8809  000A38  6E1A               	movwf	transmit_finger@HL_Value,c
  8810  000A3A  5022               	movf	PWMt0PCA@low+1,w,c
  8811  000A3C  2020               	addwfc	PWMt0PCA@up+1,w,c
  8812  000A3E  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8813  000A40  0E0A               	movlw	10
  8814  000A42  6E1C               	movwf	transmit_finger@finger,c
  8815  000A44  ECD1  F00A         	call	_transmit_finger	;wreg free
  8816                           
  8817                           ;flex.c: 60: break;
  8818  000A48  0012               	return	
  8819  000A4A                     l4349:
  8820                           
  8821                           ;flex.c: 62: if( up <= 2000 )
  8822  000A4A  0ED1               	movlw	209
  8823  000A4C  5C1F               	subwf	PWMt0PCA@up,w,c
  8824  000A4E  0E07               	movlw	7
  8825  000A50  5820               	subwfb	PWMt0PCA@up+1,w,c
  8826  000A52  B0D8               	btfsc	status,0,c
  8827  000A54  D009               	goto	l4353
  8828                           
  8829                           ;flex.c: 63: transmit_finger(up ,0x0E );
  8830  000A56  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8831  000A5A  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8832  000A5E  0E0E               	movlw	14
  8833  000A60  6E1C               	movwf	transmit_finger@finger,c
  8834  000A62  ECD1  F00A         	call	_transmit_finger	;wreg free
  8835  000A66  0012               	return	
  8836  000A68                     l4353:
  8837                           
  8838                           ;flex.c: 64: else
  8839                           ;flex.c: 65: transmit_finger( up+low , 0x0E );
  8840  000A68  5021               	movf	PWMt0PCA@low,w,c
  8841  000A6A  241F               	addwf	PWMt0PCA@up,w,c
  8842  000A6C  6E1A               	movwf	transmit_finger@HL_Value,c
  8843  000A6E  5022               	movf	PWMt0PCA@low+1,w,c
  8844  000A70  2020               	addwfc	PWMt0PCA@up+1,w,c
  8845  000A72  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8846  000A74  0E0E               	movlw	14
  8847  000A76  6E1C               	movwf	transmit_finger@finger,c
  8848  000A78  ECD1  F00A         	call	_transmit_finger	;wreg free
  8849                           
  8850                           ;flex.c: 66: break;
  8851  000A7C  0012               	return	
  8852  000A7E                     l4355:
  8853                           
  8854                           ;flex.c: 68: if( up <= 1722 )
  8855  000A7E  0EBB               	movlw	187
  8856  000A80  5C1F               	subwf	PWMt0PCA@up,w,c
  8857  000A82  0E06               	movlw	6
  8858  000A84  5820               	subwfb	PWMt0PCA@up+1,w,c
  8859  000A86  B0D8               	btfsc	status,0,c
  8860  000A88  D009               	goto	l4359
  8861                           
  8862                           ;flex.c: 69: transmit_finger(up ,0x12 );
  8863  000A8A  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8864  000A8E  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8865  000A92  0E12               	movlw	18
  8866  000A94  6E1C               	movwf	transmit_finger@finger,c
  8867  000A96  ECD1  F00A         	call	_transmit_finger	;wreg free
  8868  000A9A  0012               	return	
  8869  000A9C                     l4359:
  8870                           
  8871                           ;flex.c: 70: else
  8872                           ;flex.c: 71: transmit_finger( up+low , 0x12 );
  8873  000A9C  5021               	movf	PWMt0PCA@low,w,c
  8874  000A9E  241F               	addwf	PWMt0PCA@up,w,c
  8875  000AA0  6E1A               	movwf	transmit_finger@HL_Value,c
  8876  000AA2  5022               	movf	PWMt0PCA@low+1,w,c
  8877  000AA4  2020               	addwfc	PWMt0PCA@up+1,w,c
  8878  000AA6  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8879  000AA8  0E12               	movlw	18
  8880  000AAA  6E1C               	movwf	transmit_finger@finger,c
  8881  000AAC  ECD1  F00A         	call	_transmit_finger	;wreg free
  8882                           
  8883                           ;flex.c: 72: break;
  8884  000AB0  0012               	return	
  8885  000AB2                     l4361:
  8886                           
  8887                           ;flex.c: 74: if( up <= 1580 )
  8888  000AB2  0E2D               	movlw	45
  8889  000AB4  5C1F               	subwf	PWMt0PCA@up,w,c
  8890  000AB6  0E06               	movlw	6
  8891  000AB8  5820               	subwfb	PWMt0PCA@up+1,w,c
  8892  000ABA  B0D8               	btfsc	status,0,c
  8893  000ABC  D009               	goto	l4365
  8894                           
  8895                           ;flex.c: 75: transmit_finger(up ,0x16 );
  8896  000ABE  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8897  000AC2  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8898  000AC6  0E16               	movlw	22
  8899  000AC8  6E1C               	movwf	transmit_finger@finger,c
  8900  000ACA  ECD1  F00A         	call	_transmit_finger	;wreg free
  8901  000ACE  0012               	return	
  8902  000AD0                     l4365:
  8903                           
  8904                           ;flex.c: 76: else
  8905                           ;flex.c: 77: transmit_finger( up+low , 0x16 );
  8906  000AD0  5021               	movf	PWMt0PCA@low,w,c
  8907  000AD2  241F               	addwf	PWMt0PCA@up,w,c
  8908  000AD4  6E1A               	movwf	transmit_finger@HL_Value,c
  8909  000AD6  5022               	movf	PWMt0PCA@low+1,w,c
  8910  000AD8  2020               	addwfc	PWMt0PCA@up+1,w,c
  8911  000ADA  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8912  000ADC  0E16               	movlw	22
  8913  000ADE  6E1C               	movwf	transmit_finger@finger,c
  8914  000AE0  ECD1  F00A         	call	_transmit_finger	;wreg free
  8915                           
  8916                           ;flex.c: 79: }
  8917                           
  8918                           ;flex.c: 78: break;
  8919  000AE4  0012               	return	
  8920  000AE6                     l4369:
  8921  000AE6  5023               	movf	PWMt0PCA@finger,w,c
  8922                           
  8923                           ; Switch size 1, requested type "space"
  8924                           ; Number of cases is 5, Range of values is 0 to 4
  8925                           ; switch strategies available:
  8926                           ; Name         Instructions Cycles
  8927                           ; simple_byte           16     9 (average)
  8928                           ;	Chosen strategy is simple_byte
  8929  000AE8  0A00               	xorlw	0	; case 0
  8930  000AEA  B4D8               	btfsc	status,2,c
  8931  000AEC  D77C               	goto	l4337
  8932  000AEE  0A01               	xorlw	1	; case 1
  8933  000AF0  B4D8               	btfsc	status,2,c
  8934  000AF2  D791               	goto	l4343
  8935  000AF4  0A03               	xorlw	3	; case 2
  8936  000AF6  B4D8               	btfsc	status,2,c
  8937  000AF8  D7A8               	goto	l4349
  8938  000AFA  0A01               	xorlw	1	; case 3
  8939  000AFC  B4D8               	btfsc	status,2,c
  8940  000AFE  D7BF               	goto	l4355
  8941  000B00  0A07               	xorlw	7	; case 4
  8942  000B02  A4D8               	btfss	status,2,c
  8943  000B04  0012               	return	
  8944  000B06  D7D5               	goto	l4361
  8945  000B08                     __end_of_PWMt0PCA:
  8946                           	opt stack 0
  8947                           tblptru	equ	0xFF8
  8948                           tblptrh	equ	0xFF7
  8949                           tblptrl	equ	0xFF6
  8950                           tablat	equ	0xFF5
  8951                           prodh	equ	0xFF4
  8952                           prodl	equ	0xFF3
  8953                           intcon	equ	0xFF2
  8954                           indf0	equ	0xFEF
  8955                           postinc0	equ	0xFEE
  8956                           fsr0h	equ	0xFEA
  8957                           fsr0l	equ	0xFE9
  8958                           wreg	equ	0xFE8
  8959                           indf1	equ	0xFE7
  8960                           postdec1	equ	0xFE5
  8961                           plusw1	equ	0xFE3
  8962                           fsr1h	equ	0xFE2
  8963                           fsr1l	equ	0xFE1
  8964                           indf2	equ	0xFDF
  8965                           postinc2	equ	0xFDE
  8966                           postdec2	equ	0xFDD
  8967                           plusw2	equ	0xFDB
  8968                           fsr2h	equ	0xFDA
  8969                           fsr2l	equ	0xFD9
  8970                           status	equ	0xFD8
  8971                           
  8972 ;; *************** function _transmit_finger *****************
  8973 ;; Defined at:
  8974 ;;		line 7 in file "harwave/flex.c"
  8975 ;; Parameters:    Size  Location     Type
  8976 ;;  HL_Value        2   25[COMRAM] unsigned int 
  8977 ;;  finger          1   27[COMRAM] unsigned char 
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;  Lbyte           1   29[COMRAM] unsigned char 
  8980 ;;  Hbyte           1   28[COMRAM] unsigned char 
  8981 ;; Return value:  Size  Location     Type
  8982 ;;                  1    wreg      void 
  8983 ;; Registers used:
  8984 ;;		wreg, status,2, status,0, cstack
  8985 ;; Tracked objects:
  8986 ;;		On entry : 0/0
  8987 ;;		On exit  : 0/0
  8988 ;;		Unchanged: 0/0
  8989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8990 ;;      Params:         3       0       0       0       0       0       0
  8991 ;;      Locals:         2       0       0       0       0       0       0
  8992 ;;      Temps:          0       0       0       0       0       0       0
  8993 ;;      Totals:         5       0       0       0       0       0       0
  8994 ;;Total ram usage:        5 bytes
  8995 ;; Hardware stack levels used:    1
  8996 ;; Hardware stack levels required when called:    6
  8997 ;; This function calls:
  8998 ;;		_PCA9685_writeOneByte
  8999 ;; This function is called by:
  9000 ;;		_PWMt0PCA
  9001 ;; This function uses a non-reentrant model
  9002 ;;
  9003                           
  9004                           	psect	text41
  9005  0015A2                     __ptext41:
  9006                           	opt stack 0
  9007  0015A2                     _transmit_finger:
  9008                           	opt stack 22
  9009                           
  9010                           ;flex.c: 8: u8 Hbyte , Lbyte ;
  9011                           ;flex.c: 9: Lbyte = HL_Value ;
  9012                           
  9013                           ;incstack = 0
  9014  0015A2  C01A  F01E         	movff	transmit_finger@HL_Value,transmit_finger@Lbyte
  9015                           
  9016                           ;flex.c: 10: Hbyte = HL_Value >> 8 ;
  9017  0015A6  501B               	movf	transmit_finger@HL_Value+1,w,c
  9018  0015A8  6E1D               	movwf	transmit_finger@Hbyte,c
  9019                           
  9020                           ;flex.c: 11: PCA9685_writeOneByte(finger,0x00);
  9021  0015AA  0E00               	movlw	0
  9022  0015AC  6E18               	movwf	PCA9685_writeOneByte@data,c
  9023  0015AE  501C               	movf	transmit_finger@finger,w,c
  9024  0015B0  ECEC  F00A         	call	_PCA9685_writeOneByte
  9025                           
  9026                           ;flex.c: 12: PCA9685_writeOneByte(finger+1,0x00);
  9027  0015B4  0E00               	movlw	0
  9028  0015B6  6E18               	movwf	PCA9685_writeOneByte@data,c
  9029  0015B8  281C               	incf	transmit_finger@finger,w,c
  9030  0015BA  ECEC  F00A         	call	_PCA9685_writeOneByte
  9031                           
  9032                           ;flex.c: 13: PCA9685_writeOneByte(finger+2,Lbyte);
  9033  0015BE  C01E  F018         	movff	transmit_finger@Lbyte,PCA9685_writeOneByte@data
  9034  0015C2  501C               	movf	transmit_finger@finger,w,c
  9035  0015C4  0F02               	addlw	2
  9036  0015C6  ECEC  F00A         	call	_PCA9685_writeOneByte
  9037                           
  9038                           ;flex.c: 14: PCA9685_writeOneByte(finger+3,Hbyte);
  9039  0015CA  C01D  F018         	movff	transmit_finger@Hbyte,PCA9685_writeOneByte@data
  9040  0015CE  501C               	movf	transmit_finger@finger,w,c
  9041  0015D0  0F03               	addlw	3
  9042  0015D2  ECEC  F00A         	call	_PCA9685_writeOneByte
  9043  0015D6  0012               	return		;funcret
  9044  0015D8                     __end_of_transmit_finger:
  9045                           	opt stack 0
  9046                           tblptru	equ	0xFF8
  9047                           tblptrh	equ	0xFF7
  9048                           tblptrl	equ	0xFF6
  9049                           tablat	equ	0xFF5
  9050                           prodh	equ	0xFF4
  9051                           prodl	equ	0xFF3
  9052                           intcon	equ	0xFF2
  9053                           indf0	equ	0xFEF
  9054                           postinc0	equ	0xFEE
  9055                           fsr0h	equ	0xFEA
  9056                           fsr0l	equ	0xFE9
  9057                           wreg	equ	0xFE8
  9058                           indf1	equ	0xFE7
  9059                           postdec1	equ	0xFE5
  9060                           plusw1	equ	0xFE3
  9061                           fsr1h	equ	0xFE2
  9062                           fsr1l	equ	0xFE1
  9063                           indf2	equ	0xFDF
  9064                           postinc2	equ	0xFDE
  9065                           postdec2	equ	0xFDD
  9066                           plusw2	equ	0xFDB
  9067                           fsr2h	equ	0xFDA
  9068                           fsr2l	equ	0xFD9
  9069                           status	equ	0xFD8
  9070                           
  9071 ;; *************** function _PCA9685_writeOneByte *****************
  9072 ;; Defined at:
  9073 ;;		line 6 in file "harwave/PCA9685.c"
  9074 ;; Parameters:    Size  Location     Type
  9075 ;;  addr            1    wreg     unsigned char 
  9076 ;;  data            1   23[COMRAM] unsigned char 
  9077 ;; Auto vars:     Size  Location     Type
  9078 ;;  addr            1   24[COMRAM] unsigned char 
  9079 ;; Return value:  Size  Location     Type
  9080 ;;                  1    wreg      void 
  9081 ;; Registers used:
  9082 ;;		wreg, status,2, status,0, cstack
  9083 ;; Tracked objects:
  9084 ;;		On entry : 0/0
  9085 ;;		On exit  : 0/0
  9086 ;;		Unchanged: 0/0
  9087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9088 ;;      Params:         1       0       0       0       0       0       0
  9089 ;;      Locals:         1       0       0       0       0       0       0
  9090 ;;      Temps:          0       0       0       0       0       0       0
  9091 ;;      Totals:         2       0       0       0       0       0       0
  9092 ;;Total ram usage:        2 bytes
  9093 ;; Hardware stack levels used:    1
  9094 ;; Hardware stack levels required when called:    5
  9095 ;; This function calls:
  9096 ;;		_IIC_Send_Byte
  9097 ;;		_IIC_Start
  9098 ;;		_IIC_Stop
  9099 ;;		_IIC_Wait_Ack
  9100 ;;		_delay_ms
  9101 ;; This function is called by:
  9102 ;;		_transmit_finger
  9103 ;;		_PCA9685_init
  9104 ;;		_PCA9685_Write
  9105 ;; This function uses a non-reentrant model
  9106 ;;
  9107                           
  9108                           	psect	text42
  9109  0015D8                     __ptext42:
  9110                           	opt stack 0
  9111  0015D8                     _PCA9685_writeOneByte:
  9112                           	opt stack 24
  9113                           
  9114                           ;incstack = 0
  9115                           ;PCA9685_writeOneByte@addr stored from wreg
  9116  0015D8  6E19               	movwf	PCA9685_writeOneByte@addr,c
  9117                           
  9118                           ;PCA9685.c: 8: IIC_Start();
  9119  0015DA  EC03  F00C         	call	_IIC_Start	;wreg free
  9120                           
  9121                           ;PCA9685.c: 9: IIC_Send_Byte(0x80);
  9122  0015DE  0E80               	movlw	128
  9123  0015E0  ECA5  F009         	call	_IIC_Send_Byte
  9124                           
  9125                           ;PCA9685.c: 10: IIC_Wait_Ack();
  9126  0015E4  EC7E  F00A         	call	_IIC_Wait_Ack	;wreg free
  9127                           
  9128                           ;PCA9685.c: 11: IIC_Send_Byte(addr&0xff);
  9129  0015E8  5019               	movf	PCA9685_writeOneByte@addr,w,c
  9130  0015EA  ECA5  F009         	call	_IIC_Send_Byte
  9131                           
  9132                           ;PCA9685.c: 12: IIC_Wait_Ack();
  9133  0015EE  EC7E  F00A         	call	_IIC_Wait_Ack	;wreg free
  9134                           
  9135                           ;PCA9685.c: 13: IIC_Send_Byte(data);
  9136  0015F2  5018               	movf	PCA9685_writeOneByte@data,w,c
  9137  0015F4  ECA5  F009         	call	_IIC_Send_Byte
  9138                           
  9139                           ;PCA9685.c: 14: IIC_Wait_Ack();
  9140  0015F8  EC7E  F00A         	call	_IIC_Wait_Ack	;wreg free
  9141                           
  9142                           ;PCA9685.c: 15: IIC_Stop();
  9143  0015FC  ECF1  F00B         	call	_IIC_Stop	;wreg free
  9144                           
  9145                           ;PCA9685.c: 16: delay_ms(10);
  9146  001600  0E00               	movlw	0
  9147  001602  6E15               	movwf	delay_ms@ms+1,c
  9148  001604  0E0A               	movlw	10
  9149  001606  6E14               	movwf	delay_ms@ms,c
  9150  001608  EC41  F00C         	call	_delay_ms	;wreg free
  9151  00160C  0012               	return		;funcret
  9152  00160E                     __end_of_PCA9685_writeOneByte:
  9153                           	opt stack 0
  9154                           tblptru	equ	0xFF8
  9155                           tblptrh	equ	0xFF7
  9156                           tblptrl	equ	0xFF6
  9157                           tablat	equ	0xFF5
  9158                           prodh	equ	0xFF4
  9159                           prodl	equ	0xFF3
  9160                           intcon	equ	0xFF2
  9161                           indf0	equ	0xFEF
  9162                           postinc0	equ	0xFEE
  9163                           fsr0h	equ	0xFEA
  9164                           fsr0l	equ	0xFE9
  9165                           wreg	equ	0xFE8
  9166                           indf1	equ	0xFE7
  9167                           postdec1	equ	0xFE5
  9168                           plusw1	equ	0xFE3
  9169                           fsr1h	equ	0xFE2
  9170                           fsr1l	equ	0xFE1
  9171                           indf2	equ	0xFDF
  9172                           postinc2	equ	0xFDE
  9173                           postdec2	equ	0xFDD
  9174                           plusw2	equ	0xFDB
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function _delay_ms *****************
  9180 ;; Defined at:
  9181 ;;		line 3 in file "harwave/mydelay.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;  ms              2   19[COMRAM] int 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;		None
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  1    wreg      void 
  9188 ;; Registers used:
  9189 ;;		wreg, status,2, status,0, cstack
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9195 ;;      Params:         2       0       0       0       0       0       0
  9196 ;;      Locals:         0       0       0       0       0       0       0
  9197 ;;      Temps:          0       0       0       0       0       0       0
  9198 ;;      Totals:         2       0       0       0       0       0       0
  9199 ;;Total ram usage:        2 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; Hardware stack levels required when called:    2
  9202 ;; This function calls:
  9203 ;;		_Delay10KTCYx
  9204 ;; This function is called by:
  9205 ;;		_LCD_Initialize
  9206 ;;		_LCD_WriteCmd
  9207 ;;		_LCD_GotoXY
  9208 ;;		_LCD_WriteData
  9209 ;;		_PCA9685_writeOneByte
  9210 ;;		_ESP8266_Cmd
  9211 ;;		_main
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           	psect	text43
  9216  001882                     __ptext43:
  9217                           	opt stack 0
  9218  001882                     _delay_ms:
  9219                           	opt stack 28
  9220  001882                     
  9221                           ;mydelay.c: 6: Delay10KTCYx(1);
  9222  001882  0E01               	movlw	1
  9223  001884  EC4C  F00C         	call	_Delay10KTCYx
  9224                           
  9225                           ;mydelay.c: 7: ms--;
  9226  001888  0614               	decf	delay_ms@ms,f,c
  9227  00188A  A0D8               	btfss	status,0,c
  9228  00188C  0615               	decf	delay_ms@ms+1,f,c
  9229                           
  9230                           ;mydelay.c: 8: }while(ms);
  9231  00188E  5014               	movf	delay_ms@ms,w,c
  9232  001890  1015               	iorwf	delay_ms@ms+1,w,c
  9233  001892  B4D8               	btfsc	status,2,c
  9234  001894  0012               	return	
  9235  001896  D7F5               	goto	l3745
  9236  001898                     __end_of_delay_ms:
  9237                           	opt stack 0
  9238                           tblptru	equ	0xFF8
  9239                           tblptrh	equ	0xFF7
  9240                           tblptrl	equ	0xFF6
  9241                           tablat	equ	0xFF5
  9242                           prodh	equ	0xFF4
  9243                           prodl	equ	0xFF3
  9244                           intcon	equ	0xFF2
  9245                           indf0	equ	0xFEF
  9246                           postinc0	equ	0xFEE
  9247                           fsr0h	equ	0xFEA
  9248                           fsr0l	equ	0xFE9
  9249                           wreg	equ	0xFE8
  9250                           indf1	equ	0xFE7
  9251                           postdec1	equ	0xFE5
  9252                           plusw1	equ	0xFE3
  9253                           fsr1h	equ	0xFE2
  9254                           fsr1l	equ	0xFE1
  9255                           indf2	equ	0xFDF
  9256                           postinc2	equ	0xFDE
  9257                           postdec2	equ	0xFDD
  9258                           plusw2	equ	0xFDB
  9259                           fsr2h	equ	0xFDA
  9260                           fsr2l	equ	0xFD9
  9261                           status	equ	0xFD8
  9262                           
  9263 ;; *************** function _Delay10KTCYx *****************
  9264 ;; Defined at:
  9265 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10ktcyx.c"
  9266 ;; Parameters:    Size  Location     Type
  9267 ;;  unit            1    wreg     unsigned char 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;  unit            1   18[COMRAM] unsigned char 
  9270 ;; Return value:  Size  Location     Type
  9271 ;;                  1    wreg      void 
  9272 ;; Registers used:
  9273 ;;		wreg
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9279 ;;      Params:         0       0       0       0       0       0       0
  9280 ;;      Locals:         1       0       0       0       0       0       0
  9281 ;;      Temps:          1       0       0       0       0       0       0
  9282 ;;      Totals:         2       0       0       0       0       0       0
  9283 ;;Total ram usage:        2 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    1
  9286 ;; This function calls:
  9287 ;;		Nothing
  9288 ;; This function is called by:
  9289 ;;		_delay_ms
  9290 ;; This function uses a non-reentrant model
  9291 ;;
  9292                           
  9293                           	psect	text44
  9294  001898                     __ptext44:
  9295                           	opt stack 0
  9296  001898                     _Delay10KTCYx:
  9297                           	opt stack 28
  9298                           
  9299                           ;incstack = 0
  9300                           ;Delay10KTCYx@unit stored from wreg
  9301  001898  6E13               	movwf	Delay10KTCYx@unit,c
  9302  00189A  0E0D               	movlw	13
  9303  00189C  6E12               	movwf	??_Delay10KTCYx& (0+255),c
  9304  00189E  0EFC               	movlw	252
  9305  0018A0                     u4747:
  9306  0018A0  2EE8               	decfsz	wreg,f,c
  9307  0018A2  D7FE               	bra	u4747
  9308  0018A4  2E12               	decfsz	??_Delay10KTCYx& (0+255),f,c
  9309  0018A6  D7FC               	bra	u4747
  9310  0018A8  2E13               	decfsz	Delay10KTCYx@unit,f,c
  9311  0018AA  D7F7               	goto	l3693
  9312  0018AC  0012               	return	
  9313  0018AE                     __end_of_Delay10KTCYx:
  9314                           	opt stack 0
  9315                           tblptru	equ	0xFF8
  9316                           tblptrh	equ	0xFF7
  9317                           tblptrl	equ	0xFF6
  9318                           tablat	equ	0xFF5
  9319                           prodh	equ	0xFF4
  9320                           prodl	equ	0xFF3
  9321                           intcon	equ	0xFF2
  9322                           indf0	equ	0xFEF
  9323                           postinc0	equ	0xFEE
  9324                           fsr0h	equ	0xFEA
  9325                           fsr0l	equ	0xFE9
  9326                           wreg	equ	0xFE8
  9327                           indf1	equ	0xFE7
  9328                           postdec1	equ	0xFE5
  9329                           plusw1	equ	0xFE3
  9330                           fsr1h	equ	0xFE2
  9331                           fsr1l	equ	0xFE1
  9332                           indf2	equ	0xFDF
  9333                           postinc2	equ	0xFDE
  9334                           postdec2	equ	0xFDD
  9335                           plusw2	equ	0xFDB
  9336                           fsr2h	equ	0xFDA
  9337                           fsr2l	equ	0xFD9
  9338                           status	equ	0xFD8
  9339                           
  9340 ;; *************** function _IIC_Wait_Ack *****************
  9341 ;; Defined at:
  9342 ;;		line 43 in file "harwave/softIIC.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;		None
  9345 ;; Auto vars:     Size  Location     Type
  9346 ;;  ucErrTime       1   20[COMRAM] unsigned char 
  9347 ;; Return value:  Size  Location     Type
  9348 ;;                  1    wreg      unsigned char 
  9349 ;; Registers used:
  9350 ;;		wreg, status,2, status,0, cstack
  9351 ;; Tracked objects:
  9352 ;;		On entry : 0/0
  9353 ;;		On exit  : 0/0
  9354 ;;		Unchanged: 0/0
  9355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9356 ;;      Params:         0       0       0       0       0       0       0
  9357 ;;      Locals:         1       0       0       0       0       0       0
  9358 ;;      Temps:          0       0       0       0       0       0       0
  9359 ;;      Totals:         1       0       0       0       0       0       0
  9360 ;;Total ram usage:        1 bytes
  9361 ;; Hardware stack levels used:    1
  9362 ;; Hardware stack levels required when called:    4
  9363 ;; This function calls:
  9364 ;;		_IIC_Stop
  9365 ;;		_delay_us
  9366 ;; This function is called by:
  9367 ;;		_PCA9685_writeOneByte
  9368 ;;		_PCA9685_readOneByte
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           	psect	text45
  9373  0014FC                     __ptext45:
  9374                           	opt stack 0
  9375  0014FC                     _IIC_Wait_Ack:
  9376                           	opt stack 24
  9377                           
  9378                           ;softIIC.c: 45: u8 ucErrTime=0;
  9379                           
  9380                           ;incstack = 0
  9381  0014FC  0E00               	movlw	0
  9382  0014FE  6E15               	movwf	IIC_Wait_Ack@ucErrTime,c
  9383                           
  9384                           ;softIIC.c: 46: {TRISBbits.TRISB0=1;};
  9385  001500  8093               	bsf	3987,0,c	;volatile
  9386                           
  9387                           ;softIIC.c: 47: PORTBbits.RB0=1;
  9388  001502  8081               	bsf	3969,0,c	;volatile
  9389                           
  9390                           ;softIIC.c: 49: delay_us(1);
  9391  001504  0E00               	movlw	0
  9392  001506  6E14               	movwf	delay_us@us+1,c
  9393  001508  0E01               	movlw	1
  9394  00150A  6E13               	movwf	delay_us@us,c
  9395  00150C  EC57  F00C         	call	_delay_us	;wreg free
  9396                           
  9397                           ;softIIC.c: 50: PORTBbits.RB1=1;
  9398  001510  8281               	bsf	3969,1,c	;volatile
  9399                           
  9400                           ;softIIC.c: 52: delay_us(1);
  9401  001512  0E00               	movlw	0
  9402  001514  6E14               	movwf	delay_us@us+1,c
  9403  001516  0E01               	movlw	1
  9404  001518  6E13               	movwf	delay_us@us,c
  9405  00151A  EC57  F00C         	call	_delay_us	;wreg free
  9406                           
  9407                           ;softIIC.c: 53: while(PORTBbits.RB0)
  9408  00151E  D007               	goto	l268
  9409  001520                     l3795:
  9410                           
  9411                           ;softIIC.c: 54: {
  9412                           ;softIIC.c: 55: ucErrTime++;
  9413  001520  2A15               	incf	IIC_Wait_Ack@ucErrTime,f,c
  9414                           
  9415                           ;softIIC.c: 56: if(ucErrTime>250)
  9416  001522  0EFA               	movlw	250
  9417  001524  6415               	cpfsgt	IIC_Wait_Ack@ucErrTime,c
  9418  001526  D003               	goto	l268
  9419                           
  9420                           ;softIIC.c: 57: {
  9421                           ;softIIC.c: 58: IIC_Stop();
  9422  001528  ECF1  F00B         	call	_IIC_Stop	;wreg free
  9423                           
  9424                           ;softIIC.c: 59: return 1;
  9425                           ;	Return value of _IIC_Wait_Ack is never used
  9426  00152C  0012               	return	
  9427  00152E                     l268:
  9428  00152E  B081               	btfsc	3969,0,c	;volatile
  9429  001530  D7F7               	goto	l3795
  9430                           
  9431                           ;softIIC.c: 60: }
  9432                           ;softIIC.c: 61: }
  9433                           ;softIIC.c: 62: PORTBbits.RB1=0;
  9434  001532  9281               	bcf	3969,1,c	;volatile
  9435                           
  9436                           ;softIIC.c: 63: return 0;
  9437                           ;	Return value of _IIC_Wait_Ack is never used
  9438  001534  0012               	return		;funcret
  9439  001536                     __end_of_IIC_Wait_Ack:
  9440                           	opt stack 0
  9441                           tblptru	equ	0xFF8
  9442                           tblptrh	equ	0xFF7
  9443                           tblptrl	equ	0xFF6
  9444                           tablat	equ	0xFF5
  9445                           prodh	equ	0xFF4
  9446                           prodl	equ	0xFF3
  9447                           intcon	equ	0xFF2
  9448                           indf0	equ	0xFEF
  9449                           postinc0	equ	0xFEE
  9450                           fsr0h	equ	0xFEA
  9451                           fsr0l	equ	0xFE9
  9452                           wreg	equ	0xFE8
  9453                           indf1	equ	0xFE7
  9454                           postdec1	equ	0xFE5
  9455                           plusw1	equ	0xFE3
  9456                           fsr1h	equ	0xFE2
  9457                           fsr1l	equ	0xFE1
  9458                           indf2	equ	0xFDF
  9459                           postinc2	equ	0xFDE
  9460                           postdec2	equ	0xFDD
  9461                           plusw2	equ	0xFDB
  9462                           fsr2h	equ	0xFDA
  9463                           fsr2l	equ	0xFD9
  9464                           status	equ	0xFD8
  9465                           
  9466 ;; *************** function _IIC_Stop *****************
  9467 ;; Defined at:
  9468 ;;		line 29 in file "harwave/softIIC.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;		None
  9471 ;; Auto vars:     Size  Location     Type
  9472 ;;		None
  9473 ;; Return value:  Size  Location     Type
  9474 ;;                  1    wreg      void 
  9475 ;; Registers used:
  9476 ;;		wreg, status,2, status,0, cstack
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9482 ;;      Params:         0       0       0       0       0       0       0
  9483 ;;      Locals:         0       0       0       0       0       0       0
  9484 ;;      Temps:          0       0       0       0       0       0       0
  9485 ;;      Totals:         0       0       0       0       0       0       0
  9486 ;;Total ram usage:        0 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; Hardware stack levels required when called:    3
  9489 ;; This function calls:
  9490 ;;		_delay_us
  9491 ;; This function is called by:
  9492 ;;		_PCA9685_writeOneByte
  9493 ;;		_IIC_Wait_Ack
  9494 ;;		_PCA9685_readOneByte
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           	psect	text46
  9499  0017E2                     __ptext46:
  9500                           	opt stack 0
  9501  0017E2                     _IIC_Stop:
  9502                           	opt stack 24
  9503                           
  9504                           ;softIIC.c: 31: {TRISBbits.TRISB0=0;};
  9505                           
  9506                           ;incstack = 0
  9507  0017E2  9093               	bcf	3987,0,c	;volatile
  9508                           
  9509                           ;softIIC.c: 32: PORTBbits.RB1=0;
  9510  0017E4  9281               	bcf	3969,1,c	;volatile
  9511                           
  9512                           ;softIIC.c: 33: PORTBbits.RB0=0;
  9513  0017E6  9081               	bcf	3969,0,c	;volatile
  9514                           
  9515                           ;softIIC.c: 34: delay_us(4);
  9516  0017E8  0E00               	movlw	0
  9517  0017EA  6E14               	movwf	delay_us@us+1,c
  9518  0017EC  0E04               	movlw	4
  9519  0017EE  6E13               	movwf	delay_us@us,c
  9520  0017F0  EC57  F00C         	call	_delay_us	;wreg free
  9521                           
  9522                           ;softIIC.c: 35: PORTBbits.RB1=1;
  9523  0017F4  8281               	bsf	3969,1,c	;volatile
  9524                           
  9525                           ;softIIC.c: 36: delay_us(4);
  9526  0017F6  0E00               	movlw	0
  9527  0017F8  6E14               	movwf	delay_us@us+1,c
  9528  0017FA  0E04               	movlw	4
  9529  0017FC  6E13               	movwf	delay_us@us,c
  9530  0017FE  EC57  F00C         	call	_delay_us	;wreg free
  9531                           
  9532                           ;softIIC.c: 37: PORTBbits.RB0=1;
  9533  001802  8081               	bsf	3969,0,c	;volatile
  9534  001804  0012               	return		;funcret
  9535  001806                     __end_of_IIC_Stop:
  9536                           	opt stack 0
  9537                           tblptru	equ	0xFF8
  9538                           tblptrh	equ	0xFF7
  9539                           tblptrl	equ	0xFF6
  9540                           tablat	equ	0xFF5
  9541                           prodh	equ	0xFF4
  9542                           prodl	equ	0xFF3
  9543                           intcon	equ	0xFF2
  9544                           indf0	equ	0xFEF
  9545                           postinc0	equ	0xFEE
  9546                           fsr0h	equ	0xFEA
  9547                           fsr0l	equ	0xFE9
  9548                           wreg	equ	0xFE8
  9549                           indf1	equ	0xFE7
  9550                           postdec1	equ	0xFE5
  9551                           plusw1	equ	0xFE3
  9552                           fsr1h	equ	0xFE2
  9553                           fsr1l	equ	0xFE1
  9554                           indf2	equ	0xFDF
  9555                           postinc2	equ	0xFDE
  9556                           postdec2	equ	0xFDD
  9557                           plusw2	equ	0xFDB
  9558                           fsr2h	equ	0xFDA
  9559                           fsr2l	equ	0xFD9
  9560                           status	equ	0xFD8
  9561                           
  9562 ;; *************** function _IIC_Start *****************
  9563 ;; Defined at:
  9564 ;;		line 18 in file "harwave/softIIC.c"
  9565 ;; Parameters:    Size  Location     Type
  9566 ;;		None
  9567 ;; Auto vars:     Size  Location     Type
  9568 ;;		None
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  1    wreg      void 
  9571 ;; Registers used:
  9572 ;;		wreg, status,2, status,0, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9578 ;;      Params:         0       0       0       0       0       0       0
  9579 ;;      Locals:         0       0       0       0       0       0       0
  9580 ;;      Temps:          0       0       0       0       0       0       0
  9581 ;;      Totals:         0       0       0       0       0       0       0
  9582 ;;Total ram usage:        0 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    3
  9585 ;; This function calls:
  9586 ;;		_delay_us
  9587 ;; This function is called by:
  9588 ;;		_PCA9685_writeOneByte
  9589 ;;		_PCA9685_readOneByte
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           	psect	text47
  9594  001806                     __ptext47:
  9595                           	opt stack 0
  9596  001806                     _IIC_Start:
  9597                           	opt stack 25
  9598                           
  9599                           ;softIIC.c: 20: {TRISBbits.TRISB0=0;};
  9600                           
  9601                           ;incstack = 0
  9602  001806  9093               	bcf	3987,0,c	;volatile
  9603                           
  9604                           ;softIIC.c: 21: PORTBbits.RB0=1;
  9605  001808  8081               	bsf	3969,0,c	;volatile
  9606                           
  9607                           ;softIIC.c: 22: PORTBbits.RB1=1;
  9608  00180A  8281               	bsf	3969,1,c	;volatile
  9609                           
  9610                           ;softIIC.c: 23: delay_us(4);
  9611  00180C  0E00               	movlw	0
  9612  00180E  6E14               	movwf	delay_us@us+1,c
  9613  001810  0E04               	movlw	4
  9614  001812  6E13               	movwf	delay_us@us,c
  9615  001814  EC57  F00C         	call	_delay_us	;wreg free
  9616                           
  9617                           ;softIIC.c: 24: PORTBbits.RB0=0;
  9618  001818  9081               	bcf	3969,0,c	;volatile
  9619                           
  9620                           ;softIIC.c: 25: delay_us(4);
  9621  00181A  0E00               	movlw	0
  9622  00181C  6E14               	movwf	delay_us@us+1,c
  9623  00181E  0E04               	movlw	4
  9624  001820  6E13               	movwf	delay_us@us,c
  9625  001822  EC57  F00C         	call	_delay_us	;wreg free
  9626                           
  9627                           ;softIIC.c: 26: PORTBbits.RB1=0;
  9628  001826  9281               	bcf	3969,1,c	;volatile
  9629  001828  0012               	return		;funcret
  9630  00182A                     __end_of_IIC_Start:
  9631                           	opt stack 0
  9632                           tblptru	equ	0xFF8
  9633                           tblptrh	equ	0xFF7
  9634                           tblptrl	equ	0xFF6
  9635                           tablat	equ	0xFF5
  9636                           prodh	equ	0xFF4
  9637                           prodl	equ	0xFF3
  9638                           intcon	equ	0xFF2
  9639                           indf0	equ	0xFEF
  9640                           postinc0	equ	0xFEE
  9641                           fsr0h	equ	0xFEA
  9642                           fsr0l	equ	0xFE9
  9643                           wreg	equ	0xFE8
  9644                           indf1	equ	0xFE7
  9645                           postdec1	equ	0xFE5
  9646                           plusw1	equ	0xFE3
  9647                           fsr1h	equ	0xFE2
  9648                           fsr1l	equ	0xFE1
  9649                           indf2	equ	0xFDF
  9650                           postinc2	equ	0xFDE
  9651                           postdec2	equ	0xFDD
  9652                           plusw2	equ	0xFDB
  9653                           fsr2h	equ	0xFDA
  9654                           fsr2l	equ	0xFD9
  9655                           status	equ	0xFD8
  9656                           
  9657 ;; *************** function _IIC_Send_Byte *****************
  9658 ;; Defined at:
  9659 ;;		line 91 in file "harwave/softIIC.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;  txd             1    wreg     unsigned char 
  9662 ;; Auto vars:     Size  Location     Type
  9663 ;;  txd             1   21[COMRAM] unsigned char 
  9664 ;;  t               1   22[COMRAM] unsigned char 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  1    wreg      void 
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0, cstack
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9674 ;;      Params:         0       0       0       0       0       0       0
  9675 ;;      Locals:         2       0       0       0       0       0       0
  9676 ;;      Temps:          1       0       0       0       0       0       0
  9677 ;;      Totals:         3       0       0       0       0       0       0
  9678 ;;Total ram usage:        3 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    3
  9681 ;; This function calls:
  9682 ;;		_delay_us
  9683 ;; This function is called by:
  9684 ;;		_PCA9685_writeOneByte
  9685 ;;		_PCA9685_readOneByte
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689                           	psect	text48
  9690  00134A                     __ptext48:
  9691                           	opt stack 0
  9692  00134A                     _IIC_Send_Byte:
  9693                           	opt stack 25
  9694                           
  9695                           ;incstack = 0
  9696                           ;IIC_Send_Byte@txd stored from wreg
  9697  00134A  6E16               	movwf	IIC_Send_Byte@txd,c
  9698                           
  9699                           ;softIIC.c: 93: u8 t;
  9700                           ;softIIC.c: 94: {TRISBbits.TRISB0=0;};
  9701  00134C  9093               	bcf	3987,0,c	;volatile
  9702                           
  9703                           ;softIIC.c: 95: PORTBbits.RB1=0;
  9704  00134E  9281               	bcf	3969,1,c	;volatile
  9705                           
  9706                           ;softIIC.c: 96: for(t=0;t<8;t++)
  9707  001350  0E00               	movlw	0
  9708  001352  6E17               	movwf	IIC_Send_Byte@t,c
  9709  001354                     l3763:
  9710  001354  0E07               	movlw	7
  9711  001356  6417               	cpfsgt	IIC_Send_Byte@t,c
  9712  001358  D001               	goto	l3767
  9713  00135A  0012               	return	
  9714  00135C                     l3767:
  9715                           
  9716                           ;softIIC.c: 97: {
  9717                           ;softIIC.c: 98: PORTBbits.RB0=(txd&0x80)>>7;
  9718  00135C  6A15               	clrf	??_IIC_Send_Byte& (0+255),c
  9719  00135E  AE16               	btfss	IIC_Send_Byte@txd,7,c
  9720  001360  D001               	bra	u3285
  9721  001362  2A15               	incf	??_IIC_Send_Byte& (0+255),f,c
  9722  001364                     u3285:
  9723  001364  0E01               	movlw	1
  9724  001366  1615               	andwf	??_IIC_Send_Byte,f,c
  9725  001368  5081               	movf	3969,w,c	;volatile
  9726  00136A  1815               	xorwf	??_IIC_Send_Byte,w,c
  9727  00136C  0BFE               	andlw	-2
  9728  00136E  1815               	xorwf	??_IIC_Send_Byte,w,c
  9729  001370  6E81               	movwf	3969,c	;volatile
  9730                           
  9731                           ;softIIC.c: 99: txd<<=1;
  9732  001372  90D8               	bcf	status,0,c
  9733  001374  3616               	rlcf	IIC_Send_Byte@txd,f,c
  9734                           
  9735                           ;softIIC.c: 100: delay_us(2);
  9736  001376  0E00               	movlw	0
  9737  001378  6E14               	movwf	delay_us@us+1,c
  9738  00137A  0E02               	movlw	2
  9739  00137C  6E13               	movwf	delay_us@us,c
  9740  00137E  EC57  F00C         	call	_delay_us	;wreg free
  9741                           
  9742                           ;softIIC.c: 101: PORTBbits.RB1=1;
  9743  001382  8281               	bsf	3969,1,c	;volatile
  9744                           
  9745                           ;softIIC.c: 102: delay_us(2);
  9746  001384  0E00               	movlw	0
  9747  001386  6E14               	movwf	delay_us@us+1,c
  9748  001388  0E02               	movlw	2
  9749  00138A  6E13               	movwf	delay_us@us,c
  9750  00138C  EC57  F00C         	call	_delay_us	;wreg free
  9751                           
  9752                           ;softIIC.c: 103: PORTBbits.RB1=0;
  9753  001390  9281               	bcf	3969,1,c	;volatile
  9754                           
  9755                           ;softIIC.c: 104: delay_us(2);
  9756  001392  0E00               	movlw	0
  9757  001394  6E14               	movwf	delay_us@us+1,c
  9758  001396  0E02               	movlw	2
  9759  001398  6E13               	movwf	delay_us@us,c
  9760  00139A  EC57  F00C         	call	_delay_us	;wreg free
  9761  00139E  2A17               	incf	IIC_Send_Byte@t,f,c
  9762  0013A0  D7D9               	goto	l3763
  9763  0013A2                     __end_of_IIC_Send_Byte:
  9764                           	opt stack 0
  9765                           tblptru	equ	0xFF8
  9766                           tblptrh	equ	0xFF7
  9767                           tblptrl	equ	0xFF6
  9768                           tablat	equ	0xFF5
  9769                           prodh	equ	0xFF4
  9770                           prodl	equ	0xFF3
  9771                           intcon	equ	0xFF2
  9772                           indf0	equ	0xFEF
  9773                           postinc0	equ	0xFEE
  9774                           fsr0h	equ	0xFEA
  9775                           fsr0l	equ	0xFE9
  9776                           wreg	equ	0xFE8
  9777                           indf1	equ	0xFE7
  9778                           postdec1	equ	0xFE5
  9779                           plusw1	equ	0xFE3
  9780                           fsr1h	equ	0xFE2
  9781                           fsr1l	equ	0xFE1
  9782                           indf2	equ	0xFDF
  9783                           postinc2	equ	0xFDE
  9784                           postdec2	equ	0xFDD
  9785                           plusw2	equ	0xFDB
  9786                           fsr2h	equ	0xFDA
  9787                           fsr2l	equ	0xFD9
  9788                           status	equ	0xFD8
  9789                           
  9790 ;; *************** function _delay_us *****************
  9791 ;; Defined at:
  9792 ;;		line 11 in file "harwave/mydelay.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;  us              2   18[COMRAM] int 
  9795 ;; Auto vars:     Size  Location     Type
  9796 ;;		None
  9797 ;; Return value:  Size  Location     Type
  9798 ;;                  1    wreg      void 
  9799 ;; Registers used:
  9800 ;;		wreg, status,2, status,0, cstack
  9801 ;; Tracked objects:
  9802 ;;		On entry : 0/0
  9803 ;;		On exit  : 0/0
  9804 ;;		Unchanged: 0/0
  9805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9806 ;;      Params:         2       0       0       0       0       0       0
  9807 ;;      Locals:         0       0       0       0       0       0       0
  9808 ;;      Temps:          0       0       0       0       0       0       0
  9809 ;;      Totals:         2       0       0       0       0       0       0
  9810 ;;Total ram usage:        2 bytes
  9811 ;; Hardware stack levels used:    1
  9812 ;; Hardware stack levels required when called:    2
  9813 ;; This function calls:
  9814 ;;		_Delay10TCYx
  9815 ;; This function is called by:
  9816 ;;		_IIC_Init
  9817 ;;		_IIC_Start
  9818 ;;		_IIC_Stop
  9819 ;;		_IIC_Wait_Ack
  9820 ;;		_IIC_Send_Byte
  9821 ;;		_IIC_Ack
  9822 ;;		_IIC_NAck
  9823 ;;		_IIC_Read_Byte
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           	psect	text49
  9828  0018AE                     __ptext49:
  9829                           	opt stack 0
  9830  0018AE                     _delay_us:
  9831                           	opt stack 25
  9832  0018AE                     
  9833                           ;mydelay.c: 14: Delay10TCYx(1);
  9834  0018AE  0E01               	movlw	1
  9835  0018B0  EC6A  F00C         	call	_Delay10TCYx
  9836                           
  9837                           ;mydelay.c: 15: us--;
  9838  0018B4  0613               	decf	delay_us@us,f,c
  9839  0018B6  A0D8               	btfss	status,0,c
  9840  0018B8  0614               	decf	delay_us@us+1,f,c
  9841                           
  9842                           ;mydelay.c: 16: }while(us);
  9843  0018BA  5013               	movf	delay_us@us,w,c
  9844  0018BC  1014               	iorwf	delay_us@us+1,w,c
  9845  0018BE  B4D8               	btfsc	status,2,c
  9846  0018C0  0012               	return	
  9847  0018C2  D7F5               	goto	l3687
  9848  0018C4                     __end_of_delay_us:
  9849                           	opt stack 0
  9850                           tblptru	equ	0xFF8
  9851                           tblptrh	equ	0xFF7
  9852                           tblptrl	equ	0xFF6
  9853                           tablat	equ	0xFF5
  9854                           prodh	equ	0xFF4
  9855                           prodl	equ	0xFF3
  9856                           intcon	equ	0xFF2
  9857                           indf0	equ	0xFEF
  9858                           postinc0	equ	0xFEE
  9859                           fsr0h	equ	0xFEA
  9860                           fsr0l	equ	0xFE9
  9861                           wreg	equ	0xFE8
  9862                           indf1	equ	0xFE7
  9863                           postdec1	equ	0xFE5
  9864                           plusw1	equ	0xFE3
  9865                           fsr1h	equ	0xFE2
  9866                           fsr1l	equ	0xFE1
  9867                           indf2	equ	0xFDF
  9868                           postinc2	equ	0xFDE
  9869                           postdec2	equ	0xFDD
  9870                           plusw2	equ	0xFDB
  9871                           fsr2h	equ	0xFDA
  9872                           fsr2l	equ	0xFD9
  9873                           status	equ	0xFD8
  9874                           
  9875 ;; *************** function _Delay10TCYx *****************
  9876 ;; Defined at:
  9877 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10tcyx.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;  unit            1    wreg     unsigned char 
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;  unit            1   17[COMRAM] unsigned char 
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  1    wreg      void 
  9884 ;; Registers used:
  9885 ;;		wreg
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9891 ;;      Params:         0       0       0       0       0       0       0
  9892 ;;      Locals:         1       0       0       0       0       0       0
  9893 ;;      Temps:          0       0       0       0       0       0       0
  9894 ;;      Totals:         1       0       0       0       0       0       0
  9895 ;;Total ram usage:        1 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    1
  9898 ;; This function calls:
  9899 ;;		Nothing
  9900 ;; This function is called by:
  9901 ;;		_delay_us
  9902 ;;		_delay_ms1
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           	psect	text50
  9907  0018D4                     __ptext50:
  9908                           	opt stack 0
  9909  0018D4                     _Delay10TCYx:
  9910                           	opt stack 25
  9911                           
  9912                           ;incstack = 0
  9913                           ;Delay10TCYx@unit stored from wreg
  9914  0018D4  6E12               	movwf	Delay10TCYx@unit,c
  9915  0018D6  0E03               	movlw	3
  9916  0018D8                     u4757:
  9917  0018D8  2EE8               	decfsz	wreg,f,c
  9918  0018DA  D7FE               	bra	u4757
  9919  0018DC  F000               	nop	
  9920  0018DE  2E12               	decfsz	Delay10TCYx@unit,f,c
  9921  0018E0  D7FA               	goto	l3683
  9922  0018E2  0012               	return	
  9923  0018E4                     __end_of_Delay10TCYx:
  9924                           	opt stack 0
  9925                           tblptru	equ	0xFF8
  9926                           tblptrh	equ	0xFF7
  9927                           tblptrl	equ	0xFF6
  9928                           tablat	equ	0xFF5
  9929                           prodh	equ	0xFF4
  9930                           prodl	equ	0xFF3
  9931                           intcon	equ	0xFF2
  9932                           indf0	equ	0xFEF
  9933                           postinc0	equ	0xFEE
  9934                           fsr0h	equ	0xFEA
  9935                           fsr0l	equ	0xFE9
  9936                           wreg	equ	0xFE8
  9937                           indf1	equ	0xFE7
  9938                           postdec1	equ	0xFE5
  9939                           plusw1	equ	0xFE3
  9940                           fsr1h	equ	0xFE2
  9941                           fsr1l	equ	0xFE1
  9942                           indf2	equ	0xFDF
  9943                           postinc2	equ	0xFDE
  9944                           postdec2	equ	0xFDD
  9945                           plusw2	equ	0xFDB
  9946                           fsr2h	equ	0xFDA
  9947                           fsr2l	equ	0xFD9
  9948                           status	equ	0xFD8
  9949                           
  9950 ;; *************** function _time_adc *****************
  9951 ;; Defined at:
  9952 ;;		line 129 in file "main.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;		None
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;  ch              1   16[COMRAM] unsigned char 
  9957 ;; Return value:  Size  Location     Type
  9958 ;;                  1    wreg      void 
  9959 ;; Registers used:
  9960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9961 ;; Tracked objects:
  9962 ;;		On entry : 0/0
  9963 ;;		On exit  : 0/0
  9964 ;;		Unchanged: 0/0
  9965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9966 ;;      Params:         0       0       0       0       0       0       0
  9967 ;;      Locals:         1       0       0       0       0       0       0
  9968 ;;      Temps:         16       0       0       0       0       0       0
  9969 ;;      Totals:        17       0       0       0       0       0       0
  9970 ;;Total ram usage:       17 bytes
  9971 ;; Hardware stack levels used:    1
  9972 ;; This function calls:
  9973 ;;		Nothing
  9974 ;; This function is called by:
  9975 ;;		Interrupt level 2
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           	psect	intcode
  9980  000008                     __pintcode:
  9981                           	opt stack 0
  9982  000008                     _time_adc:
  9983                           	opt stack 22
  9984                           
  9985                           ;incstack = 0
  9986  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9987  00000A  ED02  F006         	call	int_func,f	;refresh shadow registers
  9988                           tblptru	equ	0xFF8
  9989                           tblptrh	equ	0xFF7
  9990                           tblptrl	equ	0xFF6
  9991                           tablat	equ	0xFF5
  9992                           prodh	equ	0xFF4
  9993                           prodl	equ	0xFF3
  9994                           intcon	equ	0xFF2
  9995                           indf0	equ	0xFEF
  9996                           postinc0	equ	0xFEE
  9997                           fsr0h	equ	0xFEA
  9998                           fsr0l	equ	0xFE9
  9999                           wreg	equ	0xFE8
 10000                           indf1	equ	0xFE7
 10001                           postdec1	equ	0xFE5
 10002                           plusw1	equ	0xFE3
 10003                           fsr1h	equ	0xFE2
 10004                           fsr1l	equ	0xFE1
 10005                           indf2	equ	0xFDF
 10006                           postinc2	equ	0xFDE
 10007                           postdec2	equ	0xFDD
 10008                           plusw2	equ	0xFDB
 10009                           fsr2h	equ	0xFDA
 10010                           fsr2l	equ	0xFD9
 10011                           status	equ	0xFD8
 10012                           
 10013                           	psect	intcode_body
 10014  000C04                     __pintcode_body:
 10015                           	opt stack 22
 10016  000C04                     int_func:
 10017                           	opt stack 22
 10018  000C04  0006               	pop		; remove dummy address from shadow register refresh
 10019  000C06  CFFA F003          	movff	pclath,??_time_adc+2
 10020  000C0A  CFFB F004          	movff	pclatu,??_time_adc+3
 10021  000C0E  CFE9 F005          	movff	fsr0l,??_time_adc+4
 10022  000C12  CFEA F006          	movff	fsr0h,??_time_adc+5
 10023  000C16  CFE1 F007          	movff	fsr1l,??_time_adc+6
 10024  000C1A  CFE2 F008          	movff	fsr1h,??_time_adc+7
 10025  000C1E  CFD9 F009          	movff	fsr2l,??_time_adc+8
 10026  000C22  CFDA F00A          	movff	fsr2h,??_time_adc+9
 10027  000C26  CFF3 F00B          	movff	prodl,??_time_adc+10
 10028  000C2A  CFF4 F00C          	movff	prodh,??_time_adc+11
 10029  000C2E  CFF6 F00D          	movff	tblptrl,??_time_adc+12
 10030  000C32  CFF7 F00E          	movff	tblptrh,??_time_adc+13
 10031  000C36  CFF8 F00F          	movff	tblptru,??_time_adc+14
 10032  000C3A  CFF5 F010          	movff	tablat,??_time_adc+15
 10033                           
 10034                           ;main.c: 130: if(PIR1bits.RCIF ){
 10035  000C3E  AA9E               	btfss	3998,5,c	;volatile
 10036  000C40  D038               	goto	i2l541
 10037                           
 10038                           ;main.c: 131: char ch;
 10039                           ;main.c: 132: ch = RCREG;
 10040  000C42  CFAE F011          	movff	4014,time_adc@ch	;volatile
 10041                           
 10042                           ;main.c: 133: if( strEsp8266_Fram_Record .InfBit .FramLength < ( 50 - 1 ) ) {
 10043  000C46  0102               	movlb	2	; () banked
 10044  000C48  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10045  000C4A  0B7F               	andlw	127
 10046  000C4C  6E01               	movwf	??_time_adc& (0+255),c
 10047  000C4E  0E31               	movlw	49
 10048  000C50  6001               	cpfslt	??_time_adc,c
 10049  000C52  D02E               	goto	i2l542
 10050                           
 10051                           ; BSR set to: 2
 10052                           ;main.c: 134: strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .Fram
      +                          Length ++ ] = ch;
 10053  000C54  0102               	movlb	2	; () banked
 10054  000C56  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10055  000C58  0B7F               	andlw	127
 10056  000C5A  6E01               	movwf	??_time_adc& (0+255),c
 10057  000C5C  5001               	movf	??_time_adc,w,c
 10058  000C5E  0D01               	mullw	1
 10059  000C60  0E9A               	movlw	low _strEsp8266_Fram_Record
 10060  000C62  24F3               	addwf	prodl,w,c
 10061  000C64  6ED9               	movwf	fsr2l,c
 10062  000C66  0E02               	movlw	high _strEsp8266_Fram_Record
 10063  000C68  20F4               	addwfc	prodh,w,c
 10064  000C6A  6EDA               	movwf	fsr2h,c
 10065  000C6C  C011  FFDF         	movff	time_adc@ch,indf2
 10066                           
 10067                           ; BSR set to: 2
 10068  000C70  0E01               	movlw	1
 10069  000C72  6E01               	movwf	??_time_adc& (0+255),c
 10070  000C74  0102               	movlb	2	; () banked
 10071  000C76  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10072  000C78  0B7F               	andlw	127
 10073  000C7A  6E02               	movwf	(??_time_adc+1)& (0+255),c
 10074  000C7C  5001               	movf	??_time_adc,w,c
 10075  000C7E  2602               	addwf	??_time_adc+1,f,c
 10076  000C80  0102               	movlb	2	; () banked
 10077  000C82  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10078  000C84  1802               	xorwf	(??_time_adc+1)& (0+255),w,c
 10079  000C86  0B80               	andlw	-128
 10080  000C88  1802               	xorwf	(??_time_adc+1)& (0+255),w,c
 10081  000C8A  0102               	movlb	2	; () banked
 10082  000C8C  6FCC               	movwf	(_strEsp8266_Fram_Record+50)& (0+255),b
 10083                           
 10084                           ; BSR set to: 2
 10085                           ;main.c: 137: if(strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .F
      +                          ramLength] == '\0')
 10086  000C8E  0102               	movlb	2	; () banked
 10087  000C90  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10088  000C92  0B7F               	andlw	127
 10089  000C94  6E01               	movwf	??_time_adc& (0+255),c
 10090  000C96  5001               	movf	??_time_adc,w,c
 10091  000C98  0D01               	mullw	1
 10092  000C9A  0E9A               	movlw	low _strEsp8266_Fram_Record
 10093  000C9C  24F3               	addwf	prodl,w,c
 10094  000C9E  6ED9               	movwf	fsr2l,c
 10095  000CA0  0E02               	movlw	high _strEsp8266_Fram_Record
 10096  000CA2  20F4               	addwfc	prodh,w,c
 10097  000CA4  6EDA               	movwf	fsr2h,c
 10098  000CA6  50DF               	movf	indf2,w,c
 10099  000CA8  A4D8               	btfss	status,2,c
 10100  000CAA  D002               	goto	i2l542
 10101                           
 10102                           ; BSR set to: 2
 10103                           ;main.c: 138: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 1;
 10104  000CAC  0102               	movlb	2	; () banked
 10105  000CAE  8FCC               	bsf	(_strEsp8266_Fram_Record+50)& (0+255),7,b
 10106  000CB0                     i2l542:
 10107                           
 10108                           ; BSR set to: 2
 10109                           ;main.c: 140: }
 10110                           ;main.c: 141: PIR1bits.RCIF=0;
 10111  000CB0  9A9E               	bcf	3998,5,c	;volatile
 10112  000CB2                     i2l541:
 10113                           
 10114                           ;main.c: 142: }
 10115                           ;main.c: 144: if(PIR1bits.TMR2IF){
 10116  000CB2  A29E               	btfss	3998,1,c	;volatile
 10117  000CB4  D005               	goto	i2l545
 10118                           
 10119                           ;main.c: 145: s++;
 10120  000CB6  4A48               	infsnz	_s,f,c
 10121  000CB8  2A49               	incf	_s+1,f,c
 10122                           
 10123                           ;main.c: 146: IP++;
 10124  000CBA  4A4A               	infsnz	_IP,f,c
 10125  000CBC  2A4B               	incf	_IP+1,f,c
 10126                           
 10127                           ;main.c: 147: PIR1bits.TMR2IF=0;
 10128  000CBE  929E               	bcf	3998,1,c	;volatile
 10129  000CC0                     i2l545:
 10130  000CC0  C010  FFF5         	movff	??_time_adc+15,tablat
 10131  000CC4  C00F  FFF8         	movff	??_time_adc+14,tblptru
 10132  000CC8  C00E  FFF7         	movff	??_time_adc+13,tblptrh
 10133  000CCC  C00D  FFF6         	movff	??_time_adc+12,tblptrl
 10134  000CD0  C00C  FFF4         	movff	??_time_adc+11,prodh
 10135  000CD4  C00B  FFF3         	movff	??_time_adc+10,prodl
 10136  000CD8  C00A  FFDA         	movff	??_time_adc+9,fsr2h
 10137  000CDC  C009  FFD9         	movff	??_time_adc+8,fsr2l
 10138  000CE0  C008  FFE2         	movff	??_time_adc+7,fsr1h
 10139  000CE4  C007  FFE1         	movff	??_time_adc+6,fsr1l
 10140  000CE8  C006  FFEA         	movff	??_time_adc+5,fsr0h
 10141  000CEC  C005  FFE9         	movff	??_time_adc+4,fsr0l
 10142  000CF0  C004  FFFB         	movff	??_time_adc+3,pclatu
 10143  000CF4  C003  FFFA         	movff	??_time_adc+2,pclath
 10144  000CF8  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10145  000CFA  0011               	retfie		f
 10146  000CFC                     __end_of_time_adc:
 10147                           	opt stack 0
 10148                           pclatu	equ	0xFFB
 10149                           pclath	equ	0xFFA
 10150                           tblptru	equ	0xFF8
 10151                           tblptrh	equ	0xFF7
 10152                           tblptrl	equ	0xFF6
 10153                           tablat	equ	0xFF5
 10154                           prodh	equ	0xFF4
 10155                           prodl	equ	0xFF3
 10156                           intcon	equ	0xFF2
 10157                           indf0	equ	0xFEF
 10158                           postinc0	equ	0xFEE
 10159                           fsr0h	equ	0xFEA
 10160                           fsr0l	equ	0xFE9
 10161                           wreg	equ	0xFE8
 10162                           indf1	equ	0xFE7
 10163                           postdec1	equ	0xFE5
 10164                           plusw1	equ	0xFE3
 10165                           fsr1h	equ	0xFE2
 10166                           fsr1l	equ	0xFE1
 10167                           indf2	equ	0xFDF
 10168                           postinc2	equ	0xFDE
 10169                           postdec2	equ	0xFDD
 10170                           plusw2	equ	0xFDB
 10171                           fsr2h	equ	0xFDA
 10172                           fsr2l	equ	0xFD9
 10173                           status	equ	0xFD8
 10174                           pclatu	equ	0xFFB
 10175                           pclath	equ	0xFFA
 10176                           tblptru	equ	0xFF8
 10177                           tblptrh	equ	0xFF7
 10178                           tblptrl	equ	0xFF6
 10179                           tablat	equ	0xFF5
 10180                           prodh	equ	0xFF4
 10181                           prodl	equ	0xFF3
 10182                           intcon	equ	0xFF2
 10183                           indf0	equ	0xFEF
 10184                           postinc0	equ	0xFEE
 10185                           fsr0h	equ	0xFEA
 10186                           fsr0l	equ	0xFE9
 10187                           wreg	equ	0xFE8
 10188                           indf1	equ	0xFE7
 10189                           postdec1	equ	0xFE5
 10190                           plusw1	equ	0xFE3
 10191                           fsr1h	equ	0xFE2
 10192                           fsr1l	equ	0xFE1
 10193                           indf2	equ	0xFDF
 10194                           postinc2	equ	0xFDE
 10195                           postdec2	equ	0xFDD
 10196                           plusw2	equ	0xFDB
 10197                           fsr2h	equ	0xFDA
 10198                           fsr2l	equ	0xFD9
 10199                           status	equ	0xFD8
 10200                           
 10201                           	psect	rparam
 10202  0000                     pclatu	equ	0xFFB
 10203                           pclath	equ	0xFFA
 10204                           tblptru	equ	0xFF8
 10205                           tblptrh	equ	0xFF7
 10206                           tblptrl	equ	0xFF6
 10207                           tablat	equ	0xFF5
 10208                           prodh	equ	0xFF4
 10209                           prodl	equ	0xFF3
 10210                           intcon	equ	0xFF2
 10211                           indf0	equ	0xFEF
 10212                           postinc0	equ	0xFEE
 10213                           fsr0h	equ	0xFEA
 10214                           fsr0l	equ	0xFE9
 10215                           wreg	equ	0xFE8
 10216                           indf1	equ	0xFE7
 10217                           postdec1	equ	0xFE5
 10218                           plusw1	equ	0xFE3
 10219                           fsr1h	equ	0xFE2
 10220                           fsr1l	equ	0xFE1
 10221                           indf2	equ	0xFDF
 10222                           postinc2	equ	0xFDE
 10223                           postdec2	equ	0xFDD
 10224                           plusw2	equ	0xFDB
 10225                           fsr2h	equ	0xFDA
 10226                           fsr2l	equ	0xFD9
 10227                           status	equ	0xFD8
 10228                           
 10229                           	psect	temp
 10230  000059                     btemp:
 10231                           	opt stack 0
 10232  000059                     	ds	1
 10233  0000                     int$flags	set	btemp
 10234                           pclatu	equ	0xFFB
 10235                           pclath	equ	0xFFA
 10236                           tblptru	equ	0xFF8
 10237                           tblptrh	equ	0xFF7
 10238                           tblptrl	equ	0xFF6
 10239                           tablat	equ	0xFF5
 10240                           prodh	equ	0xFF4
 10241                           prodl	equ	0xFF3
 10242                           intcon	equ	0xFF2
 10243                           indf0	equ	0xFEF
 10244                           postinc0	equ	0xFEE
 10245                           fsr0h	equ	0xFEA
 10246                           fsr0l	equ	0xFE9
 10247                           wreg	equ	0xFE8
 10248                           indf1	equ	0xFE7
 10249                           postdec1	equ	0xFE5
 10250                           plusw1	equ	0xFE3
 10251                           fsr1h	equ	0xFE2
 10252                           fsr1l	equ	0xFE1
 10253                           indf2	equ	0xFDF
 10254                           postinc2	equ	0xFDE
 10255                           postdec2	equ	0xFDD
 10256                           plusw2	equ	0xFDB
 10257                           fsr2h	equ	0xFDA
 10258                           fsr2l	equ	0xFD9
 10259                           status	equ	0xFD8


Data Sizes:
    Strings     481
    Constant    2460
    Data        8
    BSS         345
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     71      88
    BANK0           128    120     120
    BANK1           256    221     251
    BANK2           256     27     233
    BANK3           256      0     100
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 20
		 -> main@t(BANK2[20]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 20
		 -> main@t(BANK2[20]), 

    memset@p1	PTR void  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    memset@p	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    sprintf$1455	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_67(CODE[17]), STR_66(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 100
		 -> STR_65(CODE[7]), sprintf@c(COMRAM[1]), STR_58(CODE[5]), STR_57(CODE[12]), 
		 -> STR_52(CODE[10]), STR_51(CODE[4]), STR_40(CODE[2]), STR_39(CODE[10]), 
		 -> STR_38(CODE[4]), STR_23(CODE[4]), STR_21(CODE[4]), ESP8266_Link_Server@cStr(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_64(CODE[3]), STR_63(CODE[3]), STR_25(CODE[17]), STR_24(CODE[20]), 
		 -> STR_22(CODE[13]), STR_20(CODE[13]), STR_18(CODE[26]), STR_15(CODE[21]), 
		 -> STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 120
		 -> main@print(BANK2[5]), ESP8266_Link_Server@cCmd(BANK1[120]), ESP8266_Link_Server@cStr(BANK1[100]), ESP8266_BuildAP@cCmd(COMRAM[120]), 
		 -> ESP8266_JoinAP@cCmd(BANK0[120]), ESP8266_SendString@cStr(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> main@t(BANK2[20]), 

    main@temp	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    sp__memset	PTR void  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    sp__ESP8266_ReceiveString	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_ReceiveString@pRecStr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_Link_Server@ComNum	PTR unsigned char  size(2) Largest target is 5
		 -> STR_58(CODE[5]), 

    ESP8266_Link_Server@ip	PTR unsigned char  size(2) Largest target is 12
		 -> STR_57(CODE[12]), 

    ESP8266_JoinAP@pPassWord	PTR unsigned char  size(2) Largest target is 10
		 -> STR_52(CODE[10]), 

    ESP8266_JoinAP@pSSID	PTR unsigned char  size(2) Largest target is 4
		 -> STR_51(CODE[4]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_Cmd@reply2	PTR unsigned char  size(2) Largest target is 10
		 -> STR_37(CODE[3]), STR_34(CODE[3]), STR_27(CODE[7]), STR_17(CODE[10]), 
		 -> STR_8(CODE[6]), NULL(NULL[0]), 

    ESP8266_Cmd@reply1	PTR unsigned char  size(2) Largest target is 10
		 -> STR_56(CODE[3]), STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_36(CODE[10]), 
		 -> STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), STR_26(CODE[8]), 
		 -> STR_19(CODE[3]), STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), 
		 -> STR_10(CODE[3]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), 

    ESP8266_Cmd@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_55(CODE[14]), STR_53(CODE[15]), STR_49(CODE[11]), STR_47(CODE[22]), 
		 -> STR_45(CODE[14]), STR_43(CODE[15]), STR_41(CODE[14]), STR_35(CODE[13]), 
		 -> STR_32(CODE[13]), STR_30(CODE[25]), STR_28(CODE[23]), ESP8266_Link_Server@cCmd(BANK1[120]), 
		 -> ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK0[120]), STR_13(CODE[14]), STR_11(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@cStr(COMRAM[20]), 

    ESP8266_Uart@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_55(CODE[14]), STR_53(CODE[15]), STR_49(CODE[11]), STR_47(CODE[22]), 
		 -> STR_45(CODE[14]), STR_43(CODE[15]), STR_41(CODE[14]), STR_35(CODE[13]), 
		 -> STR_32(CODE[13]), STR_30(CODE[25]), STR_28(CODE[23]), ESP8266_Link_Server@cCmd(BANK1[120]), 
		 -> ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK0[120]), STR_13(CODE[14]), STR_11(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@cStr(COMRAM[20]), 

    LCD_WritetStr@str	PTR const unsigned char  size(2) Largest target is 6
		 -> main@print(BANK2[5]), STR_62(CODE[6]), 

    ADtoPWM@AD	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 


Critical Paths under _main in COMRAM

    _PCA9685_init->_PCA9685_writeOneByte
    _IIC_Init->_delay_us
    _LCD_WritetStr->_LCD_WriteData
    _LCD_WriteData->_delay_ms
    _LCD_Initialize->_LCD_WriteCmd
    _delayFor18Tcy->_Delay1TCYx
    _LCD_GotoXY->_LCD_WriteCmd
    _LCD_WriteCmd->_delay_ms
    _ESP8266_client->_ESP8266_Link_Server
    _STA_MODE->_ESP8266_Net_Mode_Choose
    _ESP8266_Net_Mode_Choose->_ESP8266_Cmd
    _ESP8266_Rst->_ESP8266_Cmd
    _ESP8266_Link_Server->_sprintf
    _ESP8266_JoinAP->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ESP8266_AT_Test->_ESP8266_Cmd
    _ESP8266_Cmd->_strstr
    _ESP8266_ReceiveString->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _ADtoPWM->_PWMt0PCA
    _PWMt0PCA->_transmit_finger
    _transmit_finger->_PCA9685_writeOneByte
    _PCA9685_writeOneByte->_IIC_Send_Byte
    _delay_ms->_Delay10KTCYx
    _IIC_Wait_Ack->_delay_us
    _IIC_Stop->_delay_us
    _IIC_Start->_delay_us
    _IIC_Send_Byte->_delay_us
    _delay_us->_Delay10TCYx

Critical Paths under _time_adc in COMRAM

    None.

Critical Paths under _main in BANK0

    _ESP8266_client->_ESP8266_JoinAP

Critical Paths under _time_adc in BANK0

    None.

Critical Paths under _main in BANK1

    _ESP8266_client->_ESP8266_Link_Server

Critical Paths under _time_adc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _time_adc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _time_adc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _time_adc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _time_adc in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0  129391
                                             70 COMRAM     1     1      0
                                              0 BANK2     27    27      0
                            _ADtoPWM
              _ESP8266_ReceiveString
                     _ESP8266_client
                       _GPIO_initial
                         _LCD_GotoXY
                     _LCD_Initialize
                       _LCD_WriteCmd
                      _LCD_WritetStr
                       _PCA9685_init
                           _delay_ms
                       _finger_reset
                       _initial_UART
                             _memset
                 _oclillator_initial
                            _sprintf
                             _strcpy
                    _timer_2_initial
            _timer_intrrupt_initinal
 ---------------------------------------------------------------------------------
 (1) _timer_intrrupt_initinal                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_2_initial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     263
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _oclillator_initial                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     368
                                             17 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _initial_UART                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _finger_reset                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PCA9685_init                                         0     0      0    9973
                           _IIC_Init
               _PCA9685_writeOneByte
 ---------------------------------------------------------------------------------
 (2) _IIC_Init                                             0     0      0    1374
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _LCD_WritetStr                                        5     3      2    1807
                                             22 COMRAM     5     3      2
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        1     1      0    1446
                                             21 COMRAM     1     1      0
                     _LCDWriteNibble
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       0     0      0    2389
                       _LCD_WaitBusy
                       _LCD_WriteCmd
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _LCD_WaitBusy                                         0     0      0      31
                      _delayFor18Tcy
 ---------------------------------------------------------------------------------
 (3) _delayFor18Tcy                                        0     0      0      31
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (4) _Delay1TCYx                                           1     1      0      31
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_GotoXY                                           6     5      1    2858
                                             22 COMRAM     6     5      1
                       _LCD_WriteCmd
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteCmd                                         1     1      0    1446
                                             21 COMRAM     1     1      0
                     _LCDWriteNibble
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     438
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _GPIO_initial                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP8266_client                                       0     0      0   87681
                    _ESP8266_AT_Test
                        _ESP8266_Cmd
                     _ESP8266_JoinAP
                _ESP8266_Link_Server
                        _ESP8266_Rst
                           _STA_MODE
 ---------------------------------------------------------------------------------
 (2) _STA_MODE                                             0     0      0   20435
                        _ESP8266_Cmd
            _ESP8266_Net_Mode_Choose
 ---------------------------------------------------------------------------------
 (3) _ESP8266_Net_Mode_Choose                              1     1      0   10233
                                             45 COMRAM     1     1      0
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Rst                                          0     0      0   10202
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Link_Server                                227   221      6   18572
                                             64 COMRAM     6     0      6
                                              0 BANK1    221   221      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ESP8266_JoinAP                                     124   120      4   18068
                                             64 COMRAM     4     0      4
                                              0 BANK0    120   120      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             39    29     10    7474
                                             29 COMRAM    35    25     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     694
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             24 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     703
                                             17 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ESP8266_AT_Test                                      0     0      0   10202
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (4) _ESP8266_Cmd                                          9     1      8   10202
                                             36 COMRAM     9     1      8
                       _ESP8266_Uart
                           _delay_ms
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _ESP8266_Uart                                         6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ESP8266_ReceiveString                                4     2      2    2274
                                             36 COMRAM     4     2      2
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _strstr                                               4     0      4    2237
                                             32 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     3      6     423
                                             23 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (6) _strlen                                               6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _strchr                                               5     1      4     278
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _ADtoPWM                                             26    24      2   11544
                                             35 COMRAM    10     8      2
                           _PWMt0PCA
 ---------------------------------------------------------------------------------
 (2) _PWMt0PCA                                             5     0      5   11275
                                             30 COMRAM     5     0      5
                    _transmit_finger
 ---------------------------------------------------------------------------------
 (3) _transmit_finger                                      5     2      3   10393
                                             25 COMRAM     5     2      3
               _PCA9685_writeOneByte
 ---------------------------------------------------------------------------------
 (2) _PCA9685_writeOneByte                                 2     1      1    8599
                                             23 COMRAM     2     1      1
                      _IIC_Send_Byte
                          _IIC_Start
                           _IIC_Stop
                       _IIC_Wait_Ack
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             2     0      2     912
                                             19 COMRAM     2     0      2
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (2) _Delay10KTCYx                                         2     2      0      31
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _IIC_Wait_Ack                                         1     1      0    2785
                                             20 COMRAM     1     1      0
                           _IIC_Stop
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _IIC_Stop                                             0     0      0    1374
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _IIC_Start                                            0     0      0    1374
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _IIC_Send_Byte                                        3     3      0    1476
                                             20 COMRAM     3     3      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     0      2    1374
                                             18 COMRAM     2     0      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (5) _Delay10TCYx                                          1     1      0      31
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _time_adc                                            17    17      0      23
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADtoPWM
     _PWMt0PCA
       _transmit_finger
         _PCA9685_writeOneByte
           _IIC_Send_Byte
             _delay_us
               _Delay10TCYx
           _IIC_Start
             _delay_us
               _Delay10TCYx
           _IIC_Stop
             _delay_us
               _Delay10TCYx
           _IIC_Wait_Ack
             _IIC_Stop
               _delay_us
                 _Delay10TCYx
             _delay_us
               _Delay10TCYx
           _delay_ms
             _Delay10KTCYx
   _ESP8266_ReceiveString
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)
   _ESP8266_client
     _ESP8266_AT_Test
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _ESP8266_Cmd
       _ESP8266_Uart
       _delay_ms
         _Delay10KTCYx
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _ESP8266_JoinAP
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Link_Server
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Rst
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _STA_MODE
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _ESP8266_Net_Mode_Choose
         _ESP8266_Cmd
           _ESP8266_Uart
           _delay_ms
             _Delay10KTCYx
           _strstr
             _strchr
             _strlen
             _strncmp
               _strlen (ARG)
   _GPIO_initial
   _LCD_GotoXY
     _LCD_WriteCmd
       _LCDWriteNibble
       _delay_ms
         _Delay10KTCYx
     _delay_ms
       _Delay10KTCYx
   _LCD_Initialize
     _LCD_WaitBusy
       _delayFor18Tcy
         _Delay1TCYx
     _LCD_WriteCmd
       _LCDWriteNibble
       _delay_ms
         _Delay10KTCYx
     _delay_ms
       _Delay10KTCYx
   _LCD_WriteCmd
     _LCDWriteNibble
     _delay_ms
       _Delay10KTCYx
   _LCD_WritetStr
     _LCD_WriteData
       _LCDWriteNibble
       _delay_ms
         _Delay10KTCYx
   _PCA9685_init
     _IIC_Init
       _delay_us
         _Delay10TCYx
     _PCA9685_writeOneByte
       _IIC_Send_Byte
         _delay_us
           _Delay10TCYx
       _IIC_Start
         _delay_us
           _Delay10TCYx
       _IIC_Stop
         _delay_us
           _Delay10TCYx
       _IIC_Wait_Ack
         _IIC_Stop
           _delay_us
             _Delay10TCYx
         _delay_us
           _Delay10TCYx
       _delay_ms
         _Delay10KTCYx
   _delay_ms
     _Delay10KTCYx
   _finger_reset
   _initial_UART
   _memset
   _oclillator_initial
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _strcpy
   _timer_2_initial
   _timer_intrrupt_initinal

 _time_adc (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      64      11       39.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100     1B      E9       9       91.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     DD      FB       7       98.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     78      78       5       93.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     47      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     318      15        0.0%
DATA                 0      0     318       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jan 29 23:22:18 2019

             _ESP8266_Link_Server 0B08                     ?_finger_reset 0001  
                               _s 0048                    _LCD_Initialize 0F46  
                     ?_LCD_GotoXY 0017                                _IP 004A  
             ___wmul@multiplicand 0014                       __CFG_BORV$3 000000  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                             l172 1662                               l342 12E6  
                             l352 0D88                               l338 1282  
                             l602 01B8                               l603 01BA  
                             l268 152E                               l463 1062  
                             l662 05DC                               l921 18F4  
                             l678 06B4                      __CFG_CPB$OFF 000000  
                             _PR2 000FCB                      __CFG_CPD$OFF 000000  
               ??_timer_2_initial 0012                               prod 000FF3  
                             wreg 000FE8              ?_ESP8266_Link_Server 0041  
                   ?_IIC_Wait_Ack 0001         ??_ESP8266_Net_Mode_Choose 002E  
                    __CFG_LVP$OFF 000000                        _Delay1TCYx 18F2  
                    __CFG_WDT$OFF 000000                   __end_of_ADtoPWM 0F46  
                            l1134 13EA                              l1144 1476  
                            l4011 0172                              l4021 01B2  
                            l4013 0178                              l4103 03B8  
                            l4023 01B6                              l4201 05B2  
                            l4113 03E2                              l4033 01E6  
                            l4025 01BE                              l4017 0196  
                            l4115 03E6                              l4107 03D0  
                            l4051 026A                              l4035 01F0  
                            l4019 01AC                              l4301 0856  
                            l4213 05EE                              l4141 0442  
                            l4061 0292                              l4045 024C  
                            l4037 01F4                              l4223 0630  
                            l4207 05D6                              l4143 0446  
                            l4127 0412                              l4071 02DA  
                            l4055 0270                              l4039 0226  
                            l4311 088C                              l4305 086E  
                            l4241 0670                              l4129 0416  
                            l4081 0310                              l4049 0262  
                            l4313 08A6                              l4251 06AE  
                            l4163 04A4                              l4075 02EA  
                            l4059 0280                              l4067 02C4  
                            l4091 037A                              l4323 1096  
                            l4341 0A00                              l4229 0646  
                            l4237 0666                              l4181 0508  
                            l4173 04D8                              l4157 0472  
                            l4085 0322                              l4077 02FC  
                            l4333 10E2                              l4501 0FA4  
                            l4343 0A16                              l4263 06FA  
                            l4247 068E                              l4167 04B6  
                            l4159 048E                              l4431 0B20  
                            l4327 10BC                              l4319 1070  
                            l4361 0AB2                              l4353 0A68  
                            l4337 09E6                              l3721 11AA  
                            l4281 0792                              l4273 073C  
                            l4257 06C6                              l4193 057E  
                            l4089 0328                              l4441 0B9C  
                            l4433 0B4E                              l4521 149A  
                            l4505 0FB4                              l4355 0A7E  
                            l4347 0A34                              l3707 14C8  
                            l3811 10FA                              l4419 16F8  
                            l4291 07F8                              l4195 0586  
                            l4187 053E                              l4179 0500  
                            l4443 0BC2                              l4451 1614  
                            l4365 0AD0                              l4349 0A4A  
                            l4461 0F2C                              l3733 156C  
                            l3709 14CC                              l3725 11DC  
                            l3717 117E                              l4605 0FF4  
                            l3805 127E                              l3901 13C0  
                            l4445 0BDE                              l4437 0B7C  
                            l4517 1490                              l4509 0FCA  
                            l4533 123E                              l4621 16E6  
                            l4359 0A9C                              l3727 11E4  
                            l3823 1172                              l4607 1022  
                            l3911 13E0                              l3903 13C4  
                            l4287 07CC                              l4279 0752  
                            l4295 082A                              l4199 05AA  
                            l4439 0B8C                              l3745 1882  
                            l4369 0AE6                              l4457 0EDA  
                            l3817 1134                              l3921 1454  
                            l4297 0846                              l4529 1204  
                            l4617 16D6                              l4625 167A  
                            l3683 18D6                              l3763 1354  
                            l3739 1586                              l3819 115C  
                            l3923 1458                              l4299 0852  
                            l4627 1682                              l3693 189A  
                            l3845 0D34                              l4493 0F84  
                            l3687 18AE                              l3767 135C  
                            l3871 0DAC                              l3863 0D8C  
                            l3927 146C                              l3919 144C  
                            l4591 0DF4                              l4593 0E0E  
                            l4497 0F94                              l3795 1520  
                            l3883 1862                              l3971 0058  
                            l3963 003A                              l4595 0E38  
                            l3965 004C                              l3957 001E  
                            l4597 0E62                              l3983 00A2  
                            l3991 0100                              l3967 0050  
                            l3975 005E                              l3969 0054  
                            l3899 13B8                              l4789 0926  
                            l3999 012E                              STR_1 7EA6  
                            STR_2 7FF5                              STR_3 7FB2  
                            STR_4 7FDC                              STR_5 7FB7  
                            STR_6 7FA9                              STR_7 7FB7  
                            STR_8 7FD6                              STR_9 7F18  
                            _LATD 000F8C                              u3330 12B2  
                            u4131 071E                              u3340 12E0  
                            u3337 12A8                              u4410 1238  
                            u3347 12D6                              u4420 1272  
                            u3285 1364                              u3720 02BA  
                            u4281 0B16                              u4417 122E  
                            u3650 0220                              u3555 16C2  
                            u4427 1268                              u3556 16C4  
                            u3727 02B0                     ?_LCD_WaitBusy 0001  
                            u3657 0216                              u4747 18A0  
                            u3980 0574                              u4757 18D8  
                            _TRMT 007D61                              _TXIF 007CF4  
                            _main 08B4              _strPc1_1_Fram_Record 0267  
                            _test 01DD                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 0059         ??_timer_intrrupt_initinal 0012  
              __size_of_IIC_Start 0024                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                   __CFG_IESO$OFF 000000                    ?_IIC_Send_Byte 0001  
                    _sprintf$1455 0031                      _sprintf$1448 002D  
                    _sprintf$1449 002F                     ?_LCD_WriteCmd 0001  
          __end_of_LCD_Initialize 0FDC                     _LCD_WriteData 1724  
                   __CFG_MCLRE$ON 000000                    ??_finger_reset 0012  
                    ___param_bank 000000                     _LCD_WritetStr 11FE  
                     _Delay10TCYx 18D4                  __end_of_IIC_Init 184C  
                __end_of_IIC_Stop 1806              __end_of_PCA9685_init 17E2  
                           ?_main 0001                             STR_10 7FB7  
                           STR_11 7F34                             STR_12 7FB7  
                           STR_20 7F5D                             STR_21 7FEA  
                           STR_13 7F42                             STR_14 7FB7  
                           STR_22 7F5D                             STR_30 7E37  
                           STR_23 7FEE                             STR_15 7E7D  
                           STR_16 7FB7                             STR_40 7FFC  
                           STR_32 7F50                             STR_24 7E92  
                           STR_17 7F9F                             STR_33 7F95  
                           STR_41 7F0A                             STR_25 7EDB  
                           STR_50 7FB7                             STR_26 7FBA  
                           STR_18 7E1D                             STR_35 7F50  
                           STR_51 7FE6                             STR_27 7FC9  
                           STR_43 7EEC                             STR_52 7F81  
                           STR_60 7FF8                             STR_36 7F8B  
                           STR_28 7E50                             STR_61 7FF8  
                           STR_37 7FB7                             STR_45 7F26  
                           STR_53 7EFB                             STR_54 7FB7  
                           STR_38 7FE6                             STR_62 7FD0  
                           STR_55 7F0A                             STR_63 7FF2  
                           STR_39 7F81                             STR_47 7E67  
                           STR_56 7FB7                             STR_64 7FF2  
                           STR_65 7FC2                             STR_49 7F76  
                           STR_57 7F6A                             STR_58 7FE1  
                           STR_66 7EB9                             STR_59 7FFA  
                           STR_67 7ECA                   __end_of___lwdiv 13F4  
                 __end_of___lwmod 1480                             i2l541 0CB2  
                           i2l542 0CB0                             i2l545 0CC0  
                           _RCREG 000FAE                             _SPBRG 000FAF  
                           _PORTD 000F83                             _TRISD 000F95  
            __end_of_ESP8266_Uart 12EC                             _TXREG 000FAD  
           __size_of_Delay10KTCYx 0016                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000             ??_ESP8266_Link_Server 0047  
                  __CFG_EBTR2$OFF 000000                    ??_IIC_Wait_Ack 0015  
                  __CFG_EBTR3$OFF 000000                     ?_GPIO_initial 0001  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
           __end_of_delayFor18Tcy 1914                   __end_of_dpowers 7E15  
                           _count 0050                  __end_of_STA_MODE 1640  
                 __end_of_isdigit 186A                    ??_LCD_WaitBusy 0013  
                           main@t 02CE                             _write 004F  
                __end_of_PWMt0PCA 0B08               __size_of_LCD_GotoXY 003E  
                           pclath 000FFA                             tablat 000FF5  
         __size_of_ESP8266_JoinAP 004A                             plusw1 000FE3  
                           plusw2 000FDB                             status 000FD8  
                 __end_of_sprintf 08B4        __end_of_oclillator_initial 190C  
                 __end_of_strncmp 11FE                    ??_LCD_WriteCmd 0016  
         __size_of_ESP8266_client 00C4                    ?_LCD_WriteData 0001  
                    LCD_GotoXY@ln 0017                   ?_LCD_Initialize 0001  
               ??_transmit_finger 001D                   __initialization 12EC  
                  ?_LCD_WritetStr 0017                      __end_of_main 09E4  
            __size_of_ESP8266_Cmd 00C8              __size_of_ESP8266_Rst 0026  
                    _Delay10KTCYx 1898                    __CFG_OSC$HSPLL 000000  
           _ESP8266_ReceiveString 0FDC                    ESP8266_Cmd@cmd 0025  
                          ??_main 0047   __end_of_timer_intrrupt_initinal 18D4  
                   __activetblptr 000002                 __end_of_IIC_Start 182A  
                       ??_ADtoPWM 0026                    ??_GPIO_initial 0012  
           ESP8266_Link_Server@id 0045             ESP8266_Link_Server@ip 0041  
                IIC_Send_Byte@txd 0016                       ?_Delay1TCYx 0001  
                          _SPBRGH 000FB0                     ?_initial_UART 0001  
                 ??_IIC_Send_Byte 0015                    _LCDWriteNibble 169E  
                __end_of_delay_ms 1898                  __end_of_delay_us 18C4  
                  __CFG_XINST$OFF 000000                  _ESP8266_Cmd$1210 002D  
             ESP8266_JoinAP@pSSID 0041          __size_of_ESP8266_AT_Test 002C  
                          ___wmul 1774                    __CFG_STVREN$ON 000000  
                       ??___lwdiv 0016                         ??___lwmod 001D  
               ESP8266_Cmd@reply1 0027                 ESP8266_Cmd@reply2 0029  
                          _memset 16CC                            clear_0 1312  
                          clear_1 131E                            clear_2 132A  
                          clear_3 1336                            _strchr 156C  
                          _strcpy 1670                            _strlen 14BE  
                          _strstr 10F8             IIC_Wait_Ack@ucErrTime 0015  
                    __pdataCOMRAM 0051                         ??_isdigit 0012  
                __end_of_time_adc 0CFC                      __mediumconst 7480  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8              __end_of_finger_reset 1916  
                       ??_sprintf 0028         ESP8266_Link_Server@ComNum 0043  
                       ??_strncmp 001E            __end_of_LCDWriteNibble 16CC  
                      __accesstop 0080           __end_of__initialization 133C  
                       ?_IIC_Init 0001                    ??_initial_UART 0012  
                 __CFG_PBADEN$OFF 000000                         ?_IIC_Stop 0001  
                 ??_LCD_WriteData 0016                     ___rparam_used 000001  
                 ??_LCD_WritetStr 0019           transmit_finger@HL_Value 001A  
                   LCD_GotoXY@pos 001C                    __pcstackCOMRAM 0001  
                 _timer_2_initial 186A              __end_of_IIC_Wait_Ack 1536  
           __size_of_PCA9685_init 0024                      ??_LCD_GotoXY 0018  
         ESP8266_JoinAP@pPassWord 0043            ?_ESP8266_ReceiveString 0025  
            __end_of_LCD_WaitBusy 1670               __size_of_Delay1TCYx 000A  
                       ?_STA_MODE 0001             __size_of_ESP8266_Uart 0072  
                       ?_PWMt0PCA 001F                         ADtoPWM@AD 0024  
                       ADtoPWM@u4 002A                         ADtoPWM@w4 002C  
                LCD_WritetStr@str 0017              __end_of_LCD_WriteCmd 156C  
   __size_of_PCA9685_writeOneByte 0036                      sprintf@width 003C  
                  _ESP8266_JoinAP 13F4                        __pbssBANK1 01DD  
                      __pbssBANK2 0200                        __pbssBANK3 0300  
        ESP8266_Link_Server@F4048 0300                __end_of_LCD_GotoXY 14BE  
                 ?_LCDWriteNibble 0012                        ??_IIC_Init 0015  
                      ??_IIC_Stop 0015                      _PCA9685_init 17BE  
                  _ESP8266_client 0DC4                      _ESP8266_Uart 127A  
              __CFG_CCP2MX$PORTBE 000000              __end_of_GPIO_initial 18F2  
        ESP8266_Link_Server@enumE 01DC                      ?_Delay10TCYx 0001  
                         ?___wmul 0012             transmit_finger@finger 001C  
                 ESP8266_Uart@cmd 0012                        ??_STA_MODE 002F  
                         ?_memset 0012                        ??_PWMt0PCA 0024  
               ??_ESP8266_AT_Test 002E                           ?_strchr 0012  
                         ?_strcpy 0012                           ?_strlen 0012  
                         ?_strstr 0021                           _ADtoPWM 0E88  
                       ?_delay_ms 0014                         ?_delay_us 0013  
          __end_of_ESP8266_JoinAP 143E                 ESP8266_Uart@index 0016  
                 _transmit_finger 15A2      ESP8266_ReceiveString@pRecStr 0027  
          __end_of_ESP8266_client 0E88                  ??_LCD_Initialize 0017  
         __end_of_timer_2_initial 1882                           __Hparam 0000  
                         __Lparam 0000                         ?_time_adc 0001  
                 __size_of___wmul 0026                           ___lwdiv 13A2  
                         ___lwmod 143E                _oclillator_initial 1904  
                         __pcinit 12EC                   __size_of_memset 002C  
                 Delay10TCYx@unit 0012                           __ramtop 0600  
     __end_of_ESP8266_Link_Server 0C04                           __ptext0 08B4  
                         __ptext1 18C4                           __ptext2 186A  
                         __ptext3 1670                           __ptext4 1904  
                         __ptext5 16CC                           __ptext6 179A  
                         __ptext7 1914                           __ptext8 17BE  
                         __ptext9 182A                         _T0CONbits 000FD5  
            __end_of_initial_UART 17BE                   __size_of_strchr 0036  
           __size_of_finger_reset 0002                   __size_of_strcpy 002E  
                 __size_of_strlen 003E                 __end_of_hexpowers 7E1D  
                 __size_of_strstr 0084                           _dpowers 7E0B  
        ?_ESP8266_Net_Mode_Choose 0001                         _T2CONbits 000FCA  
                         _isdigit 184C               ?_oclillator_initial 0001  
                      ??_delay_ms 0016                        ??_delay_us 0015  
                 ?_ESP8266_JoinAP 0041                         _IIC_Start 1806  
                    ??_Delay1TCYx 0012                           _sprintf 0012  
                         _strncmp 117C                    __pintcode_body 0C04  
                      delay_ms@ms 0014              end_of_initialization 133C  
               __end_of_octpowers 7E0B          ?_timer_intrrupt_initinal 0001  
                      delay_us@us 0013                   ?_ESP8266_client 0001  
                         memset@c 0014                           memset@n 0016  
                         memset@p 0018                     __Lmediumconst 7480  
                         int_func 0C04             __size_of_IIC_Wait_Ack 003A  
                   ??_ESP8266_Cmd 002D              ??_oclillator_initial 0012  
                   ??_ESP8266_Rst 002E             __size_of_LCD_WaitBusy 0030  
                      ??_time_adc 0001                         _RCSTAbits 000FAB  
                         postdec1 000FE5                           postdec2 000FDD  
                    _finger_reset 1914                           postinc0 000FEE  
                         postinc2 000FDE            __size_of_delayFor18Tcy 0008  
                         strlen@s 0012                __end_of_Delay1TCYx 18FC  
           __size_of_LCD_WriteCmd 0036                         _PORTBbits 000F81  
                       _PORTDbits 000F83                        _test_index 004C  
         __end_of_transmit_finger 15D8                         _TRISAbits 000F92  
                       _TRISBbits 000F93                      _IIC_Wait_Ack 14FC  
                      ?_IIC_Start 0001                      _LCD_WaitBusy 1640  
           __size_of_GPIO_initial 000E                  ?_timer_2_initial 0001  
                       _TXSTAbits 000FAC                 __size_of_IIC_Init 0022  
               __size_of_IIC_Stop 0024             __end_of_IIC_Send_Byte 13A2  
         ??_ESP8266_ReceiveString 0027                      _LCD_WriteCmd 1536  
                  IIC_Send_Byte@t 0017               __end_of_ESP8266_Cmd 0DC4  
 __end_of_ESP8266_Net_Mode_Choose 10F8                    __end_of___wmul 179A  
             __end_of_ESP8266_Rst 1774                       _BAUDCONbits 000FB8  
            __size_of_Delay10TCYx 0010                     __pidataCOMRAM 18FC  
                  __end_of_memset 16F8                 __size_of_STA_MODE 0032  
                  __end_of_strchr 15A2                 __size_of_PWMt0PCA 0124  
                  __end_of_strcpy 169E                    __end_of_strlen 14FC  
                  __end_of_strstr 117C               start_initialization 12EC  
                ??_LCDWriteNibble 0013                      _GPIO_initial 18E4  
                   _delayFor18Tcy 190C                       PWMt0PCA@low 0021  
           __end_of_LCD_WriteData 174E                   _ESP8266_AT_Test 16F8  
              ESP8266_JoinAP@cCmd 0080      __end_of_PCA9685_writeOneByte 160E  
           __end_of_LCD_WritetStr 127A                   LCD_WriteData@ch 0016  
                        ??___wmul 0016             __size_of_initial_UART 0024  
                __CFG_LPT1OSC$OFF 000000                          ??_memset 0018  
             __end_of_finger_up_0 75B7               __end_of_finger_up_1 7AE7  
             __end_of_finger_up_2 790B               __end_of_finger_up_3 7809  
             __end_of_finger_up_4 76E5                          ??_strchr 0016  
                        ??_strcpy 0016                          ??_strlen 0014  
                        ??_strstr 0025       ESP8266_Net_Mode_Choose@MODE 002E  
                        ?_ADtoPWM 0024                  ?_transmit_finger 001A  
                     __pbssCOMRAM 0048                     __pcstackBANK0 0080  
                   __pcstackBANK1 0100                     __pcstackBANK2 02CE  
                  ?_delayFor18Tcy 0001                       ??_IIC_Start 0015  
                    _isdigit$1685 0013                     _str1_1esp8266 0234  
               __size_of_delay_ms 0016                 __size_of_delay_us 0016  
                     sprintf@flag 003F                       sprintf@prec 003B  
                    _initial_UART 179A              transmit_finger@Hbyte 001D  
                     _ESP8266_Cmd 0CFC              transmit_finger@Lbyte 001E  
         ESP8266_Link_Server@cCmd 0100                  ___lwdiv@dividend 0012  
                     _ESP8266_Rst 174E           ESP8266_Link_Server@cStr 0178  
                       __pintcode 0008                     __pmediumconst 7480  
                   ?_Delay10KTCYx 0001                          ?___lwdiv 0012  
                        ?___lwmod 0019                 __size_of_time_adc 0CF4  
                  PWMt0PCA@finger 0023                  LCDWriteNibble@ch 0013  
                LCDWriteNibble@rs 0012                  ??_ESP8266_JoinAP 0045  
                        ?_isdigit 0001                         _hexpowers 7E15  
                ??_ESP8266_client 0047                  ___lwdiv@quotient 0017  
                        ?_sprintf 001E                          ?_strncmp 0018  
         __end_of_ESP8266_AT_Test 1724                          _IIC_Init 182A  
                  ___wmul@product 0016                          _IIC_Stop 17E2  
__size_of_ESP8266_Net_Mode_Choose 008C                          _LATAbits 000F89  
                       _octpowers 7DFF                          _PIE1bits 000F9D  
                      time_adc@ch 0011                          _PIR1bits 000F9E  
                     _finger_up_0 7481                       _finger_up_1 79FB  
                     _finger_up_2 7809                       _finger_up_3 76E5  
                     _finger_up_4 75B7                          _RCONbits 000FD0  
                __CFG_WDTPS$32768 000000                    ??_Delay10KTCYx 0012  
__size_of_timer_intrrupt_initinal 0010                          _STA_MODE 160E  
                        _PWMt0PCA 09E4                 ___wmul@multiplier 0012  
                 ??_delayFor18Tcy 0013                         main@print 02E2  
                Delay10KTCYx@unit 0013                  __size_of_ADtoPWM 00BE  
    __size_of_ESP8266_Link_Server 00FC              _PCA9685_writeOneByte 15D8  
                       _work_flag 004E                         copy_data0 1300  
                      PWMt0PCA@up 001F                          __Hrparam 0000  
     __size_of_oclillator_initial 0008                    LCD_WriteCmd@ch 0016  
                        __Lrparam 0000          PCA9685_writeOneByte@addr 0019  
              __CFG_BOREN$SBORDIS 000000          PCA9685_writeOneByte@data 0018  
  __size_of_ESP8266_ReceiveString 0090     __end_of_ESP8266_ReceiveString 106C  
         __size_of_LCD_Initialize 0096                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042               LCD_CreateFont@F3803 0051  
                  LCD_WritetStr@i 001B                        sprintf@idx 002C  
                      sprintf@len 0035                        sprintf@val 0039  
                __size_of_isdigit 001E                          _delay_ms 1882  
                        _delay_us 18AE                   ___lwdiv@divisor 0014  
           ?_PCA9685_writeOneByte 0018                   ___lwdiv@counter 0016  
                        __ptext10 11FE                          __ptext11 1724  
                        __ptext20 0DC4                          __ptext12 0F46  
                        __ptext21 160E                          __ptext13 1640  
                        __ptext30 13A2                          __ptext22 106C  
                        __ptext14 190C                          __ptext31 16F8  
                        __ptext23 174E                          __ptext15 18F2  
                        __ptext40 09E4                          __ptext32 0CFC  
                        __ptext24 0B08                          __ptext16 1480  
                        __ptext41 15A2                          __ptext33 127A  
                        __ptext25 13F4                          __ptext17 1536  
                        __ptext50 18D4                          __ptext42 15D8  
                        __ptext34 0FDC                          __ptext26 0012  
                        __ptext18 169E                          __ptext43 1882  
                        __ptext35 10F8                          __ptext27 184C  
                        __ptext19 18E4                          __ptext44 1898  
                        __ptext36 117C                          __ptext28 1774  
                        __ptext45 14FC                          __ptext37 14BE  
                        __ptext29 143E                          __ptext46 17E2  
                        __ptext38 156C                          __ptext47 1806  
                        __ptext39 0E88                          __ptext48 134A  
                        __ptext49 18AE                  __size_of_sprintf 08A2  
                __size_of_strncmp 0082                        strcpy@from 0014  
                ?_ESP8266_AT_Test 0001                     ?_PCA9685_init 0001  
                   __size_of_main 0130                    Delay1TCYx@unit 0012  
             ESP8266_Cmd@waittime 002B                        strncmp@len 001C  
                   ?_ESP8266_Uart 0012                          _time_adc 0008  
                   ??_Delay10TCYx 0012                          int$flags 0059  
        __size_of_timer_2_initial 0018                        _LCD_GotoXY 1480  
               _strPc_Fram_Record 0200                          main@temp 02E7  
                  _finger_under_0 7BC9                    _finger_under_1 7CA1  
                  _finger_under_2 7AE7                    _finger_under_3 7D61  
                  _finger_under_4 790B                        _INTCONbits 000FF2  
          __size_of_IIC_Send_Byte 0058                          isdigit@c 0014  
                        memset@p1 0012              __end_of_Delay10KTCYx 18AE  
                        intlevel2 0000                         sprintf@ap 0037  
                       sprintf@cp 0033                         sprintf@sp 001E  
         _ESP8266_Net_Mode_Choose 106C                    ??_PCA9685_init 001A  
                       strchr@chr 0014                  ___lwmod@dividend 0019  
                       strchr@ptr 0012                    ??_ESP8266_Uart 0014  
                       strncmp@s1 0018                         strncmp@s2 001A  
                    ?_ESP8266_Cmd 0025                        _OSCCONbits 000FD3  
                    ?_ESP8266_Rst 0001           _timer_intrrupt_initinal 18C4  
          __end_of_finger_under_0 7CA1            __end_of_finger_under_1 7D61  
          __end_of_finger_under_2 7BC9            __end_of_finger_under_3 7DFF  
          __end_of_finger_under_4 79FB               __end_of_Delay10TCYx 18E4  
                        sprintf@c 003E                          sprintf@f 0020  
                 ___lwmod@divisor 001B                          strcpy@cp 0016  
                        strlen@cp 0016                          strcpy@to 0012  
                 ___lwmod@counter 001D            ??_PCA9685_writeOneByte 0019  
          __size_of_LCD_WriteData 002A            _strEsp8266_Fram_Record 029A  
                        strstr@s1 0021                          strstr@s2 0023  
          __size_of_LCD_WritetStr 007C          __size_of_transmit_finger 0036  
                  _LCD_GotoXY$640 001A           __size_of_LCDWriteNibble 002E  
                   _IIC_Send_Byte 134A  
