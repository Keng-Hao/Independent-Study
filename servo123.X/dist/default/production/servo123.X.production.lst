

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 06 21:00:38 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           ; Version 1.41
    62                           ; Generated 25/01/2017 GMT
    63                           ; 
    64                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F4520 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95  0000                     
    96                           	psect	idataCOMRAM
    97  001974                     __pidataCOMRAM:
    98                           	opt stack 0
    99                           
   100                           ;initializer for LCD_CreateFont@F3803
   101  001974  1F                 	db	31
   102  001975  11                 	db	17
   103  001976  11                 	db	17
   104  001977  1F                 	db	31
   105  001978  11                 	db	17
   106  001979  11                 	db	17
   107  00197A  1F                 	db	31
   108  00197B  00                 	db	0
   109                           
   110                           	psect	mediumconst
   111  00748A                     __pmediumconst:
   112                           	opt stack 0
   113  00748A  00                 	db	0
   114  00748B                     _finger_up_0:
   115                           	opt stack 0
   116  00748B  02E1               	dw	737
   117  00748D  00                 	db	0
   118  00748E  00                 	db	0
   119  00748F  00                 	db	0
   120  007490  00                 	db	0
   121  007491  00                 	db	0
   122  007492  00                 	db	0
   123  007493  00                 	db	0
   124  007494  00                 	db	0
   125  007495  00                 	db	0
   126  007496  00                 	db	0
   127  007497  00                 	db	0
   128  007498  00                 	db	0
   129  007499  00                 	db	0
   130  00749A  00                 	db	0
   131  00749B  00                 	db	0
   132  00749C  00                 	db	0
   133  00749D  00                 	db	0
   134  00749E  00                 	db	0
   135  00749F  00                 	db	0
   136  0074A0  00                 	db	0
   137  0074A1  00                 	db	0
   138  0074A2  00                 	db	0
   139  0074A3  00                 	db	0
   140  0074A4  00                 	db	0
   141  0074A5  00                 	db	0
   142  0074A6  00                 	db	0
   143  0074A7  00                 	db	0
   144  0074A8  00                 	db	0
   145  0074A9  00                 	db	0
   146  0074AA  00                 	db	0
   147  0074AB  00                 	db	0
   148  0074AC  00                 	db	0
   149  0074AD  00                 	db	0
   150  0074AE  00                 	db	0
   151  0074AF  00                 	db	0
   152  0074B0  00                 	db	0
   153  0074B1  00                 	db	0
   154  0074B2  00                 	db	0
   155  0074B3  00                 	db	0
   156  0074B4  00                 	db	0
   157  0074B5  00                 	db	0
   158  0074B6  00                 	db	0
   159  0074B7  00                 	db	0
   160  0074B8  00                 	db	0
   161  0074B9  00                 	db	0
   162  0074BA  00                 	db	0
   163  0074BB  00                 	db	0
   164  0074BC  00                 	db	0
   165  0074BD  00                 	db	0
   166  0074BE  00                 	db	0
   167  0074BF  00                 	db	0
   168  0074C0  00                 	db	0
   169  0074C1  00                 	db	0
   170  0074C2  00                 	db	0
   171  0074C3  00                 	db	0
   172  0074C4  00                 	db	0
   173  0074C5  00                 	db	0
   174  0074C6  00                 	db	0
   175  0074C7  00                 	db	0
   176  0074C8  00                 	db	0
   177  0074C9  00                 	db	0
   178  0074CA  00                 	db	0
   179  0074CB  00                 	db	0
   180  0074CC  00                 	db	0
   181  0074CD  00                 	db	0
   182  0074CE  00                 	db	0
   183  0074CF  00                 	db	0
   184  0074D0  00                 	db	0
   185  0074D1  00                 	db	0
   186  0074D2  00                 	db	0
   187  0074D3  00                 	db	0
   188  0074D4  00                 	db	0
   189  0074D5  00                 	db	0
   190  0074D6  00                 	db	0
   191  0074D7  00                 	db	0
   192  0074D8  00                 	db	0
   193  0074D9  00                 	db	0
   194  0074DA  00                 	db	0
   195  0074DB  00                 	db	0
   196  0074DC  00                 	db	0
   197  0074DD  00                 	db	0
   198  0074DE  00                 	db	0
   199  0074DF  00                 	db	0
   200  0074E0  00                 	db	0
   201  0074E1  00                 	db	0
   202  0074E2  00                 	db	0
   203  0074E3  00                 	db	0
   204  0074E4  00                 	db	0
   205  0074E5  00                 	db	0
   206  0074E6  00                 	db	0
   207  0074E7  00                 	db	0
   208  0074E8  00                 	db	0
   209  0074E9  00                 	db	0
   210  0074EA  00                 	db	0
   211  0074EB  00                 	db	0
   212  0074EC  00                 	db	0
   213  0074ED  00                 	db	0
   214  0074EE  00                 	db	0
   215  0074EF  00                 	db	0
   216  0074F0  00                 	db	0
   217  0074F1  00                 	db	0
   218  0074F2  00                 	db	0
   219  0074F3  00                 	db	0
   220  0074F4  00                 	db	0
   221  0074F5  00                 	db	0
   222  0074F6  00                 	db	0
   223  0074F7  00                 	db	0
   224  0074F8  00                 	db	0
   225  0074F9  00                 	db	0
   226  0074FA  00                 	db	0
   227  0074FB  00                 	db	0
   228  0074FC  00                 	db	0
   229  0074FD  00                 	db	0
   230  0074FE  00                 	db	0
   231  0074FF  00                 	db	0
   232  007500  00                 	db	0
   233  007501  00                 	db	0
   234  007502  00                 	db	0
   235  007503  00                 	db	0
   236  007504  00                 	db	0
   237  007505  00                 	db	0
   238  007506  00                 	db	0
   239  007507  00                 	db	0
   240  007508  00                 	db	0
   241  007509  00                 	db	0
   242  00750A  00                 	db	0
   243  00750B  00                 	db	0
   244  00750C  00                 	db	0
   245  00750D  00                 	db	0
   246  00750E  00                 	db	0
   247  00750F  00                 	db	0
   248  007510  00                 	db	0
   249  007511  00                 	db	0
   250  007512  00                 	db	0
   251  007513  00                 	db	0
   252  007514  00                 	db	0
   253  007515  00                 	db	0
   254  007516  00                 	db	0
   255  007517  00                 	db	0
   256  007518  00                 	db	0
   257  007519  00                 	db	0
   258  00751A  00                 	db	0
   259  00751B  00                 	db	0
   260  00751C  00                 	db	0
   261  00751D  00                 	db	0
   262  00751E  00                 	db	0
   263  00751F  00                 	db	0
   264  007520  00                 	db	0
   265  007521  00                 	db	0
   266  007522  00                 	db	0
   267  007523  00                 	db	0
   268  007524  00                 	db	0
   269  007525  00                 	db	0
   270  007526  00                 	db	0
   271  007527  00                 	db	0
   272  007528  00                 	db	0
   273  007529  00                 	db	0
   274  00752A  00                 	db	0
   275  00752B  00                 	db	0
   276  00752C  00                 	db	0
   277  00752D  00                 	db	0
   278  00752E  00                 	db	0
   279  00752F  00                 	db	0
   280  007530  00                 	db	0
   281  007531  00                 	db	0
   282  007532  00                 	db	0
   283  007533  00                 	db	0
   284  007534  00                 	db	0
   285  007535  00                 	db	0
   286  007536  00                 	db	0
   287  007537  00                 	db	0
   288  007538  00                 	db	0
   289  007539  00                 	db	0
   290  00753A  00                 	db	0
   291  00753B  00                 	db	0
   292  00753C  00                 	db	0
   293  00753D  00                 	db	0
   294  00753E  00                 	db	0
   295  00753F  00                 	db	0
   296  007540  00                 	db	0
   297  007541  00                 	db	0
   298  007542  00                 	db	0
   299  007543  00                 	db	0
   300  007544  00                 	db	0
   301  007545  00                 	db	0
   302  007546  00                 	db	0
   303  007547  00                 	db	0
   304  007548  00                 	db	0
   305  007549  00                 	db	0
   306  00754A  00                 	db	0
   307  00754B  00                 	db	0
   308  00754C  00                 	db	0
   309  00754D  00                 	db	0
   310  00754E  00                 	db	0
   311  00754F  00                 	db	0
   312  007550  00                 	db	0
   313  007551  00                 	db	0
   314  007552  00                 	db	0
   315  007553  00                 	db	0
   316  007554  00                 	db	0
   317  007555  00                 	db	0
   318  007556  00                 	db	0
   319  007557  00                 	db	0
   320  007558  00                 	db	0
   321  007559  00                 	db	0
   322  00755A  00                 	db	0
   323  00755B  00                 	db	0
   324  00755C  00                 	db	0
   325  00755D  00                 	db	0
   326  00755E  00                 	db	0
   327  00755F  00                 	db	0
   328  007560  00                 	db	0
   329  007561  00                 	db	0
   330  007562  00                 	db	0
   331  007563  00                 	db	0
   332  007564  00                 	db	0
   333  007565  00                 	db	0
   334  007566  00                 	db	0
   335  007567  00                 	db	0
   336  007568  00                 	db	0
   337  007569  00                 	db	0
   338  00756A  00                 	db	0
   339  00756B  00                 	db	0
   340  00756C  00                 	db	0
   341  00756D  00                 	db	0
   342  00756E  00                 	db	0
   343  00756F  00                 	db	0
   344  007570  00                 	db	0
   345  007571  00                 	db	0
   346  007572  00                 	db	0
   347  007573  00                 	db	0
   348  007574  00                 	db	0
   349  007575  00                 	db	0
   350  007576  00                 	db	0
   351  007577  00                 	db	0
   352  007578  00                 	db	0
   353  007579  00                 	db	0
   354  00757A  00                 	db	0
   355  00757B  00                 	db	0
   356  00757C  00                 	db	0
   357  00757D  00                 	db	0
   358  00757E  00                 	db	0
   359  00757F  00                 	db	0
   360  007580  00                 	db	0
   361  007581  00                 	db	0
   362  007582  00                 	db	0
   363  007583  00                 	db	0
   364  007584  00                 	db	0
   365  007585  00                 	db	0
   366  007586  00                 	db	0
   367  007587  00                 	db	0
   368  007588  00                 	db	0
   369  007589  00                 	db	0
   370  00758A  00                 	db	0
   371  00758B  00                 	db	0
   372  00758C  00                 	db	0
   373  00758D  00                 	db	0
   374  00758E  00                 	db	0
   375  00758F  00                 	db	0
   376  007590  00                 	db	0
   377  007591  00                 	db	0
   378  007592  00                 	db	0
   379  007593  00                 	db	0
   380  007594  00                 	db	0
   381  007595  00                 	db	0
   382  007596  00                 	db	0
   383  007597  00                 	db	0
   384  007598  00                 	db	0
   385  007599  00                 	db	0
   386  00759A  00                 	db	0
   387  00759B  00                 	db	0
   388  00759C  00                 	db	0
   389  00759D  00                 	db	0
   390  00759E  00                 	db	0
   391  00759F  00                 	db	0
   392  0075A0  00                 	db	0
   393  0075A1  00                 	db	0
   394  0075A2  00                 	db	0
   395  0075A3  00                 	db	0
   396  0075A4  00                 	db	0
   397  0075A5  00                 	db	0
   398  0075A6  00                 	db	0
   399  0075A7  00                 	db	0
   400  0075A8  00                 	db	0
   401  0075A9  00                 	db	0
   402  0075AA  00                 	db	0
   403  0075AB  00                 	db	0
   404  0075AC  00                 	db	0
   405  0075AD  00                 	db	0
   406  0075AE  00                 	db	0
   407  0075AF  00                 	db	0
   408  0075B0  00                 	db	0
   409  0075B1  00                 	db	0
   410  0075B2  00                 	db	0
   411  0075B3  00                 	db	0
   412  0075B4  00                 	db	0
   413  0075B5  00                 	db	0
   414  0075B6  00                 	db	0
   415  0075B7  00                 	db	0
   416  0075B8  00                 	db	0
   417  0075B9  00                 	db	0
   418  0075BA  00                 	db	0
   419  0075BB  00                 	db	0
   420  0075BC  00                 	db	0
   421  0075BD  00                 	db	0
   422  0075BE  00                 	db	0
   423  0075BF  00                 	db	0
   424  0075C0  00                 	db	0
   425  0075C1                     __end_of_finger_up_0:
   426                           	opt stack 0
   427  0075C1                     _finger_up_4:
   428                           	opt stack 0
   429  0075C1  02E1               	dw	737
   430  0075C3  02E7               	dw	743
   431  0075C5  02ED               	dw	749
   432  0075C7  02F3               	dw	755
   433  0075C9  02F9               	dw	761
   434  0075CB  02FF               	dw	767
   435  0075CD  0305               	dw	773
   436  0075CF  030B               	dw	779
   437  0075D1  0311               	dw	785
   438  0075D3  0317               	dw	791
   439  0075D5  031D               	dw	797
   440  0075D7  0323               	dw	803
   441  0075D9  0329               	dw	809
   442  0075DB  032F               	dw	815
   443  0075DD  0335               	dw	821
   444  0075DF  033B               	dw	827
   445  0075E1  0341               	dw	833
   446  0075E3  0347               	dw	839
   447  0075E5  034D               	dw	845
   448  0075E7  0353               	dw	851
   449  0075E9  0359               	dw	857
   450  0075EB  035F               	dw	863
   451  0075ED  0365               	dw	869
   452  0075EF  036B               	dw	875
   453  0075F1  0371               	dw	881
   454  0075F3  0377               	dw	887
   455  0075F5  037D               	dw	893
   456  0075F7  0383               	dw	899
   457  0075F9  0389               	dw	905
   458  0075FB  038F               	dw	911
   459  0075FD  0395               	dw	917
   460  0075FF  039B               	dw	923
   461  007601  03A1               	dw	929
   462  007603  03A7               	dw	935
   463  007605  03AD               	dw	941
   464  007607  03B3               	dw	947
   465  007609  03B9               	dw	953
   466  00760B  03BF               	dw	959
   467  00760D  03C6               	dw	966
   468  00760F  03CC               	dw	972
   469  007611  03D2               	dw	978
   470  007613  03D8               	dw	984
   471  007615  03DE               	dw	990
   472  007617  03E4               	dw	996
   473  007619  03EA               	dw	1002
   474  00761B  03F0               	dw	1008
   475  00761D  03F6               	dw	1014
   476  00761F  03FC               	dw	1020
   477  007621  0402               	dw	1026
   478  007623  0408               	dw	1032
   479  007625  040E               	dw	1038
   480  007627  0414               	dw	1044
   481  007629  041A               	dw	1050
   482  00762B  0420               	dw	1056
   483  00762D  0426               	dw	1062
   484  00762F  042C               	dw	1068
   485  007631  0432               	dw	1074
   486  007633  0438               	dw	1080
   487  007635  043E               	dw	1086
   488  007637  0444               	dw	1092
   489  007639  044A               	dw	1098
   490  00763B  0450               	dw	1104
   491  00763D  0456               	dw	1110
   492  00763F  045C               	dw	1116
   493  007641  0462               	dw	1122
   494  007643  0468               	dw	1128
   495  007645  046E               	dw	1134
   496  007647  0474               	dw	1140
   497  007649  047A               	dw	1146
   498  00764B  0480               	dw	1152
   499  00764D  0486               	dw	1158
   500  00764F  048C               	dw	1164
   501  007651  0492               	dw	1170
   502  007653  0498               	dw	1176
   503  007655  049E               	dw	1182
   504  007657  04A5               	dw	1189
   505  007659  04AB               	dw	1195
   506  00765B  04B1               	dw	1201
   507  00765D  04B7               	dw	1207
   508  00765F  04BD               	dw	1213
   509  007661  04C3               	dw	1219
   510  007663  04C9               	dw	1225
   511  007665  04CF               	dw	1231
   512  007667  04D5               	dw	1237
   513  007669  04DB               	dw	1243
   514  00766B  04E1               	dw	1249
   515  00766D  04E7               	dw	1255
   516  00766F  04ED               	dw	1261
   517  007671  04F3               	dw	1267
   518  007673  04F9               	dw	1273
   519  007675  04FF               	dw	1279
   520  007677  0505               	dw	1285
   521  007679  050B               	dw	1291
   522  00767B  0511               	dw	1297
   523  00767D  0517               	dw	1303
   524  00767F  051D               	dw	1309
   525  007681  0523               	dw	1315
   526  007683  0529               	dw	1321
   527  007685  052F               	dw	1327
   528  007687  0535               	dw	1333
   529  007689  053B               	dw	1339
   530  00768B  0541               	dw	1345
   531  00768D  0547               	dw	1351
   532  00768F  054D               	dw	1357
   533  007691  0553               	dw	1363
   534  007693  0559               	dw	1369
   535  007695  055F               	dw	1375
   536  007697  0565               	dw	1381
   537  007699  056B               	dw	1387
   538  00769B  0571               	dw	1393
   539  00769D  0577               	dw	1399
   540  00769F  057D               	dw	1405
   541  0076A1  0583               	dw	1411
   542  0076A3  058A               	dw	1418
   543  0076A5  0590               	dw	1424
   544  0076A7  0596               	dw	1430
   545  0076A9  059C               	dw	1436
   546  0076AB  05A2               	dw	1442
   547  0076AD  05A8               	dw	1448
   548  0076AF  05AE               	dw	1454
   549  0076B1  05B4               	dw	1460
   550  0076B3  05BA               	dw	1466
   551  0076B5  05C0               	dw	1472
   552  0076B7  05C6               	dw	1478
   553  0076B9  05CC               	dw	1484
   554  0076BB  05D2               	dw	1490
   555  0076BD  05D8               	dw	1496
   556  0076BF  05DE               	dw	1502
   557  0076C1  05E4               	dw	1508
   558  0076C3  05EA               	dw	1514
   559  0076C5  05F0               	dw	1520
   560  0076C7  05F6               	dw	1526
   561  0076C9  05FC               	dw	1532
   562  0076CB  0602               	dw	1538
   563  0076CD  0608               	dw	1544
   564  0076CF  060E               	dw	1550
   565  0076D1  0614               	dw	1556
   566  0076D3  061A               	dw	1562
   567  0076D5  0620               	dw	1568
   568  0076D7  0626               	dw	1574
   569  0076D9  062C               	dw	1580
   570  0076DB  0632               	dw	1586
   571  0076DD  0638               	dw	1592
   572  0076DF  063E               	dw	1598
   573  0076E1  0644               	dw	1604
   574  0076E3  064A               	dw	1610
   575  0076E5  0650               	dw	1616
   576  0076E7  0656               	dw	1622
   577  0076E9  065C               	dw	1628
   578  0076EB  0662               	dw	1634
   579  0076ED  0669               	dw	1641
   580  0076EF                     __end_of_finger_up_4:
   581                           	opt stack 0
   582  0076EF                     _finger_up_3:
   583                           	opt stack 0
   584  0076EF  02E1               	dw	737
   585  0076F1  02E8               	dw	744
   586  0076F3  02EF               	dw	751
   587  0076F5  02F7               	dw	759
   588  0076F7  02FE               	dw	766
   589  0076F9  0305               	dw	773
   590  0076FB  030D               	dw	781
   591  0076FD  0314               	dw	788
   592  0076FF  031C               	dw	796
   593  007701  0323               	dw	803
   594  007703  032A               	dw	810
   595  007705  0332               	dw	818
   596  007707  0339               	dw	825
   597  007709  0340               	dw	832
   598  00770B  0348               	dw	840
   599  00770D  034F               	dw	847
   600  00770F  0357               	dw	855
   601  007711  035E               	dw	862
   602  007713  0365               	dw	869
   603  007715  036D               	dw	877
   604  007717  0374               	dw	884
   605  007719  037B               	dw	891
   606  00771B  0383               	dw	899
   607  00771D  038A               	dw	906
   608  00771F  0392               	dw	914
   609  007721  0399               	dw	921
   610  007723  03A0               	dw	928
   611  007725  03A8               	dw	936
   612  007727  03AF               	dw	943
   613  007729  03B7               	dw	951
   614  00772B  03BE               	dw	958
   615  00772D  03C5               	dw	965
   616  00772F  03CD               	dw	973
   617  007731  03D4               	dw	980
   618  007733  03DB               	dw	987
   619  007735  03E3               	dw	995
   620  007737  03EA               	dw	1002
   621  007739  03F2               	dw	1010
   622  00773B  03F9               	dw	1017
   623  00773D  0400               	dw	1024
   624  00773F  0408               	dw	1032
   625  007741  040F               	dw	1039
   626  007743  0416               	dw	1046
   627  007745  041E               	dw	1054
   628  007747  0425               	dw	1061
   629  007749  042D               	dw	1069
   630  00774B  0434               	dw	1076
   631  00774D  043B               	dw	1083
   632  00774F  0443               	dw	1091
   633  007751  044A               	dw	1098
   634  007753  0451               	dw	1105
   635  007755  0459               	dw	1113
   636  007757  0460               	dw	1120
   637  007759  0468               	dw	1128
   638  00775B  046F               	dw	1135
   639  00775D  0476               	dw	1142
   640  00775F  047E               	dw	1150
   641  007761  0485               	dw	1157
   642  007763  048D               	dw	1165
   643  007765  0494               	dw	1172
   644  007767  049B               	dw	1179
   645  007769  04A3               	dw	1187
   646  00776B  04AA               	dw	1194
   647  00776D  04B1               	dw	1201
   648  00776F  04B9               	dw	1209
   649  007771  04C0               	dw	1216
   650  007773  04C8               	dw	1224
   651  007775  04CF               	dw	1231
   652  007777  04D6               	dw	1238
   653  007779  04DE               	dw	1246
   654  00777B  04E5               	dw	1253
   655  00777D  04EC               	dw	1260
   656  00777F  04F4               	dw	1268
   657  007781  04FB               	dw	1275
   658  007783  0503               	dw	1283
   659  007785  050A               	dw	1290
   660  007787  0511               	dw	1297
   661  007789  0519               	dw	1305
   662  00778B  0520               	dw	1312
   663  00778D  0527               	dw	1319
   664  00778F  052F               	dw	1327
   665  007791  0536               	dw	1334
   666  007793  053E               	dw	1342
   667  007795  0545               	dw	1349
   668  007797  054C               	dw	1356
   669  007799  0554               	dw	1364
   670  00779B  055B               	dw	1371
   671  00779D  0563               	dw	1379
   672  00779F  056A               	dw	1386
   673  0077A1  0571               	dw	1393
   674  0077A3  0579               	dw	1401
   675  0077A5  0580               	dw	1408
   676  0077A7  0587               	dw	1415
   677  0077A9  058F               	dw	1423
   678  0077AB  0596               	dw	1430
   679  0077AD  059E               	dw	1438
   680  0077AF  05A5               	dw	1445
   681  0077B1  05AC               	dw	1452
   682  0077B3  05B4               	dw	1460
   683  0077B5  05BB               	dw	1467
   684  0077B7  05C2               	dw	1474
   685  0077B9  05CA               	dw	1482
   686  0077BB  05D1               	dw	1489
   687  0077BD  05D9               	dw	1497
   688  0077BF  05E0               	dw	1504
   689  0077C1  05E7               	dw	1511
   690  0077C3  05EF               	dw	1519
   691  0077C5  05F6               	dw	1526
   692  0077C7  05FD               	dw	1533
   693  0077C9  0605               	dw	1541
   694  0077CB  060C               	dw	1548
   695  0077CD  0614               	dw	1556
   696  0077CF  061B               	dw	1563
   697  0077D1  0622               	dw	1570
   698  0077D3  062A               	dw	1578
   699  0077D5  0631               	dw	1585
   700  0077D7  0639               	dw	1593
   701  0077D9  0640               	dw	1600
   702  0077DB  0647               	dw	1607
   703  0077DD  064F               	dw	1615
   704  0077DF  0656               	dw	1622
   705  0077E1  065D               	dw	1629
   706  0077E3  0665               	dw	1637
   707  0077E5  066C               	dw	1644
   708  0077E7  0674               	dw	1652
   709  0077E9  067B               	dw	1659
   710  0077EB  0682               	dw	1666
   711  0077ED  068A               	dw	1674
   712  0077EF  0691               	dw	1681
   713  0077F1  0698               	dw	1688
   714  0077F3  06A0               	dw	1696
   715  0077F5  06A7               	dw	1703
   716  0077F7  06AF               	dw	1711
   717  0077F9  06B6               	dw	1718
   718  0077FB  06BD               	dw	1725
   719  0077FD  06C5               	dw	1733
   720  0077FF  06CC               	dw	1740
   721  007801  06D3               	dw	1747
   722  007803  06DB               	dw	1755
   723  007805  06E2               	dw	1762
   724  007807  06EA               	dw	1770
   725  007809  06F1               	dw	1777
   726  00780B  06F8               	dw	1784
   727  00780D  0700               	dw	1792
   728  00780F  0707               	dw	1799
   729  007811  070F               	dw	1807
   730  007813                     __end_of_finger_up_3:
   731                           	opt stack 0
   732  007813                     _finger_up_2:
   733                           	opt stack 0
   734  007813  02E1               	dw	737
   735  007815  02EB               	dw	747
   736  007817  02F6               	dw	758
   737  007819  0301               	dw	769
   738  00781B  030B               	dw	779
   739  00781D  0316               	dw	790
   740  00781F  0321               	dw	801
   741  007821  032B               	dw	811
   742  007823  0336               	dw	822
   743  007825  0341               	dw	833
   744  007827  034C               	dw	844
   745  007829  0356               	dw	854
   746  00782B  0361               	dw	865
   747  00782D  036C               	dw	876
   748  00782F  0376               	dw	886
   749  007831  0381               	dw	897
   750  007833  038C               	dw	908
   751  007835  0397               	dw	919
   752  007837  03A1               	dw	929
   753  007839  03AC               	dw	940
   754  00783B  03B7               	dw	951
   755  00783D  03C1               	dw	961
   756  00783F  03CC               	dw	972
   757  007841  03D7               	dw	983
   758  007843  03E2               	dw	994
   759  007845  03EC               	dw	1004
   760  007847  03F7               	dw	1015
   761  007849  0402               	dw	1026
   762  00784B  040C               	dw	1036
   763  00784D  0417               	dw	1047
   764  00784F  0422               	dw	1058
   765  007851  042D               	dw	1069
   766  007853  0437               	dw	1079
   767  007855  0442               	dw	1090
   768  007857  044D               	dw	1101
   769  007859  0457               	dw	1111
   770  00785B  0462               	dw	1122
   771  00785D  046D               	dw	1133
   772  00785F  0478               	dw	1144
   773  007861  0482               	dw	1154
   774  007863  048D               	dw	1165
   775  007865  0498               	dw	1176
   776  007867  04A2               	dw	1186
   777  007869  04AD               	dw	1197
   778  00786B  04B8               	dw	1208
   779  00786D  04C2               	dw	1218
   780  00786F  04CD               	dw	1229
   781  007871  04D8               	dw	1240
   782  007873  04E3               	dw	1251
   783  007875  04ED               	dw	1261
   784  007877  04F8               	dw	1272
   785  007879  0503               	dw	1283
   786  00787B  050D               	dw	1293
   787  00787D  0518               	dw	1304
   788  00787F  0523               	dw	1315
   789  007881  052E               	dw	1326
   790  007883  0538               	dw	1336
   791  007885  0543               	dw	1347
   792  007887  054E               	dw	1358
   793  007889  0558               	dw	1368
   794  00788B  0563               	dw	1379
   795  00788D  056E               	dw	1390
   796  00788F  0579               	dw	1401
   797  007891  0583               	dw	1411
   798  007893  058E               	dw	1422
   799  007895  0599               	dw	1433
   800  007897  05A3               	dw	1443
   801  007899  05AE               	dw	1454
   802  00789B  05B9               	dw	1465
   803  00789D  05C4               	dw	1476
   804  00789F  05CE               	dw	1486
   805  0078A1  05D9               	dw	1497
   806  0078A3  05E4               	dw	1508
   807  0078A5  05EE               	dw	1518
   808  0078A7  05F9               	dw	1529
   809  0078A9  0604               	dw	1540
   810  0078AB  060F               	dw	1551
   811  0078AD  0619               	dw	1561
   812  0078AF  0624               	dw	1572
   813  0078B1  062F               	dw	1583
   814  0078B3  0639               	dw	1593
   815  0078B5  0644               	dw	1604
   816  0078B7  064F               	dw	1615
   817  0078B9  065A               	dw	1626
   818  0078BB  0664               	dw	1636
   819  0078BD  066F               	dw	1647
   820  0078BF  067A               	dw	1658
   821  0078C1  0684               	dw	1668
   822  0078C3  068F               	dw	1679
   823  0078C5  069A               	dw	1690
   824  0078C7  06A4               	dw	1700
   825  0078C9  06AF               	dw	1711
   826  0078CB  06BA               	dw	1722
   827  0078CD  06C5               	dw	1733
   828  0078CF  06CF               	dw	1743
   829  0078D1  06DA               	dw	1754
   830  0078D3  06E5               	dw	1765
   831  0078D5  06EF               	dw	1775
   832  0078D7  06FA               	dw	1786
   833  0078D9  0705               	dw	1797
   834  0078DB  0710               	dw	1808
   835  0078DD  071A               	dw	1818
   836  0078DF  0725               	dw	1829
   837  0078E1  0730               	dw	1840
   838  0078E3  073A               	dw	1850
   839  0078E5  0745               	dw	1861
   840  0078E7  0750               	dw	1872
   841  0078E9  075B               	dw	1883
   842  0078EB  0765               	dw	1893
   843  0078ED  0770               	dw	1904
   844  0078EF  077B               	dw	1915
   845  0078F1  0785               	dw	1925
   846  0078F3  0790               	dw	1936
   847  0078F5  079B               	dw	1947
   848  0078F7  07A6               	dw	1958
   849  0078F9  07B0               	dw	1968
   850  0078FB  07BB               	dw	1979
   851  0078FD  07C6               	dw	1990
   852  0078FF  07D0               	dw	2000
   853  007901  07DB               	dw	2011
   854  007903  07E6               	dw	2022
   855  007905  07F1               	dw	2033
   856  007907  07FB               	dw	2043
   857  007909  0806               	dw	2054
   858  00790B  0811               	dw	2065
   859  00790D  081B               	dw	2075
   860  00790F  0826               	dw	2086
   861  007911  0831               	dw	2097
   862  007913  083C               	dw	2108
   863  007915                     __end_of_finger_up_2:
   864                           	opt stack 0
   865  007915                     _finger_under_4:
   866                           	opt stack 0
   867  007915  0000               	dw	0
   868  007917  0007               	dw	7
   869  007919  000F               	dw	15
   870  00791B  0017               	dw	23
   871  00791D  001F               	dw	31
   872  00791F  0027               	dw	39
   873  007921  002F               	dw	47
   874  007923  0036               	dw	54
   875  007925  003E               	dw	62
   876  007927  0046               	dw	70
   877  007929  004E               	dw	78
   878  00792B  0056               	dw	86
   879  00792D  005E               	dw	94
   880  00792F  0066               	dw	102
   881  007931  006D               	dw	109
   882  007933  0075               	dw	117
   883  007935  007D               	dw	125
   884  007937  0085               	dw	133
   885  007939  008D               	dw	141
   886  00793B  0095               	dw	149
   887  00793D  009C               	dw	156
   888  00793F  00A4               	dw	164
   889  007941  00AC               	dw	172
   890  007943  00B4               	dw	180
   891  007945  00BC               	dw	188
   892  007947  00C4               	dw	196
   893  007949  00CC               	dw	204
   894  00794B  00D3               	dw	211
   895  00794D  00DB               	dw	219
   896  00794F  00E3               	dw	227
   897  007951  00EB               	dw	235
   898  007953  00F3               	dw	243
   899  007955  00FB               	dw	251
   900  007957  0103               	dw	259
   901  007959  010A               	dw	266
   902  00795B  0112               	dw	274
   903  00795D  011A               	dw	282
   904  00795F  0122               	dw	290
   905  007961  012A               	dw	298
   906  007963  0132               	dw	306
   907  007965  0139               	dw	313
   908  007967  0141               	dw	321
   909  007969  0149               	dw	329
   910  00796B  0151               	dw	337
   911  00796D  0159               	dw	345
   912  00796F  0161               	dw	353
   913  007971  0169               	dw	361
   914  007973  0170               	dw	368
   915  007975  0178               	dw	376
   916  007977  0180               	dw	384
   917  007979  0188               	dw	392
   918  00797B  0190               	dw	400
   919  00797D  0198               	dw	408
   920  00797F  019F               	dw	415
   921  007981  01A7               	dw	423
   922  007983  01AF               	dw	431
   923  007985  01B7               	dw	439
   924  007987  01BF               	dw	447
   925  007989  01C7               	dw	455
   926  00798B  01CF               	dw	463
   927  00798D  01D6               	dw	470
   928  00798F  01DE               	dw	478
   929  007991  01E6               	dw	486
   930  007993  01EE               	dw	494
   931  007995  01F6               	dw	502
   932  007997  01FE               	dw	510
   933  007999  0206               	dw	518
   934  00799B  020D               	dw	525
   935  00799D  0215               	dw	533
   936  00799F  021D               	dw	541
   937  0079A1  0225               	dw	549
   938  0079A3  022D               	dw	557
   939  0079A5  0235               	dw	565
   940  0079A7  023C               	dw	572
   941  0079A9  0244               	dw	580
   942  0079AB  024C               	dw	588
   943  0079AD  0254               	dw	596
   944  0079AF  025C               	dw	604
   945  0079B1  0264               	dw	612
   946  0079B3  026C               	dw	620
   947  0079B5  0273               	dw	627
   948  0079B7  027B               	dw	635
   949  0079B9  0283               	dw	643
   950  0079BB  028B               	dw	651
   951  0079BD  0293               	dw	659
   952  0079BF  029B               	dw	667
   953  0079C1  02A2               	dw	674
   954  0079C3  02AA               	dw	682
   955  0079C5  02B2               	dw	690
   956  0079C7  02BA               	dw	698
   957  0079C9  02C2               	dw	706
   958  0079CB  02CA               	dw	714
   959  0079CD  02D2               	dw	722
   960  0079CF  02D9               	dw	729
   961  0079D1  02E1               	dw	737
   962  0079D3  02E9               	dw	745
   963  0079D5  02F1               	dw	753
   964  0079D7  02F9               	dw	761
   965  0079D9  0301               	dw	769
   966  0079DB  0309               	dw	777
   967  0079DD  0310               	dw	784
   968  0079DF  0318               	dw	792
   969  0079E1  0320               	dw	800
   970  0079E3  0328               	dw	808
   971  0079E5  0330               	dw	816
   972  0079E7  0338               	dw	824
   973  0079E9  033F               	dw	831
   974  0079EB  0347               	dw	839
   975  0079ED  034F               	dw	847
   976  0079EF  0357               	dw	855
   977  0079F1  035F               	dw	863
   978  0079F3  0367               	dw	871
   979  0079F5  036F               	dw	879
   980  0079F7  0376               	dw	886
   981  0079F9  037E               	dw	894
   982  0079FB  0386               	dw	902
   983  0079FD  038E               	dw	910
   984  0079FF  0396               	dw	918
   985  007A01  039E               	dw	926
   986  007A03  03A6               	dw	934
   987  007A05                     __end_of_finger_under_4:
   988                           	opt stack 0
   989  007A05                     _finger_up_1:
   990                           	opt stack 0
   991  007A05  02E1               	dw	737
   992  007A07  02E9               	dw	745
   993  007A09  02F2               	dw	754
   994  007A0B  02FA               	dw	762
   995  007A0D  0303               	dw	771
   996  007A0F  030C               	dw	780
   997  007A11  0314               	dw	788
   998  007A13  031D               	dw	797
   999  007A15  0325               	dw	805
  1000  007A17  032E               	dw	814
  1001  007A19  0337               	dw	823
  1002  007A1B  033F               	dw	831
  1003  007A1D  0348               	dw	840
  1004  007A1F  0351               	dw	849
  1005  007A21  0359               	dw	857
  1006  007A23  0362               	dw	866
  1007  007A25  036A               	dw	874
  1008  007A27  0373               	dw	883
  1009  007A29  037C               	dw	892
  1010  007A2B  0384               	dw	900
  1011  007A2D  038D               	dw	909
  1012  007A2F  0396               	dw	918
  1013  007A31  039E               	dw	926
  1014  007A33  03A7               	dw	935
  1015  007A35  03AF               	dw	943
  1016  007A37  03B8               	dw	952
  1017  007A39  03C1               	dw	961
  1018  007A3B  03C9               	dw	969
  1019  007A3D  03D2               	dw	978
  1020  007A3F  03DB               	dw	987
  1021  007A41  03E3               	dw	995
  1022  007A43  03EC               	dw	1004
  1023  007A45  03F4               	dw	1012
  1024  007A47  03FD               	dw	1021
  1025  007A49  0406               	dw	1030
  1026  007A4B  040E               	dw	1038
  1027  007A4D  0417               	dw	1047
  1028  007A4F  0420               	dw	1056
  1029  007A51  0428               	dw	1064
  1030  007A53  0431               	dw	1073
  1031  007A55  0439               	dw	1081
  1032  007A57  0442               	dw	1090
  1033  007A59  044B               	dw	1099
  1034  007A5B  0453               	dw	1107
  1035  007A5D  045C               	dw	1116
  1036  007A5F  0465               	dw	1125
  1037  007A61  046D               	dw	1133
  1038  007A63  0476               	dw	1142
  1039  007A65  047E               	dw	1150
  1040  007A67  0487               	dw	1159
  1041  007A69  0490               	dw	1168
  1042  007A6B  0498               	dw	1176
  1043  007A6D  04A1               	dw	1185
  1044  007A6F  04AA               	dw	1194
  1045  007A71  04B2               	dw	1202
  1046  007A73  04BB               	dw	1211
  1047  007A75  04C3               	dw	1219
  1048  007A77  04CC               	dw	1228
  1049  007A79  04D5               	dw	1237
  1050  007A7B  04DD               	dw	1245
  1051  007A7D  04E6               	dw	1254
  1052  007A7F  04EF               	dw	1263
  1053  007A81  04F7               	dw	1271
  1054  007A83  0500               	dw	1280
  1055  007A85  0508               	dw	1288
  1056  007A87  0511               	dw	1297
  1057  007A89  051A               	dw	1306
  1058  007A8B  0522               	dw	1314
  1059  007A8D  052B               	dw	1323
  1060  007A8F  0534               	dw	1332
  1061  007A91  053C               	dw	1340
  1062  007A93  0545               	dw	1349
  1063  007A95  054D               	dw	1357
  1064  007A97  0556               	dw	1366
  1065  007A99  055F               	dw	1375
  1066  007A9B  0567               	dw	1383
  1067  007A9D  0570               	dw	1392
  1068  007A9F  0579               	dw	1401
  1069  007AA1  0581               	dw	1409
  1070  007AA3  058A               	dw	1418
  1071  007AA5  0592               	dw	1426
  1072  007AA7  059B               	dw	1435
  1073  007AA9  05A4               	dw	1444
  1074  007AAB  05AC               	dw	1452
  1075  007AAD  05B5               	dw	1461
  1076  007AAF  05BE               	dw	1470
  1077  007AB1  05C6               	dw	1478
  1078  007AB3  05CF               	dw	1487
  1079  007AB5  05D7               	dw	1495
  1080  007AB7  05E0               	dw	1504
  1081  007AB9  05E9               	dw	1513
  1082  007ABB  05F1               	dw	1521
  1083  007ABD  05FA               	dw	1530
  1084  007ABF  0603               	dw	1539
  1085  007AC1  060B               	dw	1547
  1086  007AC3  0614               	dw	1556
  1087  007AC5  061C               	dw	1564
  1088  007AC7  0625               	dw	1573
  1089  007AC9  062E               	dw	1582
  1090  007ACB  0636               	dw	1590
  1091  007ACD  063F               	dw	1599
  1092  007ACF  0648               	dw	1608
  1093  007AD1  0650               	dw	1616
  1094  007AD3  0659               	dw	1625
  1095  007AD5  0661               	dw	1633
  1096  007AD7  066A               	dw	1642
  1097  007AD9  0673               	dw	1651
  1098  007ADB  067B               	dw	1659
  1099  007ADD  0684               	dw	1668
  1100  007ADF  068D               	dw	1677
  1101  007AE1  0695               	dw	1685
  1102  007AE3  069E               	dw	1694
  1103  007AE5  06A6               	dw	1702
  1104  007AE7  06AF               	dw	1711
  1105  007AE9  06B8               	dw	1720
  1106  007AEB  06C0               	dw	1728
  1107  007AED  06C9               	dw	1737
  1108  007AEF  06D2               	dw	1746
  1109  007AF1                     __end_of_finger_up_1:
  1110                           	opt stack 0
  1111  007AF1                     _finger_under_2:
  1112                           	opt stack 0
  1113  007AF1  0000               	dw	0
  1114  007AF3  0002               	dw	2
  1115  007AF5  0005               	dw	5
  1116  007AF7  0007               	dw	7
  1117  007AF9  000A               	dw	10
  1118  007AFB  000C               	dw	12
  1119  007AFD  000F               	dw	15
  1120  007AFF  0011               	dw	17
  1121  007B01  0014               	dw	20
  1122  007B03  0016               	dw	22
  1123  007B05  0019               	dw	25
  1124  007B07  001C               	dw	28
  1125  007B09  001E               	dw	30
  1126  007B0B  0021               	dw	33
  1127  007B0D  0023               	dw	35
  1128  007B0F  0026               	dw	38
  1129  007B11  0028               	dw	40
  1130  007B13  002B               	dw	43
  1131  007B15  002D               	dw	45
  1132  007B17  0030               	dw	48
  1133  007B19  0033               	dw	51
  1134  007B1B  0035               	dw	53
  1135  007B1D  0038               	dw	56
  1136  007B1F  003A               	dw	58
  1137  007B21  003D               	dw	61
  1138  007B23  003F               	dw	63
  1139  007B25  0042               	dw	66
  1140  007B27  0044               	dw	68
  1141  007B29  0047               	dw	71
  1142  007B2B  004A               	dw	74
  1143  007B2D  004C               	dw	76
  1144  007B2F  004F               	dw	79
  1145  007B31  0051               	dw	81
  1146  007B33  0054               	dw	84
  1147  007B35  0056               	dw	86
  1148  007B37  0059               	dw	89
  1149  007B39  005B               	dw	91
  1150  007B3B  005E               	dw	94
  1151  007B3D  0061               	dw	97
  1152  007B3F  0063               	dw	99
  1153  007B41  0066               	dw	102
  1154  007B43  0068               	dw	104
  1155  007B45  006B               	dw	107
  1156  007B47  006D               	dw	109
  1157  007B49  0070               	dw	112
  1158  007B4B  0072               	dw	114
  1159  007B4D  0075               	dw	117
  1160  007B4F  0078               	dw	120
  1161  007B51  007A               	dw	122
  1162  007B53  007D               	dw	125
  1163  007B55  007F               	dw	127
  1164  007B57  0082               	dw	130
  1165  007B59  0084               	dw	132
  1166  007B5B  0087               	dw	135
  1167  007B5D  0089               	dw	137
  1168  007B5F  008C               	dw	140
  1169  007B61  008F               	dw	143
  1170  007B63  0091               	dw	145
  1171  007B65  0094               	dw	148
  1172  007B67  0096               	dw	150
  1173  007B69  0099               	dw	153
  1174  007B6B  009B               	dw	155
  1175  007B6D  009E               	dw	158
  1176  007B6F  00A0               	dw	160
  1177  007B71  00A3               	dw	163
  1178  007B73  00A5               	dw	165
  1179  007B75  00A8               	dw	168
  1180  007B77  00AB               	dw	171
  1181  007B79  00AD               	dw	173
  1182  007B7B  00B0               	dw	176
  1183  007B7D  00B2               	dw	178
  1184  007B7F  00B5               	dw	181
  1185  007B81  00B7               	dw	183
  1186  007B83  00BA               	dw	186
  1187  007B85  00BC               	dw	188
  1188  007B87  00BF               	dw	191
  1189  007B89  00C2               	dw	194
  1190  007B8B  00C4               	dw	196
  1191  007B8D  00C7               	dw	199
  1192  007B8F  00C9               	dw	201
  1193  007B91  00CC               	dw	204
  1194  007B93  00CE               	dw	206
  1195  007B95  00D1               	dw	209
  1196  007B97  00D3               	dw	211
  1197  007B99  00D6               	dw	214
  1198  007B9B  00D9               	dw	217
  1199  007B9D  00DB               	dw	219
  1200  007B9F  00DE               	dw	222
  1201  007BA1  00E0               	dw	224
  1202  007BA3  00E3               	dw	227
  1203  007BA5  00E5               	dw	229
  1204  007BA7  00E8               	dw	232
  1205  007BA9  00EA               	dw	234
  1206  007BAB  00ED               	dw	237
  1207  007BAD  00F0               	dw	240
  1208  007BAF  00F2               	dw	242
  1209  007BB1  00F5               	dw	245
  1210  007BB3  00F7               	dw	247
  1211  007BB5  00FA               	dw	250
  1212  007BB7  00FC               	dw	252
  1213  007BB9  00FF               	dw	255
  1214  007BBB  0101               	dw	257
  1215  007BBD  0104               	dw	260
  1216  007BBF  0107               	dw	263
  1217  007BC1  0109               	dw	265
  1218  007BC3  010C               	dw	268
  1219  007BC5  010E               	dw	270
  1220  007BC7  0111               	dw	273
  1221  007BC9  0113               	dw	275
  1222  007BCB  0116               	dw	278
  1223  007BCD  0118               	dw	280
  1224  007BCF  011B               	dw	283
  1225  007BD1  011E               	dw	286
  1226  007BD3                     __end_of_finger_under_2:
  1227                           	opt stack 0
  1228  007BD3                     _finger_under_0:
  1229                           	opt stack 0
  1230  007BD3  0000               	dw	0
  1231  007BD5  00                 	db	0
  1232  007BD6  00                 	db	0
  1233  007BD7  00                 	db	0
  1234  007BD8  00                 	db	0
  1235  007BD9  00                 	db	0
  1236  007BDA  00                 	db	0
  1237  007BDB  00                 	db	0
  1238  007BDC  00                 	db	0
  1239  007BDD  00                 	db	0
  1240  007BDE  00                 	db	0
  1241  007BDF  00                 	db	0
  1242  007BE0  00                 	db	0
  1243  007BE1  00                 	db	0
  1244  007BE2  00                 	db	0
  1245  007BE3  00                 	db	0
  1246  007BE4  00                 	db	0
  1247  007BE5  00                 	db	0
  1248  007BE6  00                 	db	0
  1249  007BE7  00                 	db	0
  1250  007BE8  00                 	db	0
  1251  007BE9  00                 	db	0
  1252  007BEA  00                 	db	0
  1253  007BEB  00                 	db	0
  1254  007BEC  00                 	db	0
  1255  007BED  00                 	db	0
  1256  007BEE  00                 	db	0
  1257  007BEF  00                 	db	0
  1258  007BF0  00                 	db	0
  1259  007BF1  00                 	db	0
  1260  007BF2  00                 	db	0
  1261  007BF3  00                 	db	0
  1262  007BF4  00                 	db	0
  1263  007BF5  00                 	db	0
  1264  007BF6  00                 	db	0
  1265  007BF7  00                 	db	0
  1266  007BF8  00                 	db	0
  1267  007BF9  00                 	db	0
  1268  007BFA  00                 	db	0
  1269  007BFB  00                 	db	0
  1270  007BFC  00                 	db	0
  1271  007BFD  00                 	db	0
  1272  007BFE  00                 	db	0
  1273  007BFF  00                 	db	0
  1274  007C00  00                 	db	0
  1275  007C01  00                 	db	0
  1276  007C02  00                 	db	0
  1277  007C03  00                 	db	0
  1278  007C04  00                 	db	0
  1279  007C05  00                 	db	0
  1280  007C06  00                 	db	0
  1281  007C07  00                 	db	0
  1282  007C08  00                 	db	0
  1283  007C09  00                 	db	0
  1284  007C0A  00                 	db	0
  1285  007C0B  00                 	db	0
  1286  007C0C  00                 	db	0
  1287  007C0D  00                 	db	0
  1288  007C0E  00                 	db	0
  1289  007C0F  00                 	db	0
  1290  007C10  00                 	db	0
  1291  007C11  00                 	db	0
  1292  007C12  00                 	db	0
  1293  007C13  00                 	db	0
  1294  007C14  00                 	db	0
  1295  007C15  00                 	db	0
  1296  007C16  00                 	db	0
  1297  007C17  00                 	db	0
  1298  007C18  00                 	db	0
  1299  007C19  00                 	db	0
  1300  007C1A  00                 	db	0
  1301  007C1B  00                 	db	0
  1302  007C1C  00                 	db	0
  1303  007C1D  00                 	db	0
  1304  007C1E  00                 	db	0
  1305  007C1F  00                 	db	0
  1306  007C20  00                 	db	0
  1307  007C21  00                 	db	0
  1308  007C22  00                 	db	0
  1309  007C23  00                 	db	0
  1310  007C24  00                 	db	0
  1311  007C25  00                 	db	0
  1312  007C26  00                 	db	0
  1313  007C27  00                 	db	0
  1314  007C28  00                 	db	0
  1315  007C29  00                 	db	0
  1316  007C2A  00                 	db	0
  1317  007C2B  00                 	db	0
  1318  007C2C  00                 	db	0
  1319  007C2D  00                 	db	0
  1320  007C2E  00                 	db	0
  1321  007C2F  00                 	db	0
  1322  007C30  00                 	db	0
  1323  007C31  00                 	db	0
  1324  007C32  00                 	db	0
  1325  007C33  00                 	db	0
  1326  007C34  00                 	db	0
  1327  007C35  00                 	db	0
  1328  007C36  00                 	db	0
  1329  007C37  00                 	db	0
  1330  007C38  00                 	db	0
  1331  007C39  00                 	db	0
  1332  007C3A  00                 	db	0
  1333  007C3B  00                 	db	0
  1334  007C3C  00                 	db	0
  1335  007C3D  00                 	db	0
  1336  007C3E  00                 	db	0
  1337  007C3F  00                 	db	0
  1338  007C40  00                 	db	0
  1339  007C41  00                 	db	0
  1340  007C42  00                 	db	0
  1341  007C43  00                 	db	0
  1342  007C44  00                 	db	0
  1343  007C45  00                 	db	0
  1344  007C46  00                 	db	0
  1345  007C47  00                 	db	0
  1346  007C48  00                 	db	0
  1347  007C49  00                 	db	0
  1348  007C4A  00                 	db	0
  1349  007C4B  00                 	db	0
  1350  007C4C  00                 	db	0
  1351  007C4D  00                 	db	0
  1352  007C4E  00                 	db	0
  1353  007C4F  00                 	db	0
  1354  007C50  00                 	db	0
  1355  007C51  00                 	db	0
  1356  007C52  00                 	db	0
  1357  007C53  00                 	db	0
  1358  007C54  00                 	db	0
  1359  007C55  00                 	db	0
  1360  007C56  00                 	db	0
  1361  007C57  00                 	db	0
  1362  007C58  00                 	db	0
  1363  007C59  00                 	db	0
  1364  007C5A  00                 	db	0
  1365  007C5B  00                 	db	0
  1366  007C5C  00                 	db	0
  1367  007C5D  00                 	db	0
  1368  007C5E  00                 	db	0
  1369  007C5F  00                 	db	0
  1370  007C60  00                 	db	0
  1371  007C61  00                 	db	0
  1372  007C62  00                 	db	0
  1373  007C63  00                 	db	0
  1374  007C64  00                 	db	0
  1375  007C65  00                 	db	0
  1376  007C66  00                 	db	0
  1377  007C67  00                 	db	0
  1378  007C68  00                 	db	0
  1379  007C69  00                 	db	0
  1380  007C6A  00                 	db	0
  1381  007C6B  00                 	db	0
  1382  007C6C  00                 	db	0
  1383  007C6D  00                 	db	0
  1384  007C6E  00                 	db	0
  1385  007C6F  00                 	db	0
  1386  007C70  00                 	db	0
  1387  007C71  00                 	db	0
  1388  007C72  00                 	db	0
  1389  007C73  00                 	db	0
  1390  007C74  00                 	db	0
  1391  007C75  00                 	db	0
  1392  007C76  00                 	db	0
  1393  007C77  00                 	db	0
  1394  007C78  00                 	db	0
  1395  007C79  00                 	db	0
  1396  007C7A  00                 	db	0
  1397  007C7B  00                 	db	0
  1398  007C7C  00                 	db	0
  1399  007C7D  00                 	db	0
  1400  007C7E  00                 	db	0
  1401  007C7F  00                 	db	0
  1402  007C80  00                 	db	0
  1403  007C81  00                 	db	0
  1404  007C82  00                 	db	0
  1405  007C83  00                 	db	0
  1406  007C84  00                 	db	0
  1407  007C85  00                 	db	0
  1408  007C86  00                 	db	0
  1409  007C87  00                 	db	0
  1410  007C88  00                 	db	0
  1411  007C89  00                 	db	0
  1412  007C8A  00                 	db	0
  1413  007C8B  00                 	db	0
  1414  007C8C  00                 	db	0
  1415  007C8D  00                 	db	0
  1416  007C8E  00                 	db	0
  1417  007C8F  00                 	db	0
  1418  007C90  00                 	db	0
  1419  007C91  00                 	db	0
  1420  007C92  00                 	db	0
  1421  007C93  00                 	db	0
  1422  007C94  00                 	db	0
  1423  007C95  00                 	db	0
  1424  007C96  00                 	db	0
  1425  007C97  00                 	db	0
  1426  007C98  00                 	db	0
  1427  007C99  00                 	db	0
  1428  007C9A  00                 	db	0
  1429  007C9B  00                 	db	0
  1430  007C9C  00                 	db	0
  1431  007C9D  00                 	db	0
  1432  007C9E  00                 	db	0
  1433  007C9F  00                 	db	0
  1434  007CA0  00                 	db	0
  1435  007CA1  00                 	db	0
  1436  007CA2  00                 	db	0
  1437  007CA3  00                 	db	0
  1438  007CA4  00                 	db	0
  1439  007CA5  00                 	db	0
  1440  007CA6  00                 	db	0
  1441  007CA7  00                 	db	0
  1442  007CA8  00                 	db	0
  1443  007CA9  00                 	db	0
  1444  007CAA  00                 	db	0
  1445  007CAB                     __end_of_finger_under_0:
  1446                           	opt stack 0
  1447  007CAB                     _finger_under_1:
  1448                           	opt stack 0
  1449  007CAB  0000               	dw	0
  1450  007CAD  0006               	dw	6
  1451  007CAF  000D               	dw	13
  1452  007CB1  0013               	dw	19
  1453  007CB3  001A               	dw	26
  1454  007CB5  0021               	dw	33
  1455  007CB7  0027               	dw	39
  1456  007CB9  002E               	dw	46
  1457  007CBB  0035               	dw	53
  1458  007CBD  003B               	dw	59
  1459  007CBF  0042               	dw	66
  1460  007CC1  0049               	dw	73
  1461  007CC3  004F               	dw	79
  1462  007CC5  0056               	dw	86
  1463  007CC7  005D               	dw	93
  1464  007CC9  0063               	dw	99
  1465  007CCB  006A               	dw	106
  1466  007CCD  0071               	dw	113
  1467  007CCF  0077               	dw	119
  1468  007CD1  007E               	dw	126
  1469  007CD3  0085               	dw	133
  1470  007CD5  008B               	dw	139
  1471  007CD7  0092               	dw	146
  1472  007CD9  0099               	dw	153
  1473  007CDB  009F               	dw	159
  1474  007CDD  00A6               	dw	166
  1475  007CDF  00AD               	dw	173
  1476  007CE1  00B3               	dw	179
  1477  007CE3  00BA               	dw	186
  1478  007CE5  00C1               	dw	193
  1479  007CE7  00C7               	dw	199
  1480  007CE9  00CE               	dw	206
  1481  007CEB  00D5               	dw	213
  1482  007CED  00DB               	dw	219
  1483  007CEF  00E2               	dw	226
  1484  007CF1  00E9               	dw	233
  1485  007CF3  00EF               	dw	239
  1486  007CF5  00F6               	dw	246
  1487  007CF7  00FD               	dw	253
  1488  007CF9  0103               	dw	259
  1489  007CFB  010A               	dw	266
  1490  007CFD  0111               	dw	273
  1491  007CFF  0117               	dw	279
  1492  007D01  011E               	dw	286
  1493  007D03  0125               	dw	293
  1494  007D05  012B               	dw	299
  1495  007D07  0132               	dw	306
  1496  007D09  0139               	dw	313
  1497  007D0B  013F               	dw	319
  1498  007D0D  0146               	dw	326
  1499  007D0F  014D               	dw	333
  1500  007D11  0153               	dw	339
  1501  007D13  015A               	dw	346
  1502  007D15  0161               	dw	353
  1503  007D17  0167               	dw	359
  1504  007D19  016E               	dw	366
  1505  007D1B  0175               	dw	373
  1506  007D1D  017B               	dw	379
  1507  007D1F  0182               	dw	386
  1508  007D21  0189               	dw	393
  1509  007D23  018F               	dw	399
  1510  007D25  0196               	dw	406
  1511  007D27  019D               	dw	413
  1512  007D29  01A3               	dw	419
  1513  007D2B  01AA               	dw	426
  1514  007D2D  01B1               	dw	433
  1515  007D2F  01B7               	dw	439
  1516  007D31  01BE               	dw	446
  1517  007D33  01C5               	dw	453
  1518  007D35  01CB               	dw	459
  1519  007D37  01D2               	dw	466
  1520  007D39  01D9               	dw	473
  1521  007D3B  01DF               	dw	479
  1522  007D3D  01E6               	dw	486
  1523  007D3F  01ED               	dw	493
  1524  007D41  01F3               	dw	499
  1525  007D43  01FA               	dw	506
  1526  007D45  0201               	dw	513
  1527  007D47  0207               	dw	519
  1528  007D49  020E               	dw	526
  1529  007D4B  0215               	dw	533
  1530  007D4D  021B               	dw	539
  1531  007D4F  0222               	dw	546
  1532  007D51  0229               	dw	553
  1533  007D53  022F               	dw	559
  1534  007D55  0236               	dw	566
  1535  007D57  023D               	dw	573
  1536  007D59  0243               	dw	579
  1537  007D5B  024A               	dw	586
  1538  007D5D  0251               	dw	593
  1539  007D5F  0257               	dw	599
  1540  007D61  025E               	dw	606
  1541  007D63  0265               	dw	613
  1542  007D65  026B               	dw	619
  1543  007D67  0272               	dw	626
  1544  007D69  0279               	dw	633
  1545  007D6B                     __end_of_finger_under_1:
  1546                           	opt stack 0
  1547  007D6B                     _finger_under_3:
  1548                           	opt stack 0
  1549  007D6B  0000               	dw	0
  1550  007D6D  000B               	dw	11
  1551  007D6F  0017               	dw	23
  1552  007D71  0022               	dw	34
  1553  007D73  002E               	dw	46
  1554  007D75  0039               	dw	57
  1555  007D77  0045               	dw	69
  1556  007D79  0051               	dw	81
  1557  007D7B  005C               	dw	92
  1558  007D7D  0068               	dw	104
  1559  007D7F  0073               	dw	115
  1560  007D81  007F               	dw	127
  1561  007D83  008A               	dw	138
  1562  007D85  0096               	dw	150
  1563  007D87  00A2               	dw	162
  1564  007D89  00AD               	dw	173
  1565  007D8B  00B9               	dw	185
  1566  007D8D  00C4               	dw	196
  1567  007D8F  00D0               	dw	208
  1568  007D91  00DB               	dw	219
  1569  007D93  00E7               	dw	231
  1570  007D95  00F3               	dw	243
  1571  007D97  00FE               	dw	254
  1572  007D99  010A               	dw	266
  1573  007D9B  0115               	dw	277
  1574  007D9D  0121               	dw	289
  1575  007D9F  012D               	dw	301
  1576  007DA1  0138               	dw	312
  1577  007DA3  0144               	dw	324
  1578  007DA5  014F               	dw	335
  1579  007DA7  015B               	dw	347
  1580  007DA9  0166               	dw	358
  1581  007DAB  0172               	dw	370
  1582  007DAD  017E               	dw	382
  1583  007DAF  0189               	dw	393
  1584  007DB1  0195               	dw	405
  1585  007DB3  01A0               	dw	416
  1586  007DB5  01AC               	dw	428
  1587  007DB7  01B7               	dw	439
  1588  007DB9  01C3               	dw	451
  1589  007DBB  01CF               	dw	463
  1590  007DBD  01DA               	dw	474
  1591  007DBF  01E6               	dw	486
  1592  007DC1  01F1               	dw	497
  1593  007DC3  01FD               	dw	509
  1594  007DC5  0208               	dw	520
  1595  007DC7  0214               	dw	532
  1596  007DC9  0220               	dw	544
  1597  007DCB  022B               	dw	555
  1598  007DCD  0237               	dw	567
  1599  007DCF  0242               	dw	578
  1600  007DD1  024E               	dw	590
  1601  007DD3  025A               	dw	602
  1602  007DD5  0265               	dw	613
  1603  007DD7  0271               	dw	625
  1604  007DD9  027C               	dw	636
  1605  007DDB  0288               	dw	648
  1606  007DDD  0293               	dw	659
  1607  007DDF  029F               	dw	671
  1608  007DE1  02AB               	dw	683
  1609  007DE3  02B6               	dw	694
  1610  007DE5  02C2               	dw	706
  1611  007DE7  02CD               	dw	717
  1612  007DE9  02D9               	dw	729
  1613  007DEB  02E4               	dw	740
  1614  007DED  02F0               	dw	752
  1615  007DEF  02FC               	dw	764
  1616  007DF1  0307               	dw	775
  1617  007DF3  0313               	dw	787
  1618  007DF5  031E               	dw	798
  1619  007DF7  032A               	dw	810
  1620  007DF9  0335               	dw	821
  1621  007DFB  0341               	dw	833
  1622  007DFD  034D               	dw	845
  1623  007DFF  0358               	dw	856
  1624  007E01  0364               	dw	868
  1625  007E03  036F               	dw	879
  1626  007E05  037B               	dw	891
  1627  007E07  0387               	dw	903
  1628  007E09                     __end_of_finger_under_3:
  1629                           	opt stack 0
  1630  007E09                     _octpowers:
  1631                           	opt stack 0
  1632  007E09  0001               	dw	1
  1633  007E0B  0008               	dw	8
  1634  007E0D  0040               	dw	64
  1635  007E0F  0200               	dw	512
  1636  007E11  1000               	dw	4096
  1637  007E13  8000               	dw	32768
  1638  007E15                     __end_of_octpowers:
  1639                           	opt stack 0
  1640  007E15                     _dpowers:
  1641                           	opt stack 0
  1642  007E15  0001               	dw	1
  1643  007E17  000A               	dw	10
  1644  007E19  0064               	dw	100
  1645  007E1B  03E8               	dw	1000
  1646  007E1D  2710               	dw	10000
  1647  007E1F                     __end_of_dpowers:
  1648                           	opt stack 0
  1649  007E1F                     _hexpowers:
  1650                           	opt stack 0
  1651  007E1F  0001               	dw	1
  1652  007E21  0010               	dw	16
  1653  007E23  0100               	dw	256
  1654  007E25  1000               	dw	4096
  1655  007E27                     __end_of_hexpowers:
  1656                           	opt stack 0
  1657  0000                     _RCREG	set	4014
  1658  0000                     _TXREG	set	4013
  1659  0000                     _SPBRG	set	4015
  1660  0000                     _SPBRGH	set	4016
  1661  0000                     _BAUDCONbits	set	4024
  1662  0000                     _RCSTAbits	set	4011
  1663  0000                     _TXSTAbits	set	4012
  1664  0000                     _PORTBbits	set	3969
  1665  0000                     _TRISBbits	set	3987
  1666  0000                     _PORTDbits	set	3971
  1667  0000                     _PORTD	set	3971
  1668  0000                     _T2CONbits	set	4042
  1669  0000                     _PR2	set	4043
  1670  0000                     _PIR1bits	set	3998
  1671  0000                     _PIE1bits	set	3997
  1672  0000                     _INTCONbits	set	4082
  1673  0000                     _RCONbits	set	4048
  1674  0000                     _T0CONbits	set	4053
  1675  0000                     _OSCCONbits	set	4051
  1676  0000                     _LATAbits	set	3977
  1677  0000                     _TRISAbits	set	3986
  1678  0000                     _LATD	set	3980
  1679  0000                     _TRISD	set	3989
  1680  0000                     _TRMT	set	32097
  1681  0000                     _TXIF	set	31988
  1682  007E27  41                 	db	65	;'A'
  1683  007E28  54                 	db	84	;'T'
  1684  007E29  2B                 	db	43
  1685  007E2A  43                 	db	67	;'C'
  1686  007E2B  57                 	db	87	;'W'
  1687  007E2C  53                 	db	83	;'S'
  1688  007E2D  41                 	db	65	;'A'
  1689  007E2E  50                 	db	80	;'P'
  1690  007E2F  3D                 	db	61	;'='
  1691  007E30  22                 	db	34
  1692  007E31  25                 	db	37
  1693  007E32  73                 	db	115	;'s'
  1694  007E33  22                 	db	34
  1695  007E34  2C                 	db	44
  1696  007E35  22                 	db	34
  1697  007E36  25                 	db	37
  1698  007E37  73                 	db	115	;'s'
  1699  007E38  22                 	db	34
  1700  007E39  2C                 	db	44
  1701  007E3A  31                 	db	49	;'1'
  1702  007E3B  2C                 	db	44
  1703  007E3C  25                 	db	37
  1704  007E3D  73                 	db	115	;'s'
  1705  007E3E  0D                 	db	13
  1706  007E3F  0A                 	db	10
  1707  007E40  00                 	db	0
  1708  007E41  41                 	db	65	;'A'
  1709  007E42  54                 	db	84	;'T'
  1710  007E43  2B                 	db	43
  1711  007E44  55                 	db	85	;'U'
  1712  007E45  41                 	db	65	;'A'
  1713  007E46  52                 	db	82	;'R'
  1714  007E47  54                 	db	84	;'T'
  1715  007E48  3D                 	db	61	;'='
  1716  007E49  31                 	db	49	;'1'
  1717  007E4A  31                 	db	49	;'1'
  1718  007E4B  35                 	db	53	;'5'
  1719  007E4C  32                 	db	50	;'2'
  1720  007E4D  30                 	db	48	;'0'
  1721  007E4E  30                 	db	48	;'0'
  1722  007E4F  2C                 	db	44
  1723  007E50  38                 	db	56	;'8'
  1724  007E51  2C                 	db	44
  1725  007E52  31                 	db	49	;'1'
  1726  007E53  2C                 	db	44
  1727  007E54  30                 	db	48	;'0'
  1728  007E55  2C                 	db	44
  1729  007E56  30                 	db	48	;'0'
  1730  007E57  0D                 	db	13
  1731  007E58  0A                 	db	10
  1732  007E59  00                 	db	0
  1733  007E5A  41                 	db	65	;'A'
  1734  007E5B  54                 	db	84	;'T'
  1735  007E5C  2B                 	db	43
  1736  007E5D  55                 	db	85	;'U'
  1737  007E5E  41                 	db	65	;'A'
  1738  007E5F  52                 	db	82	;'R'
  1739  007E60  54                 	db	84	;'T'
  1740  007E61  3D                 	db	61	;'='
  1741  007E62  39                 	db	57	;'9'
  1742  007E63  36                 	db	54	;'6'
  1743  007E64  30                 	db	48	;'0'
  1744  007E65  30                 	db	48	;'0'
  1745  007E66  2C                 	db	44
  1746  007E67  38                 	db	56	;'8'
  1747  007E68  2C                 	db	44
  1748  007E69  31                 	db	49	;'1'
  1749  007E6A  2C                 	db	44
  1750  007E6B  30                 	db	48	;'0'
  1751  007E6C  2C                 	db	44
  1752  007E6D  30                 	db	48	;'0'
  1753  007E6E  0D                 	db	13
  1754  007E6F  0A                 	db	10
  1755  007E70  00                 	db	0
  1756  007E71  41                 	db	65	;'A'
  1757  007E72  54                 	db	84	;'T'
  1758  007E73  2B                 	db	43
  1759  007E74  43                 	db	67	;'C'
  1760  007E75  49                 	db	73	;'I'
  1761  007E76  50                 	db	80	;'P'
  1762  007E77  53                 	db	83	;'S'
  1763  007E78  45                 	db	69	;'E'
  1764  007E79  52                 	db	82	;'R'
  1765  007E7A  56                 	db	86	;'V'
  1766  007E7B  45                 	db	69	;'E'
  1767  007E7C  52                 	db	82	;'R'
  1768  007E7D  3D                 	db	61	;'='
  1769  007E7E  31                 	db	49	;'1'
  1770  007E7F  2C                 	db	44
  1771  007E80  35                 	db	53	;'5'
  1772  007E81  30                 	db	48	;'0'
  1773  007E82  30                 	db	48	;'0'
  1774  007E83  30                 	db	48	;'0'
  1775  007E84  0D                 	db	13
  1776  007E85  0A                 	db	10
  1777  007E86  00                 	db	0
  1778  007E87                     STR_15:
  1779  007E87  41                 	db	65	;'A'
  1780  007E88  54                 	db	84	;'T'
  1781  007E89  2B                 	db	43
  1782  007E8A  43                 	db	67	;'C'
  1783  007E8B  57                 	db	87	;'W'
  1784  007E8C  4A                 	db	74	;'J'
  1785  007E8D  41                 	db	65	;'A'
  1786  007E8E  50                 	db	80	;'P'
  1787  007E8F  3D                 	db	61	;'='
  1788  007E90  22                 	db	34
  1789  007E91  25                 	db	37
  1790  007E92  73                 	db	115	;'s'
  1791  007E93  22                 	db	34
  1792  007E94  2C                 	db	44
  1793  007E95  22                 	db	34
  1794  007E96  25                 	db	37
  1795  007E97  73                 	db	115	;'s'
  1796  007E98  22                 	db	34
  1797  007E99  0D                 	db	13
  1798  007E9A  0A                 	db	10
  1799  007E9B  00                 	db	0
  1800  007E9C                     STR_24:
  1801  007E9C  41                 	db	65	;'A'
  1802  007E9D  54                 	db	84	;'T'
  1803  007E9E  2B                 	db	43
  1804  007E9F  43                 	db	67	;'C'
  1805  007EA0  49                 	db	73	;'I'
  1806  007EA1  50                 	db	80	;'P'
  1807  007EA2  53                 	db	83	;'S'
  1808  007EA3  54                 	db	84	;'T'
  1809  007EA4  41                 	db	65	;'A'
  1810  007EA5  52                 	db	82	;'R'
  1811  007EA6  54                 	db	84	;'T'
  1812  007EA7  3D                 	db	61	;'='
  1813  007EA8  25                 	db	37
  1814  007EA9  64                 	db	100	;'d'
  1815  007EAA  2C                 	db	44
  1816  007EAB  25                 	db	37
  1817  007EAC  73                 	db	115	;'s'
  1818  007EAD  0D                 	db	13
  1819  007EAE  0A                 	db	10
  1820  007EAF  00                 	db	0
  1821  007EB0  41                 	db	65	;'A'
  1822  007EB1  54                 	db	84	;'T'
  1823  007EB2  2B                 	db	43
  1824  007EB3  43                 	db	67	;'C'
  1825  007EB4  49                 	db	73	;'I'
  1826  007EB5  50                 	db	80	;'P'
  1827  007EB6  53                 	db	83	;'S'
  1828  007EB7  45                 	db	69	;'E'
  1829  007EB8  4E                 	db	78	;'N'
  1830  007EB9  44                 	db	68	;'D'
  1831  007EBA  3D                 	db	61	;'='
  1832  007EBB  25                 	db	37
  1833  007EBC  64                 	db	100	;'d'
  1834  007EBD  2C                 	db	44
  1835  007EBE  25                 	db	37
  1836  007EBF  64                 	db	100	;'d'
  1837  007EC0  0D                 	db	13
  1838  007EC1  0A                 	db	10
  1839  007EC2  00                 	db	0
  1840  007EC3                     STR_63:
  1841  007EC3  30                 	db	48	;'0'
  1842  007EC4  31                 	db	49	;'1'
  1843  007EC5  32                 	db	50	;'2'
  1844  007EC6  33                 	db	51	;'3'
  1845  007EC7  34                 	db	52	;'4'
  1846  007EC8  35                 	db	53	;'5'
  1847  007EC9  36                 	db	54	;'6'
  1848  007ECA  37                 	db	55	;'7'
  1849  007ECB  38                 	db	56	;'8'
  1850  007ECC  39                 	db	57	;'9'
  1851  007ECD  41                 	db	65	;'A'
  1852  007ECE  42                 	db	66	;'B'
  1853  007ECF  43                 	db	67	;'C'
  1854  007ED0  44                 	db	68	;'D'
  1855  007ED1  45                 	db	69	;'E'
  1856  007ED2  46                 	db	70	;'F'
  1857  007ED3  00                 	db	0
  1858  007ED4                     STR_64:
  1859  007ED4  30                 	db	48	;'0'
  1860  007ED5  31                 	db	49	;'1'
  1861  007ED6  32                 	db	50	;'2'
  1862  007ED7  33                 	db	51	;'3'
  1863  007ED8  34                 	db	52	;'4'
  1864  007ED9  35                 	db	53	;'5'
  1865  007EDA  36                 	db	54	;'6'
  1866  007EDB  37                 	db	55	;'7'
  1867  007EDC  38                 	db	56	;'8'
  1868  007EDD  39                 	db	57	;'9'
  1869  007EDE  61                 	db	97	;'a'
  1870  007EDF  62                 	db	98	;'b'
  1871  007EE0  63                 	db	99	;'c'
  1872  007EE1  64                 	db	100	;'d'
  1873  007EE2  65                 	db	101	;'e'
  1874  007EE3  66                 	db	102	;'f'
  1875  007EE4  00                 	db	0
  1876  007EE5                     STR_25:
  1877  007EE5  41                 	db	65	;'A'
  1878  007EE6  54                 	db	84	;'T'
  1879  007EE7  2B                 	db	43
  1880  007EE8  43                 	db	67	;'C'
  1881  007EE9  49                 	db	73	;'I'
  1882  007EEA  50                 	db	80	;'P'
  1883  007EEB  53                 	db	83	;'S'
  1884  007EEC  54                 	db	84	;'T'
  1885  007EED  41                 	db	65	;'A'
  1886  007EEE  52                 	db	82	;'R'
  1887  007EEF  54                 	db	84	;'T'
  1888  007EF0  3D                 	db	61	;'='
  1889  007EF1  25                 	db	37
  1890  007EF2  73                 	db	115	;'s'
  1891  007EF3  0D                 	db	13
  1892  007EF4  0A                 	db	10
  1893  007EF5  00                 	db	0
  1894  007EF6  41                 	db	65	;'A'
  1895  007EF7  54                 	db	84	;'T'
  1896  007EF8  2B                 	db	43
  1897  007EF9  43                 	db	67	;'C'
  1898  007EFA  49                 	db	73	;'I'
  1899  007EFB  50                 	db	80	;'P'
  1900  007EFC  4D                 	db	77	;'M'
  1901  007EFD  4F                 	db	79	;'O'
  1902  007EFE  44                 	db	68	;'D'
  1903  007EFF  45                 	db	69	;'E'
  1904  007F00  3D                 	db	61	;'='
  1905  007F01  30                 	db	48	;'0'
  1906  007F02  0D                 	db	13
  1907  007F03  0A                 	db	10
  1908  007F04  00                 	db	0
  1909  007F05                     STR_53:
  1910  007F05  41                 	db	65	;'A'
  1911  007F06  54                 	db	84	;'T'
  1912  007F07  2B                 	db	43
  1913  007F08  43                 	db	67	;'C'
  1914  007F09  49                 	db	73	;'I'
  1915  007F0A  50                 	db	80	;'P'
  1916  007F0B  4D                 	db	77	;'M'
  1917  007F0C  4F                 	db	79	;'O'
  1918  007F0D  44                 	db	68	;'D'
  1919  007F0E  45                 	db	69	;'E'
  1920  007F0F  3D                 	db	61	;'='
  1921  007F10  31                 	db	49	;'1'
  1922  007F11  0D                 	db	13
  1923  007F12  0A                 	db	10
  1924  007F13  00                 	db	0
  1925  007F14                     STR_41:
  1926  007F14  41                 	db	65	;'A'
  1927  007F15  54                 	db	84	;'T'
  1928  007F16  2B                 	db	43
  1929  007F17  43                 	db	67	;'C'
  1930  007F18  49                 	db	73	;'I'
  1931  007F19  50                 	db	80	;'P'
  1932  007F1A  4D                 	db	77	;'M'
  1933  007F1B  55                 	db	85	;'U'
  1934  007F1C  58                 	db	88	;'X'
  1935  007F1D  3D                 	db	61	;'='
  1936  007F1E  30                 	db	48	;'0'
  1937  007F1F  0D                 	db	13
  1938  007F20  0A                 	db	10
  1939  007F21  00                 	db	0
  1940  007F22                     STR_9:
  1941  007F22  41                 	db	65	;'A'
  1942  007F23  54                 	db	84	;'T'
  1943  007F24  2B                 	db	43
  1944  007F25  43                 	db	67	;'C'
  1945  007F26  57                 	db	87	;'W'
  1946  007F27  4D                 	db	77	;'M'
  1947  007F28  4F                 	db	79	;'O'
  1948  007F29  44                 	db	68	;'D'
  1949  007F2A  45                 	db	69	;'E'
  1950  007F2B  3D                 	db	61	;'='
  1951  007F2C  31                 	db	49	;'1'
  1952  007F2D  0D                 	db	13
  1953  007F2E  0A                 	db	10
  1954  007F2F  00                 	db	0
  1955  007F30  41                 	db	65	;'A'
  1956  007F31  54                 	db	84	;'T'
  1957  007F32  2B                 	db	43
  1958  007F33  43                 	db	67	;'C'
  1959  007F34  49                 	db	73	;'I'
  1960  007F35  50                 	db	80	;'P'
  1961  007F36  4D                 	db	77	;'M'
  1962  007F37  55                 	db	85	;'U'
  1963  007F38  58                 	db	88	;'X'
  1964  007F39  3D                 	db	61	;'='
  1965  007F3A  31                 	db	49	;'1'
  1966  007F3B  0D                 	db	13
  1967  007F3C  0A                 	db	10
  1968  007F3D  00                 	db	0
  1969  007F3E                     STR_11:
  1970  007F3E  41                 	db	65	;'A'
  1971  007F3F  54                 	db	84	;'T'
  1972  007F40  2B                 	db	43
  1973  007F41  43                 	db	67	;'C'
  1974  007F42  57                 	db	87	;'W'
  1975  007F43  4D                 	db	77	;'M'
  1976  007F44  4F                 	db	79	;'O'
  1977  007F45  44                 	db	68	;'D'
  1978  007F46  45                 	db	69	;'E'
  1979  007F47  3D                 	db	61	;'='
  1980  007F48  32                 	db	50	;'2'
  1981  007F49  0D                 	db	13
  1982  007F4A  0A                 	db	10
  1983  007F4B  00                 	db	0
  1984  007F4C                     STR_13:
  1985  007F4C  41                 	db	65	;'A'
  1986  007F4D  54                 	db	84	;'T'
  1987  007F4E  2B                 	db	43
  1988  007F4F  43                 	db	67	;'C'
  1989  007F50  57                 	db	87	;'W'
  1990  007F51  4D                 	db	77	;'M'
  1991  007F52  4F                 	db	79	;'O'
  1992  007F53  44                 	db	68	;'D'
  1993  007F54  45                 	db	69	;'E'
  1994  007F55  3D                 	db	61	;'='
  1995  007F56  33                 	db	51	;'3'
  1996  007F57  0D                 	db	13
  1997  007F58  0A                 	db	10
  1998  007F59  00                 	db	0
  1999  007F5A                     STR_32:
  2000  007F5A  41                 	db	65	;'A'
  2001  007F5B  54                 	db	84	;'T'
  2002  007F5C  2B                 	db	43
  2003  007F5D  43                 	db	67	;'C'
  2004  007F5E  57                 	db	87	;'W'
  2005  007F5F  4D                 	db	77	;'M'
  2006  007F60  4F                 	db	79	;'O'
  2007  007F61  44                 	db	68	;'D'
  2008  007F62  45                 	db	69	;'E'
  2009  007F63  3F                 	db	63	;'?'
  2010  007F64  0D                 	db	13
  2011  007F65  0A                 	db	10
  2012  007F66  00                 	db	0
  2013  007F67                     STR_20:
  2014  007F67  22                 	db	34
  2015  007F68  25                 	db	37
  2016  007F69  73                 	db	115	;'s'
  2017  007F6A  22                 	db	34
  2018  007F6B  2C                 	db	44
  2019  007F6C  22                 	db	34
  2020  007F6D  25                 	db	37
  2021  007F6E  73                 	db	115	;'s'
  2022  007F6F  22                 	db	34
  2023  007F70  2C                 	db	44
  2024  007F71  25                 	db	37
  2025  007F72  73                 	db	115	;'s'
  2026  007F73  00                 	db	0
  2027  007F74                     STR_57:
  2028  007F74  31                 	db	49	;'1'
  2029  007F75  39                 	db	57	;'9'
  2030  007F76  32                 	db	50	;'2'
  2031  007F77  2E                 	db	46
  2032  007F78  31                 	db	49	;'1'
  2033  007F79  36                 	db	54	;'6'
  2034  007F7A  38                 	db	56	;'8'
  2035  007F7B  2E                 	db	46
  2036  007F7C  34                 	db	52	;'4'
  2037  007F7D  2E                 	db	46
  2038  007F7E  31                 	db	49	;'1'
  2039  007F7F  00                 	db	0
  2040  007F80                     STR_49:
  2041  007F80  41                 	db	65	;'A'
  2042  007F81  54                 	db	84	;'T'
  2043  007F82  2B                 	db	43
  2044  007F83  43                 	db	67	;'C'
  2045  007F84  57                 	db	87	;'W'
  2046  007F85  51                 	db	81	;'Q'
  2047  007F86  41                 	db	65	;'A'
  2048  007F87  50                 	db	80	;'P'
  2049  007F88  0D                 	db	13
  2050  007F89  0A                 	db	10
  2051  007F8A  00                 	db	0
  2052  007F8B                     STR_39:
  2053  007F8B  7A                 	db	122	;'z'
  2054  007F8C  78                 	db	120	;'x'
  2055  007F8D  34                 	db	52	;'4'
  2056  007F8E  35                 	db	53	;'5'
  2057  007F8F  32                 	db	50	;'2'
  2058  007F90  32                 	db	50	;'2'
  2059  007F91  33                 	db	51	;'3'
  2060  007F92  33                 	db	51	;'3'
  2061  007F93  31                 	db	49	;'1'
  2062  007F94  00                 	db	0
  2063  007F95                     STR_36:
  2064  007F95  2B                 	db	43
  2065  007F96  43                 	db	67	;'C'
  2066  007F97  57                 	db	87	;'W'
  2067  007F98  4D                 	db	77	;'M'
  2068  007F99  4F                 	db	79	;'O'
  2069  007F9A  44                 	db	68	;'D'
  2070  007F9B  45                 	db	69	;'E'
  2071  007F9C  3A                 	db	58	;':'
  2072  007F9D  31                 	db	49	;'1'
  2073  007F9E  00                 	db	0
  2074  007F9F  2B                 	db	43
  2075  007FA0  43                 	db	67	;'C'
  2076  007FA1  57                 	db	87	;'W'
  2077  007FA2  4D                 	db	77	;'M'
  2078  007FA3  4F                 	db	79	;'O'
  2079  007FA4  44                 	db	68	;'D'
  2080  007FA5  45                 	db	69	;'E'
  2081  007FA6  3A                 	db	58	;':'
  2082  007FA7  32                 	db	50	;'2'
  2083  007FA8  00                 	db	0
  2084  007FA9                     STR_17:
  2085  007FA9  43                 	db	67	;'C'
  2086  007FAA  4F                 	db	79	;'O'
  2087  007FAB  4E                 	db	78	;'N'
  2088  007FAC  4E                 	db	78	;'N'
  2089  007FAD  45                 	db	69	;'E'
  2090  007FAE  43                 	db	67	;'C'
  2091  007FAF  54                 	db	84	;'T'
  2092  007FB0  45                 	db	69	;'E'
  2093  007FB1  44                 	db	68	;'D'
  2094  007FB2  00                 	db	0
  2095  007FB3                     STR_6:
  2096  007FB3  41                 	db	65	;'A'
  2097  007FB4  54                 	db	84	;'T'
  2098  007FB5  2B                 	db	43
  2099  007FB6  52                 	db	82	;'R'
  2100  007FB7  53                 	db	83	;'S'
  2101  007FB8  54                 	db	84	;'T'
  2102  007FB9  0D                 	db	13
  2103  007FBA  0A                 	db	10
  2104  007FBB  00                 	db	0
  2105  007FBC                     STR_3:
  2106  007FBC  53                 	db	83	;'S'
  2107  007FBD  45                 	db	69	;'E'
  2108  007FBE  4E                 	db	78	;'N'
  2109  007FBF  44                 	db	68	;'D'
  2110  007FC0  20                 	db	32
  2111  007FC1  4F                 	db	79	;'O'
  2112  007FC2  4B                 	db	75	;'K'
  2113  007FC3  00                 	db	0
  2114  007FC4                     STR_26:
  2115  007FC4  43                 	db	67	;'C'
  2116  007FC5  4F                 	db	79	;'O'
  2117  007FC6  4E                 	db	78	;'N'
  2118  007FC7  4E                 	db	78	;'N'
  2119  007FC8  45                 	db	69	;'E'
  2120  007FC9  43                 	db	67	;'C'
  2121  007FCA  54                 	db	84	;'T'
  2122  007FCB  00                 	db	0
  2123  007FCC                     STR_62:
  2124  007FCC  28                 	db	40
  2125  007FCD  6E                 	db	110	;'n'
  2126  007FCE  75                 	db	117	;'u'
  2127  007FCF  6C                 	db	108	;'l'
  2128  007FD0  6C                 	db	108	;'l'
  2129  007FD1  29                 	db	41
  2130  007FD2  00                 	db	0
  2131  007FD3                     STR_27:
  2132  007FD3  41                 	db	65	;'A'
  2133  007FD4  4C                 	db	76	;'L'
  2134  007FD5  52                 	db	82	;'R'
  2135  007FD6  45                 	db	69	;'E'
  2136  007FD7  41                 	db	65	;'A'
  2137  007FD8  59                 	db	89	;'Y'
  2138  007FD9  00                 	db	0
  2139  007FDA                     STR_8:
  2140  007FDA  72                 	db	114	;'r'
  2141  007FDB  65                 	db	101	;'e'
  2142  007FDC  61                 	db	97	;'a'
  2143  007FDD  64                 	db	100	;'d'
  2144  007FDE  79                 	db	121	;'y'
  2145  007FDF  00                 	db	0
  2146  007FE0                     STR_4:
  2147  007FE0  41                 	db	65	;'A'
  2148  007FE1  54                 	db	84	;'T'
  2149  007FE2  0D                 	db	13
  2150  007FE3  0A                 	db	10
  2151  007FE4  00                 	db	0
  2152  007FE5                     STR_58:
  2153  007FE5  35                 	db	53	;'5'
  2154  007FE6  30                 	db	48	;'0'
  2155  007FE7  30                 	db	48	;'0'
  2156  007FE8  30                 	db	48	;'0'
  2157  007FE9  00                 	db	0
  2158  007FEA                     STR_38:
  2159  007FEA  4B                 	db	75	;'K'
  2160  007FEB  45                 	db	69	;'E'
  2161  007FEC  4E                 	db	78	;'N'
  2162  007FED  00                 	db	0
  2163  007FEE                     STR_21:
  2164  007FEE  54                 	db	84	;'T'
  2165  007FEF  43                 	db	67	;'C'
  2166  007FF0  50                 	db	80	;'P'
  2167  007FF1  00                 	db	0
  2168  007FF2                     STR_23:
  2169  007FF2  55                 	db	85	;'U'
  2170  007FF3  44                 	db	68	;'D'
  2171  007FF4  50                 	db	80	;'P'
  2172  007FF5  00                 	db	0
  2173  007FF6  3E                 	db	62	;'>'
  2174  007FF7  20                 	db	32
  2175  007FF8  00                 	db	0
  2176  007FF9                     STR_60:
  2177  007FF9  00                 	db	0
  2178  007FFA  00                 	db	0
  2179  007FFB                     STR_59:
  2180  007FFB  21                 	db	33
  2181  007FFC  00                 	db	0
  2182  007FFD  34                 	db	52	;'4'
  2183  007FFE  00                 	db	0
  2184  0000                     
  2185                           ; #config settings
  2186  007FFF  00                 	db	0	; dummy byte at the end
  2187  0000                     
  2188                           	psect	cinit
  2189  0014FC                     __pcinit:
  2190                           	opt stack 0
  2191  0014FC                     start_initialization:
  2192                           	opt stack 0
  2193  0014FC                     __initialization:
  2194                           	opt stack 0
  2195                           
  2196                           ; Initialize objects allocated to COMRAM (8 bytes)
  2197                           ; load TBLPTR registers with __pidataCOMRAM
  2198  0014FC  0E74               	movlw	low __pidataCOMRAM
  2199  0014FE  6EF6               	movwf	tblptrl,c
  2200  001500  0E19               	movlw	high __pidataCOMRAM
  2201  001502  6EF7               	movwf	tblptrh,c
  2202  001504  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2203  001506  6EF8               	movwf	tblptru,c
  2204  001508  EE00  F063         	lfsr	0,__pdataCOMRAM
  2205  00150C  EE10 F008          	lfsr	1,8
  2206  001510                     copy_data0:
  2207  001510  0009               	tblrd		*+
  2208  001512  CFF5 FFEE          	movff	tablat,postinc0
  2209  001516  50E5               	movf	postdec1,w,c
  2210  001518  50E1               	movf	fsr1l,w,c
  2211  00151A  E1FA               	bnz	copy_data0
  2212                           
  2213                           ; Clear objects allocated to BANK3 (100 bytes)
  2214  00151C  EE03  F000         	lfsr	0,__pbssBANK3
  2215  001520  0E64               	movlw	100
  2216  001522                     clear_0:
  2217  001522  6AEE               	clrf	postinc0,c
  2218  001524  06E8               	decf	wreg,f,c
  2219  001526  E1FD               	bnz	clear_0
  2220                           
  2221                           ; Clear objects allocated to BANK2 (206 bytes)
  2222  001528  EE02  F000         	lfsr	0,__pbssBANK2
  2223  00152C  0ECE               	movlw	206
  2224  00152E                     clear_1:
  2225  00152E  6AEE               	clrf	postinc0,c
  2226  001530  06E8               	decf	wreg,f,c
  2227  001532  E1FD               	bnz	clear_1
  2228                           
  2229                           ; Clear objects allocated to COMRAM (39 bytes)
  2230  001534  EE00  F03C         	lfsr	0,__pbssCOMRAM
  2231  001538  0E27               	movlw	39
  2232  00153A                     clear_2:
  2233  00153A  6AEE               	clrf	postinc0,c
  2234  00153C  06E8               	decf	wreg,f,c
  2235  00153E  E1FD               	bnz	clear_2
  2236  001540                     end_of_initialization:
  2237                           	opt stack 0
  2238  001540                     __end_of__initialization:
  2239                           	opt stack 0
  2240  001540  906B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2241  001542  926B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2242  001544  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2243  001546  6EF8               	movwf	tblptru,c
  2244  001548  0100               	movlb	0
  2245  00154A  EF53  F00A         	goto	_main	;jump to C main() function
  2246                           tblptru	equ	0xFF8
  2247                           tblptrh	equ	0xFF7
  2248                           tblptrl	equ	0xFF6
  2249                           tablat	equ	0xFF5
  2250                           postinc0	equ	0xFEE
  2251                           wreg	equ	0xFE8
  2252                           postdec1	equ	0xFE5
  2253                           fsr1l	equ	0xFE1
  2254                           
  2255                           	psect	bssCOMRAM
  2256  00003C                     __pbssCOMRAM:
  2257                           	opt stack 0
  2258  00003C                     _test:
  2259                           	opt stack 0
  2260  00003C                     	ds	30
  2261  00005A                     _IP:
  2262                           	opt stack 0
  2263  00005A                     	ds	2
  2264  00005C                     _s:
  2265                           	opt stack 0
  2266  00005C                     	ds	2
  2267  00005E                     _test_index:
  2268                           	opt stack 0
  2269  00005E                     	ds	2
  2270  000060                     _work_flag:
  2271                           	opt stack 0
  2272  000060                     	ds	1
  2273  000061                     _write:
  2274                           	opt stack 0
  2275  000061                     	ds	1
  2276  000062                     _count:
  2277                           	opt stack 0
  2278  000062                     	ds	1
  2279                           tblptru	equ	0xFF8
  2280                           tblptrh	equ	0xFF7
  2281                           tblptrl	equ	0xFF6
  2282                           tablat	equ	0xFF5
  2283                           postinc0	equ	0xFEE
  2284                           wreg	equ	0xFE8
  2285                           postdec1	equ	0xFE5
  2286                           fsr1l	equ	0xFE1
  2287                           
  2288                           	psect	dataCOMRAM
  2289  000063                     __pdataCOMRAM:
  2290                           	opt stack 0
  2291  000063                     LCD_CreateFont@F3803:
  2292                           	opt stack 0
  2293  000063                     	ds	8
  2294                           tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           postinc0	equ	0xFEE
  2299                           wreg	equ	0xFE8
  2300                           postdec1	equ	0xFE5
  2301                           fsr1l	equ	0xFE1
  2302                           
  2303                           	psect	bssBANK2
  2304  000200                     __pbssBANK2:
  2305                           	opt stack 0
  2306  000200                     _strPc_Fram_Record:
  2307                           	opt stack 0
  2308  000200                     	ds	52
  2309  000234                     _str1_1esp8266:
  2310                           	opt stack 0
  2311  000234                     	ds	51
  2312  000267                     _strPc1_1_Fram_Record:
  2313                           	opt stack 0
  2314  000267                     	ds	51
  2315  00029A                     _strEsp8266_Fram_Record:
  2316                           	opt stack 0
  2317  00029A                     	ds	52
  2318                           tblptru	equ	0xFF8
  2319                           tblptrh	equ	0xFF7
  2320                           tblptrl	equ	0xFF6
  2321                           tablat	equ	0xFF5
  2322                           postinc0	equ	0xFEE
  2323                           wreg	equ	0xFE8
  2324                           postdec1	equ	0xFE5
  2325                           fsr1l	equ	0xFE1
  2326                           
  2327                           	psect	bssBANK3
  2328  000300                     __pbssBANK3:
  2329                           	opt stack 0
  2330  000300                     ESP8266_Link_Server@F4048:
  2331                           	opt stack 0
  2332  000300                     	ds	100
  2333                           tblptru	equ	0xFF8
  2334                           tblptrh	equ	0xFF7
  2335                           tblptrl	equ	0xFF6
  2336                           tablat	equ	0xFF5
  2337                           postinc0	equ	0xFEE
  2338                           wreg	equ	0xFE8
  2339                           postdec1	equ	0xFE5
  2340                           fsr1l	equ	0xFE1
  2341                           
  2342                           	psect	cstackBANK1
  2343  000100                     __pcstackBANK1:
  2344                           	opt stack 0
  2345  000100                     ESP8266_JoinAP@cCmd:
  2346                           	opt stack 0
  2347  000100                     ESP8266_Link_Server@cCmd:
  2348                           	opt stack 0
  2349                           
  2350                           ; 120 bytes @ 0x0
  2351  000100                     	ds	120
  2352  000178                     ESP8266_Link_Server@cStr:
  2353                           	opt stack 0
  2354                           
  2355                           ; 100 bytes @ 0x78
  2356  000178                     	ds	100
  2357  0001DC                     ESP8266_Link_Server@enumE:
  2358                           	opt stack 0
  2359                           
  2360                           ; 1 bytes @ 0xDC
  2361  0001DC                     	ds	1
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           postinc0	equ	0xFEE
  2367                           wreg	equ	0xFE8
  2368                           postdec1	equ	0xFE5
  2369                           fsr1l	equ	0xFE1
  2370                           
  2371                           	psect	cstackBANK0
  2372  000080                     __pcstackBANK0:
  2373                           	opt stack 0
  2374  000080                     sprintf@idx:
  2375                           	opt stack 0
  2376                           
  2377                           ; 1 bytes @ 0x0
  2378  000080                     	ds	1
  2379  000081                     _sprintf$1429:
  2380                           	opt stack 0
  2381                           
  2382                           ; 2 bytes @ 0x1
  2383  000081                     	ds	2
  2384  000083                     _sprintf$1430:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x3
  2388  000083                     	ds	2
  2389  000085                     _sprintf$1436:
  2390                           	opt stack 0
  2391                           
  2392                           ; 2 bytes @ 0x5
  2393  000085                     	ds	2
  2394  000087                     sprintf@cp:
  2395                           	opt stack 0
  2396                           
  2397                           ; 2 bytes @ 0x7
  2398  000087                     	ds	2
  2399  000089                     sprintf@len:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x9
  2403  000089                     	ds	2
  2404  00008B                     sprintf@ap:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0xB
  2408  00008B                     	ds	2
  2409  00008D                     sprintf@val:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0xD
  2413  00008D                     	ds	2
  2414  00008F                     sprintf@prec:
  2415                           	opt stack 0
  2416                           
  2417                           ; 1 bytes @ 0xF
  2418  00008F                     	ds	1
  2419  000090                     sprintf@width:
  2420                           	opt stack 0
  2421                           
  2422                           ; 2 bytes @ 0x10
  2423  000090                     	ds	2
  2424  000092                     sprintf@c:
  2425                           	opt stack 0
  2426                           
  2427                           ; 1 bytes @ 0x12
  2428  000092                     	ds	1
  2429  000093                     sprintf@flag:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x13
  2433  000093                     	ds	2
  2434                           tblptru	equ	0xFF8
  2435                           tblptrh	equ	0xFF7
  2436                           tblptrl	equ	0xFF6
  2437                           tablat	equ	0xFF5
  2438                           postinc0	equ	0xFEE
  2439                           wreg	equ	0xFE8
  2440                           postdec1	equ	0xFE5
  2441                           fsr1l	equ	0xFE1
  2442                           
  2443                           	psect	cstackCOMRAM
  2444  000001                     __pcstackCOMRAM:
  2445                           	opt stack 0
  2446  000001                     ??_time_adc:
  2447  000001                     
  2448                           ; 1 bytes @ 0x0
  2449  000001                     	ds	16
  2450  000011                     time_adc@ch:
  2451                           	opt stack 0
  2452                           
  2453                           ; 1 bytes @ 0x10
  2454  000011                     	ds	1
  2455  000012                     ??_Delay10KTCYx:
  2456  000012                     ??_isdigit:
  2457  000012                     ?_strlen:
  2458                           	opt stack 0
  2459  000012                     ?_strchr:
  2460                           	opt stack 0
  2461  000012                     ?___wmul:
  2462                           	opt stack 0
  2463  000012                     ?___lwdiv:
  2464                           	opt stack 0
  2465  000012                     Delay10TCYx@unit:
  2466                           	opt stack 0
  2467  000012                     ESP8266_Uart@cmd:
  2468                           	opt stack 0
  2469  000012                     ___wmul@multiplier:
  2470                           	opt stack 0
  2471  000012                     ___lwdiv@dividend:
  2472                           	opt stack 0
  2473  000012                     memset@p1:
  2474                           	opt stack 0
  2475  000012                     strchr@ptr:
  2476                           	opt stack 0
  2477  000012                     strlen@s:
  2478                           	opt stack 0
  2479                           
  2480                           ; 2 bytes @ 0x11
  2481  000012                     	ds	1
  2482  000013                     Delay10KTCYx@unit:
  2483                           	opt stack 0
  2484  000013                     _isdigit$1666:
  2485                           	opt stack 0
  2486  000013                     delay_us@us:
  2487                           	opt stack 0
  2488                           
  2489                           ; 2 bytes @ 0x12
  2490  000013                     	ds	1
  2491  000014                     ??_strlen:
  2492  000014                     ??_ESP8266_Uart:
  2493  000014                     isdigit@c:
  2494                           	opt stack 0
  2495  000014                     delay_ms@ms:
  2496                           	opt stack 0
  2497  000014                     ___wmul@multiplicand:
  2498                           	opt stack 0
  2499  000014                     ___lwdiv@divisor:
  2500                           	opt stack 0
  2501  000014                     memset@c:
  2502                           	opt stack 0
  2503  000014                     strchr@chr:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x13
  2507  000014                     	ds	1
  2508  000015                     ??_IIC_Send_Byte:
  2509  000015                     IIC_Wait_Ack@ucErrTime:
  2510                           	opt stack 0
  2511                           
  2512                           ; 1 bytes @ 0x14
  2513  000015                     	ds	1
  2514  000016                     IIC_Send_Byte@txd:
  2515                           	opt stack 0
  2516  000016                     ___lwdiv@counter:
  2517                           	opt stack 0
  2518  000016                     ESP8266_Uart@index:
  2519                           	opt stack 0
  2520  000016                     ___wmul@product:
  2521                           	opt stack 0
  2522  000016                     memset@n:
  2523                           	opt stack 0
  2524  000016                     strlen@cp:
  2525                           	opt stack 0
  2526                           
  2527                           ; 2 bytes @ 0x15
  2528  000016                     	ds	1
  2529  000017                     IIC_Send_Byte@t:
  2530                           	opt stack 0
  2531  000017                     ___lwdiv@quotient:
  2532                           	opt stack 0
  2533                           
  2534                           ; 2 bytes @ 0x16
  2535  000017                     	ds	1
  2536  000018                     ?_strncmp:
  2537                           	opt stack 0
  2538  000018                     PCA9685_writeOneByte@data:
  2539                           	opt stack 0
  2540  000018                     memset@p:
  2541                           	opt stack 0
  2542  000018                     strncmp@s1:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x17
  2546  000018                     	ds	1
  2547  000019                     ?___lwmod:
  2548                           	opt stack 0
  2549  000019                     PCA9685_writeOneByte@addr:
  2550                           	opt stack 0
  2551  000019                     ___lwmod@dividend:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x18
  2555  000019                     	ds	1
  2556  00001A                     transmit_finger@HL_Value:
  2557                           	opt stack 0
  2558  00001A                     strncmp@s2:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x19
  2562  00001A                     	ds	1
  2563  00001B                     ___lwmod@divisor:
  2564                           	opt stack 0
  2565                           
  2566                           ; 2 bytes @ 0x1A
  2567  00001B                     	ds	1
  2568  00001C                     transmit_finger@finger:
  2569                           	opt stack 0
  2570  00001C                     strncmp@len:
  2571                           	opt stack 0
  2572                           
  2573                           ; 2 bytes @ 0x1B
  2574  00001C                     	ds	1
  2575  00001D                     transmit_finger@Hbyte:
  2576                           	opt stack 0
  2577  00001D                     ___lwmod@counter:
  2578                           	opt stack 0
  2579                           
  2580                           ; 1 bytes @ 0x1C
  2581  00001D                     	ds	1
  2582  00001E                     ??_strncmp:
  2583  00001E                     ?_sprintf:
  2584                           	opt stack 0
  2585  00001E                     transmit_finger@Lbyte:
  2586                           	opt stack 0
  2587  00001E                     sprintf@sp:
  2588                           	opt stack 0
  2589                           
  2590                           ; 2 bytes @ 0x1D
  2591  00001E                     	ds	1
  2592  00001F                     PWMt0PCA@up:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x1E
  2596  00001F                     	ds	1
  2597  000020                     sprintf@f:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x1F
  2601  000020                     	ds	1
  2602  000021                     ?_strstr:
  2603                           	opt stack 0
  2604  000021                     PWMt0PCA@low:
  2605                           	opt stack 0
  2606  000021                     strstr@s1:
  2607                           	opt stack 0
  2608                           
  2609                           ; 2 bytes @ 0x20
  2610  000021                     	ds	2
  2611  000023                     PWMt0PCA@finger:
  2612                           	opt stack 0
  2613  000023                     strstr@s2:
  2614                           	opt stack 0
  2615                           
  2616                           ; 2 bytes @ 0x22
  2617  000023                     	ds	1
  2618  000024                     ADtoPWM@AD:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x23
  2622  000024                     	ds	1
  2623  000025                     ?_ESP8266_ReceiveString:
  2624                           	opt stack 0
  2625  000025                     ESP8266_Cmd@cmd:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x24
  2629  000025                     	ds	1
  2630  000026                     ??_ADtoPWM:
  2631                           
  2632                           ; 1 bytes @ 0x25
  2633  000026                     	ds	1
  2634  000027                     ESP8266_Cmd@reply1:
  2635                           	opt stack 0
  2636  000027                     ESP8266_ReceiveString@pRecStr:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x26
  2640  000027                     	ds	1
  2641  000028                     ??_sprintf:
  2642                           
  2643                           ; 1 bytes @ 0x27
  2644  000028                     	ds	1
  2645  000029                     ESP8266_Cmd@reply2:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x28
  2649  000029                     	ds	1
  2650  00002A                     ADtoPWM@u1:
  2651                           	opt stack 0
  2652                           
  2653                           ; 2 bytes @ 0x29
  2654  00002A                     	ds	1
  2655  00002B                     ESP8266_Cmd@waittime:
  2656                           	opt stack 0
  2657                           
  2658                           ; 2 bytes @ 0x2A
  2659  00002B                     	ds	1
  2660  00002C                     ADtoPWM@u2:
  2661                           	opt stack 0
  2662                           
  2663                           ; 2 bytes @ 0x2B
  2664  00002C                     	ds	1
  2665  00002D                     _ESP8266_Cmd$1209:
  2666                           	opt stack 0
  2667                           
  2668                           ; 1 bytes @ 0x2C
  2669  00002D                     	ds	1
  2670  00002E                     ESP8266_Net_Mode_Choose@MODE:
  2671                           	opt stack 0
  2672  00002E                     ADtoPWM@u3:
  2673                           	opt stack 0
  2674  00002E                     ESP8266_JoinAP@pSSID:
  2675                           	opt stack 0
  2676  00002E                     ESP8266_Link_Server@ip:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0x2D
  2680  00002E                     	ds	1
  2681  00002F                     
  2682                           ; 1 bytes @ 0x2E
  2683  00002F                     	ds	1
  2684  000030                     ADtoPWM@u4:
  2685                           	opt stack 0
  2686  000030                     ESP8266_JoinAP@pPassWord:
  2687                           	opt stack 0
  2688  000030                     ESP8266_Link_Server@ComNum:
  2689                           	opt stack 0
  2690                           
  2691                           ; 2 bytes @ 0x2F
  2692  000030                     	ds	2
  2693  000032                     ADtoPWM@w1:
  2694                           	opt stack 0
  2695  000032                     ESP8266_Link_Server@id:
  2696                           	opt stack 0
  2697                           
  2698                           ; 2 bytes @ 0x31
  2699  000032                     	ds	2
  2700  000034                     ADtoPWM@w2:
  2701                           	opt stack 0
  2702                           
  2703                           ; 2 bytes @ 0x33
  2704  000034                     	ds	2
  2705  000036                     ADtoPWM@w3:
  2706                           	opt stack 0
  2707                           
  2708                           ; 2 bytes @ 0x35
  2709  000036                     	ds	2
  2710  000038                     ADtoPWM@w4:
  2711                           	opt stack 0
  2712                           
  2713                           ; 2 bytes @ 0x37
  2714  000038                     	ds	2
  2715  00003A                     main@temp:
  2716                           	opt stack 0
  2717                           
  2718                           ; 2 bytes @ 0x39
  2719  00003A                     	ds	2
  2720                           tblptru	equ	0xFF8
  2721                           tblptrh	equ	0xFF7
  2722                           tblptrl	equ	0xFF6
  2723                           tablat	equ	0xFF5
  2724                           postinc0	equ	0xFEE
  2725                           wreg	equ	0xFE8
  2726                           postdec1	equ	0xFE5
  2727                           fsr1l	equ	0xFE1
  2728                           
  2729 ;;
  2730 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2731 ;;
  2732 ;; *************** function _main *****************
  2733 ;; Defined at:
  2734 ;;		line 153 in file "main.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;  t              20    0        unsigned char [20]
  2739 ;;  print           5    0        unsigned char [5]
  2740 ;;  temp            2   57[COMRAM] PTR unsigned char 
  2741 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  1    wreg      void 
  2744 ;; Registers used:
  2745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2751 ;;      Params:         0       0       0       0       0       0       0
  2752 ;;      Locals:         2       0       0       0       0       0       0
  2753 ;;      Temps:          0       0       0       0       0       0       0
  2754 ;;      Totals:         2       0       0       0       0       0       0
  2755 ;;Total ram usage:        2 bytes
  2756 ;; Hardware stack levels required when called:    9
  2757 ;; This function calls:
  2758 ;;		_ADtoPWM
  2759 ;;		_ESP8266_ReceiveString
  2760 ;;		_ESP8266_client
  2761 ;;		_GPIO_initial
  2762 ;;		_PCA9685_init
  2763 ;;		_initial_UART
  2764 ;;		_memset
  2765 ;;		_oclillator_initial
  2766 ;;		_timer_2_initial
  2767 ;;		_timer_intrrupt_initinal
  2768 ;; This function is called by:
  2769 ;;		Startup code after reset
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text0
  2774  0014A6                     __ptext0:
  2775                           	opt stack 0
  2776  0014A6                     _main:
  2777                           	opt stack 22
  2778                           
  2779                           ;main.c: 155: oclillator_initial();
  2780                           
  2781                           ;incstack = 0
  2782  0014A6  ECBE  F00C         	call	_oclillator_initial	;wreg free
  2783                           
  2784                           ;main.c: 156: GPIO_initial();
  2785  0014AA  ECB3  F00C         	call	_GPIO_initial	;wreg free
  2786                           
  2787                           ;main.c: 157: PCA9685_init();
  2788  0014AE  EC20  F00C         	call	_PCA9685_init	;wreg free
  2789                           
  2790                           ;main.c: 158: timer_2_initial() ;
  2791  0014B2  EC76  F00C         	call	_timer_2_initial	;wreg free
  2792                           
  2793                           ;main.c: 159: timer_intrrupt_initinal();
  2794  0014B6  ECA3  F00C         	call	_timer_intrrupt_initinal	;wreg free
  2795                           
  2796                           ;main.c: 161: initial_UART();
  2797  0014BA  EC0E  F00C         	call	_initial_UART	;wreg free
  2798                           
  2799                           ;main.c: 162: ESP8266_client();
  2800  0014BE  EC7B  F008         	call	_ESP8266_client	;wreg free
  2801                           
  2802                           ;main.c: 168: char* temp;
  2803                           ;main.c: 169: char t[20];
  2804                           ;main.c: 170: char print[5];
  2805                           ;main.c: 171: write=0;
  2806  0014C2  0E00               	movlw	0
  2807  0014C4  6E61               	movwf	_write,c
  2808                           
  2809                           ;main.c: 173: memset(&(strEsp8266_Fram_Record.Data_RX_BUF[0]), '\0', 50);
  2810  0014C6  0E9A               	movlw	low _strEsp8266_Fram_Record
  2811  0014C8  6E12               	movwf	memset@p1,c
  2812  0014CA  0E02               	movlw	high _strEsp8266_Fram_Record
  2813  0014CC  6E13               	movwf	memset@p1+1,c
  2814  0014CE  0E00               	movlw	0
  2815  0014D0  6E15               	movwf	memset@c+1,c
  2816  0014D2  0E00               	movlw	0
  2817  0014D4  6E14               	movwf	memset@c,c
  2818  0014D6  0E00               	movlw	0
  2819  0014D8  6E17               	movwf	memset@n+1,c
  2820  0014DA  0E32               	movlw	50
  2821  0014DC  6E16               	movwf	memset@n,c
  2822  0014DE  ECBC  F00B         	call	_memset	;wreg free
  2823  0014E2                     l4508:
  2824                           
  2825                           ;main.c: 175: {
  2826                           ;main.c: 176: temp=ESP8266_ReceiveString();
  2827  0014E2  ECDD  F008         	call	_ESP8266_ReceiveString	;wreg free
  2828  0014E6  C025  F03A         	movff	?_ESP8266_ReceiveString,main@temp
  2829  0014EA  C026  F03B         	movff	?_ESP8266_ReceiveString+1,main@temp+1
  2830                           
  2831                           ;main.c: 201: ADtoPWM(temp);
  2832  0014EE  C03A  F024         	movff	main@temp,ADtoPWM@AD
  2833  0014F2  C03B  F025         	movff	main@temp+1,ADtoPWM@AD+1
  2834  0014F6  EC12  F005         	call	_ADtoPWM	;wreg free
  2835  0014FA  D7F3               	goto	l4508
  2836  0014FC                     __end_of_main:
  2837                           	opt stack 0
  2838                           tblptru	equ	0xFF8
  2839                           tblptrh	equ	0xFF7
  2840                           tblptrl	equ	0xFF6
  2841                           tablat	equ	0xFF5
  2842                           postinc0	equ	0xFEE
  2843                           wreg	equ	0xFE8
  2844                           postdec1	equ	0xFE5
  2845                           fsr1l	equ	0xFE1
  2846                           
  2847 ;; *************** function _timer_intrrupt_initinal *****************
  2848 ;; Defined at:
  2849 ;;		line 36 in file "harwave/initial.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		None
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2863 ;;      Params:         0       0       0       0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0
  2866 ;;      Totals:         0       0       0       0       0       0       0
  2867 ;;Total ram usage:        0 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    1
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_main
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text1
  2878  001946                     __ptext1:
  2879                           	opt stack 0
  2880  001946                     _timer_intrrupt_initinal:
  2881                           	opt stack 29
  2882                           
  2883                           ;initial.c: 38: RCONbits.IPEN=1;
  2884                           
  2885                           ;incstack = 0
  2886  001946  8ED0               	bsf	4048,7,c	;volatile
  2887                           
  2888                           ;initial.c: 39: INTCONbits.GIE=1;
  2889  001948  8EF2               	bsf	intcon,7,c	;volatile
  2890                           
  2891                           ;initial.c: 40: INTCONbits.PEIE=1;
  2892  00194A  8CF2               	bsf	intcon,6,c	;volatile
  2893                           
  2894                           ;initial.c: 41: INTCONbits.TMR0IE=0;
  2895  00194C  9AF2               	bcf	intcon,5,c	;volatile
  2896                           
  2897                           ;initial.c: 42: INTCONbits.TMR0IF=0;
  2898  00194E  94F2               	bcf	intcon,2,c	;volatile
  2899                           
  2900                           ;initial.c: 43: PIE1bits.TMR2IE=0;
  2901  001950  929D               	bcf	3997,1,c	;volatile
  2902                           
  2903                           ;initial.c: 44: PIR1bits.TMR2IF=0;
  2904  001952  929E               	bcf	3998,1,c	;volatile
  2905  001954  0012               	return		;funcret
  2906  001956                     __end_of_timer_intrrupt_initinal:
  2907                           	opt stack 0
  2908                           tblptru	equ	0xFF8
  2909                           tblptrh	equ	0xFF7
  2910                           tblptrl	equ	0xFF6
  2911                           tablat	equ	0xFF5
  2912                           intcon	equ	0xFF2
  2913                           postinc0	equ	0xFEE
  2914                           wreg	equ	0xFE8
  2915                           postdec1	equ	0xFE5
  2916                           fsr1l	equ	0xFE1
  2917                           
  2918 ;; *************** function _timer_2_initial *****************
  2919 ;; Defined at:
  2920 ;;		line 46 in file "harwave/initial.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;		None
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, status,2
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2934 ;;      Params:         0       0       0       0       0       0       0
  2935 ;;      Locals:         0       0       0       0       0       0       0
  2936 ;;      Temps:          0       0       0       0       0       0       0
  2937 ;;      Totals:         0       0       0       0       0       0       0
  2938 ;;Total ram usage:        0 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    1
  2941 ;; This function calls:
  2942 ;;		Nothing
  2943 ;; This function is called by:
  2944 ;;		_main
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text2
  2949  0018EC                     __ptext2:
  2950                           	opt stack 0
  2951  0018EC                     _timer_2_initial:
  2952                           	opt stack 29
  2953                           
  2954                           ;initial.c: 48: PR2 = 249;
  2955                           
  2956                           ;incstack = 0
  2957  0018EC  0EF9               	movlw	249
  2958  0018EE  6ECB               	movwf	4043,c	;volatile
  2959                           
  2960                           ;initial.c: 49: T2CONbits.T2OUTPS=0b1001;
  2961  0018F0  50CA               	movf	4042,w,c	;volatile
  2962  0018F2  0B87               	andlw	-121
  2963  0018F4  0948               	iorlw	72
  2964  0018F6  6ECA               	movwf	4042,c	;volatile
  2965                           
  2966                           ;initial.c: 50: T2CONbits.T2CKPS=0b01;
  2967  0018F8  50CA               	movf	4042,w,c	;volatile
  2968  0018FA  0BFC               	andlw	-4
  2969  0018FC  0901               	iorlw	1
  2970  0018FE  6ECA               	movwf	4042,c	;volatile
  2971                           
  2972                           ;initial.c: 51: T2CONbits.TMR2ON=0;
  2973  001900  94CA               	bcf	4042,2,c	;volatile
  2974  001902  0012               	return		;funcret
  2975  001904                     __end_of_timer_2_initial:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           intcon	equ	0xFF2
  2982                           postinc0	equ	0xFEE
  2983                           wreg	equ	0xFE8
  2984                           postdec1	equ	0xFE5
  2985                           fsr1l	equ	0xFE1
  2986                           
  2987 ;; *************** function _oclillator_initial *****************
  2988 ;; Defined at:
  2989 ;;		line 13 in file "harwave/initial.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;		None
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		None
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3003 ;;      Params:         0       0       0       0       0       0       0
  3004 ;;      Locals:         0       0       0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0
  3006 ;;      Totals:         0       0       0       0       0       0       0
  3007 ;;Total ram usage:        0 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    1
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_main
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text3
  3018  00197C                     __ptext3:
  3019                           	opt stack 0
  3020  00197C                     _oclillator_initial:
  3021                           	opt stack 29
  3022                           
  3023                           ;initial.c: 15: OSCCONbits.IOFS=0;
  3024                           
  3025                           ;incstack = 0
  3026  00197C  94D3               	bcf	4051,2,c	;volatile
  3027                           
  3028                           ;initial.c: 16: OSCCONbits.SCS0=0;
  3029  00197E  90D3               	bcf	4051,0,c	;volatile
  3030                           
  3031                           ;initial.c: 17: OSCCONbits.SCS1=0;
  3032  001980  92D3               	bcf	4051,1,c	;volatile
  3033  001982  0012               	return		;funcret
  3034  001984                     __end_of_oclillator_initial:
  3035                           	opt stack 0
  3036                           tblptru	equ	0xFF8
  3037                           tblptrh	equ	0xFF7
  3038                           tblptrl	equ	0xFF6
  3039                           tablat	equ	0xFF5
  3040                           intcon	equ	0xFF2
  3041                           postinc0	equ	0xFEE
  3042                           wreg	equ	0xFE8
  3043                           postdec1	equ	0xFE5
  3044                           fsr1l	equ	0xFE1
  3045                           
  3046 ;; *************** function _memset *****************
  3047 ;; Defined at:
  3048 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memset.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  p1              2   17[COMRAM] PTR void 
  3051 ;;		 -> strEsp8266_Fram_Record(52), 
  3052 ;;  c               2   19[COMRAM] int 
  3053 ;;  n               2   21[COMRAM] unsigned int 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  p               2   23[COMRAM] PTR unsigned char 
  3056 ;;		 -> strEsp8266_Fram_Record(52), 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  2   17[COMRAM] PTR void 
  3059 ;; Registers used:
  3060 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3066 ;;      Params:         6       0       0       0       0       0       0
  3067 ;;      Locals:         2       0       0       0       0       0       0
  3068 ;;      Temps:          0       0       0       0       0       0       0
  3069 ;;      Totals:         8       0       0       0       0       0       0
  3070 ;;Total ram usage:        8 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    1
  3073 ;; This function calls:
  3074 ;;		Nothing
  3075 ;; This function is called by:
  3076 ;;		_main
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text4
  3081  001778                     __ptext4:
  3082                           	opt stack 0
  3083  001778                     _memset:
  3084                           	opt stack 29
  3085                           
  3086                           ;incstack = 0
  3087  001778  C012  F018         	movff	memset@p1,memset@p
  3088  00177C  C013  F019         	movff	memset@p1+1,memset@p+1
  3089  001780  D008               	goto	l3402
  3090  001782                     l3398:
  3091  001782  C018  FFD9         	movff	memset@p,fsr2l
  3092  001786  C019  FFDA         	movff	memset@p+1,fsr2h
  3093  00178A  C014  FFDF         	movff	memset@c,indf2
  3094  00178E  4A18               	infsnz	memset@p,f,c
  3095  001790  2A19               	incf	memset@p+1,f,c
  3096  001792                     l3402:
  3097  001792  0616               	decf	memset@n,f,c
  3098  001794  A0D8               	btfss	status,0,c
  3099  001796  0617               	decf	memset@n+1,f,c
  3100  001798  2816               	incf	memset@n,w,c
  3101  00179A  E1F3               	bnz	l3398
  3102  00179C  2817               	incf	memset@n+1,w,c
  3103  00179E  B4D8               	btfsc	status,2,c
  3104  0017A0  0012               	return	
  3105  0017A2  D7EF               	goto	l3398
  3106  0017A4                     __end_of_memset:
  3107                           	opt stack 0
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           intcon	equ	0xFF2
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           postdec1	equ	0xFE5
  3116                           fsr1l	equ	0xFE1
  3117                           indf2	equ	0xFDF
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function _initial_UART *****************
  3123 ;; Defined at:
  3124 ;;		line 36 in file "harwave/UART.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, status,2
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3138 ;;      Params:         0       0       0       0       0       0       0
  3139 ;;      Locals:         0       0       0       0       0       0       0
  3140 ;;      Temps:          0       0       0       0       0       0       0
  3141 ;;      Totals:         0       0       0       0       0       0       0
  3142 ;;Total ram usage:        0 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    1
  3145 ;; This function calls:
  3146 ;;		Nothing
  3147 ;; This function is called by:
  3148 ;;		_main
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text5
  3153  00181C                     __ptext5:
  3154                           	opt stack 0
  3155  00181C                     _initial_UART:
  3156                           	opt stack 29
  3157                           
  3158                           ;UART.c: 37: TXSTAbits.SYNC=0;
  3159                           
  3160                           ;incstack = 0
  3161  00181C  98AC               	bcf	4012,4,c	;volatile
  3162                           
  3163                           ;UART.c: 38: TXSTAbits.TX9=0;
  3164  00181E  9CAC               	bcf	4012,6,c	;volatile
  3165                           
  3166                           ;UART.c: 39: RCSTAbits.SPEN=1;
  3167  001820  8EAB               	bsf	4011,7,c	;volatile
  3168                           
  3169                           ;UART.c: 40: PIE1bits.TX1IE=0;
  3170  001822  989D               	bcf	3997,4,c	;volatile
  3171                           
  3172                           ;UART.c: 41: TXSTAbits.TXEN=1;
  3173  001824  8AAC               	bsf	4012,5,c	;volatile
  3174                           
  3175                           ;UART.c: 43: RCONbits.IPEN=1;
  3176  001826  8ED0               	bsf	4048,7,c	;volatile
  3177                           
  3178                           ;UART.c: 44: INTCONbits.GIE=1;
  3179  001828  8EF2               	bsf	intcon,7,c	;volatile
  3180                           
  3181                           ;UART.c: 45: INTCONbits.PEIE=1;
  3182  00182A  8CF2               	bsf	intcon,6,c	;volatile
  3183                           
  3184                           ;UART.c: 47: RCSTAbits.CREN=1;
  3185  00182C  88AB               	bsf	4011,4,c	;volatile
  3186                           
  3187                           ;UART.c: 48: PIE1bits.RCIE=1;
  3188  00182E  8A9D               	bsf	3997,5,c	;volatile
  3189                           
  3190                           ;UART.c: 49: RCSTAbits.RC9 = 0;
  3191  001830  9CAB               	bcf	4011,6,c	;volatile
  3192                           
  3193                           ;UART.c: 50: TXSTAbits.BRGH=1;
  3194  001832  84AC               	bsf	4012,2,c	;volatile
  3195                           
  3196                           ;UART.c: 51: BAUDCONbits.BRG16=1;
  3197  001834  86B8               	bsf	4024,3,c	;volatile
  3198                           
  3199                           ;UART.c: 52: SPBRGH=0;
  3200  001836  0E00               	movlw	0
  3201  001838  6EB0               	movwf	4016,c	;volatile
  3202                           
  3203                           ;UART.c: 53: SPBRG=86;
  3204  00183A  0E56               	movlw	86
  3205  00183C  6EAF               	movwf	4015,c	;volatile
  3206  00183E  0012               	return		;funcret
  3207  001840                     __end_of_initial_UART:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           intcon	equ	0xFF2
  3214                           postinc0	equ	0xFEE
  3215                           wreg	equ	0xFE8
  3216                           postdec1	equ	0xFE5
  3217                           fsr1l	equ	0xFE1
  3218                           indf2	equ	0xFDF
  3219                           fsr2h	equ	0xFDA
  3220                           fsr2l	equ	0xFD9
  3221                           status	equ	0xFD8
  3222                           
  3223 ;; *************** function _PCA9685_init *****************
  3224 ;; Defined at:
  3225 ;;		line 19 in file "harwave/initial.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;		None
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg, status,2, status,0, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3239 ;;      Params:         0       0       0       0       0       0       0
  3240 ;;      Locals:         0       0       0       0       0       0       0
  3241 ;;      Temps:          0       0       0       0       0       0       0
  3242 ;;      Totals:         0       0       0       0       0       0       0
  3243 ;;Total ram usage:        0 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    6
  3246 ;; This function calls:
  3247 ;;		_IIC_Init
  3248 ;;		_PCA9685_writeOneByte
  3249 ;; This function is called by:
  3250 ;;		_main
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text6
  3255  001840                     __ptext6:
  3256                           	opt stack 0
  3257  001840                     _PCA9685_init:
  3258                           	opt stack 24
  3259                           
  3260                           ;initial.c: 20: IIC_Init();
  3261                           
  3262                           ;incstack = 0
  3263  001840  EC56  F00C         	call	_IIC_Init	;wreg free
  3264                           
  3265                           ;initial.c: 21: PCA9685_writeOneByte(0x00,0x11);
  3266  001844  0E11               	movlw	17
  3267  001846  6E18               	movwf	PCA9685_writeOneByte@data,c
  3268  001848  0E00               	movlw	0
  3269  00184A  EC88  F00B         	call	_PCA9685_writeOneByte
  3270                           
  3271                           ;initial.c: 22: PCA9685_writeOneByte(0xFE,(25000000/4096/267)-1);
  3272  00184E  0E15               	movlw	21
  3273  001850  6E18               	movwf	PCA9685_writeOneByte@data,c
  3274  001852  0EFE               	movlw	254
  3275  001854  EC88  F00B         	call	_PCA9685_writeOneByte
  3276                           
  3277                           ;initial.c: 23: PCA9685_writeOneByte(0x00,0x01);
  3278  001858  0E01               	movlw	1
  3279  00185A  6E18               	movwf	PCA9685_writeOneByte@data,c
  3280  00185C  0E00               	movlw	0
  3281  00185E  EC88  F00B         	call	_PCA9685_writeOneByte
  3282  001862  0012               	return		;funcret
  3283  001864                     __end_of_PCA9685_init:
  3284                           	opt stack 0
  3285                           tblptru	equ	0xFF8
  3286                           tblptrh	equ	0xFF7
  3287                           tblptrl	equ	0xFF6
  3288                           tablat	equ	0xFF5
  3289                           intcon	equ	0xFF2
  3290                           postinc0	equ	0xFEE
  3291                           wreg	equ	0xFE8
  3292                           postdec1	equ	0xFE5
  3293                           fsr1l	equ	0xFE1
  3294                           indf2	equ	0xFDF
  3295                           fsr2h	equ	0xFDA
  3296                           fsr2l	equ	0xFD9
  3297                           status	equ	0xFD8
  3298                           
  3299 ;; *************** function _IIC_Init *****************
  3300 ;; Defined at:
  3301 ;;		line 5 in file "harwave/softIIC.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;		None
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;		None
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      void 
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0, cstack
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3315 ;;      Params:         0       0       0       0       0       0       0
  3316 ;;      Locals:         0       0       0       0       0       0       0
  3317 ;;      Temps:          0       0       0       0       0       0       0
  3318 ;;      Totals:         0       0       0       0       0       0       0
  3319 ;;Total ram usage:        0 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    3
  3322 ;; This function calls:
  3323 ;;		_delay_us
  3324 ;; This function is called by:
  3325 ;;		_PCA9685_init
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328                           
  3329                           	psect	text7
  3330  0018AC                     __ptext7:
  3331                           	opt stack 0
  3332  0018AC                     _IIC_Init:
  3333                           	opt stack 26
  3334                           
  3335                           ;softIIC.c: 8: TRISBbits.TRISB1 = 0;
  3336                           
  3337                           ;incstack = 0
  3338  0018AC  9293               	bcf	3987,1,c	;volatile
  3339                           
  3340                           ;softIIC.c: 9: TRISBbits.TRISB0 = 0;
  3341  0018AE  9093               	bcf	3987,0,c	;volatile
  3342                           
  3343                           ;softIIC.c: 12: PORTBbits.RB1 = 1;
  3344  0018B0  8281               	bsf	3969,1,c	;volatile
  3345                           
  3346                           ;softIIC.c: 13: delay_us(2);
  3347  0018B2  0E00               	movlw	0
  3348  0018B4  6E14               	movwf	delay_us@us+1,c
  3349  0018B6  0E02               	movlw	2
  3350  0018B8  6E13               	movwf	delay_us@us,c
  3351  0018BA  EC98  F00C         	call	_delay_us	;wreg free
  3352                           
  3353                           ;softIIC.c: 14: PORTBbits.RB0 = 1;
  3354  0018BE  8081               	bsf	3969,0,c	;volatile
  3355                           
  3356                           ;softIIC.c: 15: delay_us(2);
  3357  0018C0  0E00               	movlw	0
  3358  0018C2  6E14               	movwf	delay_us@us+1,c
  3359  0018C4  0E02               	movlw	2
  3360  0018C6  6E13               	movwf	delay_us@us,c
  3361  0018C8  EC98  F00C         	call	_delay_us	;wreg free
  3362  0018CC  0012               	return		;funcret
  3363  0018CE                     __end_of_IIC_Init:
  3364                           	opt stack 0
  3365                           tblptru	equ	0xFF8
  3366                           tblptrh	equ	0xFF7
  3367                           tblptrl	equ	0xFF6
  3368                           tablat	equ	0xFF5
  3369                           intcon	equ	0xFF2
  3370                           postinc0	equ	0xFEE
  3371                           wreg	equ	0xFE8
  3372                           postdec1	equ	0xFE5
  3373                           fsr1l	equ	0xFE1
  3374                           indf2	equ	0xFDF
  3375                           fsr2h	equ	0xFDA
  3376                           fsr2l	equ	0xFD9
  3377                           status	equ	0xFD8
  3378                           
  3379 ;; *************** function _GPIO_initial *****************
  3380 ;; Defined at:
  3381 ;;		line 5 in file "harwave/initial.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;		None
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3395 ;;      Params:         0       0       0       0       0       0       0
  3396 ;;      Locals:         0       0       0       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0       0       0
  3398 ;;      Totals:         0       0       0       0       0       0       0
  3399 ;;Total ram usage:        0 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    1
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_main
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text8
  3410  001966                     __ptext8:
  3411                           	opt stack 0
  3412  001966                     _GPIO_initial:
  3413                           	opt stack 29
  3414                           
  3415                           ;initial.c: 7: TRISD = 0x00;
  3416                           
  3417                           ;incstack = 0
  3418  001966  0E00               	movlw	0
  3419  001968  6E95               	movwf	3989,c	;volatile
  3420                           
  3421                           ;initial.c: 8: LATD = 0x00;
  3422  00196A  0E00               	movlw	0
  3423  00196C  6E8C               	movwf	3980,c	;volatile
  3424                           
  3425                           ;initial.c: 9: TRISAbits.RA0=0;
  3426  00196E  9092               	bcf	3986,0,c	;volatile
  3427                           
  3428                           ;initial.c: 10: LATAbits.LA0=0;
  3429  001970  9089               	bcf	3977,0,c	;volatile
  3430  001972  0012               	return		;funcret
  3431  001974                     __end_of_GPIO_initial:
  3432                           	opt stack 0
  3433                           tblptru	equ	0xFF8
  3434                           tblptrh	equ	0xFF7
  3435                           tblptrl	equ	0xFF6
  3436                           tablat	equ	0xFF5
  3437                           intcon	equ	0xFF2
  3438                           postinc0	equ	0xFEE
  3439                           wreg	equ	0xFE8
  3440                           postdec1	equ	0xFE5
  3441                           fsr1l	equ	0xFE1
  3442                           indf2	equ	0xFDF
  3443                           fsr2h	equ	0xFDA
  3444                           fsr2l	equ	0xFD9
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _ESP8266_client *****************
  3448 ;; Defined at:
  3449 ;;		line 246 in file "harwave/UART.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;		None
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3463 ;;      Params:         0       0       0       0       0       0       0
  3464 ;;      Locals:         0       0       0       0       0       0       0
  3465 ;;      Temps:          0       0       0       0       0       0       0
  3466 ;;      Totals:         0       0       0       0       0       0       0
  3467 ;;Total ram usage:        0 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    6
  3470 ;; This function calls:
  3471 ;;		_ESP8266_AT_Test
  3472 ;;		_ESP8266_Cmd
  3473 ;;		_ESP8266_JoinAP
  3474 ;;		_ESP8266_Link_Server
  3475 ;;		_ESP8266_Rst
  3476 ;;		_STA_MODE
  3477 ;; This function is called by:
  3478 ;;		_main
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           	psect	text9
  3483  0010F6                     __ptext9:
  3484                           	opt stack 0
  3485  0010F6                     _ESP8266_client:
  3486                           	opt stack 24
  3487                           
  3488                           ;UART.c: 247: ESP8266_Rst ();
  3489                           
  3490                           ;incstack = 0
  3491  0010F6  ECE8  F00B         	call	_ESP8266_Rst	;wreg free
  3492                           
  3493                           ;UART.c: 248: ESP8266_AT_Test () ;
  3494  0010FA  ECD2  F00B         	call	_ESP8266_AT_Test	;wreg free
  3495                           
  3496                           ;UART.c: 249: ESP8266_Cmd ( (void *)"AT+CWQAP\r\n",(void *)"OK", 0 , 500 );
  3497  0010FE  0E80               	movlw	low STR_49
  3498  001100  6E25               	movwf	ESP8266_Cmd@cmd,c
  3499  001102  0E7F               	movlw	high STR_49
  3500  001104  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3501  001106  0EC1               	movlw	low (STR_3+5)
  3502  001108  6E27               	movwf	ESP8266_Cmd@reply1,c
  3503  00110A  0E7F               	movlw	high (STR_3+5)
  3504  00110C  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3505  00110E  0E00               	movlw	0
  3506  001110  6E29               	movwf	ESP8266_Cmd@reply2,c
  3507  001112  0E00               	movlw	0
  3508  001114  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3509  001116  0E01               	movlw	1
  3510  001118  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3511  00111A  0EF4               	movlw	244
  3512  00111C  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3513  00111E  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  3514                           
  3515                           ;UART.c: 250: STA_MODE();
  3516  001122  ECA3  F00B         	call	_STA_MODE	;wreg free
  3517  001126                     l4340:
  3518  001126  0EEA               	movlw	low STR_38
  3519  001128  6E2E               	movwf	ESP8266_JoinAP@pSSID,c
  3520  00112A  0E7F               	movlw	high STR_38
  3521  00112C  6E2F               	movwf	ESP8266_JoinAP@pSSID+1,c
  3522  00112E  0E8B               	movlw	low STR_39
  3523  001130  6E30               	movwf	ESP8266_JoinAP@pPassWord,c
  3524  001132  0E7F               	movlw	high STR_39
  3525  001134  6E31               	movwf	ESP8266_JoinAP@pPassWord+1,c
  3526  001136  ECD0  F00A         	call	_ESP8266_JoinAP	;wreg free
  3527  00113A  0900               	iorlw	0
  3528  00113C  B4D8               	btfsc	status,2,c
  3529  00113E  D7F3               	goto	l4340
  3530  001140                     l4342:
  3531  001140  0E05               	movlw	low STR_53
  3532  001142  6E25               	movwf	ESP8266_Cmd@cmd,c
  3533  001144  0E7F               	movlw	high STR_53
  3534  001146  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3535  001148  0EC1               	movlw	low (STR_3+5)
  3536  00114A  6E27               	movwf	ESP8266_Cmd@reply1,c
  3537  00114C  0E7F               	movlw	high (STR_3+5)
  3538  00114E  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3539  001150  0E00               	movlw	0
  3540  001152  6E29               	movwf	ESP8266_Cmd@reply2,c
  3541  001154  0E00               	movlw	0
  3542  001156  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3543  001158  0E01               	movlw	1
  3544  00115A  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3545  00115C  0EF4               	movlw	244
  3546  00115E  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3547  001160  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  3548  001164  0900               	iorlw	0
  3549  001166  B4D8               	btfsc	status,2,c
  3550  001168  D7EB               	goto	l4342
  3551  00116A                     l4344:
  3552  00116A  0E14               	movlw	low STR_41
  3553  00116C  6E25               	movwf	ESP8266_Cmd@cmd,c
  3554  00116E  0E7F               	movlw	high STR_41
  3555  001170  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3556  001172  0EC1               	movlw	low (STR_3+5)
  3557  001174  6E27               	movwf	ESP8266_Cmd@reply1,c
  3558  001176  0E7F               	movlw	high (STR_3+5)
  3559  001178  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3560  00117A  0E00               	movlw	0
  3561  00117C  6E29               	movwf	ESP8266_Cmd@reply2,c
  3562  00117E  0E00               	movlw	0
  3563  001180  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3564  001182  0E01               	movlw	1
  3565  001184  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3566  001186  0EF4               	movlw	244
  3567  001188  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3568  00118A  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  3569  00118E  0900               	iorlw	0
  3570  001190  B4D8               	btfsc	status,2,c
  3571  001192  D7EB               	goto	l4344
  3572  001194                     l4346:
  3573  001194  0E74               	movlw	low STR_57
  3574  001196  6E2E               	movwf	ESP8266_Link_Server@ip,c
  3575  001198  0E7F               	movlw	high STR_57
  3576  00119A  6E2F               	movwf	ESP8266_Link_Server@ip+1,c
  3577  00119C  0EE5               	movlw	low STR_58
  3578  00119E  6E30               	movwf	ESP8266_Link_Server@ComNum,c
  3579  0011A0  0E7F               	movlw	high STR_58
  3580  0011A2  6E31               	movwf	ESP8266_Link_Server@ComNum+1,c
  3581  0011A4  0E00               	movlw	0
  3582  0011A6  6E33               	movwf	ESP8266_Link_Server@id+1,c
  3583  0011A8  0E07               	movlw	7
  3584  0011AA  6E32               	movwf	ESP8266_Link_Server@id,c
  3585  0011AC  0E00               	movlw	0
  3586  0011AE  EC1D  F007         	call	_ESP8266_Link_Server
  3587  0011B2  0900               	iorlw	0
  3588  0011B4  A4D8               	btfss	status,2,c
  3589  0011B6  0012               	return	
  3590  0011B8  D7ED               	goto	l4346
  3591  0011BA                     __end_of_ESP8266_client:
  3592                           	opt stack 0
  3593                           tblptru	equ	0xFF8
  3594                           tblptrh	equ	0xFF7
  3595                           tblptrl	equ	0xFF6
  3596                           tablat	equ	0xFF5
  3597                           intcon	equ	0xFF2
  3598                           postinc0	equ	0xFEE
  3599                           wreg	equ	0xFE8
  3600                           postdec1	equ	0xFE5
  3601                           fsr1l	equ	0xFE1
  3602                           indf2	equ	0xFDF
  3603                           fsr2h	equ	0xFDA
  3604                           fsr2l	equ	0xFD9
  3605                           status	equ	0xFD8
  3606                           
  3607 ;; *************** function _STA_MODE *****************
  3608 ;; Defined at:
  3609 ;;		line 230 in file "harwave/UART.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;		None
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;		None
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3623 ;;      Params:         0       0       0       0       0       0       0
  3624 ;;      Locals:         0       0       0       0       0       0       0
  3625 ;;      Temps:          0       0       0       0       0       0       0
  3626 ;;      Totals:         0       0       0       0       0       0       0
  3627 ;;Total ram usage:        0 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    5
  3630 ;; This function calls:
  3631 ;;		_ESP8266_Cmd
  3632 ;;		_ESP8266_Net_Mode_Choose
  3633 ;; This function is called by:
  3634 ;;		_ESP8266_client
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text10
  3639  001746                     __ptext10:
  3640                           	opt stack 0
  3641  001746                     _STA_MODE:
  3642                           	opt stack 24
  3643                           
  3644                           ;UART.c: 231: ESP8266_Net_Mode_Choose ( STA ) ;
  3645                           
  3646                           ;incstack = 0
  3647  001746  0E00               	movlw	0
  3648  001748  EC25  F009         	call	_ESP8266_Net_Mode_Choose
  3649  00174C                     l4264:
  3650  00174C  0E5A               	movlw	low STR_32
  3651  00174E  6E25               	movwf	ESP8266_Cmd@cmd,c
  3652  001750  0E7F               	movlw	high STR_32
  3653  001752  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3654  001754  0E95               	movlw	low STR_36
  3655  001756  6E27               	movwf	ESP8266_Cmd@reply1,c
  3656  001758  0E7F               	movlw	high STR_36
  3657  00175A  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3658  00175C  0EC1               	movlw	low (STR_3+5)
  3659  00175E  6E29               	movwf	ESP8266_Cmd@reply2,c
  3660  001760  0E7F               	movlw	high (STR_3+5)
  3661  001762  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3662  001764  0E00               	movlw	0
  3663  001766  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3664  001768  0E64               	movlw	100
  3665  00176A  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3666  00176C  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  3667  001770  0900               	iorlw	0
  3668  001772  A4D8               	btfss	status,2,c
  3669  001774  0012               	return	
  3670  001776  D7EA               	goto	l4264
  3671  001778                     __end_of_STA_MODE:
  3672                           	opt stack 0
  3673                           tblptru	equ	0xFF8
  3674                           tblptrh	equ	0xFF7
  3675                           tblptrl	equ	0xFF6
  3676                           tablat	equ	0xFF5
  3677                           intcon	equ	0xFF2
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           postdec1	equ	0xFE5
  3681                           fsr1l	equ	0xFE1
  3682                           indf2	equ	0xFDF
  3683                           fsr2h	equ	0xFDA
  3684                           fsr2l	equ	0xFD9
  3685                           status	equ	0xFD8
  3686                           
  3687 ;; *************** function _ESP8266_Net_Mode_Choose *****************
  3688 ;; Defined at:
  3689 ;;		line 148 in file "harwave/UART.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;  MODE            1    wreg     enum E3772
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;  MODE            1   45[COMRAM] enum E3772
  3694 ;; Return value:  Size  Location     Type
  3695 ;;                  1    wreg      unsigned char 
  3696 ;; Registers used:
  3697 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3703 ;;      Params:         0       0       0       0       0       0       0
  3704 ;;      Locals:         1       0       0       0       0       0       0
  3705 ;;      Temps:          0       0       0       0       0       0       0
  3706 ;;      Totals:         1       0       0       0       0       0       0
  3707 ;;Total ram usage:        1 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; Hardware stack levels required when called:    4
  3710 ;; This function calls:
  3711 ;;		_ESP8266_Cmd
  3712 ;; This function is called by:
  3713 ;;		_STA_MODE
  3714 ;;		_AP_MODE
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text11
  3719  00124A                     __ptext11:
  3720                           	opt stack 0
  3721  00124A                     _ESP8266_Net_Mode_Choose:
  3722                           	opt stack 24
  3723                           
  3724                           ;incstack = 0
  3725                           ;ESP8266_Net_Mode_Choose@MODE stored from wreg
  3726  00124A  6E2E               	movwf	ESP8266_Net_Mode_Choose@MODE,c
  3727                           
  3728                           ;UART.c: 151: switch ( MODE )
  3729  00124C  D039               	goto	l4184
  3730  00124E                     l4170:
  3731                           
  3732                           ;UART.c: 154: return ESP8266_Cmd ( (void*)"AT+CWMODE=1\r\n", (void*)"OK", 0, 2500 );
  3733                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  3734  00124E  0E22               	movlw	low STR_9
  3735  001250  6E25               	movwf	ESP8266_Cmd@cmd,c
  3736  001252  0E7F               	movlw	high STR_9
  3737  001254  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3738  001256  0EC1               	movlw	low (STR_3+5)
  3739  001258  6E27               	movwf	ESP8266_Cmd@reply1,c
  3740  00125A  0E7F               	movlw	high (STR_3+5)
  3741  00125C  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3742  00125E  0E00               	movlw	0
  3743  001260  6E29               	movwf	ESP8266_Cmd@reply2,c
  3744  001262  0E00               	movlw	0
  3745  001264  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3746  001266  0E09               	movlw	9
  3747  001268  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3748  00126A  0EC4               	movlw	196
  3749  00126C  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3750  00126E  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  3751  001272  0012               	return	
  3752  001274                     l4174:
  3753                           
  3754                           ;UART.c: 157: return ESP8266_Cmd ( (void*)"AT+CWMODE=2\r\n", (void*)"OK", 0, 2500 );
  3755                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  3756  001274  0E3E               	movlw	low STR_11
  3757  001276  6E25               	movwf	ESP8266_Cmd@cmd,c
  3758  001278  0E7F               	movlw	high STR_11
  3759  00127A  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3760  00127C  0EC1               	movlw	low (STR_3+5)
  3761  00127E  6E27               	movwf	ESP8266_Cmd@reply1,c
  3762  001280  0E7F               	movlw	high (STR_3+5)
  3763  001282  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3764  001284  0E00               	movlw	0
  3765  001286  6E29               	movwf	ESP8266_Cmd@reply2,c
  3766  001288  0E00               	movlw	0
  3767  00128A  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3768  00128C  0E09               	movlw	9
  3769  00128E  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3770  001290  0EC4               	movlw	196
  3771  001292  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3772  001294  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  3773  001298  0012               	return	
  3774  00129A                     l4178:
  3775                           
  3776                           ;UART.c: 160: return ESP8266_Cmd ( (void*)"AT+CWMODE=3\r\n", (void*)"OK", 0, 2500 );
  3777                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  3778  00129A  0E4C               	movlw	low STR_13
  3779  00129C  6E25               	movwf	ESP8266_Cmd@cmd,c
  3780  00129E  0E7F               	movlw	high STR_13
  3781  0012A0  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3782  0012A2  0EC1               	movlw	low (STR_3+5)
  3783  0012A4  6E27               	movwf	ESP8266_Cmd@reply1,c
  3784  0012A6  0E7F               	movlw	high (STR_3+5)
  3785  0012A8  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3786  0012AA  0E00               	movlw	0
  3787  0012AC  6E29               	movwf	ESP8266_Cmd@reply2,c
  3788  0012AE  0E00               	movlw	0
  3789  0012B0  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3790  0012B2  0E09               	movlw	9
  3791  0012B4  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3792  0012B6  0EC4               	movlw	196
  3793  0012B8  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3794  0012BA  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  3795                           
  3796                           ;UART.c: 164: }
  3797                           
  3798                           ;UART.c: 163: return 0;
  3799                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  3800                           
  3801                           ;UART.c: 162: default:
  3802  0012BE  0012               	return	
  3803  0012C0                     l4184:
  3804  0012C0  502E               	movf	ESP8266_Net_Mode_Choose@MODE,w,c
  3805                           
  3806                           ; Switch size 1, requested type "space"
  3807                           ; Number of cases is 3, Range of values is 0 to 2
  3808                           ; switch strategies available:
  3809                           ; Name         Instructions Cycles
  3810                           ; simple_byte           10     6 (average)
  3811                           ;	Chosen strategy is simple_byte
  3812  0012C2  0A00               	xorlw	0	; case 0
  3813  0012C4  B4D8               	btfsc	status,2,c
  3814  0012C6  D7C3               	goto	l4170
  3815  0012C8  0A01               	xorlw	1	; case 1
  3816  0012CA  B4D8               	btfsc	status,2,c
  3817  0012CC  D7D3               	goto	l4174
  3818  0012CE  0A03               	xorlw	3	; case 2
  3819  0012D0  A4D8               	btfss	status,2,c
  3820  0012D2  0012               	return	
  3821  0012D4  D7E2               	goto	l4178
  3822  0012D6                     __end_of_ESP8266_Net_Mode_Choose:
  3823                           	opt stack 0
  3824                           tblptru	equ	0xFF8
  3825                           tblptrh	equ	0xFF7
  3826                           tblptrl	equ	0xFF6
  3827                           tablat	equ	0xFF5
  3828                           intcon	equ	0xFF2
  3829                           postinc0	equ	0xFEE
  3830                           wreg	equ	0xFE8
  3831                           postdec1	equ	0xFE5
  3832                           fsr1l	equ	0xFE1
  3833                           indf2	equ	0xFDF
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _ESP8266_Rst *****************
  3839 ;; Defined at:
  3840 ;;		line 135 in file "harwave/UART.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;		None
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      void 
  3847 ;; Registers used:
  3848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3854 ;;      Params:         0       0       0       0       0       0       0
  3855 ;;      Locals:         0       0       0       0       0       0       0
  3856 ;;      Temps:          0       0       0       0       0       0       0
  3857 ;;      Totals:         0       0       0       0       0       0       0
  3858 ;;Total ram usage:        0 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    4
  3861 ;; This function calls:
  3862 ;;		_ESP8266_Cmd
  3863 ;; This function is called by:
  3864 ;;		_ESP8266_client
  3865 ;;		_ESP8266_Server
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text12
  3870  0017D0                     __ptext12:
  3871                           	opt stack 0
  3872  0017D0                     _ESP8266_Rst:
  3873                           	opt stack 25
  3874                           
  3875                           ;UART.c: 138: ESP8266_Cmd ( (void*)"AT+RST\r\n", (void*)"OK", (void*)"ready", 2500 );
  3876                           
  3877                           ;incstack = 0
  3878  0017D0  0EB3               	movlw	low STR_6
  3879  0017D2  6E25               	movwf	ESP8266_Cmd@cmd,c
  3880  0017D4  0E7F               	movlw	high STR_6
  3881  0017D6  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3882  0017D8  0EC1               	movlw	low (STR_3+5)
  3883  0017DA  6E27               	movwf	ESP8266_Cmd@reply1,c
  3884  0017DC  0E7F               	movlw	high (STR_3+5)
  3885  0017DE  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3886  0017E0  0EDA               	movlw	low STR_8
  3887  0017E2  6E29               	movwf	ESP8266_Cmd@reply2,c
  3888  0017E4  0E7F               	movlw	high STR_8
  3889  0017E6  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3890  0017E8  0E09               	movlw	9
  3891  0017EA  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3892  0017EC  0EC4               	movlw	196
  3893  0017EE  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3894  0017F0  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  3895  0017F4  0012               	return		;funcret
  3896  0017F6                     __end_of_ESP8266_Rst:
  3897                           	opt stack 0
  3898                           tblptru	equ	0xFF8
  3899                           tblptrh	equ	0xFF7
  3900                           tblptrl	equ	0xFF6
  3901                           tablat	equ	0xFF5
  3902                           intcon	equ	0xFF2
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           postdec1	equ	0xFE5
  3906                           fsr1l	equ	0xFE1
  3907                           indf2	equ	0xFDF
  3908                           fsr2h	equ	0xFDA
  3909                           fsr2l	equ	0xFD9
  3910                           status	equ	0xFD8
  3911                           
  3912 ;; *************** function _ESP8266_Link_Server *****************
  3913 ;; Defined at:
  3914 ;;		line 185 in file "harwave/UART.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;  enumE           1    wreg     enum E3769
  3917 ;;  ip              2   45[COMRAM] PTR unsigned char 
  3918 ;;		 -> STR_57(12), 
  3919 ;;  ComNum          2   47[COMRAM] PTR unsigned char 
  3920 ;;		 -> STR_58(5), 
  3921 ;;  id              2   49[COMRAM] int 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  enumE           1  220[BANK1 ] enum E3769
  3924 ;;  cCmd          120    0[BANK1 ] unsigned char [120]
  3925 ;;  cStr          100  120[BANK1 ] unsigned char [100]
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      unsigned char 
  3928 ;; Registers used:
  3929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3935 ;;      Params:         6       0       0       0       0       0       0
  3936 ;;      Locals:         0       0     221       0       0       0       0
  3937 ;;      Temps:          0       0       0       0       0       0       0
  3938 ;;      Totals:         6       0     221       0       0       0       0
  3939 ;;Total ram usage:      227 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    4
  3942 ;; This function calls:
  3943 ;;		_ESP8266_Cmd
  3944 ;;		_sprintf
  3945 ;; This function is called by:
  3946 ;;		_ESP8266_client
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           	psect	text13
  3951  000E3A                     __ptext13:
  3952                           	opt stack 0
  3953  000E3A                     _ESP8266_Link_Server:
  3954                           	opt stack 25
  3955                           
  3956                           ;incstack = 0
  3957                           ;ESP8266_Link_Server@enumE stored from wreg
  3958  000E3A  0101               	movlb	1	; () banked
  3959  000E3C  6FDC               	movwf	ESP8266_Link_Server@enumE& (0+255),b
  3960                           
  3961                           ;UART.c: 187: char cStr [100] = { 0 }, cCmd [120];
  3962  000E3E  EE23  F000         	lfsr	2,ESP8266_Link_Server@F4048
  3963  000E42  EE11  F078         	lfsr	1,ESP8266_Link_Server@cStr
  3964  000E46  0E63               	movlw	99
  3965  000E48                     u4241:
  3966  000E48  CFDB FFE3          	movff	plusw2,plusw1
  3967  000E4C  06E8               	decf	wreg,f,c
  3968  000E4E  E2FC               	bc	u4241
  3969                           
  3970                           ;UART.c: 189: switch ( enumE )
  3971  000E50  D02E               	goto	l4250
  3972  000E52                     l4244:
  3973                           
  3974                           ;UART.c: 192: sprintf ( cStr, (void*)"\"%s\",\"%s\",%s", "TCP", ip, ComNum );
  3975  000E52  0E78               	movlw	low ESP8266_Link_Server@cStr
  3976  000E54  6E1E               	movwf	sprintf@sp,c
  3977  000E56  0E01               	movlw	high ESP8266_Link_Server@cStr
  3978  000E58  6E1F               	movwf	sprintf@sp+1,c
  3979  000E5A  0E67               	movlw	low STR_20
  3980  000E5C  6E20               	movwf	sprintf@f,c
  3981  000E5E  0E7F               	movlw	high STR_20
  3982  000E60  6E21               	movwf	sprintf@f+1,c
  3983  000E62  0EEE               	movlw	low STR_21
  3984  000E64  6E22               	movwf	?_sprintf+4,c
  3985  000E66  0E7F               	movlw	high STR_21
  3986  000E68  6E23               	movwf	?_sprintf+5,c
  3987  000E6A  C02E  F024         	movff	ESP8266_Link_Server@ip,?_sprintf+6
  3988  000E6E  C02F  F025         	movff	ESP8266_Link_Server@ip+1,?_sprintf+7
  3989  000E72  C030  F026         	movff	ESP8266_Link_Server@ComNum,?_sprintf+8
  3990  000E76  C031  F027         	movff	ESP8266_Link_Server@ComNum+1,?_sprintf+9
  3991  000E7A  EC09  F000         	call	_sprintf	;wreg free
  3992                           
  3993                           ;UART.c: 193: break;
  3994  000E7E  D01F               	goto	l4252
  3995  000E80                     l4246:
  3996                           
  3997                           ;UART.c: 196: sprintf ( cStr, (void*)"\"%s\",\"%s\",%s", "UDP", ip, ComNum );
  3998  000E80  0E78               	movlw	low ESP8266_Link_Server@cStr
  3999  000E82  6E1E               	movwf	sprintf@sp,c
  4000  000E84  0E01               	movlw	high ESP8266_Link_Server@cStr
  4001  000E86  6E1F               	movwf	sprintf@sp+1,c
  4002  000E88  0E67               	movlw	low STR_20
  4003  000E8A  6E20               	movwf	sprintf@f,c
  4004  000E8C  0E7F               	movlw	high STR_20
  4005  000E8E  6E21               	movwf	sprintf@f+1,c
  4006  000E90  0EF2               	movlw	low STR_23
  4007  000E92  6E22               	movwf	?_sprintf+4,c
  4008  000E94  0E7F               	movlw	high STR_23
  4009  000E96  6E23               	movwf	?_sprintf+5,c
  4010  000E98  C02E  F024         	movff	ESP8266_Link_Server@ip,?_sprintf+6
  4011  000E9C  C02F  F025         	movff	ESP8266_Link_Server@ip+1,?_sprintf+7
  4012  000EA0  C030  F026         	movff	ESP8266_Link_Server@ComNum,?_sprintf+8
  4013  000EA4  C031  F027         	movff	ESP8266_Link_Server@ComNum+1,?_sprintf+9
  4014  000EA8  EC09  F000         	call	_sprintf	;wreg free
  4015                           
  4016                           ;UART.c: 201: }
  4017                           
  4018                           ;UART.c: 200: break;
  4019                           
  4020                           ;UART.c: 199: default:
  4021                           
  4022                           ;UART.c: 197: break;
  4023  000EAC  D008               	goto	l4252
  4024  000EAE                     l4250:
  4025  000EAE  0101               	movlb	1	; () banked
  4026  000EB0  51DC               	movf	ESP8266_Link_Server@enumE& (0+255),w,b
  4027                           
  4028                           ; Switch size 1, requested type "space"
  4029                           ; Number of cases is 2, Range of values is 0 to 1
  4030                           ; switch strategies available:
  4031                           ; Name         Instructions Cycles
  4032                           ; simple_byte            7     4 (average)
  4033                           ;	Chosen strategy is simple_byte
  4034  000EB2  0A00               	xorlw	0	; case 0
  4035  000EB4  B4D8               	btfsc	status,2,c
  4036  000EB6  D7CD               	goto	l4244
  4037  000EB8  0A01               	xorlw	1	; case 1
  4038  000EBA  B4D8               	btfsc	status,2,c
  4039  000EBC  D7E1               	goto	l4246
  4040  000EBE                     l4252:
  4041                           
  4042                           ;UART.c: 203: if ( id < 5 )
  4043  000EBE  BE33               	btfsc	ESP8266_Link_Server@id+1,7,c
  4044  000EC0  D006               	goto	l4254
  4045  000EC2  5033               	movf	ESP8266_Link_Server@id+1,w,c
  4046  000EC4  E117               	bnz	l4256
  4047  000EC6  0E05               	movlw	5
  4048  000EC8  5C32               	subwf	ESP8266_Link_Server@id,w,c
  4049  000ECA  B0D8               	btfsc	status,0,c
  4050  000ECC  D013               	goto	l4256
  4051  000ECE                     l4254:
  4052                           
  4053                           ;UART.c: 204: sprintf ( cCmd, (void*)"AT+CIPSTART=%d,%s\r\n", id, cStr);
  4054  000ECE  0E00               	movlw	low ESP8266_Link_Server@cCmd
  4055  000ED0  6E1E               	movwf	sprintf@sp,c
  4056  000ED2  0E01               	movlw	high ESP8266_Link_Server@cCmd
  4057  000ED4  6E1F               	movwf	sprintf@sp+1,c
  4058  000ED6  0E9C               	movlw	low STR_24
  4059  000ED8  6E20               	movwf	sprintf@f,c
  4060  000EDA  0E7E               	movlw	high STR_24
  4061  000EDC  6E21               	movwf	sprintf@f+1,c
  4062  000EDE  C032  F022         	movff	ESP8266_Link_Server@id,?_sprintf+4
  4063  000EE2  C033  F023         	movff	ESP8266_Link_Server@id+1,?_sprintf+5
  4064  000EE6  0E78               	movlw	low ESP8266_Link_Server@cStr
  4065  000EE8  6E24               	movwf	?_sprintf+6,c
  4066  000EEA  0E01               	movlw	high ESP8266_Link_Server@cStr
  4067  000EEC  6E25               	movwf	?_sprintf+7,c
  4068  000EEE  EC09  F000         	call	_sprintf	;wreg free
  4069  000EF2  D00E               	goto	l4258
  4070  000EF4                     l4256:
  4071                           
  4072                           ;UART.c: 206: else
  4073                           ;UART.c: 207: sprintf ( cCmd, (void*)"AT+CIPSTART=%s\r\n", cStr );
  4074  000EF4  0E00               	movlw	low ESP8266_Link_Server@cCmd
  4075  000EF6  6E1E               	movwf	sprintf@sp,c
  4076  000EF8  0E01               	movlw	high ESP8266_Link_Server@cCmd
  4077  000EFA  6E1F               	movwf	sprintf@sp+1,c
  4078  000EFC  0EE5               	movlw	low STR_25
  4079  000EFE  6E20               	movwf	sprintf@f,c
  4080  000F00  0E7E               	movlw	high STR_25
  4081  000F02  6E21               	movwf	sprintf@f+1,c
  4082  000F04  0E78               	movlw	low ESP8266_Link_Server@cStr
  4083  000F06  6E22               	movwf	?_sprintf+4,c
  4084  000F08  0E01               	movlw	high ESP8266_Link_Server@cStr
  4085  000F0A  6E23               	movwf	?_sprintf+5,c
  4086  000F0C  EC09  F000         	call	_sprintf	;wreg free
  4087  000F10                     l4258:
  4088                           
  4089                           ;UART.c: 209: return ESP8266_Cmd ( cCmd, (void*)"CONNECT",(void*)"ALREAY", 90 );
  4090  000F10  0E00               	movlw	low ESP8266_Link_Server@cCmd
  4091  000F12  6E25               	movwf	ESP8266_Cmd@cmd,c
  4092  000F14  0E01               	movlw	high ESP8266_Link_Server@cCmd
  4093  000F16  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4094  000F18  0EC4               	movlw	low STR_26
  4095  000F1A  6E27               	movwf	ESP8266_Cmd@reply1,c
  4096  000F1C  0E7F               	movlw	high STR_26
  4097  000F1E  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4098  000F20  0ED3               	movlw	low STR_27
  4099  000F22  6E29               	movwf	ESP8266_Cmd@reply2,c
  4100  000F24  0E7F               	movlw	high STR_27
  4101  000F26  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4102  000F28  0E00               	movlw	0
  4103  000F2A  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4104  000F2C  0E5A               	movlw	90
  4105  000F2E  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4106  000F30  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  4107  000F34  0012               	return	
  4108  000F36                     __end_of_ESP8266_Link_Server:
  4109                           	opt stack 0
  4110                           tblptru	equ	0xFF8
  4111                           tblptrh	equ	0xFF7
  4112                           tblptrl	equ	0xFF6
  4113                           tablat	equ	0xFF5
  4114                           intcon	equ	0xFF2
  4115                           postinc0	equ	0xFEE
  4116                           wreg	equ	0xFE8
  4117                           postdec1	equ	0xFE5
  4118                           plusw1	equ	0xFE3
  4119                           fsr1l	equ	0xFE1
  4120                           indf2	equ	0xFDF
  4121                           plusw2	equ	0xFDB
  4122                           fsr2h	equ	0xFDA
  4123                           fsr2l	equ	0xFD9
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function _ESP8266_JoinAP *****************
  4127 ;; Defined at:
  4128 ;;		line 167 in file "harwave/UART.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  pSSID           2   45[COMRAM] PTR unsigned char 
  4131 ;;		 -> STR_51(4), 
  4132 ;;  pPassWord       2   47[COMRAM] PTR unsigned char 
  4133 ;;		 -> STR_52(10), 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  cCmd          120    0[BANK1 ] unsigned char [120]
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  1    wreg      unsigned char 
  4138 ;; Registers used:
  4139 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4145 ;;      Params:         4       0       0       0       0       0       0
  4146 ;;      Locals:         0       0     120       0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0
  4148 ;;      Totals:         4       0     120       0       0       0       0
  4149 ;;Total ram usage:      124 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    4
  4152 ;; This function calls:
  4153 ;;		_ESP8266_Cmd
  4154 ;;		_sprintf
  4155 ;; This function is called by:
  4156 ;;		_ESP8266_client
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text14
  4161  0015A0                     __ptext14:
  4162                           	opt stack 0
  4163  0015A0                     _ESP8266_JoinAP:
  4164                           	opt stack 25
  4165                           
  4166                           ;UART.c: 169: char cCmd [120];
  4167                           ;UART.c: 171: sprintf ( cCmd, (void*)"AT+CWJAP=\"%s\",\"%s\"\r\n", pSSID, pPassWord );
  4168                           
  4169                           ;incstack = 0
  4170  0015A0  0E00               	movlw	low ESP8266_JoinAP@cCmd
  4171  0015A2  6E1E               	movwf	sprintf@sp,c
  4172  0015A4  0E01               	movlw	high ESP8266_JoinAP@cCmd
  4173  0015A6  6E1F               	movwf	sprintf@sp+1,c
  4174  0015A8  0E87               	movlw	low STR_15
  4175  0015AA  6E20               	movwf	sprintf@f,c
  4176  0015AC  0E7E               	movlw	high STR_15
  4177  0015AE  6E21               	movwf	sprintf@f+1,c
  4178  0015B0  C02E  F022         	movff	ESP8266_JoinAP@pSSID,?_sprintf+4
  4179  0015B4  C02F  F023         	movff	ESP8266_JoinAP@pSSID+1,?_sprintf+5
  4180  0015B8  C030  F024         	movff	ESP8266_JoinAP@pPassWord,?_sprintf+6
  4181  0015BC  C031  F025         	movff	ESP8266_JoinAP@pPassWord+1,?_sprintf+7
  4182  0015C0  EC09  F000         	call	_sprintf	;wreg free
  4183                           
  4184                           ;UART.c: 173: return ESP8266_Cmd ( cCmd, (void*)"OK", (void*)"CONNECTED", 15000 );
  4185  0015C4  0E00               	movlw	low ESP8266_JoinAP@cCmd
  4186  0015C6  6E25               	movwf	ESP8266_Cmd@cmd,c
  4187  0015C8  0E01               	movlw	high ESP8266_JoinAP@cCmd
  4188  0015CA  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4189  0015CC  0EC1               	movlw	low (STR_3+5)
  4190  0015CE  6E27               	movwf	ESP8266_Cmd@reply1,c
  4191  0015D0  0E7F               	movlw	high (STR_3+5)
  4192  0015D2  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4193  0015D4  0EA9               	movlw	low STR_17
  4194  0015D6  6E29               	movwf	ESP8266_Cmd@reply2,c
  4195  0015D8  0E7F               	movlw	high STR_17
  4196  0015DA  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4197  0015DC  0E3A               	movlw	58
  4198  0015DE  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4199  0015E0  0E98               	movlw	152
  4200  0015E2  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4201  0015E4  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  4202  0015E8  0012               	return	
  4203  0015EA                     __end_of_ESP8266_JoinAP:
  4204                           	opt stack 0
  4205                           tblptru	equ	0xFF8
  4206                           tblptrh	equ	0xFF7
  4207                           tblptrl	equ	0xFF6
  4208                           tablat	equ	0xFF5
  4209                           intcon	equ	0xFF2
  4210                           postinc0	equ	0xFEE
  4211                           wreg	equ	0xFE8
  4212                           postdec1	equ	0xFE5
  4213                           plusw1	equ	0xFE3
  4214                           fsr1l	equ	0xFE1
  4215                           indf2	equ	0xFDF
  4216                           plusw2	equ	0xFDB
  4217                           fsr2h	equ	0xFDA
  4218                           fsr2l	equ	0xFD9
  4219                           status	equ	0xFD8
  4220                           
  4221 ;; *************** function _sprintf *****************
  4222 ;; Defined at:
  4223 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  sp              2   29[COMRAM] PTR unsigned char 
  4226 ;;		 -> ESP8266_Link_Server@cCmd(120), ESP8266_Link_Server@cStr(100), ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120
      +), 
  4227 ;;		 -> ESP8266_SendString@cStr(20), 
  4228 ;;  f               2   31[COMRAM] PTR const unsigned char 
  4229 ;;		 -> STR_25(17), STR_24(20), STR_22(13), STR_20(13), 
  4230 ;;		 -> STR_18(26), STR_15(21), STR_1(19), 
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;  idx             1    0[BANK0 ] unsigned char 
  4233 ;;  tmpval          4    0        struct .
  4234 ;;  flag            2   19[BANK0 ] unsigned short 
  4235 ;;  width           2   16[BANK0 ] int 
  4236 ;;  val             2   13[BANK0 ] unsigned int 
  4237 ;;  ap              2   11[BANK0 ] PTR void [1]
  4238 ;;		 -> ?_sprintf(2), 
  4239 ;;  len             2    9[BANK0 ] unsigned int 
  4240 ;;  cp              2    7[BANK0 ] PTR const unsigned char 
  4241 ;;		 -> STR_62(7), sprintf@c(1), STR_58(5), STR_57(12), 
  4242 ;;		 -> STR_52(10), STR_51(4), STR_40(2), STR_39(10), 
  4243 ;;		 -> STR_38(4), STR_23(4), STR_21(4), ESP8266_Link_Server@cStr(100), 
  4244 ;;  c               1   18[BANK0 ] char 
  4245 ;;  prec            1   15[BANK0 ] char 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  2   29[COMRAM] int 
  4248 ;; Registers used:
  4249 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4255 ;;      Params:        10       0       0       0       0       0       0
  4256 ;;      Locals:         0      21       0       0       0       0       0
  4257 ;;      Temps:          4       0       0       0       0       0       0
  4258 ;;      Totals:        14      21       0       0       0       0       0
  4259 ;;Total ram usage:       35 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    2
  4262 ;; This function calls:
  4263 ;;		___lwdiv
  4264 ;;		___lwmod
  4265 ;;		___wmul
  4266 ;;		_isdigit
  4267 ;; This function is called by:
  4268 ;;		_ESP8266_JoinAP
  4269 ;;		_ESP8266_Link_Server
  4270 ;;		_ESP8266_SendString
  4271 ;;		_ESP8266_BuildAP
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           	psect	text15
  4276  000012                     __ptext15:
  4277                           	opt stack 0
  4278  000012                     _sprintf:
  4279                           	opt stack 26
  4280                           
  4281                           ;doprnt.c: 494: va_list ap;
  4282                           ;doprnt.c: 499: signed char c;
  4283                           ;doprnt.c: 501: int width;
  4284                           ;doprnt.c: 506: signed char prec;
  4285                           ;doprnt.c: 508: unsigned short flag;
  4286                           ;doprnt.c: 523: union {
  4287                           ;doprnt.c: 524: unsigned long vd;
  4288                           ;doprnt.c: 525: double integ;
  4289                           ;doprnt.c: 526: } tmpval;
  4290                           ;doprnt.c: 528: unsigned int val;
  4291                           ;doprnt.c: 529: unsigned len;
  4292                           ;doprnt.c: 530: const char * cp;
  4293                           ;doprnt.c: 533: *ap = __va_start();
  4294                           
  4295                           ;incstack = 0
  4296  000012  0E22               	movlw	low (?_sprintf+4)
  4297  000014  0100               	movlb	0	; () banked
  4298  000016  6F8B               	movwf	sprintf@ap& (0+255),b
  4299  000018  0E00               	movlw	high (?_sprintf+4)
  4300  00001A  0100               	movlb	0	; () banked
  4301  00001C  6F8C               	movwf	(sprintf@ap+1)& (0+255),b
  4302                           
  4303                           ;doprnt.c: 536: while(c = *f++) {
  4304  00001E  EFFD  F004         	goto	l4162
  4305  000022                     l3808:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;doprnt.c: 538: if(c != '%')
  4309  000022  0E25               	movlw	37
  4310  000024  0100               	movlb	0	; () banked
  4311  000026  1992               	xorwf	sprintf@c& (0+255),w,b
  4312  000028  B4D8               	btfsc	status,2,c
  4313  00002A  D00A               	goto	l3814
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;doprnt.c: 540: {
  4317                           ;doprnt.c: 541: ((*sp++ = (c)));
  4318  00002C  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4319  000030  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4320  000034  C092  FFDF         	movff	sprintf@c,indf2
  4321                           
  4322                           ; BSR set to: 0
  4323  000038  4A1E               	infsnz	sprintf@sp,f,c
  4324  00003A  2A1F               	incf	sprintf@sp+1,f,c
  4325                           
  4326                           ;doprnt.c: 542: continue;
  4327  00003C  EFFD  F004         	goto	l4162
  4328  000040                     l3814:
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;doprnt.c: 543: }
  4332                           ;doprnt.c: 546: width = 0;
  4333  000040  0E00               	movlw	0
  4334  000042  0100               	movlb	0	; () banked
  4335  000044  6F91               	movwf	(sprintf@width+1)& (0+255),b
  4336  000046  0E00               	movlw	0
  4337  000048  6F90               	movwf	sprintf@width& (0+255),b
  4338                           
  4339                           ;doprnt.c: 548: flag = 0;
  4340  00004A  0E00               	movlw	0
  4341  00004C  0100               	movlb	0	; () banked
  4342  00004E  6F94               	movwf	(sprintf@flag+1)& (0+255),b
  4343  000050  0E00               	movlw	0
  4344  000052  6F93               	movwf	sprintf@flag& (0+255),b
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;doprnt.c: 551: switch(*f) {
  4348                           
  4349                           ;doprnt.c: 550: for(;;) {
  4350  000054  D00D               	goto	l3826
  4351  000056                     l3816:
  4352                           
  4353                           ;doprnt.c: 554: flag |= 0x08;
  4354  000056  0100               	movlb	0	; () banked
  4355  000058  8793               	bsf	sprintf@flag& (0+255),3,b
  4356  00005A  D008               	goto	L3
  4357  00005C                     l3818:
  4358                           
  4359                           ;doprnt.c: 561: flag |= 0x01;
  4360  00005C  0100               	movlb	0	; () banked
  4361  00005E  8193               	bsf	sprintf@flag& (0+255),0,b
  4362  000060  D005               	goto	L3
  4363  000062                     l3820:
  4364                           
  4365                           ;doprnt.c: 574: flag |= 0x800;
  4366  000062  0100               	movlb	0	; () banked
  4367  000064  8794               	bsf	(sprintf@flag+1)& (0+255),3,b
  4368  000066  D002               	goto	L3
  4369  000068                     l3822:
  4370                           
  4371                           ;doprnt.c: 580: flag |= 0x04;
  4372  000068  0100               	movlb	0	; () banked
  4373  00006A  8593               	bsf	sprintf@flag& (0+255),2,b
  4374  00006C                     L3:
  4375                           
  4376                           ;doprnt.c: 581: f++;
  4377  00006C  4A20               	infsnz	sprintf@f,f,c
  4378  00006E  2A21               	incf	sprintf@f+1,f,c
  4379  000070                     l3826:
  4380  000070  C020  FFF6         	movff	sprintf@f,tblptrl
  4381  000074  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4382  000078                     	if	0	;tblptru may be non-zero
  4383  000078                     	endif
  4384  000078                     	if	0	;tblptru may be non-zero
  4385  000078                     	endif
  4386  000078  0008               	tblrd		*
  4387  00007A  50F5               	movf	tablat,w,c
  4388                           
  4389                           ; Switch size 1, requested type "space"
  4390                           ; Number of cases is 4, Range of values is 32 to 48
  4391                           ; switch strategies available:
  4392                           ; Name         Instructions Cycles
  4393                           ; simple_byte           13     7 (average)
  4394                           ;	Chosen strategy is simple_byte
  4395  00007C  0A20               	xorlw	32	; case 32
  4396  00007E  B4D8               	btfsc	status,2,c
  4397  000080  D7ED               	goto	l3818
  4398  000082  0A03               	xorlw	3	; case 35
  4399  000084  B4D8               	btfsc	status,2,c
  4400  000086  D7ED               	goto	l3820
  4401  000088  0A0E               	xorlw	14	; case 45
  4402  00008A  B4D8               	btfsc	status,2,c
  4403  00008C  D7E4               	goto	l3816
  4404  00008E  0A1D               	xorlw	29	; case 48
  4405  000090  B4D8               	btfsc	status,2,c
  4406  000092  D7EA               	goto	l3822
  4407                           
  4408                           ;doprnt.c: 593: if(flag & 0x08)
  4409                           
  4410                           ;doprnt.c: 586: }
  4411                           
  4412                           ;doprnt.c: 585: break;
  4413  000094  0100               	movlb	0	; () banked
  4414  000096  A793               	btfss	sprintf@flag& (0+255),3,b
  4415  000098  D002               	goto	l3830
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;doprnt.c: 594: flag &= ~0x04;
  4419  00009A  0100               	movlb	0	; () banked
  4420  00009C  9593               	bcf	sprintf@flag& (0+255),2,b
  4421  00009E                     l3830:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4425  00009E  C020  FFF6         	movff	sprintf@f,tblptrl
  4426  0000A2  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4427  0000A6                     	if	0	;tblptru may be non-zero
  4428  0000A6                     	endif
  4429  0000A6                     	if	0	;tblptru may be non-zero
  4430  0000A6                     	endif
  4431  0000A6  0008               	tblrd		*
  4432  0000A8  50F5               	movf	tablat,w,c
  4433  0000AA  EC67  F00C         	call	_isdigit
  4434  0000AE  A0D8               	btfss	status,0,c
  4435  0000B0  D036               	goto	l3842
  4436                           
  4437                           ;doprnt.c: 598: width = 0;
  4438  0000B2  0E00               	movlw	0
  4439  0000B4  0100               	movlb	0	; () banked
  4440  0000B6  6F91               	movwf	(sprintf@width+1)& (0+255),b
  4441  0000B8  0E00               	movlw	0
  4442  0000BA  6F90               	movwf	sprintf@width& (0+255),b
  4443  0000BC                     l3834:
  4444                           
  4445                           ;doprnt.c: 600: width *= 10;
  4446  0000BC  C090  F012         	movff	sprintf@width,___wmul@multiplier
  4447  0000C0  C091  F013         	movff	sprintf@width+1,___wmul@multiplier+1
  4448  0000C4  0E00               	movlw	0
  4449  0000C6  6E15               	movwf	___wmul@multiplicand+1,c
  4450  0000C8  0E0A               	movlw	10
  4451  0000CA  6E14               	movwf	___wmul@multiplicand,c
  4452  0000CC  ECFB  F00B         	call	___wmul	;wreg free
  4453  0000D0  C012  F090         	movff	?___wmul,sprintf@width
  4454  0000D4  C013  F091         	movff	?___wmul+1,sprintf@width+1
  4455                           
  4456                           ;doprnt.c: 601: width += *f++ - '0';
  4457  0000D8  0ED0               	movlw	208
  4458  0000DA  6E28               	movwf	??_sprintf& (0+255),c
  4459  0000DC  0EFF               	movlw	255
  4460  0000DE  6E29               	movwf	(??_sprintf+1)& (0+255),c
  4461  0000E0  C020  FFF6         	movff	sprintf@f,tblptrl
  4462  0000E4  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4463  0000E8                     	if	0	;tblptru may be non-zero
  4464  0000E8                     	endif
  4465  0000E8                     	if	0	;tblptru may be non-zero
  4466  0000E8                     	endif
  4467  0000E8  0008               	tblrd		*
  4468  0000EA  50F5               	movf	tablat,w,c
  4469  0000EC  6E2A               	movwf	(??_sprintf+2)& (0+255),c
  4470  0000EE  6A2B               	clrf	(??_sprintf+3)& (0+255),c
  4471  0000F0  5028               	movf	??_sprintf,w,c
  4472  0000F2  262A               	addwf	??_sprintf+2,f,c
  4473  0000F4  5029               	movf	??_sprintf+1,w,c
  4474  0000F6  222B               	addwfc	??_sprintf+3,f,c
  4475  0000F8  502A               	movf	??_sprintf+2,w,c
  4476  0000FA  0100               	movlb	0	; () banked
  4477  0000FC  2790               	addwf	sprintf@width& (0+255),f,b
  4478  0000FE  502B               	movf	??_sprintf+3,w,c
  4479  000100  0100               	movlb	0	; () banked
  4480  000102  2391               	addwfc	(sprintf@width+1)& (0+255),f,b
  4481                           
  4482                           ; BSR set to: 0
  4483  000104  4A20               	infsnz	sprintf@f,f,c
  4484  000106  2A21               	incf	sprintf@f+1,f,c
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4488  000108  C020  FFF6         	movff	sprintf@f,tblptrl
  4489  00010C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4490  000110                     	if	0	;tblptru may be non-zero
  4491  000110                     	endif
  4492  000110                     	if	0	;tblptru may be non-zero
  4493  000110                     	endif
  4494  000110  0008               	tblrd		*
  4495  000112  50F5               	movf	tablat,w,c
  4496  000114  EC67  F00C         	call	_isdigit
  4497  000118  A0D8               	btfss	status,0,c
  4498  00011A  D019               	goto	l3850
  4499  00011C  D7CF               	goto	l3834
  4500  00011E                     l3842:
  4501  00011E  C020  FFF6         	movff	sprintf@f,tblptrl
  4502  000122  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4503  000126                     	if	0	;tblptru may be non-zero
  4504  000126                     	endif
  4505  000126                     	if	0	;tblptru may be non-zero
  4506  000126                     	endif
  4507  000126  0008               	tblrd		*
  4508  000128  50F5               	movf	tablat,w,c
  4509  00012A  0A2A               	xorlw	42
  4510  00012C  A4D8               	btfss	status,2,c
  4511  00012E  D00F               	goto	l3850
  4512                           
  4513                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  4514  000130  C08B  FFD9         	movff	sprintf@ap,fsr2l
  4515  000134  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  4516  000138  CFDE F090          	movff	postinc2,sprintf@width
  4517  00013C  CFDD F091          	movff	postdec2,sprintf@width+1
  4518  000140  0E02               	movlw	2
  4519  000142  0100               	movlb	0	; () banked
  4520  000144  278B               	addwf	sprintf@ap& (0+255),f,b
  4521  000146  0E00               	movlw	0
  4522  000148  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;doprnt.c: 606: f++;
  4526  00014A  4A20               	infsnz	sprintf@f,f,c
  4527  00014C  2A21               	incf	sprintf@f+1,f,c
  4528  00014E                     l3850:
  4529                           
  4530                           ;doprnt.c: 608: }
  4531                           ;doprnt.c: 611: if(*f == '.') {
  4532  00014E  C020  FFF6         	movff	sprintf@f,tblptrl
  4533  000152  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4534  000156                     	if	0	;tblptru may be non-zero
  4535  000156                     	endif
  4536  000156                     	if	0	;tblptru may be non-zero
  4537  000156                     	endif
  4538  000156  0008               	tblrd		*
  4539  000158  50F5               	movf	tablat,w,c
  4540  00015A  0A2E               	xorlw	46
  4541  00015C  A4D8               	btfss	status,2,c
  4542  00015E  D03C               	goto	l3870
  4543                           
  4544                           ;doprnt.c: 612: flag |= 0x4000;
  4545  000160  0100               	movlb	0	; () banked
  4546  000162  8D94               	bsf	(sprintf@flag+1)& (0+255),6,b
  4547                           
  4548                           ;doprnt.c: 613: f++;
  4549  000164  4A20               	infsnz	sprintf@f,f,c
  4550  000166  2A21               	incf	sprintf@f+1,f,c
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;doprnt.c: 615: if(*f == '*') {
  4554  000168  C020  FFF6         	movff	sprintf@f,tblptrl
  4555  00016C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4556  000170                     	if	0	;tblptru may be non-zero
  4557  000170                     	endif
  4558  000170                     	if	0	;tblptru may be non-zero
  4559  000170                     	endif
  4560  000170  0008               	tblrd		*
  4561  000172  50F5               	movf	tablat,w,c
  4562  000174  0A2A               	xorlw	42
  4563  000176  A4D8               	btfss	status,2,c
  4564  000178  D00F               	goto	l3862
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  4568  00017A  C08B  FFD9         	movff	sprintf@ap,fsr2l
  4569  00017E  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  4570  000182  50DF               	movf	indf2,w,c
  4571  000184  0100               	movlb	0	; () banked
  4572  000186  6F8F               	movwf	sprintf@prec& (0+255),b
  4573                           
  4574                           ; BSR set to: 0
  4575  000188  0E02               	movlw	2
  4576  00018A  0100               	movlb	0	; () banked
  4577  00018C  278B               	addwf	sprintf@ap& (0+255),f,b
  4578  00018E  0E00               	movlw	0
  4579  000190  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;doprnt.c: 617: f++;
  4583  000192  4A20               	infsnz	sprintf@f,f,c
  4584  000194  2A21               	incf	sprintf@f+1,f,c
  4585                           
  4586                           ;doprnt.c: 618: } else
  4587  000196  D10F               	goto	l3940
  4588  000198                     l3862:
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;doprnt.c: 620: {
  4592                           ;doprnt.c: 621: prec = 0;
  4593  000198  0E00               	movlw	0
  4594  00019A  0100               	movlb	0	; () banked
  4595  00019C  6F8F               	movwf	sprintf@prec& (0+255),b
  4596                           
  4597                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4598  00019E  D011               	goto	l3868
  4599  0001A0                     l3864:
  4600                           
  4601                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4602  0001A0  C020  FFF6         	movff	sprintf@f,tblptrl
  4603  0001A4  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4604  0001A8                     	if	0	;tblptru may be non-zero
  4605  0001A8                     	endif
  4606  0001A8                     	if	0	;tblptru may be non-zero
  4607  0001A8                     	endif
  4608  0001A8  0008               	tblrd		*
  4609  0001AA  CFF5 F028          	movff	tablat,??_sprintf
  4610  0001AE  0100               	movlb	0	; () banked
  4611  0001B0  518F               	movf	sprintf@prec& (0+255),w,b
  4612  0001B2  0D0A               	mullw	10
  4613  0001B4  50F3               	movf	prodl,w,c
  4614  0001B6  2428               	addwf	??_sprintf,w,c
  4615  0001B8  0FD0               	addlw	208
  4616  0001BA  0100               	movlb	0	; () banked
  4617  0001BC  6F8F               	movwf	sprintf@prec& (0+255),b
  4618                           
  4619                           ; BSR set to: 0
  4620  0001BE  4A20               	infsnz	sprintf@f,f,c
  4621  0001C0  2A21               	incf	sprintf@f+1,f,c
  4622  0001C2                     l3868:
  4623                           
  4624                           ; BSR set to: 0
  4625  0001C2  C020  FFF6         	movff	sprintf@f,tblptrl
  4626  0001C6  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4627  0001CA                     	if	0	;tblptru may be non-zero
  4628  0001CA                     	endif
  4629  0001CA                     	if	0	;tblptru may be non-zero
  4630  0001CA                     	endif
  4631  0001CA  0008               	tblrd		*
  4632  0001CC  50F5               	movf	tablat,w,c
  4633  0001CE  EC67  F00C         	call	_isdigit
  4634  0001D2  A0D8               	btfss	status,0,c
  4635  0001D4  D0F0               	goto	l3940
  4636  0001D6  D7E4               	goto	l3864
  4637  0001D8                     l3870:
  4638                           
  4639                           ;doprnt.c: 626: prec = 0;
  4640  0001D8  0E00               	movlw	0
  4641  0001DA  0100               	movlb	0	; () banked
  4642  0001DC  6F8F               	movwf	sprintf@prec& (0+255),b
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;doprnt.c: 630: }
  4646                           ;doprnt.c: 635: switch(c = *f++) {
  4647  0001DE  D0EB               	goto	l3940
  4648  0001E0                     l3872:
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;doprnt.c: 691: flag |= 0x40;
  4652  0001E0  0100               	movlb	0	; () banked
  4653  0001E2  8D93               	bsf	sprintf@flag& (0+255),6,b
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;doprnt.c: 698: case 'i':
  4657                           ;doprnt.c: 699: break;
  4658                           
  4659                           ; BSR set to: 0
  4660                           
  4661                           ;doprnt.c: 697: case 'd':
  4662                           
  4663                           ;doprnt.c: 693: break;
  4664  0001E4  D112               	goto	l3942
  4665  0001E6                     l3874:
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;doprnt.c: 707: flag |= 0x2000;
  4669  0001E6  0100               	movlb	0	; () banked
  4670  0001E8  8B94               	bsf	(sprintf@flag+1)& (0+255),5,b
  4671  0001EA                     l591:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;doprnt.c: 714: flag |= 0x20;
  4675  0001EA  0100               	movlb	0	; () banked
  4676  0001EC  8B93               	bsf	sprintf@flag& (0+255),5,b
  4677  0001EE                     l592:
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;doprnt.c: 721: flag |= 0x80;
  4681  0001EE  0100               	movlb	0	; () banked
  4682  0001F0  8F93               	bsf	sprintf@flag& (0+255),7,b
  4683                           
  4684                           ;doprnt.c: 723: break;
  4685  0001F2  D10B               	goto	l3942
  4686  0001F4                     l3876:
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4690  0001F4  C08B  FFD9         	movff	sprintf@ap,fsr2l
  4691  0001F8  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  4692  0001FC  CFDE F087          	movff	postinc2,sprintf@cp
  4693  000200  CFDD F088          	movff	postdec2,sprintf@cp+1
  4694                           
  4695                           ; BSR set to: 0
  4696  000204  0E02               	movlw	2
  4697  000206  0100               	movlb	0	; () banked
  4698  000208  278B               	addwf	sprintf@ap& (0+255),f,b
  4699  00020A  0E00               	movlw	0
  4700  00020C  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;doprnt.c: 740: if(!cp)
  4704  00020E  0100               	movlb	0	; () banked
  4705  000210  5187               	movf	sprintf@cp& (0+255),w,b
  4706  000212  0100               	movlb	0	; () banked
  4707  000214  1188               	iorwf	(sprintf@cp+1)& (0+255),w,b
  4708  000216  A4D8               	btfss	status,2,c
  4709  000218  D006               	goto	l3884
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;doprnt.c: 741: cp = "(null)";
  4713  00021A  0ECC               	movlw	low STR_62
  4714  00021C  0100               	movlb	0	; () banked
  4715  00021E  6F87               	movwf	sprintf@cp& (0+255),b
  4716  000220  0E7F               	movlw	high STR_62
  4717  000222  0100               	movlb	0	; () banked
  4718  000224  6F88               	movwf	(sprintf@cp+1)& (0+255),b
  4719  000226                     l3884:
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;doprnt.c: 745: len = 0;
  4723  000226  0E00               	movlw	0
  4724  000228  0100               	movlb	0	; () banked
  4725  00022A  6F8A               	movwf	(sprintf@len+1)& (0+255),b
  4726  00022C  0E00               	movlw	0
  4727  00022E  6F89               	movwf	sprintf@len& (0+255),b
  4728                           
  4729                           ;doprnt.c: 746: while(cp[len])
  4730  000230  D003               	goto	l3888
  4731  000232                     l3886:
  4732                           
  4733                           ;doprnt.c: 747: len++;
  4734  000232  0100               	movlb	0	; () banked
  4735  000234  4B89               	infsnz	sprintf@len& (0+255),f,b
  4736  000236  2B8A               	incf	(sprintf@len+1)& (0+255),f,b
  4737  000238                     l3888:
  4738                           
  4739                           ; BSR set to: 0
  4740  000238  0100               	movlb	0	; () banked
  4741  00023A  5189               	movf	sprintf@len& (0+255),w,b
  4742  00023C  0100               	movlb	0	; () banked
  4743  00023E  2587               	addwf	sprintf@cp& (0+255),w,b
  4744  000240  6E28               	movwf	??_sprintf& (0+255),c
  4745  000242  0100               	movlb	0	; () banked
  4746  000244  518A               	movf	(sprintf@len+1)& (0+255),w,b
  4747  000246  0100               	movlb	0	; () banked
  4748  000248  2188               	addwfc	(sprintf@cp+1)& (0+255),w,b
  4749  00024A  6E29               	movwf	(??_sprintf+1)& (0+255),c
  4750  00024C  C028  FFF6         	movff	??_sprintf,tblptrl
  4751  000250  C029  FFF7         	movff	??_sprintf+1,tblptrh
  4752  000254  6AF8               	clrf	tblptru,c
  4753  000256  0E05               	movlw	(high __ramtop+-1)
  4754  000258  64F7               	cpfsgt	tblptrh,c
  4755  00025A  D003               	bra	u3627
  4756  00025C  0008               	tblrd		*
  4757  00025E  50F5               	movf	tablat,w,c
  4758  000260  D005               	bra	u3620
  4759  000262                     u3627:
  4760  000262  CFF6 FFE9          	movff	tblptrl,fsr0l
  4761  000266  CFF7 FFEA          	movff	tblptrh,fsr0h
  4762  00026A  50EF               	movf	indf0,w,c
  4763  00026C                     u3620:
  4764  00026C  0900               	iorlw	0
  4765  00026E  A4D8               	btfss	status,2,c
  4766  000270  D7E0               	goto	l3886
  4767  000272                     l3890:
  4768                           
  4769                           ;doprnt.c: 753: if(prec && prec < len)
  4770  000272  0100               	movlb	0	; () banked
  4771  000274  518F               	movf	sprintf@prec& (0+255),w,b
  4772  000276  0100               	movlb	0	; () banked
  4773  000278  B4D8               	btfsc	status,2,c
  4774  00027A  D014               	goto	l3896
  4775                           
  4776                           ; BSR set to: 0
  4777  00027C  C08F  F028         	movff	sprintf@prec,??_sprintf
  4778  000280  6A29               	clrf	(??_sprintf+1)& (0+255),c
  4779  000282  BE28               	btfsc	??_sprintf& (0+255),7,c
  4780  000284  0629               	decf	(??_sprintf+1)& (0+255),f,c
  4781  000286  0100               	movlb	0	; () banked
  4782  000288  5189               	movf	sprintf@len& (0+255),w,b
  4783  00028A  5C28               	subwf	??_sprintf,w,c
  4784  00028C  0100               	movlb	0	; () banked
  4785  00028E  518A               	movf	(sprintf@len+1)& (0+255),w,b
  4786  000290  5829               	subwfb	??_sprintf+1,w,c
  4787  000292  B0D8               	btfsc	status,0,c
  4788  000294  D007               	goto	l3896
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;doprnt.c: 754: len = prec;
  4792  000296  0100               	movlb	0	; () banked
  4793  000298  518F               	movf	sprintf@prec& (0+255),w,b
  4794  00029A  0100               	movlb	0	; () banked
  4795  00029C  6F89               	movwf	sprintf@len& (0+255),b
  4796  00029E  6B8A               	clrf	(sprintf@len+1)& (0+255),b
  4797  0002A0  BF89               	btfsc	sprintf@len& (0+255),7,b
  4798  0002A2  078A               	decf	(sprintf@len+1)& (0+255),f,b
  4799  0002A4                     l3896:
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;doprnt.c: 757: if(width > len)
  4803  0002A4  0100               	movlb	0	; () banked
  4804  0002A6  5190               	movf	sprintf@width& (0+255),w,b
  4805  0002A8  0100               	movlb	0	; () banked
  4806  0002AA  5D89               	subwf	sprintf@len& (0+255),w,b
  4807  0002AC  0100               	movlb	0	; () banked
  4808  0002AE  5191               	movf	(sprintf@width+1)& (0+255),w,b
  4809  0002B0  0100               	movlb	0	; () banked
  4810  0002B2  598A               	subwfb	(sprintf@len+1)& (0+255),w,b
  4811  0002B4  B0D8               	btfsc	status,0,c
  4812  0002B6  D009               	goto	l3900
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;doprnt.c: 758: width -= len;
  4816  0002B8  0100               	movlb	0	; () banked
  4817  0002BA  5189               	movf	sprintf@len& (0+255),w,b
  4818  0002BC  0100               	movlb	0	; () banked
  4819  0002BE  5F90               	subwf	sprintf@width& (0+255),f,b
  4820  0002C0  0100               	movlb	0	; () banked
  4821  0002C2  518A               	movf	(sprintf@len+1)& (0+255),w,b
  4822  0002C4  0100               	movlb	0	; () banked
  4823  0002C6  5B91               	subwfb	(sprintf@width+1)& (0+255),f,b
  4824  0002C8  D005               	goto	l3902
  4825  0002CA                     l3900:
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;doprnt.c: 759: else
  4829                           ;doprnt.c: 760: width = 0;
  4830  0002CA  0E00               	movlw	0
  4831  0002CC  0100               	movlb	0	; () banked
  4832  0002CE  6F91               	movwf	(sprintf@width+1)& (0+255),b
  4833  0002D0  0E00               	movlw	0
  4834  0002D2  6F90               	movwf	sprintf@width& (0+255),b
  4835  0002D4                     l3902:
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;doprnt.c: 762: if(!(flag & 0x08))
  4839  0002D4  0100               	movlb	0	; () banked
  4840  0002D6  A793               	btfss	sprintf@flag& (0+255),3,b
  4841  0002D8  D009               	goto	l3910
  4842  0002DA  D02E               	goto	l3918
  4843  0002DC                     l3906:
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;doprnt.c: 765: ((*sp++ = (' ')));
  4847  0002DC  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4848  0002E0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4849  0002E4  0E20               	movlw	32
  4850  0002E6  6EDF               	movwf	indf2,c
  4851                           
  4852                           ; BSR set to: 0
  4853  0002E8  4A1E               	infsnz	sprintf@sp,f,c
  4854  0002EA  2A1F               	incf	sprintf@sp+1,f,c
  4855  0002EC                     l3910:
  4856                           
  4857                           ; BSR set to: 0
  4858  0002EC  0100               	movlb	0	; () banked
  4859  0002EE  0790               	decf	sprintf@width& (0+255),f,b
  4860  0002F0  A0D8               	btfss	status,0,c
  4861  0002F2  0791               	decf	(sprintf@width+1)& (0+255),f,b
  4862  0002F4  0100               	movlb	0	; () banked
  4863  0002F6  2990               	incf	sprintf@width& (0+255),w,b
  4864  0002F8  E1F1               	bnz	l3906
  4865  0002FA  0100               	movlb	0	; () banked
  4866  0002FC  2991               	incf	(sprintf@width+1)& (0+255),w,b
  4867  0002FE  B4D8               	btfsc	status,2,c
  4868  000300  D01B               	goto	l3918
  4869  000302  D7EC               	goto	l3906
  4870  000304                     l3912:
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4874  000304  C087  FFF6         	movff	sprintf@cp,tblptrl
  4875  000308  C088  FFF7         	movff	sprintf@cp+1,tblptrh
  4876  00030C  6AF8               	clrf	tblptru,c
  4877  00030E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4878  000312  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4879  000316  0E05               	movlw	(high __ramtop+-1)
  4880  000318  64F7               	cpfsgt	tblptrh,c
  4881  00031A  D003               	bra	u3697
  4882  00031C  0008               	tblrd		*
  4883  00031E  50F5               	movf	tablat,w,c
  4884  000320  D005               	bra	u3690
  4885  000322                     u3697:
  4886  000322  CFF6 FFE9          	movff	tblptrl,fsr0l
  4887  000326  CFF7 FFEA          	movff	tblptrh,fsr0h
  4888  00032A  50EF               	movf	indf0,w,c
  4889  00032C                     u3690:
  4890  00032C  6EDF               	movwf	indf2,c
  4891  00032E  0100               	movlb	0	; () banked
  4892  000330  4B87               	infsnz	sprintf@cp& (0+255),f,b
  4893  000332  2B88               	incf	(sprintf@cp+1)& (0+255),f,b
  4894                           
  4895                           ; BSR set to: 0
  4896  000334  4A1E               	infsnz	sprintf@sp,f,c
  4897  000336  2A1F               	incf	sprintf@sp+1,f,c
  4898  000338                     l3918:
  4899                           
  4900                           ; BSR set to: 0
  4901  000338  0100               	movlb	0	; () banked
  4902  00033A  0789               	decf	sprintf@len& (0+255),f,b
  4903  00033C  A0D8               	btfss	status,0,c
  4904  00033E  078A               	decf	(sprintf@len+1)& (0+255),f,b
  4905  000340  0100               	movlb	0	; () banked
  4906  000342  2989               	incf	sprintf@len& (0+255),w,b
  4907  000344  E1DF               	bnz	l3912
  4908  000346  0100               	movlb	0	; () banked
  4909  000348  298A               	incf	(sprintf@len+1)& (0+255),w,b
  4910  00034A  A4D8               	btfss	status,2,c
  4911  00034C  D7DB               	goto	l3912
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;doprnt.c: 770: if(flag & 0x08)
  4915  00034E  0100               	movlb	0	; () banked
  4916  000350  B793               	btfsc	sprintf@flag& (0+255),3,b
  4917  000352  D009               	goto	l3926
  4918  000354  D352               	goto	l4162
  4919  000356                     l3922:
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;doprnt.c: 772: ((*sp++ = (' ')));
  4923  000356  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4924  00035A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4925  00035E  0E20               	movlw	32
  4926  000360  6EDF               	movwf	indf2,c
  4927                           
  4928                           ; BSR set to: 0
  4929  000362  4A1E               	infsnz	sprintf@sp,f,c
  4930  000364  2A1F               	incf	sprintf@sp+1,f,c
  4931  000366                     l3926:
  4932                           
  4933                           ; BSR set to: 0
  4934  000366  0100               	movlb	0	; () banked
  4935  000368  0790               	decf	sprintf@width& (0+255),f,b
  4936  00036A  A0D8               	btfss	status,0,c
  4937  00036C  0791               	decf	(sprintf@width+1)& (0+255),f,b
  4938  00036E  0100               	movlb	0	; () banked
  4939  000370  2990               	incf	sprintf@width& (0+255),w,b
  4940  000372  E1F1               	bnz	l3922
  4941  000374  0100               	movlb	0	; () banked
  4942  000376  2991               	incf	(sprintf@width+1)& (0+255),w,b
  4943  000378  B4D8               	btfsc	status,2,c
  4944  00037A  D33F               	goto	l4162
  4945  00037C  D7EC               	goto	l3922
  4946  00037E                     l3928:
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4950  00037E  C08B  FFD9         	movff	sprintf@ap,fsr2l
  4951  000382  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  4952  000386  50DF               	movf	indf2,w,c
  4953  000388  0100               	movlb	0	; () banked
  4954  00038A  6F92               	movwf	sprintf@c& (0+255),b
  4955                           
  4956                           ; BSR set to: 0
  4957  00038C  0E02               	movlw	2
  4958  00038E  0100               	movlb	0	; () banked
  4959  000390  278B               	addwf	sprintf@ap& (0+255),f,b
  4960  000392  0E00               	movlw	0
  4961  000394  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4962  000396                     l3932:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;doprnt.c: 805: cp = (char *)&c;
  4966  000396  0E92               	movlw	low sprintf@c
  4967  000398  0100               	movlb	0	; () banked
  4968  00039A  6F87               	movwf	sprintf@cp& (0+255),b
  4969  00039C  0E00               	movlw	high sprintf@c
  4970  00039E  0100               	movlb	0	; () banked
  4971  0003A0  6F88               	movwf	(sprintf@cp+1)& (0+255),b
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;doprnt.c: 806: len = 1;
  4975  0003A2  0E00               	movlw	0
  4976  0003A4  0100               	movlb	0	; () banked
  4977  0003A6  6F8A               	movwf	(sprintf@len+1)& (0+255),b
  4978  0003A8  0E01               	movlw	1
  4979  0003AA  6F89               	movwf	sprintf@len& (0+255),b
  4980                           
  4981                           ;doprnt.c: 807: goto dostring;
  4982  0003AC  D762               	goto	l3890
  4983  0003AE                     l3936:
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;doprnt.c: 818: flag |= 0xC0;
  4987  0003AE  0EC0               	movlw	192
  4988  0003B0  0100               	movlb	0	; () banked
  4989  0003B2  1393               	iorwf	sprintf@flag& (0+255),f,b
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;doprnt.c: 822: }
  4993                           
  4994                           ;doprnt.c: 819: break;
  4995  0003B4  D02A               	goto	l3942
  4996  0003B6                     l3940:
  4997  0003B6  C020  FFF6         	movff	sprintf@f,tblptrl
  4998  0003BA  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4999  0003BE  4A20               	infsnz	sprintf@f,f,c
  5000  0003C0  2A21               	incf	sprintf@f+1,f,c
  5001  0003C2                     	if	0	;tblptru may be non-zero
  5002  0003C2                     	endif
  5003  0003C2                     	if	0	;tblptru may be non-zero
  5004  0003C2                     	endif
  5005  0003C2  0008               	tblrd		*
  5006  0003C4  CFF5 F092          	movff	tablat,sprintf@c
  5007  0003C8  0100               	movlb	0	; () banked
  5008  0003CA  5192               	movf	sprintf@c& (0+255),w,b
  5009                           
  5010                           ; Switch size 1, requested type "space"
  5011                           ; Number of cases is 10, Range of values is 0 to 120
  5012                           ; switch strategies available:
  5013                           ; Name         Instructions Cycles
  5014                           ; simple_byte           31    16 (average)
  5015                           ;	Chosen strategy is simple_byte
  5016  0003CC  0A00               	xorlw	0	; case 0
  5017  0003CE  B4D8               	btfsc	status,2,c
  5018  0003D0  D322               	goto	l4164
  5019  0003D2  0A58               	xorlw	88	; case 88
  5020  0003D4  B4D8               	btfsc	status,2,c
  5021  0003D6  D709               	goto	l591
  5022  0003D8  0A3B               	xorlw	59	; case 99
  5023  0003DA  B4D8               	btfsc	status,2,c
  5024  0003DC  D7D0               	goto	l3928
  5025  0003DE  0A07               	xorlw	7	; case 100
  5026  0003E0  B4D8               	btfsc	status,2,c
  5027  0003E2  D013               	goto	l3942
  5028  0003E4  0A0D               	xorlw	13	; case 105
  5029  0003E6  B4D8               	btfsc	status,2,c
  5030  0003E8  D010               	goto	l3942
  5031  0003EA  0A06               	xorlw	6	; case 111
  5032  0003EC  B4D8               	btfsc	status,2,c
  5033  0003EE  D6F8               	goto	l3872
  5034  0003F0  0A1F               	xorlw	31	; case 112
  5035  0003F2  B4D8               	btfsc	status,2,c
  5036  0003F4  D6F8               	goto	l3874
  5037  0003F6  0A03               	xorlw	3	; case 115
  5038  0003F8  B4D8               	btfsc	status,2,c
  5039  0003FA  D6FC               	goto	l3876
  5040  0003FC  0A06               	xorlw	6	; case 117
  5041  0003FE  B4D8               	btfsc	status,2,c
  5042  000400  D7D6               	goto	l3936
  5043  000402  0A0D               	xorlw	13	; case 120
  5044  000404  B4D8               	btfsc	status,2,c
  5045  000406  D6F3               	goto	l592
  5046  000408  D7C6               	goto	l3932
  5047  00040A                     l3942:
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  5051  00040A  0EC0               	movlw	192
  5052  00040C  0100               	movlb	0	; () banked
  5053  00040E  1593               	andwf	sprintf@flag& (0+255),w,b
  5054  000410  6E28               	movwf	??_sprintf& (0+255),c
  5055  000412  0E00               	movlw	0
  5056  000414  0100               	movlb	0	; () banked
  5057  000416  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  5058  000418  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5059  00041A  5028               	movf	??_sprintf,w,c
  5060  00041C  1029               	iorwf	??_sprintf+1,w,c
  5061  00041E  A4D8               	btfss	status,2,c
  5062  000420  D019               	goto	l3954
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;doprnt.c: 1253: {
  5066                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5067  000422  C08B  FFD9         	movff	sprintf@ap,fsr2l
  5068  000426  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  5069  00042A  CFDE F08D          	movff	postinc2,sprintf@val
  5070  00042E  CFDD F08E          	movff	postdec2,sprintf@val+1
  5071                           
  5072                           ; BSR set to: 0
  5073  000432  0E02               	movlw	2
  5074  000434  0100               	movlb	0	; () banked
  5075  000436  278B               	addwf	sprintf@ap& (0+255),f,b
  5076  000438  0E00               	movlw	0
  5077  00043A  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;doprnt.c: 1261: if((int)val < 0) {
  5081  00043C  0100               	movlb	0	; () banked
  5082  00043E  AF8E               	btfss	(sprintf@val+1)& (0+255),7,b
  5083  000440  D016               	goto	l3958
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;doprnt.c: 1262: flag |= 0x03;
  5087  000442  0E03               	movlw	3
  5088  000444  0100               	movlb	0	; () banked
  5089  000446  1393               	iorwf	sprintf@flag& (0+255),f,b
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;doprnt.c: 1263: val = -val;
  5093  000448  0100               	movlb	0	; () banked
  5094  00044A  6D8D               	negf	sprintf@val& (0+255),b
  5095  00044C  1F8E               	comf	(sprintf@val+1)& (0+255),f,b
  5096  00044E  B0D8               	btfsc	status,0,c
  5097  000450  2B8E               	incf	(sprintf@val+1)& (0+255),f,b
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;doprnt.c: 1264: }
  5101                           ;doprnt.c: 1266: }
  5102  000452  D00D               	goto	l3958
  5103  000454                     l3954:
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;doprnt.c: 1268: else
  5107                           ;doprnt.c: 1273: {
  5108                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5109  000454  C08B  FFD9         	movff	sprintf@ap,fsr2l
  5110  000458  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  5111  00045C  CFDE F08D          	movff	postinc2,sprintf@val
  5112  000460  CFDD F08E          	movff	postdec2,sprintf@val+1
  5113                           
  5114                           ; BSR set to: 0
  5115  000464  0E02               	movlw	2
  5116  000466  0100               	movlb	0	; () banked
  5117  000468  278B               	addwf	sprintf@ap& (0+255),f,b
  5118  00046A  0E00               	movlw	0
  5119  00046C  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5120  00046E                     l3958:
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;doprnt.c: 1287: }
  5124                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5125  00046E  0100               	movlb	0	; () banked
  5126  000470  518F               	movf	sprintf@prec& (0+255),w,b
  5127  000472  0100               	movlb	0	; () banked
  5128  000474  A4D8               	btfss	status,2,c
  5129  000476  D063               	goto	l4008
  5130                           
  5131                           ; BSR set to: 0
  5132  000478  0100               	movlb	0	; () banked
  5133  00047A  518D               	movf	sprintf@val& (0+255),w,b
  5134  00047C  0100               	movlb	0	; () banked
  5135  00047E  118E               	iorwf	(sprintf@val+1)& (0+255),w,b
  5136  000480  A4D8               	btfss	status,2,c
  5137  000482  D05D               	goto	l4008
  5138                           
  5139                           ; BSR set to: 0
  5140                           ;doprnt.c: 1291: prec++;
  5141  000484  0100               	movlb	0	; () banked
  5142  000486  2B8F               	incf	sprintf@prec& (0+255),f,b
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  5146  000488  D05A               	goto	l4008
  5147  00048A                     l3964:
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;doprnt.c: 1302: case 0xC0:
  5151                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5152  00048A  0E01               	movlw	1
  5153  00048C  0100               	movlb	0	; () banked
  5154  00048E  6F92               	movwf	sprintf@c& (0+255),b
  5155  000490                     l3966:
  5156                           
  5157                           ; BSR set to: 0
  5158  000490  0E05               	movlw	5
  5159  000492  0100               	movlb	0	; () banked
  5160  000494  1992               	xorwf	sprintf@c& (0+255),w,b
  5161  000496  B4D8               	btfsc	status,2,c
  5162  000498  D061               	goto	l4010
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;doprnt.c: 1306: if(val < dpowers[c])
  5166                           
  5167                           ; BSR set to: 0
  5168                           
  5169                           ; BSR set to: 0
  5170  00049A  0100               	movlb	0	; () banked
  5171  00049C  5192               	movf	sprintf@c& (0+255),w,b
  5172  00049E  0D02               	mullw	2
  5173  0004A0  0E15               	movlw	low _dpowers
  5174  0004A2  24F3               	addwf	prodl,w,c
  5175  0004A4  6EF6               	movwf	tblptrl,c
  5176  0004A6  0E7E               	movlw	high _dpowers
  5177  0004A8  20F4               	addwfc	prodh,w,c
  5178  0004AA  6EF7               	movwf	tblptrh,c
  5179  0004AC                     	if	0	;There are less than 3 active tblptr bytes
  5180  0004AC                     	endif
  5181  0004AC  0009               	tblrd		*+
  5182  0004AE  50F5               	movf	tablat,w,c
  5183  0004B0  0100               	movlb	0	; () banked
  5184  0004B2  5D8D               	subwf	sprintf@val& (0+255),w,b
  5185  0004B4  0009               	tblrd		*+
  5186  0004B6  50F5               	movf	tablat,w,c
  5187  0004B8  0100               	movlb	0	; () banked
  5188  0004BA  598E               	subwfb	(sprintf@val+1)& (0+255),w,b
  5189  0004BC  A0D8               	btfss	status,0,c
  5190  0004BE  D04E               	goto	l4010
  5191                           
  5192                           ; BSR set to: 0
  5193                           
  5194                           ; BSR set to: 0
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;doprnt.c: 1307: break;
  5198  0004C0  0100               	movlb	0	; () banked
  5199  0004C2  2B92               	incf	sprintf@c& (0+255),f,b
  5200  0004C4  D7E5               	goto	l3966
  5201  0004C6                     l3978:
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5205  0004C6  0E01               	movlw	1
  5206  0004C8  0100               	movlb	0	; () banked
  5207  0004CA  6F92               	movwf	sprintf@c& (0+255),b
  5208  0004CC                     l3980:
  5209                           
  5210                           ; BSR set to: 0
  5211  0004CC  0E04               	movlw	4
  5212  0004CE  0100               	movlb	0	; () banked
  5213  0004D0  1992               	xorwf	sprintf@c& (0+255),w,b
  5214  0004D2  B4D8               	btfsc	status,2,c
  5215  0004D4  D043               	goto	l4010
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5219                           
  5220                           ; BSR set to: 0
  5221                           
  5222                           ; BSR set to: 0
  5223  0004D6  0100               	movlb	0	; () banked
  5224  0004D8  5192               	movf	sprintf@c& (0+255),w,b
  5225  0004DA  0D02               	mullw	2
  5226  0004DC  0E1F               	movlw	low _hexpowers
  5227  0004DE  24F3               	addwf	prodl,w,c
  5228  0004E0  6EF6               	movwf	tblptrl,c
  5229  0004E2  0E7E               	movlw	high _hexpowers
  5230  0004E4  20F4               	addwfc	prodh,w,c
  5231  0004E6  6EF7               	movwf	tblptrh,c
  5232  0004E8                     	if	0	;There are less than 3 active tblptr bytes
  5233  0004E8                     	endif
  5234  0004E8  0009               	tblrd		*+
  5235  0004EA  50F5               	movf	tablat,w,c
  5236  0004EC  0100               	movlb	0	; () banked
  5237  0004EE  5D8D               	subwf	sprintf@val& (0+255),w,b
  5238  0004F0  0009               	tblrd		*+
  5239  0004F2  50F5               	movf	tablat,w,c
  5240  0004F4  0100               	movlb	0	; () banked
  5241  0004F6  598E               	subwfb	(sprintf@val+1)& (0+255),w,b
  5242  0004F8  A0D8               	btfss	status,0,c
  5243  0004FA  D030               	goto	l4010
  5244                           
  5245                           ; BSR set to: 0
  5246                           
  5247                           ; BSR set to: 0
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;doprnt.c: 1318: break;
  5251  0004FC  0100               	movlb	0	; () banked
  5252  0004FE  2B92               	incf	sprintf@c& (0+255),f,b
  5253  000500  D7E5               	goto	l3980
  5254  000502                     l3992:
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  5258  000502  0E01               	movlw	1
  5259  000504  0100               	movlb	0	; () banked
  5260  000506  6F92               	movwf	sprintf@c& (0+255),b
  5261  000508                     l3994:
  5262                           
  5263                           ; BSR set to: 0
  5264  000508  0E06               	movlw	6
  5265  00050A  0100               	movlb	0	; () banked
  5266  00050C  1992               	xorwf	sprintf@c& (0+255),w,b
  5267  00050E  B4D8               	btfsc	status,2,c
  5268  000510  D025               	goto	l4010
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;doprnt.c: 1329: if(val < octpowers[c])
  5272                           
  5273                           ; BSR set to: 0
  5274                           
  5275                           ; BSR set to: 0
  5276  000512  0100               	movlb	0	; () banked
  5277  000514  5192               	movf	sprintf@c& (0+255),w,b
  5278  000516  0D02               	mullw	2
  5279  000518  0E09               	movlw	low _octpowers
  5280  00051A  24F3               	addwf	prodl,w,c
  5281  00051C  6EF6               	movwf	tblptrl,c
  5282  00051E  0E7E               	movlw	high _octpowers
  5283  000520  20F4               	addwfc	prodh,w,c
  5284  000522  6EF7               	movwf	tblptrh,c
  5285  000524                     	if	0	;There are less than 3 active tblptr bytes
  5286  000524                     	endif
  5287  000524  0009               	tblrd		*+
  5288  000526  50F5               	movf	tablat,w,c
  5289  000528  0100               	movlb	0	; () banked
  5290  00052A  5D8D               	subwf	sprintf@val& (0+255),w,b
  5291  00052C  0009               	tblrd		*+
  5292  00052E  50F5               	movf	tablat,w,c
  5293  000530  0100               	movlb	0	; () banked
  5294  000532  598E               	subwfb	(sprintf@val+1)& (0+255),w,b
  5295  000534  A0D8               	btfss	status,0,c
  5296  000536  D012               	goto	l4010
  5297                           
  5298                           ; BSR set to: 0
  5299                           
  5300                           ; BSR set to: 0
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;doprnt.c: 1330: break;
  5304  000538  0100               	movlb	0	; () banked
  5305  00053A  2B92               	incf	sprintf@c& (0+255),f,b
  5306  00053C  D7E5               	goto	l3994
  5307  00053E                     l4008:
  5308                           
  5309                           ; BSR set to: 0
  5310  00053E  0100               	movlb	0	; () banked
  5311  000540  5193               	movf	sprintf@flag& (0+255),w,b
  5312  000542  0BC0               	andlw	192
  5313                           
  5314                           ; Switch size 1, requested type "space"
  5315                           ; Number of cases is 4, Range of values is 0 to 192
  5316                           ; switch strategies available:
  5317                           ; Name         Instructions Cycles
  5318                           ; simple_byte           13     7 (average)
  5319                           ;	Chosen strategy is simple_byte
  5320  000544  0A00               	xorlw	0	; case 0
  5321  000546  B4D8               	btfsc	status,2,c
  5322  000548  D7A0               	goto	l3964
  5323  00054A  0A40               	xorlw	64	; case 64
  5324  00054C  B4D8               	btfsc	status,2,c
  5325  00054E  D7D9               	goto	l3992
  5326  000550  0AC0               	xorlw	192	; case 128
  5327  000552  B4D8               	btfsc	status,2,c
  5328  000554  D7B8               	goto	l3978
  5329  000556  0A40               	xorlw	64	; case 192
  5330  000558  B4D8               	btfsc	status,2,c
  5331  00055A  D797               	goto	l3964
  5332  00055C                     l4010:
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;doprnt.c: 1339: if(c < prec)
  5336  00055C  0100               	movlb	0	; () banked
  5337  00055E  5192               	movf	sprintf@c& (0+255),w,b
  5338  000560  0A80               	xorlw	128
  5339  000562  6E28               	movwf	??_sprintf& (0+255),c
  5340  000564  0100               	movlb	0	; () banked
  5341  000566  518F               	movf	sprintf@prec& (0+255),w,b
  5342  000568  0A80               	xorlw	128
  5343  00056A  5C28               	subwf	??_sprintf& (0+255),w,c
  5344  00056C  B0D8               	btfsc	status,0,c
  5345  00056E  D003               	goto	l4014
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;doprnt.c: 1340: c = prec;
  5349  000570  C08F  F092         	movff	sprintf@prec,sprintf@c
  5350  000574  D00B               	goto	l4018
  5351  000576                     l4014:
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;doprnt.c: 1341: else if(prec < c)
  5355  000576  0100               	movlb	0	; () banked
  5356  000578  518F               	movf	sprintf@prec& (0+255),w,b
  5357  00057A  0A80               	xorlw	128
  5358  00057C  6E28               	movwf	??_sprintf& (0+255),c
  5359  00057E  0100               	movlb	0	; () banked
  5360  000580  5192               	movf	sprintf@c& (0+255),w,b
  5361  000582  0A80               	xorlw	128
  5362  000584  5C28               	subwf	??_sprintf& (0+255),w,c
  5363  000586  A0D8               	btfss	status,0,c
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;doprnt.c: 1342: prec = c;
  5367  000588  C092  F08F         	movff	sprintf@c,sprintf@prec
  5368  00058C                     l4018:
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5372  00058C  0100               	movlb	0	; () banked
  5373  00058E  5190               	movf	sprintf@width& (0+255),w,b
  5374  000590  0100               	movlb	0	; () banked
  5375  000592  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  5376  000594  B4D8               	btfsc	status,2,c
  5377  000596  D010               	goto	l4024
  5378                           
  5379                           ; BSR set to: 0
  5380  000598  0E03               	movlw	3
  5381  00059A  0100               	movlb	0	; () banked
  5382  00059C  1593               	andwf	sprintf@flag& (0+255),w,b
  5383  00059E  6E28               	movwf	??_sprintf& (0+255),c
  5384  0005A0  0E00               	movlw	0
  5385  0005A2  0100               	movlb	0	; () banked
  5386  0005A4  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  5387  0005A6  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5388  0005A8  5028               	movf	??_sprintf,w,c
  5389  0005AA  1029               	iorwf	??_sprintf+1,w,c
  5390  0005AC  B4D8               	btfsc	status,2,c
  5391  0005AE  D004               	goto	l4024
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;doprnt.c: 1346: width--;
  5395  0005B0  0100               	movlb	0	; () banked
  5396  0005B2  0790               	decf	sprintf@width& (0+255),f,b
  5397  0005B4  A0D8               	btfss	status,0,c
  5398  0005B6  0791               	decf	(sprintf@width+1)& (0+255),f,b
  5399  0005B8                     l4024:
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;doprnt.c: 1348: if(flag & 0x4000) {
  5403  0005B8  0100               	movlb	0	; () banked
  5404  0005BA  AD94               	btfss	(sprintf@flag+1)& (0+255),6,b
  5405  0005BC  D01F               	goto	l4032
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;doprnt.c: 1349: if(width > prec)
  5409  0005BE  0E80               	movlw	128
  5410  0005C0  0100               	movlb	0	; () banked
  5411  0005C2  BF8F               	btfsc	sprintf@prec& (0+255),7,b
  5412  0005C4  0E7F               	movlw	127
  5413  0005C6  6E28               	movwf	??_sprintf& (0+255),c
  5414  0005C8  0100               	movlb	0	; () banked
  5415  0005CA  5190               	movf	sprintf@width& (0+255),w,b
  5416  0005CC  0100               	movlb	0	; () banked
  5417  0005CE  5D8F               	subwf	sprintf@prec& (0+255),w,b
  5418  0005D0  0100               	movlb	0	; () banked
  5419  0005D2  5191               	movf	(sprintf@width+1)& (0+255),w,b
  5420  0005D4  0A80               	xorlw	128
  5421  0005D6  5828               	subwfb	??_sprintf& (0+255),w,c
  5422  0005D8  B0D8               	btfsc	status,0,c
  5423  0005DA  D00B               	goto	l4030
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;doprnt.c: 1350: width -= prec;
  5427  0005DC  0100               	movlb	0	; () banked
  5428  0005DE  518F               	movf	sprintf@prec& (0+255),w,b
  5429  0005E0  0100               	movlb	0	; () banked
  5430  0005E2  5F90               	subwf	sprintf@width& (0+255),f,b
  5431  0005E4  0E00               	movlw	0
  5432  0005E6  0100               	movlb	0	; () banked
  5433  0005E8  BF8F               	btfsc	sprintf@prec& (0+255),7,b
  5434  0005EA  0EFF               	movlw	255
  5435  0005EC  0100               	movlb	0	; () banked
  5436  0005EE  5B91               	subwfb	(sprintf@width+1)& (0+255),f,b
  5437  0005F0  D005               	goto	l4032
  5438  0005F2                     l4030:
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;doprnt.c: 1351: else
  5442                           ;doprnt.c: 1352: width = 0;
  5443  0005F2  0E00               	movlw	0
  5444  0005F4  0100               	movlb	0	; () banked
  5445  0005F6  6F91               	movwf	(sprintf@width+1)& (0+255),b
  5446  0005F8  0E00               	movlw	0
  5447  0005FA  6F90               	movwf	sprintf@width& (0+255),b
  5448  0005FC                     l4032:
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;doprnt.c: 1353: }
  5452                           ;doprnt.c: 1357: if((flag & (
  5453                           ;doprnt.c: 1359: 0x04|
  5454                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  5455  0005FC  0EC4               	movlw	196
  5456  0005FE  6E28               	movwf	??_sprintf& (0+255),c
  5457  000600  0E08               	movlw	8
  5458  000602  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5459  000604  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  5460  000608  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  5461  00060C  5028               	movf	??_sprintf,w,c
  5462  00060E  162A               	andwf	??_sprintf+2,f,c
  5463  000610  5029               	movf	??_sprintf+1,w,c
  5464  000612  162B               	andwf	??_sprintf+3,f,c
  5465  000614  0E40               	movlw	64
  5466  000616  182A               	xorwf	??_sprintf+2,w,c
  5467  000618  E10F               	bnz	l4038
  5468  00061A  0E08               	movlw	8
  5469  00061C  182B               	xorwf	??_sprintf+3,w,c
  5470  00061E  A4D8               	btfss	status,2,c
  5471  000620  D00B               	goto	l4038
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;doprnt.c: 1362: if(width)
  5475  000622  0100               	movlb	0	; () banked
  5476  000624  5190               	movf	sprintf@width& (0+255),w,b
  5477  000626  0100               	movlb	0	; () banked
  5478  000628  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  5479  00062A  B4D8               	btfsc	status,2,c
  5480  00062C  D02E               	goto	l4046
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;doprnt.c: 1363: width--;
  5484  00062E  0100               	movlb	0	; () banked
  5485  000630  0790               	decf	sprintf@width& (0+255),f,b
  5486  000632  A0D8               	btfss	status,0,c
  5487  000634  0791               	decf	(sprintf@width+1)& (0+255),f,b
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;doprnt.c: 1364: } else
  5491  000636  D029               	goto	l4046
  5492  000638                     l4038:
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  5496  000638  0EC0               	movlw	192
  5497  00063A  6E28               	movwf	??_sprintf& (0+255),c
  5498  00063C  0E08               	movlw	8
  5499  00063E  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5500  000640  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  5501  000644  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  5502  000648  5028               	movf	??_sprintf,w,c
  5503  00064A  162A               	andwf	??_sprintf+2,f,c
  5504  00064C  5029               	movf	??_sprintf+1,w,c
  5505  00064E  162B               	andwf	??_sprintf+3,f,c
  5506  000650  0E80               	movlw	128
  5507  000652  182A               	xorwf	??_sprintf+2,w,c
  5508  000654  E11A               	bnz	l4046
  5509  000656  0E08               	movlw	8
  5510  000658  182B               	xorwf	??_sprintf+3,w,c
  5511  00065A  A4D8               	btfss	status,2,c
  5512  00065C  D016               	goto	l4046
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;doprnt.c: 1372: if(width > 2)
  5516  00065E  0100               	movlb	0	; () banked
  5517  000660  BF91               	btfsc	(sprintf@width+1)& (0+255),7,b
  5518  000662  D00E               	goto	l4044
  5519  000664  0100               	movlb	0	; () banked
  5520  000666  5191               	movf	(sprintf@width+1)& (0+255),w,b
  5521  000668  E105               	bnz	u3950
  5522  00066A  0E03               	movlw	3
  5523  00066C  0100               	movlb	0	; () banked
  5524  00066E  5D90               	subwf	sprintf@width& (0+255),w,b
  5525  000670  A0D8               	btfss	status,0,c
  5526  000672  D006               	goto	l4044
  5527  000674                     u3950:
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;doprnt.c: 1373: width -= 2;
  5531  000674  0100               	movlb	0	; () banked
  5532  000676  0EFE               	movlw	254
  5533  000678  2790               	addwf	sprintf@width& (0+255),f,b
  5534  00067A  0EFF               	movlw	255
  5535  00067C  2391               	addwfc	(sprintf@width+1)& (0+255),f,b
  5536  00067E  D005               	goto	l4046
  5537  000680                     l4044:
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;doprnt.c: 1374: else
  5541                           ;doprnt.c: 1375: width = 0;
  5542  000680  0E00               	movlw	0
  5543  000682  0100               	movlb	0	; () banked
  5544  000684  6F91               	movwf	(sprintf@width+1)& (0+255),b
  5545  000686  0E00               	movlw	0
  5546  000688  6F90               	movwf	sprintf@width& (0+255),b
  5547  00068A                     l4046:
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;doprnt.c: 1376: }
  5551                           ;doprnt.c: 1381: if(width > c)
  5552  00068A  0E80               	movlw	128
  5553  00068C  0100               	movlb	0	; () banked
  5554  00068E  BF92               	btfsc	sprintf@c& (0+255),7,b
  5555  000690  0E7F               	movlw	127
  5556  000692  6E28               	movwf	??_sprintf& (0+255),c
  5557  000694  0100               	movlb	0	; () banked
  5558  000696  5190               	movf	sprintf@width& (0+255),w,b
  5559  000698  0100               	movlb	0	; () banked
  5560  00069A  5D92               	subwf	sprintf@c& (0+255),w,b
  5561  00069C  0100               	movlb	0	; () banked
  5562  00069E  5191               	movf	(sprintf@width+1)& (0+255),w,b
  5563  0006A0  0A80               	xorlw	128
  5564  0006A2  5828               	subwfb	??_sprintf& (0+255),w,c
  5565  0006A4  B0D8               	btfsc	status,0,c
  5566  0006A6  D00B               	goto	l4050
  5567                           
  5568                           ; BSR set to: 0
  5569                           ;doprnt.c: 1382: width -= c;
  5570  0006A8  0100               	movlb	0	; () banked
  5571  0006AA  5192               	movf	sprintf@c& (0+255),w,b
  5572  0006AC  0100               	movlb	0	; () banked
  5573  0006AE  5F90               	subwf	sprintf@width& (0+255),f,b
  5574  0006B0  0E00               	movlw	0
  5575  0006B2  0100               	movlb	0	; () banked
  5576  0006B4  BF92               	btfsc	sprintf@c& (0+255),7,b
  5577  0006B6  0EFF               	movlw	255
  5578  0006B8  0100               	movlb	0	; () banked
  5579  0006BA  5B91               	subwfb	(sprintf@width+1)& (0+255),f,b
  5580  0006BC  D005               	goto	l4052
  5581  0006BE                     l4050:
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;doprnt.c: 1383: else
  5585                           ;doprnt.c: 1384: width = 0;
  5586  0006BE  0E00               	movlw	0
  5587  0006C0  0100               	movlb	0	; () banked
  5588  0006C2  6F91               	movwf	(sprintf@width+1)& (0+255),b
  5589  0006C4  0E00               	movlw	0
  5590  0006C6  6F90               	movwf	sprintf@width& (0+255),b
  5591  0006C8                     l4052:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;doprnt.c: 1387: if(flag & 0x04) {
  5595  0006C8  0100               	movlb	0	; () banked
  5596  0006CA  A593               	btfss	sprintf@flag& (0+255),2,b
  5597  0006CC  D061               	goto	l4088
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;doprnt.c: 1392: if(flag & 0x03)
  5601  0006CE  0E03               	movlw	3
  5602  0006D0  0100               	movlb	0	; () banked
  5603  0006D2  1593               	andwf	sprintf@flag& (0+255),w,b
  5604  0006D4  6E28               	movwf	??_sprintf& (0+255),c
  5605  0006D6  0E00               	movlw	0
  5606  0006D8  0100               	movlb	0	; () banked
  5607  0006DA  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  5608  0006DC  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5609  0006DE  5028               	movf	??_sprintf,w,c
  5610  0006E0  1029               	iorwf	??_sprintf+1,w,c
  5611  0006E2  B4D8               	btfsc	status,2,c
  5612  0006E4  D009               	goto	l651
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5616  0006E6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5617  0006EA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5618  0006EE  0E2D               	movlw	45
  5619  0006F0  D00B               	goto	L4
  5620  0006F2                     l4058:
  5621                           
  5622                           ; BSR set to: 0
  5623  0006F2  4A1E               	infsnz	sprintf@sp,f,c
  5624  0006F4  2A1F               	incf	sprintf@sp+1,f,c
  5625  0006F6  D039               	goto	l4080
  5626  0006F8                     l651:
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;doprnt.c: 1396: else
  5630                           ;doprnt.c: 1399: if(flag & 0x01)
  5631  0006F8  0100               	movlb	0	; () banked
  5632  0006FA  A193               	btfss	sprintf@flag& (0+255),0,b
  5633  0006FC  D007               	goto	l4064
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  5637  0006FE  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5638  000702  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5639  000706  0E20               	movlw	32
  5640  000708                     L4:
  5641  000708  6EDF               	movwf	indf2,c
  5642  00070A  D7F3               	goto	l4058
  5643  00070C                     l4064:
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  5647  00070C  0EC0               	movlw	192
  5648  00070E  6E28               	movwf	??_sprintf& (0+255),c
  5649  000710  0E08               	movlw	8
  5650  000712  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5651  000714  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  5652  000718  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  5653  00071C  5028               	movf	??_sprintf,w,c
  5654  00071E  162A               	andwf	??_sprintf+2,f,c
  5655  000720  5029               	movf	??_sprintf+1,w,c
  5656  000722  162B               	andwf	??_sprintf+3,f,c
  5657  000724  0E80               	movlw	128
  5658  000726  182A               	xorwf	??_sprintf+2,w,c
  5659  000728  E120               	bnz	l4080
  5660  00072A  0E08               	movlw	8
  5661  00072C  182B               	xorwf	??_sprintf+3,w,c
  5662  00072E  A4D8               	btfss	status,2,c
  5663  000730  D01C               	goto	l4080
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  5667  000732  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5668  000736  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5669  00073A  0E30               	movlw	48
  5670  00073C  6EDF               	movwf	indf2,c
  5671                           
  5672                           ; BSR set to: 0
  5673  00073E  4A1E               	infsnz	sprintf@sp,f,c
  5674  000740  2A1F               	incf	sprintf@sp+1,f,c
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  5678  000742  0100               	movlb	0	; () banked
  5679  000744  BB93               	btfsc	sprintf@flag& (0+255),5,b
  5680  000746  D005               	goto	l4074
  5681                           
  5682                           ; BSR set to: 0
  5683  000748  0E00               	movlw	0
  5684  00074A  0100               	movlb	0	; () banked
  5685  00074C  6F82               	movwf	(_sprintf$1429+1)& (0+255),b
  5686  00074E  0E78               	movlw	120
  5687  000750  D004               	goto	L5
  5688  000752                     l4074:
  5689                           
  5690                           ; BSR set to: 0
  5691  000752  0E00               	movlw	0
  5692  000754  0100               	movlb	0	; () banked
  5693  000756  6F82               	movwf	(_sprintf$1429+1)& (0+255),b
  5694  000758  0E58               	movlw	88
  5695  00075A                     L5:
  5696  00075A  6F81               	movwf	_sprintf$1429& (0+255),b
  5697                           
  5698                           ; BSR set to: 0
  5699                           
  5700                           ; BSR set to: 0
  5701  00075C  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5702  000760  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5703  000764  C081  FFDF         	movff	_sprintf$1429,indf2
  5704  000768  D7C4               	goto	l4058
  5705  00076A                     l4080:
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;doprnt.c: 1412: }
  5709                           ;doprnt.c: 1415: if(width)
  5710  00076A  0100               	movlb	0	; () banked
  5711  00076C  5190               	movf	sprintf@width& (0+255),w,b
  5712  00076E  0100               	movlb	0	; () banked
  5713  000770  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  5714  000772  B4D8               	btfsc	status,2,c
  5715  000774  D11D               	goto	l4152
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5719                           
  5720                           ; BSR set to: 0
  5721                           
  5722                           ;doprnt.c: 1416: do
  5723  000776  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5724  00077A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5725  00077E  0E30               	movlw	48
  5726  000780  6EDF               	movwf	indf2,c
  5727                           
  5728                           ; BSR set to: 0
  5729  000782  4A1E               	infsnz	sprintf@sp,f,c
  5730  000784  2A1F               	incf	sprintf@sp+1,f,c
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;doprnt.c: 1418: while(--width);
  5734  000786  0100               	movlb	0	; () banked
  5735  000788  0790               	decf	sprintf@width& (0+255),f,b
  5736  00078A  A0D8               	btfss	status,0,c
  5737  00078C  0791               	decf	(sprintf@width+1)& (0+255),f,b
  5738  00078E  D7ED               	goto	l4080
  5739  000790                     l4088:
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;doprnt.c: 1422: {
  5743                           ;doprnt.c: 1424: if(width
  5744                           ;doprnt.c: 1426: && !(flag & 0x08)
  5745                           ;doprnt.c: 1428: )
  5746  000790  0100               	movlb	0	; () banked
  5747  000792  5190               	movf	sprintf@width& (0+255),w,b
  5748  000794  0100               	movlb	0	; () banked
  5749  000796  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  5750  000798  B4D8               	btfsc	status,2,c
  5751  00079A  D015               	goto	l4098
  5752                           
  5753                           ; BSR set to: 0
  5754  00079C  0100               	movlb	0	; () banked
  5755  00079E  B793               	btfsc	sprintf@flag& (0+255),3,b
  5756  0007A0  D012               	goto	l4098
  5757  0007A2                     l4092:
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5761  0007A2  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5762  0007A6  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5763  0007AA  0E20               	movlw	32
  5764  0007AC  6EDF               	movwf	indf2,c
  5765                           
  5766                           ; BSR set to: 0
  5767  0007AE  4A1E               	infsnz	sprintf@sp,f,c
  5768  0007B0  2A1F               	incf	sprintf@sp+1,f,c
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;doprnt.c: 1431: while(--width);
  5772  0007B2  0100               	movlb	0	; () banked
  5773  0007B4  0790               	decf	sprintf@width& (0+255),f,b
  5774  0007B6  A0D8               	btfss	status,0,c
  5775  0007B8  0791               	decf	(sprintf@width+1)& (0+255),f,b
  5776  0007BA  0100               	movlb	0	; () banked
  5777  0007BC  5190               	movf	sprintf@width& (0+255),w,b
  5778  0007BE  0100               	movlb	0	; () banked
  5779  0007C0  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  5780  0007C2  A4D8               	btfss	status,2,c
  5781  0007C4  D7EE               	goto	l4092
  5782  0007C6                     l4098:
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;doprnt.c: 1438: if(flag & 0x03)
  5786  0007C6  0E03               	movlw	3
  5787  0007C8  0100               	movlb	0	; () banked
  5788  0007CA  1593               	andwf	sprintf@flag& (0+255),w,b
  5789  0007CC  6E28               	movwf	??_sprintf& (0+255),c
  5790  0007CE  0E00               	movlw	0
  5791  0007D0  0100               	movlb	0	; () banked
  5792  0007D2  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  5793  0007D4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5794  0007D6  5028               	movf	??_sprintf,w,c
  5795  0007D8  1029               	iorwf	??_sprintf+1,w,c
  5796  0007DA  B4D8               	btfsc	status,2,c
  5797  0007DC  D009               	goto	l667
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5801  0007DE  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5802  0007E2  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5803  0007E6  0E2D               	movlw	45
  5804  0007E8  D00B               	goto	L6
  5805  0007EA                     l4102:
  5806                           
  5807                           ; BSR set to: 0
  5808  0007EA  4A1E               	infsnz	sprintf@sp,f,c
  5809  0007EC  2A1F               	incf	sprintf@sp+1,f,c
  5810  0007EE  D00A               	goto	l4108
  5811  0007F0                     l667:
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;doprnt.c: 1443: else if(flag & 0x01)
  5815  0007F0  0100               	movlb	0	; () banked
  5816  0007F2  A193               	btfss	sprintf@flag& (0+255),0,b
  5817  0007F4  D007               	goto	l4108
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  5821  0007F6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5822  0007FA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5823  0007FE  0E20               	movlw	32
  5824  000800                     L6:
  5825  000800  6EDF               	movwf	indf2,c
  5826  000802  D7F3               	goto	l4102
  5827  000804                     l4108:
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  5831  000804  0EC0               	movlw	192
  5832  000806  6E28               	movwf	??_sprintf& (0+255),c
  5833  000808  0E08               	movlw	8
  5834  00080A  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5835  00080C  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  5836  000810  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  5837  000814  5028               	movf	??_sprintf,w,c
  5838  000816  162A               	andwf	??_sprintf+2,f,c
  5839  000818  5029               	movf	??_sprintf+1,w,c
  5840  00081A  162B               	andwf	??_sprintf+3,f,c
  5841  00081C  0E40               	movlw	64
  5842  00081E  182A               	xorwf	??_sprintf+2,w,c
  5843  000820  E10B               	bnz	l4114
  5844  000822  0E08               	movlw	8
  5845  000824  182B               	xorwf	??_sprintf+3,w,c
  5846  000826  A4D8               	btfss	status,2,c
  5847  000828  D007               	goto	l4114
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  5851  00082A  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5852  00082E  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5853  000832  0E30               	movlw	48
  5854  000834  6EDF               	movwf	indf2,c
  5855  000836  D0BA               	goto	l4150
  5856  000838                     l4114:
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;doprnt.c: 1450: else
  5860                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  5861  000838  0EC0               	movlw	192
  5862  00083A  6E28               	movwf	??_sprintf& (0+255),c
  5863  00083C  0E08               	movlw	8
  5864  00083E  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5865  000840  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  5866  000844  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  5867  000848  5028               	movf	??_sprintf,w,c
  5868  00084A  162A               	andwf	??_sprintf+2,f,c
  5869  00084C  5029               	movf	??_sprintf+1,w,c
  5870  00084E  162B               	andwf	??_sprintf+3,f,c
  5871  000850  0E80               	movlw	128
  5872  000852  182A               	xorwf	??_sprintf+2,w,c
  5873  000854  E103               	bnz	u4101
  5874  000856  0E08               	movlw	8
  5875  000858  182B               	xorwf	??_sprintf+3,w,c
  5876  00085A  A4D8               	btfss	status,2,c
  5877  00085C                     u4101:
  5878  00085C  D0A9               	goto	l4152
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  5882  00085E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5883  000862  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5884  000866  0E30               	movlw	48
  5885  000868  6EDF               	movwf	indf2,c
  5886                           
  5887                           ; BSR set to: 0
  5888  00086A  4A1E               	infsnz	sprintf@sp,f,c
  5889  00086C  2A1F               	incf	sprintf@sp+1,f,c
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  5893  00086E  0100               	movlb	0	; () banked
  5894  000870  BB93               	btfsc	sprintf@flag& (0+255),5,b
  5895  000872  D005               	goto	l4124
  5896                           
  5897                           ; BSR set to: 0
  5898  000874  0E00               	movlw	0
  5899  000876  0100               	movlb	0	; () banked
  5900  000878  6F84               	movwf	(_sprintf$1430+1)& (0+255),b
  5901  00087A  0E78               	movlw	120
  5902  00087C  D004               	goto	L7
  5903  00087E                     l4124:
  5904                           
  5905                           ; BSR set to: 0
  5906  00087E  0E00               	movlw	0
  5907  000880  0100               	movlb	0	; () banked
  5908  000882  6F84               	movwf	(_sprintf$1430+1)& (0+255),b
  5909  000884  0E58               	movlw	88
  5910  000886                     L7:
  5911  000886  6F83               	movwf	_sprintf$1430& (0+255),b
  5912                           
  5913                           ; BSR set to: 0
  5914                           
  5915                           ; BSR set to: 0
  5916  000888  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5917  00088C  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5918  000890  C083  FFDF         	movff	_sprintf$1430,indf2
  5919  000894  D08B               	goto	l4150
  5920  000896                     l4130:
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;doprnt.c: 1486: case 0xC0:
  5924                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5925  000896  0100               	movlb	0	; () banked
  5926  000898  518F               	movf	sprintf@prec& (0+255),w,b
  5927  00089A  0D02               	mullw	2
  5928  00089C  0E15               	movlw	low _dpowers
  5929  00089E  24F3               	addwf	prodl,w,c
  5930  0008A0  6EF6               	movwf	tblptrl,c
  5931  0008A2  0E7E               	movlw	high _dpowers
  5932  0008A4  20F4               	addwfc	prodh,w,c
  5933  0008A6  6EF7               	movwf	tblptrh,c
  5934  0008A8                     	if	0	;There are less than 3 active tblptr bytes
  5935  0008A8                     	endif
  5936  0008A8  0009               	tblrd		*+
  5937  0008AA  CFF5 F014          	movff	tablat,___lwdiv@divisor
  5938  0008AE  000A               	tblrd		*-
  5939  0008B0  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  5940  0008B4  C08D  F012         	movff	sprintf@val,___lwdiv@dividend
  5941  0008B8  C08E  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  5942  0008BC  ECA7  F00A         	call	___lwdiv	;wreg free
  5943  0008C0  C012  F019         	movff	?___lwdiv,___lwmod@dividend
  5944  0008C4  C013  F01A         	movff	?___lwdiv+1,___lwmod@dividend+1
  5945  0008C8  0E00               	movlw	0
  5946  0008CA  6E1C               	movwf	___lwmod@divisor+1,c
  5947  0008CC  0E0A               	movlw	10
  5948  0008CE  6E1B               	movwf	___lwmod@divisor,c
  5949  0008D0  ECF5  F00A         	call	___lwmod	;wreg free
  5950  0008D4  5019               	movf	?___lwmod,w,c
  5951  0008D6  D051               	goto	L8
  5952  0008D8                     l4132:
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;doprnt.c: 1499: {
  5956                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5957  0008D8  C08D  F012         	movff	sprintf@val,___lwdiv@dividend
  5958  0008DC  C08E  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  5959  0008E0  0100               	movlb	0	; () banked
  5960  0008E2  518F               	movf	sprintf@prec& (0+255),w,b
  5961  0008E4  0D02               	mullw	2
  5962  0008E6  0E1F               	movlw	low _hexpowers
  5963  0008E8  24F3               	addwf	prodl,w,c
  5964  0008EA  6EF6               	movwf	tblptrl,c
  5965  0008EC  0E7E               	movlw	high _hexpowers
  5966  0008EE  20F4               	addwfc	prodh,w,c
  5967  0008F0  6EF7               	movwf	tblptrh,c
  5968  0008F2                     	if	0	;There are less than 3 active tblptr bytes
  5969  0008F2                     	endif
  5970  0008F2  0009               	tblrd		*+
  5971  0008F4  CFF5 F014          	movff	tablat,___lwdiv@divisor
  5972  0008F8  000A               	tblrd		*-
  5973  0008FA  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  5974  0008FE  ECA7  F00A         	call	___lwdiv	;wreg free
  5975  000902  5012               	movf	?___lwdiv,w,c
  5976  000904  0B0F               	andlw	15
  5977  000906  0100               	movlb	0	; () banked
  5978  000908  6F80               	movwf	sprintf@idx& (0+255),b
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  5982  00090A  0100               	movlb	0	; () banked
  5983  00090C  BB93               	btfsc	sprintf@flag& (0+255),5,b
  5984  00090E  D005               	goto	l4138
  5985                           
  5986                           ; BSR set to: 0
  5987  000910  0ED4               	movlw	low STR_64
  5988  000912  0100               	movlb	0	; () banked
  5989  000914  6F85               	movwf	_sprintf$1436& (0+255),b
  5990  000916  0E7E               	movlw	high STR_64
  5991  000918  D004               	goto	L9
  5992  00091A                     l4138:
  5993                           
  5994                           ; BSR set to: 0
  5995  00091A  0EC3               	movlw	low STR_63
  5996  00091C  0100               	movlb	0	; () banked
  5997  00091E  6F85               	movwf	_sprintf$1436& (0+255),b
  5998  000920  0E7E               	movlw	high STR_63
  5999  000922                     L9:
  6000  000922  0100               	movlb	0	; () banked
  6001  000924  6F86               	movwf	(_sprintf$1436+1)& (0+255),b
  6002                           
  6003                           ; BSR set to: 0
  6004                           
  6005                           ; BSR set to: 0
  6006  000926  0100               	movlb	0	; () banked
  6007  000928  5180               	movf	sprintf@idx& (0+255),w,b
  6008  00092A  0D01               	mullw	1
  6009  00092C  C085  F028         	movff	_sprintf$1436,??_sprintf
  6010  000930  C086  F029         	movff	_sprintf$1436+1,??_sprintf+1
  6011  000934  50F3               	movf	prodl,w,c
  6012  000936  2628               	addwf	??_sprintf,f,c
  6013  000938  50F4               	movf	prodh,w,c
  6014  00093A  2229               	addwfc	??_sprintf+1,f,c
  6015  00093C  C028  FFF6         	movff	??_sprintf,tblptrl
  6016  000940  C029  FFF7         	movff	??_sprintf+1,tblptrh
  6017  000944                     	if	0	;tblptru may be non-zero
  6018  000944                     	endif
  6019  000944                     	if	0	;tblptru may be non-zero
  6020  000944                     	endif
  6021  000944  0008               	tblrd		*
  6022  000946  CFF5 F092          	movff	tablat,sprintf@c
  6023                           
  6024                           ;doprnt.c: 1508: }
  6025                           ;doprnt.c: 1510: break;
  6026  00094A  D02A               	goto	l4148
  6027  00094C                     l4142:
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  6031  00094C  C08D  F012         	movff	sprintf@val,___lwdiv@dividend
  6032  000950  C08E  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  6033  000954  0100               	movlb	0	; () banked
  6034  000956  518F               	movf	sprintf@prec& (0+255),w,b
  6035  000958  0D02               	mullw	2
  6036  00095A  0E09               	movlw	low _octpowers
  6037  00095C  24F3               	addwf	prodl,w,c
  6038  00095E  6EF6               	movwf	tblptrl,c
  6039  000960  0E7E               	movlw	high _octpowers
  6040  000962  20F4               	addwfc	prodh,w,c
  6041  000964  6EF7               	movwf	tblptrh,c
  6042  000966                     	if	0	;There are less than 3 active tblptr bytes
  6043  000966                     	endif
  6044  000966  0009               	tblrd		*+
  6045  000968  CFF5 F014          	movff	tablat,___lwdiv@divisor
  6046  00096C  000A               	tblrd		*-
  6047  00096E  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  6048  000972  ECA7  F00A         	call	___lwdiv	;wreg free
  6049  000976  5012               	movf	?___lwdiv,w,c
  6050  000978  0B07               	andlw	7
  6051  00097A                     L8:
  6052  00097A  0F30               	addlw	48
  6053  00097C  0100               	movlb	0	; () banked
  6054  00097E  6F92               	movwf	sprintf@c& (0+255),b
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;doprnt.c: 1523: }
  6058                           
  6059                           ;doprnt.c: 1520: break;
  6060  000980  D00F               	goto	l4148
  6061  000982                     l4146:
  6062                           
  6063                           ; BSR set to: 0
  6064  000982  0100               	movlb	0	; () banked
  6065  000984  5193               	movf	sprintf@flag& (0+255),w,b
  6066  000986  0BC0               	andlw	192
  6067                           
  6068                           ; Switch size 1, requested type "space"
  6069                           ; Number of cases is 4, Range of values is 0 to 192
  6070                           ; switch strategies available:
  6071                           ; Name         Instructions Cycles
  6072                           ; simple_byte           13     7 (average)
  6073                           ;	Chosen strategy is simple_byte
  6074  000988  0A00               	xorlw	0	; case 0
  6075  00098A  B4D8               	btfsc	status,2,c
  6076  00098C  D784               	goto	l4130
  6077  00098E  0A40               	xorlw	64	; case 64
  6078  000990  B4D8               	btfsc	status,2,c
  6079  000992  D7DC               	goto	l4142
  6080  000994  0AC0               	xorlw	192	; case 128
  6081  000996  B4D8               	btfsc	status,2,c
  6082  000998  D79F               	goto	l4132
  6083  00099A  0A40               	xorlw	64	; case 192
  6084  00099C  B4D8               	btfsc	status,2,c
  6085  00099E  D77B               	goto	l4130
  6086  0009A0                     l4148:
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6090  0009A0  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6091  0009A4  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6092  0009A8  C092  FFDF         	movff	sprintf@c,indf2
  6093  0009AC                     l4150:
  6094                           
  6095                           ; BSR set to: 0
  6096  0009AC  4A1E               	infsnz	sprintf@sp,f,c
  6097  0009AE  2A1F               	incf	sprintf@sp+1,f,c
  6098  0009B0                     l4152:
  6099                           
  6100                           ; BSR set to: 0
  6101  0009B0  0100               	movlb	0	; () banked
  6102  0009B2  078F               	decf	sprintf@prec& (0+255),f,b
  6103  0009B4  0100               	movlb	0	; () banked
  6104  0009B6  298F               	incf	sprintf@prec& (0+255),w,b
  6105  0009B8  A4D8               	btfss	status,2,c
  6106  0009BA  D7E3               	goto	l4146
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;doprnt.c: 1525: }
  6110                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  6111  0009BC  0100               	movlb	0	; () banked
  6112  0009BE  A793               	btfss	sprintf@flag& (0+255),3,b
  6113  0009C0  D01C               	goto	l4162
  6114                           
  6115                           ; BSR set to: 0
  6116  0009C2  0100               	movlb	0	; () banked
  6117  0009C4  BF91               	btfsc	(sprintf@width+1)& (0+255),7,b
  6118  0009C6  D019               	goto	l4162
  6119  0009C8  0100               	movlb	0	; () banked
  6120  0009CA  5191               	movf	(sprintf@width+1)& (0+255),w,b
  6121  0009CC  E104               	bnz	l4156
  6122  0009CE  0100               	movlb	0	; () banked
  6123  0009D0  0590               	decf	sprintf@width& (0+255),w,b
  6124  0009D2  A0D8               	btfss	status,0,c
  6125  0009D4  D012               	goto	l4162
  6126  0009D6                     l4156:
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  6130  0009D6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6131  0009DA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6132  0009DE  0E20               	movlw	32
  6133  0009E0  6EDF               	movwf	indf2,c
  6134                           
  6135                           ; BSR set to: 0
  6136  0009E2  4A1E               	infsnz	sprintf@sp,f,c
  6137  0009E4  2A1F               	incf	sprintf@sp+1,f,c
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;doprnt.c: 1531: while(--width);
  6141  0009E6  0100               	movlb	0	; () banked
  6142  0009E8  0790               	decf	sprintf@width& (0+255),f,b
  6143  0009EA  A0D8               	btfss	status,0,c
  6144  0009EC  0791               	decf	(sprintf@width+1)& (0+255),f,b
  6145  0009EE  0100               	movlb	0	; () banked
  6146  0009F0  5190               	movf	sprintf@width& (0+255),w,b
  6147  0009F2  0100               	movlb	0	; () banked
  6148  0009F4  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6149  0009F6  A4D8               	btfss	status,2,c
  6150  0009F8  D7EE               	goto	l4156
  6151  0009FA                     l4162:
  6152                           
  6153                           ; BSR set to: 0
  6154  0009FA  C020  FFF6         	movff	sprintf@f,tblptrl
  6155  0009FE  C021  FFF7         	movff	sprintf@f+1,tblptrh
  6156  000A02  4A20               	infsnz	sprintf@f,f,c
  6157  000A04  2A21               	incf	sprintf@f+1,f,c
  6158  000A06                     	if	0	;tblptru may be non-zero
  6159  000A06                     	endif
  6160  000A06                     	if	0	;tblptru may be non-zero
  6161  000A06                     	endif
  6162  000A06  0008               	tblrd		*
  6163  000A08  CFF5 F092          	movff	tablat,sprintf@c
  6164  000A0C  0100               	movlb	0	; () banked
  6165  000A0E  5192               	movf	sprintf@c& (0+255),w,b
  6166  000A10  A4D8               	btfss	status,2,c
  6167  000A12  EF11  F000         	goto	l3808
  6168  000A16                     l4164:
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;doprnt.c: 1538: *sp = 0;
  6172  000A16  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6173  000A1A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6174  000A1E  0E00               	movlw	0
  6175  000A20  6EDF               	movwf	indf2,c
  6176  000A22  0012               	return	
  6177  000A24                     __end_of_sprintf:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           intcon	equ	0xFF2
  6186                           indf0	equ	0xFEF
  6187                           postinc0	equ	0xFEE
  6188                           fsr0h	equ	0xFEA
  6189                           fsr0l	equ	0xFE9
  6190                           wreg	equ	0xFE8
  6191                           postdec1	equ	0xFE5
  6192                           plusw1	equ	0xFE3
  6193                           fsr1l	equ	0xFE1
  6194                           indf2	equ	0xFDF
  6195                           postinc2	equ	0xFDE
  6196                           postdec2	equ	0xFDD
  6197                           plusw2	equ	0xFDB
  6198                           fsr2h	equ	0xFDA
  6199                           fsr2l	equ	0xFD9
  6200                           status	equ	0xFD8
  6201                           
  6202 ;; *************** function _isdigit *****************
  6203 ;; Defined at:
  6204 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  c               1    wreg     unsigned char 
  6207 ;; Auto vars:     Size  Location     Type
  6208 ;;  c               1   19[COMRAM] unsigned char 
  6209 ;; Return value:  Size  Location     Type
  6210 ;;		None               void
  6211 ;; Registers used:
  6212 ;;		wreg, status,2, status,0
  6213 ;; Tracked objects:
  6214 ;;		On entry : 0/0
  6215 ;;		On exit  : 0/0
  6216 ;;		Unchanged: 0/0
  6217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6218 ;;      Params:         0       0       0       0       0       0       0
  6219 ;;      Locals:         2       0       0       0       0       0       0
  6220 ;;      Temps:          1       0       0       0       0       0       0
  6221 ;;      Totals:         3       0       0       0       0       0       0
  6222 ;;Total ram usage:        3 bytes
  6223 ;; Hardware stack levels used:    1
  6224 ;; Hardware stack levels required when called:    1
  6225 ;; This function calls:
  6226 ;;		Nothing
  6227 ;; This function is called by:
  6228 ;;		_sprintf
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text16
  6233  0018CE                     __ptext16:
  6234                           	opt stack 0
  6235  0018CE                     _isdigit:
  6236                           	opt stack 26
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;incstack = 0
  6240                           ;isdigit@c stored from wreg
  6241  0018CE  6E14               	movwf	isdigit@c,c
  6242  0018D0  0E00               	movlw	0
  6243  0018D2  6E13               	movwf	_isdigit$1666,c
  6244  0018D4  0E3A               	movlw	58
  6245  0018D6  6014               	cpfslt	isdigit@c,c
  6246  0018D8  D005               	goto	l3746
  6247  0018DA  0E2F               	movlw	47
  6248  0018DC  6414               	cpfsgt	isdigit@c,c
  6249  0018DE  D002               	goto	l3746
  6250  0018E0  0E01               	movlw	1
  6251  0018E2  6E13               	movwf	_isdigit$1666,c
  6252  0018E4                     l3746:
  6253  0018E4  C013  F012         	movff	_isdigit$1666,??_isdigit
  6254  0018E8  3012               	rrcf	??_isdigit,w,c
  6255  0018EA  0012               	return	
  6256  0018EC                     __end_of_isdigit:
  6257                           	opt stack 0
  6258                           tblptru	equ	0xFF8
  6259                           tblptrh	equ	0xFF7
  6260                           tblptrl	equ	0xFF6
  6261                           tablat	equ	0xFF5
  6262                           prodh	equ	0xFF4
  6263                           prodl	equ	0xFF3
  6264                           intcon	equ	0xFF2
  6265                           indf0	equ	0xFEF
  6266                           postinc0	equ	0xFEE
  6267                           fsr0h	equ	0xFEA
  6268                           fsr0l	equ	0xFE9
  6269                           wreg	equ	0xFE8
  6270                           postdec1	equ	0xFE5
  6271                           plusw1	equ	0xFE3
  6272                           fsr1l	equ	0xFE1
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           plusw2	equ	0xFDB
  6277                           fsr2h	equ	0xFDA
  6278                           fsr2l	equ	0xFD9
  6279                           status	equ	0xFD8
  6280                           
  6281 ;; *************** function ___wmul *****************
  6282 ;; Defined at:
  6283 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;  multiplier      2   17[COMRAM] unsigned int 
  6286 ;;  multiplicand    2   19[COMRAM] unsigned int 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  product         2   21[COMRAM] unsigned int 
  6289 ;; Return value:  Size  Location     Type
  6290 ;;                  2   17[COMRAM] unsigned int 
  6291 ;; Registers used:
  6292 ;;		wreg, status,2, status,0, prodl, prodh
  6293 ;; Tracked objects:
  6294 ;;		On entry : 0/0
  6295 ;;		On exit  : 0/0
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6298 ;;      Params:         4       0       0       0       0       0       0
  6299 ;;      Locals:         2       0       0       0       0       0       0
  6300 ;;      Temps:          0       0       0       0       0       0       0
  6301 ;;      Totals:         6       0       0       0       0       0       0
  6302 ;;Total ram usage:        6 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    1
  6305 ;; This function calls:
  6306 ;;		Nothing
  6307 ;; This function is called by:
  6308 ;;		_sprintf
  6309 ;;		_delay_ms1
  6310 ;;		_delay_us1
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text17
  6315  0017F6                     __ptext17:
  6316                           	opt stack 0
  6317  0017F6                     ___wmul:
  6318                           	opt stack 26
  6319                           
  6320                           ;incstack = 0
  6321  0017F6  5012               	movf	___wmul@multiplier,w,c
  6322  0017F8  0214               	mulwf	___wmul@multiplicand,c
  6323  0017FA  CFF3 F016          	movff	prodl,___wmul@product
  6324  0017FE  CFF4 F017          	movff	prodh,___wmul@product+1
  6325  001802  5012               	movf	___wmul@multiplier,w,c
  6326  001804  0215               	mulwf	___wmul@multiplicand+1,c
  6327  001806  50F3               	movf	prodl,w,c
  6328  001808  2617               	addwf	___wmul@product+1,f,c
  6329  00180A  5013               	movf	___wmul@multiplier+1,w,c
  6330  00180C  0214               	mulwf	___wmul@multiplicand,c
  6331  00180E  50F3               	movf	prodl,w,c
  6332  001810  2617               	addwf	___wmul@product+1,f,c
  6333  001812  C016  F012         	movff	___wmul@product,?___wmul
  6334  001816  C017  F013         	movff	___wmul@product+1,?___wmul+1
  6335  00181A  0012               	return	
  6336  00181C                     __end_of___wmul:
  6337                           	opt stack 0
  6338                           tblptru	equ	0xFF8
  6339                           tblptrh	equ	0xFF7
  6340                           tblptrl	equ	0xFF6
  6341                           tablat	equ	0xFF5
  6342                           prodh	equ	0xFF4
  6343                           prodl	equ	0xFF3
  6344                           intcon	equ	0xFF2
  6345                           indf0	equ	0xFEF
  6346                           postinc0	equ	0xFEE
  6347                           fsr0h	equ	0xFEA
  6348                           fsr0l	equ	0xFE9
  6349                           wreg	equ	0xFE8
  6350                           postdec1	equ	0xFE5
  6351                           plusw1	equ	0xFE3
  6352                           fsr1l	equ	0xFE1
  6353                           indf2	equ	0xFDF
  6354                           postinc2	equ	0xFDE
  6355                           postdec2	equ	0xFDD
  6356                           plusw2	equ	0xFDB
  6357                           fsr2h	equ	0xFDA
  6358                           fsr2l	equ	0xFD9
  6359                           status	equ	0xFD8
  6360                           
  6361 ;; *************** function ___lwmod *****************
  6362 ;; Defined at:
  6363 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  dividend        2   24[COMRAM] unsigned int 
  6366 ;;  divisor         2   26[COMRAM] unsigned int 
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;  counter         1   28[COMRAM] unsigned char 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  2   24[COMRAM] unsigned int 
  6371 ;; Registers used:
  6372 ;;		wreg, status,2, status,0
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6378 ;;      Params:         4       0       0       0       0       0       0
  6379 ;;      Locals:         1       0       0       0       0       0       0
  6380 ;;      Temps:          0       0       0       0       0       0       0
  6381 ;;      Totals:         5       0       0       0       0       0       0
  6382 ;;Total ram usage:        5 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    1
  6385 ;; This function calls:
  6386 ;;		Nothing
  6387 ;; This function is called by:
  6388 ;;		_sprintf
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text18
  6393  0015EA                     __ptext18:
  6394                           	opt stack 0
  6395  0015EA                     ___lwmod:
  6396                           	opt stack 26
  6397                           
  6398                           ;incstack = 0
  6399  0015EA  501B               	movf	___lwmod@divisor,w,c
  6400  0015EC  101C               	iorwf	___lwmod@divisor+1,w,c
  6401  0015EE  B4D8               	btfsc	status,2,c
  6402  0015F0  D018               	goto	l1133
  6403  0015F2  0E01               	movlw	1
  6404  0015F4  6E1D               	movwf	___lwmod@counter,c
  6405  0015F6  D004               	goto	l3784
  6406  0015F8                     l3782:
  6407  0015F8  90D8               	bcf	status,0,c
  6408  0015FA  361B               	rlcf	___lwmod@divisor,f,c
  6409  0015FC  361C               	rlcf	___lwmod@divisor+1,f,c
  6410  0015FE  2A1D               	incf	___lwmod@counter,f,c
  6411  001600                     l3784:
  6412  001600  AE1C               	btfss	___lwmod@divisor+1,7,c
  6413  001602  D7FA               	goto	l3782
  6414  001604                     l3786:
  6415  001604  501B               	movf	___lwmod@divisor,w,c
  6416  001606  5C19               	subwf	___lwmod@dividend,w,c
  6417  001608  501C               	movf	___lwmod@divisor+1,w,c
  6418  00160A  581A               	subwfb	___lwmod@dividend+1,w,c
  6419  00160C  A0D8               	btfss	status,0,c
  6420  00160E  D004               	goto	l3790
  6421  001610  501B               	movf	___lwmod@divisor,w,c
  6422  001612  5E19               	subwf	___lwmod@dividend,f,c
  6423  001614  501C               	movf	___lwmod@divisor+1,w,c
  6424  001616  5A1A               	subwfb	___lwmod@dividend+1,f,c
  6425  001618                     l3790:
  6426  001618  90D8               	bcf	status,0,c
  6427  00161A  321C               	rrcf	___lwmod@divisor+1,f,c
  6428  00161C  321B               	rrcf	___lwmod@divisor,f,c
  6429  00161E  2E1D               	decfsz	___lwmod@counter,f,c
  6430  001620  D7F1               	goto	l3786
  6431  001622                     l1133:
  6432  001622  C019  F019         	movff	___lwmod@dividend,?___lwmod
  6433  001626  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  6434  00162A  0012               	return		;funcret
  6435  00162C                     __end_of___lwmod:
  6436                           	opt stack 0
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           intcon	equ	0xFF2
  6444                           indf0	equ	0xFEF
  6445                           postinc0	equ	0xFEE
  6446                           fsr0h	equ	0xFEA
  6447                           fsr0l	equ	0xFE9
  6448                           wreg	equ	0xFE8
  6449                           postdec1	equ	0xFE5
  6450                           plusw1	equ	0xFE3
  6451                           fsr1l	equ	0xFE1
  6452                           indf2	equ	0xFDF
  6453                           postinc2	equ	0xFDE
  6454                           postdec2	equ	0xFDD
  6455                           plusw2	equ	0xFDB
  6456                           fsr2h	equ	0xFDA
  6457                           fsr2l	equ	0xFD9
  6458                           status	equ	0xFD8
  6459                           
  6460 ;; *************** function ___lwdiv *****************
  6461 ;; Defined at:
  6462 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6463 ;; Parameters:    Size  Location     Type
  6464 ;;  dividend        2   17[COMRAM] unsigned int 
  6465 ;;  divisor         2   19[COMRAM] unsigned int 
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;  quotient        2   22[COMRAM] unsigned int 
  6468 ;;  counter         1   21[COMRAM] unsigned char 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  2   17[COMRAM] unsigned int 
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6478 ;;      Params:         4       0       0       0       0       0       0
  6479 ;;      Locals:         3       0       0       0       0       0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0
  6481 ;;      Totals:         7       0       0       0       0       0       0
  6482 ;;Total ram usage:        7 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    1
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		_sprintf
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text19
  6493  00154E                     __ptext19:
  6494                           	opt stack 0
  6495  00154E                     ___lwdiv:
  6496                           	opt stack 26
  6497                           
  6498                           ;incstack = 0
  6499  00154E  0E00               	movlw	0
  6500  001550  6E18               	movwf	___lwdiv@quotient+1,c
  6501  001552  0E00               	movlw	0
  6502  001554  6E17               	movwf	___lwdiv@quotient,c
  6503  001556  5014               	movf	___lwdiv@divisor,w,c
  6504  001558  1015               	iorwf	___lwdiv@divisor+1,w,c
  6505  00155A  B4D8               	btfsc	status,2,c
  6506  00155C  D01C               	goto	l1123
  6507  00155E  0E01               	movlw	1
  6508  001560  6E16               	movwf	___lwdiv@counter,c
  6509  001562  D004               	goto	l3764
  6510  001564                     l3762:
  6511  001564  90D8               	bcf	status,0,c
  6512  001566  3614               	rlcf	___lwdiv@divisor,f,c
  6513  001568  3615               	rlcf	___lwdiv@divisor+1,f,c
  6514  00156A  2A16               	incf	___lwdiv@counter,f,c
  6515  00156C                     l3764:
  6516  00156C  AE15               	btfss	___lwdiv@divisor+1,7,c
  6517  00156E  D7FA               	goto	l3762
  6518  001570                     l3766:
  6519  001570  90D8               	bcf	status,0,c
  6520  001572  3617               	rlcf	___lwdiv@quotient,f,c
  6521  001574  3618               	rlcf	___lwdiv@quotient+1,f,c
  6522  001576  5014               	movf	___lwdiv@divisor,w,c
  6523  001578  5C12               	subwf	___lwdiv@dividend,w,c
  6524  00157A  5015               	movf	___lwdiv@divisor+1,w,c
  6525  00157C  5813               	subwfb	___lwdiv@dividend+1,w,c
  6526  00157E  A0D8               	btfss	status,0,c
  6527  001580  D005               	goto	l3774
  6528  001582  5014               	movf	___lwdiv@divisor,w,c
  6529  001584  5E12               	subwf	___lwdiv@dividend,f,c
  6530  001586  5015               	movf	___lwdiv@divisor+1,w,c
  6531  001588  5A13               	subwfb	___lwdiv@dividend+1,f,c
  6532  00158A  8017               	bsf	___lwdiv@quotient,0,c
  6533  00158C                     l3774:
  6534  00158C  90D8               	bcf	status,0,c
  6535  00158E  3215               	rrcf	___lwdiv@divisor+1,f,c
  6536  001590  3214               	rrcf	___lwdiv@divisor,f,c
  6537  001592  2E16               	decfsz	___lwdiv@counter,f,c
  6538  001594  D7ED               	goto	l3766
  6539  001596                     l1123:
  6540  001596  C017  F012         	movff	___lwdiv@quotient,?___lwdiv
  6541  00159A  C018  F013         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6542  00159E  0012               	return		;funcret
  6543  0015A0                     __end_of___lwdiv:
  6544                           	opt stack 0
  6545                           tblptru	equ	0xFF8
  6546                           tblptrh	equ	0xFF7
  6547                           tblptrl	equ	0xFF6
  6548                           tablat	equ	0xFF5
  6549                           prodh	equ	0xFF4
  6550                           prodl	equ	0xFF3
  6551                           intcon	equ	0xFF2
  6552                           indf0	equ	0xFEF
  6553                           postinc0	equ	0xFEE
  6554                           fsr0h	equ	0xFEA
  6555                           fsr0l	equ	0xFE9
  6556                           wreg	equ	0xFE8
  6557                           postdec1	equ	0xFE5
  6558                           plusw1	equ	0xFE3
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           plusw2	equ	0xFDB
  6564                           fsr2h	equ	0xFDA
  6565                           fsr2l	equ	0xFD9
  6566                           status	equ	0xFD8
  6567                           
  6568 ;; *************** function _ESP8266_AT_Test *****************
  6569 ;; Defined at:
  6570 ;;		line 130 in file "harwave/UART.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;		None
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;		None
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      void 
  6577 ;; Registers used:
  6578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6584 ;;      Params:         0       0       0       0       0       0       0
  6585 ;;      Locals:         0       0       0       0       0       0       0
  6586 ;;      Temps:          0       0       0       0       0       0       0
  6587 ;;      Totals:         0       0       0       0       0       0       0
  6588 ;;Total ram usage:        0 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    4
  6591 ;; This function calls:
  6592 ;;		_ESP8266_Cmd
  6593 ;; This function is called by:
  6594 ;;		_ESP8266_client
  6595 ;;		_ESP8266_Server
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           	psect	text20
  6600  0017A4                     __ptext20:
  6601                           	opt stack 0
  6602  0017A4                     _ESP8266_AT_Test:
  6603                           	opt stack 25
  6604  0017A4                     l4232:
  6605  0017A4  0EE0               	movlw	low STR_4
  6606  0017A6  6E25               	movwf	ESP8266_Cmd@cmd,c
  6607  0017A8  0E7F               	movlw	high STR_4
  6608  0017AA  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  6609  0017AC  0EC1               	movlw	low (STR_3+5)
  6610  0017AE  6E27               	movwf	ESP8266_Cmd@reply1,c
  6611  0017B0  0E7F               	movlw	high (STR_3+5)
  6612  0017B2  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  6613  0017B4  0E00               	movlw	0
  6614  0017B6  6E29               	movwf	ESP8266_Cmd@reply2,c
  6615  0017B8  0E00               	movlw	0
  6616  0017BA  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  6617  0017BC  0E00               	movlw	0
  6618  0017BE  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  6619  0017C0  0EC8               	movlw	200
  6620  0017C2  6E2B               	movwf	ESP8266_Cmd@waittime,c
  6621  0017C4  EC17  F008         	call	_ESP8266_Cmd	;wreg free
  6622  0017C8  0900               	iorlw	0
  6623  0017CA  A4D8               	btfss	status,2,c
  6624  0017CC  0012               	return	
  6625  0017CE  D7EA               	goto	l4232
  6626  0017D0                     __end_of_ESP8266_AT_Test:
  6627                           	opt stack 0
  6628                           tblptru	equ	0xFF8
  6629                           tblptrh	equ	0xFF7
  6630                           tblptrl	equ	0xFF6
  6631                           tablat	equ	0xFF5
  6632                           prodh	equ	0xFF4
  6633                           prodl	equ	0xFF3
  6634                           intcon	equ	0xFF2
  6635                           indf0	equ	0xFEF
  6636                           postinc0	equ	0xFEE
  6637                           fsr0h	equ	0xFEA
  6638                           fsr0l	equ	0xFE9
  6639                           wreg	equ	0xFE8
  6640                           postdec1	equ	0xFE5
  6641                           plusw1	equ	0xFE3
  6642                           fsr1l	equ	0xFE1
  6643                           indf2	equ	0xFDF
  6644                           postinc2	equ	0xFDE
  6645                           postdec2	equ	0xFDD
  6646                           plusw2	equ	0xFDB
  6647                           fsr2h	equ	0xFDA
  6648                           fsr2l	equ	0xFD9
  6649                           status	equ	0xFD8
  6650                           
  6651 ;; *************** function _ESP8266_Cmd *****************
  6652 ;; Defined at:
  6653 ;;		line 86 in file "harwave/UART.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;  cmd             2   36[COMRAM] PTR unsigned char 
  6656 ;;		 -> STR_55(14), STR_53(15), STR_49(11), STR_47(22), 
  6657 ;;		 -> STR_45(14), STR_43(15), STR_41(14), STR_35(13), 
  6658 ;;		 -> STR_32(13), STR_30(25), STR_28(23), ESP8266_Link_Server@cCmd(120), 
  6659 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_13(14), STR_11(14), 
  6660 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@cStr(20), 
  6661 ;;  reply1          2   38[COMRAM] PTR unsigned char 
  6662 ;;		 -> STR_56(3), STR_54(3), STR_50(3), STR_48(3), 
  6663 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_36(10), 
  6664 ;;		 -> STR_33(10), STR_31(3), STR_29(3), STR_26(8), 
  6665 ;;		 -> STR_19(3), STR_16(3), STR_14(3), STR_12(3), 
  6666 ;;		 -> STR_10(3), STR_7(3), STR_5(3), STR_3(8), 
  6667 ;;		 -> STR_2(3), 
  6668 ;;  reply2          2   40[COMRAM] PTR unsigned char 
  6669 ;;		 -> STR_37(3), STR_34(3), STR_27(7), STR_17(10), 
  6670 ;;		 -> STR_8(6), NULL(0), 
  6671 ;;  waittime        2   42[COMRAM] unsigned int 
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;		None
  6674 ;; Return value:  Size  Location     Type
  6675 ;;                  1    wreg      unsigned char 
  6676 ;; Registers used:
  6677 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6678 ;; Tracked objects:
  6679 ;;		On entry : 0/0
  6680 ;;		On exit  : 0/0
  6681 ;;		Unchanged: 0/0
  6682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6683 ;;      Params:         8       0       0       0       0       0       0
  6684 ;;      Locals:         1       0       0       0       0       0       0
  6685 ;;      Temps:          0       0       0       0       0       0       0
  6686 ;;      Totals:         9       0       0       0       0       0       0
  6687 ;;Total ram usage:        9 bytes
  6688 ;; Hardware stack levels used:    1
  6689 ;; Hardware stack levels required when called:    3
  6690 ;; This function calls:
  6691 ;;		_ESP8266_Uart
  6692 ;;		_delay_ms
  6693 ;;		_strstr
  6694 ;; This function is called by:
  6695 ;;		_ESP8266_AT_Test
  6696 ;;		_ESP8266_Rst
  6697 ;;		_ESP8266_Net_Mode_Choose
  6698 ;;		_ESP8266_JoinAP
  6699 ;;		_ESP8266_Link_Server
  6700 ;;		_STA_MODE
  6701 ;;		_ESP8266_client
  6702 ;;		_ESP8266_SendString
  6703 ;;		_ESP8266_BuildAP
  6704 ;;		_set_baudrate
  6705 ;;		_AP_MODE
  6706 ;;		_ESP8266_Server
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           	psect	text21
  6711  00102E                     __ptext21:
  6712                           	opt stack 0
  6713  00102E                     _ESP8266_Cmd:
  6714                           	opt stack 24
  6715                           
  6716                           ;UART.c: 88: test_index=0;
  6717                           
  6718                           ;incstack = 0
  6719  00102E  0E00               	movlw	0
  6720  001030  6E5F               	movwf	_test_index+1,c
  6721  001032  0E00               	movlw	0
  6722  001034  6E5E               	movwf	_test_index,c
  6723                           
  6724                           ;UART.c: 89: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  6725  001036  0102               	movlb	2	; () banked
  6726  001038  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  6727  00103A  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  6728  00103C  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  6729  00103E  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  6730  001040  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  6731  001042  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  6732  001044  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  6733                           
  6734                           ; BSR set to: 2
  6735                           ;UART.c: 93: ESP8266_Uart( cmd);
  6736  001046  C025  F012         	movff	ESP8266_Cmd@cmd,ESP8266_Uart@cmd
  6737  00104A  C026  F013         	movff	ESP8266_Cmd@cmd+1,ESP8266_Uart@cmd+1
  6738  00104E  ECEE  F009         	call	_ESP8266_Uart	;wreg free
  6739                           
  6740                           ;UART.c: 96: if ( ( reply1 == 0 ) && ( reply2 == 0 ) )
  6741  001052  5027               	movf	ESP8266_Cmd@reply1,w,c
  6742  001054  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  6743  001056  A4D8               	btfss	status,2,c
  6744  001058  D006               	goto	l3708
  6745  00105A  5029               	movf	ESP8266_Cmd@reply2,w,c
  6746  00105C  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  6747  00105E  A4D8               	btfss	status,2,c
  6748  001060  D002               	goto	l3708
  6749                           
  6750                           ;UART.c: 97: return 1;
  6751  001062  0E01               	movlw	1
  6752  001064  0012               	return	
  6753  001066                     l3708:
  6754                           
  6755                           ;UART.c: 99: delay_ms ( waittime );
  6756  001066  C02B  F014         	movff	ESP8266_Cmd@waittime,delay_ms@ms
  6757  00106A  C02C  F015         	movff	ESP8266_Cmd@waittime+1,delay_ms@ms+1
  6758  00106E  EC82  F00C         	call	_delay_ms	;wreg free
  6759                           
  6760                           ;UART.c: 106: if ( ( reply1 != 0 ) && ( reply2 != 0 ) )
  6761  001072  5027               	movf	ESP8266_Cmd@reply1,w,c
  6762  001074  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  6763  001076  B4D8               	btfsc	status,2,c
  6764  001078  D022               	goto	l3726
  6765  00107A  5029               	movf	ESP8266_Cmd@reply2,w,c
  6766  00107C  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  6767  00107E  B4D8               	btfsc	status,2,c
  6768  001080  D01E               	goto	l3726
  6769                           
  6770                           ;UART.c: 107: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) || (u
      +                          8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  6771  001082  0E01               	movlw	1
  6772  001084  6E2D               	movwf	_ESP8266_Cmd$1209,c
  6773  001086  0E9A               	movlw	low _strEsp8266_Fram_Record
  6774  001088  6E21               	movwf	strstr@s1,c
  6775  00108A  0E02               	movlw	high _strEsp8266_Fram_Record
  6776  00108C  6E22               	movwf	strstr@s1+1,c
  6777  00108E  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  6778  001092  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  6779  001096  EC6B  F009         	call	_strstr	;wreg free
  6780  00109A  6621               	tstfsz	?_strstr,c
  6781  00109C  D00E               	goto	l356
  6782  00109E  0E9A               	movlw	low _strEsp8266_Fram_Record
  6783  0010A0  6E21               	movwf	strstr@s1,c
  6784  0010A2  0E02               	movlw	high _strEsp8266_Fram_Record
  6785  0010A4  6E22               	movwf	strstr@s1+1,c
  6786  0010A6  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  6787  0010AA  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  6788  0010AE  EC6B  F009         	call	_strstr	;wreg free
  6789  0010B2  6621               	tstfsz	?_strstr,c
  6790  0010B4  D002               	goto	l356
  6791  0010B6  0E00               	movlw	0
  6792  0010B8  6E2D               	movwf	_ESP8266_Cmd$1209,c
  6793  0010BA                     l356:
  6794  0010BA  502D               	movf	_ESP8266_Cmd$1209,w,c
  6795  0010BC  0012               	return	
  6796  0010BE                     l3726:
  6797                           
  6798                           ;UART.c: 108: else if ( reply1 != 0 )
  6799  0010BE  5027               	movf	ESP8266_Cmd@reply1,w,c
  6800  0010C0  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  6801  0010C2  B4D8               	btfsc	status,2,c
  6802  0010C4  D00C               	goto	l3734
  6803                           
  6804                           ;UART.c: 109: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) );
  6805  0010C6  0E9A               	movlw	low _strEsp8266_Fram_Record
  6806  0010C8  6E21               	movwf	strstr@s1,c
  6807  0010CA  0E02               	movlw	high _strEsp8266_Fram_Record
  6808  0010CC  6E22               	movwf	strstr@s1+1,c
  6809  0010CE  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  6810  0010D2  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  6811  0010D6  EC6B  F009         	call	_strstr	;wreg free
  6812  0010DA  5021               	movf	?_strstr,w,c
  6813  0010DC  0012               	return	
  6814  0010DE                     l3734:
  6815                           
  6816                           ;UART.c: 110: else
  6817                           ;UART.c: 111: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  6818  0010DE  0E9A               	movlw	low _strEsp8266_Fram_Record
  6819  0010E0  6E21               	movwf	strstr@s1,c
  6820  0010E2  0E02               	movlw	high _strEsp8266_Fram_Record
  6821  0010E4  6E22               	movwf	strstr@s1+1,c
  6822  0010E6  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  6823  0010EA  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  6824  0010EE  EC6B  F009         	call	_strstr	;wreg free
  6825  0010F2  5021               	movf	?_strstr,w,c
  6826  0010F4  0012               	return	
  6827  0010F6                     __end_of_ESP8266_Cmd:
  6828                           	opt stack 0
  6829                           tblptru	equ	0xFF8
  6830                           tblptrh	equ	0xFF7
  6831                           tblptrl	equ	0xFF6
  6832                           tablat	equ	0xFF5
  6833                           prodh	equ	0xFF4
  6834                           prodl	equ	0xFF3
  6835                           intcon	equ	0xFF2
  6836                           indf0	equ	0xFEF
  6837                           postinc0	equ	0xFEE
  6838                           fsr0h	equ	0xFEA
  6839                           fsr0l	equ	0xFE9
  6840                           wreg	equ	0xFE8
  6841                           postdec1	equ	0xFE5
  6842                           plusw1	equ	0xFE3
  6843                           fsr1l	equ	0xFE1
  6844                           indf2	equ	0xFDF
  6845                           postinc2	equ	0xFDE
  6846                           postdec2	equ	0xFDD
  6847                           plusw2	equ	0xFDB
  6848                           fsr2h	equ	0xFDA
  6849                           fsr2l	equ	0xFD9
  6850                           status	equ	0xFD8
  6851                           
  6852 ;; *************** function _ESP8266_Uart *****************
  6853 ;; Defined at:
  6854 ;;		line 73 in file "harwave/UART.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;  cmd             2   17[COMRAM] PTR unsigned char 
  6857 ;;		 -> STR_55(14), STR_53(15), STR_49(11), STR_47(22), 
  6858 ;;		 -> STR_45(14), STR_43(15), STR_41(14), STR_35(13), 
  6859 ;;		 -> STR_32(13), STR_30(25), STR_28(23), ESP8266_Link_Server@cCmd(120), 
  6860 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_13(14), STR_11(14), 
  6861 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@cStr(20), 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;  index           2   21[COMRAM] int 
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      void 
  6866 ;; Registers used:
  6867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6873 ;;      Params:         2       0       0       0       0       0       0
  6874 ;;      Locals:         2       0       0       0       0       0       0
  6875 ;;      Temps:          2       0       0       0       0       0       0
  6876 ;;      Totals:         6       0       0       0       0       0       0
  6877 ;;Total ram usage:        6 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:    1
  6880 ;; This function calls:
  6881 ;;		Nothing
  6882 ;; This function is called by:
  6883 ;;		_ESP8266_Cmd
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           	psect	text22
  6888  0013DC                     __ptext22:
  6889                           	opt stack 0
  6890  0013DC                     _ESP8266_Uart:
  6891                           	opt stack 25
  6892                           
  6893                           ;UART.c: 74: int index=-1;
  6894                           
  6895                           ;incstack = 0
  6896  0013DC  6816               	setf	ESP8266_Uart@index,c
  6897  0013DE  6817               	setf	ESP8266_Uart@index+1,c
  6898  0013E0                     l3670:
  6899                           
  6900                           ;UART.c: 77: {
  6901                           ;UART.c: 78: index++;
  6902  0013E0  4A16               	infsnz	ESP8266_Uart@index,f,c
  6903  0013E2  2A17               	incf	ESP8266_Uart@index+1,f,c
  6904  0013E4                     l342:
  6905  0013E4  A89E               	btfss	3998,4,c	;volatile
  6906  0013E6  D7FE               	goto	l342
  6907                           
  6908                           ;UART.c: 80: TXREG=cmd[index];
  6909  0013E8  5016               	movf	ESP8266_Uart@index,w,c
  6910  0013EA  2412               	addwf	ESP8266_Uart@cmd,w,c
  6911  0013EC  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  6912  0013EE  5017               	movf	ESP8266_Uart@index+1,w,c
  6913  0013F0  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  6914  0013F2  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  6915  0013F4  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  6916  0013F8  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  6917  0013FC  6AF8               	clrf	tblptru,c
  6918  0013FE  0E05               	movlw	(high __ramtop+-1)
  6919  001400  64F7               	cpfsgt	tblptrh,c
  6920  001402  D003               	bra	u3317
  6921  001404  0008               	tblrd		*
  6922  001406  50F5               	movf	tablat,w,c
  6923  001408  D005               	bra	u3310
  6924  00140A                     u3317:
  6925  00140A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6926  00140E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6927  001412  50EF               	movf	indf0,w,c
  6928  001414                     u3310:
  6929  001414  6EAD               	movwf	4013,c	;volatile
  6930                           
  6931                           ;UART.c: 81: }while(cmd[index]!='\0');
  6932  001416  5016               	movf	ESP8266_Uart@index,w,c
  6933  001418  2412               	addwf	ESP8266_Uart@cmd,w,c
  6934  00141A  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  6935  00141C  5017               	movf	ESP8266_Uart@index+1,w,c
  6936  00141E  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  6937  001420  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  6938  001422  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  6939  001426  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  6940  00142A  6AF8               	clrf	tblptru,c
  6941  00142C  0E05               	movlw	(high __ramtop+-1)
  6942  00142E  64F7               	cpfsgt	tblptrh,c
  6943  001430  D003               	bra	u3327
  6944  001432  0008               	tblrd		*
  6945  001434  50F5               	movf	tablat,w,c
  6946  001436  D005               	bra	u3320
  6947  001438                     u3327:
  6948  001438  CFF6 FFE9          	movff	tblptrl,fsr0l
  6949  00143C  CFF7 FFEA          	movff	tblptrh,fsr0h
  6950  001440  50EF               	movf	indf0,w,c
  6951  001442                     u3320:
  6952  001442  0900               	iorlw	0
  6953  001444  A4D8               	btfss	status,2,c
  6954  001446  D7CC               	goto	l3670
  6955  001448                     l346:
  6956  001448  B2AC               	btfsc	4012,1,c	;volatile
  6957  00144A  0012               	return	
  6958  00144C  D7FD               	goto	l346
  6959  00144E                     __end_of_ESP8266_Uart:
  6960                           	opt stack 0
  6961                           tblptru	equ	0xFF8
  6962                           tblptrh	equ	0xFF7
  6963                           tblptrl	equ	0xFF6
  6964                           tablat	equ	0xFF5
  6965                           prodh	equ	0xFF4
  6966                           prodl	equ	0xFF3
  6967                           intcon	equ	0xFF2
  6968                           indf0	equ	0xFEF
  6969                           postinc0	equ	0xFEE
  6970                           fsr0h	equ	0xFEA
  6971                           fsr0l	equ	0xFE9
  6972                           wreg	equ	0xFE8
  6973                           postdec1	equ	0xFE5
  6974                           plusw1	equ	0xFE3
  6975                           fsr1l	equ	0xFE1
  6976                           indf2	equ	0xFDF
  6977                           postinc2	equ	0xFDE
  6978                           postdec2	equ	0xFDD
  6979                           plusw2	equ	0xFDB
  6980                           fsr2h	equ	0xFDA
  6981                           fsr2l	equ	0xFD9
  6982                           status	equ	0xFD8
  6983                           
  6984 ;; *************** function _ESP8266_ReceiveString *****************
  6985 ;; Defined at:
  6986 ;;		line 256 in file "harwave/UART.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;		None
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;  pRecStr         2   38[COMRAM] PTR unsigned char 
  6991 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  2   36[COMRAM] PTR unsigned char 
  6994 ;; Registers used:
  6995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7001 ;;      Params:         2       0       0       0       0       0       0
  7002 ;;      Locals:         2       0       0       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0       0       0
  7004 ;;      Totals:         4       0       0       0       0       0       0
  7005 ;;Total ram usage:        4 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    3
  7008 ;; This function calls:
  7009 ;;		_strstr
  7010 ;; This function is called by:
  7011 ;;		_main
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           	psect	text23
  7016  0011BA                     __ptext23:
  7017                           	opt stack 0
  7018  0011BA                     _ESP8266_ReceiveString:
  7019                           	opt stack 27
  7020                           
  7021                           ;UART.c: 258: char * pRecStr = 0;
  7022                           
  7023                           ;incstack = 0
  7024  0011BA  0E00               	movlw	0
  7025  0011BC  6E27               	movwf	ESP8266_ReceiveString@pRecStr,c
  7026  0011BE  0E00               	movlw	0
  7027  0011C0  6E28               	movwf	ESP8266_ReceiveString@pRecStr+1,c
  7028                           
  7029                           ;UART.c: 259: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  7030  0011C2  0102               	movlb	2	; () banked
  7031  0011C4  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  7032  0011C6  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  7033  0011C8  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  7034  0011CA  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  7035  0011CC  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  7036  0011CE  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  7037  0011D0  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  7038  0011D2                     l4352:
  7039  0011D2  0E9A               	movlw	low _strEsp8266_Fram_Record
  7040  0011D4  6E21               	movwf	strstr@s1,c
  7041  0011D6  0E02               	movlw	high _strEsp8266_Fram_Record
  7042  0011D8  6E22               	movwf	strstr@s1+1,c
  7043  0011DA  0EFB               	movlw	low STR_59
  7044  0011DC  6E23               	movwf	strstr@s2,c
  7045  0011DE  0E7F               	movlw	high STR_59
  7046  0011E0  6E24               	movwf	strstr@s2+1,c
  7047  0011E2  EC6B  F009         	call	_strstr	;wreg free
  7048  0011E6  5021               	movf	?_strstr,w,c
  7049  0011E8  B4D8               	btfsc	status,2,c
  7050  0011EA  D7F3               	goto	l4352
  7051                           
  7052                           ;UART.c: 261: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  7053  0011EC  0102               	movlb	2	; () banked
  7054  0011EE  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  7055  0011F0  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  7056  0011F2  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  7057  0011F4  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  7058  0011F6  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  7059  0011F8  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  7060  0011FA  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  7061                           
  7062                           ;UART.c: 262: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 0;
  7063  0011FC  0102               	movlb	2	; () banked
  7064  0011FE  9FCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),7,b
  7065  001200                     l4354:
  7066  001200  0E9A               	movlw	low _strEsp8266_Fram_Record
  7067  001202  6E21               	movwf	strstr@s1,c
  7068  001204  0E02               	movlw	high _strEsp8266_Fram_Record
  7069  001206  6E22               	movwf	strstr@s1+1,c
  7070  001208  0EF9               	movlw	low STR_60
  7071  00120A  6E23               	movwf	strstr@s2,c
  7072  00120C  0E7F               	movlw	high STR_60
  7073  00120E  6E24               	movwf	strstr@s2+1,c
  7074  001210  EC6B  F009         	call	_strstr	;wreg free
  7075  001214  5021               	movf	?_strstr,w,c
  7076  001216  1022               	iorwf	?_strstr+1,w,c
  7077  001218  B4D8               	btfsc	status,2,c
  7078  00121A  D7F2               	goto	l4354
  7079                           
  7080                           ;UART.c: 264: if ( strstr ( strEsp8266_Fram_Record .Data_RX_BUF, "\0" ) )
  7081  00121C  0E9A               	movlw	low _strEsp8266_Fram_Record
  7082  00121E  6E21               	movwf	strstr@s1,c
  7083  001220  0E02               	movlw	high _strEsp8266_Fram_Record
  7084  001222  6E22               	movwf	strstr@s1+1,c
  7085  001224  0EF9               	movlw	low STR_60
  7086  001226  6E23               	movwf	strstr@s2,c
  7087  001228  0E7F               	movlw	high STR_60
  7088  00122A  6E24               	movwf	strstr@s2+1,c
  7089  00122C  EC6B  F009         	call	_strstr	;wreg free
  7090  001230  5021               	movf	?_strstr,w,c
  7091  001232  1022               	iorwf	?_strstr+1,w,c
  7092  001234  B4D8               	btfsc	status,2,c
  7093  001236  D004               	goto	l466
  7094                           
  7095                           ;UART.c: 265: pRecStr = strEsp8266_Fram_Record .Data_RX_BUF;
  7096  001238  0E9A               	movlw	low _strEsp8266_Fram_Record
  7097  00123A  6E27               	movwf	ESP8266_ReceiveString@pRecStr,c
  7098  00123C  0E02               	movlw	high _strEsp8266_Fram_Record
  7099  00123E  6E28               	movwf	ESP8266_ReceiveString@pRecStr+1,c
  7100  001240                     l466:
  7101                           
  7102                           ;UART.c: 266: return pRecStr;
  7103  001240  C027  F025         	movff	ESP8266_ReceiveString@pRecStr,?_ESP8266_ReceiveString
  7104  001244  C028  F026         	movff	ESP8266_ReceiveString@pRecStr+1,?_ESP8266_ReceiveString+1
  7105  001248  0012               	return	
  7106  00124A                     __end_of_ESP8266_ReceiveString:
  7107                           	opt stack 0
  7108                           tblptru	equ	0xFF8
  7109                           tblptrh	equ	0xFF7
  7110                           tblptrl	equ	0xFF6
  7111                           tablat	equ	0xFF5
  7112                           prodh	equ	0xFF4
  7113                           prodl	equ	0xFF3
  7114                           intcon	equ	0xFF2
  7115                           indf0	equ	0xFEF
  7116                           postinc0	equ	0xFEE
  7117                           fsr0h	equ	0xFEA
  7118                           fsr0l	equ	0xFE9
  7119                           wreg	equ	0xFE8
  7120                           postdec1	equ	0xFE5
  7121                           plusw1	equ	0xFE3
  7122                           fsr1l	equ	0xFE1
  7123                           indf2	equ	0xFDF
  7124                           postinc2	equ	0xFDE
  7125                           postdec2	equ	0xFDD
  7126                           plusw2	equ	0xFDB
  7127                           fsr2h	equ	0xFDA
  7128                           fsr2l	equ	0xFD9
  7129                           status	equ	0xFD8
  7130                           
  7131 ;; *************** function _strstr *****************
  7132 ;; Defined at:
  7133 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strstr.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;  s1              2   32[COMRAM] PTR const unsigned char 
  7136 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  7137 ;;  s2              2   34[COMRAM] PTR const unsigned char 
  7138 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  7139 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  7140 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  7141 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  7142 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  7143 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  7144 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  7145 ;;		 -> STR_2(3), NULL(0), 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;		None
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  2   32[COMRAM] PTR unsigned char 
  7150 ;; Registers used:
  7151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7157 ;;      Params:         4       0       0       0       0       0       0
  7158 ;;      Locals:         0       0       0       0       0       0       0
  7159 ;;      Temps:          0       0       0       0       0       0       0
  7160 ;;      Totals:         4       0       0       0       0       0       0
  7161 ;;Total ram usage:        4 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    2
  7164 ;; This function calls:
  7165 ;;		_strchr
  7166 ;;		_strlen
  7167 ;;		_strncmp
  7168 ;; This function is called by:
  7169 ;;		_ESP8266_Cmd
  7170 ;;		_ESP8266_ReceiveString
  7171 ;; This function uses a non-reentrant model
  7172 ;;
  7173                           
  7174                           	psect	text24
  7175  0012D6                     __ptext24:
  7176                           	opt stack 0
  7177  0012D6                     _strstr:
  7178                           	opt stack 24
  7179                           
  7180                           ;incstack = 0
  7181  0012D6  D031               	goto	l3684
  7182  0012D8                     l3676:
  7183  0012D8  C021  F018         	movff	strstr@s1,strncmp@s1
  7184  0012DC  C022  F019         	movff	strstr@s1+1,strncmp@s1+1
  7185  0012E0  C023  F01A         	movff	strstr@s2,strncmp@s2
  7186  0012E4  C024  F01B         	movff	strstr@s2+1,strncmp@s2+1
  7187  0012E8  C023  F012         	movff	strstr@s2,strlen@s
  7188  0012EC  C024  F013         	movff	strstr@s2+1,strlen@s+1
  7189  0012F0  EC16  F00B         	call	_strlen	;wreg free
  7190  0012F4  C012  F01C         	movff	?_strlen,strncmp@len
  7191  0012F8  C013  F01D         	movff	?_strlen+1,strncmp@len+1
  7192  0012FC  ECAD  F009         	call	_strncmp	;wreg free
  7193  001300  5018               	movf	?_strncmp,w,c
  7194  001302  1019               	iorwf	?_strncmp+1,w,c
  7195  001304  A4D8               	btfss	status,2,c
  7196  001306  D005               	goto	l3682
  7197  001308  C021  F021         	movff	strstr@s1,?_strstr
  7198  00130C  C022  F022         	movff	strstr@s1+1,?_strstr+1
  7199  001310  0012               	return	
  7200  001312                     l3682:
  7201  001312  0E01               	movlw	1
  7202  001314  2421               	addwf	strstr@s1,w,c
  7203  001316  6E12               	movwf	strchr@ptr,c
  7204  001318  0E00               	movlw	0
  7205  00131A  2022               	addwfc	strstr@s1+1,w,c
  7206  00131C  6E13               	movwf	strchr@ptr+1,c
  7207  00131E  C023  FFF6         	movff	strstr@s2,tblptrl
  7208  001322  C024  FFF7         	movff	strstr@s2+1,tblptrh
  7209  001326                     	if	0	;tblptru may be non-zero
  7210  001326                     	endif
  7211  001326                     	if	0	;tblptru may be non-zero
  7212  001326                     	endif
  7213  001326  0008               	tblrd		*
  7214  001328  50F5               	movf	tablat,w,c
  7215  00132A  6E14               	movwf	strchr@chr,c
  7216  00132C  6A15               	clrf	strchr@chr+1,c
  7217  00132E  EC52  F00B         	call	_strchr	;wreg free
  7218  001332  C012  F021         	movff	?_strchr,strstr@s1
  7219  001336  C013  F022         	movff	?_strchr+1,strstr@s1+1
  7220  00133A                     l3684:
  7221  00133A  5021               	movf	strstr@s1,w,c
  7222  00133C  1022               	iorwf	strstr@s1+1,w,c
  7223  00133E  B4D8               	btfsc	status,2,c
  7224  001340  D007               	goto	l3688
  7225  001342  C021  FFD9         	movff	strstr@s1,fsr2l
  7226  001346  C022  FFDA         	movff	strstr@s1+1,fsr2h
  7227  00134A  50DF               	movf	indf2,w,c
  7228  00134C  A4D8               	btfss	status,2,c
  7229  00134E  D7C4               	goto	l3676
  7230  001350                     l3688:
  7231  001350  0E00               	movlw	0
  7232  001352  6E21               	movwf	?_strstr,c
  7233  001354  0E00               	movlw	0
  7234  001356  6E22               	movwf	?_strstr+1,c
  7235  001358  0012               	return	
  7236  00135A                     __end_of_strstr:
  7237                           	opt stack 0
  7238                           tblptru	equ	0xFF8
  7239                           tblptrh	equ	0xFF7
  7240                           tblptrl	equ	0xFF6
  7241                           tablat	equ	0xFF5
  7242                           prodh	equ	0xFF4
  7243                           prodl	equ	0xFF3
  7244                           intcon	equ	0xFF2
  7245                           indf0	equ	0xFEF
  7246                           postinc0	equ	0xFEE
  7247                           fsr0h	equ	0xFEA
  7248                           fsr0l	equ	0xFE9
  7249                           wreg	equ	0xFE8
  7250                           postdec1	equ	0xFE5
  7251                           plusw1	equ	0xFE3
  7252                           fsr1l	equ	0xFE1
  7253                           indf2	equ	0xFDF
  7254                           postinc2	equ	0xFDE
  7255                           postdec2	equ	0xFDD
  7256                           plusw2	equ	0xFDB
  7257                           fsr2h	equ	0xFDA
  7258                           fsr2l	equ	0xFD9
  7259                           status	equ	0xFD8
  7260                           
  7261 ;; *************** function _strncmp *****************
  7262 ;; Defined at:
  7263 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  7264 ;; Parameters:    Size  Location     Type
  7265 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  7266 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  7267 ;;  s2              2   25[COMRAM] PTR const unsigned char 
  7268 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  7269 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  7270 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  7271 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  7272 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  7273 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  7274 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  7275 ;;		 -> STR_2(3), NULL(0), 
  7276 ;;  len             2   27[COMRAM] unsigned int 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;		None
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  2   23[COMRAM] int 
  7281 ;; Registers used:
  7282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7288 ;;      Params:         6       0       0       0       0       0       0
  7289 ;;      Locals:         0       0       0       0       0       0       0
  7290 ;;      Temps:          3       0       0       0       0       0       0
  7291 ;;      Totals:         9       0       0       0       0       0       0
  7292 ;;Total ram usage:        9 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; Hardware stack levels required when called:    1
  7295 ;; This function calls:
  7296 ;;		Nothing
  7297 ;; This function is called by:
  7298 ;;		_strstr
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301                           
  7302                           	psect	text25
  7303  00135A                     __ptext25:
  7304                           	opt stack 0
  7305  00135A                     _strncmp:
  7306                           	opt stack 24
  7307                           
  7308                           ;incstack = 0
  7309  00135A  D033               	goto	l3644
  7310  00135C                     l3634:
  7311  00135C  C018  FFD9         	movff	strncmp@s1,fsr2l
  7312  001360  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  7313  001364  50DF               	movf	indf2,w,c
  7314  001366  B4D8               	btfsc	status,2,c
  7315  001368  D00F               	goto	l3638
  7316  00136A  C018  FFD9         	movff	strncmp@s1,fsr2l
  7317  00136E  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  7318  001372  50DF               	movf	indf2,w,c
  7319  001374  6E1E               	movwf	??_strncmp& (0+255),c
  7320  001376  C01A  FFF6         	movff	strncmp@s2,tblptrl
  7321  00137A  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  7322  00137E                     	if	0	;tblptru may be non-zero
  7323  00137E                     	endif
  7324  00137E                     	if	0	;tblptru may be non-zero
  7325  00137E                     	endif
  7326  00137E  0008               	tblrd		*
  7327  001380  50F5               	movf	tablat,w,c
  7328  001382  181E               	xorwf	??_strncmp,w,c
  7329  001384  B4D8               	btfsc	status,2,c
  7330  001386  D019               	goto	l3642
  7331  001388                     l3638:
  7332  001388  C01A  FFF6         	movff	strncmp@s2,tblptrl
  7333  00138C  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  7334  001390                     	if	0	;tblptru may be non-zero
  7335  001390                     	endif
  7336  001390                     	if	0	;tblptru may be non-zero
  7337  001390                     	endif
  7338  001390  0008               	tblrd		*
  7339  001392  50F5               	movf	tablat,w,c
  7340  001394  6E1E               	movwf	??_strncmp& (0+255),c
  7341  001396  6A1F               	clrf	(??_strncmp+1)& (0+255),c
  7342  001398  1E1E               	comf	??_strncmp,f,c
  7343  00139A  1E1F               	comf	??_strncmp+1,f,c
  7344  00139C  4A1E               	infsnz	??_strncmp,f,c
  7345  00139E  2A1F               	incf	??_strncmp+1,f,c
  7346  0013A0  C018  FFD9         	movff	strncmp@s1,fsr2l
  7347  0013A4  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  7348  0013A8  50DF               	movf	indf2,w,c
  7349  0013AA  6E20               	movwf	(??_strncmp+2)& (0+255),c
  7350  0013AC  5020               	movf	??_strncmp+2,w,c
  7351  0013AE  241E               	addwf	??_strncmp,w,c
  7352  0013B0  6E18               	movwf	?_strncmp,c
  7353  0013B2  0E00               	movlw	0
  7354  0013B4  201F               	addwfc	??_strncmp+1,w,c
  7355  0013B6  6E19               	movwf	?_strncmp+1,c
  7356  0013B8  0012               	return	
  7357  0013BA                     l3642:
  7358  0013BA  4A18               	infsnz	strncmp@s1,f,c
  7359  0013BC  2A19               	incf	strncmp@s1+1,f,c
  7360  0013BE  4A1A               	infsnz	strncmp@s2,f,c
  7361  0013C0  2A1B               	incf	strncmp@s2+1,f,c
  7362  0013C2                     l3644:
  7363  0013C2  061C               	decf	strncmp@len,f,c
  7364  0013C4  A0D8               	btfss	status,0,c
  7365  0013C6  061D               	decf	strncmp@len+1,f,c
  7366  0013C8  281C               	incf	strncmp@len,w,c
  7367  0013CA  E1C8               	bnz	l3634
  7368  0013CC  281D               	incf	strncmp@len+1,w,c
  7369  0013CE  A4D8               	btfss	status,2,c
  7370  0013D0  D7C5               	goto	l3634
  7371  0013D2  0E00               	movlw	0
  7372  0013D4  6E19               	movwf	?_strncmp+1,c
  7373  0013D6  0E00               	movlw	0
  7374  0013D8  6E18               	movwf	?_strncmp,c
  7375  0013DA  0012               	return	
  7376  0013DC                     __end_of_strncmp:
  7377                           	opt stack 0
  7378                           tblptru	equ	0xFF8
  7379                           tblptrh	equ	0xFF7
  7380                           tblptrl	equ	0xFF6
  7381                           tablat	equ	0xFF5
  7382                           prodh	equ	0xFF4
  7383                           prodl	equ	0xFF3
  7384                           intcon	equ	0xFF2
  7385                           indf0	equ	0xFEF
  7386                           postinc0	equ	0xFEE
  7387                           fsr0h	equ	0xFEA
  7388                           fsr0l	equ	0xFE9
  7389                           wreg	equ	0xFE8
  7390                           postdec1	equ	0xFE5
  7391                           plusw1	equ	0xFE3
  7392                           fsr1l	equ	0xFE1
  7393                           indf2	equ	0xFDF
  7394                           postinc2	equ	0xFDE
  7395                           postdec2	equ	0xFDD
  7396                           plusw2	equ	0xFDB
  7397                           fsr2h	equ	0xFDA
  7398                           fsr2l	equ	0xFD9
  7399                           status	equ	0xFD8
  7400                           
  7401 ;; *************** function _strlen *****************
  7402 ;; Defined at:
  7403 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;  s               2   17[COMRAM] PTR const unsigned char 
  7406 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  7407 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  7408 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  7409 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  7410 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  7411 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  7412 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  7413 ;;		 -> STR_2(3), NULL(0), 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  cp              2   21[COMRAM] PTR const unsigned char 
  7416 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  7417 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  7418 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  7419 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  7420 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  7421 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  7422 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  7423 ;;		 -> STR_2(3), NULL(0), 
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  2   17[COMRAM] unsigned int 
  7426 ;; Registers used:
  7427 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7433 ;;      Params:         2       0       0       0       0       0       0
  7434 ;;      Locals:         2       0       0       0       0       0       0
  7435 ;;      Temps:          2       0       0       0       0       0       0
  7436 ;;      Totals:         6       0       0       0       0       0       0
  7437 ;;Total ram usage:        6 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; Hardware stack levels required when called:    1
  7440 ;; This function calls:
  7441 ;;		Nothing
  7442 ;; This function is called by:
  7443 ;;		_strstr
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           	psect	text26
  7448  00162C                     __ptext26:
  7449                           	opt stack 0
  7450  00162C                     _strlen:
  7451                           	opt stack 24
  7452                           
  7453                           ;incstack = 0
  7454  00162C  C012  F016         	movff	strlen@s,strlen@cp
  7455  001630  C013  F017         	movff	strlen@s+1,strlen@cp+1
  7456  001634  D002               	goto	l3626
  7457  001636                     l3624:
  7458  001636  4A16               	infsnz	strlen@cp,f,c
  7459  001638  2A17               	incf	strlen@cp+1,f,c
  7460  00163A                     l3626:
  7461  00163A  C016  FFF6         	movff	strlen@cp,tblptrl
  7462  00163E  C017  FFF7         	movff	strlen@cp+1,tblptrh
  7463  001642                     	if	0	;tblptru may be non-zero
  7464  001642                     	endif
  7465  001642                     	if	0	;tblptru may be non-zero
  7466  001642                     	endif
  7467  001642  0008               	tblrd		*
  7468  001644  50F5               	movf	tablat,w,c
  7469  001646  0900               	iorlw	0
  7470  001648  A4D8               	btfss	status,2,c
  7471  00164A  D7F5               	goto	l3624
  7472  00164C  C012  F014         	movff	strlen@s,??_strlen
  7473  001650  C013  F015         	movff	strlen@s+1,??_strlen+1
  7474  001654  1E14               	comf	??_strlen,f,c
  7475  001656  1E15               	comf	??_strlen+1,f,c
  7476  001658  4A14               	infsnz	??_strlen,f,c
  7477  00165A  2A15               	incf	??_strlen+1,f,c
  7478  00165C  5016               	movf	strlen@cp,w,c
  7479  00165E  2414               	addwf	??_strlen,w,c
  7480  001660  6E12               	movwf	?_strlen,c
  7481  001662  5017               	movf	strlen@cp+1,w,c
  7482  001664  2015               	addwfc	??_strlen+1,w,c
  7483  001666  6E13               	movwf	?_strlen+1,c
  7484  001668  0012               	return	
  7485  00166A                     __end_of_strlen:
  7486                           	opt stack 0
  7487                           tblptru	equ	0xFF8
  7488                           tblptrh	equ	0xFF7
  7489                           tblptrl	equ	0xFF6
  7490                           tablat	equ	0xFF5
  7491                           prodh	equ	0xFF4
  7492                           prodl	equ	0xFF3
  7493                           intcon	equ	0xFF2
  7494                           indf0	equ	0xFEF
  7495                           postinc0	equ	0xFEE
  7496                           fsr0h	equ	0xFEA
  7497                           fsr0l	equ	0xFE9
  7498                           wreg	equ	0xFE8
  7499                           postdec1	equ	0xFE5
  7500                           plusw1	equ	0xFE3
  7501                           fsr1l	equ	0xFE1
  7502                           indf2	equ	0xFDF
  7503                           postinc2	equ	0xFDE
  7504                           postdec2	equ	0xFDD
  7505                           plusw2	equ	0xFDB
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function _strchr *****************
  7511 ;; Defined at:
  7512 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strchr.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  ptr             2   17[COMRAM] PTR const unsigned char 
  7515 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  7516 ;;  chr             2   19[COMRAM] int 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;		None
  7519 ;; Return value:  Size  Location     Type
  7520 ;;                  2   17[COMRAM] PTR unsigned char 
  7521 ;; Registers used:
  7522 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7523 ;; Tracked objects:
  7524 ;;		On entry : 0/0
  7525 ;;		On exit  : 0/0
  7526 ;;		Unchanged: 0/0
  7527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7528 ;;      Params:         4       0       0       0       0       0       0
  7529 ;;      Locals:         0       0       0       0       0       0       0
  7530 ;;      Temps:          1       0       0       0       0       0       0
  7531 ;;      Totals:         5       0       0       0       0       0       0
  7532 ;;Total ram usage:        5 bytes
  7533 ;; Hardware stack levels used:    1
  7534 ;; Hardware stack levels required when called:    1
  7535 ;; This function calls:
  7536 ;;		Nothing
  7537 ;; This function is called by:
  7538 ;;		_strstr
  7539 ;; This function uses a non-reentrant model
  7540 ;;
  7541                           
  7542                           	psect	text27
  7543  0016A4                     __ptext27:
  7544                           	opt stack 0
  7545  0016A4                     _strchr:
  7546                           	opt stack 24
  7547  0016A4  C012  FFD9         	movff	strchr@ptr,fsr2l
  7548  0016A8  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  7549  0016AC  5014               	movf	strchr@chr,w,c
  7550  0016AE  18DE               	xorwf	postinc2,w,c
  7551  0016B0  A4D8               	btfss	status,2,c
  7552  0016B2  D005               	goto	l3656
  7553  0016B4  C012  F012         	movff	strchr@ptr,?_strchr
  7554  0016B8  C013  F013         	movff	strchr@ptr+1,?_strchr+1
  7555  0016BC  0012               	return	
  7556  0016BE                     l3656:
  7557  0016BE  C012  FFD9         	movff	strchr@ptr,fsr2l
  7558  0016C2  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  7559  0016C6  4A12               	infsnz	strchr@ptr,f,c
  7560  0016C8  2A13               	incf	strchr@ptr+1,f,c
  7561  0016CA  50DF               	movf	indf2,w,c
  7562  0016CC  A4D8               	btfss	status,2,c
  7563  0016CE  D7EA               	goto	l3650
  7564  0016D0  0E00               	movlw	0
  7565  0016D2  6E12               	movwf	?_strchr,c
  7566  0016D4  0E00               	movlw	0
  7567  0016D6  6E13               	movwf	?_strchr+1,c
  7568  0016D8  0012               	return	
  7569  0016DA                     __end_of_strchr:
  7570                           	opt stack 0
  7571                           tblptru	equ	0xFF8
  7572                           tblptrh	equ	0xFF7
  7573                           tblptrl	equ	0xFF6
  7574                           tablat	equ	0xFF5
  7575                           prodh	equ	0xFF4
  7576                           prodl	equ	0xFF3
  7577                           intcon	equ	0xFF2
  7578                           indf0	equ	0xFEF
  7579                           postinc0	equ	0xFEE
  7580                           fsr0h	equ	0xFEA
  7581                           fsr0l	equ	0xFE9
  7582                           wreg	equ	0xFE8
  7583                           postdec1	equ	0xFE5
  7584                           plusw1	equ	0xFE3
  7585                           fsr1l	equ	0xFE1
  7586                           indf2	equ	0xFDF
  7587                           postinc2	equ	0xFDE
  7588                           postdec2	equ	0xFDD
  7589                           plusw2	equ	0xFDB
  7590                           fsr2h	equ	0xFDA
  7591                           fsr2l	equ	0xFD9
  7592                           status	equ	0xFD8
  7593                           
  7594 ;; *************** function _ADtoPWM *****************
  7595 ;; Defined at:
  7596 ;;		line 16 in file "harwave/flex.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;  AD              2   35[COMRAM] PTR unsigned char 
  7599 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  7600 ;; Auto vars:     Size  Location     Type
  7601 ;;  w4              2   55[COMRAM] unsigned int 
  7602 ;;  w3              2   53[COMRAM] unsigned int 
  7603 ;;  w2              2   51[COMRAM] unsigned int 
  7604 ;;  w1              2   49[COMRAM] unsigned int 
  7605 ;;  u4              2   47[COMRAM] unsigned int 
  7606 ;;  u3              2   45[COMRAM] unsigned int 
  7607 ;;  u2              2   43[COMRAM] unsigned int 
  7608 ;;  u1              2   41[COMRAM] unsigned int 
  7609 ;;  w0              2    0        unsigned int 
  7610 ;;  u0              2    0        unsigned int 
  7611 ;; Return value:  Size  Location     Type
  7612 ;;                  1    wreg      void 
  7613 ;; Registers used:
  7614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7615 ;; Tracked objects:
  7616 ;;		On entry : 0/0
  7617 ;;		On exit  : 0/0
  7618 ;;		Unchanged: 0/0
  7619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7620 ;;      Params:         2       0       0       0       0       0       0
  7621 ;;      Locals:        16       0       0       0       0       0       0
  7622 ;;      Temps:          4       0       0       0       0       0       0
  7623 ;;      Totals:        22       0       0       0       0       0       0
  7624 ;;Total ram usage:       22 bytes
  7625 ;; Hardware stack levels used:    1
  7626 ;; Hardware stack levels required when called:    8
  7627 ;; This function calls:
  7628 ;;		_PWMt0PCA
  7629 ;; This function is called by:
  7630 ;;		_main
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           	psect	text28
  7635  000A24                     __ptext28:
  7636                           	opt stack 0
  7637  000A24                     _ADtoPWM:
  7638                           	opt stack 22
  7639                           
  7640                           ;flex.c: 17: u16 u0,u1,u2,u3,u4,w0,w1,w2,w3,w4;
  7641                           ;flex.c: 19: if(*(AD+3)>=160)
  7642                           
  7643                           ;incstack = 0
  7644  000A24  EE20 F003          	lfsr	2,3
  7645  000A28  5024               	movf	ADtoPWM@AD,w,c
  7646  000A2A  26D9               	addwf	fsr2l,f,c
  7647  000A2C  5025               	movf	ADtoPWM@AD+1,w,c
  7648  000A2E  22DA               	addwfc	fsr2h,f,c
  7649  000A30  0E9F               	movlw	159
  7650  000A32  64DF               	cpfsgt	indf2,c
  7651  000A34  D020               	goto	l4270
  7652                           
  7653                           ;flex.c: 20: w1=finger_under_1[*(AD+3)-160];
  7654  000A36  0EC0               	movlw	192
  7655  000A38  6E26               	movwf	??_ADtoPWM& (0+255),c
  7656  000A3A  0EFE               	movlw	254
  7657  000A3C  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7658  000A3E  EE20 F003          	lfsr	2,3
  7659  000A42  5024               	movf	ADtoPWM@AD,w,c
  7660  000A44  26D9               	addwf	fsr2l,f,c
  7661  000A46  5025               	movf	ADtoPWM@AD+1,w,c
  7662  000A48  22DA               	addwfc	fsr2h,f,c
  7663  000A4A  50DF               	movf	indf2,w,c
  7664  000A4C  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7665  000A4E  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7666  000A50  90D8               	bcf	status,0,c
  7667  000A52  3628               	rlcf	??_ADtoPWM+2,f,c
  7668  000A54  3629               	rlcf	??_ADtoPWM+3,f,c
  7669  000A56  5026               	movf	??_ADtoPWM,w,c
  7670  000A58  2628               	addwf	??_ADtoPWM+2,f,c
  7671  000A5A  5027               	movf	??_ADtoPWM+1,w,c
  7672  000A5C  2229               	addwfc	??_ADtoPWM+3,f,c
  7673  000A5E  0EAB               	movlw	low _finger_under_1
  7674  000A60  2428               	addwf	??_ADtoPWM+2,w,c
  7675  000A62  6EF6               	movwf	tblptrl,c
  7676  000A64  0E7C               	movlw	high _finger_under_1
  7677  000A66  2029               	addwfc	??_ADtoPWM+3,w,c
  7678  000A68  6EF7               	movwf	tblptrh,c
  7679  000A6A                     	if	0	;There are less than 3 active tblptr bytes
  7680  000A6A                     	endif
  7681  000A6A  0009               	tblrd		*+
  7682  000A6C  CFF5 F032          	movff	tablat,ADtoPWM@w1
  7683  000A70  000A               	tblrd		*-
  7684  000A72  CFF5 F033          	movff	tablat,ADtoPWM@w1+1
  7685  000A76                     l4270:
  7686                           
  7687                           ;flex.c: 21: if(*(AD+5)>=143)
  7688  000A76  EE20 F005          	lfsr	2,5
  7689  000A7A  5024               	movf	ADtoPWM@AD,w,c
  7690  000A7C  26D9               	addwf	fsr2l,f,c
  7691  000A7E  5025               	movf	ADtoPWM@AD+1,w,c
  7692  000A80  22DA               	addwfc	fsr2h,f,c
  7693  000A82  0E8E               	movlw	142
  7694  000A84  64DF               	cpfsgt	indf2,c
  7695  000A86  D020               	goto	l4274
  7696                           
  7697                           ;flex.c: 22: w2=finger_under_2[*(AD+5)-143];
  7698  000A88  0EE2               	movlw	226
  7699  000A8A  6E26               	movwf	??_ADtoPWM& (0+255),c
  7700  000A8C  0EFE               	movlw	254
  7701  000A8E  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7702  000A90  EE20 F005          	lfsr	2,5
  7703  000A94  5024               	movf	ADtoPWM@AD,w,c
  7704  000A96  26D9               	addwf	fsr2l,f,c
  7705  000A98  5025               	movf	ADtoPWM@AD+1,w,c
  7706  000A9A  22DA               	addwfc	fsr2h,f,c
  7707  000A9C  50DF               	movf	indf2,w,c
  7708  000A9E  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7709  000AA0  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7710  000AA2  90D8               	bcf	status,0,c
  7711  000AA4  3628               	rlcf	??_ADtoPWM+2,f,c
  7712  000AA6  3629               	rlcf	??_ADtoPWM+3,f,c
  7713  000AA8  5026               	movf	??_ADtoPWM,w,c
  7714  000AAA  2628               	addwf	??_ADtoPWM+2,f,c
  7715  000AAC  5027               	movf	??_ADtoPWM+1,w,c
  7716  000AAE  2229               	addwfc	??_ADtoPWM+3,f,c
  7717  000AB0  0EF1               	movlw	low _finger_under_2
  7718  000AB2  2428               	addwf	??_ADtoPWM+2,w,c
  7719  000AB4  6EF6               	movwf	tblptrl,c
  7720  000AB6  0E7A               	movlw	high _finger_under_2
  7721  000AB8  2029               	addwfc	??_ADtoPWM+3,w,c
  7722  000ABA  6EF7               	movwf	tblptrh,c
  7723  000ABC                     	if	0	;There are less than 3 active tblptr bytes
  7724  000ABC                     	endif
  7725  000ABC  0009               	tblrd		*+
  7726  000ABE  CFF5 F034          	movff	tablat,ADtoPWM@w2
  7727  000AC2  000A               	tblrd		*-
  7728  000AC4  CFF5 F035          	movff	tablat,ADtoPWM@w2+1
  7729  000AC8                     l4274:
  7730                           
  7731                           ;flex.c: 23: if(*(AD+7)>=177)
  7732  000AC8  EE20 F007          	lfsr	2,7
  7733  000ACC  5024               	movf	ADtoPWM@AD,w,c
  7734  000ACE  26D9               	addwf	fsr2l,f,c
  7735  000AD0  5025               	movf	ADtoPWM@AD+1,w,c
  7736  000AD2  22DA               	addwfc	fsr2h,f,c
  7737  000AD4  0EB0               	movlw	176
  7738  000AD6  64DF               	cpfsgt	indf2,c
  7739  000AD8  D020               	goto	l4278
  7740                           
  7741                           ;flex.c: 24: w3=finger_under_3[*(AD+7)-177];
  7742  000ADA  0E9E               	movlw	158
  7743  000ADC  6E26               	movwf	??_ADtoPWM& (0+255),c
  7744  000ADE  0EFE               	movlw	254
  7745  000AE0  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7746  000AE2  EE20 F007          	lfsr	2,7
  7747  000AE6  5024               	movf	ADtoPWM@AD,w,c
  7748  000AE8  26D9               	addwf	fsr2l,f,c
  7749  000AEA  5025               	movf	ADtoPWM@AD+1,w,c
  7750  000AEC  22DA               	addwfc	fsr2h,f,c
  7751  000AEE  50DF               	movf	indf2,w,c
  7752  000AF0  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7753  000AF2  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7754  000AF4  90D8               	bcf	status,0,c
  7755  000AF6  3628               	rlcf	??_ADtoPWM+2,f,c
  7756  000AF8  3629               	rlcf	??_ADtoPWM+3,f,c
  7757  000AFA  5026               	movf	??_ADtoPWM,w,c
  7758  000AFC  2628               	addwf	??_ADtoPWM+2,f,c
  7759  000AFE  5027               	movf	??_ADtoPWM+1,w,c
  7760  000B00  2229               	addwfc	??_ADtoPWM+3,f,c
  7761  000B02  0E6B               	movlw	low _finger_under_3
  7762  000B04  2428               	addwf	??_ADtoPWM+2,w,c
  7763  000B06  6EF6               	movwf	tblptrl,c
  7764  000B08  0E7D               	movlw	high _finger_under_3
  7765  000B0A  2029               	addwfc	??_ADtoPWM+3,w,c
  7766  000B0C  6EF7               	movwf	tblptrh,c
  7767  000B0E                     	if	0	;There are less than 3 active tblptr bytes
  7768  000B0E                     	endif
  7769  000B0E  0009               	tblrd		*+
  7770  000B10  CFF5 F036          	movff	tablat,ADtoPWM@w3
  7771  000B14  000A               	tblrd		*-
  7772  000B16  CFF5 F037          	movff	tablat,ADtoPWM@w3+1
  7773  000B1A                     l4278:
  7774                           
  7775                           ;flex.c: 25: if(*(AD+9)>=136)
  7776  000B1A  EE20 F009          	lfsr	2,9
  7777  000B1E  5024               	movf	ADtoPWM@AD,w,c
  7778  000B20  26D9               	addwf	fsr2l,f,c
  7779  000B22  5025               	movf	ADtoPWM@AD+1,w,c
  7780  000B24  22DA               	addwfc	fsr2h,f,c
  7781  000B26  0E87               	movlw	135
  7782  000B28  64DF               	cpfsgt	indf2,c
  7783  000B2A  D020               	goto	l4282
  7784                           
  7785                           ;flex.c: 26: w4=finger_under_4[*(AD+9)-136];
  7786  000B2C  0EF0               	movlw	240
  7787  000B2E  6E26               	movwf	??_ADtoPWM& (0+255),c
  7788  000B30  0EFE               	movlw	254
  7789  000B32  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7790  000B34  EE20 F009          	lfsr	2,9
  7791  000B38  5024               	movf	ADtoPWM@AD,w,c
  7792  000B3A  26D9               	addwf	fsr2l,f,c
  7793  000B3C  5025               	movf	ADtoPWM@AD+1,w,c
  7794  000B3E  22DA               	addwfc	fsr2h,f,c
  7795  000B40  50DF               	movf	indf2,w,c
  7796  000B42  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7797  000B44  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7798  000B46  90D8               	bcf	status,0,c
  7799  000B48  3628               	rlcf	??_ADtoPWM+2,f,c
  7800  000B4A  3629               	rlcf	??_ADtoPWM+3,f,c
  7801  000B4C  5026               	movf	??_ADtoPWM,w,c
  7802  000B4E  2628               	addwf	??_ADtoPWM+2,f,c
  7803  000B50  5027               	movf	??_ADtoPWM+1,w,c
  7804  000B52  2229               	addwfc	??_ADtoPWM+3,f,c
  7805  000B54  0E15               	movlw	low _finger_under_4
  7806  000B56  2428               	addwf	??_ADtoPWM+2,w,c
  7807  000B58  6EF6               	movwf	tblptrl,c
  7808  000B5A  0E79               	movlw	high _finger_under_4
  7809  000B5C  2029               	addwfc	??_ADtoPWM+3,w,c
  7810  000B5E  6EF7               	movwf	tblptrh,c
  7811  000B60                     	if	0	;There are less than 3 active tblptr bytes
  7812  000B60                     	endif
  7813  000B60  0009               	tblrd		*+
  7814  000B62  CFF5 F038          	movff	tablat,ADtoPWM@w4
  7815  000B66  000A               	tblrd		*-
  7816  000B68  CFF5 F039          	movff	tablat,ADtoPWM@w4+1
  7817  000B6C                     l4282:
  7818                           
  7819                           ;flex.c: 28: if(*(AD+2)>=138)
  7820  000B6C  EE20 F002          	lfsr	2,2
  7821  000B70  5024               	movf	ADtoPWM@AD,w,c
  7822  000B72  26D9               	addwf	fsr2l,f,c
  7823  000B74  5025               	movf	ADtoPWM@AD+1,w,c
  7824  000B76  22DA               	addwfc	fsr2h,f,c
  7825  000B78  0E89               	movlw	137
  7826  000B7A  64DF               	cpfsgt	indf2,c
  7827  000B7C  D020               	goto	l4286
  7828                           
  7829                           ;flex.c: 29: u1=finger_up_1[*(AD+2)-138];
  7830  000B7E  0EEC               	movlw	236
  7831  000B80  6E26               	movwf	??_ADtoPWM& (0+255),c
  7832  000B82  0EFE               	movlw	254
  7833  000B84  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7834  000B86  EE20 F002          	lfsr	2,2
  7835  000B8A  5024               	movf	ADtoPWM@AD,w,c
  7836  000B8C  26D9               	addwf	fsr2l,f,c
  7837  000B8E  5025               	movf	ADtoPWM@AD+1,w,c
  7838  000B90  22DA               	addwfc	fsr2h,f,c
  7839  000B92  50DF               	movf	indf2,w,c
  7840  000B94  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7841  000B96  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7842  000B98  90D8               	bcf	status,0,c
  7843  000B9A  3628               	rlcf	??_ADtoPWM+2,f,c
  7844  000B9C  3629               	rlcf	??_ADtoPWM+3,f,c
  7845  000B9E  5026               	movf	??_ADtoPWM,w,c
  7846  000BA0  2628               	addwf	??_ADtoPWM+2,f,c
  7847  000BA2  5027               	movf	??_ADtoPWM+1,w,c
  7848  000BA4  2229               	addwfc	??_ADtoPWM+3,f,c
  7849  000BA6  0E05               	movlw	low _finger_up_1
  7850  000BA8  2428               	addwf	??_ADtoPWM+2,w,c
  7851  000BAA  6EF6               	movwf	tblptrl,c
  7852  000BAC  0E7A               	movlw	high _finger_up_1
  7853  000BAE  2029               	addwfc	??_ADtoPWM+3,w,c
  7854  000BB0  6EF7               	movwf	tblptrh,c
  7855  000BB2                     	if	0	;There are less than 3 active tblptr bytes
  7856  000BB2                     	endif
  7857  000BB2  0009               	tblrd		*+
  7858  000BB4  CFF5 F02A          	movff	tablat,ADtoPWM@u1
  7859  000BB8  000A               	tblrd		*-
  7860  000BBA  CFF5 F02B          	movff	tablat,ADtoPWM@u1+1
  7861  000BBE                     l4286:
  7862                           
  7863                           ;flex.c: 30: if(*(AD+4)>=127)
  7864  000BBE  EE20 F004          	lfsr	2,4
  7865  000BC2  5024               	movf	ADtoPWM@AD,w,c
  7866  000BC4  26D9               	addwf	fsr2l,f,c
  7867  000BC6  5025               	movf	ADtoPWM@AD+1,w,c
  7868  000BC8  22DA               	addwfc	fsr2h,f,c
  7869  000BCA  0E7E               	movlw	126
  7870  000BCC  64DF               	cpfsgt	indf2,c
  7871  000BCE  D020               	goto	l4290
  7872                           
  7873                           ;flex.c: 31: u2=finger_up_2[*(AD+4)-127];
  7874  000BD0  0E02               	movlw	2
  7875  000BD2  6E26               	movwf	??_ADtoPWM& (0+255),c
  7876  000BD4  0EFF               	movlw	255
  7877  000BD6  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7878  000BD8  EE20 F004          	lfsr	2,4
  7879  000BDC  5024               	movf	ADtoPWM@AD,w,c
  7880  000BDE  26D9               	addwf	fsr2l,f,c
  7881  000BE0  5025               	movf	ADtoPWM@AD+1,w,c
  7882  000BE2  22DA               	addwfc	fsr2h,f,c
  7883  000BE4  50DF               	movf	indf2,w,c
  7884  000BE6  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7885  000BE8  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7886  000BEA  90D8               	bcf	status,0,c
  7887  000BEC  3628               	rlcf	??_ADtoPWM+2,f,c
  7888  000BEE  3629               	rlcf	??_ADtoPWM+3,f,c
  7889  000BF0  5026               	movf	??_ADtoPWM,w,c
  7890  000BF2  2628               	addwf	??_ADtoPWM+2,f,c
  7891  000BF4  5027               	movf	??_ADtoPWM+1,w,c
  7892  000BF6  2229               	addwfc	??_ADtoPWM+3,f,c
  7893  000BF8  0E13               	movlw	low _finger_up_2
  7894  000BFA  2428               	addwf	??_ADtoPWM+2,w,c
  7895  000BFC  6EF6               	movwf	tblptrl,c
  7896  000BFE  0E78               	movlw	high _finger_up_2
  7897  000C00  2029               	addwfc	??_ADtoPWM+3,w,c
  7898  000C02  6EF7               	movwf	tblptrh,c
  7899  000C04                     	if	0	;There are less than 3 active tblptr bytes
  7900  000C04                     	endif
  7901  000C04  0009               	tblrd		*+
  7902  000C06  CFF5 F02C          	movff	tablat,ADtoPWM@u2
  7903  000C0A  000A               	tblrd		*-
  7904  000C0C  CFF5 F02D          	movff	tablat,ADtoPWM@u2+1
  7905  000C10                     l4290:
  7906                           
  7907                           ;flex.c: 32: if(*(AD+6)>=110)
  7908  000C10  EE20 F006          	lfsr	2,6
  7909  000C14  5024               	movf	ADtoPWM@AD,w,c
  7910  000C16  26D9               	addwf	fsr2l,f,c
  7911  000C18  5025               	movf	ADtoPWM@AD+1,w,c
  7912  000C1A  22DA               	addwfc	fsr2h,f,c
  7913  000C1C  0E6D               	movlw	109
  7914  000C1E  64DF               	cpfsgt	indf2,c
  7915  000C20  D020               	goto	l4294
  7916                           
  7917                           ;flex.c: 33: u3=finger_up_3[*(AD+6)-110];
  7918  000C22  0E24               	movlw	36
  7919  000C24  6E26               	movwf	??_ADtoPWM& (0+255),c
  7920  000C26  0EFF               	movlw	255
  7921  000C28  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7922  000C2A  EE20 F006          	lfsr	2,6
  7923  000C2E  5024               	movf	ADtoPWM@AD,w,c
  7924  000C30  26D9               	addwf	fsr2l,f,c
  7925  000C32  5025               	movf	ADtoPWM@AD+1,w,c
  7926  000C34  22DA               	addwfc	fsr2h,f,c
  7927  000C36  50DF               	movf	indf2,w,c
  7928  000C38  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7929  000C3A  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7930  000C3C  90D8               	bcf	status,0,c
  7931  000C3E  3628               	rlcf	??_ADtoPWM+2,f,c
  7932  000C40  3629               	rlcf	??_ADtoPWM+3,f,c
  7933  000C42  5026               	movf	??_ADtoPWM,w,c
  7934  000C44  2628               	addwf	??_ADtoPWM+2,f,c
  7935  000C46  5027               	movf	??_ADtoPWM+1,w,c
  7936  000C48  2229               	addwfc	??_ADtoPWM+3,f,c
  7937  000C4A  0EEF               	movlw	low _finger_up_3
  7938  000C4C  2428               	addwf	??_ADtoPWM+2,w,c
  7939  000C4E  6EF6               	movwf	tblptrl,c
  7940  000C50  0E76               	movlw	high _finger_up_3
  7941  000C52  2029               	addwfc	??_ADtoPWM+3,w,c
  7942  000C54  6EF7               	movwf	tblptrh,c
  7943  000C56                     	if	0	;There are less than 3 active tblptr bytes
  7944  000C56                     	endif
  7945  000C56  0009               	tblrd		*+
  7946  000C58  CFF5 F02E          	movff	tablat,ADtoPWM@u3
  7947  000C5C  000A               	tblrd		*-
  7948  000C5E  CFF5 F02F          	movff	tablat,ADtoPWM@u3+1
  7949  000C62                     l4294:
  7950                           
  7951                           ;flex.c: 34: if(*(AD+8)>=105)
  7952  000C62  EE20 F008          	lfsr	2,8
  7953  000C66  5024               	movf	ADtoPWM@AD,w,c
  7954  000C68  26D9               	addwf	fsr2l,f,c
  7955  000C6A  5025               	movf	ADtoPWM@AD+1,w,c
  7956  000C6C  22DA               	addwfc	fsr2h,f,c
  7957  000C6E  0E68               	movlw	104
  7958  000C70  64DF               	cpfsgt	indf2,c
  7959  000C72  D020               	goto	l4298
  7960                           
  7961                           ;flex.c: 35: u4=finger_up_4[*(AD+8)-105];
  7962  000C74  0E2E               	movlw	46
  7963  000C76  6E26               	movwf	??_ADtoPWM& (0+255),c
  7964  000C78  0EFF               	movlw	255
  7965  000C7A  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7966  000C7C  EE20 F008          	lfsr	2,8
  7967  000C80  5024               	movf	ADtoPWM@AD,w,c
  7968  000C82  26D9               	addwf	fsr2l,f,c
  7969  000C84  5025               	movf	ADtoPWM@AD+1,w,c
  7970  000C86  22DA               	addwfc	fsr2h,f,c
  7971  000C88  50DF               	movf	indf2,w,c
  7972  000C8A  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7973  000C8C  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7974  000C8E  90D8               	bcf	status,0,c
  7975  000C90  3628               	rlcf	??_ADtoPWM+2,f,c
  7976  000C92  3629               	rlcf	??_ADtoPWM+3,f,c
  7977  000C94  5026               	movf	??_ADtoPWM,w,c
  7978  000C96  2628               	addwf	??_ADtoPWM+2,f,c
  7979  000C98  5027               	movf	??_ADtoPWM+1,w,c
  7980  000C9A  2229               	addwfc	??_ADtoPWM+3,f,c
  7981  000C9C  0EC1               	movlw	low _finger_up_4
  7982  000C9E  2428               	addwf	??_ADtoPWM+2,w,c
  7983  000CA0  6EF6               	movwf	tblptrl,c
  7984  000CA2  0E75               	movlw	high _finger_up_4
  7985  000CA4  2029               	addwfc	??_ADtoPWM+3,w,c
  7986  000CA6  6EF7               	movwf	tblptrh,c
  7987  000CA8                     	if	0	;There are less than 3 active tblptr bytes
  7988  000CA8                     	endif
  7989  000CA8  0009               	tblrd		*+
  7990  000CAA  CFF5 F030          	movff	tablat,ADtoPWM@u4
  7991  000CAE  000A               	tblrd		*-
  7992  000CB0  CFF5 F031          	movff	tablat,ADtoPWM@u4+1
  7993  000CB4                     l4298:
  7994                           
  7995                           ;flex.c: 37: PWMt0PCA(u1,w1,index);
  7996  000CB4  C02A  F01F         	movff	ADtoPWM@u1,PWMt0PCA@up
  7997  000CB8  C02B  F020         	movff	ADtoPWM@u1+1,PWMt0PCA@up+1
  7998  000CBC  C032  F021         	movff	ADtoPWM@w1,PWMt0PCA@low
  7999  000CC0  C033  F022         	movff	ADtoPWM@w1+1,PWMt0PCA@low+1
  8000  000CC4  0E01               	movlw	1
  8001  000CC6  6E23               	movwf	PWMt0PCA@finger,c
  8002  000CC8  EC8B  F006         	call	_PWMt0PCA	;wreg free
  8003                           
  8004                           ;flex.c: 38: PWMt0PCA(u2,w2,middle);
  8005  000CCC  C02C  F01F         	movff	ADtoPWM@u2,PWMt0PCA@up
  8006  000CD0  C02D  F020         	movff	ADtoPWM@u2+1,PWMt0PCA@up+1
  8007  000CD4  C034  F021         	movff	ADtoPWM@w2,PWMt0PCA@low
  8008  000CD8  C035  F022         	movff	ADtoPWM@w2+1,PWMt0PCA@low+1
  8009  000CDC  0E02               	movlw	2
  8010  000CDE  6E23               	movwf	PWMt0PCA@finger,c
  8011  000CE0  EC8B  F006         	call	_PWMt0PCA	;wreg free
  8012                           
  8013                           ;flex.c: 39: PWMt0PCA(u3,w3,ring);
  8014  000CE4  C02E  F01F         	movff	ADtoPWM@u3,PWMt0PCA@up
  8015  000CE8  C02F  F020         	movff	ADtoPWM@u3+1,PWMt0PCA@up+1
  8016  000CEC  C036  F021         	movff	ADtoPWM@w3,PWMt0PCA@low
  8017  000CF0  C037  F022         	movff	ADtoPWM@w3+1,PWMt0PCA@low+1
  8018  000CF4  0E03               	movlw	3
  8019  000CF6  6E23               	movwf	PWMt0PCA@finger,c
  8020  000CF8  EC8B  F006         	call	_PWMt0PCA	;wreg free
  8021                           
  8022                           ;flex.c: 40: PWMt0PCA(u4,w4,pink);
  8023  000CFC  C030  F01F         	movff	ADtoPWM@u4,PWMt0PCA@up
  8024  000D00  C031  F020         	movff	ADtoPWM@u4+1,PWMt0PCA@up+1
  8025  000D04  C038  F021         	movff	ADtoPWM@w4,PWMt0PCA@low
  8026  000D08  C039  F022         	movff	ADtoPWM@w4+1,PWMt0PCA@low+1
  8027  000D0C  0E04               	movlw	4
  8028  000D0E  6E23               	movwf	PWMt0PCA@finger,c
  8029  000D10  EC8B  F006         	call	_PWMt0PCA	;wreg free
  8030  000D14  0012               	return		;funcret
  8031  000D16                     __end_of_ADtoPWM:
  8032                           	opt stack 0
  8033                           tblptru	equ	0xFF8
  8034                           tblptrh	equ	0xFF7
  8035                           tblptrl	equ	0xFF6
  8036                           tablat	equ	0xFF5
  8037                           prodh	equ	0xFF4
  8038                           prodl	equ	0xFF3
  8039                           intcon	equ	0xFF2
  8040                           indf0	equ	0xFEF
  8041                           postinc0	equ	0xFEE
  8042                           fsr0h	equ	0xFEA
  8043                           fsr0l	equ	0xFE9
  8044                           wreg	equ	0xFE8
  8045                           postdec1	equ	0xFE5
  8046                           plusw1	equ	0xFE3
  8047                           fsr1l	equ	0xFE1
  8048                           indf2	equ	0xFDF
  8049                           postinc2	equ	0xFDE
  8050                           postdec2	equ	0xFDD
  8051                           plusw2	equ	0xFDB
  8052                           fsr2h	equ	0xFDA
  8053                           fsr2l	equ	0xFD9
  8054                           status	equ	0xFD8
  8055                           
  8056 ;; *************** function _PWMt0PCA *****************
  8057 ;; Defined at:
  8058 ;;		line 43 in file "harwave/flex.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  up              2   30[COMRAM] unsigned int 
  8061 ;;  low             2   32[COMRAM] unsigned int 
  8062 ;;  finger          1   34[COMRAM] enum E3769
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, status,2, status,0, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8074 ;;      Params:         5       0       0       0       0       0       0
  8075 ;;      Locals:         0       0       0       0       0       0       0
  8076 ;;      Temps:          0       0       0       0       0       0       0
  8077 ;;      Totals:         5       0       0       0       0       0       0
  8078 ;;Total ram usage:        5 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    7
  8081 ;; This function calls:
  8082 ;;		_transmit_finger
  8083 ;; This function is called by:
  8084 ;;		_ADtoPWM
  8085 ;; This function uses a non-reentrant model
  8086 ;;
  8087                           
  8088                           	psect	text29
  8089  000D16                     __ptext29:
  8090                           	opt stack 0
  8091  000D16                     _PWMt0PCA:
  8092                           	opt stack 22
  8093                           
  8094                           ;flex.c: 44: switch (finger){
  8095                           
  8096                           ;incstack = 0
  8097  000D16  D080               	goto	l4220
  8098  000D18                     l4188:
  8099                           
  8100                           ;flex.c: 46: if( up > 0 )
  8101  000D18  501F               	movf	PWMt0PCA@up,w,c
  8102  000D1A  1020               	iorwf	PWMt0PCA@up+1,w,c
  8103  000D1C  B4D8               	btfsc	status,2,c
  8104  000D1E  D009               	goto	l4192
  8105                           
  8106                           ;flex.c: 47: transmit_finger(up ,0x06 );
  8107  000D20  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8108  000D24  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8109  000D28  0E06               	movlw	6
  8110  000D2A  6E1C               	movwf	transmit_finger@finger,c
  8111  000D2C  EC6D  F00B         	call	_transmit_finger	;wreg free
  8112  000D30  0012               	return	
  8113  000D32                     l4192:
  8114                           
  8115                           ;flex.c: 48: else
  8116                           ;flex.c: 49: transmit_finger( up+low , 0x06 );
  8117  000D32  5021               	movf	PWMt0PCA@low,w,c
  8118  000D34  241F               	addwf	PWMt0PCA@up,w,c
  8119  000D36  6E1A               	movwf	transmit_finger@HL_Value,c
  8120  000D38  5022               	movf	PWMt0PCA@low+1,w,c
  8121  000D3A  2020               	addwfc	PWMt0PCA@up+1,w,c
  8122  000D3C  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8123  000D3E  0E06               	movlw	6
  8124  000D40  6E1C               	movwf	transmit_finger@finger,c
  8125  000D42  EC6D  F00B         	call	_transmit_finger	;wreg free
  8126                           
  8127                           ;flex.c: 50: break;
  8128  000D46  0012               	return	
  8129  000D48                     l4194:
  8130                           
  8131                           ;flex.c: 52: if( up <= 1651 )
  8132  000D48  0E74               	movlw	116
  8133  000D4A  5C1F               	subwf	PWMt0PCA@up,w,c
  8134  000D4C  0E06               	movlw	6
  8135  000D4E  5820               	subwfb	PWMt0PCA@up+1,w,c
  8136  000D50  B0D8               	btfsc	status,0,c
  8137  000D52  D009               	goto	l4198
  8138                           
  8139                           ;flex.c: 53: transmit_finger(up ,0x0A );
  8140  000D54  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8141  000D58  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8142  000D5C  0E0A               	movlw	10
  8143  000D5E  6E1C               	movwf	transmit_finger@finger,c
  8144  000D60  EC6D  F00B         	call	_transmit_finger	;wreg free
  8145  000D64  0012               	return	
  8146  000D66                     l4198:
  8147                           
  8148                           ;flex.c: 54: else
  8149                           ;flex.c: 55: transmit_finger( up+low , 0x0A );
  8150  000D66  5021               	movf	PWMt0PCA@low,w,c
  8151  000D68  241F               	addwf	PWMt0PCA@up,w,c
  8152  000D6A  6E1A               	movwf	transmit_finger@HL_Value,c
  8153  000D6C  5022               	movf	PWMt0PCA@low+1,w,c
  8154  000D6E  2020               	addwfc	PWMt0PCA@up+1,w,c
  8155  000D70  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8156  000D72  0E0A               	movlw	10
  8157  000D74  6E1C               	movwf	transmit_finger@finger,c
  8158  000D76  EC6D  F00B         	call	_transmit_finger	;wreg free
  8159                           
  8160                           ;flex.c: 56: break;
  8161  000D7A  0012               	return	
  8162  000D7C                     l4200:
  8163                           
  8164                           ;flex.c: 58: if( up <= 2000 )
  8165  000D7C  0ED1               	movlw	209
  8166  000D7E  5C1F               	subwf	PWMt0PCA@up,w,c
  8167  000D80  0E07               	movlw	7
  8168  000D82  5820               	subwfb	PWMt0PCA@up+1,w,c
  8169  000D84  B0D8               	btfsc	status,0,c
  8170  000D86  D009               	goto	l4204
  8171                           
  8172                           ;flex.c: 59: transmit_finger(up ,0x0E );
  8173  000D88  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8174  000D8C  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8175  000D90  0E0E               	movlw	14
  8176  000D92  6E1C               	movwf	transmit_finger@finger,c
  8177  000D94  EC6D  F00B         	call	_transmit_finger	;wreg free
  8178  000D98  0012               	return	
  8179  000D9A                     l4204:
  8180                           
  8181                           ;flex.c: 60: else
  8182                           ;flex.c: 61: transmit_finger( up+low , 0x0E );
  8183  000D9A  5021               	movf	PWMt0PCA@low,w,c
  8184  000D9C  241F               	addwf	PWMt0PCA@up,w,c
  8185  000D9E  6E1A               	movwf	transmit_finger@HL_Value,c
  8186  000DA0  5022               	movf	PWMt0PCA@low+1,w,c
  8187  000DA2  2020               	addwfc	PWMt0PCA@up+1,w,c
  8188  000DA4  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8189  000DA6  0E0E               	movlw	14
  8190  000DA8  6E1C               	movwf	transmit_finger@finger,c
  8191  000DAA  EC6D  F00B         	call	_transmit_finger	;wreg free
  8192                           
  8193                           ;flex.c: 62: break;
  8194  000DAE  0012               	return	
  8195  000DB0                     l4206:
  8196                           
  8197                           ;flex.c: 64: if( up <= 1722 )
  8198  000DB0  0EBB               	movlw	187
  8199  000DB2  5C1F               	subwf	PWMt0PCA@up,w,c
  8200  000DB4  0E06               	movlw	6
  8201  000DB6  5820               	subwfb	PWMt0PCA@up+1,w,c
  8202  000DB8  B0D8               	btfsc	status,0,c
  8203  000DBA  D009               	goto	l4210
  8204                           
  8205                           ;flex.c: 65: transmit_finger(up ,0x12 );
  8206  000DBC  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8207  000DC0  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8208  000DC4  0E12               	movlw	18
  8209  000DC6  6E1C               	movwf	transmit_finger@finger,c
  8210  000DC8  EC6D  F00B         	call	_transmit_finger	;wreg free
  8211  000DCC  0012               	return	
  8212  000DCE                     l4210:
  8213                           
  8214                           ;flex.c: 66: else
  8215                           ;flex.c: 67: transmit_finger( up+low , 0x12 );
  8216  000DCE  5021               	movf	PWMt0PCA@low,w,c
  8217  000DD0  241F               	addwf	PWMt0PCA@up,w,c
  8218  000DD2  6E1A               	movwf	transmit_finger@HL_Value,c
  8219  000DD4  5022               	movf	PWMt0PCA@low+1,w,c
  8220  000DD6  2020               	addwfc	PWMt0PCA@up+1,w,c
  8221  000DD8  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8222  000DDA  0E12               	movlw	18
  8223  000DDC  6E1C               	movwf	transmit_finger@finger,c
  8224  000DDE  EC6D  F00B         	call	_transmit_finger	;wreg free
  8225                           
  8226                           ;flex.c: 68: break;
  8227  000DE2  0012               	return	
  8228  000DE4                     l4212:
  8229                           
  8230                           ;flex.c: 70: if( up <= 1580 )
  8231  000DE4  0E2D               	movlw	45
  8232  000DE6  5C1F               	subwf	PWMt0PCA@up,w,c
  8233  000DE8  0E06               	movlw	6
  8234  000DEA  5820               	subwfb	PWMt0PCA@up+1,w,c
  8235  000DEC  B0D8               	btfsc	status,0,c
  8236  000DEE  D009               	goto	l4216
  8237                           
  8238                           ;flex.c: 71: transmit_finger(up ,0x16 );
  8239  000DF0  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8240  000DF4  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8241  000DF8  0E16               	movlw	22
  8242  000DFA  6E1C               	movwf	transmit_finger@finger,c
  8243  000DFC  EC6D  F00B         	call	_transmit_finger	;wreg free
  8244  000E00  0012               	return	
  8245  000E02                     l4216:
  8246                           
  8247                           ;flex.c: 72: else
  8248                           ;flex.c: 73: transmit_finger( up+low , 0x16 );
  8249  000E02  5021               	movf	PWMt0PCA@low,w,c
  8250  000E04  241F               	addwf	PWMt0PCA@up,w,c
  8251  000E06  6E1A               	movwf	transmit_finger@HL_Value,c
  8252  000E08  5022               	movf	PWMt0PCA@low+1,w,c
  8253  000E0A  2020               	addwfc	PWMt0PCA@up+1,w,c
  8254  000E0C  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8255  000E0E  0E16               	movlw	22
  8256  000E10  6E1C               	movwf	transmit_finger@finger,c
  8257  000E12  EC6D  F00B         	call	_transmit_finger	;wreg free
  8258                           
  8259                           ;flex.c: 75: }
  8260                           
  8261                           ;flex.c: 74: break;
  8262  000E16  0012               	return	
  8263  000E18                     l4220:
  8264  000E18  5023               	movf	PWMt0PCA@finger,w,c
  8265                           
  8266                           ; Switch size 1, requested type "space"
  8267                           ; Number of cases is 5, Range of values is 0 to 4
  8268                           ; switch strategies available:
  8269                           ; Name         Instructions Cycles
  8270                           ; simple_byte           16     9 (average)
  8271                           ;	Chosen strategy is simple_byte
  8272  000E1A  0A00               	xorlw	0	; case 0
  8273  000E1C  B4D8               	btfsc	status,2,c
  8274  000E1E  D77C               	goto	l4188
  8275  000E20  0A01               	xorlw	1	; case 1
  8276  000E22  B4D8               	btfsc	status,2,c
  8277  000E24  D791               	goto	l4194
  8278  000E26  0A03               	xorlw	3	; case 2
  8279  000E28  B4D8               	btfsc	status,2,c
  8280  000E2A  D7A8               	goto	l4200
  8281  000E2C  0A01               	xorlw	1	; case 3
  8282  000E2E  B4D8               	btfsc	status,2,c
  8283  000E30  D7BF               	goto	l4206
  8284  000E32  0A07               	xorlw	7	; case 4
  8285  000E34  A4D8               	btfss	status,2,c
  8286  000E36  0012               	return	
  8287  000E38  D7D5               	goto	l4212
  8288  000E3A                     __end_of_PWMt0PCA:
  8289                           	opt stack 0
  8290                           tblptru	equ	0xFF8
  8291                           tblptrh	equ	0xFF7
  8292                           tblptrl	equ	0xFF6
  8293                           tablat	equ	0xFF5
  8294                           prodh	equ	0xFF4
  8295                           prodl	equ	0xFF3
  8296                           intcon	equ	0xFF2
  8297                           indf0	equ	0xFEF
  8298                           postinc0	equ	0xFEE
  8299                           fsr0h	equ	0xFEA
  8300                           fsr0l	equ	0xFE9
  8301                           wreg	equ	0xFE8
  8302                           postdec1	equ	0xFE5
  8303                           plusw1	equ	0xFE3
  8304                           fsr1l	equ	0xFE1
  8305                           indf2	equ	0xFDF
  8306                           postinc2	equ	0xFDE
  8307                           postdec2	equ	0xFDD
  8308                           plusw2	equ	0xFDB
  8309                           fsr2h	equ	0xFDA
  8310                           fsr2l	equ	0xFD9
  8311                           status	equ	0xFD8
  8312                           
  8313 ;; *************** function _transmit_finger *****************
  8314 ;; Defined at:
  8315 ;;		line 7 in file "harwave/flex.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  HL_Value        2   25[COMRAM] unsigned int 
  8318 ;;  finger          1   27[COMRAM] unsigned char 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;  Lbyte           1   29[COMRAM] unsigned char 
  8321 ;;  Hbyte           1   28[COMRAM] unsigned char 
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      void 
  8324 ;; Registers used:
  8325 ;;		wreg, status,2, status,0, cstack
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8331 ;;      Params:         3       0       0       0       0       0       0
  8332 ;;      Locals:         2       0       0       0       0       0       0
  8333 ;;      Temps:          0       0       0       0       0       0       0
  8334 ;;      Totals:         5       0       0       0       0       0       0
  8335 ;;Total ram usage:        5 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    6
  8338 ;; This function calls:
  8339 ;;		_PCA9685_writeOneByte
  8340 ;; This function is called by:
  8341 ;;		_PWMt0PCA
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           	psect	text30
  8346  0016DA                     __ptext30:
  8347                           	opt stack 0
  8348  0016DA                     _transmit_finger:
  8349                           	opt stack 22
  8350                           
  8351                           ;flex.c: 8: u8 Hbyte , Lbyte ;
  8352                           ;flex.c: 9: Lbyte = HL_Value ;
  8353                           
  8354                           ;incstack = 0
  8355  0016DA  C01A  F01E         	movff	transmit_finger@HL_Value,transmit_finger@Lbyte
  8356                           
  8357                           ;flex.c: 10: Hbyte = HL_Value >> 8 ;
  8358  0016DE  501B               	movf	transmit_finger@HL_Value+1,w,c
  8359  0016E0  6E1D               	movwf	transmit_finger@Hbyte,c
  8360                           
  8361                           ;flex.c: 11: PCA9685_writeOneByte(finger,0x00);
  8362  0016E2  0E00               	movlw	0
  8363  0016E4  6E18               	movwf	PCA9685_writeOneByte@data,c
  8364  0016E6  501C               	movf	transmit_finger@finger,w,c
  8365  0016E8  EC88  F00B         	call	_PCA9685_writeOneByte
  8366                           
  8367                           ;flex.c: 12: PCA9685_writeOneByte(finger+1,0x00);
  8368  0016EC  0E00               	movlw	0
  8369  0016EE  6E18               	movwf	PCA9685_writeOneByte@data,c
  8370  0016F0  281C               	incf	transmit_finger@finger,w,c
  8371  0016F2  EC88  F00B         	call	_PCA9685_writeOneByte
  8372                           
  8373                           ;flex.c: 13: PCA9685_writeOneByte(finger+2,Lbyte);
  8374  0016F6  C01E  F018         	movff	transmit_finger@Lbyte,PCA9685_writeOneByte@data
  8375  0016FA  501C               	movf	transmit_finger@finger,w,c
  8376  0016FC  0F02               	addlw	2
  8377  0016FE  EC88  F00B         	call	_PCA9685_writeOneByte
  8378                           
  8379                           ;flex.c: 14: PCA9685_writeOneByte(finger+3,Hbyte);
  8380  001702  C01D  F018         	movff	transmit_finger@Hbyte,PCA9685_writeOneByte@data
  8381  001706  501C               	movf	transmit_finger@finger,w,c
  8382  001708  0F03               	addlw	3
  8383  00170A  EC88  F00B         	call	_PCA9685_writeOneByte
  8384  00170E  0012               	return		;funcret
  8385  001710                     __end_of_transmit_finger:
  8386                           	opt stack 0
  8387                           tblptru	equ	0xFF8
  8388                           tblptrh	equ	0xFF7
  8389                           tblptrl	equ	0xFF6
  8390                           tablat	equ	0xFF5
  8391                           prodh	equ	0xFF4
  8392                           prodl	equ	0xFF3
  8393                           intcon	equ	0xFF2
  8394                           indf0	equ	0xFEF
  8395                           postinc0	equ	0xFEE
  8396                           fsr0h	equ	0xFEA
  8397                           fsr0l	equ	0xFE9
  8398                           wreg	equ	0xFE8
  8399                           postdec1	equ	0xFE5
  8400                           plusw1	equ	0xFE3
  8401                           fsr1l	equ	0xFE1
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           plusw2	equ	0xFDB
  8406                           fsr2h	equ	0xFDA
  8407                           fsr2l	equ	0xFD9
  8408                           status	equ	0xFD8
  8409                           
  8410 ;; *************** function _PCA9685_writeOneByte *****************
  8411 ;; Defined at:
  8412 ;;		line 6 in file "harwave/PCA9685.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  addr            1    wreg     unsigned char 
  8415 ;;  data            1   23[COMRAM] unsigned char 
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;  addr            1   24[COMRAM] unsigned char 
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  1    wreg      void 
  8420 ;; Registers used:
  8421 ;;		wreg, status,2, status,0, cstack
  8422 ;; Tracked objects:
  8423 ;;		On entry : 0/0
  8424 ;;		On exit  : 0/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8427 ;;      Params:         1       0       0       0       0       0       0
  8428 ;;      Locals:         1       0       0       0       0       0       0
  8429 ;;      Temps:          0       0       0       0       0       0       0
  8430 ;;      Totals:         2       0       0       0       0       0       0
  8431 ;;Total ram usage:        2 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    5
  8434 ;; This function calls:
  8435 ;;		_IIC_Send_Byte
  8436 ;;		_IIC_Start
  8437 ;;		_IIC_Stop
  8438 ;;		_IIC_Wait_Ack
  8439 ;;		_delay_ms
  8440 ;; This function is called by:
  8441 ;;		_transmit_finger
  8442 ;;		_PCA9685_init
  8443 ;;		_PCA9685_Write
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           	psect	text31
  8448  001710                     __ptext31:
  8449                           	opt stack 0
  8450  001710                     _PCA9685_writeOneByte:
  8451                           	opt stack 24
  8452                           
  8453                           ;incstack = 0
  8454                           ;PCA9685_writeOneByte@addr stored from wreg
  8455  001710  6E19               	movwf	PCA9685_writeOneByte@addr,c
  8456                           
  8457                           ;PCA9685.c: 8: IIC_Start();
  8458  001712  EC44  F00C         	call	_IIC_Start	;wreg free
  8459                           
  8460                           ;PCA9685.c: 9: IIC_Send_Byte(0x80);
  8461  001716  0E80               	movlw	128
  8462  001718  EC27  F00A         	call	_IIC_Send_Byte
  8463                           
  8464                           ;PCA9685.c: 10: IIC_Wait_Ack();
  8465  00171C  EC35  F00B         	call	_IIC_Wait_Ack	;wreg free
  8466                           
  8467                           ;PCA9685.c: 11: IIC_Send_Byte(addr&0xff);
  8468  001720  5019               	movf	PCA9685_writeOneByte@addr,w,c
  8469  001722  EC27  F00A         	call	_IIC_Send_Byte
  8470                           
  8471                           ;PCA9685.c: 12: IIC_Wait_Ack();
  8472  001726  EC35  F00B         	call	_IIC_Wait_Ack	;wreg free
  8473                           
  8474                           ;PCA9685.c: 13: IIC_Send_Byte(data);
  8475  00172A  5018               	movf	PCA9685_writeOneByte@data,w,c
  8476  00172C  EC27  F00A         	call	_IIC_Send_Byte
  8477                           
  8478                           ;PCA9685.c: 14: IIC_Wait_Ack();
  8479  001730  EC35  F00B         	call	_IIC_Wait_Ack	;wreg free
  8480                           
  8481                           ;PCA9685.c: 15: IIC_Stop();
  8482  001734  EC32  F00C         	call	_IIC_Stop	;wreg free
  8483                           
  8484                           ;PCA9685.c: 16: delay_ms(10);
  8485  001738  0E00               	movlw	0
  8486  00173A  6E15               	movwf	delay_ms@ms+1,c
  8487  00173C  0E0A               	movlw	10
  8488  00173E  6E14               	movwf	delay_ms@ms,c
  8489  001740  EC82  F00C         	call	_delay_ms	;wreg free
  8490  001744  0012               	return		;funcret
  8491  001746                     __end_of_PCA9685_writeOneByte:
  8492                           	opt stack 0
  8493                           tblptru	equ	0xFF8
  8494                           tblptrh	equ	0xFF7
  8495                           tblptrl	equ	0xFF6
  8496                           tablat	equ	0xFF5
  8497                           prodh	equ	0xFF4
  8498                           prodl	equ	0xFF3
  8499                           intcon	equ	0xFF2
  8500                           indf0	equ	0xFEF
  8501                           postinc0	equ	0xFEE
  8502                           fsr0h	equ	0xFEA
  8503                           fsr0l	equ	0xFE9
  8504                           wreg	equ	0xFE8
  8505                           postdec1	equ	0xFE5
  8506                           plusw1	equ	0xFE3
  8507                           fsr1l	equ	0xFE1
  8508                           indf2	equ	0xFDF
  8509                           postinc2	equ	0xFDE
  8510                           postdec2	equ	0xFDD
  8511                           plusw2	equ	0xFDB
  8512                           fsr2h	equ	0xFDA
  8513                           fsr2l	equ	0xFD9
  8514                           status	equ	0xFD8
  8515                           
  8516 ;; *************** function _delay_ms *****************
  8517 ;; Defined at:
  8518 ;;		line 3 in file "harwave/mydelay.c"
  8519 ;; Parameters:    Size  Location     Type
  8520 ;;  ms              2   19[COMRAM] int 
  8521 ;; Auto vars:     Size  Location     Type
  8522 ;;		None
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  1    wreg      void 
  8525 ;; Registers used:
  8526 ;;		wreg, status,2, status,0, cstack
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8532 ;;      Params:         2       0       0       0       0       0       0
  8533 ;;      Locals:         0       0       0       0       0       0       0
  8534 ;;      Temps:          0       0       0       0       0       0       0
  8535 ;;      Totals:         2       0       0       0       0       0       0
  8536 ;;Total ram usage:        2 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; Hardware stack levels required when called:    2
  8539 ;; This function calls:
  8540 ;;		_Delay10KTCYx
  8541 ;; This function is called by:
  8542 ;;		_PCA9685_writeOneByte
  8543 ;;		_ESP8266_Cmd
  8544 ;;		_LCD_Initialize
  8545 ;;		_LCD_WriteCmd
  8546 ;;		_LCD_GotoXY
  8547 ;;		_LCD_WriteData
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           	psect	text32
  8552  001904                     __ptext32:
  8553                           	opt stack 0
  8554  001904                     _delay_ms:
  8555                           	opt stack 26
  8556  001904                     
  8557                           ;mydelay.c: 6: Delay10KTCYx(1);
  8558  001904  0E01               	movlw	1
  8559  001906  EC8D  F00C         	call	_Delay10KTCYx
  8560                           
  8561                           ;mydelay.c: 7: ms--;
  8562  00190A  0614               	decf	delay_ms@ms,f,c
  8563  00190C  A0D8               	btfss	status,0,c
  8564  00190E  0615               	decf	delay_ms@ms+1,f,c
  8565                           
  8566                           ;mydelay.c: 8: }while(ms);
  8567  001910  5014               	movf	delay_ms@ms,w,c
  8568  001912  1015               	iorwf	delay_ms@ms+1,w,c
  8569  001914  B4D8               	btfsc	status,2,c
  8570  001916  0012               	return	
  8571  001918  D7F5               	goto	l3662
  8572  00191A                     __end_of_delay_ms:
  8573                           	opt stack 0
  8574                           tblptru	equ	0xFF8
  8575                           tblptrh	equ	0xFF7
  8576                           tblptrl	equ	0xFF6
  8577                           tablat	equ	0xFF5
  8578                           prodh	equ	0xFF4
  8579                           prodl	equ	0xFF3
  8580                           intcon	equ	0xFF2
  8581                           indf0	equ	0xFEF
  8582                           postinc0	equ	0xFEE
  8583                           fsr0h	equ	0xFEA
  8584                           fsr0l	equ	0xFE9
  8585                           wreg	equ	0xFE8
  8586                           postdec1	equ	0xFE5
  8587                           plusw1	equ	0xFE3
  8588                           fsr1l	equ	0xFE1
  8589                           indf2	equ	0xFDF
  8590                           postinc2	equ	0xFDE
  8591                           postdec2	equ	0xFDD
  8592                           plusw2	equ	0xFDB
  8593                           fsr2h	equ	0xFDA
  8594                           fsr2l	equ	0xFD9
  8595                           status	equ	0xFD8
  8596                           
  8597 ;; *************** function _Delay10KTCYx *****************
  8598 ;; Defined at:
  8599 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10ktcyx.c"
  8600 ;; Parameters:    Size  Location     Type
  8601 ;;  unit            1    wreg     unsigned char 
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;  unit            1   18[COMRAM] unsigned char 
  8604 ;; Return value:  Size  Location     Type
  8605 ;;                  1    wreg      void 
  8606 ;; Registers used:
  8607 ;;		wreg
  8608 ;; Tracked objects:
  8609 ;;		On entry : 0/0
  8610 ;;		On exit  : 0/0
  8611 ;;		Unchanged: 0/0
  8612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8613 ;;      Params:         0       0       0       0       0       0       0
  8614 ;;      Locals:         1       0       0       0       0       0       0
  8615 ;;      Temps:          1       0       0       0       0       0       0
  8616 ;;      Totals:         2       0       0       0       0       0       0
  8617 ;;Total ram usage:        2 bytes
  8618 ;; Hardware stack levels used:    1
  8619 ;; Hardware stack levels required when called:    1
  8620 ;; This function calls:
  8621 ;;		Nothing
  8622 ;; This function is called by:
  8623 ;;		_delay_ms
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           	psect	text33
  8628  00191A                     __ptext33:
  8629                           	opt stack 0
  8630  00191A                     _Delay10KTCYx:
  8631                           	opt stack 26
  8632                           
  8633                           ;incstack = 0
  8634                           ;Delay10KTCYx@unit stored from wreg
  8635  00191A  6E13               	movwf	Delay10KTCYx@unit,c
  8636  00191C  0E0D               	movlw	13
  8637  00191E  6E12               	movwf	??_Delay10KTCYx& (0+255),c
  8638  001920  0EFC               	movlw	252
  8639  001922                     u4677:
  8640  001922  2EE8               	decfsz	wreg,f,c
  8641  001924  D7FE               	bra	u4677
  8642  001926  2E12               	decfsz	??_Delay10KTCYx& (0+255),f,c
  8643  001928  D7FC               	bra	u4677
  8644  00192A  2E13               	decfsz	Delay10KTCYx@unit,f,c
  8645  00192C  D7F7               	goto	l3618
  8646  00192E  0012               	return	
  8647  001930                     __end_of_Delay10KTCYx:
  8648                           	opt stack 0
  8649                           tblptru	equ	0xFF8
  8650                           tblptrh	equ	0xFF7
  8651                           tblptrl	equ	0xFF6
  8652                           tablat	equ	0xFF5
  8653                           prodh	equ	0xFF4
  8654                           prodl	equ	0xFF3
  8655                           intcon	equ	0xFF2
  8656                           indf0	equ	0xFEF
  8657                           postinc0	equ	0xFEE
  8658                           fsr0h	equ	0xFEA
  8659                           fsr0l	equ	0xFE9
  8660                           wreg	equ	0xFE8
  8661                           postdec1	equ	0xFE5
  8662                           plusw1	equ	0xFE3
  8663                           fsr1l	equ	0xFE1
  8664                           indf2	equ	0xFDF
  8665                           postinc2	equ	0xFDE
  8666                           postdec2	equ	0xFDD
  8667                           plusw2	equ	0xFDB
  8668                           fsr2h	equ	0xFDA
  8669                           fsr2l	equ	0xFD9
  8670                           status	equ	0xFD8
  8671                           
  8672 ;; *************** function _IIC_Wait_Ack *****************
  8673 ;; Defined at:
  8674 ;;		line 43 in file "harwave/softIIC.c"
  8675 ;; Parameters:    Size  Location     Type
  8676 ;;		None
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;  ucErrTime       1   20[COMRAM] unsigned char 
  8679 ;; Return value:  Size  Location     Type
  8680 ;;                  1    wreg      unsigned char 
  8681 ;; Registers used:
  8682 ;;		wreg, status,2, status,0, cstack
  8683 ;; Tracked objects:
  8684 ;;		On entry : 0/0
  8685 ;;		On exit  : 0/0
  8686 ;;		Unchanged: 0/0
  8687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8688 ;;      Params:         0       0       0       0       0       0       0
  8689 ;;      Locals:         1       0       0       0       0       0       0
  8690 ;;      Temps:          0       0       0       0       0       0       0
  8691 ;;      Totals:         1       0       0       0       0       0       0
  8692 ;;Total ram usage:        1 bytes
  8693 ;; Hardware stack levels used:    1
  8694 ;; Hardware stack levels required when called:    4
  8695 ;; This function calls:
  8696 ;;		_IIC_Stop
  8697 ;;		_delay_us
  8698 ;; This function is called by:
  8699 ;;		_PCA9685_writeOneByte
  8700 ;;		_PCA9685_readOneByte
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           	psect	text34
  8705  00166A                     __ptext34:
  8706                           	opt stack 0
  8707  00166A                     _IIC_Wait_Ack:
  8708                           	opt stack 24
  8709                           
  8710                           ;softIIC.c: 45: u8 ucErrTime=0;
  8711                           
  8712                           ;incstack = 0
  8713  00166A  0E00               	movlw	0
  8714  00166C  6E15               	movwf	IIC_Wait_Ack@ucErrTime,c
  8715                           
  8716                           ;softIIC.c: 46: {TRISBbits.TRISB0=1;};
  8717  00166E  8093               	bsf	3987,0,c	;volatile
  8718                           
  8719                           ;softIIC.c: 47: PORTBbits.RB0=1;
  8720  001670  8081               	bsf	3969,0,c	;volatile
  8721                           
  8722                           ;softIIC.c: 49: delay_us(1);
  8723  001672  0E00               	movlw	0
  8724  001674  6E14               	movwf	delay_us@us+1,c
  8725  001676  0E01               	movlw	1
  8726  001678  6E13               	movwf	delay_us@us,c
  8727  00167A  EC98  F00C         	call	_delay_us	;wreg free
  8728                           
  8729                           ;softIIC.c: 50: PORTBbits.RB1=1;
  8730  00167E  8281               	bsf	3969,1,c	;volatile
  8731                           
  8732                           ;softIIC.c: 52: delay_us(1);
  8733  001680  0E00               	movlw	0
  8734  001682  6E14               	movwf	delay_us@us+1,c
  8735  001684  0E01               	movlw	1
  8736  001686  6E13               	movwf	delay_us@us,c
  8737  001688  EC98  F00C         	call	_delay_us	;wreg free
  8738                           
  8739                           ;softIIC.c: 53: while(PORTBbits.RB0)
  8740  00168C  D007               	goto	l274
  8741  00168E                     l2630:
  8742                           
  8743                           ;softIIC.c: 54: {
  8744                           ;softIIC.c: 55: ucErrTime++;
  8745  00168E  2A15               	incf	IIC_Wait_Ack@ucErrTime,f,c
  8746                           
  8747                           ;softIIC.c: 56: if(ucErrTime>250)
  8748  001690  0EFA               	movlw	250
  8749  001692  6415               	cpfsgt	IIC_Wait_Ack@ucErrTime,c
  8750  001694  D003               	goto	l274
  8751                           
  8752                           ;softIIC.c: 57: {
  8753                           ;softIIC.c: 58: IIC_Stop();
  8754  001696  EC32  F00C         	call	_IIC_Stop	;wreg free
  8755                           
  8756                           ;softIIC.c: 59: return 1;
  8757                           ;	Return value of _IIC_Wait_Ack is never used
  8758  00169A  0012               	return	
  8759  00169C                     l274:
  8760  00169C  B081               	btfsc	3969,0,c	;volatile
  8761  00169E  D7F7               	goto	l2630
  8762                           
  8763                           ;softIIC.c: 60: }
  8764                           ;softIIC.c: 61: }
  8765                           ;softIIC.c: 62: PORTBbits.RB1=0;
  8766  0016A0  9281               	bcf	3969,1,c	;volatile
  8767                           
  8768                           ;softIIC.c: 63: return 0;
  8769                           ;	Return value of _IIC_Wait_Ack is never used
  8770  0016A2  0012               	return		;funcret
  8771  0016A4                     __end_of_IIC_Wait_Ack:
  8772                           	opt stack 0
  8773                           tblptru	equ	0xFF8
  8774                           tblptrh	equ	0xFF7
  8775                           tblptrl	equ	0xFF6
  8776                           tablat	equ	0xFF5
  8777                           prodh	equ	0xFF4
  8778                           prodl	equ	0xFF3
  8779                           intcon	equ	0xFF2
  8780                           indf0	equ	0xFEF
  8781                           postinc0	equ	0xFEE
  8782                           fsr0h	equ	0xFEA
  8783                           fsr0l	equ	0xFE9
  8784                           wreg	equ	0xFE8
  8785                           postdec1	equ	0xFE5
  8786                           plusw1	equ	0xFE3
  8787                           fsr1l	equ	0xFE1
  8788                           indf2	equ	0xFDF
  8789                           postinc2	equ	0xFDE
  8790                           postdec2	equ	0xFDD
  8791                           plusw2	equ	0xFDB
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796 ;; *************** function _IIC_Stop *****************
  8797 ;; Defined at:
  8798 ;;		line 29 in file "harwave/softIIC.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;		None
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;		None
  8803 ;; Return value:  Size  Location     Type
  8804 ;;                  1    wreg      void 
  8805 ;; Registers used:
  8806 ;;		wreg, status,2, status,0, cstack
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8812 ;;      Params:         0       0       0       0       0       0       0
  8813 ;;      Locals:         0       0       0       0       0       0       0
  8814 ;;      Temps:          0       0       0       0       0       0       0
  8815 ;;      Totals:         0       0       0       0       0       0       0
  8816 ;;Total ram usage:        0 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:    3
  8819 ;; This function calls:
  8820 ;;		_delay_us
  8821 ;; This function is called by:
  8822 ;;		_PCA9685_writeOneByte
  8823 ;;		_IIC_Wait_Ack
  8824 ;;		_PCA9685_readOneByte
  8825 ;; This function uses a non-reentrant model
  8826 ;;
  8827                           
  8828                           	psect	text35
  8829  001864                     __ptext35:
  8830                           	opt stack 0
  8831  001864                     _IIC_Stop:
  8832                           	opt stack 24
  8833                           
  8834                           ;softIIC.c: 31: {TRISBbits.TRISB0=0;};
  8835                           
  8836                           ;incstack = 0
  8837  001864  9093               	bcf	3987,0,c	;volatile
  8838                           
  8839                           ;softIIC.c: 32: PORTBbits.RB1=0;
  8840  001866  9281               	bcf	3969,1,c	;volatile
  8841                           
  8842                           ;softIIC.c: 33: PORTBbits.RB0=0;
  8843  001868  9081               	bcf	3969,0,c	;volatile
  8844                           
  8845                           ;softIIC.c: 34: delay_us(4);
  8846  00186A  0E00               	movlw	0
  8847  00186C  6E14               	movwf	delay_us@us+1,c
  8848  00186E  0E04               	movlw	4
  8849  001870  6E13               	movwf	delay_us@us,c
  8850  001872  EC98  F00C         	call	_delay_us	;wreg free
  8851                           
  8852                           ;softIIC.c: 35: PORTBbits.RB1=1;
  8853  001876  8281               	bsf	3969,1,c	;volatile
  8854                           
  8855                           ;softIIC.c: 36: delay_us(4);
  8856  001878  0E00               	movlw	0
  8857  00187A  6E14               	movwf	delay_us@us+1,c
  8858  00187C  0E04               	movlw	4
  8859  00187E  6E13               	movwf	delay_us@us,c
  8860  001880  EC98  F00C         	call	_delay_us	;wreg free
  8861                           
  8862                           ;softIIC.c: 37: PORTBbits.RB0=1;
  8863  001884  8081               	bsf	3969,0,c	;volatile
  8864  001886  0012               	return		;funcret
  8865  001888                     __end_of_IIC_Stop:
  8866                           	opt stack 0
  8867                           tblptru	equ	0xFF8
  8868                           tblptrh	equ	0xFF7
  8869                           tblptrl	equ	0xFF6
  8870                           tablat	equ	0xFF5
  8871                           prodh	equ	0xFF4
  8872                           prodl	equ	0xFF3
  8873                           intcon	equ	0xFF2
  8874                           indf0	equ	0xFEF
  8875                           postinc0	equ	0xFEE
  8876                           fsr0h	equ	0xFEA
  8877                           fsr0l	equ	0xFE9
  8878                           wreg	equ	0xFE8
  8879                           postdec1	equ	0xFE5
  8880                           plusw1	equ	0xFE3
  8881                           fsr1l	equ	0xFE1
  8882                           indf2	equ	0xFDF
  8883                           postinc2	equ	0xFDE
  8884                           postdec2	equ	0xFDD
  8885                           plusw2	equ	0xFDB
  8886                           fsr2h	equ	0xFDA
  8887                           fsr2l	equ	0xFD9
  8888                           status	equ	0xFD8
  8889                           
  8890 ;; *************** function _IIC_Start *****************
  8891 ;; Defined at:
  8892 ;;		line 18 in file "harwave/softIIC.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;		None
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;		None
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  1    wreg      void 
  8899 ;; Registers used:
  8900 ;;		wreg, status,2, status,0, cstack
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8906 ;;      Params:         0       0       0       0       0       0       0
  8907 ;;      Locals:         0       0       0       0       0       0       0
  8908 ;;      Temps:          0       0       0       0       0       0       0
  8909 ;;      Totals:         0       0       0       0       0       0       0
  8910 ;;Total ram usage:        0 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    3
  8913 ;; This function calls:
  8914 ;;		_delay_us
  8915 ;; This function is called by:
  8916 ;;		_PCA9685_writeOneByte
  8917 ;;		_PCA9685_readOneByte
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           	psect	text36
  8922  001888                     __ptext36:
  8923                           	opt stack 0
  8924  001888                     _IIC_Start:
  8925                           	opt stack 25
  8926                           
  8927                           ;softIIC.c: 20: {TRISBbits.TRISB0=0;};
  8928                           
  8929                           ;incstack = 0
  8930  001888  9093               	bcf	3987,0,c	;volatile
  8931                           
  8932                           ;softIIC.c: 21: PORTBbits.RB0=1;
  8933  00188A  8081               	bsf	3969,0,c	;volatile
  8934                           
  8935                           ;softIIC.c: 22: PORTBbits.RB1=1;
  8936  00188C  8281               	bsf	3969,1,c	;volatile
  8937                           
  8938                           ;softIIC.c: 23: delay_us(4);
  8939  00188E  0E00               	movlw	0
  8940  001890  6E14               	movwf	delay_us@us+1,c
  8941  001892  0E04               	movlw	4
  8942  001894  6E13               	movwf	delay_us@us,c
  8943  001896  EC98  F00C         	call	_delay_us	;wreg free
  8944                           
  8945                           ;softIIC.c: 24: PORTBbits.RB0=0;
  8946  00189A  9081               	bcf	3969,0,c	;volatile
  8947                           
  8948                           ;softIIC.c: 25: delay_us(4);
  8949  00189C  0E00               	movlw	0
  8950  00189E  6E14               	movwf	delay_us@us+1,c
  8951  0018A0  0E04               	movlw	4
  8952  0018A2  6E13               	movwf	delay_us@us,c
  8953  0018A4  EC98  F00C         	call	_delay_us	;wreg free
  8954                           
  8955                           ;softIIC.c: 26: PORTBbits.RB1=0;
  8956  0018A8  9281               	bcf	3969,1,c	;volatile
  8957  0018AA  0012               	return		;funcret
  8958  0018AC                     __end_of_IIC_Start:
  8959                           	opt stack 0
  8960                           tblptru	equ	0xFF8
  8961                           tblptrh	equ	0xFF7
  8962                           tblptrl	equ	0xFF6
  8963                           tablat	equ	0xFF5
  8964                           prodh	equ	0xFF4
  8965                           prodl	equ	0xFF3
  8966                           intcon	equ	0xFF2
  8967                           indf0	equ	0xFEF
  8968                           postinc0	equ	0xFEE
  8969                           fsr0h	equ	0xFEA
  8970                           fsr0l	equ	0xFE9
  8971                           wreg	equ	0xFE8
  8972                           postdec1	equ	0xFE5
  8973                           plusw1	equ	0xFE3
  8974                           fsr1l	equ	0xFE1
  8975                           indf2	equ	0xFDF
  8976                           postinc2	equ	0xFDE
  8977                           postdec2	equ	0xFDD
  8978                           plusw2	equ	0xFDB
  8979                           fsr2h	equ	0xFDA
  8980                           fsr2l	equ	0xFD9
  8981                           status	equ	0xFD8
  8982                           
  8983 ;; *************** function _IIC_Send_Byte *****************
  8984 ;; Defined at:
  8985 ;;		line 91 in file "harwave/softIIC.c"
  8986 ;; Parameters:    Size  Location     Type
  8987 ;;  txd             1    wreg     unsigned char 
  8988 ;; Auto vars:     Size  Location     Type
  8989 ;;  txd             1   21[COMRAM] unsigned char 
  8990 ;;  t               1   22[COMRAM] unsigned char 
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      void 
  8993 ;; Registers used:
  8994 ;;		wreg, status,2, status,0, cstack
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9000 ;;      Params:         0       0       0       0       0       0       0
  9001 ;;      Locals:         2       0       0       0       0       0       0
  9002 ;;      Temps:          1       0       0       0       0       0       0
  9003 ;;      Totals:         3       0       0       0       0       0       0
  9004 ;;Total ram usage:        3 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    3
  9007 ;; This function calls:
  9008 ;;		_delay_us
  9009 ;; This function is called by:
  9010 ;;		_PCA9685_writeOneByte
  9011 ;;		_PCA9685_readOneByte
  9012 ;; This function uses a non-reentrant model
  9013 ;;
  9014                           
  9015                           	psect	text37
  9016  00144E                     __ptext37:
  9017                           	opt stack 0
  9018  00144E                     _IIC_Send_Byte:
  9019                           	opt stack 25
  9020                           
  9021                           ;incstack = 0
  9022                           ;IIC_Send_Byte@txd stored from wreg
  9023  00144E  6E16               	movwf	IIC_Send_Byte@txd,c
  9024                           
  9025                           ;softIIC.c: 93: u8 t;
  9026                           ;softIIC.c: 94: {TRISBbits.TRISB0=0;};
  9027  001450  9093               	bcf	3987,0,c	;volatile
  9028                           
  9029                           ;softIIC.c: 95: PORTBbits.RB1=0;
  9030  001452  9281               	bcf	3969,1,c	;volatile
  9031                           
  9032                           ;softIIC.c: 96: for(t=0;t<8;t++)
  9033  001454  0E00               	movlw	0
  9034  001456  6E17               	movwf	IIC_Send_Byte@t,c
  9035  001458                     l2598:
  9036  001458  0E07               	movlw	7
  9037  00145A  6417               	cpfsgt	IIC_Send_Byte@t,c
  9038  00145C  D001               	goto	l2602
  9039  00145E  0012               	return	
  9040  001460                     l2602:
  9041                           
  9042                           ;softIIC.c: 97: {
  9043                           ;softIIC.c: 98: PORTBbits.RB0=(txd&0x80)>>7;
  9044  001460  6A15               	clrf	??_IIC_Send_Byte& (0+255),c
  9045  001462  AE16               	btfss	IIC_Send_Byte@txd,7,c
  9046  001464  D001               	bra	u1725
  9047  001466  2A15               	incf	??_IIC_Send_Byte& (0+255),f,c
  9048  001468                     u1725:
  9049  001468  0E01               	movlw	1
  9050  00146A  1615               	andwf	??_IIC_Send_Byte,f,c
  9051  00146C  5081               	movf	3969,w,c	;volatile
  9052  00146E  1815               	xorwf	??_IIC_Send_Byte,w,c
  9053  001470  0BFE               	andlw	-2
  9054  001472  1815               	xorwf	??_IIC_Send_Byte,w,c
  9055  001474  6E81               	movwf	3969,c	;volatile
  9056                           
  9057                           ;softIIC.c: 99: txd<<=1;
  9058  001476  90D8               	bcf	status,0,c
  9059  001478  3616               	rlcf	IIC_Send_Byte@txd,f,c
  9060                           
  9061                           ;softIIC.c: 100: delay_us(2);
  9062  00147A  0E00               	movlw	0
  9063  00147C  6E14               	movwf	delay_us@us+1,c
  9064  00147E  0E02               	movlw	2
  9065  001480  6E13               	movwf	delay_us@us,c
  9066  001482  EC98  F00C         	call	_delay_us	;wreg free
  9067                           
  9068                           ;softIIC.c: 101: PORTBbits.RB1=1;
  9069  001486  8281               	bsf	3969,1,c	;volatile
  9070                           
  9071                           ;softIIC.c: 102: delay_us(2);
  9072  001488  0E00               	movlw	0
  9073  00148A  6E14               	movwf	delay_us@us+1,c
  9074  00148C  0E02               	movlw	2
  9075  00148E  6E13               	movwf	delay_us@us,c
  9076  001490  EC98  F00C         	call	_delay_us	;wreg free
  9077                           
  9078                           ;softIIC.c: 103: PORTBbits.RB1=0;
  9079  001494  9281               	bcf	3969,1,c	;volatile
  9080                           
  9081                           ;softIIC.c: 104: delay_us(2);
  9082  001496  0E00               	movlw	0
  9083  001498  6E14               	movwf	delay_us@us+1,c
  9084  00149A  0E02               	movlw	2
  9085  00149C  6E13               	movwf	delay_us@us,c
  9086  00149E  EC98  F00C         	call	_delay_us	;wreg free
  9087  0014A2  2A17               	incf	IIC_Send_Byte@t,f,c
  9088  0014A4  D7D9               	goto	l2598
  9089  0014A6                     __end_of_IIC_Send_Byte:
  9090                           	opt stack 0
  9091                           tblptru	equ	0xFF8
  9092                           tblptrh	equ	0xFF7
  9093                           tblptrl	equ	0xFF6
  9094                           tablat	equ	0xFF5
  9095                           prodh	equ	0xFF4
  9096                           prodl	equ	0xFF3
  9097                           intcon	equ	0xFF2
  9098                           indf0	equ	0xFEF
  9099                           postinc0	equ	0xFEE
  9100                           fsr0h	equ	0xFEA
  9101                           fsr0l	equ	0xFE9
  9102                           wreg	equ	0xFE8
  9103                           postdec1	equ	0xFE5
  9104                           plusw1	equ	0xFE3
  9105                           fsr1l	equ	0xFE1
  9106                           indf2	equ	0xFDF
  9107                           postinc2	equ	0xFDE
  9108                           postdec2	equ	0xFDD
  9109                           plusw2	equ	0xFDB
  9110                           fsr2h	equ	0xFDA
  9111                           fsr2l	equ	0xFD9
  9112                           status	equ	0xFD8
  9113                           
  9114 ;; *************** function _delay_us *****************
  9115 ;; Defined at:
  9116 ;;		line 11 in file "harwave/mydelay.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;  us              2   18[COMRAM] int 
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;		None
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  1    wreg      void 
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9130 ;;      Params:         2       0       0       0       0       0       0
  9131 ;;      Locals:         0       0       0       0       0       0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0
  9133 ;;      Totals:         2       0       0       0       0       0       0
  9134 ;;Total ram usage:        2 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    2
  9137 ;; This function calls:
  9138 ;;		_Delay10TCYx
  9139 ;; This function is called by:
  9140 ;;		_IIC_Init
  9141 ;;		_IIC_Start
  9142 ;;		_IIC_Stop
  9143 ;;		_IIC_Wait_Ack
  9144 ;;		_IIC_Send_Byte
  9145 ;;		_IIC_Ack
  9146 ;;		_IIC_NAck
  9147 ;;		_IIC_Read_Byte
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           	psect	text38
  9152  001930                     __ptext38:
  9153                           	opt stack 0
  9154  001930                     _delay_us:
  9155                           	opt stack 25
  9156  001930                     
  9157                           ;mydelay.c: 14: Delay10TCYx(1);
  9158  001930  0E01               	movlw	1
  9159  001932  ECAB  F00C         	call	_Delay10TCYx
  9160                           
  9161                           ;mydelay.c: 15: us--;
  9162  001936  0613               	decf	delay_us@us,f,c
  9163  001938  A0D8               	btfss	status,0,c
  9164  00193A  0614               	decf	delay_us@us+1,f,c
  9165                           
  9166                           ;mydelay.c: 16: }while(us);
  9167  00193C  5013               	movf	delay_us@us,w,c
  9168  00193E  1014               	iorwf	delay_us@us+1,w,c
  9169  001940  B4D8               	btfsc	status,2,c
  9170  001942  0012               	return	
  9171  001944  D7F5               	goto	l2522
  9172  001946                     __end_of_delay_us:
  9173                           	opt stack 0
  9174                           tblptru	equ	0xFF8
  9175                           tblptrh	equ	0xFF7
  9176                           tblptrl	equ	0xFF6
  9177                           tablat	equ	0xFF5
  9178                           prodh	equ	0xFF4
  9179                           prodl	equ	0xFF3
  9180                           intcon	equ	0xFF2
  9181                           indf0	equ	0xFEF
  9182                           postinc0	equ	0xFEE
  9183                           fsr0h	equ	0xFEA
  9184                           fsr0l	equ	0xFE9
  9185                           wreg	equ	0xFE8
  9186                           postdec1	equ	0xFE5
  9187                           plusw1	equ	0xFE3
  9188                           fsr1l	equ	0xFE1
  9189                           indf2	equ	0xFDF
  9190                           postinc2	equ	0xFDE
  9191                           postdec2	equ	0xFDD
  9192                           plusw2	equ	0xFDB
  9193                           fsr2h	equ	0xFDA
  9194                           fsr2l	equ	0xFD9
  9195                           status	equ	0xFD8
  9196                           
  9197 ;; *************** function _Delay10TCYx *****************
  9198 ;; Defined at:
  9199 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10tcyx.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;  unit            1    wreg     unsigned char 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  unit            1   17[COMRAM] unsigned char 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  1    wreg      void 
  9206 ;; Registers used:
  9207 ;;		wreg
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9213 ;;      Params:         0       0       0       0       0       0       0
  9214 ;;      Locals:         1       0       0       0       0       0       0
  9215 ;;      Temps:          0       0       0       0       0       0       0
  9216 ;;      Totals:         1       0       0       0       0       0       0
  9217 ;;Total ram usage:        1 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    1
  9220 ;; This function calls:
  9221 ;;		Nothing
  9222 ;; This function is called by:
  9223 ;;		_delay_us
  9224 ;;		_delay_ms1
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           	psect	text39
  9229  001956                     __ptext39:
  9230                           	opt stack 0
  9231  001956                     _Delay10TCYx:
  9232                           	opt stack 25
  9233                           
  9234                           ;incstack = 0
  9235                           ;Delay10TCYx@unit stored from wreg
  9236  001956  6E12               	movwf	Delay10TCYx@unit,c
  9237  001958  0E03               	movlw	3
  9238  00195A                     u4687:
  9239  00195A  2EE8               	decfsz	wreg,f,c
  9240  00195C  D7FE               	bra	u4687
  9241  00195E  F000               	nop	
  9242  001960  2E12               	decfsz	Delay10TCYx@unit,f,c
  9243  001962  D7FA               	goto	l2518
  9244  001964  0012               	return	
  9245  001966                     __end_of_Delay10TCYx:
  9246                           	opt stack 0
  9247                           tblptru	equ	0xFF8
  9248                           tblptrh	equ	0xFF7
  9249                           tblptrl	equ	0xFF6
  9250                           tablat	equ	0xFF5
  9251                           prodh	equ	0xFF4
  9252                           prodl	equ	0xFF3
  9253                           intcon	equ	0xFF2
  9254                           indf0	equ	0xFEF
  9255                           postinc0	equ	0xFEE
  9256                           fsr0h	equ	0xFEA
  9257                           fsr0l	equ	0xFE9
  9258                           wreg	equ	0xFE8
  9259                           postdec1	equ	0xFE5
  9260                           plusw1	equ	0xFE3
  9261                           fsr1l	equ	0xFE1
  9262                           indf2	equ	0xFDF
  9263                           postinc2	equ	0xFDE
  9264                           postdec2	equ	0xFDD
  9265                           plusw2	equ	0xFDB
  9266                           fsr2h	equ	0xFDA
  9267                           fsr2l	equ	0xFD9
  9268                           status	equ	0xFD8
  9269                           
  9270 ;; *************** function _time_adc *****************
  9271 ;; Defined at:
  9272 ;;		line 129 in file "main.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;		None
  9275 ;; Auto vars:     Size  Location     Type
  9276 ;;  ch              1   16[COMRAM] unsigned char 
  9277 ;; Return value:  Size  Location     Type
  9278 ;;                  1    wreg      void 
  9279 ;; Registers used:
  9280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9281 ;; Tracked objects:
  9282 ;;		On entry : 0/0
  9283 ;;		On exit  : 0/0
  9284 ;;		Unchanged: 0/0
  9285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9286 ;;      Params:         0       0       0       0       0       0       0
  9287 ;;      Locals:         1       0       0       0       0       0       0
  9288 ;;      Temps:         16       0       0       0       0       0       0
  9289 ;;      Totals:        17       0       0       0       0       0       0
  9290 ;;Total ram usage:       17 bytes
  9291 ;; Hardware stack levels used:    1
  9292 ;; This function calls:
  9293 ;;		Nothing
  9294 ;; This function is called by:
  9295 ;;		Interrupt level 2
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           	psect	intcode
  9300  000008                     __pintcode:
  9301                           	opt stack 0
  9302  000008                     _time_adc:
  9303                           	opt stack 22
  9304                           
  9305                           ;incstack = 0
  9306  000008  826B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9307  00000A  ED9B  F007         	call	int_func,f	;refresh shadow registers
  9308                           tblptru	equ	0xFF8
  9309                           tblptrh	equ	0xFF7
  9310                           tblptrl	equ	0xFF6
  9311                           tablat	equ	0xFF5
  9312                           prodh	equ	0xFF4
  9313                           prodl	equ	0xFF3
  9314                           intcon	equ	0xFF2
  9315                           indf0	equ	0xFEF
  9316                           postinc0	equ	0xFEE
  9317                           fsr0h	equ	0xFEA
  9318                           fsr0l	equ	0xFE9
  9319                           wreg	equ	0xFE8
  9320                           postdec1	equ	0xFE5
  9321                           plusw1	equ	0xFE3
  9322                           fsr1l	equ	0xFE1
  9323                           indf2	equ	0xFDF
  9324                           postinc2	equ	0xFDE
  9325                           postdec2	equ	0xFDD
  9326                           plusw2	equ	0xFDB
  9327                           fsr2h	equ	0xFDA
  9328                           fsr2l	equ	0xFD9
  9329                           status	equ	0xFD8
  9330                           
  9331                           	psect	intcode_body
  9332  000F36                     __pintcode_body:
  9333                           	opt stack 22
  9334  000F36                     int_func:
  9335                           	opt stack 22
  9336  000F36  0006               	pop		; remove dummy address from shadow register refresh
  9337  000F38  CFFA F003          	movff	pclath,??_time_adc+2
  9338  000F3C  CFFB F004          	movff	pclatu,??_time_adc+3
  9339  000F40  CFE9 F005          	movff	fsr0l,??_time_adc+4
  9340  000F44  CFEA F006          	movff	fsr0h,??_time_adc+5
  9341  000F48  CFE1 F007          	movff	fsr1l,??_time_adc+6
  9342  000F4C  CFE2 F008          	movff	fsr1h,??_time_adc+7
  9343  000F50  CFD9 F009          	movff	fsr2l,??_time_adc+8
  9344  000F54  CFDA F00A          	movff	fsr2h,??_time_adc+9
  9345  000F58  CFF3 F00B          	movff	prodl,??_time_adc+10
  9346  000F5C  CFF4 F00C          	movff	prodh,??_time_adc+11
  9347  000F60  CFF6 F00D          	movff	tblptrl,??_time_adc+12
  9348  000F64  CFF7 F00E          	movff	tblptrh,??_time_adc+13
  9349  000F68  CFF8 F00F          	movff	tblptru,??_time_adc+14
  9350  000F6C  CFF5 F010          	movff	tablat,??_time_adc+15
  9351                           
  9352                           ;main.c: 130: if(PIR1bits.RCIF ){
  9353  000F70  AA9E               	btfss	3998,5,c	;volatile
  9354  000F72  D038               	goto	i2l530
  9355                           
  9356                           ;main.c: 131: char ch;
  9357                           ;main.c: 132: ch = RCREG;
  9358  000F74  CFAE F011          	movff	4014,time_adc@ch	;volatile
  9359                           
  9360                           ;main.c: 133: if( strEsp8266_Fram_Record .InfBit .FramLength < ( 50 - 1 ) ) {
  9361  000F78  0102               	movlb	2	; () banked
  9362  000F7A  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9363  000F7C  0B7F               	andlw	127
  9364  000F7E  6E01               	movwf	??_time_adc& (0+255),c
  9365  000F80  0E31               	movlw	49
  9366  000F82  6001               	cpfslt	??_time_adc,c
  9367  000F84  D02E               	goto	i2l531
  9368                           
  9369                           ; BSR set to: 2
  9370                           ;main.c: 134: strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .Fram
      +                          Length ++ ] = ch;
  9371  000F86  0102               	movlb	2	; () banked
  9372  000F88  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9373  000F8A  0B7F               	andlw	127
  9374  000F8C  6E01               	movwf	??_time_adc& (0+255),c
  9375  000F8E  5001               	movf	??_time_adc,w,c
  9376  000F90  0D01               	mullw	1
  9377  000F92  0E9A               	movlw	low _strEsp8266_Fram_Record
  9378  000F94  24F3               	addwf	prodl,w,c
  9379  000F96  6ED9               	movwf	fsr2l,c
  9380  000F98  0E02               	movlw	high _strEsp8266_Fram_Record
  9381  000F9A  20F4               	addwfc	prodh,w,c
  9382  000F9C  6EDA               	movwf	fsr2h,c
  9383  000F9E  C011  FFDF         	movff	time_adc@ch,indf2
  9384                           
  9385                           ; BSR set to: 2
  9386  000FA2  0E01               	movlw	1
  9387  000FA4  6E01               	movwf	??_time_adc& (0+255),c
  9388  000FA6  0102               	movlb	2	; () banked
  9389  000FA8  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9390  000FAA  0B7F               	andlw	127
  9391  000FAC  6E02               	movwf	(??_time_adc+1)& (0+255),c
  9392  000FAE  5001               	movf	??_time_adc,w,c
  9393  000FB0  2602               	addwf	??_time_adc+1,f,c
  9394  000FB2  0102               	movlb	2	; () banked
  9395  000FB4  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9396  000FB6  1802               	xorwf	(??_time_adc+1)& (0+255),w,c
  9397  000FB8  0B80               	andlw	-128
  9398  000FBA  1802               	xorwf	(??_time_adc+1)& (0+255),w,c
  9399  000FBC  0102               	movlb	2	; () banked
  9400  000FBE  6FCC               	movwf	(_strEsp8266_Fram_Record+50)& (0+255),b
  9401                           
  9402                           ; BSR set to: 2
  9403                           ;main.c: 137: if(strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .F
      +                          ramLength] == '\0')
  9404  000FC0  0102               	movlb	2	; () banked
  9405  000FC2  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
  9406  000FC4  0B7F               	andlw	127
  9407  000FC6  6E01               	movwf	??_time_adc& (0+255),c
  9408  000FC8  5001               	movf	??_time_adc,w,c
  9409  000FCA  0D01               	mullw	1
  9410  000FCC  0E9A               	movlw	low _strEsp8266_Fram_Record
  9411  000FCE  24F3               	addwf	prodl,w,c
  9412  000FD0  6ED9               	movwf	fsr2l,c
  9413  000FD2  0E02               	movlw	high _strEsp8266_Fram_Record
  9414  000FD4  20F4               	addwfc	prodh,w,c
  9415  000FD6  6EDA               	movwf	fsr2h,c
  9416  000FD8  50DF               	movf	indf2,w,c
  9417  000FDA  A4D8               	btfss	status,2,c
  9418  000FDC  D002               	goto	i2l531
  9419                           
  9420                           ; BSR set to: 2
  9421                           ;main.c: 138: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 1;
  9422  000FDE  0102               	movlb	2	; () banked
  9423  000FE0  8FCC               	bsf	(_strEsp8266_Fram_Record+50)& (0+255),7,b
  9424  000FE2                     i2l531:
  9425                           
  9426                           ; BSR set to: 2
  9427                           ;main.c: 140: }
  9428                           ;main.c: 141: PIR1bits.RCIF=0;
  9429  000FE2  9A9E               	bcf	3998,5,c	;volatile
  9430  000FE4                     i2l530:
  9431                           
  9432                           ;main.c: 142: }
  9433                           ;main.c: 144: if(PIR1bits.TMR2IF){
  9434  000FE4  A29E               	btfss	3998,1,c	;volatile
  9435  000FE6  D005               	goto	i2l534
  9436                           
  9437                           ;main.c: 145: s++;
  9438  000FE8  4A5C               	infsnz	_s,f,c
  9439  000FEA  2A5D               	incf	_s+1,f,c
  9440                           
  9441                           ;main.c: 146: IP++;
  9442  000FEC  4A5A               	infsnz	_IP,f,c
  9443  000FEE  2A5B               	incf	_IP+1,f,c
  9444                           
  9445                           ;main.c: 147: PIR1bits.TMR2IF=0;
  9446  000FF0  929E               	bcf	3998,1,c	;volatile
  9447  000FF2                     i2l534:
  9448  000FF2  C010  FFF5         	movff	??_time_adc+15,tablat
  9449  000FF6  C00F  FFF8         	movff	??_time_adc+14,tblptru
  9450  000FFA  C00E  FFF7         	movff	??_time_adc+13,tblptrh
  9451  000FFE  C00D  FFF6         	movff	??_time_adc+12,tblptrl
  9452  001002  C00C  FFF4         	movff	??_time_adc+11,prodh
  9453  001006  C00B  FFF3         	movff	??_time_adc+10,prodl
  9454  00100A  C00A  FFDA         	movff	??_time_adc+9,fsr2h
  9455  00100E  C009  FFD9         	movff	??_time_adc+8,fsr2l
  9456  001012  C008  FFE2         	movff	??_time_adc+7,fsr1h
  9457  001016  C007  FFE1         	movff	??_time_adc+6,fsr1l
  9458  00101A  C006  FFEA         	movff	??_time_adc+5,fsr0h
  9459  00101E  C005  FFE9         	movff	??_time_adc+4,fsr0l
  9460  001022  C004  FFFB         	movff	??_time_adc+3,pclatu
  9461  001026  C003  FFFA         	movff	??_time_adc+2,pclath
  9462  00102A  926B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9463  00102C  0011               	retfie		f
  9464  00102E                     __end_of_time_adc:
  9465                           	opt stack 0
  9466                           pclatu	equ	0xFFB
  9467                           pclath	equ	0xFFA
  9468                           tblptru	equ	0xFF8
  9469                           tblptrh	equ	0xFF7
  9470                           tblptrl	equ	0xFF6
  9471                           tablat	equ	0xFF5
  9472                           prodh	equ	0xFF4
  9473                           prodl	equ	0xFF3
  9474                           intcon	equ	0xFF2
  9475                           indf0	equ	0xFEF
  9476                           postinc0	equ	0xFEE
  9477                           fsr0h	equ	0xFEA
  9478                           fsr0l	equ	0xFE9
  9479                           wreg	equ	0xFE8
  9480                           postdec1	equ	0xFE5
  9481                           plusw1	equ	0xFE3
  9482                           fsr1h	equ	0xFE2
  9483                           fsr1l	equ	0xFE1
  9484                           indf2	equ	0xFDF
  9485                           postinc2	equ	0xFDE
  9486                           postdec2	equ	0xFDD
  9487                           plusw2	equ	0xFDB
  9488                           fsr2h	equ	0xFDA
  9489                           fsr2l	equ	0xFD9
  9490                           status	equ	0xFD8
  9491                           pclatu	equ	0xFFB
  9492                           pclath	equ	0xFFA
  9493                           tblptru	equ	0xFF8
  9494                           tblptrh	equ	0xFF7
  9495                           tblptrl	equ	0xFF6
  9496                           tablat	equ	0xFF5
  9497                           prodh	equ	0xFF4
  9498                           prodl	equ	0xFF3
  9499                           intcon	equ	0xFF2
  9500                           indf0	equ	0xFEF
  9501                           postinc0	equ	0xFEE
  9502                           fsr0h	equ	0xFEA
  9503                           fsr0l	equ	0xFE9
  9504                           wreg	equ	0xFE8
  9505                           postdec1	equ	0xFE5
  9506                           plusw1	equ	0xFE3
  9507                           fsr1h	equ	0xFE2
  9508                           fsr1l	equ	0xFE1
  9509                           indf2	equ	0xFDF
  9510                           postinc2	equ	0xFDE
  9511                           postdec2	equ	0xFDD
  9512                           plusw2	equ	0xFDB
  9513                           fsr2h	equ	0xFDA
  9514                           fsr2l	equ	0xFD9
  9515                           status	equ	0xFD8
  9516                           
  9517                           	psect	rparam
  9518  0000                     pclatu	equ	0xFFB
  9519                           pclath	equ	0xFFA
  9520                           tblptru	equ	0xFF8
  9521                           tblptrh	equ	0xFF7
  9522                           tblptrl	equ	0xFF6
  9523                           tablat	equ	0xFF5
  9524                           prodh	equ	0xFF4
  9525                           prodl	equ	0xFF3
  9526                           intcon	equ	0xFF2
  9527                           indf0	equ	0xFEF
  9528                           postinc0	equ	0xFEE
  9529                           fsr0h	equ	0xFEA
  9530                           fsr0l	equ	0xFE9
  9531                           wreg	equ	0xFE8
  9532                           postdec1	equ	0xFE5
  9533                           plusw1	equ	0xFE3
  9534                           fsr1h	equ	0xFE2
  9535                           fsr1l	equ	0xFE1
  9536                           indf2	equ	0xFDF
  9537                           postinc2	equ	0xFDE
  9538                           postdec2	equ	0xFDD
  9539                           plusw2	equ	0xFDB
  9540                           fsr2h	equ	0xFDA
  9541                           fsr2l	equ	0xFD9
  9542                           status	equ	0xFD8
  9543                           
  9544                           	psect	temp
  9545  00006B                     btemp:
  9546                           	opt stack 0
  9547  00006B                     	ds	1
  9548  0000                     int$flags	set	btemp
  9549                           pclatu	equ	0xFFB
  9550                           pclath	equ	0xFFA
  9551                           tblptru	equ	0xFF8
  9552                           tblptrh	equ	0xFF7
  9553                           tblptrl	equ	0xFF6
  9554                           tablat	equ	0xFF5
  9555                           prodh	equ	0xFF4
  9556                           prodl	equ	0xFF3
  9557                           intcon	equ	0xFF2
  9558                           indf0	equ	0xFEF
  9559                           postinc0	equ	0xFEE
  9560                           fsr0h	equ	0xFEA
  9561                           fsr0l	equ	0xFE9
  9562                           wreg	equ	0xFE8
  9563                           postdec1	equ	0xFE5
  9564                           plusw1	equ	0xFE3
  9565                           fsr1h	equ	0xFE2
  9566                           fsr1l	equ	0xFE1
  9567                           indf2	equ	0xFDF
  9568                           postinc2	equ	0xFDE
  9569                           postdec2	equ	0xFDD
  9570                           plusw2	equ	0xFDB
  9571                           fsr2h	equ	0xFDA
  9572                           fsr2l	equ	0xFD9
  9573                           status	equ	0xFD8


Data Sizes:
    Strings     472
    Constant    2460
    Data        8
    BSS         345
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59     106
    BANK0           128     21      21
    BANK1           256    221     221
    BANK2           256      0     206
    BANK3           256      0     100
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    memset@p1	PTR void  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    memset@p	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    sprintf$1436	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_64(CODE[17]), STR_63(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 100
		 -> STR_62(CODE[7]), sprintf@c(BANK0[1]), STR_58(CODE[5]), STR_57(CODE[12]), 
		 -> STR_52(CODE[10]), STR_51(CODE[4]), STR_40(CODE[2]), STR_39(CODE[10]), 
		 -> STR_38(CODE[4]), STR_23(CODE[4]), STR_21(CODE[4]), ESP8266_Link_Server@cStr(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_25(CODE[17]), STR_24(CODE[20]), STR_22(CODE[13]), STR_20(CODE[13]), 
		 -> STR_18(CODE[26]), STR_15(CODE[21]), STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 120
		 -> ESP8266_Link_Server@cCmd(BANK1[120]), ESP8266_Link_Server@cStr(BANK1[100]), ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK1[120]), 
		 -> ESP8266_SendString@cStr(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    main@temp	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    sp__memset	PTR void  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    sp__ESP8266_ReceiveString	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_ReceiveString@pRecStr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_Link_Server@ComNum	PTR unsigned char  size(2) Largest target is 5
		 -> STR_58(CODE[5]), 

    ESP8266_Link_Server@ip	PTR unsigned char  size(2) Largest target is 12
		 -> STR_57(CODE[12]), 

    ESP8266_JoinAP@pPassWord	PTR unsigned char  size(2) Largest target is 10
		 -> STR_52(CODE[10]), 

    ESP8266_JoinAP@pSSID	PTR unsigned char  size(2) Largest target is 4
		 -> STR_51(CODE[4]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_Cmd@reply2	PTR unsigned char  size(2) Largest target is 10
		 -> STR_37(CODE[3]), STR_34(CODE[3]), STR_27(CODE[7]), STR_17(CODE[10]), 
		 -> STR_8(CODE[6]), NULL(NULL[0]), 

    ESP8266_Cmd@reply1	PTR unsigned char  size(2) Largest target is 10
		 -> STR_56(CODE[3]), STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_36(CODE[10]), 
		 -> STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), STR_26(CODE[8]), 
		 -> STR_19(CODE[3]), STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), 
		 -> STR_10(CODE[3]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), 

    ESP8266_Cmd@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_55(CODE[14]), STR_53(CODE[15]), STR_49(CODE[11]), STR_47(CODE[22]), 
		 -> STR_45(CODE[14]), STR_43(CODE[15]), STR_41(CODE[14]), STR_35(CODE[13]), 
		 -> STR_32(CODE[13]), STR_30(CODE[25]), STR_28(CODE[23]), ESP8266_Link_Server@cCmd(BANK1[120]), 
		 -> ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK1[120]), STR_13(CODE[14]), STR_11(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@cStr(COMRAM[20]), 

    ESP8266_Uart@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_55(CODE[14]), STR_53(CODE[15]), STR_49(CODE[11]), STR_47(CODE[22]), 
		 -> STR_45(CODE[14]), STR_43(CODE[15]), STR_41(CODE[14]), STR_35(CODE[13]), 
		 -> STR_32(CODE[13]), STR_30(CODE[25]), STR_28(CODE[23]), ESP8266_Link_Server@cCmd(BANK1[120]), 
		 -> ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK1[120]), STR_13(CODE[14]), STR_11(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@cStr(COMRAM[20]), 

    ADtoPWM@AD	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 


Critical Paths under _main in COMRAM

    _main->_ADtoPWM
    _PCA9685_init->_PCA9685_writeOneByte
    _IIC_Init->_delay_us
    _ESP8266_client->_ESP8266_Link_Server
    _STA_MODE->_ESP8266_Net_Mode_Choose
    _ESP8266_Net_Mode_Choose->_ESP8266_Cmd
    _ESP8266_Rst->_ESP8266_Cmd
    _ESP8266_Link_Server->_ESP8266_Cmd
    _ESP8266_JoinAP->_ESP8266_Cmd
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ESP8266_AT_Test->_ESP8266_Cmd
    _ESP8266_Cmd->_strstr
    _ESP8266_ReceiveString->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _ADtoPWM->_PWMt0PCA
    _PWMt0PCA->_transmit_finger
    _transmit_finger->_PCA9685_writeOneByte
    _PCA9685_writeOneByte->_IIC_Send_Byte
    _delay_ms->_Delay10KTCYx
    _IIC_Wait_Ack->_delay_us
    _IIC_Stop->_delay_us
    _IIC_Start->_delay_us
    _IIC_Send_Byte->_delay_us
    _delay_us->_Delay10TCYx

Critical Paths under _time_adc in COMRAM

    None.

Critical Paths under _main in BANK0

    _ESP8266_Link_Server->_sprintf
    _ESP8266_JoinAP->_sprintf

Critical Paths under _time_adc in BANK0

    None.

Critical Paths under _main in BANK1

    _ESP8266_client->_ESP8266_Link_Server

Critical Paths under _time_adc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _time_adc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _time_adc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _time_adc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _time_adc in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0  108318
                                             57 COMRAM     2     2      0
                            _ADtoPWM
              _ESP8266_ReceiveString
                     _ESP8266_client
                       _GPIO_initial
                       _PCA9685_init
                       _initial_UART
                             _memset
                 _oclillator_initial
                    _timer_2_initial
            _timer_intrrupt_initinal
 ---------------------------------------------------------------------------------
 (1) _timer_intrrupt_initinal                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_2_initial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _oclillator_initial                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     288
                                             17 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _initial_UART                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PCA9685_init                                         0     0      0    8327
                           _IIC_Init
               _PCA9685_writeOneByte
 ---------------------------------------------------------------------------------
 (2) _IIC_Init                                             0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _GPIO_initial                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP8266_client                                       0     0      0   85987
                    _ESP8266_AT_Test
                        _ESP8266_Cmd
                     _ESP8266_JoinAP
                _ESP8266_Link_Server
                        _ESP8266_Rst
                           _STA_MODE
 ---------------------------------------------------------------------------------
 (2) _STA_MODE                                             0     0      0   20127
                        _ESP8266_Cmd
            _ESP8266_Net_Mode_Choose
 ---------------------------------------------------------------------------------
 (3) _ESP8266_Net_Mode_Choose                              1     1      0   10079
                                             45 COMRAM     1     1      0
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Rst                                          0     0      0   10048
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Link_Server                                227   221      6   18110
                                             45 COMRAM     6     0      6
                                              0 BANK1    221   221      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ESP8266_JoinAP                                     124   120      4   17606
                                             45 COMRAM     4     0      4
                                              0 BANK1    120   120      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             39    29     10    7166
                                             29 COMRAM    14     4     10
                                              0 BANK0     21    21      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     694
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             24 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     703
                                             17 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ESP8266_AT_Test                                      0     0      0   10048
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (4) _ESP8266_Cmd                                          9     1      8   10048
                                             36 COMRAM     9     1      8
                       _ESP8266_Uart
                           _delay_ms
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _ESP8266_Uart                                         6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ESP8266_ReceiveString                                4     2      2    2274
                                             36 COMRAM     4     2      2
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _strstr                                               4     0      4    2237
                                             32 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     3      6     423
                                             23 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (6) _strlen                                               6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _strchr                                               5     1      4     278
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _ADtoPWM                                             26    24      2   11408
                                             35 COMRAM    22    20      2
                           _PWMt0PCA
 ---------------------------------------------------------------------------------
 (2) _PWMt0PCA                                             5     0      5   10563
                                             30 COMRAM     5     0      5
                    _transmit_finger
 ---------------------------------------------------------------------------------
 (3) _transmit_finger                                      5     2      3    8988
                                             25 COMRAM     5     2      3
               _PCA9685_writeOneByte
 ---------------------------------------------------------------------------------
 (2) _PCA9685_writeOneByte                                 2     1      1    7194
                                             23 COMRAM     2     1      1
                      _IIC_Send_Byte
                          _IIC_Start
                           _IIC_Stop
                       _IIC_Wait_Ack
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     758
                                             19 COMRAM     2     0      2
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (4) _Delay10KTCYx                                         2     2      0      31
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _IIC_Wait_Ack                                         1     1      0    2290
                                             20 COMRAM     1     1      0
                           _IIC_Stop
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _IIC_Stop                                             0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _IIC_Start                                            0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _IIC_Send_Byte                                        3     3      0    1202
                                             20 COMRAM     3     3      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     0      2    1133
                                             18 COMRAM     2     0      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (5) _Delay10TCYx                                          1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _time_adc                                            17    17      0      23
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADtoPWM
     _PWMt0PCA
       _transmit_finger
         _PCA9685_writeOneByte
           _IIC_Send_Byte
             _delay_us
               _Delay10TCYx
           _IIC_Start
             _delay_us
               _Delay10TCYx
           _IIC_Stop
             _delay_us
               _Delay10TCYx
           _IIC_Wait_Ack
             _IIC_Stop
               _delay_us
                 _Delay10TCYx
             _delay_us
               _Delay10TCYx
           _delay_ms
             _Delay10KTCYx
   _ESP8266_ReceiveString
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)
   _ESP8266_client
     _ESP8266_AT_Test
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _ESP8266_Cmd
       _ESP8266_Uart
       _delay_ms
         _Delay10KTCYx
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _ESP8266_JoinAP
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Link_Server
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Rst
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _STA_MODE
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _ESP8266_Net_Mode_Choose
         _ESP8266_Cmd
           _ESP8266_Uart
           _delay_ms
             _Delay10KTCYx
           _strstr
             _strchr
             _strlen
             _strncmp
               _strlen (ARG)
   _GPIO_initial
   _PCA9685_init
     _IIC_Init
       _delay_us
         _Delay10TCYx
     _PCA9685_writeOneByte
       _IIC_Send_Byte
         _delay_us
           _Delay10TCYx
       _IIC_Start
         _delay_us
           _Delay10TCYx
       _IIC_Stop
         _delay_us
           _Delay10TCYx
       _IIC_Wait_Ack
         _IIC_Stop
           _delay_us
             _Delay10TCYx
         _delay_us
           _Delay10TCYx
       _delay_ms
         _Delay10KTCYx
   _initial_UART
   _memset
   _oclillator_initial
   _timer_2_initial
   _timer_intrrupt_initinal

 _time_adc (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      64      11       39.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      CE       9       80.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     DD      DD       7       86.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80     15      15       5       16.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      6A       1       84.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     28E      15        0.0%
DATA                 0      0     28E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 06 21:00:38 2019

             _ESP8266_Link_Server 0E3A                                 _s 005C  
                              _IP 005A               ___wmul@multiplicand 0014  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                               l342 13E4  
                             l274 169C                               l346 1448  
                             l356 10BA                               l466 1240  
                             l651 06F8                               l591 01EA  
                             l592 01EE                               l667 07F0  
                    __CFG_CPB$OFF 000000                               _PR2 000FCB  
                    __CFG_CPD$OFF 000000                 ??_timer_2_initial 0012  
                             prod 000FF3                               wreg 000FE8  
            ?_ESP8266_Link_Server 002E                     ?_IIC_Wait_Ack 0001  
       ??_ESP8266_Net_Mode_Choose 002E                      __CFG_LVP$OFF 000000  
                    __CFG_WDT$OFF 000000                   __end_of_ADtoPWM 0D16  
                            l1123 1596                              l1133 1622  
                            l4010 055C                              l4102 07EA  
                            l4030 05F2                              l4014 0576  
                            l4200 0D7C                              l4032 05FC  
                            l4024 05B8                              l4008 053E  
                            l2522 1930                              l2602 1460  
                            l4210 0DCE                              l4130 0896  
                            l4114 0838                              l4050 06BE  
                            l4018 058C                              l3402 1792  
                            l4212 0DE4                              l4204 0D9A  
                            l4220 0E18                              l4132 08D8  
                            l4124 087E                              l4108 0804  
                            l4052 06C8                              l4044 0680  
                            l2518 1958                              l2630 168E  
                            l4206 0DB0                              l4150 09AC  
                            l4142 094C                              l4046 068A  
                            l4038 0638                              l4216 0E02  
                            l4232 17A4                              l4152 09B0  
                            l4064 070C                              l4080 076A  
                            l4138 091A                              l4146 0982  
                            l4074 0752                              l4058 06F2  
                            l4162 09FA                              l4250 0EAE  
                            l4170 124E                              l4156 09D6  
                            l4148 09A0                              l4092 07A2  
                            l4164 0A16                              l4252 0EBE  
                            l4244 0E52                              l4340 1126  
                            l4270 0A76                              l4254 0ECE  
                            l4246 0E80                              l4174 1274  
                            l4342 1140                              l4192 0D32  
                            l3624 1636                              l4352 11D2  
                            l4088 0790                              l4256 0EF4  
                            l4184 12C0                              l4264 174C  
                            l4344 116A                              l3618 191C  
                            l4194 0D48                              l4290 0C10  
                            l4282 0B6C                              l4274 0AC8  
                            l3650 16A4                              l3626 163A  
                            l3642 13BA                              l3634 135C  
                            l4354 1200                              l4098 07C6  
                            l4258 0F10                              l4178 129A  
                            l4346 1194                              l4188 0D18  
                            l3644 13C2                              l3708 1066  
                            l3900 02CA                              l3820 0062  
                            l4508 14E2                              l2598 1458  
                            l3662 1904                              l4198 0D66  
                            l4294 0C62                              l4286 0BBE  
                            l4278 0B1A                              l3638 1388  
                            l3670 13E0                              l3734 10DE  
                            l3726 10BE                              l3910 02EC  
                            l3902 02D4                              l3830 009E  
                            l3822 0068                              l3814 0040  
                            l3398 1782                              l3656 16BE  
                            l3912 0304                              l3816 0056  
                            l3808 0022                              l4298 0CB4  
                            l3682 1312                              l3762 1564  
                            l3746 18E4                              l3922 0356  
                            l3906 02DC                              l3850 014E  
                            l3834 00BC                              l3842 011E  
                            l3818 005C                              l3826 0070  
                            l3676 12D8                              l3684 133A  
                            l3764 156C                              l3932 0396  
                            l3940 03B6                              l3774 158C  
                            l3766 1570                              l3790 1618  
                            l3782 15F8                              l3926 0366  
                            l3918 0338                              l3942 040A  
                            l3862 0198                              l3870 01D8  
                            l3688 1350                              l3784 1600  
                            l3936 03AE                              l3928 037E  
                            l3872 01E0                              l3864 01A0  
                            l3786 1604                              l3954 0454  
                            l3890 0272                              l3874 01E6  
                            l3980 04CC                              l3964 048A  
                            l3884 0226                              l3876 01F4  
                            l3868 01C2                              l3966 0490  
                            l3958 046E                              l3886 0232  
                            l3992 0502                              l3896 02A4  
                            l3888 0238                              l3994 0508  
                            l3978 04C6                              STR_1 7EB0  
                            STR_2 7FF6                              STR_3 7FBC  
                            STR_4 7FE0                              STR_5 7FC1  
                            STR_6 7FB3                              STR_7 7FC1  
                            STR_8 7FDA                              STR_9 7F22  
                            _LATD 000F8C                              u4101 085C  
                            u3310 1414                              u3320 1442  
                            u1725 1468                              u3317 140A  
                            u3327 1438                              u4241 0E48  
                            u3620 026C                              u3627 0262  
                            u3690 032C                              u3950 0674  
                            u3697 0322                              u4677 1922  
                            u4687 195A                              _TRMT 007D61  
                            _TXIF 007CF4                              _main 14A6  
            _strPc1_1_Fram_Record 0267                              _test 003C  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 006B         ??_timer_intrrupt_initinal 0012  
              __size_of_IIC_Start 0024                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                   __CFG_IESO$OFF 000000                    ?_IIC_Send_Byte 0001  
                    _sprintf$1430 0083                      _sprintf$1436 0085  
                    _sprintf$1429 0081                     __CFG_MCLRE$ON 000000  
                    ___param_bank 000000                       _Delay10TCYx 1956  
                __end_of_IIC_Init 18CE                  __end_of_IIC_Stop 1888  
            __end_of_PCA9685_init 1864                             ?_main 0001  
                           STR_10 7FC1                             STR_11 7F3E  
                           STR_12 7FC1                             STR_20 7F67  
                           STR_21 7FEE                             STR_13 7F4C  
                           STR_14 7FC1                             STR_22 7F67  
                           STR_30 7E41                             STR_23 7FF2  
                           STR_15 7E87                             STR_16 7FC1  
                           STR_40 7FFD                             STR_32 7F5A  
                           STR_24 7E9C                             STR_17 7FA9  
                           STR_33 7F9F                             STR_41 7F14  
                           STR_25 7EE5                             STR_50 7FC1  
                           STR_26 7FC4                             STR_18 7E27  
                           STR_35 7F5A                             STR_51 7FEA  
                           STR_27 7FD3                             STR_43 7EF6  
                           STR_52 7F8B                             STR_60 7FF9  
                           STR_36 7F95                             STR_28 7E5A  
                           STR_61 7FF9                             STR_37 7FC1  
                           STR_45 7F30                             STR_53 7F05  
                           STR_54 7FC1                             STR_38 7FEA  
                           STR_62 7FCC                             STR_55 7F14  
                           STR_39 7F8B                             STR_63 7EC3  
                           STR_47 7E71                             STR_56 7FC1  
                           STR_64 7ED4                             STR_49 7F80  
                           STR_57 7F74                             STR_58 7FE5  
                           STR_59 7FFB                   __end_of___lwdiv 15A0  
                 __end_of___lwmod 162C                             i2l530 0FE4  
                           i2l531 0FE2                             i2l534 0FF2  
                           _RCREG 000FAE                             _SPBRG 000FAF  
                           _PORTD 000F83                             _TRISD 000F95  
            __end_of_ESP8266_Uart 144E                             _TXREG 000FAD  
           __size_of_Delay10KTCYx 0016                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000             ??_ESP8266_Link_Server 0034  
                  __CFG_EBTR2$OFF 000000                    ??_IIC_Wait_Ack 0015  
                  __CFG_EBTR3$OFF 000000                     ?_GPIO_initial 0001  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                 __end_of_dpowers 7E1F                             _count 0062  
                __end_of_STA_MODE 1778                   __end_of_isdigit 18EC  
                           _write 0061                  __end_of_PWMt0PCA 0E3A  
                           pclath 000FFA                             tablat 000FF5  
         __size_of_ESP8266_JoinAP 004A                             plusw1 000FE3  
                           plusw2 000FDB                             status 000FD8  
                 __end_of_sprintf 0A24        __end_of_oclillator_initial 1984  
                 __end_of_strncmp 13DC           __size_of_ESP8266_client 00C4  
               ??_transmit_finger 001D                   __initialization 14FC  
                    __end_of_main 14FC              __size_of_ESP8266_Cmd 00C8  
            __size_of_ESP8266_Rst 0026                      _Delay10KTCYx 191A  
                  __CFG_OSC$HSPLL 000000             _ESP8266_ReceiveString 11BA  
                  ESP8266_Cmd@cmd 0025                            ??_main 003A  
 __end_of_timer_intrrupt_initinal 1956                     __activetblptr 000002  
               __end_of_IIC_Start 18AC                         ??_ADtoPWM 0026  
                  ??_GPIO_initial 0012             ESP8266_Link_Server@id 0032  
           ESP8266_Link_Server@ip 002E                  IIC_Send_Byte@txd 0016  
                          _SPBRGH 000FB0                     ?_initial_UART 0001  
                 ??_IIC_Send_Byte 0015                  __end_of_delay_ms 191A  
                __end_of_delay_us 1946                    __CFG_XINST$OFF 000000  
                _ESP8266_Cmd$1209 002D               ESP8266_JoinAP@pSSID 002E  
        __size_of_ESP8266_AT_Test 002C                            ___wmul 17F6  
                  __CFG_STVREN$ON 000000                         ??___lwdiv 0016  
                       ??___lwmod 001D                 ESP8266_Cmd@reply1 0027  
               ESP8266_Cmd@reply2 0029                            _memset 1778  
                          clear_0 1522                            clear_1 152E  
                          clear_2 153A                            _strchr 16A4  
                          _strlen 162C                            _strstr 12D6  
           IIC_Wait_Ack@ucErrTime 0015                      __pdataCOMRAM 0063  
                       ??_isdigit 0012                  __end_of_time_adc 102E  
                    __mediumconst 748A                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_sprintf 0028         ESP8266_Link_Server@ComNum 0030  
                       ??_strncmp 001E                        __accesstop 0080  
         __end_of__initialization 1540                         ?_IIC_Init 0001  
                  ??_initial_UART 0012                   __CFG_PBADEN$OFF 000000  
                       ?_IIC_Stop 0001                     ___rparam_used 000001  
         transmit_finger@HL_Value 001A                    __pcstackCOMRAM 0001  
                 _timer_2_initial 18EC              __end_of_IIC_Wait_Ack 16A4  
           __size_of_PCA9685_init 0024           ESP8266_JoinAP@pPassWord 0030  
          ?_ESP8266_ReceiveString 0025                         ?_STA_MODE 0001  
           __size_of_ESP8266_Uart 0072                         ?_PWMt0PCA 001F  
                       ADtoPWM@AD 0024                         ADtoPWM@u1 002A  
                       ADtoPWM@u2 002C                         ADtoPWM@u3 002E  
                       ADtoPWM@u4 0030                         ADtoPWM@w1 0032  
                       ADtoPWM@w2 0034                         ADtoPWM@w3 0036  
                       ADtoPWM@w4 0038     __size_of_PCA9685_writeOneByte 0036  
                    sprintf@width 0090                    _ESP8266_JoinAP 15A0  
                      __pbssBANK2 0200                        __pbssBANK3 0300  
        ESP8266_Link_Server@F4048 0300                        ??_IIC_Init 0015  
                      ??_IIC_Stop 0015                      _PCA9685_init 1840  
                  _ESP8266_client 10F6                      _ESP8266_Uart 13DC  
              __CFG_CCP2MX$PORTBE 000000              __end_of_GPIO_initial 1974  
        ESP8266_Link_Server@enumE 01DC                      ?_Delay10TCYx 0001  
                         ?___wmul 0012             transmit_finger@finger 001C  
                 ESP8266_Uart@cmd 0012                        ??_STA_MODE 002F  
                         ?_memset 0012                        ??_PWMt0PCA 0024  
               ??_ESP8266_AT_Test 002E                           ?_strchr 0012  
                         ?_strlen 0012                           ?_strstr 0021  
                         _ADtoPWM 0A24                         ?_delay_ms 0014  
                       ?_delay_us 0013            __end_of_ESP8266_JoinAP 15EA  
               ESP8266_Uart@index 0016                   _transmit_finger 16DA  
    ESP8266_ReceiveString@pRecStr 0027            __end_of_ESP8266_client 11BA  
         __end_of_timer_2_initial 1904                           __Hparam 0000  
                         __Lparam 0000                         ?_time_adc 0001  
                 __size_of___wmul 0026                           ___lwdiv 154E  
                         ___lwmod 15EA                _oclillator_initial 197C  
                         __pcinit 14FC                   __size_of_memset 002C  
                 Delay10TCYx@unit 0012                           __ramtop 0600  
     __end_of_ESP8266_Link_Server 0F36                           __ptext0 14A6  
                         __ptext1 1946                           __ptext2 18EC  
                         __ptext3 197C                           __ptext4 1778  
                         __ptext5 181C                           __ptext6 1840  
                         __ptext7 18AC                           __ptext8 1966  
                         __ptext9 10F6                         _T0CONbits 000FD5  
            __end_of_initial_UART 1840                   __size_of_strchr 0036  
                 __size_of_strlen 003E                 __end_of_hexpowers 7E27  
                 __size_of_strstr 0084                           _dpowers 7E15  
        ?_ESP8266_Net_Mode_Choose 0001                         _T2CONbits 000FCA  
                         _isdigit 18CE               ?_oclillator_initial 0001  
                      ??_delay_ms 0016                        ??_delay_us 0015  
                 ?_ESP8266_JoinAP 002E                         _IIC_Start 1888  
                         _sprintf 0012                           _strncmp 135A  
                  __pintcode_body 0F36                        delay_ms@ms 0014  
            end_of_initialization 1540                 __end_of_octpowers 7E15  
        ?_timer_intrrupt_initinal 0001                        delay_us@us 0013  
                 ?_ESP8266_client 0001                           memset@c 0014  
                         memset@n 0016                           memset@p 0018  
                   __Lmediumconst 748A                           int_func 0F36  
           __size_of_IIC_Wait_Ack 003A                     ??_ESP8266_Cmd 002D  
            ??_oclillator_initial 0012                     ??_ESP8266_Rst 002E  
                      ??_time_adc 0001                         _RCSTAbits 000FAB  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                         strlen@s 0012                         _PORTBbits 000F81  
                       _PORTDbits 000F83                        _test_index 005E  
         __end_of_transmit_finger 1710                         _TRISAbits 000F92  
                       _TRISBbits 000F93                      _IIC_Wait_Ack 166A  
                      ?_IIC_Start 0001             __size_of_GPIO_initial 000E  
                ?_timer_2_initial 0001                         _TXSTAbits 000FAC  
               __size_of_IIC_Init 0022                 __size_of_IIC_Stop 0024  
           __end_of_IIC_Send_Byte 14A6           ??_ESP8266_ReceiveString 0027  
                  IIC_Send_Byte@t 0017               __end_of_ESP8266_Cmd 10F6  
 __end_of_ESP8266_Net_Mode_Choose 12D6                    __end_of___wmul 181C  
             __end_of_ESP8266_Rst 17F6                       _BAUDCONbits 000FB8  
            __size_of_Delay10TCYx 0010                     __pidataCOMRAM 1974  
                  __end_of_memset 17A4                 __size_of_STA_MODE 0032  
                  __end_of_strchr 16DA                 __size_of_PWMt0PCA 0124  
                  __end_of_strlen 166A                    __end_of_strstr 135A  
             start_initialization 14FC                      _GPIO_initial 1966  
                     PWMt0PCA@low 0021                   _ESP8266_AT_Test 17A4  
              ESP8266_JoinAP@cCmd 0100      __end_of_PCA9685_writeOneByte 1746  
                        ??___wmul 0016             __size_of_initial_UART 0024  
                __CFG_LPT1OSC$OFF 000000                          ??_memset 0018  
             __end_of_finger_up_0 75C1               __end_of_finger_up_1 7AF1  
             __end_of_finger_up_2 7915               __end_of_finger_up_3 7813  
             __end_of_finger_up_4 76EF                          ??_strchr 0016  
                        ??_strlen 0014                          ??_strstr 0025  
     ESP8266_Net_Mode_Choose@MODE 002E                          ?_ADtoPWM 0024  
                ?_transmit_finger 001A                       __pbssCOMRAM 003C  
                   __pcstackBANK0 0080                     __pcstackBANK1 0100  
                     ??_IIC_Start 0015                      _isdigit$1666 0013  
                   _str1_1esp8266 0234                 __size_of_delay_ms 0016  
               __size_of_delay_us 0016                       sprintf@flag 0093  
                     sprintf@prec 008F                      _initial_UART 181C  
            transmit_finger@Hbyte 001D                       _ESP8266_Cmd 102E  
            transmit_finger@Lbyte 001E           ESP8266_Link_Server@cCmd 0100  
                ___lwdiv@dividend 0012                       _ESP8266_Rst 17D0  
         ESP8266_Link_Server@cStr 0178                         __pintcode 0008  
                   __pmediumconst 748A                     ?_Delay10KTCYx 0001  
                        ?___lwdiv 0012                          ?___lwmod 0019  
               __size_of_time_adc 1026                    PWMt0PCA@finger 0023  
                ??_ESP8266_JoinAP 0032                          ?_isdigit 0001  
                       _hexpowers 7E1F                  ??_ESP8266_client 0034  
                ___lwdiv@quotient 0017                          ?_sprintf 001E  
                        ?_strncmp 0018           __end_of_ESP8266_AT_Test 17D0  
                        _IIC_Init 18AC                    ___wmul@product 0016  
                        _IIC_Stop 1864  __size_of_ESP8266_Net_Mode_Choose 008C  
                        _LATAbits 000F89                         _octpowers 7E09  
                        _PIE1bits 000F9D                        time_adc@ch 0011  
                        _PIR1bits 000F9E                       _finger_up_0 748B  
                     _finger_up_1 7A05                       _finger_up_2 7813  
                     _finger_up_3 76EF                       _finger_up_4 75C1  
                        _RCONbits 000FD0                  __CFG_WDTPS$32768 000000  
                  ??_Delay10KTCYx 0012  __size_of_timer_intrrupt_initinal 0010  
                        _STA_MODE 1746                          _PWMt0PCA 0D16  
               ___wmul@multiplier 0012                  Delay10KTCYx@unit 0013  
                __size_of_ADtoPWM 02F2      __size_of_ESP8266_Link_Server 00FC  
            _PCA9685_writeOneByte 1710                         _work_flag 0060  
                       copy_data0 1510                        PWMt0PCA@up 001F  
                        __Hrparam 0000       __size_of_oclillator_initial 0008  
                        __Lrparam 0000          PCA9685_writeOneByte@addr 0019  
              __CFG_BOREN$SBORDIS 000000          PCA9685_writeOneByte@data 0018  
  __size_of_ESP8266_ReceiveString 0090     __end_of_ESP8266_ReceiveString 124A  
                __size_of___lwdiv 0052                  __size_of___lwmod 0042  
             LCD_CreateFont@F3803 0063                        sprintf@idx 0080  
                      sprintf@len 0089                        sprintf@val 008D  
                __size_of_isdigit 001E                          _delay_ms 1904  
                        _delay_us 1930                   ___lwdiv@divisor 0014  
           ?_PCA9685_writeOneByte 0018                   ___lwdiv@counter 0016  
                        __ptext10 1746                          __ptext11 124A  
                        __ptext20 17A4                          __ptext12 17D0  
                        __ptext21 102E                          __ptext13 0E3A  
                        __ptext30 16DA                          __ptext22 13DC  
                        __ptext14 15A0                          __ptext31 1710  
                        __ptext23 11BA                          __ptext15 0012  
                        __ptext32 1904                          __ptext24 12D6  
                        __ptext16 18CE                          __ptext33 191A  
                        __ptext25 135A                          __ptext17 17F6  
                        __ptext34 166A                          __ptext26 162C  
                        __ptext18 15EA                          __ptext35 1864  
                        __ptext27 16A4                          __ptext19 154E  
                        __ptext36 1888                          __ptext28 0A24  
                        __ptext37 144E                          __ptext29 0D16  
                        __ptext38 1930                          __ptext39 1956  
                __size_of_sprintf 0A12                  __size_of_strncmp 0082  
                ?_ESP8266_AT_Test 0001                     ?_PCA9685_init 0001  
                   __size_of_main 0056               ESP8266_Cmd@waittime 002B  
                      strncmp@len 001C                     ?_ESP8266_Uart 0012  
                        _time_adc 0008                     ??_Delay10TCYx 0012  
                        int$flags 006B          __size_of_timer_2_initial 0018  
               _strPc_Fram_Record 0200                          main@temp 003A  
                  _finger_under_0 7BD3                    _finger_under_1 7CAB  
                  _finger_under_2 7AF1                    _finger_under_3 7D6B  
                  _finger_under_4 7915                        _INTCONbits 000FF2  
          __size_of_IIC_Send_Byte 0058                          isdigit@c 0014  
                        memset@p1 0012              __end_of_Delay10KTCYx 1930  
                        intlevel2 0000                         sprintf@ap 008B  
                       sprintf@cp 0087                         sprintf@sp 001E  
         _ESP8266_Net_Mode_Choose 124A                    ??_PCA9685_init 001A  
                       strchr@chr 0014                  ___lwmod@dividend 0019  
                       strchr@ptr 0012                    ??_ESP8266_Uart 0014  
                       strncmp@s1 0018                         strncmp@s2 001A  
                    ?_ESP8266_Cmd 0025                        _OSCCONbits 000FD3  
                    ?_ESP8266_Rst 0001           _timer_intrrupt_initinal 1946  
          __end_of_finger_under_0 7CAB            __end_of_finger_under_1 7D6B  
          __end_of_finger_under_2 7BD3            __end_of_finger_under_3 7E09  
          __end_of_finger_under_4 7A05               __end_of_Delay10TCYx 1966  
                        sprintf@c 0092                          sprintf@f 0020  
                 ___lwmod@divisor 001B                          strlen@cp 0016  
                 ___lwmod@counter 001D            ??_PCA9685_writeOneByte 0019  
          _strEsp8266_Fram_Record 029A                          strstr@s1 0021  
                        strstr@s2 0023          __size_of_transmit_finger 0036  
                   _IIC_Send_Byte 144E  
