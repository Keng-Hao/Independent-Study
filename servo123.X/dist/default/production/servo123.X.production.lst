

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Jan 28 22:26:33 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           ; Version 1.41
    72                           ; Generated 25/01/2017 GMT
    73                           ; 
    74                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4520 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataCOMRAM
   107  0019AC                     __pidataCOMRAM:
   108                           	opt stack 0
   109                           
   110                           ;initializer for LCD_CreateFont@F3803
   111  0019AC  1F                 	db	31
   112  0019AD  11                 	db	17
   113  0019AE  11                 	db	17
   114  0019AF  1F                 	db	31
   115  0019B0  11                 	db	17
   116  0019B1  11                 	db	17
   117  0019B2  1F                 	db	31
   118  0019B3  00                 	db	0
   119                           
   120                           	psect	mediumconst
   121  007484                     __pmediumconst:
   122                           	opt stack 0
   123  007484  00                 	db	0
   124  007485                     _finger_up_0:
   125                           	opt stack 0
   126  007485  02E1               	dw	737
   127  007487  00                 	db	0
   128  007488  00                 	db	0
   129  007489  00                 	db	0
   130  00748A  00                 	db	0
   131  00748B  00                 	db	0
   132  00748C  00                 	db	0
   133  00748D  00                 	db	0
   134  00748E  00                 	db	0
   135  00748F  00                 	db	0
   136  007490  00                 	db	0
   137  007491  00                 	db	0
   138  007492  00                 	db	0
   139  007493  00                 	db	0
   140  007494  00                 	db	0
   141  007495  00                 	db	0
   142  007496  00                 	db	0
   143  007497  00                 	db	0
   144  007498  00                 	db	0
   145  007499  00                 	db	0
   146  00749A  00                 	db	0
   147  00749B  00                 	db	0
   148  00749C  00                 	db	0
   149  00749D  00                 	db	0
   150  00749E  00                 	db	0
   151  00749F  00                 	db	0
   152  0074A0  00                 	db	0
   153  0074A1  00                 	db	0
   154  0074A2  00                 	db	0
   155  0074A3  00                 	db	0
   156  0074A4  00                 	db	0
   157  0074A5  00                 	db	0
   158  0074A6  00                 	db	0
   159  0074A7  00                 	db	0
   160  0074A8  00                 	db	0
   161  0074A9  00                 	db	0
   162  0074AA  00                 	db	0
   163  0074AB  00                 	db	0
   164  0074AC  00                 	db	0
   165  0074AD  00                 	db	0
   166  0074AE  00                 	db	0
   167  0074AF  00                 	db	0
   168  0074B0  00                 	db	0
   169  0074B1  00                 	db	0
   170  0074B2  00                 	db	0
   171  0074B3  00                 	db	0
   172  0074B4  00                 	db	0
   173  0074B5  00                 	db	0
   174  0074B6  00                 	db	0
   175  0074B7  00                 	db	0
   176  0074B8  00                 	db	0
   177  0074B9  00                 	db	0
   178  0074BA  00                 	db	0
   179  0074BB  00                 	db	0
   180  0074BC  00                 	db	0
   181  0074BD  00                 	db	0
   182  0074BE  00                 	db	0
   183  0074BF  00                 	db	0
   184  0074C0  00                 	db	0
   185  0074C1  00                 	db	0
   186  0074C2  00                 	db	0
   187  0074C3  00                 	db	0
   188  0074C4  00                 	db	0
   189  0074C5  00                 	db	0
   190  0074C6  00                 	db	0
   191  0074C7  00                 	db	0
   192  0074C8  00                 	db	0
   193  0074C9  00                 	db	0
   194  0074CA  00                 	db	0
   195  0074CB  00                 	db	0
   196  0074CC  00                 	db	0
   197  0074CD  00                 	db	0
   198  0074CE  00                 	db	0
   199  0074CF  00                 	db	0
   200  0074D0  00                 	db	0
   201  0074D1  00                 	db	0
   202  0074D2  00                 	db	0
   203  0074D3  00                 	db	0
   204  0074D4  00                 	db	0
   205  0074D5  00                 	db	0
   206  0074D6  00                 	db	0
   207  0074D7  00                 	db	0
   208  0074D8  00                 	db	0
   209  0074D9  00                 	db	0
   210  0074DA  00                 	db	0
   211  0074DB  00                 	db	0
   212  0074DC  00                 	db	0
   213  0074DD  00                 	db	0
   214  0074DE  00                 	db	0
   215  0074DF  00                 	db	0
   216  0074E0  00                 	db	0
   217  0074E1  00                 	db	0
   218  0074E2  00                 	db	0
   219  0074E3  00                 	db	0
   220  0074E4  00                 	db	0
   221  0074E5  00                 	db	0
   222  0074E6  00                 	db	0
   223  0074E7  00                 	db	0
   224  0074E8  00                 	db	0
   225  0074E9  00                 	db	0
   226  0074EA  00                 	db	0
   227  0074EB  00                 	db	0
   228  0074EC  00                 	db	0
   229  0074ED  00                 	db	0
   230  0074EE  00                 	db	0
   231  0074EF  00                 	db	0
   232  0074F0  00                 	db	0
   233  0074F1  00                 	db	0
   234  0074F2  00                 	db	0
   235  0074F3  00                 	db	0
   236  0074F4  00                 	db	0
   237  0074F5  00                 	db	0
   238  0074F6  00                 	db	0
   239  0074F7  00                 	db	0
   240  0074F8  00                 	db	0
   241  0074F9  00                 	db	0
   242  0074FA  00                 	db	0
   243  0074FB  00                 	db	0
   244  0074FC  00                 	db	0
   245  0074FD  00                 	db	0
   246  0074FE  00                 	db	0
   247  0074FF  00                 	db	0
   248  007500  00                 	db	0
   249  007501  00                 	db	0
   250  007502  00                 	db	0
   251  007503  00                 	db	0
   252  007504  00                 	db	0
   253  007505  00                 	db	0
   254  007506  00                 	db	0
   255  007507  00                 	db	0
   256  007508  00                 	db	0
   257  007509  00                 	db	0
   258  00750A  00                 	db	0
   259  00750B  00                 	db	0
   260  00750C  00                 	db	0
   261  00750D  00                 	db	0
   262  00750E  00                 	db	0
   263  00750F  00                 	db	0
   264  007510  00                 	db	0
   265  007511  00                 	db	0
   266  007512  00                 	db	0
   267  007513  00                 	db	0
   268  007514  00                 	db	0
   269  007515  00                 	db	0
   270  007516  00                 	db	0
   271  007517  00                 	db	0
   272  007518  00                 	db	0
   273  007519  00                 	db	0
   274  00751A  00                 	db	0
   275  00751B  00                 	db	0
   276  00751C  00                 	db	0
   277  00751D  00                 	db	0
   278  00751E  00                 	db	0
   279  00751F  00                 	db	0
   280  007520  00                 	db	0
   281  007521  00                 	db	0
   282  007522  00                 	db	0
   283  007523  00                 	db	0
   284  007524  00                 	db	0
   285  007525  00                 	db	0
   286  007526  00                 	db	0
   287  007527  00                 	db	0
   288  007528  00                 	db	0
   289  007529  00                 	db	0
   290  00752A  00                 	db	0
   291  00752B  00                 	db	0
   292  00752C  00                 	db	0
   293  00752D  00                 	db	0
   294  00752E  00                 	db	0
   295  00752F  00                 	db	0
   296  007530  00                 	db	0
   297  007531  00                 	db	0
   298  007532  00                 	db	0
   299  007533  00                 	db	0
   300  007534  00                 	db	0
   301  007535  00                 	db	0
   302  007536  00                 	db	0
   303  007537  00                 	db	0
   304  007538  00                 	db	0
   305  007539  00                 	db	0
   306  00753A  00                 	db	0
   307  00753B  00                 	db	0
   308  00753C  00                 	db	0
   309  00753D  00                 	db	0
   310  00753E  00                 	db	0
   311  00753F  00                 	db	0
   312  007540  00                 	db	0
   313  007541  00                 	db	0
   314  007542  00                 	db	0
   315  007543  00                 	db	0
   316  007544  00                 	db	0
   317  007545  00                 	db	0
   318  007546  00                 	db	0
   319  007547  00                 	db	0
   320  007548  00                 	db	0
   321  007549  00                 	db	0
   322  00754A  00                 	db	0
   323  00754B  00                 	db	0
   324  00754C  00                 	db	0
   325  00754D  00                 	db	0
   326  00754E  00                 	db	0
   327  00754F  00                 	db	0
   328  007550  00                 	db	0
   329  007551  00                 	db	0
   330  007552  00                 	db	0
   331  007553  00                 	db	0
   332  007554  00                 	db	0
   333  007555  00                 	db	0
   334  007556  00                 	db	0
   335  007557  00                 	db	0
   336  007558  00                 	db	0
   337  007559  00                 	db	0
   338  00755A  00                 	db	0
   339  00755B  00                 	db	0
   340  00755C  00                 	db	0
   341  00755D  00                 	db	0
   342  00755E  00                 	db	0
   343  00755F  00                 	db	0
   344  007560  00                 	db	0
   345  007561  00                 	db	0
   346  007562  00                 	db	0
   347  007563  00                 	db	0
   348  007564  00                 	db	0
   349  007565  00                 	db	0
   350  007566  00                 	db	0
   351  007567  00                 	db	0
   352  007568  00                 	db	0
   353  007569  00                 	db	0
   354  00756A  00                 	db	0
   355  00756B  00                 	db	0
   356  00756C  00                 	db	0
   357  00756D  00                 	db	0
   358  00756E  00                 	db	0
   359  00756F  00                 	db	0
   360  007570  00                 	db	0
   361  007571  00                 	db	0
   362  007572  00                 	db	0
   363  007573  00                 	db	0
   364  007574  00                 	db	0
   365  007575  00                 	db	0
   366  007576  00                 	db	0
   367  007577  00                 	db	0
   368  007578  00                 	db	0
   369  007579  00                 	db	0
   370  00757A  00                 	db	0
   371  00757B  00                 	db	0
   372  00757C  00                 	db	0
   373  00757D  00                 	db	0
   374  00757E  00                 	db	0
   375  00757F  00                 	db	0
   376  007580  00                 	db	0
   377  007581  00                 	db	0
   378  007582  00                 	db	0
   379  007583  00                 	db	0
   380  007584  00                 	db	0
   381  007585  00                 	db	0
   382  007586  00                 	db	0
   383  007587  00                 	db	0
   384  007588  00                 	db	0
   385  007589  00                 	db	0
   386  00758A  00                 	db	0
   387  00758B  00                 	db	0
   388  00758C  00                 	db	0
   389  00758D  00                 	db	0
   390  00758E  00                 	db	0
   391  00758F  00                 	db	0
   392  007590  00                 	db	0
   393  007591  00                 	db	0
   394  007592  00                 	db	0
   395  007593  00                 	db	0
   396  007594  00                 	db	0
   397  007595  00                 	db	0
   398  007596  00                 	db	0
   399  007597  00                 	db	0
   400  007598  00                 	db	0
   401  007599  00                 	db	0
   402  00759A  00                 	db	0
   403  00759B  00                 	db	0
   404  00759C  00                 	db	0
   405  00759D  00                 	db	0
   406  00759E  00                 	db	0
   407  00759F  00                 	db	0
   408  0075A0  00                 	db	0
   409  0075A1  00                 	db	0
   410  0075A2  00                 	db	0
   411  0075A3  00                 	db	0
   412  0075A4  00                 	db	0
   413  0075A5  00                 	db	0
   414  0075A6  00                 	db	0
   415  0075A7  00                 	db	0
   416  0075A8  00                 	db	0
   417  0075A9  00                 	db	0
   418  0075AA  00                 	db	0
   419  0075AB  00                 	db	0
   420  0075AC  00                 	db	0
   421  0075AD  00                 	db	0
   422  0075AE  00                 	db	0
   423  0075AF  00                 	db	0
   424  0075B0  00                 	db	0
   425  0075B1  00                 	db	0
   426  0075B2  00                 	db	0
   427  0075B3  00                 	db	0
   428  0075B4  00                 	db	0
   429  0075B5  00                 	db	0
   430  0075B6  00                 	db	0
   431  0075B7  00                 	db	0
   432  0075B8  00                 	db	0
   433  0075B9  00                 	db	0
   434  0075BA  00                 	db	0
   435  0075BB                     __end_of_finger_up_0:
   436                           	opt stack 0
   437  0075BB                     _finger_up_4:
   438                           	opt stack 0
   439  0075BB  02E1               	dw	737
   440  0075BD  02E7               	dw	743
   441  0075BF  02ED               	dw	749
   442  0075C1  02F3               	dw	755
   443  0075C3  02F9               	dw	761
   444  0075C5  02FF               	dw	767
   445  0075C7  0305               	dw	773
   446  0075C9  030B               	dw	779
   447  0075CB  0311               	dw	785
   448  0075CD  0317               	dw	791
   449  0075CF  031D               	dw	797
   450  0075D1  0323               	dw	803
   451  0075D3  0329               	dw	809
   452  0075D5  032F               	dw	815
   453  0075D7  0335               	dw	821
   454  0075D9  033B               	dw	827
   455  0075DB  0341               	dw	833
   456  0075DD  0347               	dw	839
   457  0075DF  034D               	dw	845
   458  0075E1  0353               	dw	851
   459  0075E3  0359               	dw	857
   460  0075E5  035F               	dw	863
   461  0075E7  0365               	dw	869
   462  0075E9  036B               	dw	875
   463  0075EB  0371               	dw	881
   464  0075ED  0377               	dw	887
   465  0075EF  037D               	dw	893
   466  0075F1  0383               	dw	899
   467  0075F3  0389               	dw	905
   468  0075F5  038F               	dw	911
   469  0075F7  0395               	dw	917
   470  0075F9  039B               	dw	923
   471  0075FB  03A1               	dw	929
   472  0075FD  03A7               	dw	935
   473  0075FF  03AD               	dw	941
   474  007601  03B3               	dw	947
   475  007603  03B9               	dw	953
   476  007605  03BF               	dw	959
   477  007607  03C6               	dw	966
   478  007609  03CC               	dw	972
   479  00760B  03D2               	dw	978
   480  00760D  03D8               	dw	984
   481  00760F  03DE               	dw	990
   482  007611  03E4               	dw	996
   483  007613  03EA               	dw	1002
   484  007615  03F0               	dw	1008
   485  007617  03F6               	dw	1014
   486  007619  03FC               	dw	1020
   487  00761B  0402               	dw	1026
   488  00761D  0408               	dw	1032
   489  00761F  040E               	dw	1038
   490  007621  0414               	dw	1044
   491  007623  041A               	dw	1050
   492  007625  0420               	dw	1056
   493  007627  0426               	dw	1062
   494  007629  042C               	dw	1068
   495  00762B  0432               	dw	1074
   496  00762D  0438               	dw	1080
   497  00762F  043E               	dw	1086
   498  007631  0444               	dw	1092
   499  007633  044A               	dw	1098
   500  007635  0450               	dw	1104
   501  007637  0456               	dw	1110
   502  007639  045C               	dw	1116
   503  00763B  0462               	dw	1122
   504  00763D  0468               	dw	1128
   505  00763F  046E               	dw	1134
   506  007641  0474               	dw	1140
   507  007643  047A               	dw	1146
   508  007645  0480               	dw	1152
   509  007647  0486               	dw	1158
   510  007649  048C               	dw	1164
   511  00764B  0492               	dw	1170
   512  00764D  0498               	dw	1176
   513  00764F  049E               	dw	1182
   514  007651  04A5               	dw	1189
   515  007653  04AB               	dw	1195
   516  007655  04B1               	dw	1201
   517  007657  04B7               	dw	1207
   518  007659  04BD               	dw	1213
   519  00765B  04C3               	dw	1219
   520  00765D  04C9               	dw	1225
   521  00765F  04CF               	dw	1231
   522  007661  04D5               	dw	1237
   523  007663  04DB               	dw	1243
   524  007665  04E1               	dw	1249
   525  007667  04E7               	dw	1255
   526  007669  04ED               	dw	1261
   527  00766B  04F3               	dw	1267
   528  00766D  04F9               	dw	1273
   529  00766F  04FF               	dw	1279
   530  007671  0505               	dw	1285
   531  007673  050B               	dw	1291
   532  007675  0511               	dw	1297
   533  007677  0517               	dw	1303
   534  007679  051D               	dw	1309
   535  00767B  0523               	dw	1315
   536  00767D  0529               	dw	1321
   537  00767F  052F               	dw	1327
   538  007681  0535               	dw	1333
   539  007683  053B               	dw	1339
   540  007685  0541               	dw	1345
   541  007687  0547               	dw	1351
   542  007689  054D               	dw	1357
   543  00768B  0553               	dw	1363
   544  00768D  0559               	dw	1369
   545  00768F  055F               	dw	1375
   546  007691  0565               	dw	1381
   547  007693  056B               	dw	1387
   548  007695  0571               	dw	1393
   549  007697  0577               	dw	1399
   550  007699  057D               	dw	1405
   551  00769B  0583               	dw	1411
   552  00769D  058A               	dw	1418
   553  00769F  0590               	dw	1424
   554  0076A1  0596               	dw	1430
   555  0076A3  059C               	dw	1436
   556  0076A5  05A2               	dw	1442
   557  0076A7  05A8               	dw	1448
   558  0076A9  05AE               	dw	1454
   559  0076AB  05B4               	dw	1460
   560  0076AD  05BA               	dw	1466
   561  0076AF  05C0               	dw	1472
   562  0076B1  05C6               	dw	1478
   563  0076B3  05CC               	dw	1484
   564  0076B5  05D2               	dw	1490
   565  0076B7  05D8               	dw	1496
   566  0076B9  05DE               	dw	1502
   567  0076BB  05E4               	dw	1508
   568  0076BD  05EA               	dw	1514
   569  0076BF  05F0               	dw	1520
   570  0076C1  05F6               	dw	1526
   571  0076C3  05FC               	dw	1532
   572  0076C5  0602               	dw	1538
   573  0076C7  0608               	dw	1544
   574  0076C9  060E               	dw	1550
   575  0076CB  0614               	dw	1556
   576  0076CD  061A               	dw	1562
   577  0076CF  0620               	dw	1568
   578  0076D1  0626               	dw	1574
   579  0076D3  062C               	dw	1580
   580  0076D5  0632               	dw	1586
   581  0076D7  0638               	dw	1592
   582  0076D9  063E               	dw	1598
   583  0076DB  0644               	dw	1604
   584  0076DD  064A               	dw	1610
   585  0076DF  0650               	dw	1616
   586  0076E1  0656               	dw	1622
   587  0076E3  065C               	dw	1628
   588  0076E5  0662               	dw	1634
   589  0076E7  0669               	dw	1641
   590  0076E9                     __end_of_finger_up_4:
   591                           	opt stack 0
   592  0076E9                     _finger_up_3:
   593                           	opt stack 0
   594  0076E9  02E1               	dw	737
   595  0076EB  02E8               	dw	744
   596  0076ED  02EF               	dw	751
   597  0076EF  02F7               	dw	759
   598  0076F1  02FE               	dw	766
   599  0076F3  0305               	dw	773
   600  0076F5  030D               	dw	781
   601  0076F7  0314               	dw	788
   602  0076F9  031C               	dw	796
   603  0076FB  0323               	dw	803
   604  0076FD  032A               	dw	810
   605  0076FF  0332               	dw	818
   606  007701  0339               	dw	825
   607  007703  0340               	dw	832
   608  007705  0348               	dw	840
   609  007707  034F               	dw	847
   610  007709  0357               	dw	855
   611  00770B  035E               	dw	862
   612  00770D  0365               	dw	869
   613  00770F  036D               	dw	877
   614  007711  0374               	dw	884
   615  007713  037B               	dw	891
   616  007715  0383               	dw	899
   617  007717  038A               	dw	906
   618  007719  0392               	dw	914
   619  00771B  0399               	dw	921
   620  00771D  03A0               	dw	928
   621  00771F  03A8               	dw	936
   622  007721  03AF               	dw	943
   623  007723  03B7               	dw	951
   624  007725  03BE               	dw	958
   625  007727  03C5               	dw	965
   626  007729  03CD               	dw	973
   627  00772B  03D4               	dw	980
   628  00772D  03DB               	dw	987
   629  00772F  03E3               	dw	995
   630  007731  03EA               	dw	1002
   631  007733  03F2               	dw	1010
   632  007735  03F9               	dw	1017
   633  007737  0400               	dw	1024
   634  007739  0408               	dw	1032
   635  00773B  040F               	dw	1039
   636  00773D  0416               	dw	1046
   637  00773F  041E               	dw	1054
   638  007741  0425               	dw	1061
   639  007743  042D               	dw	1069
   640  007745  0434               	dw	1076
   641  007747  043B               	dw	1083
   642  007749  0443               	dw	1091
   643  00774B  044A               	dw	1098
   644  00774D  0451               	dw	1105
   645  00774F  0459               	dw	1113
   646  007751  0460               	dw	1120
   647  007753  0468               	dw	1128
   648  007755  046F               	dw	1135
   649  007757  0476               	dw	1142
   650  007759  047E               	dw	1150
   651  00775B  0485               	dw	1157
   652  00775D  048D               	dw	1165
   653  00775F  0494               	dw	1172
   654  007761  049B               	dw	1179
   655  007763  04A3               	dw	1187
   656  007765  04AA               	dw	1194
   657  007767  04B1               	dw	1201
   658  007769  04B9               	dw	1209
   659  00776B  04C0               	dw	1216
   660  00776D  04C8               	dw	1224
   661  00776F  04CF               	dw	1231
   662  007771  04D6               	dw	1238
   663  007773  04DE               	dw	1246
   664  007775  04E5               	dw	1253
   665  007777  04EC               	dw	1260
   666  007779  04F4               	dw	1268
   667  00777B  04FB               	dw	1275
   668  00777D  0503               	dw	1283
   669  00777F  050A               	dw	1290
   670  007781  0511               	dw	1297
   671  007783  0519               	dw	1305
   672  007785  0520               	dw	1312
   673  007787  0527               	dw	1319
   674  007789  052F               	dw	1327
   675  00778B  0536               	dw	1334
   676  00778D  053E               	dw	1342
   677  00778F  0545               	dw	1349
   678  007791  054C               	dw	1356
   679  007793  0554               	dw	1364
   680  007795  055B               	dw	1371
   681  007797  0563               	dw	1379
   682  007799  056A               	dw	1386
   683  00779B  0571               	dw	1393
   684  00779D  0579               	dw	1401
   685  00779F  0580               	dw	1408
   686  0077A1  0587               	dw	1415
   687  0077A3  058F               	dw	1423
   688  0077A5  0596               	dw	1430
   689  0077A7  059E               	dw	1438
   690  0077A9  05A5               	dw	1445
   691  0077AB  05AC               	dw	1452
   692  0077AD  05B4               	dw	1460
   693  0077AF  05BB               	dw	1467
   694  0077B1  05C2               	dw	1474
   695  0077B3  05CA               	dw	1482
   696  0077B5  05D1               	dw	1489
   697  0077B7  05D9               	dw	1497
   698  0077B9  05E0               	dw	1504
   699  0077BB  05E7               	dw	1511
   700  0077BD  05EF               	dw	1519
   701  0077BF  05F6               	dw	1526
   702  0077C1  05FD               	dw	1533
   703  0077C3  0605               	dw	1541
   704  0077C5  060C               	dw	1548
   705  0077C7  0614               	dw	1556
   706  0077C9  061B               	dw	1563
   707  0077CB  0622               	dw	1570
   708  0077CD  062A               	dw	1578
   709  0077CF  0631               	dw	1585
   710  0077D1  0639               	dw	1593
   711  0077D3  0640               	dw	1600
   712  0077D5  0647               	dw	1607
   713  0077D7  064F               	dw	1615
   714  0077D9  0656               	dw	1622
   715  0077DB  065D               	dw	1629
   716  0077DD  0665               	dw	1637
   717  0077DF  066C               	dw	1644
   718  0077E1  0674               	dw	1652
   719  0077E3  067B               	dw	1659
   720  0077E5  0682               	dw	1666
   721  0077E7  068A               	dw	1674
   722  0077E9  0691               	dw	1681
   723  0077EB  0698               	dw	1688
   724  0077ED  06A0               	dw	1696
   725  0077EF  06A7               	dw	1703
   726  0077F1  06AF               	dw	1711
   727  0077F3  06B6               	dw	1718
   728  0077F5  06BD               	dw	1725
   729  0077F7  06C5               	dw	1733
   730  0077F9  06CC               	dw	1740
   731  0077FB  06D3               	dw	1747
   732  0077FD  06DB               	dw	1755
   733  0077FF  06E2               	dw	1762
   734  007801  06EA               	dw	1770
   735  007803  06F1               	dw	1777
   736  007805  06F8               	dw	1784
   737  007807  0700               	dw	1792
   738  007809  0707               	dw	1799
   739  00780B  070F               	dw	1807
   740  00780D                     __end_of_finger_up_3:
   741                           	opt stack 0
   742  00780D                     _finger_up_2:
   743                           	opt stack 0
   744  00780D  02E1               	dw	737
   745  00780F  02EB               	dw	747
   746  007811  02F6               	dw	758
   747  007813  0301               	dw	769
   748  007815  030B               	dw	779
   749  007817  0316               	dw	790
   750  007819  0321               	dw	801
   751  00781B  032B               	dw	811
   752  00781D  0336               	dw	822
   753  00781F  0341               	dw	833
   754  007821  034C               	dw	844
   755  007823  0356               	dw	854
   756  007825  0361               	dw	865
   757  007827  036C               	dw	876
   758  007829  0376               	dw	886
   759  00782B  0381               	dw	897
   760  00782D  038C               	dw	908
   761  00782F  0397               	dw	919
   762  007831  03A1               	dw	929
   763  007833  03AC               	dw	940
   764  007835  03B7               	dw	951
   765  007837  03C1               	dw	961
   766  007839  03CC               	dw	972
   767  00783B  03D7               	dw	983
   768  00783D  03E2               	dw	994
   769  00783F  03EC               	dw	1004
   770  007841  03F7               	dw	1015
   771  007843  0402               	dw	1026
   772  007845  040C               	dw	1036
   773  007847  0417               	dw	1047
   774  007849  0422               	dw	1058
   775  00784B  042D               	dw	1069
   776  00784D  0437               	dw	1079
   777  00784F  0442               	dw	1090
   778  007851  044D               	dw	1101
   779  007853  0457               	dw	1111
   780  007855  0462               	dw	1122
   781  007857  046D               	dw	1133
   782  007859  0478               	dw	1144
   783  00785B  0482               	dw	1154
   784  00785D  048D               	dw	1165
   785  00785F  0498               	dw	1176
   786  007861  04A2               	dw	1186
   787  007863  04AD               	dw	1197
   788  007865  04B8               	dw	1208
   789  007867  04C2               	dw	1218
   790  007869  04CD               	dw	1229
   791  00786B  04D8               	dw	1240
   792  00786D  04E3               	dw	1251
   793  00786F  04ED               	dw	1261
   794  007871  04F8               	dw	1272
   795  007873  0503               	dw	1283
   796  007875  050D               	dw	1293
   797  007877  0518               	dw	1304
   798  007879  0523               	dw	1315
   799  00787B  052E               	dw	1326
   800  00787D  0538               	dw	1336
   801  00787F  0543               	dw	1347
   802  007881  054E               	dw	1358
   803  007883  0558               	dw	1368
   804  007885  0563               	dw	1379
   805  007887  056E               	dw	1390
   806  007889  0579               	dw	1401
   807  00788B  0583               	dw	1411
   808  00788D  058E               	dw	1422
   809  00788F  0599               	dw	1433
   810  007891  05A3               	dw	1443
   811  007893  05AE               	dw	1454
   812  007895  05B9               	dw	1465
   813  007897  05C4               	dw	1476
   814  007899  05CE               	dw	1486
   815  00789B  05D9               	dw	1497
   816  00789D  05E4               	dw	1508
   817  00789F  05EE               	dw	1518
   818  0078A1  05F9               	dw	1529
   819  0078A3  0604               	dw	1540
   820  0078A5  060F               	dw	1551
   821  0078A7  0619               	dw	1561
   822  0078A9  0624               	dw	1572
   823  0078AB  062F               	dw	1583
   824  0078AD  0639               	dw	1593
   825  0078AF  0644               	dw	1604
   826  0078B1  064F               	dw	1615
   827  0078B3  065A               	dw	1626
   828  0078B5  0664               	dw	1636
   829  0078B7  066F               	dw	1647
   830  0078B9  067A               	dw	1658
   831  0078BB  0684               	dw	1668
   832  0078BD  068F               	dw	1679
   833  0078BF  069A               	dw	1690
   834  0078C1  06A4               	dw	1700
   835  0078C3  06AF               	dw	1711
   836  0078C5  06BA               	dw	1722
   837  0078C7  06C5               	dw	1733
   838  0078C9  06CF               	dw	1743
   839  0078CB  06DA               	dw	1754
   840  0078CD  06E5               	dw	1765
   841  0078CF  06EF               	dw	1775
   842  0078D1  06FA               	dw	1786
   843  0078D3  0705               	dw	1797
   844  0078D5  0710               	dw	1808
   845  0078D7  071A               	dw	1818
   846  0078D9  0725               	dw	1829
   847  0078DB  0730               	dw	1840
   848  0078DD  073A               	dw	1850
   849  0078DF  0745               	dw	1861
   850  0078E1  0750               	dw	1872
   851  0078E3  075B               	dw	1883
   852  0078E5  0765               	dw	1893
   853  0078E7  0770               	dw	1904
   854  0078E9  077B               	dw	1915
   855  0078EB  0785               	dw	1925
   856  0078ED  0790               	dw	1936
   857  0078EF  079B               	dw	1947
   858  0078F1  07A6               	dw	1958
   859  0078F3  07B0               	dw	1968
   860  0078F5  07BB               	dw	1979
   861  0078F7  07C6               	dw	1990
   862  0078F9  07D0               	dw	2000
   863  0078FB  07DB               	dw	2011
   864  0078FD  07E6               	dw	2022
   865  0078FF  07F1               	dw	2033
   866  007901  07FB               	dw	2043
   867  007903  0806               	dw	2054
   868  007905  0811               	dw	2065
   869  007907  081B               	dw	2075
   870  007909  0826               	dw	2086
   871  00790B  0831               	dw	2097
   872  00790D  083C               	dw	2108
   873  00790F                     __end_of_finger_up_2:
   874                           	opt stack 0
   875  00790F                     _finger_under_4:
   876                           	opt stack 0
   877  00790F  0000               	dw	0
   878  007911  0008               	dw	8
   879  007913  0010               	dw	16
   880  007915  0019               	dw	25
   881  007917  0021               	dw	33
   882  007919  002A               	dw	42
   883  00791B  0032               	dw	50
   884  00791D  003B               	dw	59
   885  00791F  0043               	dw	67
   886  007921  004C               	dw	76
   887  007923  0054               	dw	84
   888  007925  005D               	dw	93
   889  007927  0065               	dw	101
   890  007929  006E               	dw	110
   891  00792B  0076               	dw	118
   892  00792D  007F               	dw	127
   893  00792F  0087               	dw	135
   894  007931  0090               	dw	144
   895  007933  0098               	dw	152
   896  007935  00A1               	dw	161
   897  007937  00A9               	dw	169
   898  007939  00B2               	dw	178
   899  00793B  00BA               	dw	186
   900  00793D  00C3               	dw	195
   901  00793F  00CB               	dw	203
   902  007941  00D3               	dw	211
   903  007943  00DC               	dw	220
   904  007945  00E4               	dw	228
   905  007947  00ED               	dw	237
   906  007949  00F5               	dw	245
   907  00794B  00FE               	dw	254
   908  00794D  0106               	dw	262
   909  00794F  010F               	dw	271
   910  007951  0117               	dw	279
   911  007953  0120               	dw	288
   912  007955  0128               	dw	296
   913  007957  0131               	dw	305
   914  007959  0139               	dw	313
   915  00795B  0142               	dw	322
   916  00795D  014A               	dw	330
   917  00795F  0153               	dw	339
   918  007961  015B               	dw	347
   919  007963  0164               	dw	356
   920  007965  016C               	dw	364
   921  007967  0175               	dw	373
   922  007969  017D               	dw	381
   923  00796B  0186               	dw	390
   924  00796D  018E               	dw	398
   925  00796F  0196               	dw	406
   926  007971  019F               	dw	415
   927  007973  01A7               	dw	423
   928  007975  01B0               	dw	432
   929  007977  01B8               	dw	440
   930  007979  01C1               	dw	449
   931  00797B  01C9               	dw	457
   932  00797D  01D2               	dw	466
   933  00797F  01DA               	dw	474
   934  007981  01E3               	dw	483
   935  007983  01EB               	dw	491
   936  007985  01F4               	dw	500
   937  007987  01FC               	dw	508
   938  007989  0205               	dw	517
   939  00798B  020D               	dw	525
   940  00798D  0216               	dw	534
   941  00798F  021E               	dw	542
   942  007991  0227               	dw	551
   943  007993  022F               	dw	559
   944  007995  0238               	dw	568
   945  007997  0240               	dw	576
   946  007999  0249               	dw	585
   947  00799B  0251               	dw	593
   948  00799D  025A               	dw	602
   949  00799F  0262               	dw	610
   950  0079A1  026A               	dw	618
   951  0079A3  0273               	dw	627
   952  0079A5  027B               	dw	635
   953  0079A7  0284               	dw	644
   954  0079A9  028C               	dw	652
   955  0079AB  0295               	dw	661
   956  0079AD  029D               	dw	669
   957  0079AF  02A6               	dw	678
   958  0079B1  02AE               	dw	686
   959  0079B3  02B7               	dw	695
   960  0079B5  02BF               	dw	703
   961  0079B7  02C8               	dw	712
   962  0079B9  02D0               	dw	720
   963  0079BB  02D9               	dw	729
   964  0079BD  02E1               	dw	737
   965  0079BF  02EA               	dw	746
   966  0079C1  02F2               	dw	754
   967  0079C3  02FB               	dw	763
   968  0079C5  0303               	dw	771
   969  0079C7  030C               	dw	780
   970  0079C9  0314               	dw	788
   971  0079CB  031D               	dw	797
   972  0079CD  0325               	dw	805
   973  0079CF  032D               	dw	813
   974  0079D1  0336               	dw	822
   975  0079D3  033E               	dw	830
   976  0079D5  0347               	dw	839
   977  0079D7  034F               	dw	847
   978  0079D9  0358               	dw	856
   979  0079DB  0360               	dw	864
   980  0079DD  0369               	dw	873
   981  0079DF  0371               	dw	881
   982  0079E1  037A               	dw	890
   983  0079E3  0382               	dw	898
   984  0079E5  038B               	dw	907
   985  0079E7  0393               	dw	915
   986  0079E9  039C               	dw	924
   987  0079EB  03A4               	dw	932
   988  0079ED  03AD               	dw	941
   989  0079EF  03B5               	dw	949
   990  0079F1  03BE               	dw	958
   991  0079F3  03C6               	dw	966
   992  0079F5  03CF               	dw	975
   993  0079F7  03D7               	dw	983
   994  0079F9  03E0               	dw	992
   995  0079FB  03E8               	dw	1000
   996  0079FD  03F1               	dw	1009
   997  0079FF                     __end_of_finger_under_4:
   998                           	opt stack 0
   999  0079FF                     _finger_up_1:
  1000                           	opt stack 0
  1001  0079FF  02E1               	dw	737
  1002  007A01  02E9               	dw	745
  1003  007A03  02F2               	dw	754
  1004  007A05  02FA               	dw	762
  1005  007A07  0303               	dw	771
  1006  007A09  030C               	dw	780
  1007  007A0B  0314               	dw	788
  1008  007A0D  031D               	dw	797
  1009  007A0F  0325               	dw	805
  1010  007A11  032E               	dw	814
  1011  007A13  0337               	dw	823
  1012  007A15  033F               	dw	831
  1013  007A17  0348               	dw	840
  1014  007A19  0351               	dw	849
  1015  007A1B  0359               	dw	857
  1016  007A1D  0362               	dw	866
  1017  007A1F  036A               	dw	874
  1018  007A21  0373               	dw	883
  1019  007A23  037C               	dw	892
  1020  007A25  0384               	dw	900
  1021  007A27  038D               	dw	909
  1022  007A29  0396               	dw	918
  1023  007A2B  039E               	dw	926
  1024  007A2D  03A7               	dw	935
  1025  007A2F  03AF               	dw	943
  1026  007A31  03B8               	dw	952
  1027  007A33  03C1               	dw	961
  1028  007A35  03C9               	dw	969
  1029  007A37  03D2               	dw	978
  1030  007A39  03DB               	dw	987
  1031  007A3B  03E3               	dw	995
  1032  007A3D  03EC               	dw	1004
  1033  007A3F  03F4               	dw	1012
  1034  007A41  03FD               	dw	1021
  1035  007A43  0406               	dw	1030
  1036  007A45  040E               	dw	1038
  1037  007A47  0417               	dw	1047
  1038  007A49  0420               	dw	1056
  1039  007A4B  0428               	dw	1064
  1040  007A4D  0431               	dw	1073
  1041  007A4F  0439               	dw	1081
  1042  007A51  0442               	dw	1090
  1043  007A53  044B               	dw	1099
  1044  007A55  0453               	dw	1107
  1045  007A57  045C               	dw	1116
  1046  007A59  0465               	dw	1125
  1047  007A5B  046D               	dw	1133
  1048  007A5D  0476               	dw	1142
  1049  007A5F  047E               	dw	1150
  1050  007A61  0487               	dw	1159
  1051  007A63  0490               	dw	1168
  1052  007A65  0498               	dw	1176
  1053  007A67  04A1               	dw	1185
  1054  007A69  04AA               	dw	1194
  1055  007A6B  04B2               	dw	1202
  1056  007A6D  04BB               	dw	1211
  1057  007A6F  04C3               	dw	1219
  1058  007A71  04CC               	dw	1228
  1059  007A73  04D5               	dw	1237
  1060  007A75  04DD               	dw	1245
  1061  007A77  04E6               	dw	1254
  1062  007A79  04EF               	dw	1263
  1063  007A7B  04F7               	dw	1271
  1064  007A7D  0500               	dw	1280
  1065  007A7F  0508               	dw	1288
  1066  007A81  0511               	dw	1297
  1067  007A83  051A               	dw	1306
  1068  007A85  0522               	dw	1314
  1069  007A87  052B               	dw	1323
  1070  007A89  0534               	dw	1332
  1071  007A8B  053C               	dw	1340
  1072  007A8D  0545               	dw	1349
  1073  007A8F  054D               	dw	1357
  1074  007A91  0556               	dw	1366
  1075  007A93  055F               	dw	1375
  1076  007A95  0567               	dw	1383
  1077  007A97  0570               	dw	1392
  1078  007A99  0579               	dw	1401
  1079  007A9B  0581               	dw	1409
  1080  007A9D  058A               	dw	1418
  1081  007A9F  0592               	dw	1426
  1082  007AA1  059B               	dw	1435
  1083  007AA3  05A4               	dw	1444
  1084  007AA5  05AC               	dw	1452
  1085  007AA7  05B5               	dw	1461
  1086  007AA9  05BE               	dw	1470
  1087  007AAB  05C6               	dw	1478
  1088  007AAD  05CF               	dw	1487
  1089  007AAF  05D7               	dw	1495
  1090  007AB1  05E0               	dw	1504
  1091  007AB3  05E9               	dw	1513
  1092  007AB5  05F1               	dw	1521
  1093  007AB7  05FA               	dw	1530
  1094  007AB9  0603               	dw	1539
  1095  007ABB  060B               	dw	1547
  1096  007ABD  0614               	dw	1556
  1097  007ABF  061C               	dw	1564
  1098  007AC1  0625               	dw	1573
  1099  007AC3  062E               	dw	1582
  1100  007AC5  0636               	dw	1590
  1101  007AC7  063F               	dw	1599
  1102  007AC9  0648               	dw	1608
  1103  007ACB  0650               	dw	1616
  1104  007ACD  0659               	dw	1625
  1105  007ACF  0661               	dw	1633
  1106  007AD1  066A               	dw	1642
  1107  007AD3  0673               	dw	1651
  1108  007AD5  067B               	dw	1659
  1109  007AD7  0684               	dw	1668
  1110  007AD9  068D               	dw	1677
  1111  007ADB  0695               	dw	1685
  1112  007ADD  069E               	dw	1694
  1113  007ADF  06A6               	dw	1702
  1114  007AE1  06AF               	dw	1711
  1115  007AE3  06B8               	dw	1720
  1116  007AE5  06C0               	dw	1728
  1117  007AE7  06C9               	dw	1737
  1118  007AE9  06D2               	dw	1746
  1119  007AEB                     __end_of_finger_up_1:
  1120                           	opt stack 0
  1121  007AEB                     _finger_under_2:
  1122                           	opt stack 0
  1123  007AEB  0000               	dw	0
  1124  007AED  0003               	dw	3
  1125  007AEF  0006               	dw	6
  1126  007AF1  000A               	dw	10
  1127  007AF3  000D               	dw	13
  1128  007AF5  0011               	dw	17
  1129  007AF7  0014               	dw	20
  1130  007AF9  0018               	dw	24
  1131  007AFB  001B               	dw	27
  1132  007AFD  001F               	dw	31
  1133  007AFF  0022               	dw	34
  1134  007B01  0026               	dw	38
  1135  007B03  0029               	dw	41
  1136  007B05  002D               	dw	45
  1137  007B07  0030               	dw	48
  1138  007B09  0034               	dw	52
  1139  007B0B  0037               	dw	55
  1140  007B0D  003B               	dw	59
  1141  007B0F  003E               	dw	62
  1142  007B11  0042               	dw	66
  1143  007B13  0045               	dw	69
  1144  007B15  0049               	dw	73
  1145  007B17  004C               	dw	76
  1146  007B19  0050               	dw	80
  1147  007B1B  0053               	dw	83
  1148  007B1D  0057               	dw	87
  1149  007B1F  005A               	dw	90
  1150  007B21  005E               	dw	94
  1151  007B23  0061               	dw	97
  1152  007B25  0065               	dw	101
  1153  007B27  0068               	dw	104
  1154  007B29  006C               	dw	108
  1155  007B2B  006F               	dw	111
  1156  007B2D  0073               	dw	115
  1157  007B2F  0076               	dw	118
  1158  007B31  007A               	dw	122
  1159  007B33  007D               	dw	125
  1160  007B35  0081               	dw	129
  1161  007B37  0084               	dw	132
  1162  007B39  0088               	dw	136
  1163  007B3B  008B               	dw	139
  1164  007B3D  008F               	dw	143
  1165  007B3F  0092               	dw	146
  1166  007B41  0096               	dw	150
  1167  007B43  0099               	dw	153
  1168  007B45  009D               	dw	157
  1169  007B47  00A0               	dw	160
  1170  007B49  00A4               	dw	164
  1171  007B4B  00A7               	dw	167
  1172  007B4D  00AB               	dw	171
  1173  007B4F  00AE               	dw	174
  1174  007B51  00B2               	dw	178
  1175  007B53  00B5               	dw	181
  1176  007B55  00B9               	dw	185
  1177  007B57  00BC               	dw	188
  1178  007B59  00C0               	dw	192
  1179  007B5B  00C3               	dw	195
  1180  007B5D  00C6               	dw	198
  1181  007B5F  00CA               	dw	202
  1182  007B61  00CD               	dw	205
  1183  007B63  00D1               	dw	209
  1184  007B65  00D4               	dw	212
  1185  007B67  00D8               	dw	216
  1186  007B69  00DB               	dw	219
  1187  007B6B  00DF               	dw	223
  1188  007B6D  00E2               	dw	226
  1189  007B6F  00E6               	dw	230
  1190  007B71  00E9               	dw	233
  1191  007B73  00ED               	dw	237
  1192  007B75  00F0               	dw	240
  1193  007B77  00F4               	dw	244
  1194  007B79  00F7               	dw	247
  1195  007B7B  00FB               	dw	251
  1196  007B7D  00FE               	dw	254
  1197  007B7F  0102               	dw	258
  1198  007B81  0105               	dw	261
  1199  007B83  0109               	dw	265
  1200  007B85  010C               	dw	268
  1201  007B87  0110               	dw	272
  1202  007B89  0113               	dw	275
  1203  007B8B  0117               	dw	279
  1204  007B8D  011A               	dw	282
  1205  007B8F  011E               	dw	286
  1206  007B91  0121               	dw	289
  1207  007B93  0125               	dw	293
  1208  007B95  0128               	dw	296
  1209  007B97  012C               	dw	300
  1210  007B99  012F               	dw	303
  1211  007B9B  0133               	dw	307
  1212  007B9D  0136               	dw	310
  1213  007B9F  013A               	dw	314
  1214  007BA1  013D               	dw	317
  1215  007BA3  0141               	dw	321
  1216  007BA5  0144               	dw	324
  1217  007BA7  0148               	dw	328
  1218  007BA9  014B               	dw	331
  1219  007BAB  014F               	dw	335
  1220  007BAD  0152               	dw	338
  1221  007BAF  0156               	dw	342
  1222  007BB1  0159               	dw	345
  1223  007BB3  015D               	dw	349
  1224  007BB5  0160               	dw	352
  1225  007BB7  0164               	dw	356
  1226  007BB9  0167               	dw	359
  1227  007BBB  016B               	dw	363
  1228  007BBD  016E               	dw	366
  1229  007BBF  0172               	dw	370
  1230  007BC1  0175               	dw	373
  1231  007BC3  0179               	dw	377
  1232  007BC5  017C               	dw	380
  1233  007BC7  0180               	dw	384
  1234  007BC9  0183               	dw	387
  1235  007BCB  0187               	dw	391
  1236  007BCD                     __end_of_finger_under_2:
  1237                           	opt stack 0
  1238  007BCD                     _finger_under_0:
  1239                           	opt stack 0
  1240  007BCD  0000               	dw	0
  1241  007BCF  00                 	db	0
  1242  007BD0  00                 	db	0
  1243  007BD1  00                 	db	0
  1244  007BD2  00                 	db	0
  1245  007BD3  00                 	db	0
  1246  007BD4  00                 	db	0
  1247  007BD5  00                 	db	0
  1248  007BD6  00                 	db	0
  1249  007BD7  00                 	db	0
  1250  007BD8  00                 	db	0
  1251  007BD9  00                 	db	0
  1252  007BDA  00                 	db	0
  1253  007BDB  00                 	db	0
  1254  007BDC  00                 	db	0
  1255  007BDD  00                 	db	0
  1256  007BDE  00                 	db	0
  1257  007BDF  00                 	db	0
  1258  007BE0  00                 	db	0
  1259  007BE1  00                 	db	0
  1260  007BE2  00                 	db	0
  1261  007BE3  00                 	db	0
  1262  007BE4  00                 	db	0
  1263  007BE5  00                 	db	0
  1264  007BE6  00                 	db	0
  1265  007BE7  00                 	db	0
  1266  007BE8  00                 	db	0
  1267  007BE9  00                 	db	0
  1268  007BEA  00                 	db	0
  1269  007BEB  00                 	db	0
  1270  007BEC  00                 	db	0
  1271  007BED  00                 	db	0
  1272  007BEE  00                 	db	0
  1273  007BEF  00                 	db	0
  1274  007BF0  00                 	db	0
  1275  007BF1  00                 	db	0
  1276  007BF2  00                 	db	0
  1277  007BF3  00                 	db	0
  1278  007BF4  00                 	db	0
  1279  007BF5  00                 	db	0
  1280  007BF6  00                 	db	0
  1281  007BF7  00                 	db	0
  1282  007BF8  00                 	db	0
  1283  007BF9  00                 	db	0
  1284  007BFA  00                 	db	0
  1285  007BFB  00                 	db	0
  1286  007BFC  00                 	db	0
  1287  007BFD  00                 	db	0
  1288  007BFE  00                 	db	0
  1289  007BFF  00                 	db	0
  1290  007C00  00                 	db	0
  1291  007C01  00                 	db	0
  1292  007C02  00                 	db	0
  1293  007C03  00                 	db	0
  1294  007C04  00                 	db	0
  1295  007C05  00                 	db	0
  1296  007C06  00                 	db	0
  1297  007C07  00                 	db	0
  1298  007C08  00                 	db	0
  1299  007C09  00                 	db	0
  1300  007C0A  00                 	db	0
  1301  007C0B  00                 	db	0
  1302  007C0C  00                 	db	0
  1303  007C0D  00                 	db	0
  1304  007C0E  00                 	db	0
  1305  007C0F  00                 	db	0
  1306  007C10  00                 	db	0
  1307  007C11  00                 	db	0
  1308  007C12  00                 	db	0
  1309  007C13  00                 	db	0
  1310  007C14  00                 	db	0
  1311  007C15  00                 	db	0
  1312  007C16  00                 	db	0
  1313  007C17  00                 	db	0
  1314  007C18  00                 	db	0
  1315  007C19  00                 	db	0
  1316  007C1A  00                 	db	0
  1317  007C1B  00                 	db	0
  1318  007C1C  00                 	db	0
  1319  007C1D  00                 	db	0
  1320  007C1E  00                 	db	0
  1321  007C1F  00                 	db	0
  1322  007C20  00                 	db	0
  1323  007C21  00                 	db	0
  1324  007C22  00                 	db	0
  1325  007C23  00                 	db	0
  1326  007C24  00                 	db	0
  1327  007C25  00                 	db	0
  1328  007C26  00                 	db	0
  1329  007C27  00                 	db	0
  1330  007C28  00                 	db	0
  1331  007C29  00                 	db	0
  1332  007C2A  00                 	db	0
  1333  007C2B  00                 	db	0
  1334  007C2C  00                 	db	0
  1335  007C2D  00                 	db	0
  1336  007C2E  00                 	db	0
  1337  007C2F  00                 	db	0
  1338  007C30  00                 	db	0
  1339  007C31  00                 	db	0
  1340  007C32  00                 	db	0
  1341  007C33  00                 	db	0
  1342  007C34  00                 	db	0
  1343  007C35  00                 	db	0
  1344  007C36  00                 	db	0
  1345  007C37  00                 	db	0
  1346  007C38  00                 	db	0
  1347  007C39  00                 	db	0
  1348  007C3A  00                 	db	0
  1349  007C3B  00                 	db	0
  1350  007C3C  00                 	db	0
  1351  007C3D  00                 	db	0
  1352  007C3E  00                 	db	0
  1353  007C3F  00                 	db	0
  1354  007C40  00                 	db	0
  1355  007C41  00                 	db	0
  1356  007C42  00                 	db	0
  1357  007C43  00                 	db	0
  1358  007C44  00                 	db	0
  1359  007C45  00                 	db	0
  1360  007C46  00                 	db	0
  1361  007C47  00                 	db	0
  1362  007C48  00                 	db	0
  1363  007C49  00                 	db	0
  1364  007C4A  00                 	db	0
  1365  007C4B  00                 	db	0
  1366  007C4C  00                 	db	0
  1367  007C4D  00                 	db	0
  1368  007C4E  00                 	db	0
  1369  007C4F  00                 	db	0
  1370  007C50  00                 	db	0
  1371  007C51  00                 	db	0
  1372  007C52  00                 	db	0
  1373  007C53  00                 	db	0
  1374  007C54  00                 	db	0
  1375  007C55  00                 	db	0
  1376  007C56  00                 	db	0
  1377  007C57  00                 	db	0
  1378  007C58  00                 	db	0
  1379  007C59  00                 	db	0
  1380  007C5A  00                 	db	0
  1381  007C5B  00                 	db	0
  1382  007C5C  00                 	db	0
  1383  007C5D  00                 	db	0
  1384  007C5E  00                 	db	0
  1385  007C5F  00                 	db	0
  1386  007C60  00                 	db	0
  1387  007C61  00                 	db	0
  1388  007C62  00                 	db	0
  1389  007C63  00                 	db	0
  1390  007C64  00                 	db	0
  1391  007C65  00                 	db	0
  1392  007C66  00                 	db	0
  1393  007C67  00                 	db	0
  1394  007C68  00                 	db	0
  1395  007C69  00                 	db	0
  1396  007C6A  00                 	db	0
  1397  007C6B  00                 	db	0
  1398  007C6C  00                 	db	0
  1399  007C6D  00                 	db	0
  1400  007C6E  00                 	db	0
  1401  007C6F  00                 	db	0
  1402  007C70  00                 	db	0
  1403  007C71  00                 	db	0
  1404  007C72  00                 	db	0
  1405  007C73  00                 	db	0
  1406  007C74  00                 	db	0
  1407  007C75  00                 	db	0
  1408  007C76  00                 	db	0
  1409  007C77  00                 	db	0
  1410  007C78  00                 	db	0
  1411  007C79  00                 	db	0
  1412  007C7A  00                 	db	0
  1413  007C7B  00                 	db	0
  1414  007C7C  00                 	db	0
  1415  007C7D  00                 	db	0
  1416  007C7E  00                 	db	0
  1417  007C7F  00                 	db	0
  1418  007C80  00                 	db	0
  1419  007C81  00                 	db	0
  1420  007C82  00                 	db	0
  1421  007C83  00                 	db	0
  1422  007C84  00                 	db	0
  1423  007C85  00                 	db	0
  1424  007C86  00                 	db	0
  1425  007C87  00                 	db	0
  1426  007C88  00                 	db	0
  1427  007C89  00                 	db	0
  1428  007C8A  00                 	db	0
  1429  007C8B  00                 	db	0
  1430  007C8C  00                 	db	0
  1431  007C8D  00                 	db	0
  1432  007C8E  00                 	db	0
  1433  007C8F  00                 	db	0
  1434  007C90  00                 	db	0
  1435  007C91  00                 	db	0
  1436  007C92  00                 	db	0
  1437  007C93  00                 	db	0
  1438  007C94  00                 	db	0
  1439  007C95  00                 	db	0
  1440  007C96  00                 	db	0
  1441  007C97  00                 	db	0
  1442  007C98  00                 	db	0
  1443  007C99  00                 	db	0
  1444  007C9A  00                 	db	0
  1445  007C9B  00                 	db	0
  1446  007C9C  00                 	db	0
  1447  007C9D  00                 	db	0
  1448  007C9E  00                 	db	0
  1449  007C9F  00                 	db	0
  1450  007CA0  00                 	db	0
  1451  007CA1  00                 	db	0
  1452  007CA2  00                 	db	0
  1453  007CA3  00                 	db	0
  1454  007CA4  00                 	db	0
  1455  007CA5                     __end_of_finger_under_0:
  1456                           	opt stack 0
  1457  007CA5                     _finger_under_1:
  1458                           	opt stack 0
  1459  007CA5  0000               	dw	0
  1460  007CA7  000E               	dw	14
  1461  007CA9  001D               	dw	29
  1462  007CAB  002C               	dw	44
  1463  007CAD  003A               	dw	58
  1464  007CAF  0049               	dw	73
  1465  007CB1  0058               	dw	88
  1466  007CB3  0067               	dw	103
  1467  007CB5  0075               	dw	117
  1468  007CB7  0084               	dw	132
  1469  007CB9  0093               	dw	147
  1470  007CBB  00A2               	dw	162
  1471  007CBD  00B0               	dw	176
  1472  007CBF  00BF               	dw	191
  1473  007CC1  00CE               	dw	206
  1474  007CC3  00DD               	dw	221
  1475  007CC5  00EB               	dw	235
  1476  007CC7  00FA               	dw	250
  1477  007CC9  0109               	dw	265
  1478  007CCB  0118               	dw	280
  1479  007CCD  0126               	dw	294
  1480  007CCF  0135               	dw	309
  1481  007CD1  0144               	dw	324
  1482  007CD3  0153               	dw	339
  1483  007CD5  0161               	dw	353
  1484  007CD7  0170               	dw	368
  1485  007CD9  017F               	dw	383
  1486  007CDB  018E               	dw	398
  1487  007CDD  019C               	dw	412
  1488  007CDF  01AB               	dw	427
  1489  007CE1  01BA               	dw	442
  1490  007CE3  01C9               	dw	457
  1491  007CE5  01D7               	dw	471
  1492  007CE7  01E6               	dw	486
  1493  007CE9  01F5               	dw	501
  1494  007CEB  0204               	dw	516
  1495  007CED  0212               	dw	530
  1496  007CEF  0221               	dw	545
  1497  007CF1  0230               	dw	560
  1498  007CF3  023F               	dw	575
  1499  007CF5  024D               	dw	589
  1500  007CF7  025C               	dw	604
  1501  007CF9  026B               	dw	619
  1502  007CFB  027A               	dw	634
  1503  007CFD  0288               	dw	648
  1504  007CFF  0297               	dw	663
  1505  007D01  02A6               	dw	678
  1506  007D03  02B5               	dw	693
  1507  007D05  02C3               	dw	707
  1508  007D07  02D2               	dw	722
  1509  007D09  02E1               	dw	737
  1510  007D0B  02F0               	dw	752
  1511  007D0D  02FE               	dw	766
  1512  007D0F  030D               	dw	781
  1513  007D11  031C               	dw	796
  1514  007D13  032B               	dw	811
  1515  007D15  0339               	dw	825
  1516  007D17  0348               	dw	840
  1517  007D19  0357               	dw	855
  1518  007D1B  0366               	dw	870
  1519  007D1D  0374               	dw	884
  1520  007D1F  0383               	dw	899
  1521  007D21  0392               	dw	914
  1522  007D23  03A1               	dw	929
  1523  007D25  03AF               	dw	943
  1524  007D27  03BE               	dw	958
  1525  007D29  03CD               	dw	973
  1526  007D2B  03DC               	dw	988
  1527  007D2D  03EA               	dw	1002
  1528  007D2F  03F9               	dw	1017
  1529  007D31  0408               	dw	1032
  1530  007D33  0417               	dw	1047
  1531  007D35  0425               	dw	1061
  1532  007D37  0434               	dw	1076
  1533  007D39  0443               	dw	1091
  1534  007D3B  0452               	dw	1106
  1535  007D3D  0460               	dw	1120
  1536  007D3F  046F               	dw	1135
  1537  007D41  047E               	dw	1150
  1538  007D43  048D               	dw	1165
  1539  007D45  049B               	dw	1179
  1540  007D47  04AA               	dw	1194
  1541  007D49  04B9               	dw	1209
  1542  007D4B  04C8               	dw	1224
  1543  007D4D  04D6               	dw	1238
  1544  007D4F  04E5               	dw	1253
  1545  007D51  04F4               	dw	1268
  1546  007D53  0503               	dw	1283
  1547  007D55  0511               	dw	1297
  1548  007D57  0520               	dw	1312
  1549  007D59  052F               	dw	1327
  1550  007D5B  053E               	dw	1342
  1551  007D5D  054C               	dw	1356
  1552  007D5F  055B               	dw	1371
  1553  007D61  056A               	dw	1386
  1554  007D63  0579               	dw	1401
  1555  007D65                     __end_of_finger_under_1:
  1556                           	opt stack 0
  1557  007D65                     _finger_under_3:
  1558                           	opt stack 0
  1559  007D65  0000               	dw	0
  1560  007D67  000C               	dw	12
  1561  007D69  0018               	dw	24
  1562  007D6B  0024               	dw	36
  1563  007D6D  0030               	dw	48
  1564  007D6F  003C               	dw	60
  1565  007D71  0048               	dw	72
  1566  007D73  0055               	dw	85
  1567  007D75  0061               	dw	97
  1568  007D77  006D               	dw	109
  1569  007D79  0079               	dw	121
  1570  007D7B  0085               	dw	133
  1571  007D7D  0091               	dw	145
  1572  007D7F  009E               	dw	158
  1573  007D81  00AA               	dw	170
  1574  007D83  00B6               	dw	182
  1575  007D85  00C2               	dw	194
  1576  007D87  00CE               	dw	206
  1577  007D89  00DA               	dw	218
  1578  007D8B  00E6               	dw	230
  1579  007D8D  00F3               	dw	243
  1580  007D8F  00FF               	dw	255
  1581  007D91  010B               	dw	267
  1582  007D93  0117               	dw	279
  1583  007D95  0123               	dw	291
  1584  007D97  012F               	dw	303
  1585  007D99  013C               	dw	316
  1586  007D9B  0148               	dw	328
  1587  007D9D  0154               	dw	340
  1588  007D9F  0160               	dw	352
  1589  007DA1  016C               	dw	364
  1590  007DA3  0178               	dw	376
  1591  007DA5  0184               	dw	388
  1592  007DA7  0191               	dw	401
  1593  007DA9  019D               	dw	413
  1594  007DAB  01A9               	dw	425
  1595  007DAD  01B5               	dw	437
  1596  007DAF  01C1               	dw	449
  1597  007DB1  01CD               	dw	461
  1598  007DB3  01DA               	dw	474
  1599  007DB5  01E6               	dw	486
  1600  007DB7  01F2               	dw	498
  1601  007DB9  01FE               	dw	510
  1602  007DBB  020A               	dw	522
  1603  007DBD  0216               	dw	534
  1604  007DBF  0222               	dw	546
  1605  007DC1  022F               	dw	559
  1606  007DC3  023B               	dw	571
  1607  007DC5  0247               	dw	583
  1608  007DC7  0253               	dw	595
  1609  007DC9  025F               	dw	607
  1610  007DCB  026B               	dw	619
  1611  007DCD  0278               	dw	632
  1612  007DCF  0284               	dw	644
  1613  007DD1  0290               	dw	656
  1614  007DD3  029C               	dw	668
  1615  007DD5  02A8               	dw	680
  1616  007DD7  02B4               	dw	692
  1617  007DD9  02C0               	dw	704
  1618  007DDB  02CD               	dw	717
  1619  007DDD  02D9               	dw	729
  1620  007DDF  02E5               	dw	741
  1621  007DE1  02F1               	dw	753
  1622  007DE3  02FD               	dw	765
  1623  007DE5  0309               	dw	777
  1624  007DE7  0316               	dw	790
  1625  007DE9  0322               	dw	802
  1626  007DEB  032E               	dw	814
  1627  007DED  033A               	dw	826
  1628  007DEF  0346               	dw	838
  1629  007DF1  0352               	dw	850
  1630  007DF3  035E               	dw	862
  1631  007DF5  036B               	dw	875
  1632  007DF7  0377               	dw	887
  1633  007DF9  0383               	dw	899
  1634  007DFB  038F               	dw	911
  1635  007DFD  039B               	dw	923
  1636  007DFF  03A7               	dw	935
  1637  007E01  03B4               	dw	948
  1638  007E03                     __end_of_finger_under_3:
  1639                           	opt stack 0
  1640  007E03                     _octpowers:
  1641                           	opt stack 0
  1642  007E03  0001               	dw	1
  1643  007E05  0008               	dw	8
  1644  007E07  0040               	dw	64
  1645  007E09  0200               	dw	512
  1646  007E0B  1000               	dw	4096
  1647  007E0D  8000               	dw	32768
  1648  007E0F                     __end_of_octpowers:
  1649                           	opt stack 0
  1650  007E0F                     _dpowers:
  1651                           	opt stack 0
  1652  007E0F  0001               	dw	1
  1653  007E11  000A               	dw	10
  1654  007E13  0064               	dw	100
  1655  007E15  03E8               	dw	1000
  1656  007E17  2710               	dw	10000
  1657  007E19                     __end_of_dpowers:
  1658                           	opt stack 0
  1659  007E19                     _hexpowers:
  1660                           	opt stack 0
  1661  007E19  0001               	dw	1
  1662  007E1B  0010               	dw	16
  1663  007E1D  0100               	dw	256
  1664  007E1F  1000               	dw	4096
  1665  007E21                     __end_of_hexpowers:
  1666                           	opt stack 0
  1667  0000                     _RCREG	set	4014
  1668  0000                     _TXREG	set	4013
  1669  0000                     _SPBRG	set	4015
  1670  0000                     _SPBRGH	set	4016
  1671  0000                     _BAUDCONbits	set	4024
  1672  0000                     _RCSTAbits	set	4011
  1673  0000                     _TXSTAbits	set	4012
  1674  0000                     _PORTBbits	set	3969
  1675  0000                     _TRISBbits	set	3987
  1676  0000                     _PORTDbits	set	3971
  1677  0000                     _PORTD	set	3971
  1678  0000                     _T2CONbits	set	4042
  1679  0000                     _PR2	set	4043
  1680  0000                     _PIR1bits	set	3998
  1681  0000                     _PIE1bits	set	3997
  1682  0000                     _INTCONbits	set	4082
  1683  0000                     _RCONbits	set	4048
  1684  0000                     _T0CONbits	set	4053
  1685  0000                     _OSCCONbits	set	4051
  1686  0000                     _LATAbits	set	3977
  1687  0000                     _TRISAbits	set	3986
  1688  0000                     _LATD	set	3980
  1689  0000                     _TRISD	set	3989
  1690  0000                     _TRMT	set	32097
  1691  0000                     _TXIF	set	31988
  1692  007E21  41                 	db	65	;'A'
  1693  007E22  54                 	db	84	;'T'
  1694  007E23  2B                 	db	43
  1695  007E24  43                 	db	67	;'C'
  1696  007E25  57                 	db	87	;'W'
  1697  007E26  53                 	db	83	;'S'
  1698  007E27  41                 	db	65	;'A'
  1699  007E28  50                 	db	80	;'P'
  1700  007E29  3D                 	db	61	;'='
  1701  007E2A  22                 	db	34
  1702  007E2B  25                 	db	37
  1703  007E2C  73                 	db	115	;'s'
  1704  007E2D  22                 	db	34
  1705  007E2E  2C                 	db	44
  1706  007E2F  22                 	db	34
  1707  007E30  25                 	db	37
  1708  007E31  73                 	db	115	;'s'
  1709  007E32  22                 	db	34
  1710  007E33  2C                 	db	44
  1711  007E34  31                 	db	49	;'1'
  1712  007E35  2C                 	db	44
  1713  007E36  25                 	db	37
  1714  007E37  73                 	db	115	;'s'
  1715  007E38  0D                 	db	13
  1716  007E39  0A                 	db	10
  1717  007E3A  00                 	db	0
  1718  007E3B  41                 	db	65	;'A'
  1719  007E3C  54                 	db	84	;'T'
  1720  007E3D  2B                 	db	43
  1721  007E3E  55                 	db	85	;'U'
  1722  007E3F  41                 	db	65	;'A'
  1723  007E40  52                 	db	82	;'R'
  1724  007E41  54                 	db	84	;'T'
  1725  007E42  3D                 	db	61	;'='
  1726  007E43  31                 	db	49	;'1'
  1727  007E44  31                 	db	49	;'1'
  1728  007E45  35                 	db	53	;'5'
  1729  007E46  32                 	db	50	;'2'
  1730  007E47  30                 	db	48	;'0'
  1731  007E48  30                 	db	48	;'0'
  1732  007E49  2C                 	db	44
  1733  007E4A  38                 	db	56	;'8'
  1734  007E4B  2C                 	db	44
  1735  007E4C  31                 	db	49	;'1'
  1736  007E4D  2C                 	db	44
  1737  007E4E  30                 	db	48	;'0'
  1738  007E4F  2C                 	db	44
  1739  007E50  30                 	db	48	;'0'
  1740  007E51  0D                 	db	13
  1741  007E52  0A                 	db	10
  1742  007E53  00                 	db	0
  1743  007E54  41                 	db	65	;'A'
  1744  007E55  54                 	db	84	;'T'
  1745  007E56  2B                 	db	43
  1746  007E57  55                 	db	85	;'U'
  1747  007E58  41                 	db	65	;'A'
  1748  007E59  52                 	db	82	;'R'
  1749  007E5A  54                 	db	84	;'T'
  1750  007E5B  3D                 	db	61	;'='
  1751  007E5C  39                 	db	57	;'9'
  1752  007E5D  36                 	db	54	;'6'
  1753  007E5E  30                 	db	48	;'0'
  1754  007E5F  30                 	db	48	;'0'
  1755  007E60  2C                 	db	44
  1756  007E61  38                 	db	56	;'8'
  1757  007E62  2C                 	db	44
  1758  007E63  31                 	db	49	;'1'
  1759  007E64  2C                 	db	44
  1760  007E65  30                 	db	48	;'0'
  1761  007E66  2C                 	db	44
  1762  007E67  30                 	db	48	;'0'
  1763  007E68  0D                 	db	13
  1764  007E69  0A                 	db	10
  1765  007E6A  00                 	db	0
  1766  007E6B  41                 	db	65	;'A'
  1767  007E6C  54                 	db	84	;'T'
  1768  007E6D  2B                 	db	43
  1769  007E6E  43                 	db	67	;'C'
  1770  007E6F  49                 	db	73	;'I'
  1771  007E70  50                 	db	80	;'P'
  1772  007E71  53                 	db	83	;'S'
  1773  007E72  45                 	db	69	;'E'
  1774  007E73  52                 	db	82	;'R'
  1775  007E74  56                 	db	86	;'V'
  1776  007E75  45                 	db	69	;'E'
  1777  007E76  52                 	db	82	;'R'
  1778  007E77  3D                 	db	61	;'='
  1779  007E78  31                 	db	49	;'1'
  1780  007E79  2C                 	db	44
  1781  007E7A  35                 	db	53	;'5'
  1782  007E7B  30                 	db	48	;'0'
  1783  007E7C  30                 	db	48	;'0'
  1784  007E7D  30                 	db	48	;'0'
  1785  007E7E  0D                 	db	13
  1786  007E7F  0A                 	db	10
  1787  007E80  00                 	db	0
  1788  007E81                     STR_15:
  1789  007E81  41                 	db	65	;'A'
  1790  007E82  54                 	db	84	;'T'
  1791  007E83  2B                 	db	43
  1792  007E84  43                 	db	67	;'C'
  1793  007E85  57                 	db	87	;'W'
  1794  007E86  4A                 	db	74	;'J'
  1795  007E87  41                 	db	65	;'A'
  1796  007E88  50                 	db	80	;'P'
  1797  007E89  3D                 	db	61	;'='
  1798  007E8A  22                 	db	34
  1799  007E8B  25                 	db	37
  1800  007E8C  73                 	db	115	;'s'
  1801  007E8D  22                 	db	34
  1802  007E8E  2C                 	db	44
  1803  007E8F  22                 	db	34
  1804  007E90  25                 	db	37
  1805  007E91  73                 	db	115	;'s'
  1806  007E92  22                 	db	34
  1807  007E93  0D                 	db	13
  1808  007E94  0A                 	db	10
  1809  007E95  00                 	db	0
  1810  007E96                     STR_24:
  1811  007E96  41                 	db	65	;'A'
  1812  007E97  54                 	db	84	;'T'
  1813  007E98  2B                 	db	43
  1814  007E99  43                 	db	67	;'C'
  1815  007E9A  49                 	db	73	;'I'
  1816  007E9B  50                 	db	80	;'P'
  1817  007E9C  53                 	db	83	;'S'
  1818  007E9D  54                 	db	84	;'T'
  1819  007E9E  41                 	db	65	;'A'
  1820  007E9F  52                 	db	82	;'R'
  1821  007EA0  54                 	db	84	;'T'
  1822  007EA1  3D                 	db	61	;'='
  1823  007EA2  25                 	db	37
  1824  007EA3  64                 	db	100	;'d'
  1825  007EA4  2C                 	db	44
  1826  007EA5  25                 	db	37
  1827  007EA6  73                 	db	115	;'s'
  1828  007EA7  0D                 	db	13
  1829  007EA8  0A                 	db	10
  1830  007EA9  00                 	db	0
  1831  007EAA  41                 	db	65	;'A'
  1832  007EAB  54                 	db	84	;'T'
  1833  007EAC  2B                 	db	43
  1834  007EAD  43                 	db	67	;'C'
  1835  007EAE  49                 	db	73	;'I'
  1836  007EAF  50                 	db	80	;'P'
  1837  007EB0  53                 	db	83	;'S'
  1838  007EB1  45                 	db	69	;'E'
  1839  007EB2  4E                 	db	78	;'N'
  1840  007EB3  44                 	db	68	;'D'
  1841  007EB4  3D                 	db	61	;'='
  1842  007EB5  25                 	db	37
  1843  007EB6  64                 	db	100	;'d'
  1844  007EB7  2C                 	db	44
  1845  007EB8  25                 	db	37
  1846  007EB9  64                 	db	100	;'d'
  1847  007EBA  0D                 	db	13
  1848  007EBB  0A                 	db	10
  1849  007EBC  00                 	db	0
  1850  007EBD                     STR_64:
  1851  007EBD  30                 	db	48	;'0'
  1852  007EBE  31                 	db	49	;'1'
  1853  007EBF  32                 	db	50	;'2'
  1854  007EC0  33                 	db	51	;'3'
  1855  007EC1  34                 	db	52	;'4'
  1856  007EC2  35                 	db	53	;'5'
  1857  007EC3  36                 	db	54	;'6'
  1858  007EC4  37                 	db	55	;'7'
  1859  007EC5  38                 	db	56	;'8'
  1860  007EC6  39                 	db	57	;'9'
  1861  007EC7  41                 	db	65	;'A'
  1862  007EC8  42                 	db	66	;'B'
  1863  007EC9  43                 	db	67	;'C'
  1864  007ECA  44                 	db	68	;'D'
  1865  007ECB  45                 	db	69	;'E'
  1866  007ECC  46                 	db	70	;'F'
  1867  007ECD  00                 	db	0
  1868  007ECE                     STR_65:
  1869  007ECE  30                 	db	48	;'0'
  1870  007ECF  31                 	db	49	;'1'
  1871  007ED0  32                 	db	50	;'2'
  1872  007ED1  33                 	db	51	;'3'
  1873  007ED2  34                 	db	52	;'4'
  1874  007ED3  35                 	db	53	;'5'
  1875  007ED4  36                 	db	54	;'6'
  1876  007ED5  37                 	db	55	;'7'
  1877  007ED6  38                 	db	56	;'8'
  1878  007ED7  39                 	db	57	;'9'
  1879  007ED8  61                 	db	97	;'a'
  1880  007ED9  62                 	db	98	;'b'
  1881  007EDA  63                 	db	99	;'c'
  1882  007EDB  64                 	db	100	;'d'
  1883  007EDC  65                 	db	101	;'e'
  1884  007EDD  66                 	db	102	;'f'
  1885  007EDE  00                 	db	0
  1886  007EDF                     STR_25:
  1887  007EDF  41                 	db	65	;'A'
  1888  007EE0  54                 	db	84	;'T'
  1889  007EE1  2B                 	db	43
  1890  007EE2  43                 	db	67	;'C'
  1891  007EE3  49                 	db	73	;'I'
  1892  007EE4  50                 	db	80	;'P'
  1893  007EE5  53                 	db	83	;'S'
  1894  007EE6  54                 	db	84	;'T'
  1895  007EE7  41                 	db	65	;'A'
  1896  007EE8  52                 	db	82	;'R'
  1897  007EE9  54                 	db	84	;'T'
  1898  007EEA  3D                 	db	61	;'='
  1899  007EEB  25                 	db	37
  1900  007EEC  73                 	db	115	;'s'
  1901  007EED  0D                 	db	13
  1902  007EEE  0A                 	db	10
  1903  007EEF  00                 	db	0
  1904  007EF0  41                 	db	65	;'A'
  1905  007EF1  54                 	db	84	;'T'
  1906  007EF2  2B                 	db	43
  1907  007EF3  43                 	db	67	;'C'
  1908  007EF4  49                 	db	73	;'I'
  1909  007EF5  50                 	db	80	;'P'
  1910  007EF6  4D                 	db	77	;'M'
  1911  007EF7  4F                 	db	79	;'O'
  1912  007EF8  44                 	db	68	;'D'
  1913  007EF9  45                 	db	69	;'E'
  1914  007EFA  3D                 	db	61	;'='
  1915  007EFB  30                 	db	48	;'0'
  1916  007EFC  0D                 	db	13
  1917  007EFD  0A                 	db	10
  1918  007EFE  00                 	db	0
  1919  007EFF                     STR_53:
  1920  007EFF  41                 	db	65	;'A'
  1921  007F00  54                 	db	84	;'T'
  1922  007F01  2B                 	db	43
  1923  007F02  43                 	db	67	;'C'
  1924  007F03  49                 	db	73	;'I'
  1925  007F04  50                 	db	80	;'P'
  1926  007F05  4D                 	db	77	;'M'
  1927  007F06  4F                 	db	79	;'O'
  1928  007F07  44                 	db	68	;'D'
  1929  007F08  45                 	db	69	;'E'
  1930  007F09  3D                 	db	61	;'='
  1931  007F0A  31                 	db	49	;'1'
  1932  007F0B  0D                 	db	13
  1933  007F0C  0A                 	db	10
  1934  007F0D  00                 	db	0
  1935  007F0E                     STR_41:
  1936  007F0E  41                 	db	65	;'A'
  1937  007F0F  54                 	db	84	;'T'
  1938  007F10  2B                 	db	43
  1939  007F11  43                 	db	67	;'C'
  1940  007F12  49                 	db	73	;'I'
  1941  007F13  50                 	db	80	;'P'
  1942  007F14  4D                 	db	77	;'M'
  1943  007F15  55                 	db	85	;'U'
  1944  007F16  58                 	db	88	;'X'
  1945  007F17  3D                 	db	61	;'='
  1946  007F18  30                 	db	48	;'0'
  1947  007F19  0D                 	db	13
  1948  007F1A  0A                 	db	10
  1949  007F1B  00                 	db	0
  1950  007F1C                     STR_9:
  1951  007F1C  41                 	db	65	;'A'
  1952  007F1D  54                 	db	84	;'T'
  1953  007F1E  2B                 	db	43
  1954  007F1F  43                 	db	67	;'C'
  1955  007F20  57                 	db	87	;'W'
  1956  007F21  4D                 	db	77	;'M'
  1957  007F22  4F                 	db	79	;'O'
  1958  007F23  44                 	db	68	;'D'
  1959  007F24  45                 	db	69	;'E'
  1960  007F25  3D                 	db	61	;'='
  1961  007F26  31                 	db	49	;'1'
  1962  007F27  0D                 	db	13
  1963  007F28  0A                 	db	10
  1964  007F29  00                 	db	0
  1965  007F2A  41                 	db	65	;'A'
  1966  007F2B  54                 	db	84	;'T'
  1967  007F2C  2B                 	db	43
  1968  007F2D  43                 	db	67	;'C'
  1969  007F2E  49                 	db	73	;'I'
  1970  007F2F  50                 	db	80	;'P'
  1971  007F30  4D                 	db	77	;'M'
  1972  007F31  55                 	db	85	;'U'
  1973  007F32  58                 	db	88	;'X'
  1974  007F33  3D                 	db	61	;'='
  1975  007F34  31                 	db	49	;'1'
  1976  007F35  0D                 	db	13
  1977  007F36  0A                 	db	10
  1978  007F37  00                 	db	0
  1979  007F38                     STR_11:
  1980  007F38  41                 	db	65	;'A'
  1981  007F39  54                 	db	84	;'T'
  1982  007F3A  2B                 	db	43
  1983  007F3B  43                 	db	67	;'C'
  1984  007F3C  57                 	db	87	;'W'
  1985  007F3D  4D                 	db	77	;'M'
  1986  007F3E  4F                 	db	79	;'O'
  1987  007F3F  44                 	db	68	;'D'
  1988  007F40  45                 	db	69	;'E'
  1989  007F41  3D                 	db	61	;'='
  1990  007F42  32                 	db	50	;'2'
  1991  007F43  0D                 	db	13
  1992  007F44  0A                 	db	10
  1993  007F45  00                 	db	0
  1994  007F46                     STR_13:
  1995  007F46  41                 	db	65	;'A'
  1996  007F47  54                 	db	84	;'T'
  1997  007F48  2B                 	db	43
  1998  007F49  43                 	db	67	;'C'
  1999  007F4A  57                 	db	87	;'W'
  2000  007F4B  4D                 	db	77	;'M'
  2001  007F4C  4F                 	db	79	;'O'
  2002  007F4D  44                 	db	68	;'D'
  2003  007F4E  45                 	db	69	;'E'
  2004  007F4F  3D                 	db	61	;'='
  2005  007F50  33                 	db	51	;'3'
  2006  007F51  0D                 	db	13
  2007  007F52  0A                 	db	10
  2008  007F53  00                 	db	0
  2009  007F54                     STR_32:
  2010  007F54  41                 	db	65	;'A'
  2011  007F55  54                 	db	84	;'T'
  2012  007F56  2B                 	db	43
  2013  007F57  43                 	db	67	;'C'
  2014  007F58  57                 	db	87	;'W'
  2015  007F59  4D                 	db	77	;'M'
  2016  007F5A  4F                 	db	79	;'O'
  2017  007F5B  44                 	db	68	;'D'
  2018  007F5C  45                 	db	69	;'E'
  2019  007F5D  3F                 	db	63	;'?'
  2020  007F5E  0D                 	db	13
  2021  007F5F  0A                 	db	10
  2022  007F60  00                 	db	0
  2023  007F61                     STR_20:
  2024  007F61  22                 	db	34
  2025  007F62  25                 	db	37
  2026  007F63  73                 	db	115	;'s'
  2027  007F64  22                 	db	34
  2028  007F65  2C                 	db	44
  2029  007F66  22                 	db	34
  2030  007F67  25                 	db	37
  2031  007F68  73                 	db	115	;'s'
  2032  007F69  22                 	db	34
  2033  007F6A  2C                 	db	44
  2034  007F6B  25                 	db	37
  2035  007F6C  73                 	db	115	;'s'
  2036  007F6D  00                 	db	0
  2037  007F6E                     STR_57:
  2038  007F6E  31                 	db	49	;'1'
  2039  007F6F  39                 	db	57	;'9'
  2040  007F70  32                 	db	50	;'2'
  2041  007F71  2E                 	db	46
  2042  007F72  31                 	db	49	;'1'
  2043  007F73  36                 	db	54	;'6'
  2044  007F74  38                 	db	56	;'8'
  2045  007F75  2E                 	db	46
  2046  007F76  34                 	db	52	;'4'
  2047  007F77  2E                 	db	46
  2048  007F78  31                 	db	49	;'1'
  2049  007F79  00                 	db	0
  2050  007F7A                     STR_49:
  2051  007F7A  41                 	db	65	;'A'
  2052  007F7B  54                 	db	84	;'T'
  2053  007F7C  2B                 	db	43
  2054  007F7D  43                 	db	67	;'C'
  2055  007F7E  57                 	db	87	;'W'
  2056  007F7F  51                 	db	81	;'Q'
  2057  007F80  41                 	db	65	;'A'
  2058  007F81  50                 	db	80	;'P'
  2059  007F82  0D                 	db	13
  2060  007F83  0A                 	db	10
  2061  007F84  00                 	db	0
  2062  007F85                     STR_39:
  2063  007F85  7A                 	db	122	;'z'
  2064  007F86  78                 	db	120	;'x'
  2065  007F87  34                 	db	52	;'4'
  2066  007F88  35                 	db	53	;'5'
  2067  007F89  32                 	db	50	;'2'
  2068  007F8A  32                 	db	50	;'2'
  2069  007F8B  33                 	db	51	;'3'
  2070  007F8C  33                 	db	51	;'3'
  2071  007F8D  31                 	db	49	;'1'
  2072  007F8E  00                 	db	0
  2073  007F8F                     STR_36:
  2074  007F8F  2B                 	db	43
  2075  007F90  43                 	db	67	;'C'
  2076  007F91  57                 	db	87	;'W'
  2077  007F92  4D                 	db	77	;'M'
  2078  007F93  4F                 	db	79	;'O'
  2079  007F94  44                 	db	68	;'D'
  2080  007F95  45                 	db	69	;'E'
  2081  007F96  3A                 	db	58	;':'
  2082  007F97  31                 	db	49	;'1'
  2083  007F98  00                 	db	0
  2084  007F99  2B                 	db	43
  2085  007F9A  43                 	db	67	;'C'
  2086  007F9B  57                 	db	87	;'W'
  2087  007F9C  4D                 	db	77	;'M'
  2088  007F9D  4F                 	db	79	;'O'
  2089  007F9E  44                 	db	68	;'D'
  2090  007F9F  45                 	db	69	;'E'
  2091  007FA0  3A                 	db	58	;':'
  2092  007FA1  32                 	db	50	;'2'
  2093  007FA2  00                 	db	0
  2094  007FA3                     STR_17:
  2095  007FA3  43                 	db	67	;'C'
  2096  007FA4  4F                 	db	79	;'O'
  2097  007FA5  4E                 	db	78	;'N'
  2098  007FA6  4E                 	db	78	;'N'
  2099  007FA7  45                 	db	69	;'E'
  2100  007FA8  43                 	db	67	;'C'
  2101  007FA9  54                 	db	84	;'T'
  2102  007FAA  45                 	db	69	;'E'
  2103  007FAB  44                 	db	68	;'D'
  2104  007FAC  00                 	db	0
  2105  007FAD                     STR_6:
  2106  007FAD  41                 	db	65	;'A'
  2107  007FAE  54                 	db	84	;'T'
  2108  007FAF  2B                 	db	43
  2109  007FB0  52                 	db	82	;'R'
  2110  007FB1  53                 	db	83	;'S'
  2111  007FB2  54                 	db	84	;'T'
  2112  007FB3  0D                 	db	13
  2113  007FB4  0A                 	db	10
  2114  007FB5  00                 	db	0
  2115  007FB6                     STR_3:
  2116  007FB6  53                 	db	83	;'S'
  2117  007FB7  45                 	db	69	;'E'
  2118  007FB8  4E                 	db	78	;'N'
  2119  007FB9  44                 	db	68	;'D'
  2120  007FBA  20                 	db	32
  2121  007FBB  4F                 	db	79	;'O'
  2122  007FBC  4B                 	db	75	;'K'
  2123  007FBD  00                 	db	0
  2124  007FBE                     STR_26:
  2125  007FBE  43                 	db	67	;'C'
  2126  007FBF  4F                 	db	79	;'O'
  2127  007FC0  4E                 	db	78	;'N'
  2128  007FC1  4E                 	db	78	;'N'
  2129  007FC2  45                 	db	69	;'E'
  2130  007FC3  43                 	db	67	;'C'
  2131  007FC4  54                 	db	84	;'T'
  2132  007FC5  00                 	db	0
  2133  007FC6                     STR_63:
  2134  007FC6  28                 	db	40
  2135  007FC7  6E                 	db	110	;'n'
  2136  007FC8  75                 	db	117	;'u'
  2137  007FC9  6C                 	db	108	;'l'
  2138  007FCA  6C                 	db	108	;'l'
  2139  007FCB  29                 	db	41
  2140  007FCC  00                 	db	0
  2141  007FCD                     STR_27:
  2142  007FCD  41                 	db	65	;'A'
  2143  007FCE  4C                 	db	76	;'L'
  2144  007FCF  52                 	db	82	;'R'
  2145  007FD0  45                 	db	69	;'E'
  2146  007FD1  41                 	db	65	;'A'
  2147  007FD2  59                 	db	89	;'Y'
  2148  007FD3  00                 	db	0
  2149  007FD4                     STR_62:
  2150  007FD4  48                 	db	72	;'H'
  2151  007FD5  65                 	db	101	;'e'
  2152  007FD6  6C                 	db	108	;'l'
  2153  007FD7  6C                 	db	108	;'l'
  2154  007FD8  6F                 	db	111	;'o'
  2155  007FD9  00                 	db	0
  2156  007FDA                     STR_8:
  2157  007FDA  72                 	db	114	;'r'
  2158  007FDB  65                 	db	101	;'e'
  2159  007FDC  61                 	db	97	;'a'
  2160  007FDD  64                 	db	100	;'d'
  2161  007FDE  79                 	db	121	;'y'
  2162  007FDF  00                 	db	0
  2163  007FE0                     STR_4:
  2164  007FE0  41                 	db	65	;'A'
  2165  007FE1  54                 	db	84	;'T'
  2166  007FE2  0D                 	db	13
  2167  007FE3  0A                 	db	10
  2168  007FE4  00                 	db	0
  2169  007FE5                     STR_58:
  2170  007FE5  35                 	db	53	;'5'
  2171  007FE6  30                 	db	48	;'0'
  2172  007FE7  30                 	db	48	;'0'
  2173  007FE8  30                 	db	48	;'0'
  2174  007FE9  00                 	db	0
  2175  007FEA                     STR_38:
  2176  007FEA  4B                 	db	75	;'K'
  2177  007FEB  45                 	db	69	;'E'
  2178  007FEC  4E                 	db	78	;'N'
  2179  007FED  00                 	db	0
  2180  007FEE                     STR_21:
  2181  007FEE  54                 	db	84	;'T'
  2182  007FEF  43                 	db	67	;'C'
  2183  007FF0  50                 	db	80	;'P'
  2184  007FF1  00                 	db	0
  2185  007FF2                     STR_23:
  2186  007FF2  55                 	db	85	;'U'
  2187  007FF3  44                 	db	68	;'D'
  2188  007FF4  50                 	db	80	;'P'
  2189  007FF5  00                 	db	0
  2190  007FF6  3E                 	db	62	;'>'
  2191  007FF7  20                 	db	32
  2192  007FF8  00                 	db	0
  2193  007FF9                     STR_60:
  2194  007FF9  00                 	db	0
  2195  007FFA  00                 	db	0
  2196  007FFB                     STR_59:
  2197  007FFB  21                 	db	33
  2198  007FFC  00                 	db	0
  2199  007FFD  34                 	db	52	;'4'
  2200  007FFE  00                 	db	0
  2201  0000                     
  2202                           ; #config settings
  2203  007FFF  00                 	db	0	; dummy byte at the end
  2204  0000                     
  2205                           	psect	cinit
  2206  001430                     __pcinit:
  2207                           	opt stack 0
  2208  001430                     start_initialization:
  2209                           	opt stack 0
  2210  001430                     __initialization:
  2211                           	opt stack 0
  2212                           
  2213                           ; Initialize objects allocated to COMRAM (8 bytes)
  2214                           ; load TBLPTR registers with __pidataCOMRAM
  2215  001430  0EAC               	movlw	low __pidataCOMRAM
  2216  001432  6EF6               	movwf	tblptrl,c
  2217  001434  0E19               	movlw	high __pidataCOMRAM
  2218  001436  6EF7               	movwf	tblptrh,c
  2219  001438  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2220  00143A  6EF8               	movwf	tblptru,c
  2221  00143C  EE00  F063         	lfsr	0,__pdataCOMRAM
  2222  001440  EE10 F008          	lfsr	1,8
  2223  001444                     copy_data0:
  2224  001444  0009               	tblrd		*+
  2225  001446  CFF5 FFEE          	movff	tablat,postinc0
  2226  00144A  50E5               	movf	postdec1,w,c
  2227  00144C  50E1               	movf	fsr1l,w,c
  2228  00144E  E1FA               	bnz	copy_data0
  2229                           
  2230                           ; Clear objects allocated to BANK3 (100 bytes)
  2231  001450  EE03  F000         	lfsr	0,__pbssBANK3
  2232  001454  0E64               	movlw	100
  2233  001456                     clear_0:
  2234  001456  6AEE               	clrf	postinc0,c
  2235  001458  06E8               	decf	wreg,f,c
  2236  00145A  E1FD               	bnz	clear_0
  2237                           
  2238                           ; Clear objects allocated to BANK2 (206 bytes)
  2239  00145C  EE02  F000         	lfsr	0,__pbssBANK2
  2240  001460  0ECE               	movlw	206
  2241  001462                     clear_1:
  2242  001462  6AEE               	clrf	postinc0,c
  2243  001464  06E8               	decf	wreg,f,c
  2244  001466  E1FD               	bnz	clear_1
  2245                           
  2246                           ; Clear objects allocated to COMRAM (39 bytes)
  2247  001468  EE00  F03C         	lfsr	0,__pbssCOMRAM
  2248  00146C  0E27               	movlw	39
  2249  00146E                     clear_2:
  2250  00146E  6AEE               	clrf	postinc0,c
  2251  001470  06E8               	decf	wreg,f,c
  2252  001472  E1FD               	bnz	clear_2
  2253  001474                     end_of_initialization:
  2254                           	opt stack 0
  2255  001474                     __end_of__initialization:
  2256                           	opt stack 0
  2257  001474  906B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2258  001476  926B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2259  001478  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2260  00147A  6EF8               	movwf	tblptru,c
  2261  00147C  0100               	movlb	0
  2262  00147E  EF7A  F008         	goto	_main	;jump to C main() function
  2263                           tblptru	equ	0xFF8
  2264                           tblptrh	equ	0xFF7
  2265                           tblptrl	equ	0xFF6
  2266                           tablat	equ	0xFF5
  2267                           postinc0	equ	0xFEE
  2268                           wreg	equ	0xFE8
  2269                           postdec1	equ	0xFE5
  2270                           fsr1l	equ	0xFE1
  2271                           
  2272                           	psect	bssCOMRAM
  2273  00003C                     __pbssCOMRAM:
  2274                           	opt stack 0
  2275  00003C                     _test:
  2276                           	opt stack 0
  2277  00003C                     	ds	30
  2278  00005A                     _s:
  2279                           	opt stack 0
  2280  00005A                     	ds	2
  2281  00005C                     _IP:
  2282                           	opt stack 0
  2283  00005C                     	ds	2
  2284  00005E                     _test_index:
  2285                           	opt stack 0
  2286  00005E                     	ds	2
  2287  000060                     _work_flag:
  2288                           	opt stack 0
  2289  000060                     	ds	1
  2290  000061                     _write:
  2291                           	opt stack 0
  2292  000061                     	ds	1
  2293  000062                     _count:
  2294                           	opt stack 0
  2295  000062                     	ds	1
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           postinc0	equ	0xFEE
  2301                           wreg	equ	0xFE8
  2302                           postdec1	equ	0xFE5
  2303                           fsr1l	equ	0xFE1
  2304                           
  2305                           	psect	dataCOMRAM
  2306  000063                     __pdataCOMRAM:
  2307                           	opt stack 0
  2308  000063                     LCD_CreateFont@F3803:
  2309                           	opt stack 0
  2310  000063                     	ds	8
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1l	equ	0xFE1
  2319                           
  2320                           	psect	bssBANK2
  2321  000200                     __pbssBANK2:
  2322                           	opt stack 0
  2323  000200                     _strPc_Fram_Record:
  2324                           	opt stack 0
  2325  000200                     	ds	52
  2326  000234                     _str1_1esp8266:
  2327                           	opt stack 0
  2328  000234                     	ds	51
  2329  000267                     _strPc1_1_Fram_Record:
  2330                           	opt stack 0
  2331  000267                     	ds	51
  2332  00029A                     _strEsp8266_Fram_Record:
  2333                           	opt stack 0
  2334  00029A                     	ds	52
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           postinc0	equ	0xFEE
  2340                           wreg	equ	0xFE8
  2341                           postdec1	equ	0xFE5
  2342                           fsr1l	equ	0xFE1
  2343                           
  2344                           	psect	bssBANK3
  2345  000300                     __pbssBANK3:
  2346                           	opt stack 0
  2347  000300                     ESP8266_Link_Server@F4048:
  2348                           	opt stack 0
  2349  000300                     	ds	100
  2350                           tblptru	equ	0xFF8
  2351                           tblptrh	equ	0xFF7
  2352                           tblptrl	equ	0xFF6
  2353                           tablat	equ	0xFF5
  2354                           postinc0	equ	0xFEE
  2355                           wreg	equ	0xFE8
  2356                           postdec1	equ	0xFE5
  2357                           fsr1l	equ	0xFE1
  2358                           
  2359                           	psect	cstackBANK1
  2360  000100                     __pcstackBANK1:
  2361                           	opt stack 0
  2362  000100                     ESP8266_JoinAP@cCmd:
  2363                           	opt stack 0
  2364  000100                     ESP8266_Link_Server@cCmd:
  2365                           	opt stack 0
  2366                           
  2367                           ; 120 bytes @ 0x0
  2368  000100                     	ds	120
  2369  000178                     ESP8266_Link_Server@cStr:
  2370                           	opt stack 0
  2371                           
  2372                           ; 100 bytes @ 0x78
  2373  000178                     	ds	100
  2374  0001DC                     ESP8266_Link_Server@enumE:
  2375                           	opt stack 0
  2376                           
  2377                           ; 1 bytes @ 0xDC
  2378  0001DC                     	ds	1
  2379                           tblptru	equ	0xFF8
  2380                           tblptrh	equ	0xFF7
  2381                           tblptrl	equ	0xFF6
  2382                           tablat	equ	0xFF5
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           postdec1	equ	0xFE5
  2386                           fsr1l	equ	0xFE1
  2387                           
  2388                           	psect	cstackBANK0
  2389  000080                     __pcstackBANK0:
  2390                           	opt stack 0
  2391  000080                     sprintf@idx:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x0
  2395  000080                     	ds	1
  2396  000081                     _sprintf$1439:
  2397                           	opt stack 0
  2398                           
  2399                           ; 2 bytes @ 0x1
  2400  000081                     	ds	2
  2401  000083                     _sprintf$1440:
  2402                           	opt stack 0
  2403                           
  2404                           ; 2 bytes @ 0x3
  2405  000083                     	ds	2
  2406  000085                     _sprintf$1446:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x5
  2410  000085                     	ds	2
  2411  000087                     sprintf@cp:
  2412                           	opt stack 0
  2413                           
  2414                           ; 2 bytes @ 0x7
  2415  000087                     	ds	2
  2416  000089                     sprintf@len:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x9
  2420  000089                     	ds	2
  2421  00008B                     sprintf@ap:
  2422                           	opt stack 0
  2423                           
  2424                           ; 2 bytes @ 0xB
  2425  00008B                     	ds	2
  2426  00008D                     sprintf@val:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0xD
  2430  00008D                     	ds	2
  2431  00008F                     sprintf@prec:
  2432                           	opt stack 0
  2433                           
  2434                           ; 1 bytes @ 0xF
  2435  00008F                     	ds	1
  2436  000090                     sprintf@width:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x10
  2440  000090                     	ds	2
  2441  000092                     sprintf@c:
  2442                           	opt stack 0
  2443                           
  2444                           ; 1 bytes @ 0x12
  2445  000092                     	ds	1
  2446  000093                     sprintf@flag:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x13
  2450  000093                     	ds	2
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           postinc0	equ	0xFEE
  2456                           wreg	equ	0xFE8
  2457                           postdec1	equ	0xFE5
  2458                           fsr1l	equ	0xFE1
  2459                           
  2460                           	psect	cstackCOMRAM
  2461  000001                     __pcstackCOMRAM:
  2462                           	opt stack 0
  2463  000001                     ??_time_adc:
  2464  000001                     
  2465                           ; 1 bytes @ 0x0
  2466  000001                     	ds	16
  2467  000011                     time_adc@ch:
  2468                           	opt stack 0
  2469                           
  2470                           ; 1 bytes @ 0x10
  2471  000011                     	ds	1
  2472  000012                     ??_Delay10KTCYx:
  2473  000012                     ??_isdigit:
  2474  000012                     ?_strlen:
  2475                           	opt stack 0
  2476  000012                     ?_strchr:
  2477                           	opt stack 0
  2478  000012                     ?___wmul:
  2479                           	opt stack 0
  2480  000012                     ?___lwdiv:
  2481                           	opt stack 0
  2482  000012                     LCDWriteNibble@rs:
  2483                           	opt stack 0
  2484  000012                     Delay10TCYx@unit:
  2485                           	opt stack 0
  2486  000012                     Delay1TCYx@unit:
  2487                           	opt stack 0
  2488  000012                     ESP8266_Uart@cmd:
  2489                           	opt stack 0
  2490  000012                     ___wmul@multiplier:
  2491                           	opt stack 0
  2492  000012                     ___lwdiv@dividend:
  2493                           	opt stack 0
  2494  000012                     memset@p1:
  2495                           	opt stack 0
  2496  000012                     strchr@ptr:
  2497                           	opt stack 0
  2498  000012                     strlen@s:
  2499                           	opt stack 0
  2500                           
  2501                           ; 2 bytes @ 0x11
  2502  000012                     	ds	1
  2503  000013                     LCDWriteNibble@ch:
  2504                           	opt stack 0
  2505  000013                     Delay10KTCYx@unit:
  2506                           	opt stack 0
  2507  000013                     _isdigit$1676:
  2508                           	opt stack 0
  2509  000013                     delay_us@us:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x12
  2513  000013                     	ds	1
  2514  000014                     ??_strlen:
  2515  000014                     ??_ESP8266_Uart:
  2516  000014                     isdigit@c:
  2517                           	opt stack 0
  2518  000014                     delay_ms@ms:
  2519                           	opt stack 0
  2520  000014                     ___wmul@multiplicand:
  2521                           	opt stack 0
  2522  000014                     ___lwdiv@divisor:
  2523                           	opt stack 0
  2524  000014                     memset@c:
  2525                           	opt stack 0
  2526  000014                     strchr@chr:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x13
  2530  000014                     	ds	1
  2531  000015                     ??_IIC_Send_Byte:
  2532  000015                     IIC_Wait_Ack@ucErrTime:
  2533                           	opt stack 0
  2534                           
  2535                           ; 1 bytes @ 0x14
  2536  000015                     	ds	1
  2537  000016                     LCD_WriteCmd@ch:
  2538                           	opt stack 0
  2539  000016                     LCD_WriteData@ch:
  2540                           	opt stack 0
  2541  000016                     IIC_Send_Byte@txd:
  2542                           	opt stack 0
  2543  000016                     ___lwdiv@counter:
  2544                           	opt stack 0
  2545  000016                     ESP8266_Uart@index:
  2546                           	opt stack 0
  2547  000016                     ___wmul@product:
  2548                           	opt stack 0
  2549  000016                     memset@n:
  2550                           	opt stack 0
  2551  000016                     strlen@cp:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x15
  2555  000016                     	ds	1
  2556  000017                     LCD_GotoXY@ln:
  2557                           	opt stack 0
  2558  000017                     IIC_Send_Byte@t:
  2559                           	opt stack 0
  2560  000017                     LCD_WritetStr@str:
  2561                           	opt stack 0
  2562  000017                     ___lwdiv@quotient:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x16
  2566  000017                     	ds	1
  2567  000018                     ??_LCD_GotoXY:
  2568  000018                     ?_strncmp:
  2569                           	opt stack 0
  2570  000018                     PCA9685_writeOneByte@data:
  2571                           	opt stack 0
  2572  000018                     memset@p:
  2573                           	opt stack 0
  2574  000018                     strncmp@s1:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x17
  2578  000018                     	ds	1
  2579  000019                     ??_LCD_WritetStr:
  2580  000019                     ?___lwmod:
  2581                           	opt stack 0
  2582  000019                     PCA9685_writeOneByte@addr:
  2583                           	opt stack 0
  2584  000019                     ___lwmod@dividend:
  2585                           	opt stack 0
  2586                           
  2587                           ; 2 bytes @ 0x18
  2588  000019                     	ds	1
  2589  00001A                     transmit_finger@HL_Value:
  2590                           	opt stack 0
  2591  00001A                     _LCD_GotoXY$640:
  2592                           	opt stack 0
  2593  00001A                     strncmp@s2:
  2594                           	opt stack 0
  2595                           
  2596                           ; 2 bytes @ 0x19
  2597  00001A                     	ds	1
  2598  00001B                     LCD_WritetStr@i:
  2599                           	opt stack 0
  2600  00001B                     ___lwmod@divisor:
  2601                           	opt stack 0
  2602                           
  2603                           ; 2 bytes @ 0x1A
  2604  00001B                     	ds	1
  2605  00001C                     transmit_finger@finger:
  2606                           	opt stack 0
  2607  00001C                     LCD_GotoXY@pos:
  2608                           	opt stack 0
  2609  00001C                     strncmp@len:
  2610                           	opt stack 0
  2611                           
  2612                           ; 2 bytes @ 0x1B
  2613  00001C                     	ds	1
  2614  00001D                     transmit_finger@Hbyte:
  2615                           	opt stack 0
  2616  00001D                     ___lwmod@counter:
  2617                           	opt stack 0
  2618                           
  2619                           ; 1 bytes @ 0x1C
  2620  00001D                     	ds	1
  2621  00001E                     ??_strncmp:
  2622  00001E                     ?_sprintf:
  2623                           	opt stack 0
  2624  00001E                     transmit_finger@Lbyte:
  2625                           	opt stack 0
  2626  00001E                     sprintf@sp:
  2627                           	opt stack 0
  2628                           
  2629                           ; 2 bytes @ 0x1D
  2630  00001E                     	ds	1
  2631  00001F                     PWMt0PCA@up:
  2632                           	opt stack 0
  2633                           
  2634                           ; 2 bytes @ 0x1E
  2635  00001F                     	ds	1
  2636  000020                     sprintf@f:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x1F
  2640  000020                     	ds	1
  2641  000021                     ?_strstr:
  2642                           	opt stack 0
  2643  000021                     PWMt0PCA@low:
  2644                           	opt stack 0
  2645  000021                     strstr@s1:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0x20
  2649  000021                     	ds	2
  2650  000023                     PWMt0PCA@finger:
  2651                           	opt stack 0
  2652  000023                     strstr@s2:
  2653                           	opt stack 0
  2654                           
  2655                           ; 2 bytes @ 0x22
  2656  000023                     	ds	1
  2657  000024                     ADtoPWM@AD:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x23
  2661  000024                     	ds	1
  2662  000025                     ?_ESP8266_ReceiveString:
  2663                           	opt stack 0
  2664  000025                     ESP8266_Cmd@cmd:
  2665                           	opt stack 0
  2666                           
  2667                           ; 2 bytes @ 0x24
  2668  000025                     	ds	1
  2669  000026                     ??_ADtoPWM:
  2670                           
  2671                           ; 1 bytes @ 0x25
  2672  000026                     	ds	1
  2673  000027                     ESP8266_Cmd@reply1:
  2674                           	opt stack 0
  2675  000027                     ESP8266_ReceiveString@pRecStr:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x26
  2679  000027                     	ds	1
  2680  000028                     ??_sprintf:
  2681                           
  2682                           ; 1 bytes @ 0x27
  2683  000028                     	ds	1
  2684  000029                     ESP8266_Cmd@reply2:
  2685                           	opt stack 0
  2686                           
  2687                           ; 2 bytes @ 0x28
  2688  000029                     	ds	1
  2689  00002A                     ADtoPWM@u2:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x29
  2693  00002A                     	ds	1
  2694  00002B                     ESP8266_Cmd@waittime:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x2A
  2698  00002B                     	ds	1
  2699  00002C                     ADtoPWM@u3:
  2700                           	opt stack 0
  2701                           
  2702                           ; 2 bytes @ 0x2B
  2703  00002C                     	ds	1
  2704  00002D                     _ESP8266_Cmd$1210:
  2705                           	opt stack 0
  2706                           
  2707                           ; 1 bytes @ 0x2C
  2708  00002D                     	ds	1
  2709  00002E                     ESP8266_Net_Mode_Choose@MODE:
  2710                           	opt stack 0
  2711  00002E                     ADtoPWM@u4:
  2712                           	opt stack 0
  2713  00002E                     ESP8266_JoinAP@pSSID:
  2714                           	opt stack 0
  2715  00002E                     ESP8266_Link_Server@ip:
  2716                           	opt stack 0
  2717                           
  2718                           ; 2 bytes @ 0x2D
  2719  00002E                     	ds	1
  2720  00002F                     
  2721                           ; 1 bytes @ 0x2E
  2722  00002F                     	ds	1
  2723  000030                     ADtoPWM@w2:
  2724                           	opt stack 0
  2725  000030                     ESP8266_JoinAP@pPassWord:
  2726                           	opt stack 0
  2727  000030                     ESP8266_Link_Server@ComNum:
  2728                           	opt stack 0
  2729                           
  2730                           ; 2 bytes @ 0x2F
  2731  000030                     	ds	2
  2732  000032                     ADtoPWM@w3:
  2733                           	opt stack 0
  2734  000032                     ESP8266_Link_Server@id:
  2735                           	opt stack 0
  2736                           
  2737                           ; 2 bytes @ 0x31
  2738  000032                     	ds	2
  2739  000034                     ADtoPWM@w4:
  2740                           	opt stack 0
  2741                           
  2742                           ; 2 bytes @ 0x33
  2743  000034                     	ds	2
  2744  000036                     ADtoPWM@u1:
  2745                           	opt stack 0
  2746                           
  2747                           ; 2 bytes @ 0x35
  2748  000036                     	ds	2
  2749  000038                     ADtoPWM@w1:
  2750                           	opt stack 0
  2751                           
  2752                           ; 2 bytes @ 0x37
  2753  000038                     	ds	2
  2754  00003A                     main@temp:
  2755                           	opt stack 0
  2756                           
  2757                           ; 2 bytes @ 0x39
  2758  00003A                     	ds	2
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           postinc0	equ	0xFEE
  2764                           wreg	equ	0xFE8
  2765                           postdec1	equ	0xFE5
  2766                           fsr1l	equ	0xFE1
  2767                           
  2768 ;;
  2769 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2770 ;;
  2771 ;; *************** function _main *****************
  2772 ;; Defined at:
  2773 ;;		line 153 in file "main.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;  t              20    0        unsigned char [20]
  2778 ;;  print           5    0        unsigned char [5]
  2779 ;;  temp            2   57[COMRAM] PTR unsigned char 
  2780 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2790 ;;      Params:         0       0       0       0       0       0       0
  2791 ;;      Locals:         2       0       0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0
  2793 ;;      Totals:         2       0       0       0       0       0       0
  2794 ;;Total ram usage:        2 bytes
  2795 ;; Hardware stack levels required when called:    9
  2796 ;; This function calls:
  2797 ;;		_ADtoPWM
  2798 ;;		_ESP8266_ReceiveString
  2799 ;;		_ESP8266_client
  2800 ;;		_GPIO_initial
  2801 ;;		_LCD_GotoXY
  2802 ;;		_LCD_Initialize
  2803 ;;		_LCD_WriteCmd
  2804 ;;		_LCD_WritetStr
  2805 ;;		_PCA9685_init
  2806 ;;		_delay_ms
  2807 ;;		_finger_reset
  2808 ;;		_initial_UART
  2809 ;;		_memset
  2810 ;;		_oclillator_initial
  2811 ;;		_timer_2_initial
  2812 ;;		_timer_intrrupt_initinal
  2813 ;; This function is called by:
  2814 ;;		Startup code after reset
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text0
  2819  0010F4                     __ptext0:
  2820                           	opt stack 0
  2821  0010F4                     _main:
  2822                           	opt stack 22
  2823                           
  2824                           ;main.c: 155: oclillator_initial();
  2825                           
  2826                           ;incstack = 0
  2827  0010F4  ECDA  F00C         	call	_oclillator_initial	;wreg free
  2828                           
  2829                           ;main.c: 156: GPIO_initial();
  2830  0010F8  ECCA  F00C         	call	_GPIO_initial	;wreg free
  2831                           
  2832                           ;main.c: 157: PCA9685_init();
  2833  0010FC  EC37  F00C         	call	_PCA9685_init	;wreg free
  2834                           
  2835                           ;main.c: 158: timer_2_initial() ;
  2836  001100  EC8D  F00C         	call	_timer_2_initial	;wreg free
  2837                           
  2838                           ;main.c: 159: timer_intrrupt_initinal();
  2839  001104  ECBA  F00C         	call	_timer_intrrupt_initinal	;wreg free
  2840                           
  2841                           ;main.c: 160: LCD_Initialize();
  2842  001108  ECE7  F007         	call	_LCD_Initialize	;wreg free
  2843                           
  2844                           ;main.c: 161: initial_UART();
  2845  00110C  EC25  F00C         	call	_initial_UART	;wreg free
  2846                           
  2847                           ;main.c: 162: ESP8266_client();
  2848  001110  EC85  F007         	call	_ESP8266_client	;wreg free
  2849                           
  2850                           ;main.c: 163: LCD_WriteCmd(0x01);
  2851  001114  0E01               	movlw	1
  2852  001116  EC0B  F00B         	call	_LCD_WriteCmd
  2853                           
  2854                           ;main.c: 164: LCD_GotoXY(0,0);
  2855  00111A  0E00               	movlw	0
  2856  00111C  6E17               	movwf	LCD_GotoXY@ln,c
  2857  00111E  0E00               	movlw	0
  2858  001120  ECB0  F00A         	call	_LCD_GotoXY
  2859                           
  2860                           ;main.c: 165: LCD_WritetStr("Hello");
  2861  001124  0ED4               	movlw	low STR_62
  2862  001126  6E17               	movwf	LCD_WritetStr@str,c
  2863  001128  0E7F               	movlw	high STR_62
  2864  00112A  6E18               	movwf	LCD_WritetStr@str+1,c
  2865  00112C  ECEE  F009         	call	_LCD_WritetStr	;wreg free
  2866                           
  2867                           ;main.c: 166: delay_ms ( 3000 );
  2868  001130  0E0B               	movlw	11
  2869  001132  6E15               	movwf	delay_ms@ms+1,c
  2870  001134  0EB8               	movlw	184
  2871  001136  6E14               	movwf	delay_ms@ms,c
  2872  001138  EC99  F00C         	call	_delay_ms	;wreg free
  2873                           
  2874                           ;main.c: 167: LCD_WriteCmd(0x01);
  2875  00113C  0E01               	movlw	1
  2876  00113E  EC0B  F00B         	call	_LCD_WriteCmd
  2877                           
  2878                           ;main.c: 168: finger_reset();
  2879  001142  ECE2  F00C         	call	_finger_reset	;wreg free
  2880                           
  2881                           ;main.c: 169: char* temp;
  2882                           ;main.c: 170: char t[20];
  2883                           ;main.c: 171: char print[5];
  2884                           ;main.c: 172: write=0;
  2885  001146  0E00               	movlw	0
  2886  001148  6E61               	movwf	_write,c
  2887                           
  2888                           ;main.c: 174: memset(&(strEsp8266_Fram_Record.Data_RX_BUF[0]), '\0', 50);
  2889  00114A  0E9A               	movlw	low _strEsp8266_Fram_Record
  2890  00114C  6E12               	movwf	memset@p1,c
  2891  00114E  0E02               	movlw	high _strEsp8266_Fram_Record
  2892  001150  6E13               	movwf	memset@p1+1,c
  2893  001152  0E00               	movlw	0
  2894  001154  6E15               	movwf	memset@c+1,c
  2895  001156  0E00               	movlw	0
  2896  001158  6E14               	movwf	memset@c,c
  2897  00115A  0E00               	movlw	0
  2898  00115C  6E17               	movwf	memset@n+1,c
  2899  00115E  0E32               	movlw	50
  2900  001160  6E16               	movwf	memset@n,c
  2901  001162  ECA8  F00B         	call	_memset	;wreg free
  2902  001166                     l4521:
  2903                           
  2904                           ;main.c: 176: {
  2905                           ;main.c: 177: temp=ESP8266_ReceiveString();
  2906  001166  EC32  F008         	call	_ESP8266_ReceiveString	;wreg free
  2907  00116A  C025  F03A         	movff	?_ESP8266_ReceiveString,main@temp
  2908  00116E  C026  F03B         	movff	?_ESP8266_ReceiveString+1,main@temp+1
  2909                           
  2910                           ;main.c: 202: ADtoPWM(temp);
  2911  001172  C03A  F024         	movff	main@temp,ADtoPWM@AD
  2912  001176  C03B  F025         	movff	main@temp+1,ADtoPWM@AD+1
  2913  00117A  ECA4  F005         	call	_ADtoPWM	;wreg free
  2914  00117E  D7F3               	goto	l4521
  2915  001180                     __end_of_main:
  2916                           	opt stack 0
  2917                           tblptru	equ	0xFF8
  2918                           tblptrh	equ	0xFF7
  2919                           tblptrl	equ	0xFF6
  2920                           tablat	equ	0xFF5
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           postdec1	equ	0xFE5
  2924                           fsr1l	equ	0xFE1
  2925                           
  2926 ;; *************** function _timer_intrrupt_initinal *****************
  2927 ;; Defined at:
  2928 ;;		line 36 in file "harwave/initial.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		None
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2942 ;;      Params:         0       0       0       0       0       0       0
  2943 ;;      Locals:         0       0       0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0
  2945 ;;      Totals:         0       0       0       0       0       0       0
  2946 ;;Total ram usage:        0 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    1
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_main
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text1
  2957  001974                     __ptext1:
  2958                           	opt stack 0
  2959  001974                     _timer_intrrupt_initinal:
  2960                           	opt stack 29
  2961                           
  2962                           ;initial.c: 38: RCONbits.IPEN=1;
  2963                           
  2964                           ;incstack = 0
  2965  001974  8ED0               	bsf	4048,7,c	;volatile
  2966                           
  2967                           ;initial.c: 39: INTCONbits.GIE=1;
  2968  001976  8EF2               	bsf	intcon,7,c	;volatile
  2969                           
  2970                           ;initial.c: 40: INTCONbits.PEIE=1;
  2971  001978  8CF2               	bsf	intcon,6,c	;volatile
  2972                           
  2973                           ;initial.c: 41: INTCONbits.TMR0IE=0;
  2974  00197A  9AF2               	bcf	intcon,5,c	;volatile
  2975                           
  2976                           ;initial.c: 42: INTCONbits.TMR0IF=0;
  2977  00197C  94F2               	bcf	intcon,2,c	;volatile
  2978                           
  2979                           ;initial.c: 43: PIE1bits.TMR2IE=1;
  2980  00197E  829D               	bsf	3997,1,c	;volatile
  2981                           
  2982                           ;initial.c: 44: PIR1bits.TMR2IF=0;
  2983  001980  929E               	bcf	3998,1,c	;volatile
  2984  001982  0012               	return		;funcret
  2985  001984                     __end_of_timer_intrrupt_initinal:
  2986                           	opt stack 0
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           intcon	equ	0xFF2
  2992                           postinc0	equ	0xFEE
  2993                           wreg	equ	0xFE8
  2994                           postdec1	equ	0xFE5
  2995                           fsr1l	equ	0xFE1
  2996                           
  2997 ;; *************** function _timer_2_initial *****************
  2998 ;; Defined at:
  2999 ;;		line 46 in file "harwave/initial.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;		None
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3013 ;;      Params:         0       0       0       0       0       0       0
  3014 ;;      Locals:         0       0       0       0       0       0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0
  3016 ;;      Totals:         0       0       0       0       0       0       0
  3017 ;;Total ram usage:        0 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    1
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_main
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text2
  3028  00191A                     __ptext2:
  3029                           	opt stack 0
  3030  00191A                     _timer_2_initial:
  3031                           	opt stack 29
  3032                           
  3033                           ;initial.c: 48: PR2 = 249;
  3034                           
  3035                           ;incstack = 0
  3036  00191A  0EF9               	movlw	249
  3037  00191C  6ECB               	movwf	4043,c	;volatile
  3038                           
  3039                           ;initial.c: 49: T2CONbits.T2OUTPS=0b1001;
  3040  00191E  50CA               	movf	4042,w,c	;volatile
  3041  001920  0B87               	andlw	-121
  3042  001922  0948               	iorlw	72
  3043  001924  6ECA               	movwf	4042,c	;volatile
  3044                           
  3045                           ;initial.c: 50: T2CONbits.T2CKPS=0b01;
  3046  001926  50CA               	movf	4042,w,c	;volatile
  3047  001928  0BFC               	andlw	-4
  3048  00192A  0901               	iorlw	1
  3049  00192C  6ECA               	movwf	4042,c	;volatile
  3050                           
  3051                           ;initial.c: 51: T2CONbits.TMR2ON=1;
  3052  00192E  84CA               	bsf	4042,2,c	;volatile
  3053  001930  0012               	return		;funcret
  3054  001932                     __end_of_timer_2_initial:
  3055                           	opt stack 0
  3056                           tblptru	equ	0xFF8
  3057                           tblptrh	equ	0xFF7
  3058                           tblptrl	equ	0xFF6
  3059                           tablat	equ	0xFF5
  3060                           intcon	equ	0xFF2
  3061                           postinc0	equ	0xFEE
  3062                           wreg	equ	0xFE8
  3063                           postdec1	equ	0xFE5
  3064                           fsr1l	equ	0xFE1
  3065                           
  3066 ;; *************** function _oclillator_initial *****************
  3067 ;; Defined at:
  3068 ;;		line 13 in file "harwave/initial.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;		None
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;		None
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  1    wreg      void 
  3075 ;; Registers used:
  3076 ;;		None
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3082 ;;      Params:         0       0       0       0       0       0       0
  3083 ;;      Locals:         0       0       0       0       0       0       0
  3084 ;;      Temps:          0       0       0       0       0       0       0
  3085 ;;      Totals:         0       0       0       0       0       0       0
  3086 ;;Total ram usage:        0 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    1
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_main
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text3
  3097  0019B4                     __ptext3:
  3098                           	opt stack 0
  3099  0019B4                     _oclillator_initial:
  3100                           	opt stack 29
  3101                           
  3102                           ;initial.c: 15: OSCCONbits.IOFS=0;
  3103                           
  3104                           ;incstack = 0
  3105  0019B4  94D3               	bcf	4051,2,c	;volatile
  3106                           
  3107                           ;initial.c: 16: OSCCONbits.SCS0=0;
  3108  0019B6  90D3               	bcf	4051,0,c	;volatile
  3109                           
  3110                           ;initial.c: 17: OSCCONbits.SCS1=0;
  3111  0019B8  92D3               	bcf	4051,1,c	;volatile
  3112  0019BA  0012               	return		;funcret
  3113  0019BC                     __end_of_oclillator_initial:
  3114                           	opt stack 0
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           intcon	equ	0xFF2
  3120                           postinc0	equ	0xFEE
  3121                           wreg	equ	0xFE8
  3122                           postdec1	equ	0xFE5
  3123                           fsr1l	equ	0xFE1
  3124                           
  3125 ;; *************** function _memset *****************
  3126 ;; Defined at:
  3127 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memset.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  p1              2   17[COMRAM] PTR void 
  3130 ;;		 -> strEsp8266_Fram_Record(52), 
  3131 ;;  c               2   19[COMRAM] int 
  3132 ;;  n               2   21[COMRAM] unsigned int 
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;  p               2   23[COMRAM] PTR unsigned char 
  3135 ;;		 -> strEsp8266_Fram_Record(52), 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  2   17[COMRAM] PTR void 
  3138 ;; Registers used:
  3139 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3145 ;;      Params:         6       0       0       0       0       0       0
  3146 ;;      Locals:         2       0       0       0       0       0       0
  3147 ;;      Temps:          0       0       0       0       0       0       0
  3148 ;;      Totals:         8       0       0       0       0       0       0
  3149 ;;Total ram usage:        8 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    1
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_main
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text4
  3160  001750                     __ptext4:
  3161                           	opt stack 0
  3162  001750                     _memset:
  3163                           	opt stack 29
  3164                           
  3165                           ;incstack = 0
  3166  001750  C012  F018         	movff	memset@p1,memset@p
  3167  001754  C013  F019         	movff	memset@p1+1,memset@p+1
  3168  001758  D008               	goto	l3459
  3169  00175A                     l3455:
  3170  00175A  C018  FFD9         	movff	memset@p,fsr2l
  3171  00175E  C019  FFDA         	movff	memset@p+1,fsr2h
  3172  001762  C014  FFDF         	movff	memset@c,indf2
  3173  001766  4A18               	infsnz	memset@p,f,c
  3174  001768  2A19               	incf	memset@p+1,f,c
  3175  00176A                     l3459:
  3176  00176A  0616               	decf	memset@n,f,c
  3177  00176C  A0D8               	btfss	status,0,c
  3178  00176E  0617               	decf	memset@n+1,f,c
  3179  001770  2816               	incf	memset@n,w,c
  3180  001772  E1F3               	bnz	l3455
  3181  001774  2817               	incf	memset@n+1,w,c
  3182  001776  B4D8               	btfsc	status,2,c
  3183  001778  0012               	return	
  3184  00177A  D7EF               	goto	l3455
  3185  00177C                     __end_of_memset:
  3186                           	opt stack 0
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           intcon	equ	0xFF2
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           postdec1	equ	0xFE5
  3195                           fsr1l	equ	0xFE1
  3196                           indf2	equ	0xFDF
  3197                           fsr2h	equ	0xFDA
  3198                           fsr2l	equ	0xFD9
  3199                           status	equ	0xFD8
  3200                           
  3201 ;; *************** function _initial_UART *****************
  3202 ;; Defined at:
  3203 ;;		line 36 in file "harwave/UART.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;		None
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;		None
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  1    wreg      void 
  3210 ;; Registers used:
  3211 ;;		wreg, status,2
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3217 ;;      Params:         0       0       0       0       0       0       0
  3218 ;;      Locals:         0       0       0       0       0       0       0
  3219 ;;      Temps:          0       0       0       0       0       0       0
  3220 ;;      Totals:         0       0       0       0       0       0       0
  3221 ;;Total ram usage:        0 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    1
  3224 ;; This function calls:
  3225 ;;		Nothing
  3226 ;; This function is called by:
  3227 ;;		_main
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           	psect	text5
  3232  00184A                     __ptext5:
  3233                           	opt stack 0
  3234  00184A                     _initial_UART:
  3235                           	opt stack 29
  3236                           
  3237                           ;UART.c: 37: TXSTAbits.SYNC=0;
  3238                           
  3239                           ;incstack = 0
  3240  00184A  98AC               	bcf	4012,4,c	;volatile
  3241                           
  3242                           ;UART.c: 38: TXSTAbits.TX9=0;
  3243  00184C  9CAC               	bcf	4012,6,c	;volatile
  3244                           
  3245                           ;UART.c: 39: RCSTAbits.SPEN=1;
  3246  00184E  8EAB               	bsf	4011,7,c	;volatile
  3247                           
  3248                           ;UART.c: 40: PIE1bits.TX1IE=0;
  3249  001850  989D               	bcf	3997,4,c	;volatile
  3250                           
  3251                           ;UART.c: 41: TXSTAbits.TXEN=1;
  3252  001852  8AAC               	bsf	4012,5,c	;volatile
  3253                           
  3254                           ;UART.c: 43: RCONbits.IPEN=1;
  3255  001854  8ED0               	bsf	4048,7,c	;volatile
  3256                           
  3257                           ;UART.c: 44: INTCONbits.GIE=1;
  3258  001856  8EF2               	bsf	intcon,7,c	;volatile
  3259                           
  3260                           ;UART.c: 45: INTCONbits.PEIE=1;
  3261  001858  8CF2               	bsf	intcon,6,c	;volatile
  3262                           
  3263                           ;UART.c: 47: RCSTAbits.CREN=1;
  3264  00185A  88AB               	bsf	4011,4,c	;volatile
  3265                           
  3266                           ;UART.c: 48: PIE1bits.RCIE=1;
  3267  00185C  8A9D               	bsf	3997,5,c	;volatile
  3268                           
  3269                           ;UART.c: 49: RCSTAbits.RC9 = 0;
  3270  00185E  9CAB               	bcf	4011,6,c	;volatile
  3271                           
  3272                           ;UART.c: 50: TXSTAbits.BRGH=1;
  3273  001860  84AC               	bsf	4012,2,c	;volatile
  3274                           
  3275                           ;UART.c: 51: BAUDCONbits.BRG16=1;
  3276  001862  86B8               	bsf	4024,3,c	;volatile
  3277                           
  3278                           ;UART.c: 52: SPBRGH=0;
  3279  001864  0E00               	movlw	0
  3280  001866  6EB0               	movwf	4016,c	;volatile
  3281                           
  3282                           ;UART.c: 53: SPBRG=86;
  3283  001868  0E56               	movlw	86
  3284  00186A  6EAF               	movwf	4015,c	;volatile
  3285  00186C  0012               	return		;funcret
  3286  00186E                     __end_of_initial_UART:
  3287                           	opt stack 0
  3288                           tblptru	equ	0xFF8
  3289                           tblptrh	equ	0xFF7
  3290                           tblptrl	equ	0xFF6
  3291                           tablat	equ	0xFF5
  3292                           intcon	equ	0xFF2
  3293                           postinc0	equ	0xFEE
  3294                           wreg	equ	0xFE8
  3295                           postdec1	equ	0xFE5
  3296                           fsr1l	equ	0xFE1
  3297                           indf2	equ	0xFDF
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           
  3302 ;; *************** function _finger_reset *****************
  3303 ;; Defined at:
  3304 ;;		line 150 in file "main.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      void 
  3311 ;; Registers used:
  3312 ;;		None
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3318 ;;      Params:         0       0       0       0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0
  3321 ;;      Totals:         0       0       0       0       0       0       0
  3322 ;;Total ram usage:        0 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    1
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_main
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text6
  3333  0019C4                     __ptext6:
  3334                           	opt stack 0
  3335  0019C4                     _finger_reset:
  3336                           	opt stack 29
  3337                           
  3338                           ;incstack = 0
  3339  0019C4  0012               	return		;funcret
  3340  0019C6                     __end_of_finger_reset:
  3341                           	opt stack 0
  3342                           tblptru	equ	0xFF8
  3343                           tblptrh	equ	0xFF7
  3344                           tblptrl	equ	0xFF6
  3345                           tablat	equ	0xFF5
  3346                           intcon	equ	0xFF2
  3347                           postinc0	equ	0xFEE
  3348                           wreg	equ	0xFE8
  3349                           postdec1	equ	0xFE5
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           fsr2h	equ	0xFDA
  3353                           fsr2l	equ	0xFD9
  3354                           status	equ	0xFD8
  3355                           
  3356 ;; *************** function _PCA9685_init *****************
  3357 ;; Defined at:
  3358 ;;		line 19 in file "harwave/initial.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;		None
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3372 ;;      Params:         0       0       0       0       0       0       0
  3373 ;;      Locals:         0       0       0       0       0       0       0
  3374 ;;      Temps:          0       0       0       0       0       0       0
  3375 ;;      Totals:         0       0       0       0       0       0       0
  3376 ;;Total ram usage:        0 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:    6
  3379 ;; This function calls:
  3380 ;;		_IIC_Init
  3381 ;;		_PCA9685_writeOneByte
  3382 ;; This function is called by:
  3383 ;;		_main
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           	psect	text7
  3388  00186E                     __ptext7:
  3389                           	opt stack 0
  3390  00186E                     _PCA9685_init:
  3391                           	opt stack 24
  3392                           
  3393                           ;initial.c: 20: IIC_Init();
  3394                           
  3395                           ;incstack = 0
  3396  00186E  EC6D  F00C         	call	_IIC_Init	;wreg free
  3397                           
  3398                           ;initial.c: 21: PCA9685_writeOneByte(0x00,0x11);
  3399  001872  0E11               	movlw	17
  3400  001874  6E18               	movwf	PCA9685_writeOneByte@data,c
  3401  001876  0E00               	movlw	0
  3402  001878  EC5C  F00B         	call	_PCA9685_writeOneByte
  3403                           
  3404                           ;initial.c: 22: PCA9685_writeOneByte(0xFE,(25000000/4096/267)-1);
  3405  00187C  0E15               	movlw	21
  3406  00187E  6E18               	movwf	PCA9685_writeOneByte@data,c
  3407  001880  0EFE               	movlw	254
  3408  001882  EC5C  F00B         	call	_PCA9685_writeOneByte
  3409                           
  3410                           ;initial.c: 23: PCA9685_writeOneByte(0x00,0x01);
  3411  001886  0E01               	movlw	1
  3412  001888  6E18               	movwf	PCA9685_writeOneByte@data,c
  3413  00188A  0E00               	movlw	0
  3414  00188C  EC5C  F00B         	call	_PCA9685_writeOneByte
  3415  001890  0012               	return		;funcret
  3416  001892                     __end_of_PCA9685_init:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           intcon	equ	0xFF2
  3423                           postinc0	equ	0xFEE
  3424                           wreg	equ	0xFE8
  3425                           postdec1	equ	0xFE5
  3426                           fsr1l	equ	0xFE1
  3427                           indf2	equ	0xFDF
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function _IIC_Init *****************
  3433 ;; Defined at:
  3434 ;;		line 5 in file "harwave/softIIC.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;		None
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3448 ;;      Params:         0       0       0       0       0       0       0
  3449 ;;      Locals:         0       0       0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0
  3451 ;;      Totals:         0       0       0       0       0       0       0
  3452 ;;Total ram usage:        0 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    3
  3455 ;; This function calls:
  3456 ;;		_delay_us
  3457 ;; This function is called by:
  3458 ;;		_PCA9685_init
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text8
  3463  0018DA                     __ptext8:
  3464                           	opt stack 0
  3465  0018DA                     _IIC_Init:
  3466                           	opt stack 26
  3467                           
  3468                           ;softIIC.c: 8: TRISBbits.TRISB1 = 0;
  3469                           
  3470                           ;incstack = 0
  3471  0018DA  9293               	bcf	3987,1,c	;volatile
  3472                           
  3473                           ;softIIC.c: 9: TRISBbits.TRISB0 = 0;
  3474  0018DC  9093               	bcf	3987,0,c	;volatile
  3475                           
  3476                           ;softIIC.c: 12: PORTBbits.RB1 = 1;
  3477  0018DE  8281               	bsf	3969,1,c	;volatile
  3478                           
  3479                           ;softIIC.c: 13: delay_us(2);
  3480  0018E0  0E00               	movlw	0
  3481  0018E2  6E14               	movwf	delay_us@us+1,c
  3482  0018E4  0E02               	movlw	2
  3483  0018E6  6E13               	movwf	delay_us@us,c
  3484  0018E8  ECAF  F00C         	call	_delay_us	;wreg free
  3485                           
  3486                           ;softIIC.c: 14: PORTBbits.RB0 = 1;
  3487  0018EC  8081               	bsf	3969,0,c	;volatile
  3488                           
  3489                           ;softIIC.c: 15: delay_us(2);
  3490  0018EE  0E00               	movlw	0
  3491  0018F0  6E14               	movwf	delay_us@us+1,c
  3492  0018F2  0E02               	movlw	2
  3493  0018F4  6E13               	movwf	delay_us@us,c
  3494  0018F6  ECAF  F00C         	call	_delay_us	;wreg free
  3495  0018FA  0012               	return		;funcret
  3496  0018FC                     __end_of_IIC_Init:
  3497                           	opt stack 0
  3498                           tblptru	equ	0xFF8
  3499                           tblptrh	equ	0xFF7
  3500                           tblptrl	equ	0xFF6
  3501                           tablat	equ	0xFF5
  3502                           intcon	equ	0xFF2
  3503                           postinc0	equ	0xFEE
  3504                           wreg	equ	0xFE8
  3505                           postdec1	equ	0xFE5
  3506                           fsr1l	equ	0xFE1
  3507                           indf2	equ	0xFDF
  3508                           fsr2h	equ	0xFDA
  3509                           fsr2l	equ	0xFD9
  3510                           status	equ	0xFD8
  3511                           
  3512 ;; *************** function _LCD_WritetStr *****************
  3513 ;; Defined at:
  3514 ;;		line 119 in file "harwave/lcd.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;  str             2   22[COMRAM] PTR const unsigned char 
  3517 ;;		 -> STR_62(6), 
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;  i               1   26[COMRAM] unsigned char 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      void 
  3522 ;; Registers used:
  3523 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3529 ;;      Params:         2       0       0       0       0       0       0
  3530 ;;      Locals:         1       0       0       0       0       0       0
  3531 ;;      Temps:          2       0       0       0       0       0       0
  3532 ;;      Totals:         5       0       0       0       0       0       0
  3533 ;;Total ram usage:        5 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    4
  3536 ;; This function calls:
  3537 ;;		_LCD_WriteData
  3538 ;; This function is called by:
  3539 ;;		_main
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           	psect	text9
  3544  0013DC                     __ptext9:
  3545                           	opt stack 0
  3546  0013DC                     _LCD_WritetStr:
  3547                           	opt stack 26
  3548                           
  3549                           ;lcd.c: 121: u8 i=0;
  3550                           
  3551                           ;incstack = 0
  3552  0013DC  0E00               	movlw	0
  3553  0013DE  6E1B               	movwf	LCD_WritetStr@i,c
  3554                           
  3555                           ;lcd.c: 124: while (str[i])
  3556  0013E0  D013               	goto	l4369
  3557  0013E2                     l4365:
  3558                           
  3559                           ;lcd.c: 125: {
  3560                           ;lcd.c: 127: LCD_WriteData(str[i++]);
  3561  0013E2  501B               	movf	LCD_WritetStr@i,w,c
  3562  0013E4  0D01               	mullw	1
  3563  0013E6  C017  F019         	movff	LCD_WritetStr@str,??_LCD_WritetStr
  3564  0013EA  C018  F01A         	movff	LCD_WritetStr@str+1,??_LCD_WritetStr+1
  3565  0013EE  50F3               	movf	prodl,w,c
  3566  0013F0  2619               	addwf	??_LCD_WritetStr,f,c
  3567  0013F2  50F4               	movf	prodh,w,c
  3568  0013F4  221A               	addwfc	??_LCD_WritetStr+1,f,c
  3569  0013F6  C019  FFF6         	movff	??_LCD_WritetStr,tblptrl
  3570  0013FA  C01A  FFF7         	movff	??_LCD_WritetStr+1,tblptrh
  3571  0013FE                     	if	0	;tblptru may be non-zero
  3572  0013FE                     	endif
  3573  0013FE                     	if	0	;tblptru may be non-zero
  3574  0013FE                     	endif
  3575  0013FE  0008               	tblrd		*
  3576  001400  50F5               	movf	tablat,w,c
  3577  001402  ECEA  F00B         	call	_LCD_WriteData
  3578  001406  2A1B               	incf	LCD_WritetStr@i,f,c
  3579  001408                     l4369:
  3580  001408  501B               	movf	LCD_WritetStr@i,w,c
  3581  00140A  0D01               	mullw	1
  3582  00140C  C017  F019         	movff	LCD_WritetStr@str,??_LCD_WritetStr
  3583  001410  C018  F01A         	movff	LCD_WritetStr@str+1,??_LCD_WritetStr+1
  3584  001414  50F3               	movf	prodl,w,c
  3585  001416  2619               	addwf	??_LCD_WritetStr,f,c
  3586  001418  50F4               	movf	prodh,w,c
  3587  00141A  221A               	addwfc	??_LCD_WritetStr+1,f,c
  3588  00141C  C019  FFF6         	movff	??_LCD_WritetStr,tblptrl
  3589  001420  C01A  FFF7         	movff	??_LCD_WritetStr+1,tblptrh
  3590  001424                     	if	0	;tblptru may be non-zero
  3591  001424                     	endif
  3592  001424                     	if	0	;tblptru may be non-zero
  3593  001424                     	endif
  3594  001424  0008               	tblrd		*
  3595  001426  50F5               	movf	tablat,w,c
  3596  001428  0900               	iorlw	0
  3597  00142A  B4D8               	btfsc	status,2,c
  3598  00142C  0012               	return	
  3599  00142E  D7D9               	goto	l4365
  3600  001430                     __end_of_LCD_WritetStr:
  3601                           	opt stack 0
  3602                           tblptru	equ	0xFF8
  3603                           tblptrh	equ	0xFF7
  3604                           tblptrl	equ	0xFF6
  3605                           tablat	equ	0xFF5
  3606                           prodh	equ	0xFF4
  3607                           prodl	equ	0xFF3
  3608                           intcon	equ	0xFF2
  3609                           postinc0	equ	0xFEE
  3610                           wreg	equ	0xFE8
  3611                           postdec1	equ	0xFE5
  3612                           fsr1l	equ	0xFE1
  3613                           indf2	equ	0xFDF
  3614                           fsr2h	equ	0xFDA
  3615                           fsr2l	equ	0xFD9
  3616                           status	equ	0xFD8
  3617                           
  3618 ;; *************** function _LCD_WriteData *****************
  3619 ;; Defined at:
  3620 ;;		line 105 in file "harwave/lcd.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  ch              1    wreg     unsigned char 
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  ch              1   21[COMRAM] unsigned char 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;                  1    wreg      void 
  3627 ;; Registers used:
  3628 ;;		wreg, status,2, status,0, cstack
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3634 ;;      Params:         0       0       0       0       0       0       0
  3635 ;;      Locals:         1       0       0       0       0       0       0
  3636 ;;      Temps:          0       0       0       0       0       0       0
  3637 ;;      Totals:         1       0       0       0       0       0       0
  3638 ;;Total ram usage:        1 bytes
  3639 ;; Hardware stack levels used:    1
  3640 ;; Hardware stack levels required when called:    3
  3641 ;; This function calls:
  3642 ;;		_LCDWriteNibble
  3643 ;;		_delay_ms
  3644 ;; This function is called by:
  3645 ;;		_LCD_WritetStr
  3646 ;;		_LCD_CreateFont
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           	psect	text10
  3651  0017D4                     __ptext10:
  3652                           	opt stack 0
  3653  0017D4                     _LCD_WriteData:
  3654                           	opt stack 26
  3655                           
  3656                           ;incstack = 0
  3657                           ;LCD_WriteData@ch stored from wreg
  3658  0017D4  6E16               	movwf	LCD_WriteData@ch,c
  3659                           
  3660                           ;lcd.c: 107: delay_ms(5);
  3661  0017D6  0E00               	movlw	0
  3662  0017D8  6E15               	movwf	delay_ms@ms+1,c
  3663  0017DA  0E05               	movlw	5
  3664  0017DC  6E14               	movwf	delay_ms@ms,c
  3665  0017DE  EC99  F00C         	call	_delay_ms	;wreg free
  3666                           
  3667                           ;lcd.c: 110: LCDWriteNibble(ch,1);
  3668  0017E2  0E01               	movlw	1
  3669  0017E4  6E12               	movwf	LCDWriteNibble@rs,c
  3670  0017E6  5016               	movf	LCD_WriteData@ch,w,c
  3671  0017E8  ECBE  F00B         	call	_LCDWriteNibble
  3672                           
  3673                           ;lcd.c: 113: ch = (ch << 4);
  3674  0017EC  3816               	swapf	LCD_WriteData@ch,w,c
  3675  0017EE  0BF0               	andlw	240
  3676  0017F0  6E16               	movwf	LCD_WriteData@ch,c
  3677                           
  3678                           ;lcd.c: 116: LCDWriteNibble(ch,1);
  3679  0017F2  0E01               	movlw	1
  3680  0017F4  6E12               	movwf	LCDWriteNibble@rs,c
  3681  0017F6  5016               	movf	LCD_WriteData@ch,w,c
  3682  0017F8  ECBE  F00B         	call	_LCDWriteNibble
  3683  0017FC  0012               	return		;funcret
  3684  0017FE                     __end_of_LCD_WriteData:
  3685                           	opt stack 0
  3686                           tblptru	equ	0xFF8
  3687                           tblptrh	equ	0xFF7
  3688                           tblptrl	equ	0xFF6
  3689                           tablat	equ	0xFF5
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           intcon	equ	0xFF2
  3693                           postinc0	equ	0xFEE
  3694                           wreg	equ	0xFE8
  3695                           postdec1	equ	0xFE5
  3696                           fsr1l	equ	0xFE1
  3697                           indf2	equ	0xFDF
  3698                           fsr2h	equ	0xFDA
  3699                           fsr2l	equ	0xFD9
  3700                           status	equ	0xFD8
  3701                           
  3702 ;; *************** function _LCD_Initialize *****************
  3703 ;; Defined at:
  3704 ;;		line 4 in file "harwave/lcd.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		wreg, status,2, status,0, cstack
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3718 ;;      Params:         0       0       0       0       0       0       0
  3719 ;;      Locals:         0       0       0       0       0       0       0
  3720 ;;      Temps:          0       0       0       0       0       0       0
  3721 ;;      Totals:         0       0       0       0       0       0       0
  3722 ;;Total ram usage:        0 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:    4
  3725 ;; This function calls:
  3726 ;;		_LCD_WaitBusy
  3727 ;;		_LCD_WriteCmd
  3728 ;;		_delay_ms
  3729 ;; This function is called by:
  3730 ;;		_main
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text11
  3735  000FCE                     __ptext11:
  3736                           	opt stack 0
  3737  000FCE                     _LCD_Initialize:
  3738                           	opt stack 26
  3739                           
  3740                           ;lcd.c: 7: PORTD = 0;
  3741                           
  3742                           ;incstack = 0
  3743  000FCE  0E00               	movlw	0
  3744  000FD0  6E83               	movwf	3971,c	;volatile
  3745                           
  3746                           ;lcd.c: 9: TRISD = 0;
  3747  000FD2  0E00               	movlw	0
  3748  000FD4  6E95               	movwf	3989,c	;volatile
  3749                           
  3750                           ;lcd.c: 10: delay_ms(15);
  3751  000FD6  0E00               	movlw	0
  3752  000FD8  6E15               	movwf	delay_ms@ms+1,c
  3753  000FDA  0E0F               	movlw	15
  3754  000FDC  6E14               	movwf	delay_ms@ms,c
  3755  000FDE  EC99  F00C         	call	_delay_ms	;wreg free
  3756                           
  3757                           ;lcd.c: 12: LCD_WriteCmd(0X30);
  3758  000FE2  0E30               	movlw	48
  3759  000FE4  EC0B  F00B         	call	_LCD_WriteCmd
  3760                           
  3761                           ;lcd.c: 13: delay_ms(5);
  3762  000FE8  0E00               	movlw	0
  3763  000FEA  6E15               	movwf	delay_ms@ms+1,c
  3764  000FEC  0E05               	movlw	5
  3765  000FEE  6E14               	movwf	delay_ms@ms,c
  3766  000FF0  EC99  F00C         	call	_delay_ms	;wreg free
  3767                           
  3768                           ;lcd.c: 15: LCD_WriteCmd(0X30);
  3769  000FF4  0E30               	movlw	48
  3770  000FF6  EC0B  F00B         	call	_LCD_WriteCmd
  3771                           
  3772                           ;lcd.c: 16: delay_ms(5);
  3773  000FFA  0E00               	movlw	0
  3774  000FFC  6E15               	movwf	delay_ms@ms+1,c
  3775  000FFE  0E05               	movlw	5
  3776  001000  6E14               	movwf	delay_ms@ms,c
  3777  001002  EC99  F00C         	call	_delay_ms	;wreg free
  3778                           
  3779                           ;lcd.c: 18: LCD_WriteCmd(0x32);
  3780  001006  0E32               	movlw	50
  3781  001008  EC0B  F00B         	call	_LCD_WriteCmd
  3782  00100C                     l4329:
  3783  00100C  EC90  F00B         	call	_LCD_WaitBusy	;wreg free
  3784  001010  0900               	iorlw	0
  3785  001012  A4D8               	btfss	status,2,c
  3786  001014  D7FB               	goto	l4329
  3787                           
  3788                           ;lcd.c: 22: LCD_WriteCmd(0x28);
  3789  001016  0E28               	movlw	40
  3790  001018  EC0B  F00B         	call	_LCD_WriteCmd
  3791  00101C                     l4333:
  3792  00101C  EC90  F00B         	call	_LCD_WaitBusy	;wreg free
  3793  001020  0900               	iorlw	0
  3794  001022  A4D8               	btfss	status,2,c
  3795  001024  D7FB               	goto	l4333
  3796                           
  3797                           ;lcd.c: 25: LCD_WriteCmd(0b00001011&0b00001101&0b00001110);
  3798  001026  0E08               	movlw	8
  3799  001028  EC0B  F00B         	call	_LCD_WriteCmd
  3800  00102C                     l4337:
  3801  00102C  EC90  F00B         	call	_LCD_WaitBusy	;wreg free
  3802  001030  0900               	iorlw	0
  3803  001032  A4D8               	btfss	status,2,c
  3804  001034  D7FB               	goto	l4337
  3805                           
  3806                           ;lcd.c: 28: LCD_WriteCmd(0b00001111&0b00001101&0b00001110);
  3807  001036  0E0C               	movlw	12
  3808  001038  EC0B  F00B         	call	_LCD_WriteCmd
  3809  00103C                     l4341:
  3810  00103C  EC90  F00B         	call	_LCD_WaitBusy	;wreg free
  3811  001040  0900               	iorlw	0
  3812  001042  A4D8               	btfss	status,2,c
  3813  001044  D7FB               	goto	l4341
  3814                           
  3815                           ;lcd.c: 31: LCD_WriteCmd(0x01);
  3816  001046  0E01               	movlw	1
  3817  001048  EC0B  F00B         	call	_LCD_WriteCmd
  3818                           
  3819                           ;lcd.c: 34: LCD_WriteCmd(0x06);
  3820  00104C  0E06               	movlw	6
  3821  00104E  EC0B  F00B         	call	_LCD_WriteCmd
  3822  001052                     l4345:
  3823  001052  EC90  F00B         	call	_LCD_WaitBusy	;wreg free
  3824  001056  0900               	iorlw	0
  3825  001058  A4D8               	btfss	status,2,c
  3826  00105A  D7FB               	goto	l4345
  3827                           
  3828                           ;lcd.c: 37: LCD_WriteCmd(0x01);
  3829  00105C  0E01               	movlw	1
  3830  00105E  EC0B  F00B         	call	_LCD_WriteCmd
  3831  001062  0012               	return		;funcret
  3832  001064                     __end_of_LCD_Initialize:
  3833                           	opt stack 0
  3834                           tblptru	equ	0xFF8
  3835                           tblptrh	equ	0xFF7
  3836                           tblptrl	equ	0xFF6
  3837                           tablat	equ	0xFF5
  3838                           prodh	equ	0xFF4
  3839                           prodl	equ	0xFF3
  3840                           intcon	equ	0xFF2
  3841                           postinc0	equ	0xFEE
  3842                           wreg	equ	0xFE8
  3843                           postdec1	equ	0xFE5
  3844                           fsr1l	equ	0xFE1
  3845                           indf2	equ	0xFDF
  3846                           fsr2h	equ	0xFDA
  3847                           fsr2l	equ	0xFD9
  3848                           status	equ	0xFD8
  3849                           
  3850 ;; *************** function _LCD_WaitBusy *****************
  3851 ;; Defined at:
  3852 ;;		line 138 in file "harwave/lcd.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      unsigned char 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3866 ;;      Params:         0       0       0       0       0       0       0
  3867 ;;      Locals:         0       0       0       0       0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0
  3869 ;;      Totals:         0       0       0       0       0       0       0
  3870 ;;Total ram usage:        0 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    3
  3873 ;; This function calls:
  3874 ;;		_delayFor18Tcy
  3875 ;; This function is called by:
  3876 ;;		_LCD_Initialize
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text12
  3881  001720                     __ptext12:
  3882                           	opt stack 0
  3883  001720                     _LCD_WaitBusy:
  3884                           	opt stack 26
  3885                           
  3886                           ;lcd.c: 140: PORTDbits.RD0 = 0;
  3887                           
  3888                           ;incstack = 0
  3889  001720  9083               	bcf	3971,0,c	;volatile
  3890                           
  3891                           ;lcd.c: 141: PORTDbits.RD1 = 1;
  3892  001722  8283               	bsf	3971,1,c	;volatile
  3893                           
  3894                           ;lcd.c: 142: delayFor18Tcy();
  3895  001724  ECDE  F00C         	call	_delayFor18Tcy	;wreg free
  3896                           
  3897                           ;lcd.c: 143: PORTDbits.RD2 = 1;
  3898  001728  8483               	bsf	3971,2,c	;volatile
  3899                           
  3900                           ;lcd.c: 144: delayFor18Tcy();
  3901  00172A  ECDE  F00C         	call	_delayFor18Tcy	;wreg free
  3902                           
  3903                           ;lcd.c: 166: TRISD |= 0x08;
  3904  00172E  8695               	bsf	3989,3,c	;volatile
  3905                           
  3906                           ;lcd.c: 167: if(PORTD&0x08)
  3907  001730  A683               	btfss	3971,3,c	;volatile
  3908  001732  D007               	goto	l172
  3909                           
  3910                           ;lcd.c: 168: {
  3911                           ;lcd.c: 169: PORTDbits.RD2 = 0;
  3912  001734  9483               	bcf	3971,2,c	;volatile
  3913                           
  3914                           ;lcd.c: 170: PORTDbits.RD2 = 1;
  3915  001736  8483               	bsf	3971,2,c	;volatile
  3916                           
  3917                           ;lcd.c: 171: PORTDbits.RD2 = 0;
  3918  001738  9483               	bcf	3971,2,c	;volatile
  3919                           
  3920                           ;lcd.c: 172: PORTDbits.RD1 = 0;
  3921  00173A  9283               	bcf	3971,1,c	;volatile
  3922                           
  3923                           ;lcd.c: 173: TRISD &=~(1<<3);
  3924  00173C  9695               	bcf	3989,3,c	;volatile
  3925                           
  3926                           ;lcd.c: 174: return 1;
  3927  00173E  0E01               	movlw	1
  3928                           
  3929                           ;lcd.c: 175: }
  3930  001740  0012               	return	
  3931  001742                     l172:
  3932                           
  3933                           ;lcd.c: 176: else
  3934                           ;lcd.c: 177: {
  3935                           ;lcd.c: 178: PORTDbits.RD2 = 0;
  3936  001742  9483               	bcf	3971,2,c	;volatile
  3937                           
  3938                           ;lcd.c: 179: PORTDbits.RD2 = 1;
  3939  001744  8483               	bsf	3971,2,c	;volatile
  3940                           
  3941                           ;lcd.c: 180: PORTDbits.RD2 = 0;
  3942  001746  9483               	bcf	3971,2,c	;volatile
  3943                           
  3944                           ;lcd.c: 181: PORTDbits.RD1 = 0;
  3945  001748  9283               	bcf	3971,1,c	;volatile
  3946                           
  3947                           ;lcd.c: 182: TRISD &=~(1<<3);
  3948  00174A  9695               	bcf	3989,3,c	;volatile
  3949                           
  3950                           ;lcd.c: 183: return 0;
  3951  00174C  0E00               	movlw	0
  3952  00174E  0012               	return	
  3953  001750                     __end_of_LCD_WaitBusy:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           prodh	equ	0xFF4
  3960                           prodl	equ	0xFF3
  3961                           intcon	equ	0xFF2
  3962                           postinc0	equ	0xFEE
  3963                           wreg	equ	0xFE8
  3964                           postdec1	equ	0xFE5
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8
  3970                           
  3971 ;; *************** function _delayFor18Tcy *****************
  3972 ;; Defined at:
  3973 ;;		line 18 in file "harwave/mydelay.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;		None
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      void 
  3980 ;; Registers used:
  3981 ;;		wreg, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3987 ;;      Params:         0       0       0       0       0       0       0
  3988 ;;      Locals:         0       0       0       0       0       0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0
  3990 ;;      Totals:         0       0       0       0       0       0       0
  3991 ;;Total ram usage:        0 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    2
  3994 ;; This function calls:
  3995 ;;		_Delay1TCYx
  3996 ;; This function is called by:
  3997 ;;		_LCD_WaitBusy
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text13
  4002  0019BC                     __ptext13:
  4003                           	opt stack 0
  4004  0019BC                     _delayFor18Tcy:
  4005                           	opt stack 26
  4006                           
  4007                           ;mydelay.c: 20: Delay1TCYx(18);
  4008                           
  4009                           ;incstack = 0
  4010  0019BC  0E12               	movlw	18
  4011  0019BE  ECD1  F00C         	call	_Delay1TCYx
  4012  0019C2  0012               	return		;funcret
  4013  0019C4                     __end_of_delayFor18Tcy:
  4014                           	opt stack 0
  4015                           tblptru	equ	0xFF8
  4016                           tblptrh	equ	0xFF7
  4017                           tblptrl	equ	0xFF6
  4018                           tablat	equ	0xFF5
  4019                           prodh	equ	0xFF4
  4020                           prodl	equ	0xFF3
  4021                           intcon	equ	0xFF2
  4022                           postinc0	equ	0xFEE
  4023                           wreg	equ	0xFE8
  4024                           postdec1	equ	0xFE5
  4025                           fsr1l	equ	0xFE1
  4026                           indf2	equ	0xFDF
  4027                           fsr2h	equ	0xFDA
  4028                           fsr2l	equ	0xFD9
  4029                           status	equ	0xFD8
  4030                           
  4031 ;; *************** function _Delay1TCYx *****************
  4032 ;; Defined at:
  4033 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d1tcyx.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  unit            1    wreg     unsigned char 
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;  unit            1   17[COMRAM] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  1    wreg      void 
  4040 ;; Registers used:
  4041 ;;		wreg
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4047 ;;      Params:         0       0       0       0       0       0       0
  4048 ;;      Locals:         1       0       0       0       0       0       0
  4049 ;;      Temps:          0       0       0       0       0       0       0
  4050 ;;      Totals:         1       0       0       0       0       0       0
  4051 ;;Total ram usage:        1 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    1
  4054 ;; This function calls:
  4055 ;;		Nothing
  4056 ;; This function is called by:
  4057 ;;		_delayFor18Tcy
  4058 ;;		_delay_us1
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text14
  4063  0019A2                     __ptext14:
  4064                           	opt stack 0
  4065  0019A2                     _Delay1TCYx:
  4066                           	opt stack 26
  4067                           
  4068                           ;incstack = 0
  4069                           ;Delay1TCYx@unit stored from wreg
  4070  0019A2  6E12               	movwf	Delay1TCYx@unit,c
  4071  0019A4                     l917:
  4072  0019A4  F000               	nop	
  4073  0019A6  2E12               	decfsz	Delay1TCYx@unit,f,c
  4074  0019A8  D7FD               	goto	l917
  4075  0019AA  0012               	return	
  4076  0019AC                     __end_of_Delay1TCYx:
  4077                           	opt stack 0
  4078                           tblptru	equ	0xFF8
  4079                           tblptrh	equ	0xFF7
  4080                           tblptrl	equ	0xFF6
  4081                           tablat	equ	0xFF5
  4082                           prodh	equ	0xFF4
  4083                           prodl	equ	0xFF3
  4084                           intcon	equ	0xFF2
  4085                           postinc0	equ	0xFEE
  4086                           wreg	equ	0xFE8
  4087                           postdec1	equ	0xFE5
  4088                           fsr1l	equ	0xFE1
  4089                           indf2	equ	0xFDF
  4090                           fsr2h	equ	0xFDA
  4091                           fsr2l	equ	0xFD9
  4092                           status	equ	0xFD8
  4093                           
  4094 ;; *************** function _LCD_GotoXY *****************
  4095 ;; Defined at:
  4096 ;;		line 89 in file "harwave/lcd.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  pos             1    wreg     unsigned char 
  4099 ;;  ln              1   22[COMRAM] unsigned char 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;  pos             1   27[COMRAM] unsigned char 
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      void 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2, status,0, cstack
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4111 ;;      Params:         1       0       0       0       0       0       0
  4112 ;;      Locals:         3       0       0       0       0       0       0
  4113 ;;      Temps:          2       0       0       0       0       0       0
  4114 ;;      Totals:         6       0       0       0       0       0       0
  4115 ;;Total ram usage:        6 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; Hardware stack levels required when called:    4
  4118 ;; This function calls:
  4119 ;;		_LCD_WriteCmd
  4120 ;;		_delay_ms
  4121 ;; This function is called by:
  4122 ;;		_main
  4123 ;;		_LCD_CreateFont
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text15
  4128  001560                     __ptext15:
  4129                           	opt stack 0
  4130  001560                     _LCD_GotoXY:
  4131                           	opt stack 26
  4132                           
  4133                           ;incstack = 0
  4134                           ;LCD_GotoXY@pos stored from wreg
  4135  001560  6E1C               	movwf	LCD_GotoXY@pos,c
  4136                           
  4137                           ;lcd.c: 92: if ((ln > (2-1)) || (pos > (16-1)))
  4138  001562  0E02               	movlw	2
  4139  001564  6017               	cpfslt	LCD_GotoXY@ln,c
  4140  001566  0012               	return	
  4141  001568  0E0F               	movlw	15
  4142  00156A  641C               	cpfsgt	LCD_GotoXY@pos,c
  4143  00156C  D001               	goto	l4353
  4144  00156E  0012               	return	
  4145  001570                     l4353:
  4146                           
  4147                           ;lcd.c: 96: }
  4148                           ;lcd.c: 99: LCD_WriteCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  4149  001570  0417               	decf	LCD_GotoXY@ln,w,c
  4150  001572  B4D8               	btfsc	status,2,c
  4151  001574  D002               	goto	l4357
  4152  001576  0E80               	movlw	128
  4153  001578  D001               	goto	L1
  4154  00157A                     l4357:
  4155  00157A  0EC0               	movlw	192
  4156  00157C                     L1:
  4157  00157C  C01C  F018         	movff	LCD_GotoXY@pos,??_LCD_GotoXY
  4158  001580  6A19               	clrf	(??_LCD_GotoXY+1)& (0+255),c
  4159  001582  1018               	iorwf	??_LCD_GotoXY,w,c
  4160  001584  6E1A               	movwf	_LCD_GotoXY$640,c
  4161  001586  5019               	movf	??_LCD_GotoXY+1,w,c
  4162  001588  6E1B               	movwf	_LCD_GotoXY$640+1,c
  4163  00158A  501A               	movf	_LCD_GotoXY$640,w,c
  4164  00158C  EC0B  F00B         	call	_LCD_WriteCmd
  4165                           
  4166                           ;lcd.c: 102: delay_ms(5);
  4167  001590  0E00               	movlw	0
  4168  001592  6E15               	movwf	delay_ms@ms+1,c
  4169  001594  0E05               	movlw	5
  4170  001596  6E14               	movwf	delay_ms@ms,c
  4171  001598  EC99  F00C         	call	_delay_ms	;wreg free
  4172  00159C  0012               	return		;funcret
  4173  00159E                     __end_of_LCD_GotoXY:
  4174                           	opt stack 0
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           intcon	equ	0xFF2
  4182                           postinc0	equ	0xFEE
  4183                           wreg	equ	0xFE8
  4184                           postdec1	equ	0xFE5
  4185                           fsr1l	equ	0xFE1
  4186                           indf2	equ	0xFDF
  4187                           fsr2h	equ	0xFDA
  4188                           fsr2l	equ	0xFD9
  4189                           status	equ	0xFD8
  4190                           
  4191 ;; *************** function _LCD_WriteCmd *****************
  4192 ;; Defined at:
  4193 ;;		line 74 in file "harwave/lcd.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;  ch              1    wreg     unsigned char 
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  ch              1   21[COMRAM] unsigned char 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4207 ;;      Params:         0       0       0       0       0       0       0
  4208 ;;      Locals:         1       0       0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0
  4210 ;;      Totals:         1       0       0       0       0       0       0
  4211 ;;Total ram usage:        1 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    3
  4214 ;; This function calls:
  4215 ;;		_LCDWriteNibble
  4216 ;;		_delay_ms
  4217 ;; This function is called by:
  4218 ;;		_LCD_Initialize
  4219 ;;		_LCD_GotoXY
  4220 ;;		_main
  4221 ;;		_LCD_CreateFont
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text16
  4226  001616                     __ptext16:
  4227                           	opt stack 0
  4228  001616                     _LCD_WriteCmd:
  4229                           	opt stack 27
  4230                           
  4231                           ;incstack = 0
  4232                           ;LCD_WriteCmd@ch stored from wreg
  4233  001616  6E16               	movwf	LCD_WriteCmd@ch,c
  4234                           
  4235                           ;lcd.c: 76: delay_ms(5);
  4236  001618  0E00               	movlw	0
  4237  00161A  6E15               	movwf	delay_ms@ms+1,c
  4238  00161C  0E05               	movlw	5
  4239  00161E  6E14               	movwf	delay_ms@ms,c
  4240  001620  EC99  F00C         	call	_delay_ms	;wreg free
  4241                           
  4242                           ;lcd.c: 79: LCDWriteNibble(ch,0);
  4243  001624  0E00               	movlw	0
  4244  001626  6E12               	movwf	LCDWriteNibble@rs,c
  4245  001628  5016               	movf	LCD_WriteCmd@ch,w,c
  4246  00162A  ECBE  F00B         	call	_LCDWriteNibble
  4247                           
  4248                           ;lcd.c: 82: ch = (ch << 4);
  4249  00162E  3816               	swapf	LCD_WriteCmd@ch,w,c
  4250  001630  0BF0               	andlw	240
  4251  001632  6E16               	movwf	LCD_WriteCmd@ch,c
  4252                           
  4253                           ;lcd.c: 84: delay_ms(1);
  4254  001634  0E00               	movlw	0
  4255  001636  6E15               	movwf	delay_ms@ms+1,c
  4256  001638  0E01               	movlw	1
  4257  00163A  6E14               	movwf	delay_ms@ms,c
  4258  00163C  EC99  F00C         	call	_delay_ms	;wreg free
  4259                           
  4260                           ;lcd.c: 87: LCDWriteNibble(ch,0);
  4261  001640  0E00               	movlw	0
  4262  001642  6E12               	movwf	LCDWriteNibble@rs,c
  4263  001644  5016               	movf	LCD_WriteCmd@ch,w,c
  4264  001646  ECBE  F00B         	call	_LCDWriteNibble
  4265  00164A  0012               	return		;funcret
  4266  00164C                     __end_of_LCD_WriteCmd:
  4267                           	opt stack 0
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           prodh	equ	0xFF4
  4273                           prodl	equ	0xFF3
  4274                           intcon	equ	0xFF2
  4275                           postinc0	equ	0xFEE
  4276                           wreg	equ	0xFE8
  4277                           postdec1	equ	0xFE5
  4278                           fsr1l	equ	0xFE1
  4279                           indf2	equ	0xFDF
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function _LCDWriteNibble *****************
  4285 ;; Defined at:
  4286 ;;		line 41 in file "harwave/lcd.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  ch              1    wreg     unsigned char 
  4289 ;;  rs              1   17[COMRAM] unsigned char 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  ch              1   18[COMRAM] unsigned char 
  4292 ;; Return value:  Size  Location     Type
  4293 ;;                  1    wreg      void 
  4294 ;; Registers used:
  4295 ;;		wreg, status,2, status,0
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4301 ;;      Params:         1       0       0       0       0       0       0
  4302 ;;      Locals:         1       0       0       0       0       0       0
  4303 ;;      Temps:          0       0       0       0       0       0       0
  4304 ;;      Totals:         2       0       0       0       0       0       0
  4305 ;;Total ram usage:        2 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; Hardware stack levels required when called:    1
  4308 ;; This function calls:
  4309 ;;		Nothing
  4310 ;; This function is called by:
  4311 ;;		_LCD_WriteCmd
  4312 ;;		_LCD_WriteData
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text17
  4317  00177C                     __ptext17:
  4318                           	opt stack 0
  4319  00177C                     _LCDWriteNibble:
  4320                           	opt stack 27
  4321                           
  4322                           ;incstack = 0
  4323                           ;LCDWriteNibble@ch stored from wreg
  4324  00177C  6E13               	movwf	LCDWriteNibble@ch,c
  4325                           
  4326                           ;lcd.c: 44: ch = (ch >> 4);
  4327  00177E  3813               	swapf	LCDWriteNibble@ch,w,c
  4328  001780  0B0F               	andlw	15
  4329  001782  6E13               	movwf	LCDWriteNibble@ch,c
  4330                           
  4331                           ;lcd.c: 47: ch = (ch & 0x0F);
  4332  001784  5013               	movf	LCDWriteNibble@ch,w,c
  4333  001786  0B0F               	andlw	15
  4334  001788  6E13               	movwf	LCDWriteNibble@ch,c
  4335                           
  4336                           ;lcd.c: 56: PORTD = (PORTD & 0xF0);
  4337  00178A  5083               	movf	3971,w,c	;volatile
  4338  00178C  0BF0               	andlw	240
  4339  00178E  6E83               	movwf	3971,c	;volatile
  4340                           
  4341                           ;lcd.c: 59: PORTD = (PORTD | (ch ));
  4342  001790  5083               	movf	3971,w,c	;volatile
  4343  001792  1013               	iorwf	LCDWriteNibble@ch,w,c
  4344  001794  6E83               	movwf	3971,c	;volatile
  4345                           
  4346                           ;lcd.c: 62: PORTDbits.RD0 = rs;
  4347  001796  B012               	btfsc	LCDWriteNibble@rs,0,c
  4348  001798  D002               	bra	u1935
  4349  00179A  9083               	bcf	3971,0,c	;volatile
  4350  00179C  D001               	bra	u1936
  4351  00179E                     u1935:
  4352  00179E  8083               	bsf	3971,0,c	;volatile
  4353  0017A0                     u1936:
  4354                           
  4355                           ;lcd.c: 65: PORTDbits.RD1 = 0;
  4356  0017A0  9283               	bcf	3971,1,c	;volatile
  4357                           
  4358                           ;lcd.c: 68: PORTDbits.RD2 = 1;
  4359  0017A2  8483               	bsf	3971,2,c	;volatile
  4360                           
  4361                           ;lcd.c: 71: PORTDbits.RD2 = 0;
  4362  0017A4  9483               	bcf	3971,2,c	;volatile
  4363  0017A6  0012               	return		;funcret
  4364  0017A8                     __end_of_LCDWriteNibble:
  4365                           	opt stack 0
  4366                           tblptru	equ	0xFF8
  4367                           tblptrh	equ	0xFF7
  4368                           tblptrl	equ	0xFF6
  4369                           tablat	equ	0xFF5
  4370                           prodh	equ	0xFF4
  4371                           prodl	equ	0xFF3
  4372                           intcon	equ	0xFF2
  4373                           postinc0	equ	0xFEE
  4374                           wreg	equ	0xFE8
  4375                           postdec1	equ	0xFE5
  4376                           fsr1l	equ	0xFE1
  4377                           indf2	equ	0xFDF
  4378                           fsr2h	equ	0xFDA
  4379                           fsr2l	equ	0xFD9
  4380                           status	equ	0xFD8
  4381                           
  4382 ;; *************** function _GPIO_initial *****************
  4383 ;; Defined at:
  4384 ;;		line 5 in file "harwave/initial.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;		None
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;		None
  4389 ;; Return value:  Size  Location     Type
  4390 ;;                  1    wreg      void 
  4391 ;; Registers used:
  4392 ;;		wreg, status,2
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4398 ;;      Params:         0       0       0       0       0       0       0
  4399 ;;      Locals:         0       0       0       0       0       0       0
  4400 ;;      Temps:          0       0       0       0       0       0       0
  4401 ;;      Totals:         0       0       0       0       0       0       0
  4402 ;;Total ram usage:        0 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:    1
  4405 ;; This function calls:
  4406 ;;		Nothing
  4407 ;; This function is called by:
  4408 ;;		_main
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text18
  4413  001994                     __ptext18:
  4414                           	opt stack 0
  4415  001994                     _GPIO_initial:
  4416                           	opt stack 29
  4417                           
  4418                           ;initial.c: 7: TRISD = 0x00;
  4419                           
  4420                           ;incstack = 0
  4421  001994  0E00               	movlw	0
  4422  001996  6E95               	movwf	3989,c	;volatile
  4423                           
  4424                           ;initial.c: 8: LATD = 0x00;
  4425  001998  0E00               	movlw	0
  4426  00199A  6E8C               	movwf	3980,c	;volatile
  4427                           
  4428                           ;initial.c: 9: TRISAbits.RA0=0;
  4429  00199C  9092               	bcf	3986,0,c	;volatile
  4430                           
  4431                           ;initial.c: 10: LATAbits.LA0=0;
  4432  00199E  9089               	bcf	3977,0,c	;volatile
  4433  0019A0  0012               	return		;funcret
  4434  0019A2                     __end_of_GPIO_initial:
  4435                           	opt stack 0
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           prodh	equ	0xFF4
  4441                           prodl	equ	0xFF3
  4442                           intcon	equ	0xFF2
  4443                           postinc0	equ	0xFEE
  4444                           wreg	equ	0xFE8
  4445                           postdec1	equ	0xFE5
  4446                           fsr1l	equ	0xFE1
  4447                           indf2	equ	0xFDF
  4448                           fsr2h	equ	0xFDA
  4449                           fsr2l	equ	0xFD9
  4450                           status	equ	0xFD8
  4451                           
  4452 ;; *************** function _ESP8266_client *****************
  4453 ;; Defined at:
  4454 ;;		line 246 in file "harwave/UART.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      void 
  4461 ;; Registers used:
  4462 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4468 ;;      Params:         0       0       0       0       0       0       0
  4469 ;;      Locals:         0       0       0       0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0       0       0
  4471 ;;      Totals:         0       0       0       0       0       0       0
  4472 ;;Total ram usage:        0 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    6
  4475 ;; This function calls:
  4476 ;;		_ESP8266_AT_Test
  4477 ;;		_ESP8266_Cmd
  4478 ;;		_ESP8266_JoinAP
  4479 ;;		_ESP8266_Link_Server
  4480 ;;		_ESP8266_Rst
  4481 ;;		_STA_MODE
  4482 ;; This function is called by:
  4483 ;;		_main
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text19
  4488  000F0A                     __ptext19:
  4489                           	opt stack 0
  4490  000F0A                     _ESP8266_client:
  4491                           	opt stack 24
  4492                           
  4493                           ;UART.c: 247: ESP8266_Rst ();
  4494                           
  4495                           ;incstack = 0
  4496  000F0A  ECFF  F00B         	call	_ESP8266_Rst	;wreg free
  4497                           
  4498                           ;UART.c: 248: ESP8266_AT_Test () ;
  4499  000F0E  ECD4  F00B         	call	_ESP8266_AT_Test	;wreg free
  4500                           
  4501                           ;UART.c: 249: ESP8266_Cmd ( (void *)"AT+CWQAP\r\n",(void *)"OK", 0 , 500 );
  4502  000F12  0E7A               	movlw	low STR_49
  4503  000F14  6E25               	movwf	ESP8266_Cmd@cmd,c
  4504  000F16  0E7F               	movlw	high STR_49
  4505  000F18  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4506  000F1A  0EBB               	movlw	low (STR_3+5)
  4507  000F1C  6E27               	movwf	ESP8266_Cmd@reply1,c
  4508  000F1E  0E7F               	movlw	high (STR_3+5)
  4509  000F20  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4510  000F22  0E00               	movlw	0
  4511  000F24  6E29               	movwf	ESP8266_Cmd@reply2,c
  4512  000F26  0E00               	movlw	0
  4513  000F28  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4514  000F2A  0E01               	movlw	1
  4515  000F2C  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4516  000F2E  0EF4               	movlw	244
  4517  000F30  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4518  000F32  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  4519                           
  4520                           ;UART.c: 250: STA_MODE();
  4521  000F36  EC77  F00B         	call	_STA_MODE	;wreg free
  4522  000F3A                     l4383:
  4523  000F3A  0EEA               	movlw	low STR_38
  4524  000F3C  6E2E               	movwf	ESP8266_JoinAP@pSSID,c
  4525  000F3E  0E7F               	movlw	high STR_38
  4526  000F40  6E2F               	movwf	ESP8266_JoinAP@pSSID+1,c
  4527  000F42  0E85               	movlw	low STR_39
  4528  000F44  6E30               	movwf	ESP8266_JoinAP@pPassWord,c
  4529  000F46  0E7F               	movlw	high STR_39
  4530  000F48  6E31               	movwf	ESP8266_JoinAP@pPassWord+1,c
  4531  000F4A  EC6A  F00A         	call	_ESP8266_JoinAP	;wreg free
  4532  000F4E  0900               	iorlw	0
  4533  000F50  B4D8               	btfsc	status,2,c
  4534  000F52  D7F3               	goto	l4383
  4535  000F54                     l4385:
  4536  000F54  0EFF               	movlw	low STR_53
  4537  000F56  6E25               	movwf	ESP8266_Cmd@cmd,c
  4538  000F58  0E7E               	movlw	high STR_53
  4539  000F5A  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4540  000F5C  0EBB               	movlw	low (STR_3+5)
  4541  000F5E  6E27               	movwf	ESP8266_Cmd@reply1,c
  4542  000F60  0E7F               	movlw	high (STR_3+5)
  4543  000F62  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4544  000F64  0E00               	movlw	0
  4545  000F66  6E29               	movwf	ESP8266_Cmd@reply2,c
  4546  000F68  0E00               	movlw	0
  4547  000F6A  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4548  000F6C  0E01               	movlw	1
  4549  000F6E  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4550  000F70  0EF4               	movlw	244
  4551  000F72  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4552  000F74  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  4553  000F78  0900               	iorlw	0
  4554  000F7A  B4D8               	btfsc	status,2,c
  4555  000F7C  D7EB               	goto	l4385
  4556  000F7E                     l4387:
  4557  000F7E  0E0E               	movlw	low STR_41
  4558  000F80  6E25               	movwf	ESP8266_Cmd@cmd,c
  4559  000F82  0E7F               	movlw	high STR_41
  4560  000F84  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4561  000F86  0EBB               	movlw	low (STR_3+5)
  4562  000F88  6E27               	movwf	ESP8266_Cmd@reply1,c
  4563  000F8A  0E7F               	movlw	high (STR_3+5)
  4564  000F8C  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4565  000F8E  0E00               	movlw	0
  4566  000F90  6E29               	movwf	ESP8266_Cmd@reply2,c
  4567  000F92  0E00               	movlw	0
  4568  000F94  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4569  000F96  0E01               	movlw	1
  4570  000F98  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4571  000F9A  0EF4               	movlw	244
  4572  000F9C  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4573  000F9E  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  4574  000FA2  0900               	iorlw	0
  4575  000FA4  B4D8               	btfsc	status,2,c
  4576  000FA6  D7EB               	goto	l4387
  4577  000FA8                     l4389:
  4578  000FA8  0E6E               	movlw	low STR_57
  4579  000FAA  6E2E               	movwf	ESP8266_Link_Server@ip,c
  4580  000FAC  0E7F               	movlw	high STR_57
  4581  000FAE  6E2F               	movwf	ESP8266_Link_Server@ip+1,c
  4582  000FB0  0EE5               	movlw	low STR_58
  4583  000FB2  6E30               	movwf	ESP8266_Link_Server@ComNum,c
  4584  000FB4  0E7F               	movlw	high STR_58
  4585  000FB6  6E31               	movwf	ESP8266_Link_Server@ComNum+1,c
  4586  000FB8  0E00               	movlw	0
  4587  000FBA  6E33               	movwf	ESP8266_Link_Server@id+1,c
  4588  000FBC  0E07               	movlw	7
  4589  000FBE  6E32               	movwf	ESP8266_Link_Server@id,c
  4590  000FC0  0E00               	movlw	0
  4591  000FC2  EC27  F006         	call	_ESP8266_Link_Server
  4592  000FC6  0900               	iorlw	0
  4593  000FC8  A4D8               	btfss	status,2,c
  4594  000FCA  0012               	return	
  4595  000FCC  D7ED               	goto	l4389
  4596  000FCE                     __end_of_ESP8266_client:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           postinc0	equ	0xFEE
  4606                           wreg	equ	0xFE8
  4607                           postdec1	equ	0xFE5
  4608                           fsr1l	equ	0xFE1
  4609                           indf2	equ	0xFDF
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function _STA_MODE *****************
  4615 ;; Defined at:
  4616 ;;		line 230 in file "harwave/UART.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4630 ;;      Params:         0       0       0       0       0       0       0
  4631 ;;      Locals:         0       0       0       0       0       0       0
  4632 ;;      Temps:          0       0       0       0       0       0       0
  4633 ;;      Totals:         0       0       0       0       0       0       0
  4634 ;;Total ram usage:        0 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    5
  4637 ;; This function calls:
  4638 ;;		_ESP8266_Cmd
  4639 ;;		_ESP8266_Net_Mode_Choose
  4640 ;; This function is called by:
  4641 ;;		_ESP8266_client
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text20
  4646  0016EE                     __ptext20:
  4647                           	opt stack 0
  4648  0016EE                     _STA_MODE:
  4649                           	opt stack 24
  4650                           
  4651                           ;UART.c: 231: ESP8266_Net_Mode_Choose ( STA ) ;
  4652                           
  4653                           ;incstack = 0
  4654  0016EE  0E00               	movlw	0
  4655  0016F0  ECC0  F008         	call	_ESP8266_Net_Mode_Choose
  4656  0016F4                     l4295:
  4657  0016F4  0E54               	movlw	low STR_32
  4658  0016F6  6E25               	movwf	ESP8266_Cmd@cmd,c
  4659  0016F8  0E7F               	movlw	high STR_32
  4660  0016FA  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4661  0016FC  0E8F               	movlw	low STR_36
  4662  0016FE  6E27               	movwf	ESP8266_Cmd@reply1,c
  4663  001700  0E7F               	movlw	high STR_36
  4664  001702  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4665  001704  0EBB               	movlw	low (STR_3+5)
  4666  001706  6E29               	movwf	ESP8266_Cmd@reply2,c
  4667  001708  0E7F               	movlw	high (STR_3+5)
  4668  00170A  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4669  00170C  0E00               	movlw	0
  4670  00170E  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4671  001710  0E64               	movlw	100
  4672  001712  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4673  001714  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  4674  001718  0900               	iorlw	0
  4675  00171A  A4D8               	btfss	status,2,c
  4676  00171C  0012               	return	
  4677  00171E  D7EA               	goto	l4295
  4678  001720                     __end_of_STA_MODE:
  4679                           	opt stack 0
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           postinc0	equ	0xFEE
  4688                           wreg	equ	0xFE8
  4689                           postdec1	equ	0xFE5
  4690                           fsr1l	equ	0xFE1
  4691                           indf2	equ	0xFDF
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696 ;; *************** function _ESP8266_Net_Mode_Choose *****************
  4697 ;; Defined at:
  4698 ;;		line 148 in file "harwave/UART.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  MODE            1    wreg     enum E3772
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;  MODE            1   45[COMRAM] enum E3772
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      unsigned char 
  4705 ;; Registers used:
  4706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4712 ;;      Params:         0       0       0       0       0       0       0
  4713 ;;      Locals:         1       0       0       0       0       0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0
  4715 ;;      Totals:         1       0       0       0       0       0       0
  4716 ;;Total ram usage:        1 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    4
  4719 ;; This function calls:
  4720 ;;		_ESP8266_Cmd
  4721 ;; This function is called by:
  4722 ;;		_STA_MODE
  4723 ;;		_AP_MODE
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text21
  4728  001180                     __ptext21:
  4729                           	opt stack 0
  4730  001180                     _ESP8266_Net_Mode_Choose:
  4731                           	opt stack 24
  4732                           
  4733                           ;incstack = 0
  4734                           ;ESP8266_Net_Mode_Choose@MODE stored from wreg
  4735  001180  6E2E               	movwf	ESP8266_Net_Mode_Choose@MODE,c
  4736                           
  4737                           ;UART.c: 151: switch ( MODE )
  4738  001182  D039               	goto	l4209
  4739  001184                     l4195:
  4740                           
  4741                           ;UART.c: 154: return ESP8266_Cmd ( (void*)"AT+CWMODE=1\r\n", (void*)"OK", 0, 2500 );
  4742                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  4743  001184  0E1C               	movlw	low STR_9
  4744  001186  6E25               	movwf	ESP8266_Cmd@cmd,c
  4745  001188  0E7F               	movlw	high STR_9
  4746  00118A  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4747  00118C  0EBB               	movlw	low (STR_3+5)
  4748  00118E  6E27               	movwf	ESP8266_Cmd@reply1,c
  4749  001190  0E7F               	movlw	high (STR_3+5)
  4750  001192  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4751  001194  0E00               	movlw	0
  4752  001196  6E29               	movwf	ESP8266_Cmd@reply2,c
  4753  001198  0E00               	movlw	0
  4754  00119A  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4755  00119C  0E09               	movlw	9
  4756  00119E  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4757  0011A0  0EC4               	movlw	196
  4758  0011A2  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4759  0011A4  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  4760  0011A8  0012               	return	
  4761  0011AA                     l4199:
  4762                           
  4763                           ;UART.c: 157: return ESP8266_Cmd ( (void*)"AT+CWMODE=2\r\n", (void*)"OK", 0, 2500 );
  4764                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  4765  0011AA  0E38               	movlw	low STR_11
  4766  0011AC  6E25               	movwf	ESP8266_Cmd@cmd,c
  4767  0011AE  0E7F               	movlw	high STR_11
  4768  0011B0  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4769  0011B2  0EBB               	movlw	low (STR_3+5)
  4770  0011B4  6E27               	movwf	ESP8266_Cmd@reply1,c
  4771  0011B6  0E7F               	movlw	high (STR_3+5)
  4772  0011B8  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4773  0011BA  0E00               	movlw	0
  4774  0011BC  6E29               	movwf	ESP8266_Cmd@reply2,c
  4775  0011BE  0E00               	movlw	0
  4776  0011C0  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4777  0011C2  0E09               	movlw	9
  4778  0011C4  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4779  0011C6  0EC4               	movlw	196
  4780  0011C8  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4781  0011CA  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  4782  0011CE  0012               	return	
  4783  0011D0                     l4203:
  4784                           
  4785                           ;UART.c: 160: return ESP8266_Cmd ( (void*)"AT+CWMODE=3\r\n", (void*)"OK", 0, 2500 );
  4786                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  4787  0011D0  0E46               	movlw	low STR_13
  4788  0011D2  6E25               	movwf	ESP8266_Cmd@cmd,c
  4789  0011D4  0E7F               	movlw	high STR_13
  4790  0011D6  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4791  0011D8  0EBB               	movlw	low (STR_3+5)
  4792  0011DA  6E27               	movwf	ESP8266_Cmd@reply1,c
  4793  0011DC  0E7F               	movlw	high (STR_3+5)
  4794  0011DE  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4795  0011E0  0E00               	movlw	0
  4796  0011E2  6E29               	movwf	ESP8266_Cmd@reply2,c
  4797  0011E4  0E00               	movlw	0
  4798  0011E6  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4799  0011E8  0E09               	movlw	9
  4800  0011EA  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4801  0011EC  0EC4               	movlw	196
  4802  0011EE  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4803  0011F0  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  4804                           
  4805                           ;UART.c: 164: }
  4806                           
  4807                           ;UART.c: 163: return 0;
  4808                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  4809                           
  4810                           ;UART.c: 162: default:
  4811  0011F4  0012               	return	
  4812  0011F6                     l4209:
  4813  0011F6  502E               	movf	ESP8266_Net_Mode_Choose@MODE,w,c
  4814                           
  4815                           ; Switch size 1, requested type "space"
  4816                           ; Number of cases is 3, Range of values is 0 to 2
  4817                           ; switch strategies available:
  4818                           ; Name         Instructions Cycles
  4819                           ; simple_byte           10     6 (average)
  4820                           ;	Chosen strategy is simple_byte
  4821  0011F8  0A00               	xorlw	0	; case 0
  4822  0011FA  B4D8               	btfsc	status,2,c
  4823  0011FC  D7C3               	goto	l4195
  4824  0011FE  0A01               	xorlw	1	; case 1
  4825  001200  B4D8               	btfsc	status,2,c
  4826  001202  D7D3               	goto	l4199
  4827  001204  0A03               	xorlw	3	; case 2
  4828  001206  A4D8               	btfss	status,2,c
  4829  001208  0012               	return	
  4830  00120A  D7E2               	goto	l4203
  4831  00120C                     __end_of_ESP8266_Net_Mode_Choose:
  4832                           	opt stack 0
  4833                           tblptru	equ	0xFF8
  4834                           tblptrh	equ	0xFF7
  4835                           tblptrl	equ	0xFF6
  4836                           tablat	equ	0xFF5
  4837                           prodh	equ	0xFF4
  4838                           prodl	equ	0xFF3
  4839                           intcon	equ	0xFF2
  4840                           postinc0	equ	0xFEE
  4841                           wreg	equ	0xFE8
  4842                           postdec1	equ	0xFE5
  4843                           fsr1l	equ	0xFE1
  4844                           indf2	equ	0xFDF
  4845                           fsr2h	equ	0xFDA
  4846                           fsr2l	equ	0xFD9
  4847                           status	equ	0xFD8
  4848                           
  4849 ;; *************** function _ESP8266_Rst *****************
  4850 ;; Defined at:
  4851 ;;		line 135 in file "harwave/UART.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;		None
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;		None
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  1    wreg      void 
  4858 ;; Registers used:
  4859 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4865 ;;      Params:         0       0       0       0       0       0       0
  4866 ;;      Locals:         0       0       0       0       0       0       0
  4867 ;;      Temps:          0       0       0       0       0       0       0
  4868 ;;      Totals:         0       0       0       0       0       0       0
  4869 ;;Total ram usage:        0 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:    4
  4872 ;; This function calls:
  4873 ;;		_ESP8266_Cmd
  4874 ;; This function is called by:
  4875 ;;		_ESP8266_client
  4876 ;;		_ESP8266_Server
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text22
  4881  0017FE                     __ptext22:
  4882                           	opt stack 0
  4883  0017FE                     _ESP8266_Rst:
  4884                           	opt stack 25
  4885                           
  4886                           ;UART.c: 138: ESP8266_Cmd ( (void*)"AT+RST\r\n", (void*)"OK", (void*)"ready", 2500 );
  4887                           
  4888                           ;incstack = 0
  4889  0017FE  0EAD               	movlw	low STR_6
  4890  001800  6E25               	movwf	ESP8266_Cmd@cmd,c
  4891  001802  0E7F               	movlw	high STR_6
  4892  001804  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  4893  001806  0EBB               	movlw	low (STR_3+5)
  4894  001808  6E27               	movwf	ESP8266_Cmd@reply1,c
  4895  00180A  0E7F               	movlw	high (STR_3+5)
  4896  00180C  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  4897  00180E  0EDA               	movlw	low STR_8
  4898  001810  6E29               	movwf	ESP8266_Cmd@reply2,c
  4899  001812  0E7F               	movlw	high STR_8
  4900  001814  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  4901  001816  0E09               	movlw	9
  4902  001818  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  4903  00181A  0EC4               	movlw	196
  4904  00181C  6E2B               	movwf	ESP8266_Cmd@waittime,c
  4905  00181E  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  4906  001822  0012               	return		;funcret
  4907  001824                     __end_of_ESP8266_Rst:
  4908                           	opt stack 0
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           prodh	equ	0xFF4
  4914                           prodl	equ	0xFF3
  4915                           intcon	equ	0xFF2
  4916                           postinc0	equ	0xFEE
  4917                           wreg	equ	0xFE8
  4918                           postdec1	equ	0xFE5
  4919                           fsr1l	equ	0xFE1
  4920                           indf2	equ	0xFDF
  4921                           fsr2h	equ	0xFDA
  4922                           fsr2l	equ	0xFD9
  4923                           status	equ	0xFD8
  4924                           
  4925 ;; *************** function _ESP8266_Link_Server *****************
  4926 ;; Defined at:
  4927 ;;		line 185 in file "harwave/UART.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  enumE           1    wreg     enum E3769
  4930 ;;  ip              2   45[COMRAM] PTR unsigned char 
  4931 ;;		 -> STR_57(12), 
  4932 ;;  ComNum          2   47[COMRAM] PTR unsigned char 
  4933 ;;		 -> STR_58(5), 
  4934 ;;  id              2   49[COMRAM] int 
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;  enumE           1  220[BANK1 ] enum E3769
  4937 ;;  cCmd          120    0[BANK1 ] unsigned char [120]
  4938 ;;  cStr          100  120[BANK1 ] unsigned char [100]
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  1    wreg      unsigned char 
  4941 ;; Registers used:
  4942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4948 ;;      Params:         6       0       0       0       0       0       0
  4949 ;;      Locals:         0       0     221       0       0       0       0
  4950 ;;      Temps:          0       0       0       0       0       0       0
  4951 ;;      Totals:         6       0     221       0       0       0       0
  4952 ;;Total ram usage:      227 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    4
  4955 ;; This function calls:
  4956 ;;		_ESP8266_Cmd
  4957 ;;		_sprintf
  4958 ;; This function is called by:
  4959 ;;		_ESP8266_client
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           	psect	text23
  4964  000C4E                     __ptext23:
  4965                           	opt stack 0
  4966  000C4E                     _ESP8266_Link_Server:
  4967                           	opt stack 25
  4968                           
  4969                           ;incstack = 0
  4970                           ;ESP8266_Link_Server@enumE stored from wreg
  4971  000C4E  0101               	movlb	1	; () banked
  4972  000C50  6FDC               	movwf	ESP8266_Link_Server@enumE& (0+255),b
  4973                           
  4974                           ;UART.c: 187: char cStr [100] = { 0 }, cCmd [120];
  4975  000C52  EE23  F000         	lfsr	2,ESP8266_Link_Server@F4048
  4976  000C56  EE11  F078         	lfsr	1,ESP8266_Link_Server@cStr
  4977  000C5A  0E63               	movlw	99
  4978  000C5C                     u4141:
  4979  000C5C  CFDB FFE3          	movff	plusw2,plusw1
  4980  000C60  06E8               	decf	wreg,f,c
  4981  000C62  E2FC               	bc	u4141
  4982                           
  4983                           ;UART.c: 189: switch ( enumE )
  4984  000C64  D02E               	goto	l4281
  4985  000C66                     l4275:
  4986                           
  4987                           ;UART.c: 192: sprintf ( cStr, (void*)"\"%s\",\"%s\",%s", "TCP", ip, ComNum );
  4988  000C66  0E78               	movlw	low ESP8266_Link_Server@cStr
  4989  000C68  6E1E               	movwf	sprintf@sp,c
  4990  000C6A  0E01               	movlw	high ESP8266_Link_Server@cStr
  4991  000C6C  6E1F               	movwf	sprintf@sp+1,c
  4992  000C6E  0E61               	movlw	low STR_20
  4993  000C70  6E20               	movwf	sprintf@f,c
  4994  000C72  0E7F               	movlw	high STR_20
  4995  000C74  6E21               	movwf	sprintf@f+1,c
  4996  000C76  0EEE               	movlw	low STR_21
  4997  000C78  6E22               	movwf	?_sprintf+4,c
  4998  000C7A  0E7F               	movlw	high STR_21
  4999  000C7C  6E23               	movwf	?_sprintf+5,c
  5000  000C7E  C02E  F024         	movff	ESP8266_Link_Server@ip,?_sprintf+6
  5001  000C82  C02F  F025         	movff	ESP8266_Link_Server@ip+1,?_sprintf+7
  5002  000C86  C030  F026         	movff	ESP8266_Link_Server@ComNum,?_sprintf+8
  5003  000C8A  C031  F027         	movff	ESP8266_Link_Server@ComNum+1,?_sprintf+9
  5004  000C8E  EC09  F000         	call	_sprintf	;wreg free
  5005                           
  5006                           ;UART.c: 193: break;
  5007  000C92  D01F               	goto	l4283
  5008  000C94                     l4277:
  5009                           
  5010                           ;UART.c: 196: sprintf ( cStr, (void*)"\"%s\",\"%s\",%s", "UDP", ip, ComNum );
  5011  000C94  0E78               	movlw	low ESP8266_Link_Server@cStr
  5012  000C96  6E1E               	movwf	sprintf@sp,c
  5013  000C98  0E01               	movlw	high ESP8266_Link_Server@cStr
  5014  000C9A  6E1F               	movwf	sprintf@sp+1,c
  5015  000C9C  0E61               	movlw	low STR_20
  5016  000C9E  6E20               	movwf	sprintf@f,c
  5017  000CA0  0E7F               	movlw	high STR_20
  5018  000CA2  6E21               	movwf	sprintf@f+1,c
  5019  000CA4  0EF2               	movlw	low STR_23
  5020  000CA6  6E22               	movwf	?_sprintf+4,c
  5021  000CA8  0E7F               	movlw	high STR_23
  5022  000CAA  6E23               	movwf	?_sprintf+5,c
  5023  000CAC  C02E  F024         	movff	ESP8266_Link_Server@ip,?_sprintf+6
  5024  000CB0  C02F  F025         	movff	ESP8266_Link_Server@ip+1,?_sprintf+7
  5025  000CB4  C030  F026         	movff	ESP8266_Link_Server@ComNum,?_sprintf+8
  5026  000CB8  C031  F027         	movff	ESP8266_Link_Server@ComNum+1,?_sprintf+9
  5027  000CBC  EC09  F000         	call	_sprintf	;wreg free
  5028                           
  5029                           ;UART.c: 201: }
  5030                           
  5031                           ;UART.c: 200: break;
  5032                           
  5033                           ;UART.c: 199: default:
  5034                           
  5035                           ;UART.c: 197: break;
  5036  000CC0  D008               	goto	l4283
  5037  000CC2                     l4281:
  5038  000CC2  0101               	movlb	1	; () banked
  5039  000CC4  51DC               	movf	ESP8266_Link_Server@enumE& (0+255),w,b
  5040                           
  5041                           ; Switch size 1, requested type "space"
  5042                           ; Number of cases is 2, Range of values is 0 to 1
  5043                           ; switch strategies available:
  5044                           ; Name         Instructions Cycles
  5045                           ; simple_byte            7     4 (average)
  5046                           ;	Chosen strategy is simple_byte
  5047  000CC6  0A00               	xorlw	0	; case 0
  5048  000CC8  B4D8               	btfsc	status,2,c
  5049  000CCA  D7CD               	goto	l4275
  5050  000CCC  0A01               	xorlw	1	; case 1
  5051  000CCE  B4D8               	btfsc	status,2,c
  5052  000CD0  D7E1               	goto	l4277
  5053  000CD2                     l4283:
  5054                           
  5055                           ;UART.c: 203: if ( id < 5 )
  5056  000CD2  BE33               	btfsc	ESP8266_Link_Server@id+1,7,c
  5057  000CD4  D006               	goto	l4285
  5058  000CD6  5033               	movf	ESP8266_Link_Server@id+1,w,c
  5059  000CD8  E117               	bnz	l4287
  5060  000CDA  0E05               	movlw	5
  5061  000CDC  5C32               	subwf	ESP8266_Link_Server@id,w,c
  5062  000CDE  B0D8               	btfsc	status,0,c
  5063  000CE0  D013               	goto	l4287
  5064  000CE2                     l4285:
  5065                           
  5066                           ;UART.c: 204: sprintf ( cCmd, (void*)"AT+CIPSTART=%d,%s\r\n", id, cStr);
  5067  000CE2  0E00               	movlw	low ESP8266_Link_Server@cCmd
  5068  000CE4  6E1E               	movwf	sprintf@sp,c
  5069  000CE6  0E01               	movlw	high ESP8266_Link_Server@cCmd
  5070  000CE8  6E1F               	movwf	sprintf@sp+1,c
  5071  000CEA  0E96               	movlw	low STR_24
  5072  000CEC  6E20               	movwf	sprintf@f,c
  5073  000CEE  0E7E               	movlw	high STR_24
  5074  000CF0  6E21               	movwf	sprintf@f+1,c
  5075  000CF2  C032  F022         	movff	ESP8266_Link_Server@id,?_sprintf+4
  5076  000CF6  C033  F023         	movff	ESP8266_Link_Server@id+1,?_sprintf+5
  5077  000CFA  0E78               	movlw	low ESP8266_Link_Server@cStr
  5078  000CFC  6E24               	movwf	?_sprintf+6,c
  5079  000CFE  0E01               	movlw	high ESP8266_Link_Server@cStr
  5080  000D00  6E25               	movwf	?_sprintf+7,c
  5081  000D02  EC09  F000         	call	_sprintf	;wreg free
  5082  000D06  D00E               	goto	l4289
  5083  000D08                     l4287:
  5084                           
  5085                           ;UART.c: 206: else
  5086                           ;UART.c: 207: sprintf ( cCmd, (void*)"AT+CIPSTART=%s\r\n", cStr );
  5087  000D08  0E00               	movlw	low ESP8266_Link_Server@cCmd
  5088  000D0A  6E1E               	movwf	sprintf@sp,c
  5089  000D0C  0E01               	movlw	high ESP8266_Link_Server@cCmd
  5090  000D0E  6E1F               	movwf	sprintf@sp+1,c
  5091  000D10  0EDF               	movlw	low STR_25
  5092  000D12  6E20               	movwf	sprintf@f,c
  5093  000D14  0E7E               	movlw	high STR_25
  5094  000D16  6E21               	movwf	sprintf@f+1,c
  5095  000D18  0E78               	movlw	low ESP8266_Link_Server@cStr
  5096  000D1A  6E22               	movwf	?_sprintf+4,c
  5097  000D1C  0E01               	movlw	high ESP8266_Link_Server@cStr
  5098  000D1E  6E23               	movwf	?_sprintf+5,c
  5099  000D20  EC09  F000         	call	_sprintf	;wreg free
  5100  000D24                     l4289:
  5101                           
  5102                           ;UART.c: 209: return ESP8266_Cmd ( cCmd, (void*)"CONNECT",(void*)"ALREAY", 90 );
  5103  000D24  0E00               	movlw	low ESP8266_Link_Server@cCmd
  5104  000D26  6E25               	movwf	ESP8266_Cmd@cmd,c
  5105  000D28  0E01               	movlw	high ESP8266_Link_Server@cCmd
  5106  000D2A  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5107  000D2C  0EBE               	movlw	low STR_26
  5108  000D2E  6E27               	movwf	ESP8266_Cmd@reply1,c
  5109  000D30  0E7F               	movlw	high STR_26
  5110  000D32  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5111  000D34  0ECD               	movlw	low STR_27
  5112  000D36  6E29               	movwf	ESP8266_Cmd@reply2,c
  5113  000D38  0E7F               	movlw	high STR_27
  5114  000D3A  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5115  000D3C  0E00               	movlw	0
  5116  000D3E  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5117  000D40  0E5A               	movlw	90
  5118  000D42  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5119  000D44  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  5120  000D48  0012               	return	
  5121  000D4A                     __end_of_ESP8266_Link_Server:
  5122                           	opt stack 0
  5123                           tblptru	equ	0xFF8
  5124                           tblptrh	equ	0xFF7
  5125                           tblptrl	equ	0xFF6
  5126                           tablat	equ	0xFF5
  5127                           prodh	equ	0xFF4
  5128                           prodl	equ	0xFF3
  5129                           intcon	equ	0xFF2
  5130                           postinc0	equ	0xFEE
  5131                           wreg	equ	0xFE8
  5132                           postdec1	equ	0xFE5
  5133                           plusw1	equ	0xFE3
  5134                           fsr1l	equ	0xFE1
  5135                           indf2	equ	0xFDF
  5136                           plusw2	equ	0xFDB
  5137                           fsr2h	equ	0xFDA
  5138                           fsr2l	equ	0xFD9
  5139                           status	equ	0xFD8
  5140                           
  5141 ;; *************** function _ESP8266_JoinAP *****************
  5142 ;; Defined at:
  5143 ;;		line 167 in file "harwave/UART.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;  pSSID           2   45[COMRAM] PTR unsigned char 
  5146 ;;		 -> STR_51(4), 
  5147 ;;  pPassWord       2   47[COMRAM] PTR unsigned char 
  5148 ;;		 -> STR_52(10), 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  cCmd          120    0[BANK1 ] unsigned char [120]
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  1    wreg      unsigned char 
  5153 ;; Registers used:
  5154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5160 ;;      Params:         4       0       0       0       0       0       0
  5161 ;;      Locals:         0       0     120       0       0       0       0
  5162 ;;      Temps:          0       0       0       0       0       0       0
  5163 ;;      Totals:         4       0     120       0       0       0       0
  5164 ;;Total ram usage:      124 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    4
  5167 ;; This function calls:
  5168 ;;		_ESP8266_Cmd
  5169 ;;		_sprintf
  5170 ;; This function is called by:
  5171 ;;		_ESP8266_client
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text24
  5176  0014D4                     __ptext24:
  5177                           	opt stack 0
  5178  0014D4                     _ESP8266_JoinAP:
  5179                           	opt stack 25
  5180                           
  5181                           ;UART.c: 169: char cCmd [120];
  5182                           ;UART.c: 171: sprintf ( cCmd, (void*)"AT+CWJAP=\"%s\",\"%s\"\r\n", pSSID, pPassWord );
  5183                           
  5184                           ;incstack = 0
  5185  0014D4  0E00               	movlw	low ESP8266_JoinAP@cCmd
  5186  0014D6  6E1E               	movwf	sprintf@sp,c
  5187  0014D8  0E01               	movlw	high ESP8266_JoinAP@cCmd
  5188  0014DA  6E1F               	movwf	sprintf@sp+1,c
  5189  0014DC  0E81               	movlw	low STR_15
  5190  0014DE  6E20               	movwf	sprintf@f,c
  5191  0014E0  0E7E               	movlw	high STR_15
  5192  0014E2  6E21               	movwf	sprintf@f+1,c
  5193  0014E4  C02E  F022         	movff	ESP8266_JoinAP@pSSID,?_sprintf+4
  5194  0014E8  C02F  F023         	movff	ESP8266_JoinAP@pSSID+1,?_sprintf+5
  5195  0014EC  C030  F024         	movff	ESP8266_JoinAP@pPassWord,?_sprintf+6
  5196  0014F0  C031  F025         	movff	ESP8266_JoinAP@pPassWord+1,?_sprintf+7
  5197  0014F4  EC09  F000         	call	_sprintf	;wreg free
  5198                           
  5199                           ;UART.c: 173: return ESP8266_Cmd ( cCmd, (void*)"OK", (void*)"CONNECTED", 15000 );
  5200  0014F8  0E00               	movlw	low ESP8266_JoinAP@cCmd
  5201  0014FA  6E25               	movwf	ESP8266_Cmd@cmd,c
  5202  0014FC  0E01               	movlw	high ESP8266_JoinAP@cCmd
  5203  0014FE  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5204  001500  0EBB               	movlw	low (STR_3+5)
  5205  001502  6E27               	movwf	ESP8266_Cmd@reply1,c
  5206  001504  0E7F               	movlw	high (STR_3+5)
  5207  001506  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5208  001508  0EA3               	movlw	low STR_17
  5209  00150A  6E29               	movwf	ESP8266_Cmd@reply2,c
  5210  00150C  0E7F               	movlw	high STR_17
  5211  00150E  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5212  001510  0E3A               	movlw	58
  5213  001512  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5214  001514  0E98               	movlw	152
  5215  001516  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5216  001518  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  5217  00151C  0012               	return	
  5218  00151E                     __end_of_ESP8266_JoinAP:
  5219                           	opt stack 0
  5220                           tblptru	equ	0xFF8
  5221                           tblptrh	equ	0xFF7
  5222                           tblptrl	equ	0xFF6
  5223                           tablat	equ	0xFF5
  5224                           prodh	equ	0xFF4
  5225                           prodl	equ	0xFF3
  5226                           intcon	equ	0xFF2
  5227                           postinc0	equ	0xFEE
  5228                           wreg	equ	0xFE8
  5229                           postdec1	equ	0xFE5
  5230                           plusw1	equ	0xFE3
  5231                           fsr1l	equ	0xFE1
  5232                           indf2	equ	0xFDF
  5233                           plusw2	equ	0xFDB
  5234                           fsr2h	equ	0xFDA
  5235                           fsr2l	equ	0xFD9
  5236                           status	equ	0xFD8
  5237                           
  5238 ;; *************** function _sprintf *****************
  5239 ;; Defined at:
  5240 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;  sp              2   29[COMRAM] PTR unsigned char 
  5243 ;;		 -> ESP8266_Link_Server@cCmd(120), ESP8266_Link_Server@cStr(100), ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120
      +), 
  5244 ;;		 -> ESP8266_SendString@cStr(20), 
  5245 ;;  f               2   31[COMRAM] PTR const unsigned char 
  5246 ;;		 -> STR_25(17), STR_24(20), STR_22(13), STR_20(13), 
  5247 ;;		 -> STR_18(26), STR_15(21), STR_1(19), 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  idx             1    0[BANK0 ] unsigned char 
  5250 ;;  tmpval          4    0        struct .
  5251 ;;  flag            2   19[BANK0 ] unsigned short 
  5252 ;;  width           2   16[BANK0 ] int 
  5253 ;;  val             2   13[BANK0 ] unsigned int 
  5254 ;;  ap              2   11[BANK0 ] PTR void [1]
  5255 ;;		 -> ?_sprintf(2), 
  5256 ;;  len             2    9[BANK0 ] unsigned int 
  5257 ;;  cp              2    7[BANK0 ] PTR const unsigned char 
  5258 ;;		 -> STR_63(7), sprintf@c(1), STR_58(5), STR_57(12), 
  5259 ;;		 -> STR_52(10), STR_51(4), STR_40(2), STR_39(10), 
  5260 ;;		 -> STR_38(4), STR_23(4), STR_21(4), ESP8266_Link_Server@cStr(100), 
  5261 ;;  c               1   18[BANK0 ] char 
  5262 ;;  prec            1   15[BANK0 ] char 
  5263 ;; Return value:  Size  Location     Type
  5264 ;;                  2   29[COMRAM] int 
  5265 ;; Registers used:
  5266 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5272 ;;      Params:        10       0       0       0       0       0       0
  5273 ;;      Locals:         0      21       0       0       0       0       0
  5274 ;;      Temps:          4       0       0       0       0       0       0
  5275 ;;      Totals:        14      21       0       0       0       0       0
  5276 ;;Total ram usage:       35 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:    2
  5279 ;; This function calls:
  5280 ;;		___lwdiv
  5281 ;;		___lwmod
  5282 ;;		___wmul
  5283 ;;		_isdigit
  5284 ;; This function is called by:
  5285 ;;		_ESP8266_JoinAP
  5286 ;;		_ESP8266_Link_Server
  5287 ;;		_ESP8266_SendString
  5288 ;;		_ESP8266_BuildAP
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text25
  5293  000012                     __ptext25:
  5294                           	opt stack 0
  5295  000012                     _sprintf:
  5296                           	opt stack 26
  5297                           
  5298                           ;doprnt.c: 494: va_list ap;
  5299                           ;doprnt.c: 499: signed char c;
  5300                           ;doprnt.c: 501: int width;
  5301                           ;doprnt.c: 506: signed char prec;
  5302                           ;doprnt.c: 508: unsigned short flag;
  5303                           ;doprnt.c: 523: union {
  5304                           ;doprnt.c: 524: unsigned long vd;
  5305                           ;doprnt.c: 525: double integ;
  5306                           ;doprnt.c: 526: } tmpval;
  5307                           ;doprnt.c: 528: unsigned int val;
  5308                           ;doprnt.c: 529: unsigned len;
  5309                           ;doprnt.c: 530: const char * cp;
  5310                           ;doprnt.c: 533: *ap = __va_start();
  5311                           
  5312                           ;incstack = 0
  5313  000012  0E22               	movlw	low (?_sprintf+4)
  5314  000014  0100               	movlb	0	; () banked
  5315  000016  6F8B               	movwf	sprintf@ap& (0+255),b
  5316  000018  0E00               	movlw	high (?_sprintf+4)
  5317  00001A  0100               	movlb	0	; () banked
  5318  00001C  6F8C               	movwf	(sprintf@ap+1)& (0+255),b
  5319                           
  5320                           ;doprnt.c: 536: while(c = *f++) {
  5321  00001E  EFFD  F004         	goto	l4187
  5322  000022                     l3833:
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;doprnt.c: 538: if(c != '%')
  5326  000022  0E25               	movlw	37
  5327  000024  0100               	movlb	0	; () banked
  5328  000026  1992               	xorwf	sprintf@c& (0+255),w,b
  5329  000028  B4D8               	btfsc	status,2,c
  5330  00002A  D00A               	goto	l3839
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;doprnt.c: 540: {
  5334                           ;doprnt.c: 541: ((*sp++ = (c)));
  5335  00002C  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5336  000030  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5337  000034  C092  FFDF         	movff	sprintf@c,indf2
  5338                           
  5339                           ; BSR set to: 0
  5340  000038  4A1E               	infsnz	sprintf@sp,f,c
  5341  00003A  2A1F               	incf	sprintf@sp+1,f,c
  5342                           
  5343                           ;doprnt.c: 542: continue;
  5344  00003C  EFFD  F004         	goto	l4187
  5345  000040                     l3839:
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;doprnt.c: 543: }
  5349                           ;doprnt.c: 546: width = 0;
  5350  000040  0E00               	movlw	0
  5351  000042  0100               	movlb	0	; () banked
  5352  000044  6F91               	movwf	(sprintf@width+1)& (0+255),b
  5353  000046  0E00               	movlw	0
  5354  000048  6F90               	movwf	sprintf@width& (0+255),b
  5355                           
  5356                           ;doprnt.c: 548: flag = 0;
  5357  00004A  0E00               	movlw	0
  5358  00004C  0100               	movlb	0	; () banked
  5359  00004E  6F94               	movwf	(sprintf@flag+1)& (0+255),b
  5360  000050  0E00               	movlw	0
  5361  000052  6F93               	movwf	sprintf@flag& (0+255),b
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;doprnt.c: 551: switch(*f) {
  5365                           
  5366                           ;doprnt.c: 550: for(;;) {
  5367  000054  D00D               	goto	l3851
  5368  000056                     l3841:
  5369                           
  5370                           ;doprnt.c: 554: flag |= 0x08;
  5371  000056  0100               	movlb	0	; () banked
  5372  000058  8793               	bsf	sprintf@flag& (0+255),3,b
  5373  00005A  D008               	goto	L4
  5374  00005C                     l3843:
  5375                           
  5376                           ;doprnt.c: 561: flag |= 0x01;
  5377  00005C  0100               	movlb	0	; () banked
  5378  00005E  8193               	bsf	sprintf@flag& (0+255),0,b
  5379  000060  D005               	goto	L4
  5380  000062                     l3845:
  5381                           
  5382                           ;doprnt.c: 574: flag |= 0x800;
  5383  000062  0100               	movlb	0	; () banked
  5384  000064  8794               	bsf	(sprintf@flag+1)& (0+255),3,b
  5385  000066  D002               	goto	L4
  5386  000068                     l3847:
  5387                           
  5388                           ;doprnt.c: 580: flag |= 0x04;
  5389  000068  0100               	movlb	0	; () banked
  5390  00006A  8593               	bsf	sprintf@flag& (0+255),2,b
  5391  00006C                     L4:
  5392                           
  5393                           ;doprnt.c: 581: f++;
  5394  00006C  4A20               	infsnz	sprintf@f,f,c
  5395  00006E  2A21               	incf	sprintf@f+1,f,c
  5396  000070                     l3851:
  5397  000070  C020  FFF6         	movff	sprintf@f,tblptrl
  5398  000074  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5399  000078                     	if	0	;tblptru may be non-zero
  5400  000078                     	endif
  5401  000078                     	if	0	;tblptru may be non-zero
  5402  000078                     	endif
  5403  000078  0008               	tblrd		*
  5404  00007A  50F5               	movf	tablat,w,c
  5405                           
  5406                           ; Switch size 1, requested type "space"
  5407                           ; Number of cases is 4, Range of values is 32 to 48
  5408                           ; switch strategies available:
  5409                           ; Name         Instructions Cycles
  5410                           ; simple_byte           13     7 (average)
  5411                           ;	Chosen strategy is simple_byte
  5412  00007C  0A20               	xorlw	32	; case 32
  5413  00007E  B4D8               	btfsc	status,2,c
  5414  000080  D7ED               	goto	l3843
  5415  000082  0A03               	xorlw	3	; case 35
  5416  000084  B4D8               	btfsc	status,2,c
  5417  000086  D7ED               	goto	l3845
  5418  000088  0A0E               	xorlw	14	; case 45
  5419  00008A  B4D8               	btfsc	status,2,c
  5420  00008C  D7E4               	goto	l3841
  5421  00008E  0A1D               	xorlw	29	; case 48
  5422  000090  B4D8               	btfsc	status,2,c
  5423  000092  D7EA               	goto	l3847
  5424                           
  5425                           ;doprnt.c: 593: if(flag & 0x08)
  5426                           
  5427                           ;doprnt.c: 586: }
  5428                           
  5429                           ;doprnt.c: 585: break;
  5430  000094  0100               	movlb	0	; () banked
  5431  000096  A793               	btfss	sprintf@flag& (0+255),3,b
  5432  000098  D002               	goto	l3855
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;doprnt.c: 594: flag &= ~0x04;
  5436  00009A  0100               	movlb	0	; () banked
  5437  00009C  9593               	bcf	sprintf@flag& (0+255),2,b
  5438  00009E                     l3855:
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5442  00009E  C020  FFF6         	movff	sprintf@f,tblptrl
  5443  0000A2  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5444  0000A6                     	if	0	;tblptru may be non-zero
  5445  0000A6                     	endif
  5446  0000A6                     	if	0	;tblptru may be non-zero
  5447  0000A6                     	endif
  5448  0000A6  0008               	tblrd		*
  5449  0000A8  50F5               	movf	tablat,w,c
  5450  0000AA  EC7E  F00C         	call	_isdigit
  5451  0000AE  A0D8               	btfss	status,0,c
  5452  0000B0  D036               	goto	l3867
  5453                           
  5454                           ;doprnt.c: 598: width = 0;
  5455  0000B2  0E00               	movlw	0
  5456  0000B4  0100               	movlb	0	; () banked
  5457  0000B6  6F91               	movwf	(sprintf@width+1)& (0+255),b
  5458  0000B8  0E00               	movlw	0
  5459  0000BA  6F90               	movwf	sprintf@width& (0+255),b
  5460  0000BC                     l3859:
  5461                           
  5462                           ;doprnt.c: 600: width *= 10;
  5463  0000BC  C090  F012         	movff	sprintf@width,___wmul@multiplier
  5464  0000C0  C091  F013         	movff	sprintf@width+1,___wmul@multiplier+1
  5465  0000C4  0E00               	movlw	0
  5466  0000C6  6E15               	movwf	___wmul@multiplicand+1,c
  5467  0000C8  0E0A               	movlw	10
  5468  0000CA  6E14               	movwf	___wmul@multiplicand,c
  5469  0000CC  EC12  F00C         	call	___wmul	;wreg free
  5470  0000D0  C012  F090         	movff	?___wmul,sprintf@width
  5471  0000D4  C013  F091         	movff	?___wmul+1,sprintf@width+1
  5472                           
  5473                           ;doprnt.c: 601: width += *f++ - '0';
  5474  0000D8  0ED0               	movlw	208
  5475  0000DA  6E28               	movwf	??_sprintf& (0+255),c
  5476  0000DC  0EFF               	movlw	255
  5477  0000DE  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5478  0000E0  C020  FFF6         	movff	sprintf@f,tblptrl
  5479  0000E4  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5480  0000E8                     	if	0	;tblptru may be non-zero
  5481  0000E8                     	endif
  5482  0000E8                     	if	0	;tblptru may be non-zero
  5483  0000E8                     	endif
  5484  0000E8  0008               	tblrd		*
  5485  0000EA  50F5               	movf	tablat,w,c
  5486  0000EC  6E2A               	movwf	(??_sprintf+2)& (0+255),c
  5487  0000EE  6A2B               	clrf	(??_sprintf+3)& (0+255),c
  5488  0000F0  5028               	movf	??_sprintf,w,c
  5489  0000F2  262A               	addwf	??_sprintf+2,f,c
  5490  0000F4  5029               	movf	??_sprintf+1,w,c
  5491  0000F6  222B               	addwfc	??_sprintf+3,f,c
  5492  0000F8  502A               	movf	??_sprintf+2,w,c
  5493  0000FA  0100               	movlb	0	; () banked
  5494  0000FC  2790               	addwf	sprintf@width& (0+255),f,b
  5495  0000FE  502B               	movf	??_sprintf+3,w,c
  5496  000100  0100               	movlb	0	; () banked
  5497  000102  2391               	addwfc	(sprintf@width+1)& (0+255),f,b
  5498                           
  5499                           ; BSR set to: 0
  5500  000104  4A20               	infsnz	sprintf@f,f,c
  5501  000106  2A21               	incf	sprintf@f+1,f,c
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5505  000108  C020  FFF6         	movff	sprintf@f,tblptrl
  5506  00010C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5507  000110                     	if	0	;tblptru may be non-zero
  5508  000110                     	endif
  5509  000110                     	if	0	;tblptru may be non-zero
  5510  000110                     	endif
  5511  000110  0008               	tblrd		*
  5512  000112  50F5               	movf	tablat,w,c
  5513  000114  EC7E  F00C         	call	_isdigit
  5514  000118  A0D8               	btfss	status,0,c
  5515  00011A  D019               	goto	l3875
  5516  00011C  D7CF               	goto	l3859
  5517  00011E                     l3867:
  5518  00011E  C020  FFF6         	movff	sprintf@f,tblptrl
  5519  000122  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5520  000126                     	if	0	;tblptru may be non-zero
  5521  000126                     	endif
  5522  000126                     	if	0	;tblptru may be non-zero
  5523  000126                     	endif
  5524  000126  0008               	tblrd		*
  5525  000128  50F5               	movf	tablat,w,c
  5526  00012A  0A2A               	xorlw	42
  5527  00012C  A4D8               	btfss	status,2,c
  5528  00012E  D00F               	goto	l3875
  5529                           
  5530                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  5531  000130  C08B  FFD9         	movff	sprintf@ap,fsr2l
  5532  000134  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  5533  000138  CFDE F090          	movff	postinc2,sprintf@width
  5534  00013C  CFDD F091          	movff	postdec2,sprintf@width+1
  5535  000140  0E02               	movlw	2
  5536  000142  0100               	movlb	0	; () banked
  5537  000144  278B               	addwf	sprintf@ap& (0+255),f,b
  5538  000146  0E00               	movlw	0
  5539  000148  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;doprnt.c: 606: f++;
  5543  00014A  4A20               	infsnz	sprintf@f,f,c
  5544  00014C  2A21               	incf	sprintf@f+1,f,c
  5545  00014E                     l3875:
  5546                           
  5547                           ;doprnt.c: 608: }
  5548                           ;doprnt.c: 611: if(*f == '.') {
  5549  00014E  C020  FFF6         	movff	sprintf@f,tblptrl
  5550  000152  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5551  000156                     	if	0	;tblptru may be non-zero
  5552  000156                     	endif
  5553  000156                     	if	0	;tblptru may be non-zero
  5554  000156                     	endif
  5555  000156  0008               	tblrd		*
  5556  000158  50F5               	movf	tablat,w,c
  5557  00015A  0A2E               	xorlw	46
  5558  00015C  A4D8               	btfss	status,2,c
  5559  00015E  D03C               	goto	l3895
  5560                           
  5561                           ;doprnt.c: 612: flag |= 0x4000;
  5562  000160  0100               	movlb	0	; () banked
  5563  000162  8D94               	bsf	(sprintf@flag+1)& (0+255),6,b
  5564                           
  5565                           ;doprnt.c: 613: f++;
  5566  000164  4A20               	infsnz	sprintf@f,f,c
  5567  000166  2A21               	incf	sprintf@f+1,f,c
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;doprnt.c: 615: if(*f == '*') {
  5571  000168  C020  FFF6         	movff	sprintf@f,tblptrl
  5572  00016C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5573  000170                     	if	0	;tblptru may be non-zero
  5574  000170                     	endif
  5575  000170                     	if	0	;tblptru may be non-zero
  5576  000170                     	endif
  5577  000170  0008               	tblrd		*
  5578  000172  50F5               	movf	tablat,w,c
  5579  000174  0A2A               	xorlw	42
  5580  000176  A4D8               	btfss	status,2,c
  5581  000178  D00F               	goto	l3887
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  5585  00017A  C08B  FFD9         	movff	sprintf@ap,fsr2l
  5586  00017E  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  5587  000182  50DF               	movf	indf2,w,c
  5588  000184  0100               	movlb	0	; () banked
  5589  000186  6F8F               	movwf	sprintf@prec& (0+255),b
  5590                           
  5591                           ; BSR set to: 0
  5592  000188  0E02               	movlw	2
  5593  00018A  0100               	movlb	0	; () banked
  5594  00018C  278B               	addwf	sprintf@ap& (0+255),f,b
  5595  00018E  0E00               	movlw	0
  5596  000190  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;doprnt.c: 617: f++;
  5600  000192  4A20               	infsnz	sprintf@f,f,c
  5601  000194  2A21               	incf	sprintf@f+1,f,c
  5602                           
  5603                           ;doprnt.c: 618: } else
  5604  000196  D10F               	goto	l3965
  5605  000198                     l3887:
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;doprnt.c: 620: {
  5609                           ;doprnt.c: 621: prec = 0;
  5610  000198  0E00               	movlw	0
  5611  00019A  0100               	movlb	0	; () banked
  5612  00019C  6F8F               	movwf	sprintf@prec& (0+255),b
  5613                           
  5614                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5615  00019E  D011               	goto	l3893
  5616  0001A0                     l3889:
  5617                           
  5618                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5619  0001A0  C020  FFF6         	movff	sprintf@f,tblptrl
  5620  0001A4  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5621  0001A8                     	if	0	;tblptru may be non-zero
  5622  0001A8                     	endif
  5623  0001A8                     	if	0	;tblptru may be non-zero
  5624  0001A8                     	endif
  5625  0001A8  0008               	tblrd		*
  5626  0001AA  CFF5 F028          	movff	tablat,??_sprintf
  5627  0001AE  0100               	movlb	0	; () banked
  5628  0001B0  518F               	movf	sprintf@prec& (0+255),w,b
  5629  0001B2  0D0A               	mullw	10
  5630  0001B4  50F3               	movf	prodl,w,c
  5631  0001B6  2428               	addwf	??_sprintf,w,c
  5632  0001B8  0FD0               	addlw	208
  5633  0001BA  0100               	movlb	0	; () banked
  5634  0001BC  6F8F               	movwf	sprintf@prec& (0+255),b
  5635                           
  5636                           ; BSR set to: 0
  5637  0001BE  4A20               	infsnz	sprintf@f,f,c
  5638  0001C0  2A21               	incf	sprintf@f+1,f,c
  5639  0001C2                     l3893:
  5640                           
  5641                           ; BSR set to: 0
  5642  0001C2  C020  FFF6         	movff	sprintf@f,tblptrl
  5643  0001C6  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5644  0001CA                     	if	0	;tblptru may be non-zero
  5645  0001CA                     	endif
  5646  0001CA                     	if	0	;tblptru may be non-zero
  5647  0001CA                     	endif
  5648  0001CA  0008               	tblrd		*
  5649  0001CC  50F5               	movf	tablat,w,c
  5650  0001CE  EC7E  F00C         	call	_isdigit
  5651  0001D2  A0D8               	btfss	status,0,c
  5652  0001D4  D0F0               	goto	l3965
  5653  0001D6  D7E4               	goto	l3889
  5654  0001D8                     l3895:
  5655                           
  5656                           ;doprnt.c: 626: prec = 0;
  5657  0001D8  0E00               	movlw	0
  5658  0001DA  0100               	movlb	0	; () banked
  5659  0001DC  6F8F               	movwf	sprintf@prec& (0+255),b
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;doprnt.c: 630: }
  5663                           ;doprnt.c: 635: switch(c = *f++) {
  5664  0001DE  D0EB               	goto	l3965
  5665  0001E0                     l3897:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;doprnt.c: 691: flag |= 0x40;
  5669  0001E0  0100               	movlb	0	; () banked
  5670  0001E2  8D93               	bsf	sprintf@flag& (0+255),6,b
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;doprnt.c: 698: case 'i':
  5674                           ;doprnt.c: 699: break;
  5675                           
  5676                           ; BSR set to: 0
  5677                           
  5678                           ;doprnt.c: 697: case 'd':
  5679                           
  5680                           ;doprnt.c: 693: break;
  5681  0001E4  D112               	goto	l3967
  5682  0001E6                     l3899:
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;doprnt.c: 707: flag |= 0x2000;
  5686  0001E6  0100               	movlb	0	; () banked
  5687  0001E8  8B94               	bsf	(sprintf@flag+1)& (0+255),5,b
  5688  0001EA                     l598:
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;doprnt.c: 714: flag |= 0x20;
  5692  0001EA  0100               	movlb	0	; () banked
  5693  0001EC  8B93               	bsf	sprintf@flag& (0+255),5,b
  5694  0001EE                     l599:
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;doprnt.c: 721: flag |= 0x80;
  5698  0001EE  0100               	movlb	0	; () banked
  5699  0001F0  8F93               	bsf	sprintf@flag& (0+255),7,b
  5700                           
  5701                           ;doprnt.c: 723: break;
  5702  0001F2  D10B               	goto	l3967
  5703  0001F4                     l3901:
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5707  0001F4  C08B  FFD9         	movff	sprintf@ap,fsr2l
  5708  0001F8  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  5709  0001FC  CFDE F087          	movff	postinc2,sprintf@cp
  5710  000200  CFDD F088          	movff	postdec2,sprintf@cp+1
  5711                           
  5712                           ; BSR set to: 0
  5713  000204  0E02               	movlw	2
  5714  000206  0100               	movlb	0	; () banked
  5715  000208  278B               	addwf	sprintf@ap& (0+255),f,b
  5716  00020A  0E00               	movlw	0
  5717  00020C  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;doprnt.c: 740: if(!cp)
  5721  00020E  0100               	movlb	0	; () banked
  5722  000210  5187               	movf	sprintf@cp& (0+255),w,b
  5723  000212  0100               	movlb	0	; () banked
  5724  000214  1188               	iorwf	(sprintf@cp+1)& (0+255),w,b
  5725  000216  A4D8               	btfss	status,2,c
  5726  000218  D006               	goto	l3909
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;doprnt.c: 741: cp = "(null)";
  5730  00021A  0EC6               	movlw	low STR_63
  5731  00021C  0100               	movlb	0	; () banked
  5732  00021E  6F87               	movwf	sprintf@cp& (0+255),b
  5733  000220  0E7F               	movlw	high STR_63
  5734  000222  0100               	movlb	0	; () banked
  5735  000224  6F88               	movwf	(sprintf@cp+1)& (0+255),b
  5736  000226                     l3909:
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;doprnt.c: 745: len = 0;
  5740  000226  0E00               	movlw	0
  5741  000228  0100               	movlb	0	; () banked
  5742  00022A  6F8A               	movwf	(sprintf@len+1)& (0+255),b
  5743  00022C  0E00               	movlw	0
  5744  00022E  6F89               	movwf	sprintf@len& (0+255),b
  5745                           
  5746                           ;doprnt.c: 746: while(cp[len])
  5747  000230  D003               	goto	l3913
  5748  000232                     l3911:
  5749                           
  5750                           ;doprnt.c: 747: len++;
  5751  000232  0100               	movlb	0	; () banked
  5752  000234  4B89               	infsnz	sprintf@len& (0+255),f,b
  5753  000236  2B8A               	incf	(sprintf@len+1)& (0+255),f,b
  5754  000238                     l3913:
  5755                           
  5756                           ; BSR set to: 0
  5757  000238  0100               	movlb	0	; () banked
  5758  00023A  5189               	movf	sprintf@len& (0+255),w,b
  5759  00023C  0100               	movlb	0	; () banked
  5760  00023E  2587               	addwf	sprintf@cp& (0+255),w,b
  5761  000240  6E28               	movwf	??_sprintf& (0+255),c
  5762  000242  0100               	movlb	0	; () banked
  5763  000244  518A               	movf	(sprintf@len+1)& (0+255),w,b
  5764  000246  0100               	movlb	0	; () banked
  5765  000248  2188               	addwfc	(sprintf@cp+1)& (0+255),w,b
  5766  00024A  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5767  00024C  C028  FFF6         	movff	??_sprintf,tblptrl
  5768  000250  C029  FFF7         	movff	??_sprintf+1,tblptrh
  5769  000254  6AF8               	clrf	tblptru,c
  5770  000256  0E05               	movlw	(high __ramtop+-1)
  5771  000258  64F7               	cpfsgt	tblptrh,c
  5772  00025A  D003               	bra	u3527
  5773  00025C  0008               	tblrd		*
  5774  00025E  50F5               	movf	tablat,w,c
  5775  000260  D005               	bra	u3520
  5776  000262                     u3527:
  5777  000262  CFF6 FFE9          	movff	tblptrl,fsr0l
  5778  000266  CFF7 FFEA          	movff	tblptrh,fsr0h
  5779  00026A  50EF               	movf	indf0,w,c
  5780  00026C                     u3520:
  5781  00026C  0900               	iorlw	0
  5782  00026E  A4D8               	btfss	status,2,c
  5783  000270  D7E0               	goto	l3911
  5784  000272                     l3915:
  5785                           
  5786                           ;doprnt.c: 753: if(prec && prec < len)
  5787  000272  0100               	movlb	0	; () banked
  5788  000274  518F               	movf	sprintf@prec& (0+255),w,b
  5789  000276  0100               	movlb	0	; () banked
  5790  000278  B4D8               	btfsc	status,2,c
  5791  00027A  D014               	goto	l3921
  5792                           
  5793                           ; BSR set to: 0
  5794  00027C  C08F  F028         	movff	sprintf@prec,??_sprintf
  5795  000280  6A29               	clrf	(??_sprintf+1)& (0+255),c
  5796  000282  BE28               	btfsc	??_sprintf& (0+255),7,c
  5797  000284  0629               	decf	(??_sprintf+1)& (0+255),f,c
  5798  000286  0100               	movlb	0	; () banked
  5799  000288  5189               	movf	sprintf@len& (0+255),w,b
  5800  00028A  5C28               	subwf	??_sprintf,w,c
  5801  00028C  0100               	movlb	0	; () banked
  5802  00028E  518A               	movf	(sprintf@len+1)& (0+255),w,b
  5803  000290  5829               	subwfb	??_sprintf+1,w,c
  5804  000292  B0D8               	btfsc	status,0,c
  5805  000294  D007               	goto	l3921
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;doprnt.c: 754: len = prec;
  5809  000296  0100               	movlb	0	; () banked
  5810  000298  518F               	movf	sprintf@prec& (0+255),w,b
  5811  00029A  0100               	movlb	0	; () banked
  5812  00029C  6F89               	movwf	sprintf@len& (0+255),b
  5813  00029E  6B8A               	clrf	(sprintf@len+1)& (0+255),b
  5814  0002A0  BF89               	btfsc	sprintf@len& (0+255),7,b
  5815  0002A2  078A               	decf	(sprintf@len+1)& (0+255),f,b
  5816  0002A4                     l3921:
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;doprnt.c: 757: if(width > len)
  5820  0002A4  0100               	movlb	0	; () banked
  5821  0002A6  5190               	movf	sprintf@width& (0+255),w,b
  5822  0002A8  0100               	movlb	0	; () banked
  5823  0002AA  5D89               	subwf	sprintf@len& (0+255),w,b
  5824  0002AC  0100               	movlb	0	; () banked
  5825  0002AE  5191               	movf	(sprintf@width+1)& (0+255),w,b
  5826  0002B0  0100               	movlb	0	; () banked
  5827  0002B2  598A               	subwfb	(sprintf@len+1)& (0+255),w,b
  5828  0002B4  B0D8               	btfsc	status,0,c
  5829  0002B6  D009               	goto	l3925
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;doprnt.c: 758: width -= len;
  5833  0002B8  0100               	movlb	0	; () banked
  5834  0002BA  5189               	movf	sprintf@len& (0+255),w,b
  5835  0002BC  0100               	movlb	0	; () banked
  5836  0002BE  5F90               	subwf	sprintf@width& (0+255),f,b
  5837  0002C0  0100               	movlb	0	; () banked
  5838  0002C2  518A               	movf	(sprintf@len+1)& (0+255),w,b
  5839  0002C4  0100               	movlb	0	; () banked
  5840  0002C6  5B91               	subwfb	(sprintf@width+1)& (0+255),f,b
  5841  0002C8  D005               	goto	l3927
  5842  0002CA                     l3925:
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;doprnt.c: 759: else
  5846                           ;doprnt.c: 760: width = 0;
  5847  0002CA  0E00               	movlw	0
  5848  0002CC  0100               	movlb	0	; () banked
  5849  0002CE  6F91               	movwf	(sprintf@width+1)& (0+255),b
  5850  0002D0  0E00               	movlw	0
  5851  0002D2  6F90               	movwf	sprintf@width& (0+255),b
  5852  0002D4                     l3927:
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;doprnt.c: 762: if(!(flag & 0x08))
  5856  0002D4  0100               	movlb	0	; () banked
  5857  0002D6  A793               	btfss	sprintf@flag& (0+255),3,b
  5858  0002D8  D009               	goto	l3935
  5859  0002DA  D02E               	goto	l3943
  5860  0002DC                     l3931:
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;doprnt.c: 765: ((*sp++ = (' ')));
  5864  0002DC  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5865  0002E0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5866  0002E4  0E20               	movlw	32
  5867  0002E6  6EDF               	movwf	indf2,c
  5868                           
  5869                           ; BSR set to: 0
  5870  0002E8  4A1E               	infsnz	sprintf@sp,f,c
  5871  0002EA  2A1F               	incf	sprintf@sp+1,f,c
  5872  0002EC                     l3935:
  5873                           
  5874                           ; BSR set to: 0
  5875  0002EC  0100               	movlb	0	; () banked
  5876  0002EE  0790               	decf	sprintf@width& (0+255),f,b
  5877  0002F0  A0D8               	btfss	status,0,c
  5878  0002F2  0791               	decf	(sprintf@width+1)& (0+255),f,b
  5879  0002F4  0100               	movlb	0	; () banked
  5880  0002F6  2990               	incf	sprintf@width& (0+255),w,b
  5881  0002F8  E1F1               	bnz	l3931
  5882  0002FA  0100               	movlb	0	; () banked
  5883  0002FC  2991               	incf	(sprintf@width+1)& (0+255),w,b
  5884  0002FE  B4D8               	btfsc	status,2,c
  5885  000300  D01B               	goto	l3943
  5886  000302  D7EC               	goto	l3931
  5887  000304                     l3937:
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  5891  000304  C087  FFF6         	movff	sprintf@cp,tblptrl
  5892  000308  C088  FFF7         	movff	sprintf@cp+1,tblptrh
  5893  00030C  6AF8               	clrf	tblptru,c
  5894  00030E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5895  000312  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5896  000316  0E05               	movlw	(high __ramtop+-1)
  5897  000318  64F7               	cpfsgt	tblptrh,c
  5898  00031A  D003               	bra	u3597
  5899  00031C  0008               	tblrd		*
  5900  00031E  50F5               	movf	tablat,w,c
  5901  000320  D005               	bra	u3590
  5902  000322                     u3597:
  5903  000322  CFF6 FFE9          	movff	tblptrl,fsr0l
  5904  000326  CFF7 FFEA          	movff	tblptrh,fsr0h
  5905  00032A  50EF               	movf	indf0,w,c
  5906  00032C                     u3590:
  5907  00032C  6EDF               	movwf	indf2,c
  5908  00032E  0100               	movlb	0	; () banked
  5909  000330  4B87               	infsnz	sprintf@cp& (0+255),f,b
  5910  000332  2B88               	incf	(sprintf@cp+1)& (0+255),f,b
  5911                           
  5912                           ; BSR set to: 0
  5913  000334  4A1E               	infsnz	sprintf@sp,f,c
  5914  000336  2A1F               	incf	sprintf@sp+1,f,c
  5915  000338                     l3943:
  5916                           
  5917                           ; BSR set to: 0
  5918  000338  0100               	movlb	0	; () banked
  5919  00033A  0789               	decf	sprintf@len& (0+255),f,b
  5920  00033C  A0D8               	btfss	status,0,c
  5921  00033E  078A               	decf	(sprintf@len+1)& (0+255),f,b
  5922  000340  0100               	movlb	0	; () banked
  5923  000342  2989               	incf	sprintf@len& (0+255),w,b
  5924  000344  E1DF               	bnz	l3937
  5925  000346  0100               	movlb	0	; () banked
  5926  000348  298A               	incf	(sprintf@len+1)& (0+255),w,b
  5927  00034A  A4D8               	btfss	status,2,c
  5928  00034C  D7DB               	goto	l3937
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;doprnt.c: 770: if(flag & 0x08)
  5932  00034E  0100               	movlb	0	; () banked
  5933  000350  B793               	btfsc	sprintf@flag& (0+255),3,b
  5934  000352  D009               	goto	l3951
  5935  000354  D352               	goto	l4187
  5936  000356                     l3947:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;doprnt.c: 772: ((*sp++ = (' ')));
  5940  000356  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5941  00035A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5942  00035E  0E20               	movlw	32
  5943  000360  6EDF               	movwf	indf2,c
  5944                           
  5945                           ; BSR set to: 0
  5946  000362  4A1E               	infsnz	sprintf@sp,f,c
  5947  000364  2A1F               	incf	sprintf@sp+1,f,c
  5948  000366                     l3951:
  5949                           
  5950                           ; BSR set to: 0
  5951  000366  0100               	movlb	0	; () banked
  5952  000368  0790               	decf	sprintf@width& (0+255),f,b
  5953  00036A  A0D8               	btfss	status,0,c
  5954  00036C  0791               	decf	(sprintf@width+1)& (0+255),f,b
  5955  00036E  0100               	movlb	0	; () banked
  5956  000370  2990               	incf	sprintf@width& (0+255),w,b
  5957  000372  E1F1               	bnz	l3947
  5958  000374  0100               	movlb	0	; () banked
  5959  000376  2991               	incf	(sprintf@width+1)& (0+255),w,b
  5960  000378  B4D8               	btfsc	status,2,c
  5961  00037A  D33F               	goto	l4187
  5962  00037C  D7EC               	goto	l3947
  5963  00037E                     l3953:
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5967  00037E  C08B  FFD9         	movff	sprintf@ap,fsr2l
  5968  000382  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  5969  000386  50DF               	movf	indf2,w,c
  5970  000388  0100               	movlb	0	; () banked
  5971  00038A  6F92               	movwf	sprintf@c& (0+255),b
  5972                           
  5973                           ; BSR set to: 0
  5974  00038C  0E02               	movlw	2
  5975  00038E  0100               	movlb	0	; () banked
  5976  000390  278B               	addwf	sprintf@ap& (0+255),f,b
  5977  000392  0E00               	movlw	0
  5978  000394  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5979  000396                     l3957:
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;doprnt.c: 805: cp = (char *)&c;
  5983  000396  0E92               	movlw	low sprintf@c
  5984  000398  0100               	movlb	0	; () banked
  5985  00039A  6F87               	movwf	sprintf@cp& (0+255),b
  5986  00039C  0E00               	movlw	high sprintf@c
  5987  00039E  0100               	movlb	0	; () banked
  5988  0003A0  6F88               	movwf	(sprintf@cp+1)& (0+255),b
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;doprnt.c: 806: len = 1;
  5992  0003A2  0E00               	movlw	0
  5993  0003A4  0100               	movlb	0	; () banked
  5994  0003A6  6F8A               	movwf	(sprintf@len+1)& (0+255),b
  5995  0003A8  0E01               	movlw	1
  5996  0003AA  6F89               	movwf	sprintf@len& (0+255),b
  5997                           
  5998                           ;doprnt.c: 807: goto dostring;
  5999  0003AC  D762               	goto	l3915
  6000  0003AE                     l3961:
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;doprnt.c: 818: flag |= 0xC0;
  6004  0003AE  0EC0               	movlw	192
  6005  0003B0  0100               	movlb	0	; () banked
  6006  0003B2  1393               	iorwf	sprintf@flag& (0+255),f,b
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;doprnt.c: 822: }
  6010                           
  6011                           ;doprnt.c: 819: break;
  6012  0003B4  D02A               	goto	l3967
  6013  0003B6                     l3965:
  6014  0003B6  C020  FFF6         	movff	sprintf@f,tblptrl
  6015  0003BA  C021  FFF7         	movff	sprintf@f+1,tblptrh
  6016  0003BE  4A20               	infsnz	sprintf@f,f,c
  6017  0003C0  2A21               	incf	sprintf@f+1,f,c
  6018  0003C2                     	if	0	;tblptru may be non-zero
  6019  0003C2                     	endif
  6020  0003C2                     	if	0	;tblptru may be non-zero
  6021  0003C2                     	endif
  6022  0003C2  0008               	tblrd		*
  6023  0003C4  CFF5 F092          	movff	tablat,sprintf@c
  6024  0003C8  0100               	movlb	0	; () banked
  6025  0003CA  5192               	movf	sprintf@c& (0+255),w,b
  6026                           
  6027                           ; Switch size 1, requested type "space"
  6028                           ; Number of cases is 10, Range of values is 0 to 120
  6029                           ; switch strategies available:
  6030                           ; Name         Instructions Cycles
  6031                           ; simple_byte           31    16 (average)
  6032                           ;	Chosen strategy is simple_byte
  6033  0003CC  0A00               	xorlw	0	; case 0
  6034  0003CE  B4D8               	btfsc	status,2,c
  6035  0003D0  D322               	goto	l4189
  6036  0003D2  0A58               	xorlw	88	; case 88
  6037  0003D4  B4D8               	btfsc	status,2,c
  6038  0003D6  D709               	goto	l598
  6039  0003D8  0A3B               	xorlw	59	; case 99
  6040  0003DA  B4D8               	btfsc	status,2,c
  6041  0003DC  D7D0               	goto	l3953
  6042  0003DE  0A07               	xorlw	7	; case 100
  6043  0003E0  B4D8               	btfsc	status,2,c
  6044  0003E2  D013               	goto	l3967
  6045  0003E4  0A0D               	xorlw	13	; case 105
  6046  0003E6  B4D8               	btfsc	status,2,c
  6047  0003E8  D010               	goto	l3967
  6048  0003EA  0A06               	xorlw	6	; case 111
  6049  0003EC  B4D8               	btfsc	status,2,c
  6050  0003EE  D6F8               	goto	l3897
  6051  0003F0  0A1F               	xorlw	31	; case 112
  6052  0003F2  B4D8               	btfsc	status,2,c
  6053  0003F4  D6F8               	goto	l3899
  6054  0003F6  0A03               	xorlw	3	; case 115
  6055  0003F8  B4D8               	btfsc	status,2,c
  6056  0003FA  D6FC               	goto	l3901
  6057  0003FC  0A06               	xorlw	6	; case 117
  6058  0003FE  B4D8               	btfsc	status,2,c
  6059  000400  D7D6               	goto	l3961
  6060  000402  0A0D               	xorlw	13	; case 120
  6061  000404  B4D8               	btfsc	status,2,c
  6062  000406  D6F3               	goto	l599
  6063  000408  D7C6               	goto	l3957
  6064  00040A                     l3967:
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  6068  00040A  0EC0               	movlw	192
  6069  00040C  0100               	movlb	0	; () banked
  6070  00040E  1593               	andwf	sprintf@flag& (0+255),w,b
  6071  000410  6E28               	movwf	??_sprintf& (0+255),c
  6072  000412  0E00               	movlw	0
  6073  000414  0100               	movlb	0	; () banked
  6074  000416  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  6075  000418  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6076  00041A  5028               	movf	??_sprintf,w,c
  6077  00041C  1029               	iorwf	??_sprintf+1,w,c
  6078  00041E  A4D8               	btfss	status,2,c
  6079  000420  D019               	goto	l3979
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;doprnt.c: 1253: {
  6083                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6084  000422  C08B  FFD9         	movff	sprintf@ap,fsr2l
  6085  000426  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  6086  00042A  CFDE F08D          	movff	postinc2,sprintf@val
  6087  00042E  CFDD F08E          	movff	postdec2,sprintf@val+1
  6088                           
  6089                           ; BSR set to: 0
  6090  000432  0E02               	movlw	2
  6091  000434  0100               	movlb	0	; () banked
  6092  000436  278B               	addwf	sprintf@ap& (0+255),f,b
  6093  000438  0E00               	movlw	0
  6094  00043A  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;doprnt.c: 1261: if((int)val < 0) {
  6098  00043C  0100               	movlb	0	; () banked
  6099  00043E  AF8E               	btfss	(sprintf@val+1)& (0+255),7,b
  6100  000440  D016               	goto	l3983
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;doprnt.c: 1262: flag |= 0x03;
  6104  000442  0E03               	movlw	3
  6105  000444  0100               	movlb	0	; () banked
  6106  000446  1393               	iorwf	sprintf@flag& (0+255),f,b
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;doprnt.c: 1263: val = -val;
  6110  000448  0100               	movlb	0	; () banked
  6111  00044A  6D8D               	negf	sprintf@val& (0+255),b
  6112  00044C  1F8E               	comf	(sprintf@val+1)& (0+255),f,b
  6113  00044E  B0D8               	btfsc	status,0,c
  6114  000450  2B8E               	incf	(sprintf@val+1)& (0+255),f,b
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;doprnt.c: 1264: }
  6118                           ;doprnt.c: 1266: }
  6119  000452  D00D               	goto	l3983
  6120  000454                     l3979:
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;doprnt.c: 1268: else
  6124                           ;doprnt.c: 1273: {
  6125                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6126  000454  C08B  FFD9         	movff	sprintf@ap,fsr2l
  6127  000458  C08C  FFDA         	movff	sprintf@ap+1,fsr2h
  6128  00045C  CFDE F08D          	movff	postinc2,sprintf@val
  6129  000460  CFDD F08E          	movff	postdec2,sprintf@val+1
  6130                           
  6131                           ; BSR set to: 0
  6132  000464  0E02               	movlw	2
  6133  000466  0100               	movlb	0	; () banked
  6134  000468  278B               	addwf	sprintf@ap& (0+255),f,b
  6135  00046A  0E00               	movlw	0
  6136  00046C  238C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6137  00046E                     l3983:
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;doprnt.c: 1287: }
  6141                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6142  00046E  0100               	movlb	0	; () banked
  6143  000470  518F               	movf	sprintf@prec& (0+255),w,b
  6144  000472  0100               	movlb	0	; () banked
  6145  000474  A4D8               	btfss	status,2,c
  6146  000476  D063               	goto	l4033
  6147                           
  6148                           ; BSR set to: 0
  6149  000478  0100               	movlb	0	; () banked
  6150  00047A  518D               	movf	sprintf@val& (0+255),w,b
  6151  00047C  0100               	movlb	0	; () banked
  6152  00047E  118E               	iorwf	(sprintf@val+1)& (0+255),w,b
  6153  000480  A4D8               	btfss	status,2,c
  6154  000482  D05D               	goto	l4033
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;doprnt.c: 1291: prec++;
  6158  000484  0100               	movlb	0	; () banked
  6159  000486  2B8F               	incf	sprintf@prec& (0+255),f,b
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  6163  000488  D05A               	goto	l4033
  6164  00048A                     l3989:
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;doprnt.c: 1302: case 0xC0:
  6168                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6169  00048A  0E01               	movlw	1
  6170  00048C  0100               	movlb	0	; () banked
  6171  00048E  6F92               	movwf	sprintf@c& (0+255),b
  6172  000490                     l3991:
  6173                           
  6174                           ; BSR set to: 0
  6175  000490  0E05               	movlw	5
  6176  000492  0100               	movlb	0	; () banked
  6177  000494  1992               	xorwf	sprintf@c& (0+255),w,b
  6178  000496  B4D8               	btfsc	status,2,c
  6179  000498  D061               	goto	l4035
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;doprnt.c: 1306: if(val < dpowers[c])
  6183                           
  6184                           ; BSR set to: 0
  6185                           
  6186                           ; BSR set to: 0
  6187  00049A  0100               	movlb	0	; () banked
  6188  00049C  5192               	movf	sprintf@c& (0+255),w,b
  6189  00049E  0D02               	mullw	2
  6190  0004A0  0E0F               	movlw	low _dpowers
  6191  0004A2  24F3               	addwf	prodl,w,c
  6192  0004A4  6EF6               	movwf	tblptrl,c
  6193  0004A6  0E7E               	movlw	high _dpowers
  6194  0004A8  20F4               	addwfc	prodh,w,c
  6195  0004AA  6EF7               	movwf	tblptrh,c
  6196  0004AC                     	if	0	;There are less than 3 active tblptr bytes
  6197  0004AC                     	endif
  6198  0004AC  0009               	tblrd		*+
  6199  0004AE  50F5               	movf	tablat,w,c
  6200  0004B0  0100               	movlb	0	; () banked
  6201  0004B2  5D8D               	subwf	sprintf@val& (0+255),w,b
  6202  0004B4  0009               	tblrd		*+
  6203  0004B6  50F5               	movf	tablat,w,c
  6204  0004B8  0100               	movlb	0	; () banked
  6205  0004BA  598E               	subwfb	(sprintf@val+1)& (0+255),w,b
  6206  0004BC  A0D8               	btfss	status,0,c
  6207  0004BE  D04E               	goto	l4035
  6208                           
  6209                           ; BSR set to: 0
  6210                           
  6211                           ; BSR set to: 0
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;doprnt.c: 1307: break;
  6215  0004C0  0100               	movlb	0	; () banked
  6216  0004C2  2B92               	incf	sprintf@c& (0+255),f,b
  6217  0004C4  D7E5               	goto	l3991
  6218  0004C6                     l4003:
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6222  0004C6  0E01               	movlw	1
  6223  0004C8  0100               	movlb	0	; () banked
  6224  0004CA  6F92               	movwf	sprintf@c& (0+255),b
  6225  0004CC                     l4005:
  6226                           
  6227                           ; BSR set to: 0
  6228  0004CC  0E04               	movlw	4
  6229  0004CE  0100               	movlb	0	; () banked
  6230  0004D0  1992               	xorwf	sprintf@c& (0+255),w,b
  6231  0004D2  B4D8               	btfsc	status,2,c
  6232  0004D4  D043               	goto	l4035
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6236                           
  6237                           ; BSR set to: 0
  6238                           
  6239                           ; BSR set to: 0
  6240  0004D6  0100               	movlb	0	; () banked
  6241  0004D8  5192               	movf	sprintf@c& (0+255),w,b
  6242  0004DA  0D02               	mullw	2
  6243  0004DC  0E19               	movlw	low _hexpowers
  6244  0004DE  24F3               	addwf	prodl,w,c
  6245  0004E0  6EF6               	movwf	tblptrl,c
  6246  0004E2  0E7E               	movlw	high _hexpowers
  6247  0004E4  20F4               	addwfc	prodh,w,c
  6248  0004E6  6EF7               	movwf	tblptrh,c
  6249  0004E8                     	if	0	;There are less than 3 active tblptr bytes
  6250  0004E8                     	endif
  6251  0004E8  0009               	tblrd		*+
  6252  0004EA  50F5               	movf	tablat,w,c
  6253  0004EC  0100               	movlb	0	; () banked
  6254  0004EE  5D8D               	subwf	sprintf@val& (0+255),w,b
  6255  0004F0  0009               	tblrd		*+
  6256  0004F2  50F5               	movf	tablat,w,c
  6257  0004F4  0100               	movlb	0	; () banked
  6258  0004F6  598E               	subwfb	(sprintf@val+1)& (0+255),w,b
  6259  0004F8  A0D8               	btfss	status,0,c
  6260  0004FA  D030               	goto	l4035
  6261                           
  6262                           ; BSR set to: 0
  6263                           
  6264                           ; BSR set to: 0
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;doprnt.c: 1318: break;
  6268  0004FC  0100               	movlb	0	; () banked
  6269  0004FE  2B92               	incf	sprintf@c& (0+255),f,b
  6270  000500  D7E5               	goto	l4005
  6271  000502                     l4017:
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  6275  000502  0E01               	movlw	1
  6276  000504  0100               	movlb	0	; () banked
  6277  000506  6F92               	movwf	sprintf@c& (0+255),b
  6278  000508                     l4019:
  6279                           
  6280                           ; BSR set to: 0
  6281  000508  0E06               	movlw	6
  6282  00050A  0100               	movlb	0	; () banked
  6283  00050C  1992               	xorwf	sprintf@c& (0+255),w,b
  6284  00050E  B4D8               	btfsc	status,2,c
  6285  000510  D025               	goto	l4035
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;doprnt.c: 1329: if(val < octpowers[c])
  6289                           
  6290                           ; BSR set to: 0
  6291                           
  6292                           ; BSR set to: 0
  6293  000512  0100               	movlb	0	; () banked
  6294  000514  5192               	movf	sprintf@c& (0+255),w,b
  6295  000516  0D02               	mullw	2
  6296  000518  0E03               	movlw	low _octpowers
  6297  00051A  24F3               	addwf	prodl,w,c
  6298  00051C  6EF6               	movwf	tblptrl,c
  6299  00051E  0E7E               	movlw	high _octpowers
  6300  000520  20F4               	addwfc	prodh,w,c
  6301  000522  6EF7               	movwf	tblptrh,c
  6302  000524                     	if	0	;There are less than 3 active tblptr bytes
  6303  000524                     	endif
  6304  000524  0009               	tblrd		*+
  6305  000526  50F5               	movf	tablat,w,c
  6306  000528  0100               	movlb	0	; () banked
  6307  00052A  5D8D               	subwf	sprintf@val& (0+255),w,b
  6308  00052C  0009               	tblrd		*+
  6309  00052E  50F5               	movf	tablat,w,c
  6310  000530  0100               	movlb	0	; () banked
  6311  000532  598E               	subwfb	(sprintf@val+1)& (0+255),w,b
  6312  000534  A0D8               	btfss	status,0,c
  6313  000536  D012               	goto	l4035
  6314                           
  6315                           ; BSR set to: 0
  6316                           
  6317                           ; BSR set to: 0
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;doprnt.c: 1330: break;
  6321  000538  0100               	movlb	0	; () banked
  6322  00053A  2B92               	incf	sprintf@c& (0+255),f,b
  6323  00053C  D7E5               	goto	l4019
  6324  00053E                     l4033:
  6325                           
  6326                           ; BSR set to: 0
  6327  00053E  0100               	movlb	0	; () banked
  6328  000540  5193               	movf	sprintf@flag& (0+255),w,b
  6329  000542  0BC0               	andlw	192
  6330                           
  6331                           ; Switch size 1, requested type "space"
  6332                           ; Number of cases is 4, Range of values is 0 to 192
  6333                           ; switch strategies available:
  6334                           ; Name         Instructions Cycles
  6335                           ; simple_byte           13     7 (average)
  6336                           ;	Chosen strategy is simple_byte
  6337  000544  0A00               	xorlw	0	; case 0
  6338  000546  B4D8               	btfsc	status,2,c
  6339  000548  D7A0               	goto	l3989
  6340  00054A  0A40               	xorlw	64	; case 64
  6341  00054C  B4D8               	btfsc	status,2,c
  6342  00054E  D7D9               	goto	l4017
  6343  000550  0AC0               	xorlw	192	; case 128
  6344  000552  B4D8               	btfsc	status,2,c
  6345  000554  D7B8               	goto	l4003
  6346  000556  0A40               	xorlw	64	; case 192
  6347  000558  B4D8               	btfsc	status,2,c
  6348  00055A  D797               	goto	l3989
  6349  00055C                     l4035:
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;doprnt.c: 1339: if(c < prec)
  6353  00055C  0100               	movlb	0	; () banked
  6354  00055E  5192               	movf	sprintf@c& (0+255),w,b
  6355  000560  0A80               	xorlw	128
  6356  000562  6E28               	movwf	??_sprintf& (0+255),c
  6357  000564  0100               	movlb	0	; () banked
  6358  000566  518F               	movf	sprintf@prec& (0+255),w,b
  6359  000568  0A80               	xorlw	128
  6360  00056A  5C28               	subwf	??_sprintf& (0+255),w,c
  6361  00056C  B0D8               	btfsc	status,0,c
  6362  00056E  D003               	goto	l4039
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;doprnt.c: 1340: c = prec;
  6366  000570  C08F  F092         	movff	sprintf@prec,sprintf@c
  6367  000574  D00B               	goto	l4043
  6368  000576                     l4039:
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;doprnt.c: 1341: else if(prec < c)
  6372  000576  0100               	movlb	0	; () banked
  6373  000578  518F               	movf	sprintf@prec& (0+255),w,b
  6374  00057A  0A80               	xorlw	128
  6375  00057C  6E28               	movwf	??_sprintf& (0+255),c
  6376  00057E  0100               	movlb	0	; () banked
  6377  000580  5192               	movf	sprintf@c& (0+255),w,b
  6378  000582  0A80               	xorlw	128
  6379  000584  5C28               	subwf	??_sprintf& (0+255),w,c
  6380  000586  A0D8               	btfss	status,0,c
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;doprnt.c: 1342: prec = c;
  6384  000588  C092  F08F         	movff	sprintf@c,sprintf@prec
  6385  00058C                     l4043:
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6389  00058C  0100               	movlb	0	; () banked
  6390  00058E  5190               	movf	sprintf@width& (0+255),w,b
  6391  000590  0100               	movlb	0	; () banked
  6392  000592  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6393  000594  B4D8               	btfsc	status,2,c
  6394  000596  D010               	goto	l4049
  6395                           
  6396                           ; BSR set to: 0
  6397  000598  0E03               	movlw	3
  6398  00059A  0100               	movlb	0	; () banked
  6399  00059C  1593               	andwf	sprintf@flag& (0+255),w,b
  6400  00059E  6E28               	movwf	??_sprintf& (0+255),c
  6401  0005A0  0E00               	movlw	0
  6402  0005A2  0100               	movlb	0	; () banked
  6403  0005A4  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  6404  0005A6  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6405  0005A8  5028               	movf	??_sprintf,w,c
  6406  0005AA  1029               	iorwf	??_sprintf+1,w,c
  6407  0005AC  B4D8               	btfsc	status,2,c
  6408  0005AE  D004               	goto	l4049
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;doprnt.c: 1346: width--;
  6412  0005B0  0100               	movlb	0	; () banked
  6413  0005B2  0790               	decf	sprintf@width& (0+255),f,b
  6414  0005B4  A0D8               	btfss	status,0,c
  6415  0005B6  0791               	decf	(sprintf@width+1)& (0+255),f,b
  6416  0005B8                     l4049:
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6420  0005B8  0100               	movlb	0	; () banked
  6421  0005BA  AD94               	btfss	(sprintf@flag+1)& (0+255),6,b
  6422  0005BC  D01F               	goto	l4057
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;doprnt.c: 1349: if(width > prec)
  6426  0005BE  0E80               	movlw	128
  6427  0005C0  0100               	movlb	0	; () banked
  6428  0005C2  BF8F               	btfsc	sprintf@prec& (0+255),7,b
  6429  0005C4  0E7F               	movlw	127
  6430  0005C6  6E28               	movwf	??_sprintf& (0+255),c
  6431  0005C8  0100               	movlb	0	; () banked
  6432  0005CA  5190               	movf	sprintf@width& (0+255),w,b
  6433  0005CC  0100               	movlb	0	; () banked
  6434  0005CE  5D8F               	subwf	sprintf@prec& (0+255),w,b
  6435  0005D0  0100               	movlb	0	; () banked
  6436  0005D2  5191               	movf	(sprintf@width+1)& (0+255),w,b
  6437  0005D4  0A80               	xorlw	128
  6438  0005D6  5828               	subwfb	??_sprintf& (0+255),w,c
  6439  0005D8  B0D8               	btfsc	status,0,c
  6440  0005DA  D00B               	goto	l4055
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;doprnt.c: 1350: width -= prec;
  6444  0005DC  0100               	movlb	0	; () banked
  6445  0005DE  518F               	movf	sprintf@prec& (0+255),w,b
  6446  0005E0  0100               	movlb	0	; () banked
  6447  0005E2  5F90               	subwf	sprintf@width& (0+255),f,b
  6448  0005E4  0E00               	movlw	0
  6449  0005E6  0100               	movlb	0	; () banked
  6450  0005E8  BF8F               	btfsc	sprintf@prec& (0+255),7,b
  6451  0005EA  0EFF               	movlw	255
  6452  0005EC  0100               	movlb	0	; () banked
  6453  0005EE  5B91               	subwfb	(sprintf@width+1)& (0+255),f,b
  6454  0005F0  D005               	goto	l4057
  6455  0005F2                     l4055:
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;doprnt.c: 1351: else
  6459                           ;doprnt.c: 1352: width = 0;
  6460  0005F2  0E00               	movlw	0
  6461  0005F4  0100               	movlb	0	; () banked
  6462  0005F6  6F91               	movwf	(sprintf@width+1)& (0+255),b
  6463  0005F8  0E00               	movlw	0
  6464  0005FA  6F90               	movwf	sprintf@width& (0+255),b
  6465  0005FC                     l4057:
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;doprnt.c: 1353: }
  6469                           ;doprnt.c: 1357: if((flag & (
  6470                           ;doprnt.c: 1359: 0x04|
  6471                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  6472  0005FC  0EC4               	movlw	196
  6473  0005FE  6E28               	movwf	??_sprintf& (0+255),c
  6474  000600  0E08               	movlw	8
  6475  000602  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6476  000604  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  6477  000608  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6478  00060C  5028               	movf	??_sprintf,w,c
  6479  00060E  162A               	andwf	??_sprintf+2,f,c
  6480  000610  5029               	movf	??_sprintf+1,w,c
  6481  000612  162B               	andwf	??_sprintf+3,f,c
  6482  000614  0E40               	movlw	64
  6483  000616  182A               	xorwf	??_sprintf+2,w,c
  6484  000618  E10F               	bnz	l4063
  6485  00061A  0E08               	movlw	8
  6486  00061C  182B               	xorwf	??_sprintf+3,w,c
  6487  00061E  A4D8               	btfss	status,2,c
  6488  000620  D00B               	goto	l4063
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;doprnt.c: 1362: if(width)
  6492  000622  0100               	movlb	0	; () banked
  6493  000624  5190               	movf	sprintf@width& (0+255),w,b
  6494  000626  0100               	movlb	0	; () banked
  6495  000628  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6496  00062A  B4D8               	btfsc	status,2,c
  6497  00062C  D02E               	goto	l4071
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;doprnt.c: 1363: width--;
  6501  00062E  0100               	movlb	0	; () banked
  6502  000630  0790               	decf	sprintf@width& (0+255),f,b
  6503  000632  A0D8               	btfss	status,0,c
  6504  000634  0791               	decf	(sprintf@width+1)& (0+255),f,b
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;doprnt.c: 1364: } else
  6508  000636  D029               	goto	l4071
  6509  000638                     l4063:
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6513  000638  0EC0               	movlw	192
  6514  00063A  6E28               	movwf	??_sprintf& (0+255),c
  6515  00063C  0E08               	movlw	8
  6516  00063E  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6517  000640  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  6518  000644  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6519  000648  5028               	movf	??_sprintf,w,c
  6520  00064A  162A               	andwf	??_sprintf+2,f,c
  6521  00064C  5029               	movf	??_sprintf+1,w,c
  6522  00064E  162B               	andwf	??_sprintf+3,f,c
  6523  000650  0E80               	movlw	128
  6524  000652  182A               	xorwf	??_sprintf+2,w,c
  6525  000654  E11A               	bnz	l4071
  6526  000656  0E08               	movlw	8
  6527  000658  182B               	xorwf	??_sprintf+3,w,c
  6528  00065A  A4D8               	btfss	status,2,c
  6529  00065C  D016               	goto	l4071
  6530                           
  6531                           ; BSR set to: 0
  6532                           ;doprnt.c: 1372: if(width > 2)
  6533  00065E  0100               	movlb	0	; () banked
  6534  000660  BF91               	btfsc	(sprintf@width+1)& (0+255),7,b
  6535  000662  D00E               	goto	l4069
  6536  000664  0100               	movlb	0	; () banked
  6537  000666  5191               	movf	(sprintf@width+1)& (0+255),w,b
  6538  000668  E105               	bnz	u3850
  6539  00066A  0E03               	movlw	3
  6540  00066C  0100               	movlb	0	; () banked
  6541  00066E  5D90               	subwf	sprintf@width& (0+255),w,b
  6542  000670  A0D8               	btfss	status,0,c
  6543  000672  D006               	goto	l4069
  6544  000674                     u3850:
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;doprnt.c: 1373: width -= 2;
  6548  000674  0100               	movlb	0	; () banked
  6549  000676  0EFE               	movlw	254
  6550  000678  2790               	addwf	sprintf@width& (0+255),f,b
  6551  00067A  0EFF               	movlw	255
  6552  00067C  2391               	addwfc	(sprintf@width+1)& (0+255),f,b
  6553  00067E  D005               	goto	l4071
  6554  000680                     l4069:
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;doprnt.c: 1374: else
  6558                           ;doprnt.c: 1375: width = 0;
  6559  000680  0E00               	movlw	0
  6560  000682  0100               	movlb	0	; () banked
  6561  000684  6F91               	movwf	(sprintf@width+1)& (0+255),b
  6562  000686  0E00               	movlw	0
  6563  000688  6F90               	movwf	sprintf@width& (0+255),b
  6564  00068A                     l4071:
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;doprnt.c: 1376: }
  6568                           ;doprnt.c: 1381: if(width > c)
  6569  00068A  0E80               	movlw	128
  6570  00068C  0100               	movlb	0	; () banked
  6571  00068E  BF92               	btfsc	sprintf@c& (0+255),7,b
  6572  000690  0E7F               	movlw	127
  6573  000692  6E28               	movwf	??_sprintf& (0+255),c
  6574  000694  0100               	movlb	0	; () banked
  6575  000696  5190               	movf	sprintf@width& (0+255),w,b
  6576  000698  0100               	movlb	0	; () banked
  6577  00069A  5D92               	subwf	sprintf@c& (0+255),w,b
  6578  00069C  0100               	movlb	0	; () banked
  6579  00069E  5191               	movf	(sprintf@width+1)& (0+255),w,b
  6580  0006A0  0A80               	xorlw	128
  6581  0006A2  5828               	subwfb	??_sprintf& (0+255),w,c
  6582  0006A4  B0D8               	btfsc	status,0,c
  6583  0006A6  D00B               	goto	l4075
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;doprnt.c: 1382: width -= c;
  6587  0006A8  0100               	movlb	0	; () banked
  6588  0006AA  5192               	movf	sprintf@c& (0+255),w,b
  6589  0006AC  0100               	movlb	0	; () banked
  6590  0006AE  5F90               	subwf	sprintf@width& (0+255),f,b
  6591  0006B0  0E00               	movlw	0
  6592  0006B2  0100               	movlb	0	; () banked
  6593  0006B4  BF92               	btfsc	sprintf@c& (0+255),7,b
  6594  0006B6  0EFF               	movlw	255
  6595  0006B8  0100               	movlb	0	; () banked
  6596  0006BA  5B91               	subwfb	(sprintf@width+1)& (0+255),f,b
  6597  0006BC  D005               	goto	l4077
  6598  0006BE                     l4075:
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;doprnt.c: 1383: else
  6602                           ;doprnt.c: 1384: width = 0;
  6603  0006BE  0E00               	movlw	0
  6604  0006C0  0100               	movlb	0	; () banked
  6605  0006C2  6F91               	movwf	(sprintf@width+1)& (0+255),b
  6606  0006C4  0E00               	movlw	0
  6607  0006C6  6F90               	movwf	sprintf@width& (0+255),b
  6608  0006C8                     l4077:
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;doprnt.c: 1387: if(flag & 0x04) {
  6612  0006C8  0100               	movlb	0	; () banked
  6613  0006CA  A593               	btfss	sprintf@flag& (0+255),2,b
  6614  0006CC  D061               	goto	l4113
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;doprnt.c: 1392: if(flag & 0x03)
  6618  0006CE  0E03               	movlw	3
  6619  0006D0  0100               	movlb	0	; () banked
  6620  0006D2  1593               	andwf	sprintf@flag& (0+255),w,b
  6621  0006D4  6E28               	movwf	??_sprintf& (0+255),c
  6622  0006D6  0E00               	movlw	0
  6623  0006D8  0100               	movlb	0	; () banked
  6624  0006DA  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  6625  0006DC  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6626  0006DE  5028               	movf	??_sprintf,w,c
  6627  0006E0  1029               	iorwf	??_sprintf+1,w,c
  6628  0006E2  B4D8               	btfsc	status,2,c
  6629  0006E4  D009               	goto	l658
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  6633  0006E6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6634  0006EA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6635  0006EE  0E2D               	movlw	45
  6636  0006F0  D00B               	goto	L5
  6637  0006F2                     l4083:
  6638                           
  6639                           ; BSR set to: 0
  6640  0006F2  4A1E               	infsnz	sprintf@sp,f,c
  6641  0006F4  2A1F               	incf	sprintf@sp+1,f,c
  6642  0006F6  D039               	goto	l4105
  6643  0006F8                     l658:
  6644                           
  6645                           ; BSR set to: 0
  6646                           ;doprnt.c: 1396: else
  6647                           ;doprnt.c: 1399: if(flag & 0x01)
  6648  0006F8  0100               	movlb	0	; () banked
  6649  0006FA  A193               	btfss	sprintf@flag& (0+255),0,b
  6650  0006FC  D007               	goto	l4089
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  6654  0006FE  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6655  000702  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6656  000706  0E20               	movlw	32
  6657  000708                     L5:
  6658  000708  6EDF               	movwf	indf2,c
  6659  00070A  D7F3               	goto	l4083
  6660  00070C                     l4089:
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6664  00070C  0EC0               	movlw	192
  6665  00070E  6E28               	movwf	??_sprintf& (0+255),c
  6666  000710  0E08               	movlw	8
  6667  000712  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6668  000714  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  6669  000718  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6670  00071C  5028               	movf	??_sprintf,w,c
  6671  00071E  162A               	andwf	??_sprintf+2,f,c
  6672  000720  5029               	movf	??_sprintf+1,w,c
  6673  000722  162B               	andwf	??_sprintf+3,f,c
  6674  000724  0E80               	movlw	128
  6675  000726  182A               	xorwf	??_sprintf+2,w,c
  6676  000728  E120               	bnz	l4105
  6677  00072A  0E08               	movlw	8
  6678  00072C  182B               	xorwf	??_sprintf+3,w,c
  6679  00072E  A4D8               	btfss	status,2,c
  6680  000730  D01C               	goto	l4105
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  6684  000732  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6685  000736  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6686  00073A  0E30               	movlw	48
  6687  00073C  6EDF               	movwf	indf2,c
  6688                           
  6689                           ; BSR set to: 0
  6690  00073E  4A1E               	infsnz	sprintf@sp,f,c
  6691  000740  2A1F               	incf	sprintf@sp+1,f,c
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  6695  000742  0100               	movlb	0	; () banked
  6696  000744  BB93               	btfsc	sprintf@flag& (0+255),5,b
  6697  000746  D005               	goto	l4099
  6698                           
  6699                           ; BSR set to: 0
  6700  000748  0E00               	movlw	0
  6701  00074A  0100               	movlb	0	; () banked
  6702  00074C  6F82               	movwf	(_sprintf$1439+1)& (0+255),b
  6703  00074E  0E78               	movlw	120
  6704  000750  D004               	goto	L6
  6705  000752                     l4099:
  6706                           
  6707                           ; BSR set to: 0
  6708  000752  0E00               	movlw	0
  6709  000754  0100               	movlb	0	; () banked
  6710  000756  6F82               	movwf	(_sprintf$1439+1)& (0+255),b
  6711  000758  0E58               	movlw	88
  6712  00075A                     L6:
  6713  00075A  6F81               	movwf	_sprintf$1439& (0+255),b
  6714                           
  6715                           ; BSR set to: 0
  6716                           
  6717                           ; BSR set to: 0
  6718  00075C  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6719  000760  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6720  000764  C081  FFDF         	movff	_sprintf$1439,indf2
  6721  000768  D7C4               	goto	l4083
  6722  00076A                     l4105:
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;doprnt.c: 1412: }
  6726                           ;doprnt.c: 1415: if(width)
  6727  00076A  0100               	movlb	0	; () banked
  6728  00076C  5190               	movf	sprintf@width& (0+255),w,b
  6729  00076E  0100               	movlb	0	; () banked
  6730  000770  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6731  000772  B4D8               	btfsc	status,2,c
  6732  000774  D11D               	goto	l4177
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  6736                           
  6737                           ; BSR set to: 0
  6738                           
  6739                           ;doprnt.c: 1416: do
  6740  000776  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6741  00077A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6742  00077E  0E30               	movlw	48
  6743  000780  6EDF               	movwf	indf2,c
  6744                           
  6745                           ; BSR set to: 0
  6746  000782  4A1E               	infsnz	sprintf@sp,f,c
  6747  000784  2A1F               	incf	sprintf@sp+1,f,c
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;doprnt.c: 1418: while(--width);
  6751  000786  0100               	movlb	0	; () banked
  6752  000788  0790               	decf	sprintf@width& (0+255),f,b
  6753  00078A  A0D8               	btfss	status,0,c
  6754  00078C  0791               	decf	(sprintf@width+1)& (0+255),f,b
  6755  00078E  D7ED               	goto	l4105
  6756  000790                     l4113:
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;doprnt.c: 1422: {
  6760                           ;doprnt.c: 1424: if(width
  6761                           ;doprnt.c: 1426: && !(flag & 0x08)
  6762                           ;doprnt.c: 1428: )
  6763  000790  0100               	movlb	0	; () banked
  6764  000792  5190               	movf	sprintf@width& (0+255),w,b
  6765  000794  0100               	movlb	0	; () banked
  6766  000796  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6767  000798  B4D8               	btfsc	status,2,c
  6768  00079A  D015               	goto	l4123
  6769                           
  6770                           ; BSR set to: 0
  6771  00079C  0100               	movlb	0	; () banked
  6772  00079E  B793               	btfsc	sprintf@flag& (0+255),3,b
  6773  0007A0  D012               	goto	l4123
  6774  0007A2                     l4117:
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  6778  0007A2  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6779  0007A6  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6780  0007AA  0E20               	movlw	32
  6781  0007AC  6EDF               	movwf	indf2,c
  6782                           
  6783                           ; BSR set to: 0
  6784  0007AE  4A1E               	infsnz	sprintf@sp,f,c
  6785  0007B0  2A1F               	incf	sprintf@sp+1,f,c
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;doprnt.c: 1431: while(--width);
  6789  0007B2  0100               	movlb	0	; () banked
  6790  0007B4  0790               	decf	sprintf@width& (0+255),f,b
  6791  0007B6  A0D8               	btfss	status,0,c
  6792  0007B8  0791               	decf	(sprintf@width+1)& (0+255),f,b
  6793  0007BA  0100               	movlb	0	; () banked
  6794  0007BC  5190               	movf	sprintf@width& (0+255),w,b
  6795  0007BE  0100               	movlb	0	; () banked
  6796  0007C0  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  6797  0007C2  A4D8               	btfss	status,2,c
  6798  0007C4  D7EE               	goto	l4117
  6799  0007C6                     l4123:
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;doprnt.c: 1438: if(flag & 0x03)
  6803  0007C6  0E03               	movlw	3
  6804  0007C8  0100               	movlb	0	; () banked
  6805  0007CA  1593               	andwf	sprintf@flag& (0+255),w,b
  6806  0007CC  6E28               	movwf	??_sprintf& (0+255),c
  6807  0007CE  0E00               	movlw	0
  6808  0007D0  0100               	movlb	0	; () banked
  6809  0007D2  1594               	andwf	(sprintf@flag+1)& (0+255),w,b
  6810  0007D4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6811  0007D6  5028               	movf	??_sprintf,w,c
  6812  0007D8  1029               	iorwf	??_sprintf+1,w,c
  6813  0007DA  B4D8               	btfsc	status,2,c
  6814  0007DC  D009               	goto	l674
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  6818  0007DE  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6819  0007E2  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6820  0007E6  0E2D               	movlw	45
  6821  0007E8  D00B               	goto	L7
  6822  0007EA                     l4127:
  6823                           
  6824                           ; BSR set to: 0
  6825  0007EA  4A1E               	infsnz	sprintf@sp,f,c
  6826  0007EC  2A1F               	incf	sprintf@sp+1,f,c
  6827  0007EE  D00A               	goto	l4133
  6828  0007F0                     l674:
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;doprnt.c: 1443: else if(flag & 0x01)
  6832  0007F0  0100               	movlb	0	; () banked
  6833  0007F2  A193               	btfss	sprintf@flag& (0+255),0,b
  6834  0007F4  D007               	goto	l4133
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  6838  0007F6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6839  0007FA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6840  0007FE  0E20               	movlw	32
  6841  000800                     L7:
  6842  000800  6EDF               	movwf	indf2,c
  6843  000802  D7F3               	goto	l4127
  6844  000804                     l4133:
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  6848  000804  0EC0               	movlw	192
  6849  000806  6E28               	movwf	??_sprintf& (0+255),c
  6850  000808  0E08               	movlw	8
  6851  00080A  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6852  00080C  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  6853  000810  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6854  000814  5028               	movf	??_sprintf,w,c
  6855  000816  162A               	andwf	??_sprintf+2,f,c
  6856  000818  5029               	movf	??_sprintf+1,w,c
  6857  00081A  162B               	andwf	??_sprintf+3,f,c
  6858  00081C  0E40               	movlw	64
  6859  00081E  182A               	xorwf	??_sprintf+2,w,c
  6860  000820  E10B               	bnz	l4139
  6861  000822  0E08               	movlw	8
  6862  000824  182B               	xorwf	??_sprintf+3,w,c
  6863  000826  A4D8               	btfss	status,2,c
  6864  000828  D007               	goto	l4139
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  6868  00082A  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6869  00082E  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6870  000832  0E30               	movlw	48
  6871  000834  6EDF               	movwf	indf2,c
  6872  000836  D0BA               	goto	l4175
  6873  000838                     l4139:
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;doprnt.c: 1450: else
  6877                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6878  000838  0EC0               	movlw	192
  6879  00083A  6E28               	movwf	??_sprintf& (0+255),c
  6880  00083C  0E08               	movlw	8
  6881  00083E  6E29               	movwf	(??_sprintf+1)& (0+255),c
  6882  000840  C093  F02A         	movff	sprintf@flag,??_sprintf+2
  6883  000844  C094  F02B         	movff	sprintf@flag+1,??_sprintf+3
  6884  000848  5028               	movf	??_sprintf,w,c
  6885  00084A  162A               	andwf	??_sprintf+2,f,c
  6886  00084C  5029               	movf	??_sprintf+1,w,c
  6887  00084E  162B               	andwf	??_sprintf+3,f,c
  6888  000850  0E80               	movlw	128
  6889  000852  182A               	xorwf	??_sprintf+2,w,c
  6890  000854  E103               	bnz	u4001
  6891  000856  0E08               	movlw	8
  6892  000858  182B               	xorwf	??_sprintf+3,w,c
  6893  00085A  A4D8               	btfss	status,2,c
  6894  00085C                     u4001:
  6895  00085C  D0A9               	goto	l4177
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  6899  00085E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6900  000862  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6901  000866  0E30               	movlw	48
  6902  000868  6EDF               	movwf	indf2,c
  6903                           
  6904                           ; BSR set to: 0
  6905  00086A  4A1E               	infsnz	sprintf@sp,f,c
  6906  00086C  2A1F               	incf	sprintf@sp+1,f,c
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  6910  00086E  0100               	movlb	0	; () banked
  6911  000870  BB93               	btfsc	sprintf@flag& (0+255),5,b
  6912  000872  D005               	goto	l4149
  6913                           
  6914                           ; BSR set to: 0
  6915  000874  0E00               	movlw	0
  6916  000876  0100               	movlb	0	; () banked
  6917  000878  6F84               	movwf	(_sprintf$1440+1)& (0+255),b
  6918  00087A  0E78               	movlw	120
  6919  00087C  D004               	goto	L8
  6920  00087E                     l4149:
  6921                           
  6922                           ; BSR set to: 0
  6923  00087E  0E00               	movlw	0
  6924  000880  0100               	movlb	0	; () banked
  6925  000882  6F84               	movwf	(_sprintf$1440+1)& (0+255),b
  6926  000884  0E58               	movlw	88
  6927  000886                     L8:
  6928  000886  6F83               	movwf	_sprintf$1440& (0+255),b
  6929                           
  6930                           ; BSR set to: 0
  6931                           
  6932                           ; BSR set to: 0
  6933  000888  C01E  FFD9         	movff	sprintf@sp,fsr2l
  6934  00088C  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  6935  000890  C083  FFDF         	movff	_sprintf$1440,indf2
  6936  000894  D08B               	goto	l4175
  6937  000896                     l4155:
  6938                           
  6939                           ; BSR set to: 0
  6940                           ;doprnt.c: 1486: case 0xC0:
  6941                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6942  000896  0100               	movlb	0	; () banked
  6943  000898  518F               	movf	sprintf@prec& (0+255),w,b
  6944  00089A  0D02               	mullw	2
  6945  00089C  0E0F               	movlw	low _dpowers
  6946  00089E  24F3               	addwf	prodl,w,c
  6947  0008A0  6EF6               	movwf	tblptrl,c
  6948  0008A2  0E7E               	movlw	high _dpowers
  6949  0008A4  20F4               	addwfc	prodh,w,c
  6950  0008A6  6EF7               	movwf	tblptrh,c
  6951  0008A8                     	if	0	;There are less than 3 active tblptr bytes
  6952  0008A8                     	endif
  6953  0008A8  0009               	tblrd		*+
  6954  0008AA  CFF5 F014          	movff	tablat,___lwdiv@divisor
  6955  0008AE  000A               	tblrd		*-
  6956  0008B0  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  6957  0008B4  C08D  F012         	movff	sprintf@val,___lwdiv@dividend
  6958  0008B8  C08E  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  6959  0008BC  EC41  F00A         	call	___lwdiv	;wreg free
  6960  0008C0  C012  F019         	movff	?___lwdiv,___lwmod@dividend
  6961  0008C4  C013  F01A         	movff	?___lwdiv+1,___lwmod@dividend+1
  6962  0008C8  0E00               	movlw	0
  6963  0008CA  6E1C               	movwf	___lwmod@divisor+1,c
  6964  0008CC  0E0A               	movlw	10
  6965  0008CE  6E1B               	movwf	___lwmod@divisor,c
  6966  0008D0  EC8F  F00A         	call	___lwmod	;wreg free
  6967  0008D4  5019               	movf	?___lwmod,w,c
  6968  0008D6  D051               	goto	L9
  6969  0008D8                     l4157:
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;doprnt.c: 1499: {
  6973                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6974  0008D8  C08D  F012         	movff	sprintf@val,___lwdiv@dividend
  6975  0008DC  C08E  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  6976  0008E0  0100               	movlb	0	; () banked
  6977  0008E2  518F               	movf	sprintf@prec& (0+255),w,b
  6978  0008E4  0D02               	mullw	2
  6979  0008E6  0E19               	movlw	low _hexpowers
  6980  0008E8  24F3               	addwf	prodl,w,c
  6981  0008EA  6EF6               	movwf	tblptrl,c
  6982  0008EC  0E7E               	movlw	high _hexpowers
  6983  0008EE  20F4               	addwfc	prodh,w,c
  6984  0008F0  6EF7               	movwf	tblptrh,c
  6985  0008F2                     	if	0	;There are less than 3 active tblptr bytes
  6986  0008F2                     	endif
  6987  0008F2  0009               	tblrd		*+
  6988  0008F4  CFF5 F014          	movff	tablat,___lwdiv@divisor
  6989  0008F8  000A               	tblrd		*-
  6990  0008FA  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  6991  0008FE  EC41  F00A         	call	___lwdiv	;wreg free
  6992  000902  5012               	movf	?___lwdiv,w,c
  6993  000904  0B0F               	andlw	15
  6994  000906  0100               	movlb	0	; () banked
  6995  000908  6F80               	movwf	sprintf@idx& (0+255),b
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  6999  00090A  0100               	movlb	0	; () banked
  7000  00090C  BB93               	btfsc	sprintf@flag& (0+255),5,b
  7001  00090E  D005               	goto	l4163
  7002                           
  7003                           ; BSR set to: 0
  7004  000910  0ECE               	movlw	low STR_65
  7005  000912  0100               	movlb	0	; () banked
  7006  000914  6F85               	movwf	_sprintf$1446& (0+255),b
  7007  000916  0E7E               	movlw	high STR_65
  7008  000918  D004               	goto	L10
  7009  00091A                     l4163:
  7010                           
  7011                           ; BSR set to: 0
  7012  00091A  0EBD               	movlw	low STR_64
  7013  00091C  0100               	movlb	0	; () banked
  7014  00091E  6F85               	movwf	_sprintf$1446& (0+255),b
  7015  000920  0E7E               	movlw	high STR_64
  7016  000922                     L10:
  7017  000922  0100               	movlb	0	; () banked
  7018  000924  6F86               	movwf	(_sprintf$1446+1)& (0+255),b
  7019                           
  7020                           ; BSR set to: 0
  7021                           
  7022                           ; BSR set to: 0
  7023  000926  0100               	movlb	0	; () banked
  7024  000928  5180               	movf	sprintf@idx& (0+255),w,b
  7025  00092A  0D01               	mullw	1
  7026  00092C  C085  F028         	movff	_sprintf$1446,??_sprintf
  7027  000930  C086  F029         	movff	_sprintf$1446+1,??_sprintf+1
  7028  000934  50F3               	movf	prodl,w,c
  7029  000936  2628               	addwf	??_sprintf,f,c
  7030  000938  50F4               	movf	prodh,w,c
  7031  00093A  2229               	addwfc	??_sprintf+1,f,c
  7032  00093C  C028  FFF6         	movff	??_sprintf,tblptrl
  7033  000940  C029  FFF7         	movff	??_sprintf+1,tblptrh
  7034  000944                     	if	0	;tblptru may be non-zero
  7035  000944                     	endif
  7036  000944                     	if	0	;tblptru may be non-zero
  7037  000944                     	endif
  7038  000944  0008               	tblrd		*
  7039  000946  CFF5 F092          	movff	tablat,sprintf@c
  7040                           
  7041                           ;doprnt.c: 1508: }
  7042                           ;doprnt.c: 1510: break;
  7043  00094A  D02A               	goto	l4173
  7044  00094C                     l4167:
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  7048  00094C  C08D  F012         	movff	sprintf@val,___lwdiv@dividend
  7049  000950  C08E  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  7050  000954  0100               	movlb	0	; () banked
  7051  000956  518F               	movf	sprintf@prec& (0+255),w,b
  7052  000958  0D02               	mullw	2
  7053  00095A  0E03               	movlw	low _octpowers
  7054  00095C  24F3               	addwf	prodl,w,c
  7055  00095E  6EF6               	movwf	tblptrl,c
  7056  000960  0E7E               	movlw	high _octpowers
  7057  000962  20F4               	addwfc	prodh,w,c
  7058  000964  6EF7               	movwf	tblptrh,c
  7059  000966                     	if	0	;There are less than 3 active tblptr bytes
  7060  000966                     	endif
  7061  000966  0009               	tblrd		*+
  7062  000968  CFF5 F014          	movff	tablat,___lwdiv@divisor
  7063  00096C  000A               	tblrd		*-
  7064  00096E  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  7065  000972  EC41  F00A         	call	___lwdiv	;wreg free
  7066  000976  5012               	movf	?___lwdiv,w,c
  7067  000978  0B07               	andlw	7
  7068  00097A                     L9:
  7069  00097A  0F30               	addlw	48
  7070  00097C  0100               	movlb	0	; () banked
  7071  00097E  6F92               	movwf	sprintf@c& (0+255),b
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;doprnt.c: 1523: }
  7075                           
  7076                           ;doprnt.c: 1520: break;
  7077  000980  D00F               	goto	l4173
  7078  000982                     l4171:
  7079                           
  7080                           ; BSR set to: 0
  7081  000982  0100               	movlb	0	; () banked
  7082  000984  5193               	movf	sprintf@flag& (0+255),w,b
  7083  000986  0BC0               	andlw	192
  7084                           
  7085                           ; Switch size 1, requested type "space"
  7086                           ; Number of cases is 4, Range of values is 0 to 192
  7087                           ; switch strategies available:
  7088                           ; Name         Instructions Cycles
  7089                           ; simple_byte           13     7 (average)
  7090                           ;	Chosen strategy is simple_byte
  7091  000988  0A00               	xorlw	0	; case 0
  7092  00098A  B4D8               	btfsc	status,2,c
  7093  00098C  D784               	goto	l4155
  7094  00098E  0A40               	xorlw	64	; case 64
  7095  000990  B4D8               	btfsc	status,2,c
  7096  000992  D7DC               	goto	l4167
  7097  000994  0AC0               	xorlw	192	; case 128
  7098  000996  B4D8               	btfsc	status,2,c
  7099  000998  D79F               	goto	l4157
  7100  00099A  0A40               	xorlw	64	; case 192
  7101  00099C  B4D8               	btfsc	status,2,c
  7102  00099E  D77B               	goto	l4155
  7103  0009A0                     l4173:
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7107  0009A0  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7108  0009A4  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7109  0009A8  C092  FFDF         	movff	sprintf@c,indf2
  7110  0009AC                     l4175:
  7111                           
  7112                           ; BSR set to: 0
  7113  0009AC  4A1E               	infsnz	sprintf@sp,f,c
  7114  0009AE  2A1F               	incf	sprintf@sp+1,f,c
  7115  0009B0                     l4177:
  7116                           
  7117                           ; BSR set to: 0
  7118  0009B0  0100               	movlb	0	; () banked
  7119  0009B2  078F               	decf	sprintf@prec& (0+255),f,b
  7120  0009B4  0100               	movlb	0	; () banked
  7121  0009B6  298F               	incf	sprintf@prec& (0+255),w,b
  7122  0009B8  A4D8               	btfss	status,2,c
  7123  0009BA  D7E3               	goto	l4171
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;doprnt.c: 1525: }
  7127                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  7128  0009BC  0100               	movlb	0	; () banked
  7129  0009BE  A793               	btfss	sprintf@flag& (0+255),3,b
  7130  0009C0  D01C               	goto	l4187
  7131                           
  7132                           ; BSR set to: 0
  7133  0009C2  0100               	movlb	0	; () banked
  7134  0009C4  BF91               	btfsc	(sprintf@width+1)& (0+255),7,b
  7135  0009C6  D019               	goto	l4187
  7136  0009C8  0100               	movlb	0	; () banked
  7137  0009CA  5191               	movf	(sprintf@width+1)& (0+255),w,b
  7138  0009CC  E104               	bnz	l4181
  7139  0009CE  0100               	movlb	0	; () banked
  7140  0009D0  0590               	decf	sprintf@width& (0+255),w,b
  7141  0009D2  A0D8               	btfss	status,0,c
  7142  0009D4  D012               	goto	l4187
  7143  0009D6                     l4181:
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  7147  0009D6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7148  0009DA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7149  0009DE  0E20               	movlw	32
  7150  0009E0  6EDF               	movwf	indf2,c
  7151                           
  7152                           ; BSR set to: 0
  7153  0009E2  4A1E               	infsnz	sprintf@sp,f,c
  7154  0009E4  2A1F               	incf	sprintf@sp+1,f,c
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;doprnt.c: 1531: while(--width);
  7158  0009E6  0100               	movlb	0	; () banked
  7159  0009E8  0790               	decf	sprintf@width& (0+255),f,b
  7160  0009EA  A0D8               	btfss	status,0,c
  7161  0009EC  0791               	decf	(sprintf@width+1)& (0+255),f,b
  7162  0009EE  0100               	movlb	0	; () banked
  7163  0009F0  5190               	movf	sprintf@width& (0+255),w,b
  7164  0009F2  0100               	movlb	0	; () banked
  7165  0009F4  1191               	iorwf	(sprintf@width+1)& (0+255),w,b
  7166  0009F6  A4D8               	btfss	status,2,c
  7167  0009F8  D7EE               	goto	l4181
  7168  0009FA                     l4187:
  7169                           
  7170                           ; BSR set to: 0
  7171  0009FA  C020  FFF6         	movff	sprintf@f,tblptrl
  7172  0009FE  C021  FFF7         	movff	sprintf@f+1,tblptrh
  7173  000A02  4A20               	infsnz	sprintf@f,f,c
  7174  000A04  2A21               	incf	sprintf@f+1,f,c
  7175  000A06                     	if	0	;tblptru may be non-zero
  7176  000A06                     	endif
  7177  000A06                     	if	0	;tblptru may be non-zero
  7178  000A06                     	endif
  7179  000A06  0008               	tblrd		*
  7180  000A08  CFF5 F092          	movff	tablat,sprintf@c
  7181  000A0C  0100               	movlb	0	; () banked
  7182  000A0E  5192               	movf	sprintf@c& (0+255),w,b
  7183  000A10  A4D8               	btfss	status,2,c
  7184  000A12  EF11  F000         	goto	l3833
  7185  000A16                     l4189:
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;doprnt.c: 1538: *sp = 0;
  7189  000A16  C01E  FFD9         	movff	sprintf@sp,fsr2l
  7190  000A1A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  7191  000A1E  0E00               	movlw	0
  7192  000A20  6EDF               	movwf	indf2,c
  7193  000A22  0012               	return	
  7194  000A24                     __end_of_sprintf:
  7195                           	opt stack 0
  7196                           tblptru	equ	0xFF8
  7197                           tblptrh	equ	0xFF7
  7198                           tblptrl	equ	0xFF6
  7199                           tablat	equ	0xFF5
  7200                           prodh	equ	0xFF4
  7201                           prodl	equ	0xFF3
  7202                           intcon	equ	0xFF2
  7203                           indf0	equ	0xFEF
  7204                           postinc0	equ	0xFEE
  7205                           fsr0h	equ	0xFEA
  7206                           fsr0l	equ	0xFE9
  7207                           wreg	equ	0xFE8
  7208                           postdec1	equ	0xFE5
  7209                           plusw1	equ	0xFE3
  7210                           fsr1l	equ	0xFE1
  7211                           indf2	equ	0xFDF
  7212                           postinc2	equ	0xFDE
  7213                           postdec2	equ	0xFDD
  7214                           plusw2	equ	0xFDB
  7215                           fsr2h	equ	0xFDA
  7216                           fsr2l	equ	0xFD9
  7217                           status	equ	0xFD8
  7218                           
  7219 ;; *************** function _isdigit *****************
  7220 ;; Defined at:
  7221 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;  c               1    wreg     unsigned char 
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;  c               1   19[COMRAM] unsigned char 
  7226 ;; Return value:  Size  Location     Type
  7227 ;;		None               void
  7228 ;; Registers used:
  7229 ;;		wreg, status,2, status,0
  7230 ;; Tracked objects:
  7231 ;;		On entry : 0/0
  7232 ;;		On exit  : 0/0
  7233 ;;		Unchanged: 0/0
  7234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7235 ;;      Params:         0       0       0       0       0       0       0
  7236 ;;      Locals:         2       0       0       0       0       0       0
  7237 ;;      Temps:          1       0       0       0       0       0       0
  7238 ;;      Totals:         3       0       0       0       0       0       0
  7239 ;;Total ram usage:        3 bytes
  7240 ;; Hardware stack levels used:    1
  7241 ;; Hardware stack levels required when called:    1
  7242 ;; This function calls:
  7243 ;;		Nothing
  7244 ;; This function is called by:
  7245 ;;		_sprintf
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249                           	psect	text26
  7250  0018FC                     __ptext26:
  7251                           	opt stack 0
  7252  0018FC                     _isdigit:
  7253                           	opt stack 26
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;incstack = 0
  7257                           ;isdigit@c stored from wreg
  7258  0018FC  6E14               	movwf	isdigit@c,c
  7259  0018FE  0E00               	movlw	0
  7260  001900  6E13               	movwf	_isdigit$1676,c
  7261  001902  0E3A               	movlw	58
  7262  001904  6014               	cpfslt	isdigit@c,c
  7263  001906  D005               	goto	l3771
  7264  001908  0E2F               	movlw	47
  7265  00190A  6414               	cpfsgt	isdigit@c,c
  7266  00190C  D002               	goto	l3771
  7267  00190E  0E01               	movlw	1
  7268  001910  6E13               	movwf	_isdigit$1676,c
  7269  001912                     l3771:
  7270  001912  C013  F012         	movff	_isdigit$1676,??_isdigit
  7271  001916  3012               	rrcf	??_isdigit,w,c
  7272  001918  0012               	return	
  7273  00191A                     __end_of_isdigit:
  7274                           	opt stack 0
  7275                           tblptru	equ	0xFF8
  7276                           tblptrh	equ	0xFF7
  7277                           tblptrl	equ	0xFF6
  7278                           tablat	equ	0xFF5
  7279                           prodh	equ	0xFF4
  7280                           prodl	equ	0xFF3
  7281                           intcon	equ	0xFF2
  7282                           indf0	equ	0xFEF
  7283                           postinc0	equ	0xFEE
  7284                           fsr0h	equ	0xFEA
  7285                           fsr0l	equ	0xFE9
  7286                           wreg	equ	0xFE8
  7287                           postdec1	equ	0xFE5
  7288                           plusw1	equ	0xFE3
  7289                           fsr1l	equ	0xFE1
  7290                           indf2	equ	0xFDF
  7291                           postinc2	equ	0xFDE
  7292                           postdec2	equ	0xFDD
  7293                           plusw2	equ	0xFDB
  7294                           fsr2h	equ	0xFDA
  7295                           fsr2l	equ	0xFD9
  7296                           status	equ	0xFD8
  7297                           
  7298 ;; *************** function ___wmul *****************
  7299 ;; Defined at:
  7300 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;  multiplier      2   17[COMRAM] unsigned int 
  7303 ;;  multiplicand    2   19[COMRAM] unsigned int 
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;  product         2   21[COMRAM] unsigned int 
  7306 ;; Return value:  Size  Location     Type
  7307 ;;                  2   17[COMRAM] unsigned int 
  7308 ;; Registers used:
  7309 ;;		wreg, status,2, status,0, prodl, prodh
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7315 ;;      Params:         4       0       0       0       0       0       0
  7316 ;;      Locals:         2       0       0       0       0       0       0
  7317 ;;      Temps:          0       0       0       0       0       0       0
  7318 ;;      Totals:         6       0       0       0       0       0       0
  7319 ;;Total ram usage:        6 bytes
  7320 ;; Hardware stack levels used:    1
  7321 ;; Hardware stack levels required when called:    1
  7322 ;; This function calls:
  7323 ;;		Nothing
  7324 ;; This function is called by:
  7325 ;;		_sprintf
  7326 ;;		_delay_ms1
  7327 ;;		_delay_us1
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text27
  7332  001824                     __ptext27:
  7333                           	opt stack 0
  7334  001824                     ___wmul:
  7335                           	opt stack 26
  7336                           
  7337                           ;incstack = 0
  7338  001824  5012               	movf	___wmul@multiplier,w,c
  7339  001826  0214               	mulwf	___wmul@multiplicand,c
  7340  001828  CFF3 F016          	movff	prodl,___wmul@product
  7341  00182C  CFF4 F017          	movff	prodh,___wmul@product+1
  7342  001830  5012               	movf	___wmul@multiplier,w,c
  7343  001832  0215               	mulwf	___wmul@multiplicand+1,c
  7344  001834  50F3               	movf	prodl,w,c
  7345  001836  2617               	addwf	___wmul@product+1,f,c
  7346  001838  5013               	movf	___wmul@multiplier+1,w,c
  7347  00183A  0214               	mulwf	___wmul@multiplicand,c
  7348  00183C  50F3               	movf	prodl,w,c
  7349  00183E  2617               	addwf	___wmul@product+1,f,c
  7350  001840  C016  F012         	movff	___wmul@product,?___wmul
  7351  001844  C017  F013         	movff	___wmul@product+1,?___wmul+1
  7352  001848  0012               	return	
  7353  00184A                     __end_of___wmul:
  7354                           	opt stack 0
  7355                           tblptru	equ	0xFF8
  7356                           tblptrh	equ	0xFF7
  7357                           tblptrl	equ	0xFF6
  7358                           tablat	equ	0xFF5
  7359                           prodh	equ	0xFF4
  7360                           prodl	equ	0xFF3
  7361                           intcon	equ	0xFF2
  7362                           indf0	equ	0xFEF
  7363                           postinc0	equ	0xFEE
  7364                           fsr0h	equ	0xFEA
  7365                           fsr0l	equ	0xFE9
  7366                           wreg	equ	0xFE8
  7367                           postdec1	equ	0xFE5
  7368                           plusw1	equ	0xFE3
  7369                           fsr1l	equ	0xFE1
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           plusw2	equ	0xFDB
  7374                           fsr2h	equ	0xFDA
  7375                           fsr2l	equ	0xFD9
  7376                           status	equ	0xFD8
  7377                           
  7378 ;; *************** function ___lwmod *****************
  7379 ;; Defined at:
  7380 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;  dividend        2   24[COMRAM] unsigned int 
  7383 ;;  divisor         2   26[COMRAM] unsigned int 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;  counter         1   28[COMRAM] unsigned char 
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  2   24[COMRAM] unsigned int 
  7388 ;; Registers used:
  7389 ;;		wreg, status,2, status,0
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7395 ;;      Params:         4       0       0       0       0       0       0
  7396 ;;      Locals:         1       0       0       0       0       0       0
  7397 ;;      Temps:          0       0       0       0       0       0       0
  7398 ;;      Totals:         5       0       0       0       0       0       0
  7399 ;;Total ram usage:        5 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:    1
  7402 ;; This function calls:
  7403 ;;		Nothing
  7404 ;; This function is called by:
  7405 ;;		_sprintf
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409                           	psect	text28
  7410  00151E                     __ptext28:
  7411                           	opt stack 0
  7412  00151E                     ___lwmod:
  7413                           	opt stack 26
  7414                           
  7415                           ;incstack = 0
  7416  00151E  501B               	movf	___lwmod@divisor,w,c
  7417  001520  101C               	iorwf	___lwmod@divisor+1,w,c
  7418  001522  B4D8               	btfsc	status,2,c
  7419  001524  D018               	goto	l1140
  7420  001526  0E01               	movlw	1
  7421  001528  6E1D               	movwf	___lwmod@counter,c
  7422  00152A  D004               	goto	l3809
  7423  00152C                     l3807:
  7424  00152C  90D8               	bcf	status,0,c
  7425  00152E  361B               	rlcf	___lwmod@divisor,f,c
  7426  001530  361C               	rlcf	___lwmod@divisor+1,f,c
  7427  001532  2A1D               	incf	___lwmod@counter,f,c
  7428  001534                     l3809:
  7429  001534  AE1C               	btfss	___lwmod@divisor+1,7,c
  7430  001536  D7FA               	goto	l3807
  7431  001538                     l3811:
  7432  001538  501B               	movf	___lwmod@divisor,w,c
  7433  00153A  5C19               	subwf	___lwmod@dividend,w,c
  7434  00153C  501C               	movf	___lwmod@divisor+1,w,c
  7435  00153E  581A               	subwfb	___lwmod@dividend+1,w,c
  7436  001540  A0D8               	btfss	status,0,c
  7437  001542  D004               	goto	l3815
  7438  001544  501B               	movf	___lwmod@divisor,w,c
  7439  001546  5E19               	subwf	___lwmod@dividend,f,c
  7440  001548  501C               	movf	___lwmod@divisor+1,w,c
  7441  00154A  5A1A               	subwfb	___lwmod@dividend+1,f,c
  7442  00154C                     l3815:
  7443  00154C  90D8               	bcf	status,0,c
  7444  00154E  321C               	rrcf	___lwmod@divisor+1,f,c
  7445  001550  321B               	rrcf	___lwmod@divisor,f,c
  7446  001552  2E1D               	decfsz	___lwmod@counter,f,c
  7447  001554  D7F1               	goto	l3811
  7448  001556                     l1140:
  7449  001556  C019  F019         	movff	___lwmod@dividend,?___lwmod
  7450  00155A  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  7451  00155E  0012               	return		;funcret
  7452  001560                     __end_of___lwmod:
  7453                           	opt stack 0
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           prodh	equ	0xFF4
  7459                           prodl	equ	0xFF3
  7460                           intcon	equ	0xFF2
  7461                           indf0	equ	0xFEF
  7462                           postinc0	equ	0xFEE
  7463                           fsr0h	equ	0xFEA
  7464                           fsr0l	equ	0xFE9
  7465                           wreg	equ	0xFE8
  7466                           postdec1	equ	0xFE5
  7467                           plusw1	equ	0xFE3
  7468                           fsr1l	equ	0xFE1
  7469                           indf2	equ	0xFDF
  7470                           postinc2	equ	0xFDE
  7471                           postdec2	equ	0xFDD
  7472                           plusw2	equ	0xFDB
  7473                           fsr2h	equ	0xFDA
  7474                           fsr2l	equ	0xFD9
  7475                           status	equ	0xFD8
  7476                           
  7477 ;; *************** function ___lwdiv *****************
  7478 ;; Defined at:
  7479 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;  dividend        2   17[COMRAM] unsigned int 
  7482 ;;  divisor         2   19[COMRAM] unsigned int 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  quotient        2   22[COMRAM] unsigned int 
  7485 ;;  counter         1   21[COMRAM] unsigned char 
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  2   17[COMRAM] unsigned int 
  7488 ;; Registers used:
  7489 ;;		wreg, status,2, status,0
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7495 ;;      Params:         4       0       0       0       0       0       0
  7496 ;;      Locals:         3       0       0       0       0       0       0
  7497 ;;      Temps:          0       0       0       0       0       0       0
  7498 ;;      Totals:         7       0       0       0       0       0       0
  7499 ;;Total ram usage:        7 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; Hardware stack levels required when called:    1
  7502 ;; This function calls:
  7503 ;;		Nothing
  7504 ;; This function is called by:
  7505 ;;		_sprintf
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           	psect	text29
  7510  001482                     __ptext29:
  7511                           	opt stack 0
  7512  001482                     ___lwdiv:
  7513                           	opt stack 26
  7514                           
  7515                           ;incstack = 0
  7516  001482  0E00               	movlw	0
  7517  001484  6E18               	movwf	___lwdiv@quotient+1,c
  7518  001486  0E00               	movlw	0
  7519  001488  6E17               	movwf	___lwdiv@quotient,c
  7520  00148A  5014               	movf	___lwdiv@divisor,w,c
  7521  00148C  1015               	iorwf	___lwdiv@divisor+1,w,c
  7522  00148E  B4D8               	btfsc	status,2,c
  7523  001490  D01C               	goto	l1130
  7524  001492  0E01               	movlw	1
  7525  001494  6E16               	movwf	___lwdiv@counter,c
  7526  001496  D004               	goto	l3789
  7527  001498                     l3787:
  7528  001498  90D8               	bcf	status,0,c
  7529  00149A  3614               	rlcf	___lwdiv@divisor,f,c
  7530  00149C  3615               	rlcf	___lwdiv@divisor+1,f,c
  7531  00149E  2A16               	incf	___lwdiv@counter,f,c
  7532  0014A0                     l3789:
  7533  0014A0  AE15               	btfss	___lwdiv@divisor+1,7,c
  7534  0014A2  D7FA               	goto	l3787
  7535  0014A4                     l3791:
  7536  0014A4  90D8               	bcf	status,0,c
  7537  0014A6  3617               	rlcf	___lwdiv@quotient,f,c
  7538  0014A8  3618               	rlcf	___lwdiv@quotient+1,f,c
  7539  0014AA  5014               	movf	___lwdiv@divisor,w,c
  7540  0014AC  5C12               	subwf	___lwdiv@dividend,w,c
  7541  0014AE  5015               	movf	___lwdiv@divisor+1,w,c
  7542  0014B0  5813               	subwfb	___lwdiv@dividend+1,w,c
  7543  0014B2  A0D8               	btfss	status,0,c
  7544  0014B4  D005               	goto	l3799
  7545  0014B6  5014               	movf	___lwdiv@divisor,w,c
  7546  0014B8  5E12               	subwf	___lwdiv@dividend,f,c
  7547  0014BA  5015               	movf	___lwdiv@divisor+1,w,c
  7548  0014BC  5A13               	subwfb	___lwdiv@dividend+1,f,c
  7549  0014BE  8017               	bsf	___lwdiv@quotient,0,c
  7550  0014C0                     l3799:
  7551  0014C0  90D8               	bcf	status,0,c
  7552  0014C2  3215               	rrcf	___lwdiv@divisor+1,f,c
  7553  0014C4  3214               	rrcf	___lwdiv@divisor,f,c
  7554  0014C6  2E16               	decfsz	___lwdiv@counter,f,c
  7555  0014C8  D7ED               	goto	l3791
  7556  0014CA                     l1130:
  7557  0014CA  C017  F012         	movff	___lwdiv@quotient,?___lwdiv
  7558  0014CE  C018  F013         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7559  0014D2  0012               	return		;funcret
  7560  0014D4                     __end_of___lwdiv:
  7561                           	opt stack 0
  7562                           tblptru	equ	0xFF8
  7563                           tblptrh	equ	0xFF7
  7564                           tblptrl	equ	0xFF6
  7565                           tablat	equ	0xFF5
  7566                           prodh	equ	0xFF4
  7567                           prodl	equ	0xFF3
  7568                           intcon	equ	0xFF2
  7569                           indf0	equ	0xFEF
  7570                           postinc0	equ	0xFEE
  7571                           fsr0h	equ	0xFEA
  7572                           fsr0l	equ	0xFE9
  7573                           wreg	equ	0xFE8
  7574                           postdec1	equ	0xFE5
  7575                           plusw1	equ	0xFE3
  7576                           fsr1l	equ	0xFE1
  7577                           indf2	equ	0xFDF
  7578                           postinc2	equ	0xFDE
  7579                           postdec2	equ	0xFDD
  7580                           plusw2	equ	0xFDB
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585 ;; *************** function _ESP8266_AT_Test *****************
  7586 ;; Defined at:
  7587 ;;		line 130 in file "harwave/UART.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;		None
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;		None
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1    wreg      void 
  7594 ;; Registers used:
  7595 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7601 ;;      Params:         0       0       0       0       0       0       0
  7602 ;;      Locals:         0       0       0       0       0       0       0
  7603 ;;      Temps:          0       0       0       0       0       0       0
  7604 ;;      Totals:         0       0       0       0       0       0       0
  7605 ;;Total ram usage:        0 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    4
  7608 ;; This function calls:
  7609 ;;		_ESP8266_Cmd
  7610 ;; This function is called by:
  7611 ;;		_ESP8266_client
  7612 ;;		_ESP8266_Server
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text30
  7617  0017A8                     __ptext30:
  7618                           	opt stack 0
  7619  0017A8                     _ESP8266_AT_Test:
  7620                           	opt stack 25
  7621  0017A8                     l4263:
  7622  0017A8  0EE0               	movlw	low STR_4
  7623  0017AA  6E25               	movwf	ESP8266_Cmd@cmd,c
  7624  0017AC  0E7F               	movlw	high STR_4
  7625  0017AE  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  7626  0017B0  0EBB               	movlw	low (STR_3+5)
  7627  0017B2  6E27               	movwf	ESP8266_Cmd@reply1,c
  7628  0017B4  0E7F               	movlw	high (STR_3+5)
  7629  0017B6  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  7630  0017B8  0E00               	movlw	0
  7631  0017BA  6E29               	movwf	ESP8266_Cmd@reply2,c
  7632  0017BC  0E00               	movlw	0
  7633  0017BE  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  7634  0017C0  0E00               	movlw	0
  7635  0017C2  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  7636  0017C4  0EC8               	movlw	200
  7637  0017C6  6E2B               	movwf	ESP8266_Cmd@waittime,c
  7638  0017C8  EC21  F007         	call	_ESP8266_Cmd	;wreg free
  7639  0017CC  0900               	iorlw	0
  7640  0017CE  A4D8               	btfss	status,2,c
  7641  0017D0  0012               	return	
  7642  0017D2  D7EA               	goto	l4263
  7643  0017D4                     __end_of_ESP8266_AT_Test:
  7644                           	opt stack 0
  7645                           tblptru	equ	0xFF8
  7646                           tblptrh	equ	0xFF7
  7647                           tblptrl	equ	0xFF6
  7648                           tablat	equ	0xFF5
  7649                           prodh	equ	0xFF4
  7650                           prodl	equ	0xFF3
  7651                           intcon	equ	0xFF2
  7652                           indf0	equ	0xFEF
  7653                           postinc0	equ	0xFEE
  7654                           fsr0h	equ	0xFEA
  7655                           fsr0l	equ	0xFE9
  7656                           wreg	equ	0xFE8
  7657                           postdec1	equ	0xFE5
  7658                           plusw1	equ	0xFE3
  7659                           fsr1l	equ	0xFE1
  7660                           indf2	equ	0xFDF
  7661                           postinc2	equ	0xFDE
  7662                           postdec2	equ	0xFDD
  7663                           plusw2	equ	0xFDB
  7664                           fsr2h	equ	0xFDA
  7665                           fsr2l	equ	0xFD9
  7666                           status	equ	0xFD8
  7667                           
  7668 ;; *************** function _ESP8266_Cmd *****************
  7669 ;; Defined at:
  7670 ;;		line 86 in file "harwave/UART.c"
  7671 ;; Parameters:    Size  Location     Type
  7672 ;;  cmd             2   36[COMRAM] PTR unsigned char 
  7673 ;;		 -> STR_55(14), STR_53(15), STR_49(11), STR_47(22), 
  7674 ;;		 -> STR_45(14), STR_43(15), STR_41(14), STR_35(13), 
  7675 ;;		 -> STR_32(13), STR_30(25), STR_28(23), ESP8266_Link_Server@cCmd(120), 
  7676 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_13(14), STR_11(14), 
  7677 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@cStr(20), 
  7678 ;;  reply1          2   38[COMRAM] PTR unsigned char 
  7679 ;;		 -> STR_56(3), STR_54(3), STR_50(3), STR_48(3), 
  7680 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_36(10), 
  7681 ;;		 -> STR_33(10), STR_31(3), STR_29(3), STR_26(8), 
  7682 ;;		 -> STR_19(3), STR_16(3), STR_14(3), STR_12(3), 
  7683 ;;		 -> STR_10(3), STR_7(3), STR_5(3), STR_3(8), 
  7684 ;;		 -> STR_2(3), 
  7685 ;;  reply2          2   40[COMRAM] PTR unsigned char 
  7686 ;;		 -> STR_37(3), STR_34(3), STR_27(7), STR_17(10), 
  7687 ;;		 -> STR_8(6), NULL(0), 
  7688 ;;  waittime        2   42[COMRAM] unsigned int 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      unsigned char 
  7693 ;; Registers used:
  7694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7700 ;;      Params:         8       0       0       0       0       0       0
  7701 ;;      Locals:         1       0       0       0       0       0       0
  7702 ;;      Temps:          0       0       0       0       0       0       0
  7703 ;;      Totals:         9       0       0       0       0       0       0
  7704 ;;Total ram usage:        9 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    3
  7707 ;; This function calls:
  7708 ;;		_ESP8266_Uart
  7709 ;;		_delay_ms
  7710 ;;		_strstr
  7711 ;; This function is called by:
  7712 ;;		_ESP8266_AT_Test
  7713 ;;		_ESP8266_Rst
  7714 ;;		_ESP8266_Net_Mode_Choose
  7715 ;;		_ESP8266_JoinAP
  7716 ;;		_ESP8266_Link_Server
  7717 ;;		_STA_MODE
  7718 ;;		_ESP8266_client
  7719 ;;		_ESP8266_SendString
  7720 ;;		_ESP8266_BuildAP
  7721 ;;		_set_baudrate
  7722 ;;		_AP_MODE
  7723 ;;		_ESP8266_Server
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           	psect	text31
  7728  000E42                     __ptext31:
  7729                           	opt stack 0
  7730  000E42                     _ESP8266_Cmd:
  7731                           	opt stack 24
  7732                           
  7733                           ;UART.c: 88: test_index=0;
  7734                           
  7735                           ;incstack = 0
  7736  000E42  0E00               	movlw	0
  7737  000E44  6E5F               	movwf	_test_index+1,c
  7738  000E46  0E00               	movlw	0
  7739  000E48  6E5E               	movwf	_test_index,c
  7740                           
  7741                           ;UART.c: 89: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  7742  000E4A  0102               	movlb	2	; () banked
  7743  000E4C  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  7744  000E4E  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  7745  000E50  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  7746  000E52  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  7747  000E54  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  7748  000E56  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  7749  000E58  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  7750                           
  7751                           ; BSR set to: 2
  7752                           ;UART.c: 93: ESP8266_Uart( cmd);
  7753  000E5A  C025  F012         	movff	ESP8266_Cmd@cmd,ESP8266_Uart@cmd
  7754  000E5E  C026  F013         	movff	ESP8266_Cmd@cmd+1,ESP8266_Uart@cmd+1
  7755  000E62  EC89  F009         	call	_ESP8266_Uart	;wreg free
  7756                           
  7757                           ;UART.c: 96: if ( ( reply1 == 0 ) && ( reply2 == 0 ) )
  7758  000E66  5027               	movf	ESP8266_Cmd@reply1,w,c
  7759  000E68  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  7760  000E6A  A4D8               	btfss	status,2,c
  7761  000E6C  D006               	goto	l3733
  7762  000E6E  5029               	movf	ESP8266_Cmd@reply2,w,c
  7763  000E70  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  7764  000E72  A4D8               	btfss	status,2,c
  7765  000E74  D002               	goto	l3733
  7766                           
  7767                           ;UART.c: 97: return 1;
  7768  000E76  0E01               	movlw	1
  7769  000E78  0012               	return	
  7770  000E7A                     l3733:
  7771                           
  7772                           ;UART.c: 99: delay_ms ( waittime );
  7773  000E7A  C02B  F014         	movff	ESP8266_Cmd@waittime,delay_ms@ms
  7774  000E7E  C02C  F015         	movff	ESP8266_Cmd@waittime+1,delay_ms@ms+1
  7775  000E82  EC99  F00C         	call	_delay_ms	;wreg free
  7776                           
  7777                           ;UART.c: 106: if ( ( reply1 != 0 ) && ( reply2 != 0 ) )
  7778  000E86  5027               	movf	ESP8266_Cmd@reply1,w,c
  7779  000E88  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  7780  000E8A  B4D8               	btfsc	status,2,c
  7781  000E8C  D022               	goto	l3751
  7782  000E8E  5029               	movf	ESP8266_Cmd@reply2,w,c
  7783  000E90  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  7784  000E92  B4D8               	btfsc	status,2,c
  7785  000E94  D01E               	goto	l3751
  7786                           
  7787                           ;UART.c: 107: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) || (u
      +                          8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  7788  000E96  0E01               	movlw	1
  7789  000E98  6E2D               	movwf	_ESP8266_Cmd$1210,c
  7790  000E9A  0E9A               	movlw	low _strEsp8266_Fram_Record
  7791  000E9C  6E21               	movwf	strstr@s1,c
  7792  000E9E  0E02               	movlw	high _strEsp8266_Fram_Record
  7793  000EA0  6E22               	movwf	strstr@s1+1,c
  7794  000EA2  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  7795  000EA6  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  7796  000EAA  EC06  F009         	call	_strstr	;wreg free
  7797  000EAE  6621               	tstfsz	?_strstr,c
  7798  000EB0  D00E               	goto	l352
  7799  000EB2  0E9A               	movlw	low _strEsp8266_Fram_Record
  7800  000EB4  6E21               	movwf	strstr@s1,c
  7801  000EB6  0E02               	movlw	high _strEsp8266_Fram_Record
  7802  000EB8  6E22               	movwf	strstr@s1+1,c
  7803  000EBA  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  7804  000EBE  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  7805  000EC2  EC06  F009         	call	_strstr	;wreg free
  7806  000EC6  6621               	tstfsz	?_strstr,c
  7807  000EC8  D002               	goto	l352
  7808  000ECA  0E00               	movlw	0
  7809  000ECC  6E2D               	movwf	_ESP8266_Cmd$1210,c
  7810  000ECE                     l352:
  7811  000ECE  502D               	movf	_ESP8266_Cmd$1210,w,c
  7812  000ED0  0012               	return	
  7813  000ED2                     l3751:
  7814                           
  7815                           ;UART.c: 108: else if ( reply1 != 0 )
  7816  000ED2  5027               	movf	ESP8266_Cmd@reply1,w,c
  7817  000ED4  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  7818  000ED6  B4D8               	btfsc	status,2,c
  7819  000ED8  D00C               	goto	l3759
  7820                           
  7821                           ;UART.c: 109: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) );
  7822  000EDA  0E9A               	movlw	low _strEsp8266_Fram_Record
  7823  000EDC  6E21               	movwf	strstr@s1,c
  7824  000EDE  0E02               	movlw	high _strEsp8266_Fram_Record
  7825  000EE0  6E22               	movwf	strstr@s1+1,c
  7826  000EE2  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  7827  000EE6  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  7828  000EEA  EC06  F009         	call	_strstr	;wreg free
  7829  000EEE  5021               	movf	?_strstr,w,c
  7830  000EF0  0012               	return	
  7831  000EF2                     l3759:
  7832                           
  7833                           ;UART.c: 110: else
  7834                           ;UART.c: 111: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  7835  000EF2  0E9A               	movlw	low _strEsp8266_Fram_Record
  7836  000EF4  6E21               	movwf	strstr@s1,c
  7837  000EF6  0E02               	movlw	high _strEsp8266_Fram_Record
  7838  000EF8  6E22               	movwf	strstr@s1+1,c
  7839  000EFA  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  7840  000EFE  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  7841  000F02  EC06  F009         	call	_strstr	;wreg free
  7842  000F06  5021               	movf	?_strstr,w,c
  7843  000F08  0012               	return	
  7844  000F0A                     __end_of_ESP8266_Cmd:
  7845                           	opt stack 0
  7846                           tblptru	equ	0xFF8
  7847                           tblptrh	equ	0xFF7
  7848                           tblptrl	equ	0xFF6
  7849                           tablat	equ	0xFF5
  7850                           prodh	equ	0xFF4
  7851                           prodl	equ	0xFF3
  7852                           intcon	equ	0xFF2
  7853                           indf0	equ	0xFEF
  7854                           postinc0	equ	0xFEE
  7855                           fsr0h	equ	0xFEA
  7856                           fsr0l	equ	0xFE9
  7857                           wreg	equ	0xFE8
  7858                           postdec1	equ	0xFE5
  7859                           plusw1	equ	0xFE3
  7860                           fsr1l	equ	0xFE1
  7861                           indf2	equ	0xFDF
  7862                           postinc2	equ	0xFDE
  7863                           postdec2	equ	0xFDD
  7864                           plusw2	equ	0xFDB
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function _ESP8266_Uart *****************
  7870 ;; Defined at:
  7871 ;;		line 73 in file "harwave/UART.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  cmd             2   17[COMRAM] PTR unsigned char 
  7874 ;;		 -> STR_55(14), STR_53(15), STR_49(11), STR_47(22), 
  7875 ;;		 -> STR_45(14), STR_43(15), STR_41(14), STR_35(13), 
  7876 ;;		 -> STR_32(13), STR_30(25), STR_28(23), ESP8266_Link_Server@cCmd(120), 
  7877 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_13(14), STR_11(14), 
  7878 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@cStr(20), 
  7879 ;; Auto vars:     Size  Location     Type
  7880 ;;  index           2   21[COMRAM] int 
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  1    wreg      void 
  7883 ;; Registers used:
  7884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  7885 ;; Tracked objects:
  7886 ;;		On entry : 0/0
  7887 ;;		On exit  : 0/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7890 ;;      Params:         2       0       0       0       0       0       0
  7891 ;;      Locals:         2       0       0       0       0       0       0
  7892 ;;      Temps:          2       0       0       0       0       0       0
  7893 ;;      Totals:         6       0       0       0       0       0       0
  7894 ;;Total ram usage:        6 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    1
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		_ESP8266_Cmd
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           	psect	text32
  7905  001312                     __ptext32:
  7906                           	opt stack 0
  7907  001312                     _ESP8266_Uart:
  7908                           	opt stack 25
  7909                           
  7910                           ;UART.c: 74: int index=-1;
  7911                           
  7912                           ;incstack = 0
  7913  001312  6816               	setf	ESP8266_Uart@index,c
  7914  001314  6817               	setf	ESP8266_Uart@index+1,c
  7915  001316                     l3695:
  7916                           
  7917                           ;UART.c: 77: {
  7918                           ;UART.c: 78: index++;
  7919  001316  4A16               	infsnz	ESP8266_Uart@index,f,c
  7920  001318  2A17               	incf	ESP8266_Uart@index+1,f,c
  7921  00131A                     l338:
  7922  00131A  A89E               	btfss	3998,4,c	;volatile
  7923  00131C  D7FE               	goto	l338
  7924                           
  7925                           ;UART.c: 80: TXREG=cmd[index];
  7926  00131E  5016               	movf	ESP8266_Uart@index,w,c
  7927  001320  2412               	addwf	ESP8266_Uart@cmd,w,c
  7928  001322  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  7929  001324  5017               	movf	ESP8266_Uart@index+1,w,c
  7930  001326  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  7931  001328  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  7932  00132A  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  7933  00132E  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  7934  001332  6AF8               	clrf	tblptru,c
  7935  001334  0E05               	movlw	(high __ramtop+-1)
  7936  001336  64F7               	cpfsgt	tblptrh,c
  7937  001338  D003               	bra	u3217
  7938  00133A  0008               	tblrd		*
  7939  00133C  50F5               	movf	tablat,w,c
  7940  00133E  D005               	bra	u3210
  7941  001340                     u3217:
  7942  001340  CFF6 FFE9          	movff	tblptrl,fsr0l
  7943  001344  CFF7 FFEA          	movff	tblptrh,fsr0h
  7944  001348  50EF               	movf	indf0,w,c
  7945  00134A                     u3210:
  7946  00134A  6EAD               	movwf	4013,c	;volatile
  7947                           
  7948                           ;UART.c: 81: }while(cmd[index]!='\0');
  7949  00134C  5016               	movf	ESP8266_Uart@index,w,c
  7950  00134E  2412               	addwf	ESP8266_Uart@cmd,w,c
  7951  001350  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  7952  001352  5017               	movf	ESP8266_Uart@index+1,w,c
  7953  001354  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  7954  001356  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  7955  001358  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  7956  00135C  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  7957  001360  6AF8               	clrf	tblptru,c
  7958  001362  0E05               	movlw	(high __ramtop+-1)
  7959  001364  64F7               	cpfsgt	tblptrh,c
  7960  001366  D003               	bra	u3227
  7961  001368  0008               	tblrd		*
  7962  00136A  50F5               	movf	tablat,w,c
  7963  00136C  D005               	bra	u3220
  7964  00136E                     u3227:
  7965  00136E  CFF6 FFE9          	movff	tblptrl,fsr0l
  7966  001372  CFF7 FFEA          	movff	tblptrh,fsr0h
  7967  001376  50EF               	movf	indf0,w,c
  7968  001378                     u3220:
  7969  001378  0900               	iorlw	0
  7970  00137A  A4D8               	btfss	status,2,c
  7971  00137C  D7CC               	goto	l3695
  7972  00137E                     l342:
  7973  00137E  B2AC               	btfsc	4012,1,c	;volatile
  7974  001380  0012               	return	
  7975  001382  D7FD               	goto	l342
  7976  001384                     __end_of_ESP8266_Uart:
  7977                           	opt stack 0
  7978                           tblptru	equ	0xFF8
  7979                           tblptrh	equ	0xFF7
  7980                           tblptrl	equ	0xFF6
  7981                           tablat	equ	0xFF5
  7982                           prodh	equ	0xFF4
  7983                           prodl	equ	0xFF3
  7984                           intcon	equ	0xFF2
  7985                           indf0	equ	0xFEF
  7986                           postinc0	equ	0xFEE
  7987                           fsr0h	equ	0xFEA
  7988                           fsr0l	equ	0xFE9
  7989                           wreg	equ	0xFE8
  7990                           postdec1	equ	0xFE5
  7991                           plusw1	equ	0xFE3
  7992                           fsr1l	equ	0xFE1
  7993                           indf2	equ	0xFDF
  7994                           postinc2	equ	0xFDE
  7995                           postdec2	equ	0xFDD
  7996                           plusw2	equ	0xFDB
  7997                           fsr2h	equ	0xFDA
  7998                           fsr2l	equ	0xFD9
  7999                           status	equ	0xFD8
  8000                           
  8001 ;; *************** function _ESP8266_ReceiveString *****************
  8002 ;; Defined at:
  8003 ;;		line 257 in file "harwave/UART.c"
  8004 ;; Parameters:    Size  Location     Type
  8005 ;;		None
  8006 ;; Auto vars:     Size  Location     Type
  8007 ;;  pRecStr         2   38[COMRAM] PTR unsigned char 
  8008 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  2   36[COMRAM] PTR unsigned char 
  8011 ;; Registers used:
  8012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8018 ;;      Params:         2       0       0       0       0       0       0
  8019 ;;      Locals:         2       0       0       0       0       0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0
  8021 ;;      Totals:         4       0       0       0       0       0       0
  8022 ;;Total ram usage:        4 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    3
  8025 ;; This function calls:
  8026 ;;		_strstr
  8027 ;; This function is called by:
  8028 ;;		_main
  8029 ;; This function uses a non-reentrant model
  8030 ;;
  8031                           
  8032                           	psect	text33
  8033  001064                     __ptext33:
  8034                           	opt stack 0
  8035  001064                     _ESP8266_ReceiveString:
  8036                           	opt stack 27
  8037                           
  8038                           ;UART.c: 259: char * pRecStr = 0;
  8039                           
  8040                           ;incstack = 0
  8041  001064  0E00               	movlw	0
  8042  001066  6E27               	movwf	ESP8266_ReceiveString@pRecStr,c
  8043  001068  0E00               	movlw	0
  8044  00106A  6E28               	movwf	ESP8266_ReceiveString@pRecStr+1,c
  8045                           
  8046                           ;UART.c: 260: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  8047  00106C  0102               	movlb	2	; () banked
  8048  00106E  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  8049  001070  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  8050  001072  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  8051  001074  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  8052  001076  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  8053  001078  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  8054  00107A  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  8055  00107C                     l4397:
  8056  00107C  0E9A               	movlw	low _strEsp8266_Fram_Record
  8057  00107E  6E21               	movwf	strstr@s1,c
  8058  001080  0E02               	movlw	high _strEsp8266_Fram_Record
  8059  001082  6E22               	movwf	strstr@s1+1,c
  8060  001084  0EFB               	movlw	low STR_59
  8061  001086  6E23               	movwf	strstr@s2,c
  8062  001088  0E7F               	movlw	high STR_59
  8063  00108A  6E24               	movwf	strstr@s2+1,c
  8064  00108C  EC06  F009         	call	_strstr	;wreg free
  8065  001090  5021               	movf	?_strstr,w,c
  8066  001092  B4D8               	btfsc	status,2,c
  8067  001094  D7F3               	goto	l4397
  8068                           
  8069                           ;UART.c: 266: }
  8070                           ;UART.c: 267: }
  8071                           ;UART.c: 268: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  8072  001096  0102               	movlb	2	; () banked
  8073  001098  91CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),0,b
  8074  00109A  93CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),1,b
  8075  00109C  95CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),2,b
  8076  00109E  97CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),3,b
  8077  0010A0  99CC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),4,b
  8078  0010A2  9BCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),5,b
  8079  0010A4  9DCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),6,b
  8080                           
  8081                           ;UART.c: 269: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 0;
  8082  0010A6  0102               	movlb	2	; () banked
  8083  0010A8  9FCC               	bcf	(_strEsp8266_Fram_Record+50)& (0+255),7,b
  8084  0010AA                     l4399:
  8085  0010AA  0E9A               	movlw	low _strEsp8266_Fram_Record
  8086  0010AC  6E21               	movwf	strstr@s1,c
  8087  0010AE  0E02               	movlw	high _strEsp8266_Fram_Record
  8088  0010B0  6E22               	movwf	strstr@s1+1,c
  8089  0010B2  0EF9               	movlw	low STR_60
  8090  0010B4  6E23               	movwf	strstr@s2,c
  8091  0010B6  0E7F               	movlw	high STR_60
  8092  0010B8  6E24               	movwf	strstr@s2+1,c
  8093  0010BA  EC06  F009         	call	_strstr	;wreg free
  8094  0010BE  5021               	movf	?_strstr,w,c
  8095  0010C0  1022               	iorwf	?_strstr+1,w,c
  8096  0010C2  B4D8               	btfsc	status,2,c
  8097  0010C4  D7F2               	goto	l4399
  8098                           
  8099                           ;UART.c: 271: if ( strstr ( strEsp8266_Fram_Record .Data_RX_BUF, "\0" ) )
  8100  0010C6  0E9A               	movlw	low _strEsp8266_Fram_Record
  8101  0010C8  6E21               	movwf	strstr@s1,c
  8102  0010CA  0E02               	movlw	high _strEsp8266_Fram_Record
  8103  0010CC  6E22               	movwf	strstr@s1+1,c
  8104  0010CE  0EF9               	movlw	low STR_60
  8105  0010D0  6E23               	movwf	strstr@s2,c
  8106  0010D2  0E7F               	movlw	high STR_60
  8107  0010D4  6E24               	movwf	strstr@s2+1,c
  8108  0010D6  EC06  F009         	call	_strstr	;wreg free
  8109  0010DA  5021               	movf	?_strstr,w,c
  8110  0010DC  1022               	iorwf	?_strstr+1,w,c
  8111  0010DE  B4D8               	btfsc	status,2,c
  8112  0010E0  D004               	goto	l463
  8113                           
  8114                           ;UART.c: 272: pRecStr = strEsp8266_Fram_Record .Data_RX_BUF;
  8115  0010E2  0E9A               	movlw	low _strEsp8266_Fram_Record
  8116  0010E4  6E27               	movwf	ESP8266_ReceiveString@pRecStr,c
  8117  0010E6  0E02               	movlw	high _strEsp8266_Fram_Record
  8118  0010E8  6E28               	movwf	ESP8266_ReceiveString@pRecStr+1,c
  8119  0010EA                     l463:
  8120                           
  8121                           ;UART.c: 275: return pRecStr;
  8122  0010EA  C027  F025         	movff	ESP8266_ReceiveString@pRecStr,?_ESP8266_ReceiveString
  8123  0010EE  C028  F026         	movff	ESP8266_ReceiveString@pRecStr+1,?_ESP8266_ReceiveString+1
  8124  0010F2  0012               	return	
  8125  0010F4                     __end_of_ESP8266_ReceiveString:
  8126                           	opt stack 0
  8127                           tblptru	equ	0xFF8
  8128                           tblptrh	equ	0xFF7
  8129                           tblptrl	equ	0xFF6
  8130                           tablat	equ	0xFF5
  8131                           prodh	equ	0xFF4
  8132                           prodl	equ	0xFF3
  8133                           intcon	equ	0xFF2
  8134                           indf0	equ	0xFEF
  8135                           postinc0	equ	0xFEE
  8136                           fsr0h	equ	0xFEA
  8137                           fsr0l	equ	0xFE9
  8138                           wreg	equ	0xFE8
  8139                           postdec1	equ	0xFE5
  8140                           plusw1	equ	0xFE3
  8141                           fsr1l	equ	0xFE1
  8142                           indf2	equ	0xFDF
  8143                           postinc2	equ	0xFDE
  8144                           postdec2	equ	0xFDD
  8145                           plusw2	equ	0xFDB
  8146                           fsr2h	equ	0xFDA
  8147                           fsr2l	equ	0xFD9
  8148                           status	equ	0xFD8
  8149                           
  8150 ;; *************** function _strstr *****************
  8151 ;; Defined at:
  8152 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strstr.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;  s1              2   32[COMRAM] PTR const unsigned char 
  8155 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8156 ;;  s2              2   34[COMRAM] PTR const unsigned char 
  8157 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8158 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8159 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8160 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8161 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8162 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8163 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8164 ;;		 -> STR_2(3), NULL(0), 
  8165 ;; Auto vars:     Size  Location     Type
  8166 ;;		None
  8167 ;; Return value:  Size  Location     Type
  8168 ;;                  2   32[COMRAM] PTR unsigned char 
  8169 ;; Registers used:
  8170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8171 ;; Tracked objects:
  8172 ;;		On entry : 0/0
  8173 ;;		On exit  : 0/0
  8174 ;;		Unchanged: 0/0
  8175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8176 ;;      Params:         4       0       0       0       0       0       0
  8177 ;;      Locals:         0       0       0       0       0       0       0
  8178 ;;      Temps:          0       0       0       0       0       0       0
  8179 ;;      Totals:         4       0       0       0       0       0       0
  8180 ;;Total ram usage:        4 bytes
  8181 ;; Hardware stack levels used:    1
  8182 ;; Hardware stack levels required when called:    2
  8183 ;; This function calls:
  8184 ;;		_strchr
  8185 ;;		_strlen
  8186 ;;		_strncmp
  8187 ;; This function is called by:
  8188 ;;		_ESP8266_Cmd
  8189 ;;		_ESP8266_ReceiveString
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193                           	psect	text34
  8194  00120C                     __ptext34:
  8195                           	opt stack 0
  8196  00120C                     _strstr:
  8197                           	opt stack 24
  8198                           
  8199                           ;incstack = 0
  8200  00120C  D031               	goto	l3709
  8201  00120E                     l3701:
  8202  00120E  C021  F018         	movff	strstr@s1,strncmp@s1
  8203  001212  C022  F019         	movff	strstr@s1+1,strncmp@s1+1
  8204  001216  C023  F01A         	movff	strstr@s2,strncmp@s2
  8205  00121A  C024  F01B         	movff	strstr@s2+1,strncmp@s2+1
  8206  00121E  C023  F012         	movff	strstr@s2,strlen@s
  8207  001222  C024  F013         	movff	strstr@s2+1,strlen@s+1
  8208  001226  ECCF  F00A         	call	_strlen	;wreg free
  8209  00122A  C012  F01C         	movff	?_strlen,strncmp@len
  8210  00122E  C013  F01D         	movff	?_strlen+1,strncmp@len+1
  8211  001232  EC48  F009         	call	_strncmp	;wreg free
  8212  001236  5018               	movf	?_strncmp,w,c
  8213  001238  1019               	iorwf	?_strncmp+1,w,c
  8214  00123A  A4D8               	btfss	status,2,c
  8215  00123C  D005               	goto	l3707
  8216  00123E  C021  F021         	movff	strstr@s1,?_strstr
  8217  001242  C022  F022         	movff	strstr@s1+1,?_strstr+1
  8218  001246  0012               	return	
  8219  001248                     l3707:
  8220  001248  0E01               	movlw	1
  8221  00124A  2421               	addwf	strstr@s1,w,c
  8222  00124C  6E12               	movwf	strchr@ptr,c
  8223  00124E  0E00               	movlw	0
  8224  001250  2022               	addwfc	strstr@s1+1,w,c
  8225  001252  6E13               	movwf	strchr@ptr+1,c
  8226  001254  C023  FFF6         	movff	strstr@s2,tblptrl
  8227  001258  C024  FFF7         	movff	strstr@s2+1,tblptrh
  8228  00125C                     	if	0	;tblptru may be non-zero
  8229  00125C                     	endif
  8230  00125C                     	if	0	;tblptru may be non-zero
  8231  00125C                     	endif
  8232  00125C  0008               	tblrd		*
  8233  00125E  50F5               	movf	tablat,w,c
  8234  001260  6E14               	movwf	strchr@chr,c
  8235  001262  6A15               	clrf	strchr@chr+1,c
  8236  001264  EC26  F00B         	call	_strchr	;wreg free
  8237  001268  C012  F021         	movff	?_strchr,strstr@s1
  8238  00126C  C013  F022         	movff	?_strchr+1,strstr@s1+1
  8239  001270                     l3709:
  8240  001270  5021               	movf	strstr@s1,w,c
  8241  001272  1022               	iorwf	strstr@s1+1,w,c
  8242  001274  B4D8               	btfsc	status,2,c
  8243  001276  D007               	goto	l3713
  8244  001278  C021  FFD9         	movff	strstr@s1,fsr2l
  8245  00127C  C022  FFDA         	movff	strstr@s1+1,fsr2h
  8246  001280  50DF               	movf	indf2,w,c
  8247  001282  A4D8               	btfss	status,2,c
  8248  001284  D7C4               	goto	l3701
  8249  001286                     l3713:
  8250  001286  0E00               	movlw	0
  8251  001288  6E21               	movwf	?_strstr,c
  8252  00128A  0E00               	movlw	0
  8253  00128C  6E22               	movwf	?_strstr+1,c
  8254  00128E  0012               	return	
  8255  001290                     __end_of_strstr:
  8256                           	opt stack 0
  8257                           tblptru	equ	0xFF8
  8258                           tblptrh	equ	0xFF7
  8259                           tblptrl	equ	0xFF6
  8260                           tablat	equ	0xFF5
  8261                           prodh	equ	0xFF4
  8262                           prodl	equ	0xFF3
  8263                           intcon	equ	0xFF2
  8264                           indf0	equ	0xFEF
  8265                           postinc0	equ	0xFEE
  8266                           fsr0h	equ	0xFEA
  8267                           fsr0l	equ	0xFE9
  8268                           wreg	equ	0xFE8
  8269                           postdec1	equ	0xFE5
  8270                           plusw1	equ	0xFE3
  8271                           fsr1l	equ	0xFE1
  8272                           indf2	equ	0xFDF
  8273                           postinc2	equ	0xFDE
  8274                           postdec2	equ	0xFDD
  8275                           plusw2	equ	0xFDB
  8276                           fsr2h	equ	0xFDA
  8277                           fsr2l	equ	0xFD9
  8278                           status	equ	0xFD8
  8279                           
  8280 ;; *************** function _strncmp *****************
  8281 ;; Defined at:
  8282 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  8285 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8286 ;;  s2              2   25[COMRAM] PTR const unsigned char 
  8287 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8288 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8289 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8290 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8291 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8292 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8293 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8294 ;;		 -> STR_2(3), NULL(0), 
  8295 ;;  len             2   27[COMRAM] unsigned int 
  8296 ;; Auto vars:     Size  Location     Type
  8297 ;;		None
  8298 ;; Return value:  Size  Location     Type
  8299 ;;                  2   23[COMRAM] int 
  8300 ;; Registers used:
  8301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8302 ;; Tracked objects:
  8303 ;;		On entry : 0/0
  8304 ;;		On exit  : 0/0
  8305 ;;		Unchanged: 0/0
  8306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8307 ;;      Params:         6       0       0       0       0       0       0
  8308 ;;      Locals:         0       0       0       0       0       0       0
  8309 ;;      Temps:          3       0       0       0       0       0       0
  8310 ;;      Totals:         9       0       0       0       0       0       0
  8311 ;;Total ram usage:        9 bytes
  8312 ;; Hardware stack levels used:    1
  8313 ;; Hardware stack levels required when called:    1
  8314 ;; This function calls:
  8315 ;;		Nothing
  8316 ;; This function is called by:
  8317 ;;		_strstr
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text35
  8322  001290                     __ptext35:
  8323                           	opt stack 0
  8324  001290                     _strncmp:
  8325                           	opt stack 24
  8326                           
  8327                           ;incstack = 0
  8328  001290  D033               	goto	l3669
  8329  001292                     l3659:
  8330  001292  C018  FFD9         	movff	strncmp@s1,fsr2l
  8331  001296  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  8332  00129A  50DF               	movf	indf2,w,c
  8333  00129C  B4D8               	btfsc	status,2,c
  8334  00129E  D00F               	goto	l3663
  8335  0012A0  C018  FFD9         	movff	strncmp@s1,fsr2l
  8336  0012A4  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  8337  0012A8  50DF               	movf	indf2,w,c
  8338  0012AA  6E1E               	movwf	??_strncmp& (0+255),c
  8339  0012AC  C01A  FFF6         	movff	strncmp@s2,tblptrl
  8340  0012B0  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  8341  0012B4                     	if	0	;tblptru may be non-zero
  8342  0012B4                     	endif
  8343  0012B4                     	if	0	;tblptru may be non-zero
  8344  0012B4                     	endif
  8345  0012B4  0008               	tblrd		*
  8346  0012B6  50F5               	movf	tablat,w,c
  8347  0012B8  181E               	xorwf	??_strncmp,w,c
  8348  0012BA  B4D8               	btfsc	status,2,c
  8349  0012BC  D019               	goto	l3667
  8350  0012BE                     l3663:
  8351  0012BE  C01A  FFF6         	movff	strncmp@s2,tblptrl
  8352  0012C2  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  8353  0012C6                     	if	0	;tblptru may be non-zero
  8354  0012C6                     	endif
  8355  0012C6                     	if	0	;tblptru may be non-zero
  8356  0012C6                     	endif
  8357  0012C6  0008               	tblrd		*
  8358  0012C8  50F5               	movf	tablat,w,c
  8359  0012CA  6E1E               	movwf	??_strncmp& (0+255),c
  8360  0012CC  6A1F               	clrf	(??_strncmp+1)& (0+255),c
  8361  0012CE  1E1E               	comf	??_strncmp,f,c
  8362  0012D0  1E1F               	comf	??_strncmp+1,f,c
  8363  0012D2  4A1E               	infsnz	??_strncmp,f,c
  8364  0012D4  2A1F               	incf	??_strncmp+1,f,c
  8365  0012D6  C018  FFD9         	movff	strncmp@s1,fsr2l
  8366  0012DA  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  8367  0012DE  50DF               	movf	indf2,w,c
  8368  0012E0  6E20               	movwf	(??_strncmp+2)& (0+255),c
  8369  0012E2  5020               	movf	??_strncmp+2,w,c
  8370  0012E4  241E               	addwf	??_strncmp,w,c
  8371  0012E6  6E18               	movwf	?_strncmp,c
  8372  0012E8  0E00               	movlw	0
  8373  0012EA  201F               	addwfc	??_strncmp+1,w,c
  8374  0012EC  6E19               	movwf	?_strncmp+1,c
  8375  0012EE  0012               	return	
  8376  0012F0                     l3667:
  8377  0012F0  4A18               	infsnz	strncmp@s1,f,c
  8378  0012F2  2A19               	incf	strncmp@s1+1,f,c
  8379  0012F4  4A1A               	infsnz	strncmp@s2,f,c
  8380  0012F6  2A1B               	incf	strncmp@s2+1,f,c
  8381  0012F8                     l3669:
  8382  0012F8  061C               	decf	strncmp@len,f,c
  8383  0012FA  A0D8               	btfss	status,0,c
  8384  0012FC  061D               	decf	strncmp@len+1,f,c
  8385  0012FE  281C               	incf	strncmp@len,w,c
  8386  001300  E1C8               	bnz	l3659
  8387  001302  281D               	incf	strncmp@len+1,w,c
  8388  001304  A4D8               	btfss	status,2,c
  8389  001306  D7C5               	goto	l3659
  8390  001308  0E00               	movlw	0
  8391  00130A  6E19               	movwf	?_strncmp+1,c
  8392  00130C  0E00               	movlw	0
  8393  00130E  6E18               	movwf	?_strncmp,c
  8394  001310  0012               	return	
  8395  001312                     __end_of_strncmp:
  8396                           	opt stack 0
  8397                           tblptru	equ	0xFF8
  8398                           tblptrh	equ	0xFF7
  8399                           tblptrl	equ	0xFF6
  8400                           tablat	equ	0xFF5
  8401                           prodh	equ	0xFF4
  8402                           prodl	equ	0xFF3
  8403                           intcon	equ	0xFF2
  8404                           indf0	equ	0xFEF
  8405                           postinc0	equ	0xFEE
  8406                           fsr0h	equ	0xFEA
  8407                           fsr0l	equ	0xFE9
  8408                           wreg	equ	0xFE8
  8409                           postdec1	equ	0xFE5
  8410                           plusw1	equ	0xFE3
  8411                           fsr1l	equ	0xFE1
  8412                           indf2	equ	0xFDF
  8413                           postinc2	equ	0xFDE
  8414                           postdec2	equ	0xFDD
  8415                           plusw2	equ	0xFDB
  8416                           fsr2h	equ	0xFDA
  8417                           fsr2l	equ	0xFD9
  8418                           status	equ	0xFD8
  8419                           
  8420 ;; *************** function _strlen *****************
  8421 ;; Defined at:
  8422 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;  s               2   17[COMRAM] PTR const unsigned char 
  8425 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8426 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8427 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8428 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8429 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8430 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8431 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8432 ;;		 -> STR_2(3), NULL(0), 
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;  cp              2   21[COMRAM] PTR const unsigned char 
  8435 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  8436 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  8437 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  8438 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  8439 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  8440 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  8441 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  8442 ;;		 -> STR_2(3), NULL(0), 
  8443 ;; Return value:  Size  Location     Type
  8444 ;;                  2   17[COMRAM] unsigned int 
  8445 ;; Registers used:
  8446 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  8447 ;; Tracked objects:
  8448 ;;		On entry : 0/0
  8449 ;;		On exit  : 0/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8452 ;;      Params:         2       0       0       0       0       0       0
  8453 ;;      Locals:         2       0       0       0       0       0       0
  8454 ;;      Temps:          2       0       0       0       0       0       0
  8455 ;;      Totals:         6       0       0       0       0       0       0
  8456 ;;Total ram usage:        6 bytes
  8457 ;; Hardware stack levels used:    1
  8458 ;; Hardware stack levels required when called:    1
  8459 ;; This function calls:
  8460 ;;		Nothing
  8461 ;; This function is called by:
  8462 ;;		_strstr
  8463 ;; This function uses a non-reentrant model
  8464 ;;
  8465                           
  8466                           	psect	text36
  8467  00159E                     __ptext36:
  8468                           	opt stack 0
  8469  00159E                     _strlen:
  8470                           	opt stack 24
  8471                           
  8472                           ;incstack = 0
  8473  00159E  C012  F016         	movff	strlen@s,strlen@cp
  8474  0015A2  C013  F017         	movff	strlen@s+1,strlen@cp+1
  8475  0015A6  D002               	goto	l3651
  8476  0015A8                     l3649:
  8477  0015A8  4A16               	infsnz	strlen@cp,f,c
  8478  0015AA  2A17               	incf	strlen@cp+1,f,c
  8479  0015AC                     l3651:
  8480  0015AC  C016  FFF6         	movff	strlen@cp,tblptrl
  8481  0015B0  C017  FFF7         	movff	strlen@cp+1,tblptrh
  8482  0015B4                     	if	0	;tblptru may be non-zero
  8483  0015B4                     	endif
  8484  0015B4                     	if	0	;tblptru may be non-zero
  8485  0015B4                     	endif
  8486  0015B4  0008               	tblrd		*
  8487  0015B6  50F5               	movf	tablat,w,c
  8488  0015B8  0900               	iorlw	0
  8489  0015BA  A4D8               	btfss	status,2,c
  8490  0015BC  D7F5               	goto	l3649
  8491  0015BE  C012  F014         	movff	strlen@s,??_strlen
  8492  0015C2  C013  F015         	movff	strlen@s+1,??_strlen+1
  8493  0015C6  1E14               	comf	??_strlen,f,c
  8494  0015C8  1E15               	comf	??_strlen+1,f,c
  8495  0015CA  4A14               	infsnz	??_strlen,f,c
  8496  0015CC  2A15               	incf	??_strlen+1,f,c
  8497  0015CE  5016               	movf	strlen@cp,w,c
  8498  0015D0  2414               	addwf	??_strlen,w,c
  8499  0015D2  6E12               	movwf	?_strlen,c
  8500  0015D4  5017               	movf	strlen@cp+1,w,c
  8501  0015D6  2015               	addwfc	??_strlen+1,w,c
  8502  0015D8  6E13               	movwf	?_strlen+1,c
  8503  0015DA  0012               	return	
  8504  0015DC                     __end_of_strlen:
  8505                           	opt stack 0
  8506                           tblptru	equ	0xFF8
  8507                           tblptrh	equ	0xFF7
  8508                           tblptrl	equ	0xFF6
  8509                           tablat	equ	0xFF5
  8510                           prodh	equ	0xFF4
  8511                           prodl	equ	0xFF3
  8512                           intcon	equ	0xFF2
  8513                           indf0	equ	0xFEF
  8514                           postinc0	equ	0xFEE
  8515                           fsr0h	equ	0xFEA
  8516                           fsr0l	equ	0xFE9
  8517                           wreg	equ	0xFE8
  8518                           postdec1	equ	0xFE5
  8519                           plusw1	equ	0xFE3
  8520                           fsr1l	equ	0xFE1
  8521                           indf2	equ	0xFDF
  8522                           postinc2	equ	0xFDE
  8523                           postdec2	equ	0xFDD
  8524                           plusw2	equ	0xFDB
  8525                           fsr2h	equ	0xFDA
  8526                           fsr2l	equ	0xFD9
  8527                           status	equ	0xFD8
  8528                           
  8529 ;; *************** function _strchr *****************
  8530 ;; Defined at:
  8531 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strchr.c"
  8532 ;; Parameters:    Size  Location     Type
  8533 ;;  ptr             2   17[COMRAM] PTR const unsigned char 
  8534 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8535 ;;  chr             2   19[COMRAM] int 
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;		None
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  2   17[COMRAM] PTR unsigned char 
  8540 ;; Registers used:
  8541 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8547 ;;      Params:         4       0       0       0       0       0       0
  8548 ;;      Locals:         0       0       0       0       0       0       0
  8549 ;;      Temps:          1       0       0       0       0       0       0
  8550 ;;      Totals:         5       0       0       0       0       0       0
  8551 ;;Total ram usage:        5 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    1
  8554 ;; This function calls:
  8555 ;;		Nothing
  8556 ;; This function is called by:
  8557 ;;		_strstr
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           	psect	text37
  8562  00164C                     __ptext37:
  8563                           	opt stack 0
  8564  00164C                     _strchr:
  8565                           	opt stack 24
  8566  00164C  C012  FFD9         	movff	strchr@ptr,fsr2l
  8567  001650  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  8568  001654  5014               	movf	strchr@chr,w,c
  8569  001656  18DE               	xorwf	postinc2,w,c
  8570  001658  A4D8               	btfss	status,2,c
  8571  00165A  D005               	goto	l3681
  8572  00165C  C012  F012         	movff	strchr@ptr,?_strchr
  8573  001660  C013  F013         	movff	strchr@ptr+1,?_strchr+1
  8574  001664  0012               	return	
  8575  001666                     l3681:
  8576  001666  C012  FFD9         	movff	strchr@ptr,fsr2l
  8577  00166A  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  8578  00166E  4A12               	infsnz	strchr@ptr,f,c
  8579  001670  2A13               	incf	strchr@ptr+1,f,c
  8580  001672  50DF               	movf	indf2,w,c
  8581  001674  A4D8               	btfss	status,2,c
  8582  001676  D7EA               	goto	l3675
  8583  001678  0E00               	movlw	0
  8584  00167A  6E12               	movwf	?_strchr,c
  8585  00167C  0E00               	movlw	0
  8586  00167E  6E13               	movwf	?_strchr+1,c
  8587  001680  0012               	return	
  8588  001682                     __end_of_strchr:
  8589                           	opt stack 0
  8590                           tblptru	equ	0xFF8
  8591                           tblptrh	equ	0xFF7
  8592                           tblptrl	equ	0xFF6
  8593                           tablat	equ	0xFF5
  8594                           prodh	equ	0xFF4
  8595                           prodl	equ	0xFF3
  8596                           intcon	equ	0xFF2
  8597                           indf0	equ	0xFEF
  8598                           postinc0	equ	0xFEE
  8599                           fsr0h	equ	0xFEA
  8600                           fsr0l	equ	0xFE9
  8601                           wreg	equ	0xFE8
  8602                           postdec1	equ	0xFE5
  8603                           plusw1	equ	0xFE3
  8604                           fsr1l	equ	0xFE1
  8605                           indf2	equ	0xFDF
  8606                           postinc2	equ	0xFDE
  8607                           postdec2	equ	0xFDD
  8608                           plusw2	equ	0xFDB
  8609                           fsr2h	equ	0xFDA
  8610                           fsr2l	equ	0xFD9
  8611                           status	equ	0xFD8
  8612                           
  8613 ;; *************** function _ADtoPWM *****************
  8614 ;; Defined at:
  8615 ;;		line 16 in file "harwave/flex.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;  AD              2   35[COMRAM] PTR unsigned char 
  8618 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(50), NULL(0), strEsp8266_Fram_Record(52), 
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  w1              2   55[COMRAM] unsigned int 
  8621 ;;  u1              2   53[COMRAM] unsigned int 
  8622 ;;  w4              2   51[COMRAM] unsigned int 
  8623 ;;  w3              2   49[COMRAM] unsigned int 
  8624 ;;  w2              2   47[COMRAM] unsigned int 
  8625 ;;  u4              2   45[COMRAM] unsigned int 
  8626 ;;  u3              2   43[COMRAM] unsigned int 
  8627 ;;  u2              2   41[COMRAM] unsigned int 
  8628 ;;  w0              2    0        unsigned int 
  8629 ;;  u0              2    0        unsigned int 
  8630 ;; Return value:  Size  Location     Type
  8631 ;;                  1    wreg      void 
  8632 ;; Registers used:
  8633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8639 ;;      Params:         2       0       0       0       0       0       0
  8640 ;;      Locals:        16       0       0       0       0       0       0
  8641 ;;      Temps:          4       0       0       0       0       0       0
  8642 ;;      Totals:        22       0       0       0       0       0       0
  8643 ;;Total ram usage:       22 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; Hardware stack levels required when called:    8
  8646 ;; This function calls:
  8647 ;;		_PWMt0PCA
  8648 ;; This function is called by:
  8649 ;;		_main
  8650 ;; This function uses a non-reentrant model
  8651 ;;
  8652                           
  8653                           	psect	text38
  8654  000B48                     __ptext38:
  8655                           	opt stack 0
  8656  000B48                     _ADtoPWM:
  8657                           	opt stack 22
  8658                           
  8659                           ;flex.c: 17: u16 u0,u1,u2,u3,u4,w0,w1,w2,w3,w4;
  8660                           ;flex.c: 19: if(*(AD+3)>=160)
  8661                           
  8662                           ;incstack = 0
  8663  000B48  EE20 F003          	lfsr	2,3
  8664  000B4C  5024               	movf	ADtoPWM@AD,w,c
  8665  000B4E  26D9               	addwf	fsr2l,f,c
  8666  000B50  5025               	movf	ADtoPWM@AD+1,w,c
  8667  000B52  22DA               	addwfc	fsr2h,f,c
  8668  000B54  0E9F               	movlw	159
  8669  000B56  64DF               	cpfsgt	indf2,c
  8670  000B58  D020               	goto	l4301
  8671                           
  8672                           ;flex.c: 20: w1=finger_under_1[*(AD+3)-160];
  8673  000B5A  0EC0               	movlw	192
  8674  000B5C  6E26               	movwf	??_ADtoPWM& (0+255),c
  8675  000B5E  0EFE               	movlw	254
  8676  000B60  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  8677  000B62  EE20 F003          	lfsr	2,3
  8678  000B66  5024               	movf	ADtoPWM@AD,w,c
  8679  000B68  26D9               	addwf	fsr2l,f,c
  8680  000B6A  5025               	movf	ADtoPWM@AD+1,w,c
  8681  000B6C  22DA               	addwfc	fsr2h,f,c
  8682  000B6E  50DF               	movf	indf2,w,c
  8683  000B70  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  8684  000B72  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  8685  000B74  90D8               	bcf	status,0,c
  8686  000B76  3628               	rlcf	??_ADtoPWM+2,f,c
  8687  000B78  3629               	rlcf	??_ADtoPWM+3,f,c
  8688  000B7A  5026               	movf	??_ADtoPWM,w,c
  8689  000B7C  2628               	addwf	??_ADtoPWM+2,f,c
  8690  000B7E  5027               	movf	??_ADtoPWM+1,w,c
  8691  000B80  2229               	addwfc	??_ADtoPWM+3,f,c
  8692  000B82  0EA5               	movlw	low _finger_under_1
  8693  000B84  2428               	addwf	??_ADtoPWM+2,w,c
  8694  000B86  6EF6               	movwf	tblptrl,c
  8695  000B88  0E7C               	movlw	high _finger_under_1
  8696  000B8A  2029               	addwfc	??_ADtoPWM+3,w,c
  8697  000B8C  6EF7               	movwf	tblptrh,c
  8698  000B8E                     	if	0	;There are less than 3 active tblptr bytes
  8699  000B8E                     	endif
  8700  000B8E  0009               	tblrd		*+
  8701  000B90  CFF5 F038          	movff	tablat,ADtoPWM@w1
  8702  000B94  000A               	tblrd		*-
  8703  000B96  CFF5 F039          	movff	tablat,ADtoPWM@w1+1
  8704  000B9A                     l4301:
  8705                           
  8706                           ;flex.c: 28: if(*(AD+2)>=138)
  8707  000B9A  EE20 F002          	lfsr	2,2
  8708  000B9E  5024               	movf	ADtoPWM@AD,w,c
  8709  000BA0  26D9               	addwf	fsr2l,f,c
  8710  000BA2  5025               	movf	ADtoPWM@AD+1,w,c
  8711  000BA4  22DA               	addwfc	fsr2h,f,c
  8712  000BA6  0E89               	movlw	137
  8713  000BA8  64DF               	cpfsgt	indf2,c
  8714  000BAA  D020               	goto	l4305
  8715                           
  8716                           ;flex.c: 29: u1=finger_up_1[*(AD+2)-138];
  8717  000BAC  0EEC               	movlw	236
  8718  000BAE  6E26               	movwf	??_ADtoPWM& (0+255),c
  8719  000BB0  0EFE               	movlw	254
  8720  000BB2  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  8721  000BB4  EE20 F002          	lfsr	2,2
  8722  000BB8  5024               	movf	ADtoPWM@AD,w,c
  8723  000BBA  26D9               	addwf	fsr2l,f,c
  8724  000BBC  5025               	movf	ADtoPWM@AD+1,w,c
  8725  000BBE  22DA               	addwfc	fsr2h,f,c
  8726  000BC0  50DF               	movf	indf2,w,c
  8727  000BC2  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  8728  000BC4  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  8729  000BC6  90D8               	bcf	status,0,c
  8730  000BC8  3628               	rlcf	??_ADtoPWM+2,f,c
  8731  000BCA  3629               	rlcf	??_ADtoPWM+3,f,c
  8732  000BCC  5026               	movf	??_ADtoPWM,w,c
  8733  000BCE  2628               	addwf	??_ADtoPWM+2,f,c
  8734  000BD0  5027               	movf	??_ADtoPWM+1,w,c
  8735  000BD2  2229               	addwfc	??_ADtoPWM+3,f,c
  8736  000BD4  0EFF               	movlw	low _finger_up_1
  8737  000BD6  2428               	addwf	??_ADtoPWM+2,w,c
  8738  000BD8  6EF6               	movwf	tblptrl,c
  8739  000BDA  0E79               	movlw	high _finger_up_1
  8740  000BDC  2029               	addwfc	??_ADtoPWM+3,w,c
  8741  000BDE  6EF7               	movwf	tblptrh,c
  8742  000BE0                     	if	0	;There are less than 3 active tblptr bytes
  8743  000BE0                     	endif
  8744  000BE0  0009               	tblrd		*+
  8745  000BE2  CFF5 F036          	movff	tablat,ADtoPWM@u1
  8746  000BE6  000A               	tblrd		*-
  8747  000BE8  CFF5 F037          	movff	tablat,ADtoPWM@u1+1
  8748  000BEC                     l4305:
  8749                           
  8750                           ;flex.c: 37: PWMt0PCA(u1,w1,index);
  8751  000BEC  C036  F01F         	movff	ADtoPWM@u1,PWMt0PCA@up
  8752  000BF0  C037  F020         	movff	ADtoPWM@u1+1,PWMt0PCA@up+1
  8753  000BF4  C038  F021         	movff	ADtoPWM@w1,PWMt0PCA@low
  8754  000BF8  C039  F022         	movff	ADtoPWM@w1+1,PWMt0PCA@low+1
  8755  000BFC  0E01               	movlw	1
  8756  000BFE  6E23               	movwf	PWMt0PCA@finger,c
  8757  000C00  EC12  F005         	call	_PWMt0PCA	;wreg free
  8758                           
  8759                           ;flex.c: 39: PWMt0PCA(u2,w2,middle);
  8760  000C04  C02A  F01F         	movff	ADtoPWM@u2,PWMt0PCA@up
  8761  000C08  C02B  F020         	movff	ADtoPWM@u2+1,PWMt0PCA@up+1
  8762  000C0C  C030  F021         	movff	ADtoPWM@w2,PWMt0PCA@low
  8763  000C10  C031  F022         	movff	ADtoPWM@w2+1,PWMt0PCA@low+1
  8764  000C14  0E02               	movlw	2
  8765  000C16  6E23               	movwf	PWMt0PCA@finger,c
  8766  000C18  EC12  F005         	call	_PWMt0PCA	;wreg free
  8767                           
  8768                           ;flex.c: 41: PWMt0PCA(u3,w3,ring);
  8769  000C1C  C02C  F01F         	movff	ADtoPWM@u3,PWMt0PCA@up
  8770  000C20  C02D  F020         	movff	ADtoPWM@u3+1,PWMt0PCA@up+1
  8771  000C24  C032  F021         	movff	ADtoPWM@w3,PWMt0PCA@low
  8772  000C28  C033  F022         	movff	ADtoPWM@w3+1,PWMt0PCA@low+1
  8773  000C2C  0E03               	movlw	3
  8774  000C2E  6E23               	movwf	PWMt0PCA@finger,c
  8775  000C30  EC12  F005         	call	_PWMt0PCA	;wreg free
  8776                           
  8777                           ;flex.c: 43: PWMt0PCA(u4,w4,pink);
  8778  000C34  C02E  F01F         	movff	ADtoPWM@u4,PWMt0PCA@up
  8779  000C38  C02F  F020         	movff	ADtoPWM@u4+1,PWMt0PCA@up+1
  8780  000C3C  C034  F021         	movff	ADtoPWM@w4,PWMt0PCA@low
  8781  000C40  C035  F022         	movff	ADtoPWM@w4+1,PWMt0PCA@low+1
  8782  000C44  0E04               	movlw	4
  8783  000C46  6E23               	movwf	PWMt0PCA@finger,c
  8784  000C48  EC12  F005         	call	_PWMt0PCA	;wreg free
  8785  000C4C  0012               	return		;funcret
  8786  000C4E                     __end_of_ADtoPWM:
  8787                           	opt stack 0
  8788                           tblptru	equ	0xFF8
  8789                           tblptrh	equ	0xFF7
  8790                           tblptrl	equ	0xFF6
  8791                           tablat	equ	0xFF5
  8792                           prodh	equ	0xFF4
  8793                           prodl	equ	0xFF3
  8794                           intcon	equ	0xFF2
  8795                           indf0	equ	0xFEF
  8796                           postinc0	equ	0xFEE
  8797                           fsr0h	equ	0xFEA
  8798                           fsr0l	equ	0xFE9
  8799                           wreg	equ	0xFE8
  8800                           postdec1	equ	0xFE5
  8801                           plusw1	equ	0xFE3
  8802                           fsr1l	equ	0xFE1
  8803                           indf2	equ	0xFDF
  8804                           postinc2	equ	0xFDE
  8805                           postdec2	equ	0xFDD
  8806                           plusw2	equ	0xFDB
  8807                           fsr2h	equ	0xFDA
  8808                           fsr2l	equ	0xFD9
  8809                           status	equ	0xFD8
  8810                           
  8811 ;; *************** function _PWMt0PCA *****************
  8812 ;; Defined at:
  8813 ;;		line 47 in file "harwave/flex.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;  up              2   30[COMRAM] unsigned int 
  8816 ;;  low             2   32[COMRAM] unsigned int 
  8817 ;;  finger          1   34[COMRAM] enum E3769
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;		None
  8820 ;; Return value:  Size  Location     Type
  8821 ;;                  1    wreg      void 
  8822 ;; Registers used:
  8823 ;;		wreg, status,2, status,0, cstack
  8824 ;; Tracked objects:
  8825 ;;		On entry : 0/0
  8826 ;;		On exit  : 0/0
  8827 ;;		Unchanged: 0/0
  8828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8829 ;;      Params:         5       0       0       0       0       0       0
  8830 ;;      Locals:         0       0       0       0       0       0       0
  8831 ;;      Temps:          0       0       0       0       0       0       0
  8832 ;;      Totals:         5       0       0       0       0       0       0
  8833 ;;Total ram usage:        5 bytes
  8834 ;; Hardware stack levels used:    1
  8835 ;; Hardware stack levels required when called:    7
  8836 ;; This function calls:
  8837 ;;		_transmit_finger
  8838 ;; This function is called by:
  8839 ;;		_ADtoPWM
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           	psect	text39
  8844  000A24                     __ptext39:
  8845                           	opt stack 0
  8846  000A24                     _PWMt0PCA:
  8847                           	opt stack 22
  8848                           
  8849                           ;flex.c: 48: switch (finger){
  8850                           
  8851                           ;incstack = 0
  8852  000A24  D080               	goto	l4245
  8853  000A26                     l4213:
  8854                           
  8855                           ;flex.c: 50: if( up > 0 )
  8856  000A26  501F               	movf	PWMt0PCA@up,w,c
  8857  000A28  1020               	iorwf	PWMt0PCA@up+1,w,c
  8858  000A2A  B4D8               	btfsc	status,2,c
  8859  000A2C  D009               	goto	l4217
  8860                           
  8861                           ;flex.c: 51: transmit_finger(up ,0x06 );
  8862  000A2E  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8863  000A32  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8864  000A36  0E06               	movlw	6
  8865  000A38  6E1C               	movwf	transmit_finger@finger,c
  8866  000A3A  EC41  F00B         	call	_transmit_finger	;wreg free
  8867  000A3E  0012               	return	
  8868  000A40                     l4217:
  8869                           
  8870                           ;flex.c: 52: else
  8871                           ;flex.c: 53: transmit_finger( up+low , 0x06 );
  8872  000A40  5021               	movf	PWMt0PCA@low,w,c
  8873  000A42  241F               	addwf	PWMt0PCA@up,w,c
  8874  000A44  6E1A               	movwf	transmit_finger@HL_Value,c
  8875  000A46  5022               	movf	PWMt0PCA@low+1,w,c
  8876  000A48  2020               	addwfc	PWMt0PCA@up+1,w,c
  8877  000A4A  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8878  000A4C  0E06               	movlw	6
  8879  000A4E  6E1C               	movwf	transmit_finger@finger,c
  8880  000A50  EC41  F00B         	call	_transmit_finger	;wreg free
  8881                           
  8882                           ;flex.c: 54: break;
  8883  000A54  0012               	return	
  8884  000A56                     l4219:
  8885                           
  8886                           ;flex.c: 56: if( up <= 1703 )
  8887  000A56  0EA8               	movlw	168
  8888  000A58  5C1F               	subwf	PWMt0PCA@up,w,c
  8889  000A5A  0E06               	movlw	6
  8890  000A5C  5820               	subwfb	PWMt0PCA@up+1,w,c
  8891  000A5E  B0D8               	btfsc	status,0,c
  8892  000A60  D009               	goto	l4223
  8893                           
  8894                           ;flex.c: 57: transmit_finger(up ,0x0A );
  8895  000A62  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8896  000A66  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8897  000A6A  0E0A               	movlw	10
  8898  000A6C  6E1C               	movwf	transmit_finger@finger,c
  8899  000A6E  EC41  F00B         	call	_transmit_finger	;wreg free
  8900  000A72  0012               	return	
  8901  000A74                     l4223:
  8902                           
  8903                           ;flex.c: 58: else
  8904                           ;flex.c: 59: transmit_finger( up+low , 0x0A );
  8905  000A74  5021               	movf	PWMt0PCA@low,w,c
  8906  000A76  241F               	addwf	PWMt0PCA@up,w,c
  8907  000A78  6E1A               	movwf	transmit_finger@HL_Value,c
  8908  000A7A  5022               	movf	PWMt0PCA@low+1,w,c
  8909  000A7C  2020               	addwfc	PWMt0PCA@up+1,w,c
  8910  000A7E  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8911  000A80  0E0A               	movlw	10
  8912  000A82  6E1C               	movwf	transmit_finger@finger,c
  8913  000A84  EC41  F00B         	call	_transmit_finger	;wreg free
  8914                           
  8915                           ;flex.c: 60: break;
  8916  000A88  0012               	return	
  8917  000A8A                     l4225:
  8918                           
  8919                           ;flex.c: 62: if( up <= 2055 )
  8920  000A8A  0E08               	movlw	8
  8921  000A8C  5C1F               	subwf	PWMt0PCA@up,w,c
  8922  000A8E  0E08               	movlw	8
  8923  000A90  5820               	subwfb	PWMt0PCA@up+1,w,c
  8924  000A92  B0D8               	btfsc	status,0,c
  8925  000A94  D009               	goto	l4229
  8926                           
  8927                           ;flex.c: 63: transmit_finger(up ,0x0E );
  8928  000A96  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8929  000A9A  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8930  000A9E  0E0E               	movlw	14
  8931  000AA0  6E1C               	movwf	transmit_finger@finger,c
  8932  000AA2  EC41  F00B         	call	_transmit_finger	;wreg free
  8933  000AA6  0012               	return	
  8934  000AA8                     l4229:
  8935                           
  8936                           ;flex.c: 64: else
  8937                           ;flex.c: 65: transmit_finger( up+low , 0x0E );
  8938  000AA8  5021               	movf	PWMt0PCA@low,w,c
  8939  000AAA  241F               	addwf	PWMt0PCA@up,w,c
  8940  000AAC  6E1A               	movwf	transmit_finger@HL_Value,c
  8941  000AAE  5022               	movf	PWMt0PCA@low+1,w,c
  8942  000AB0  2020               	addwfc	PWMt0PCA@up+1,w,c
  8943  000AB2  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8944  000AB4  0E0E               	movlw	14
  8945  000AB6  6E1C               	movwf	transmit_finger@finger,c
  8946  000AB8  EC41  F00B         	call	_transmit_finger	;wreg free
  8947                           
  8948                           ;flex.c: 66: break;
  8949  000ABC  0012               	return	
  8950  000ABE                     l4231:
  8951                           
  8952                           ;flex.c: 68: if( up <= 1722 )
  8953  000ABE  0EBB               	movlw	187
  8954  000AC0  5C1F               	subwf	PWMt0PCA@up,w,c
  8955  000AC2  0E06               	movlw	6
  8956  000AC4  5820               	subwfb	PWMt0PCA@up+1,w,c
  8957  000AC6  B0D8               	btfsc	status,0,c
  8958  000AC8  D009               	goto	l4235
  8959                           
  8960                           ;flex.c: 69: transmit_finger(up ,0x12 );
  8961  000ACA  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8962  000ACE  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8963  000AD2  0E12               	movlw	18
  8964  000AD4  6E1C               	movwf	transmit_finger@finger,c
  8965  000AD6  EC41  F00B         	call	_transmit_finger	;wreg free
  8966  000ADA  0012               	return	
  8967  000ADC                     l4235:
  8968                           
  8969                           ;flex.c: 70: else
  8970                           ;flex.c: 71: transmit_finger( up+low , 0x12 );
  8971  000ADC  5021               	movf	PWMt0PCA@low,w,c
  8972  000ADE  241F               	addwf	PWMt0PCA@up,w,c
  8973  000AE0  6E1A               	movwf	transmit_finger@HL_Value,c
  8974  000AE2  5022               	movf	PWMt0PCA@low+1,w,c
  8975  000AE4  2020               	addwfc	PWMt0PCA@up+1,w,c
  8976  000AE6  6E1B               	movwf	transmit_finger@HL_Value+1,c
  8977  000AE8  0E12               	movlw	18
  8978  000AEA  6E1C               	movwf	transmit_finger@finger,c
  8979  000AEC  EC41  F00B         	call	_transmit_finger	;wreg free
  8980                           
  8981                           ;flex.c: 72: break;
  8982  000AF0  0012               	return	
  8983  000AF2                     l4237:
  8984                           
  8985                           ;flex.c: 74: if( up <= 1609 )
  8986  000AF2  0E4A               	movlw	74
  8987  000AF4  5C1F               	subwf	PWMt0PCA@up,w,c
  8988  000AF6  0E06               	movlw	6
  8989  000AF8  5820               	subwfb	PWMt0PCA@up+1,w,c
  8990  000AFA  B0D8               	btfsc	status,0,c
  8991  000AFC  D009               	goto	l4241
  8992                           
  8993                           ;flex.c: 75: transmit_finger(up ,0x16 );
  8994  000AFE  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  8995  000B02  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  8996  000B06  0E16               	movlw	22
  8997  000B08  6E1C               	movwf	transmit_finger@finger,c
  8998  000B0A  EC41  F00B         	call	_transmit_finger	;wreg free
  8999  000B0E  0012               	return	
  9000  000B10                     l4241:
  9001                           
  9002                           ;flex.c: 76: else
  9003                           ;flex.c: 77: transmit_finger( up+low , 0x16 );
  9004  000B10  5021               	movf	PWMt0PCA@low,w,c
  9005  000B12  241F               	addwf	PWMt0PCA@up,w,c
  9006  000B14  6E1A               	movwf	transmit_finger@HL_Value,c
  9007  000B16  5022               	movf	PWMt0PCA@low+1,w,c
  9008  000B18  2020               	addwfc	PWMt0PCA@up+1,w,c
  9009  000B1A  6E1B               	movwf	transmit_finger@HL_Value+1,c
  9010  000B1C  0E16               	movlw	22
  9011  000B1E  6E1C               	movwf	transmit_finger@finger,c
  9012  000B20  EC41  F00B         	call	_transmit_finger	;wreg free
  9013                           
  9014                           ;flex.c: 79: }
  9015                           
  9016                           ;flex.c: 78: break;
  9017  000B24  0012               	return	
  9018  000B26                     l4245:
  9019  000B26  5023               	movf	PWMt0PCA@finger,w,c
  9020                           
  9021                           ; Switch size 1, requested type "space"
  9022                           ; Number of cases is 5, Range of values is 0 to 4
  9023                           ; switch strategies available:
  9024                           ; Name         Instructions Cycles
  9025                           ; simple_byte           16     9 (average)
  9026                           ;	Chosen strategy is simple_byte
  9027  000B28  0A00               	xorlw	0	; case 0
  9028  000B2A  B4D8               	btfsc	status,2,c
  9029  000B2C  D77C               	goto	l4213
  9030  000B2E  0A01               	xorlw	1	; case 1
  9031  000B30  B4D8               	btfsc	status,2,c
  9032  000B32  D791               	goto	l4219
  9033  000B34  0A03               	xorlw	3	; case 2
  9034  000B36  B4D8               	btfsc	status,2,c
  9035  000B38  D7A8               	goto	l4225
  9036  000B3A  0A01               	xorlw	1	; case 3
  9037  000B3C  B4D8               	btfsc	status,2,c
  9038  000B3E  D7BF               	goto	l4231
  9039  000B40  0A07               	xorlw	7	; case 4
  9040  000B42  A4D8               	btfss	status,2,c
  9041  000B44  0012               	return	
  9042  000B46  D7D5               	goto	l4237
  9043  000B48                     __end_of_PWMt0PCA:
  9044                           	opt stack 0
  9045                           tblptru	equ	0xFF8
  9046                           tblptrh	equ	0xFF7
  9047                           tblptrl	equ	0xFF6
  9048                           tablat	equ	0xFF5
  9049                           prodh	equ	0xFF4
  9050                           prodl	equ	0xFF3
  9051                           intcon	equ	0xFF2
  9052                           indf0	equ	0xFEF
  9053                           postinc0	equ	0xFEE
  9054                           fsr0h	equ	0xFEA
  9055                           fsr0l	equ	0xFE9
  9056                           wreg	equ	0xFE8
  9057                           postdec1	equ	0xFE5
  9058                           plusw1	equ	0xFE3
  9059                           fsr1l	equ	0xFE1
  9060                           indf2	equ	0xFDF
  9061                           postinc2	equ	0xFDE
  9062                           postdec2	equ	0xFDD
  9063                           plusw2	equ	0xFDB
  9064                           fsr2h	equ	0xFDA
  9065                           fsr2l	equ	0xFD9
  9066                           status	equ	0xFD8
  9067                           
  9068 ;; *************** function _transmit_finger *****************
  9069 ;; Defined at:
  9070 ;;		line 7 in file "harwave/flex.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;  HL_Value        2   25[COMRAM] unsigned int 
  9073 ;;  finger          1   27[COMRAM] unsigned char 
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;  Lbyte           1   29[COMRAM] unsigned char 
  9076 ;;  Hbyte           1   28[COMRAM] unsigned char 
  9077 ;; Return value:  Size  Location     Type
  9078 ;;                  1    wreg      void 
  9079 ;; Registers used:
  9080 ;;		wreg, status,2, status,0, cstack
  9081 ;; Tracked objects:
  9082 ;;		On entry : 0/0
  9083 ;;		On exit  : 0/0
  9084 ;;		Unchanged: 0/0
  9085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9086 ;;      Params:         3       0       0       0       0       0       0
  9087 ;;      Locals:         2       0       0       0       0       0       0
  9088 ;;      Temps:          0       0       0       0       0       0       0
  9089 ;;      Totals:         5       0       0       0       0       0       0
  9090 ;;Total ram usage:        5 bytes
  9091 ;; Hardware stack levels used:    1
  9092 ;; Hardware stack levels required when called:    6
  9093 ;; This function calls:
  9094 ;;		_PCA9685_writeOneByte
  9095 ;; This function is called by:
  9096 ;;		_PWMt0PCA
  9097 ;; This function uses a non-reentrant model
  9098 ;;
  9099                           
  9100                           	psect	text40
  9101  001682                     __ptext40:
  9102                           	opt stack 0
  9103  001682                     _transmit_finger:
  9104                           	opt stack 22
  9105                           
  9106                           ;flex.c: 8: u8 Hbyte , Lbyte ;
  9107                           ;flex.c: 9: Lbyte = HL_Value ;
  9108                           
  9109                           ;incstack = 0
  9110  001682  C01A  F01E         	movff	transmit_finger@HL_Value,transmit_finger@Lbyte
  9111                           
  9112                           ;flex.c: 10: Hbyte = HL_Value >> 8 ;
  9113  001686  501B               	movf	transmit_finger@HL_Value+1,w,c
  9114  001688  6E1D               	movwf	transmit_finger@Hbyte,c
  9115                           
  9116                           ;flex.c: 11: PCA9685_writeOneByte(finger,0x00);
  9117  00168A  0E00               	movlw	0
  9118  00168C  6E18               	movwf	PCA9685_writeOneByte@data,c
  9119  00168E  501C               	movf	transmit_finger@finger,w,c
  9120  001690  EC5C  F00B         	call	_PCA9685_writeOneByte
  9121                           
  9122                           ;flex.c: 12: PCA9685_writeOneByte(finger+1,0x00);
  9123  001694  0E00               	movlw	0
  9124  001696  6E18               	movwf	PCA9685_writeOneByte@data,c
  9125  001698  281C               	incf	transmit_finger@finger,w,c
  9126  00169A  EC5C  F00B         	call	_PCA9685_writeOneByte
  9127                           
  9128                           ;flex.c: 13: PCA9685_writeOneByte(finger+2,Lbyte);
  9129  00169E  C01E  F018         	movff	transmit_finger@Lbyte,PCA9685_writeOneByte@data
  9130  0016A2  501C               	movf	transmit_finger@finger,w,c
  9131  0016A4  0F02               	addlw	2
  9132  0016A6  EC5C  F00B         	call	_PCA9685_writeOneByte
  9133                           
  9134                           ;flex.c: 14: PCA9685_writeOneByte(finger+3,Hbyte);
  9135  0016AA  C01D  F018         	movff	transmit_finger@Hbyte,PCA9685_writeOneByte@data
  9136  0016AE  501C               	movf	transmit_finger@finger,w,c
  9137  0016B0  0F03               	addlw	3
  9138  0016B2  EC5C  F00B         	call	_PCA9685_writeOneByte
  9139  0016B6  0012               	return		;funcret
  9140  0016B8                     __end_of_transmit_finger:
  9141                           	opt stack 0
  9142                           tblptru	equ	0xFF8
  9143                           tblptrh	equ	0xFF7
  9144                           tblptrl	equ	0xFF6
  9145                           tablat	equ	0xFF5
  9146                           prodh	equ	0xFF4
  9147                           prodl	equ	0xFF3
  9148                           intcon	equ	0xFF2
  9149                           indf0	equ	0xFEF
  9150                           postinc0	equ	0xFEE
  9151                           fsr0h	equ	0xFEA
  9152                           fsr0l	equ	0xFE9
  9153                           wreg	equ	0xFE8
  9154                           postdec1	equ	0xFE5
  9155                           plusw1	equ	0xFE3
  9156                           fsr1l	equ	0xFE1
  9157                           indf2	equ	0xFDF
  9158                           postinc2	equ	0xFDE
  9159                           postdec2	equ	0xFDD
  9160                           plusw2	equ	0xFDB
  9161                           fsr2h	equ	0xFDA
  9162                           fsr2l	equ	0xFD9
  9163                           status	equ	0xFD8
  9164                           
  9165 ;; *************** function _PCA9685_writeOneByte *****************
  9166 ;; Defined at:
  9167 ;;		line 6 in file "harwave/PCA9685.c"
  9168 ;; Parameters:    Size  Location     Type
  9169 ;;  addr            1    wreg     unsigned char 
  9170 ;;  data            1   23[COMRAM] unsigned char 
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;  addr            1   24[COMRAM] unsigned char 
  9173 ;; Return value:  Size  Location     Type
  9174 ;;                  1    wreg      void 
  9175 ;; Registers used:
  9176 ;;		wreg, status,2, status,0, cstack
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9182 ;;      Params:         1       0       0       0       0       0       0
  9183 ;;      Locals:         1       0       0       0       0       0       0
  9184 ;;      Temps:          0       0       0       0       0       0       0
  9185 ;;      Totals:         2       0       0       0       0       0       0
  9186 ;;Total ram usage:        2 bytes
  9187 ;; Hardware stack levels used:    1
  9188 ;; Hardware stack levels required when called:    5
  9189 ;; This function calls:
  9190 ;;		_IIC_Send_Byte
  9191 ;;		_IIC_Start
  9192 ;;		_IIC_Stop
  9193 ;;		_IIC_Wait_Ack
  9194 ;;		_delay_ms
  9195 ;; This function is called by:
  9196 ;;		_transmit_finger
  9197 ;;		_PCA9685_init
  9198 ;;		_PCA9685_Write
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text41
  9203  0016B8                     __ptext41:
  9204                           	opt stack 0
  9205  0016B8                     _PCA9685_writeOneByte:
  9206                           	opt stack 24
  9207                           
  9208                           ;incstack = 0
  9209                           ;PCA9685_writeOneByte@addr stored from wreg
  9210  0016B8  6E19               	movwf	PCA9685_writeOneByte@addr,c
  9211                           
  9212                           ;PCA9685.c: 8: IIC_Start();
  9213  0016BA  EC5B  F00C         	call	_IIC_Start	;wreg free
  9214                           
  9215                           ;PCA9685.c: 9: IIC_Send_Byte(0x80);
  9216  0016BE  0E80               	movlw	128
  9217  0016C0  ECC2  F009         	call	_IIC_Send_Byte
  9218                           
  9219                           ;PCA9685.c: 10: IIC_Wait_Ack();
  9220  0016C4  ECEE  F00A         	call	_IIC_Wait_Ack	;wreg free
  9221                           
  9222                           ;PCA9685.c: 11: IIC_Send_Byte(addr&0xff);
  9223  0016C8  5019               	movf	PCA9685_writeOneByte@addr,w,c
  9224  0016CA  ECC2  F009         	call	_IIC_Send_Byte
  9225                           
  9226                           ;PCA9685.c: 12: IIC_Wait_Ack();
  9227  0016CE  ECEE  F00A         	call	_IIC_Wait_Ack	;wreg free
  9228                           
  9229                           ;PCA9685.c: 13: IIC_Send_Byte(data);
  9230  0016D2  5018               	movf	PCA9685_writeOneByte@data,w,c
  9231  0016D4  ECC2  F009         	call	_IIC_Send_Byte
  9232                           
  9233                           ;PCA9685.c: 14: IIC_Wait_Ack();
  9234  0016D8  ECEE  F00A         	call	_IIC_Wait_Ack	;wreg free
  9235                           
  9236                           ;PCA9685.c: 15: IIC_Stop();
  9237  0016DC  EC49  F00C         	call	_IIC_Stop	;wreg free
  9238                           
  9239                           ;PCA9685.c: 16: delay_ms(10);
  9240  0016E0  0E00               	movlw	0
  9241  0016E2  6E15               	movwf	delay_ms@ms+1,c
  9242  0016E4  0E0A               	movlw	10
  9243  0016E6  6E14               	movwf	delay_ms@ms,c
  9244  0016E8  EC99  F00C         	call	_delay_ms	;wreg free
  9245  0016EC  0012               	return		;funcret
  9246  0016EE                     __end_of_PCA9685_writeOneByte:
  9247                           	opt stack 0
  9248                           tblptru	equ	0xFF8
  9249                           tblptrh	equ	0xFF7
  9250                           tblptrl	equ	0xFF6
  9251                           tablat	equ	0xFF5
  9252                           prodh	equ	0xFF4
  9253                           prodl	equ	0xFF3
  9254                           intcon	equ	0xFF2
  9255                           indf0	equ	0xFEF
  9256                           postinc0	equ	0xFEE
  9257                           fsr0h	equ	0xFEA
  9258                           fsr0l	equ	0xFE9
  9259                           wreg	equ	0xFE8
  9260                           postdec1	equ	0xFE5
  9261                           plusw1	equ	0xFE3
  9262                           fsr1l	equ	0xFE1
  9263                           indf2	equ	0xFDF
  9264                           postinc2	equ	0xFDE
  9265                           postdec2	equ	0xFDD
  9266                           plusw2	equ	0xFDB
  9267                           fsr2h	equ	0xFDA
  9268                           fsr2l	equ	0xFD9
  9269                           status	equ	0xFD8
  9270                           
  9271 ;; *************** function _delay_ms *****************
  9272 ;; Defined at:
  9273 ;;		line 3 in file "harwave/mydelay.c"
  9274 ;; Parameters:    Size  Location     Type
  9275 ;;  ms              2   19[COMRAM] int 
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;		None
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  1    wreg      void 
  9280 ;; Registers used:
  9281 ;;		wreg, status,2, status,0, cstack
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9287 ;;      Params:         2       0       0       0       0       0       0
  9288 ;;      Locals:         0       0       0       0       0       0       0
  9289 ;;      Temps:          0       0       0       0       0       0       0
  9290 ;;      Totals:         2       0       0       0       0       0       0
  9291 ;;Total ram usage:        2 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    2
  9294 ;; This function calls:
  9295 ;;		_Delay10KTCYx
  9296 ;; This function is called by:
  9297 ;;		_LCD_Initialize
  9298 ;;		_LCD_WriteCmd
  9299 ;;		_LCD_GotoXY
  9300 ;;		_LCD_WriteData
  9301 ;;		_PCA9685_writeOneByte
  9302 ;;		_ESP8266_Cmd
  9303 ;;		_main
  9304 ;; This function uses a non-reentrant model
  9305 ;;
  9306                           
  9307                           	psect	text42
  9308  001932                     __ptext42:
  9309                           	opt stack 0
  9310  001932                     _delay_ms:
  9311                           	opt stack 28
  9312  001932                     
  9313                           ;mydelay.c: 6: Delay10KTCYx(1);
  9314  001932  0E01               	movlw	1
  9315  001934  ECA4  F00C         	call	_Delay10KTCYx
  9316                           
  9317                           ;mydelay.c: 7: ms--;
  9318  001938  0614               	decf	delay_ms@ms,f,c
  9319  00193A  A0D8               	btfss	status,0,c
  9320  00193C  0615               	decf	delay_ms@ms+1,f,c
  9321                           
  9322                           ;mydelay.c: 8: }while(ms);
  9323  00193E  5014               	movf	delay_ms@ms,w,c
  9324  001940  1015               	iorwf	delay_ms@ms+1,w,c
  9325  001942  B4D8               	btfsc	status,2,c
  9326  001944  0012               	return	
  9327  001946  D7F5               	goto	l3687
  9328  001948                     __end_of_delay_ms:
  9329                           	opt stack 0
  9330                           tblptru	equ	0xFF8
  9331                           tblptrh	equ	0xFF7
  9332                           tblptrl	equ	0xFF6
  9333                           tablat	equ	0xFF5
  9334                           prodh	equ	0xFF4
  9335                           prodl	equ	0xFF3
  9336                           intcon	equ	0xFF2
  9337                           indf0	equ	0xFEF
  9338                           postinc0	equ	0xFEE
  9339                           fsr0h	equ	0xFEA
  9340                           fsr0l	equ	0xFE9
  9341                           wreg	equ	0xFE8
  9342                           postdec1	equ	0xFE5
  9343                           plusw1	equ	0xFE3
  9344                           fsr1l	equ	0xFE1
  9345                           indf2	equ	0xFDF
  9346                           postinc2	equ	0xFDE
  9347                           postdec2	equ	0xFDD
  9348                           plusw2	equ	0xFDB
  9349                           fsr2h	equ	0xFDA
  9350                           fsr2l	equ	0xFD9
  9351                           status	equ	0xFD8
  9352                           
  9353 ;; *************** function _Delay10KTCYx *****************
  9354 ;; Defined at:
  9355 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10ktcyx.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;  unit            1    wreg     unsigned char 
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;  unit            1   18[COMRAM] unsigned char 
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  1    wreg      void 
  9362 ;; Registers used:
  9363 ;;		wreg
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9369 ;;      Params:         0       0       0       0       0       0       0
  9370 ;;      Locals:         1       0       0       0       0       0       0
  9371 ;;      Temps:          1       0       0       0       0       0       0
  9372 ;;      Totals:         2       0       0       0       0       0       0
  9373 ;;Total ram usage:        2 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; Hardware stack levels required when called:    1
  9376 ;; This function calls:
  9377 ;;		Nothing
  9378 ;; This function is called by:
  9379 ;;		_delay_ms
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           	psect	text43
  9384  001948                     __ptext43:
  9385                           	opt stack 0
  9386  001948                     _Delay10KTCYx:
  9387                           	opt stack 28
  9388                           
  9389                           ;incstack = 0
  9390                           ;Delay10KTCYx@unit stored from wreg
  9391  001948  6E13               	movwf	Delay10KTCYx@unit,c
  9392  00194A  0E0D               	movlw	13
  9393  00194C  6E12               	movwf	??_Delay10KTCYx& (0+255),c
  9394  00194E  0EFC               	movlw	252
  9395  001950                     u4517:
  9396  001950  2EE8               	decfsz	wreg,f,c
  9397  001952  D7FE               	bra	u4517
  9398  001954  2E12               	decfsz	??_Delay10KTCYx& (0+255),f,c
  9399  001956  D7FC               	bra	u4517
  9400  001958  2E13               	decfsz	Delay10KTCYx@unit,f,c
  9401  00195A  D7F7               	goto	l3643
  9402  00195C  0012               	return	
  9403  00195E                     __end_of_Delay10KTCYx:
  9404                           	opt stack 0
  9405                           tblptru	equ	0xFF8
  9406                           tblptrh	equ	0xFF7
  9407                           tblptrl	equ	0xFF6
  9408                           tablat	equ	0xFF5
  9409                           prodh	equ	0xFF4
  9410                           prodl	equ	0xFF3
  9411                           intcon	equ	0xFF2
  9412                           indf0	equ	0xFEF
  9413                           postinc0	equ	0xFEE
  9414                           fsr0h	equ	0xFEA
  9415                           fsr0l	equ	0xFE9
  9416                           wreg	equ	0xFE8
  9417                           postdec1	equ	0xFE5
  9418                           plusw1	equ	0xFE3
  9419                           fsr1l	equ	0xFE1
  9420                           indf2	equ	0xFDF
  9421                           postinc2	equ	0xFDE
  9422                           postdec2	equ	0xFDD
  9423                           plusw2	equ	0xFDB
  9424                           fsr2h	equ	0xFDA
  9425                           fsr2l	equ	0xFD9
  9426                           status	equ	0xFD8
  9427                           
  9428 ;; *************** function _IIC_Wait_Ack *****************
  9429 ;; Defined at:
  9430 ;;		line 43 in file "harwave/softIIC.c"
  9431 ;; Parameters:    Size  Location     Type
  9432 ;;		None
  9433 ;; Auto vars:     Size  Location     Type
  9434 ;;  ucErrTime       1   20[COMRAM] unsigned char 
  9435 ;; Return value:  Size  Location     Type
  9436 ;;                  1    wreg      unsigned char 
  9437 ;; Registers used:
  9438 ;;		wreg, status,2, status,0, cstack
  9439 ;; Tracked objects:
  9440 ;;		On entry : 0/0
  9441 ;;		On exit  : 0/0
  9442 ;;		Unchanged: 0/0
  9443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9444 ;;      Params:         0       0       0       0       0       0       0
  9445 ;;      Locals:         1       0       0       0       0       0       0
  9446 ;;      Temps:          0       0       0       0       0       0       0
  9447 ;;      Totals:         1       0       0       0       0       0       0
  9448 ;;Total ram usage:        1 bytes
  9449 ;; Hardware stack levels used:    1
  9450 ;; Hardware stack levels required when called:    4
  9451 ;; This function calls:
  9452 ;;		_IIC_Stop
  9453 ;;		_delay_us
  9454 ;; This function is called by:
  9455 ;;		_PCA9685_writeOneByte
  9456 ;;		_PCA9685_readOneByte
  9457 ;; This function uses a non-reentrant model
  9458 ;;
  9459                           
  9460                           	psect	text44
  9461  0015DC                     __ptext44:
  9462                           	opt stack 0
  9463  0015DC                     _IIC_Wait_Ack:
  9464                           	opt stack 24
  9465                           
  9466                           ;softIIC.c: 45: u8 ucErrTime=0;
  9467                           
  9468                           ;incstack = 0
  9469  0015DC  0E00               	movlw	0
  9470  0015DE  6E15               	movwf	IIC_Wait_Ack@ucErrTime,c
  9471                           
  9472                           ;softIIC.c: 46: {TRISBbits.TRISB0=1;};
  9473  0015E0  8093               	bsf	3987,0,c	;volatile
  9474                           
  9475                           ;softIIC.c: 47: PORTBbits.RB0=1;
  9476  0015E2  8081               	bsf	3969,0,c	;volatile
  9477                           
  9478                           ;softIIC.c: 49: delay_us(1);
  9479  0015E4  0E00               	movlw	0
  9480  0015E6  6E14               	movwf	delay_us@us+1,c
  9481  0015E8  0E01               	movlw	1
  9482  0015EA  6E13               	movwf	delay_us@us,c
  9483  0015EC  ECAF  F00C         	call	_delay_us	;wreg free
  9484                           
  9485                           ;softIIC.c: 50: PORTBbits.RB1=1;
  9486  0015F0  8281               	bsf	3969,1,c	;volatile
  9487                           
  9488                           ;softIIC.c: 52: delay_us(1);
  9489  0015F2  0E00               	movlw	0
  9490  0015F4  6E14               	movwf	delay_us@us+1,c
  9491  0015F6  0E01               	movlw	1
  9492  0015F8  6E13               	movwf	delay_us@us,c
  9493  0015FA  ECAF  F00C         	call	_delay_us	;wreg free
  9494                           
  9495                           ;softIIC.c: 53: while(PORTBbits.RB0)
  9496  0015FE  D007               	goto	l268
  9497  001600                     l2627:
  9498                           
  9499                           ;softIIC.c: 54: {
  9500                           ;softIIC.c: 55: ucErrTime++;
  9501  001600  2A15               	incf	IIC_Wait_Ack@ucErrTime,f,c
  9502                           
  9503                           ;softIIC.c: 56: if(ucErrTime>250)
  9504  001602  0EFA               	movlw	250
  9505  001604  6415               	cpfsgt	IIC_Wait_Ack@ucErrTime,c
  9506  001606  D003               	goto	l268
  9507                           
  9508                           ;softIIC.c: 57: {
  9509                           ;softIIC.c: 58: IIC_Stop();
  9510  001608  EC49  F00C         	call	_IIC_Stop	;wreg free
  9511                           
  9512                           ;softIIC.c: 59: return 1;
  9513                           ;	Return value of _IIC_Wait_Ack is never used
  9514  00160C  0012               	return	
  9515  00160E                     l268:
  9516  00160E  B081               	btfsc	3969,0,c	;volatile
  9517  001610  D7F7               	goto	l2627
  9518                           
  9519                           ;softIIC.c: 60: }
  9520                           ;softIIC.c: 61: }
  9521                           ;softIIC.c: 62: PORTBbits.RB1=0;
  9522  001612  9281               	bcf	3969,1,c	;volatile
  9523                           
  9524                           ;softIIC.c: 63: return 0;
  9525                           ;	Return value of _IIC_Wait_Ack is never used
  9526  001614  0012               	return		;funcret
  9527  001616                     __end_of_IIC_Wait_Ack:
  9528                           	opt stack 0
  9529                           tblptru	equ	0xFF8
  9530                           tblptrh	equ	0xFF7
  9531                           tblptrl	equ	0xFF6
  9532                           tablat	equ	0xFF5
  9533                           prodh	equ	0xFF4
  9534                           prodl	equ	0xFF3
  9535                           intcon	equ	0xFF2
  9536                           indf0	equ	0xFEF
  9537                           postinc0	equ	0xFEE
  9538                           fsr0h	equ	0xFEA
  9539                           fsr0l	equ	0xFE9
  9540                           wreg	equ	0xFE8
  9541                           postdec1	equ	0xFE5
  9542                           plusw1	equ	0xFE3
  9543                           fsr1l	equ	0xFE1
  9544                           indf2	equ	0xFDF
  9545                           postinc2	equ	0xFDE
  9546                           postdec2	equ	0xFDD
  9547                           plusw2	equ	0xFDB
  9548                           fsr2h	equ	0xFDA
  9549                           fsr2l	equ	0xFD9
  9550                           status	equ	0xFD8
  9551                           
  9552 ;; *************** function _IIC_Stop *****************
  9553 ;; Defined at:
  9554 ;;		line 29 in file "harwave/softIIC.c"
  9555 ;; Parameters:    Size  Location     Type
  9556 ;;		None
  9557 ;; Auto vars:     Size  Location     Type
  9558 ;;		None
  9559 ;; Return value:  Size  Location     Type
  9560 ;;                  1    wreg      void 
  9561 ;; Registers used:
  9562 ;;		wreg, status,2, status,0, cstack
  9563 ;; Tracked objects:
  9564 ;;		On entry : 0/0
  9565 ;;		On exit  : 0/0
  9566 ;;		Unchanged: 0/0
  9567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9568 ;;      Params:         0       0       0       0       0       0       0
  9569 ;;      Locals:         0       0       0       0       0       0       0
  9570 ;;      Temps:          0       0       0       0       0       0       0
  9571 ;;      Totals:         0       0       0       0       0       0       0
  9572 ;;Total ram usage:        0 bytes
  9573 ;; Hardware stack levels used:    1
  9574 ;; Hardware stack levels required when called:    3
  9575 ;; This function calls:
  9576 ;;		_delay_us
  9577 ;; This function is called by:
  9578 ;;		_PCA9685_writeOneByte
  9579 ;;		_IIC_Wait_Ack
  9580 ;;		_PCA9685_readOneByte
  9581 ;; This function uses a non-reentrant model
  9582 ;;
  9583                           
  9584                           	psect	text45
  9585  001892                     __ptext45:
  9586                           	opt stack 0
  9587  001892                     _IIC_Stop:
  9588                           	opt stack 24
  9589                           
  9590                           ;softIIC.c: 31: {TRISBbits.TRISB0=0;};
  9591                           
  9592                           ;incstack = 0
  9593  001892  9093               	bcf	3987,0,c	;volatile
  9594                           
  9595                           ;softIIC.c: 32: PORTBbits.RB1=0;
  9596  001894  9281               	bcf	3969,1,c	;volatile
  9597                           
  9598                           ;softIIC.c: 33: PORTBbits.RB0=0;
  9599  001896  9081               	bcf	3969,0,c	;volatile
  9600                           
  9601                           ;softIIC.c: 34: delay_us(4);
  9602  001898  0E00               	movlw	0
  9603  00189A  6E14               	movwf	delay_us@us+1,c
  9604  00189C  0E04               	movlw	4
  9605  00189E  6E13               	movwf	delay_us@us,c
  9606  0018A0  ECAF  F00C         	call	_delay_us	;wreg free
  9607                           
  9608                           ;softIIC.c: 35: PORTBbits.RB1=1;
  9609  0018A4  8281               	bsf	3969,1,c	;volatile
  9610                           
  9611                           ;softIIC.c: 36: delay_us(4);
  9612  0018A6  0E00               	movlw	0
  9613  0018A8  6E14               	movwf	delay_us@us+1,c
  9614  0018AA  0E04               	movlw	4
  9615  0018AC  6E13               	movwf	delay_us@us,c
  9616  0018AE  ECAF  F00C         	call	_delay_us	;wreg free
  9617                           
  9618                           ;softIIC.c: 37: PORTBbits.RB0=1;
  9619  0018B2  8081               	bsf	3969,0,c	;volatile
  9620  0018B4  0012               	return		;funcret
  9621  0018B6                     __end_of_IIC_Stop:
  9622                           	opt stack 0
  9623                           tblptru	equ	0xFF8
  9624                           tblptrh	equ	0xFF7
  9625                           tblptrl	equ	0xFF6
  9626                           tablat	equ	0xFF5
  9627                           prodh	equ	0xFF4
  9628                           prodl	equ	0xFF3
  9629                           intcon	equ	0xFF2
  9630                           indf0	equ	0xFEF
  9631                           postinc0	equ	0xFEE
  9632                           fsr0h	equ	0xFEA
  9633                           fsr0l	equ	0xFE9
  9634                           wreg	equ	0xFE8
  9635                           postdec1	equ	0xFE5
  9636                           plusw1	equ	0xFE3
  9637                           fsr1l	equ	0xFE1
  9638                           indf2	equ	0xFDF
  9639                           postinc2	equ	0xFDE
  9640                           postdec2	equ	0xFDD
  9641                           plusw2	equ	0xFDB
  9642                           fsr2h	equ	0xFDA
  9643                           fsr2l	equ	0xFD9
  9644                           status	equ	0xFD8
  9645                           
  9646 ;; *************** function _IIC_Start *****************
  9647 ;; Defined at:
  9648 ;;		line 18 in file "harwave/softIIC.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;		None
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;		None
  9653 ;; Return value:  Size  Location     Type
  9654 ;;                  1    wreg      void 
  9655 ;; Registers used:
  9656 ;;		wreg, status,2, status,0, cstack
  9657 ;; Tracked objects:
  9658 ;;		On entry : 0/0
  9659 ;;		On exit  : 0/0
  9660 ;;		Unchanged: 0/0
  9661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9662 ;;      Params:         0       0       0       0       0       0       0
  9663 ;;      Locals:         0       0       0       0       0       0       0
  9664 ;;      Temps:          0       0       0       0       0       0       0
  9665 ;;      Totals:         0       0       0       0       0       0       0
  9666 ;;Total ram usage:        0 bytes
  9667 ;; Hardware stack levels used:    1
  9668 ;; Hardware stack levels required when called:    3
  9669 ;; This function calls:
  9670 ;;		_delay_us
  9671 ;; This function is called by:
  9672 ;;		_PCA9685_writeOneByte
  9673 ;;		_PCA9685_readOneByte
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           	psect	text46
  9678  0018B6                     __ptext46:
  9679                           	opt stack 0
  9680  0018B6                     _IIC_Start:
  9681                           	opt stack 25
  9682                           
  9683                           ;softIIC.c: 20: {TRISBbits.TRISB0=0;};
  9684                           
  9685                           ;incstack = 0
  9686  0018B6  9093               	bcf	3987,0,c	;volatile
  9687                           
  9688                           ;softIIC.c: 21: PORTBbits.RB0=1;
  9689  0018B8  8081               	bsf	3969,0,c	;volatile
  9690                           
  9691                           ;softIIC.c: 22: PORTBbits.RB1=1;
  9692  0018BA  8281               	bsf	3969,1,c	;volatile
  9693                           
  9694                           ;softIIC.c: 23: delay_us(4);
  9695  0018BC  0E00               	movlw	0
  9696  0018BE  6E14               	movwf	delay_us@us+1,c
  9697  0018C0  0E04               	movlw	4
  9698  0018C2  6E13               	movwf	delay_us@us,c
  9699  0018C4  ECAF  F00C         	call	_delay_us	;wreg free
  9700                           
  9701                           ;softIIC.c: 24: PORTBbits.RB0=0;
  9702  0018C8  9081               	bcf	3969,0,c	;volatile
  9703                           
  9704                           ;softIIC.c: 25: delay_us(4);
  9705  0018CA  0E00               	movlw	0
  9706  0018CC  6E14               	movwf	delay_us@us+1,c
  9707  0018CE  0E04               	movlw	4
  9708  0018D0  6E13               	movwf	delay_us@us,c
  9709  0018D2  ECAF  F00C         	call	_delay_us	;wreg free
  9710                           
  9711                           ;softIIC.c: 26: PORTBbits.RB1=0;
  9712  0018D6  9281               	bcf	3969,1,c	;volatile
  9713  0018D8  0012               	return		;funcret
  9714  0018DA                     __end_of_IIC_Start:
  9715                           	opt stack 0
  9716                           tblptru	equ	0xFF8
  9717                           tblptrh	equ	0xFF7
  9718                           tblptrl	equ	0xFF6
  9719                           tablat	equ	0xFF5
  9720                           prodh	equ	0xFF4
  9721                           prodl	equ	0xFF3
  9722                           intcon	equ	0xFF2
  9723                           indf0	equ	0xFEF
  9724                           postinc0	equ	0xFEE
  9725                           fsr0h	equ	0xFEA
  9726                           fsr0l	equ	0xFE9
  9727                           wreg	equ	0xFE8
  9728                           postdec1	equ	0xFE5
  9729                           plusw1	equ	0xFE3
  9730                           fsr1l	equ	0xFE1
  9731                           indf2	equ	0xFDF
  9732                           postinc2	equ	0xFDE
  9733                           postdec2	equ	0xFDD
  9734                           plusw2	equ	0xFDB
  9735                           fsr2h	equ	0xFDA
  9736                           fsr2l	equ	0xFD9
  9737                           status	equ	0xFD8
  9738                           
  9739 ;; *************** function _IIC_Send_Byte *****************
  9740 ;; Defined at:
  9741 ;;		line 91 in file "harwave/softIIC.c"
  9742 ;; Parameters:    Size  Location     Type
  9743 ;;  txd             1    wreg     unsigned char 
  9744 ;; Auto vars:     Size  Location     Type
  9745 ;;  txd             1   21[COMRAM] unsigned char 
  9746 ;;  t               1   22[COMRAM] unsigned char 
  9747 ;; Return value:  Size  Location     Type
  9748 ;;                  1    wreg      void 
  9749 ;; Registers used:
  9750 ;;		wreg, status,2, status,0, cstack
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9756 ;;      Params:         0       0       0       0       0       0       0
  9757 ;;      Locals:         2       0       0       0       0       0       0
  9758 ;;      Temps:          1       0       0       0       0       0       0
  9759 ;;      Totals:         3       0       0       0       0       0       0
  9760 ;;Total ram usage:        3 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    3
  9763 ;; This function calls:
  9764 ;;		_delay_us
  9765 ;; This function is called by:
  9766 ;;		_PCA9685_writeOneByte
  9767 ;;		_PCA9685_readOneByte
  9768 ;; This function uses a non-reentrant model
  9769 ;;
  9770                           
  9771                           	psect	text47
  9772  001384                     __ptext47:
  9773                           	opt stack 0
  9774  001384                     _IIC_Send_Byte:
  9775                           	opt stack 25
  9776                           
  9777                           ;incstack = 0
  9778                           ;IIC_Send_Byte@txd stored from wreg
  9779  001384  6E16               	movwf	IIC_Send_Byte@txd,c
  9780                           
  9781                           ;softIIC.c: 93: u8 t;
  9782                           ;softIIC.c: 94: {TRISBbits.TRISB0=0;};
  9783  001386  9093               	bcf	3987,0,c	;volatile
  9784                           
  9785                           ;softIIC.c: 95: PORTBbits.RB1=0;
  9786  001388  9281               	bcf	3969,1,c	;volatile
  9787                           
  9788                           ;softIIC.c: 96: for(t=0;t<8;t++)
  9789  00138A  0E00               	movlw	0
  9790  00138C  6E17               	movwf	IIC_Send_Byte@t,c
  9791  00138E                     l2595:
  9792  00138E  0E07               	movlw	7
  9793  001390  6417               	cpfsgt	IIC_Send_Byte@t,c
  9794  001392  D001               	goto	l2599
  9795  001394  0012               	return	
  9796  001396                     l2599:
  9797                           
  9798                           ;softIIC.c: 97: {
  9799                           ;softIIC.c: 98: PORTBbits.RB0=(txd&0x80)>>7;
  9800  001396  6A15               	clrf	??_IIC_Send_Byte& (0+255),c
  9801  001398  AE16               	btfss	IIC_Send_Byte@txd,7,c
  9802  00139A  D001               	bra	u1665
  9803  00139C  2A15               	incf	??_IIC_Send_Byte& (0+255),f,c
  9804  00139E                     u1665:
  9805  00139E  0E01               	movlw	1
  9806  0013A0  1615               	andwf	??_IIC_Send_Byte,f,c
  9807  0013A2  5081               	movf	3969,w,c	;volatile
  9808  0013A4  1815               	xorwf	??_IIC_Send_Byte,w,c
  9809  0013A6  0BFE               	andlw	-2
  9810  0013A8  1815               	xorwf	??_IIC_Send_Byte,w,c
  9811  0013AA  6E81               	movwf	3969,c	;volatile
  9812                           
  9813                           ;softIIC.c: 99: txd<<=1;
  9814  0013AC  90D8               	bcf	status,0,c
  9815  0013AE  3616               	rlcf	IIC_Send_Byte@txd,f,c
  9816                           
  9817                           ;softIIC.c: 100: delay_us(2);
  9818  0013B0  0E00               	movlw	0
  9819  0013B2  6E14               	movwf	delay_us@us+1,c
  9820  0013B4  0E02               	movlw	2
  9821  0013B6  6E13               	movwf	delay_us@us,c
  9822  0013B8  ECAF  F00C         	call	_delay_us	;wreg free
  9823                           
  9824                           ;softIIC.c: 101: PORTBbits.RB1=1;
  9825  0013BC  8281               	bsf	3969,1,c	;volatile
  9826                           
  9827                           ;softIIC.c: 102: delay_us(2);
  9828  0013BE  0E00               	movlw	0
  9829  0013C0  6E14               	movwf	delay_us@us+1,c
  9830  0013C2  0E02               	movlw	2
  9831  0013C4  6E13               	movwf	delay_us@us,c
  9832  0013C6  ECAF  F00C         	call	_delay_us	;wreg free
  9833                           
  9834                           ;softIIC.c: 103: PORTBbits.RB1=0;
  9835  0013CA  9281               	bcf	3969,1,c	;volatile
  9836                           
  9837                           ;softIIC.c: 104: delay_us(2);
  9838  0013CC  0E00               	movlw	0
  9839  0013CE  6E14               	movwf	delay_us@us+1,c
  9840  0013D0  0E02               	movlw	2
  9841  0013D2  6E13               	movwf	delay_us@us,c
  9842  0013D4  ECAF  F00C         	call	_delay_us	;wreg free
  9843  0013D8  2A17               	incf	IIC_Send_Byte@t,f,c
  9844  0013DA  D7D9               	goto	l2595
  9845  0013DC                     __end_of_IIC_Send_Byte:
  9846                           	opt stack 0
  9847                           tblptru	equ	0xFF8
  9848                           tblptrh	equ	0xFF7
  9849                           tblptrl	equ	0xFF6
  9850                           tablat	equ	0xFF5
  9851                           prodh	equ	0xFF4
  9852                           prodl	equ	0xFF3
  9853                           intcon	equ	0xFF2
  9854                           indf0	equ	0xFEF
  9855                           postinc0	equ	0xFEE
  9856                           fsr0h	equ	0xFEA
  9857                           fsr0l	equ	0xFE9
  9858                           wreg	equ	0xFE8
  9859                           postdec1	equ	0xFE5
  9860                           plusw1	equ	0xFE3
  9861                           fsr1l	equ	0xFE1
  9862                           indf2	equ	0xFDF
  9863                           postinc2	equ	0xFDE
  9864                           postdec2	equ	0xFDD
  9865                           plusw2	equ	0xFDB
  9866                           fsr2h	equ	0xFDA
  9867                           fsr2l	equ	0xFD9
  9868                           status	equ	0xFD8
  9869                           
  9870 ;; *************** function _delay_us *****************
  9871 ;; Defined at:
  9872 ;;		line 11 in file "harwave/mydelay.c"
  9873 ;; Parameters:    Size  Location     Type
  9874 ;;  us              2   18[COMRAM] int 
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;		None
  9877 ;; Return value:  Size  Location     Type
  9878 ;;                  1    wreg      void 
  9879 ;; Registers used:
  9880 ;;		wreg, status,2, status,0, cstack
  9881 ;; Tracked objects:
  9882 ;;		On entry : 0/0
  9883 ;;		On exit  : 0/0
  9884 ;;		Unchanged: 0/0
  9885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9886 ;;      Params:         2       0       0       0       0       0       0
  9887 ;;      Locals:         0       0       0       0       0       0       0
  9888 ;;      Temps:          0       0       0       0       0       0       0
  9889 ;;      Totals:         2       0       0       0       0       0       0
  9890 ;;Total ram usage:        2 bytes
  9891 ;; Hardware stack levels used:    1
  9892 ;; Hardware stack levels required when called:    2
  9893 ;; This function calls:
  9894 ;;		_Delay10TCYx
  9895 ;; This function is called by:
  9896 ;;		_IIC_Init
  9897 ;;		_IIC_Start
  9898 ;;		_IIC_Stop
  9899 ;;		_IIC_Wait_Ack
  9900 ;;		_IIC_Send_Byte
  9901 ;;		_IIC_Ack
  9902 ;;		_IIC_NAck
  9903 ;;		_IIC_Read_Byte
  9904 ;; This function uses a non-reentrant model
  9905 ;;
  9906                           
  9907                           	psect	text48
  9908  00195E                     __ptext48:
  9909                           	opt stack 0
  9910  00195E                     _delay_us:
  9911                           	opt stack 25
  9912  00195E                     
  9913                           ;mydelay.c: 14: Delay10TCYx(1);
  9914  00195E  0E01               	movlw	1
  9915  001960  ECC2  F00C         	call	_Delay10TCYx
  9916                           
  9917                           ;mydelay.c: 15: us--;
  9918  001964  0613               	decf	delay_us@us,f,c
  9919  001966  A0D8               	btfss	status,0,c
  9920  001968  0614               	decf	delay_us@us+1,f,c
  9921                           
  9922                           ;mydelay.c: 16: }while(us);
  9923  00196A  5013               	movf	delay_us@us,w,c
  9924  00196C  1014               	iorwf	delay_us@us+1,w,c
  9925  00196E  B4D8               	btfsc	status,2,c
  9926  001970  0012               	return	
  9927  001972  D7F5               	goto	l2519
  9928  001974                     __end_of_delay_us:
  9929                           	opt stack 0
  9930                           tblptru	equ	0xFF8
  9931                           tblptrh	equ	0xFF7
  9932                           tblptrl	equ	0xFF6
  9933                           tablat	equ	0xFF5
  9934                           prodh	equ	0xFF4
  9935                           prodl	equ	0xFF3
  9936                           intcon	equ	0xFF2
  9937                           indf0	equ	0xFEF
  9938                           postinc0	equ	0xFEE
  9939                           fsr0h	equ	0xFEA
  9940                           fsr0l	equ	0xFE9
  9941                           wreg	equ	0xFE8
  9942                           postdec1	equ	0xFE5
  9943                           plusw1	equ	0xFE3
  9944                           fsr1l	equ	0xFE1
  9945                           indf2	equ	0xFDF
  9946                           postinc2	equ	0xFDE
  9947                           postdec2	equ	0xFDD
  9948                           plusw2	equ	0xFDB
  9949                           fsr2h	equ	0xFDA
  9950                           fsr2l	equ	0xFD9
  9951                           status	equ	0xFD8
  9952                           
  9953 ;; *************** function _Delay10TCYx *****************
  9954 ;; Defined at:
  9955 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10tcyx.c"
  9956 ;; Parameters:    Size  Location     Type
  9957 ;;  unit            1    wreg     unsigned char 
  9958 ;; Auto vars:     Size  Location     Type
  9959 ;;  unit            1   17[COMRAM] unsigned char 
  9960 ;; Return value:  Size  Location     Type
  9961 ;;                  1    wreg      void 
  9962 ;; Registers used:
  9963 ;;		wreg
  9964 ;; Tracked objects:
  9965 ;;		On entry : 0/0
  9966 ;;		On exit  : 0/0
  9967 ;;		Unchanged: 0/0
  9968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9969 ;;      Params:         0       0       0       0       0       0       0
  9970 ;;      Locals:         1       0       0       0       0       0       0
  9971 ;;      Temps:          0       0       0       0       0       0       0
  9972 ;;      Totals:         1       0       0       0       0       0       0
  9973 ;;Total ram usage:        1 bytes
  9974 ;; Hardware stack levels used:    1
  9975 ;; Hardware stack levels required when called:    1
  9976 ;; This function calls:
  9977 ;;		Nothing
  9978 ;; This function is called by:
  9979 ;;		_delay_us
  9980 ;;		_delay_ms1
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           	psect	text49
  9985  001984                     __ptext49:
  9986                           	opt stack 0
  9987  001984                     _Delay10TCYx:
  9988                           	opt stack 25
  9989                           
  9990                           ;incstack = 0
  9991                           ;Delay10TCYx@unit stored from wreg
  9992  001984  6E12               	movwf	Delay10TCYx@unit,c
  9993  001986  0E03               	movlw	3
  9994  001988                     u4527:
  9995  001988  2EE8               	decfsz	wreg,f,c
  9996  00198A  D7FE               	bra	u4527
  9997  00198C  F000               	nop	
  9998  00198E  2E12               	decfsz	Delay10TCYx@unit,f,c
  9999  001990  D7FA               	goto	l2515
 10000  001992  0012               	return	
 10001  001994                     __end_of_Delay10TCYx:
 10002                           	opt stack 0
 10003                           tblptru	equ	0xFF8
 10004                           tblptrh	equ	0xFF7
 10005                           tblptrl	equ	0xFF6
 10006                           tablat	equ	0xFF5
 10007                           prodh	equ	0xFF4
 10008                           prodl	equ	0xFF3
 10009                           intcon	equ	0xFF2
 10010                           indf0	equ	0xFEF
 10011                           postinc0	equ	0xFEE
 10012                           fsr0h	equ	0xFEA
 10013                           fsr0l	equ	0xFE9
 10014                           wreg	equ	0xFE8
 10015                           postdec1	equ	0xFE5
 10016                           plusw1	equ	0xFE3
 10017                           fsr1l	equ	0xFE1
 10018                           indf2	equ	0xFDF
 10019                           postinc2	equ	0xFDE
 10020                           postdec2	equ	0xFDD
 10021                           plusw2	equ	0xFDB
 10022                           fsr2h	equ	0xFDA
 10023                           fsr2l	equ	0xFD9
 10024                           status	equ	0xFD8
 10025                           
 10026 ;; *************** function _time_adc *****************
 10027 ;; Defined at:
 10028 ;;		line 129 in file "main.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;		None
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;  ch              1   16[COMRAM] unsigned char 
 10033 ;; Return value:  Size  Location     Type
 10034 ;;                  1    wreg      void 
 10035 ;; Registers used:
 10036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10042 ;;      Params:         0       0       0       0       0       0       0
 10043 ;;      Locals:         1       0       0       0       0       0       0
 10044 ;;      Temps:         16       0       0       0       0       0       0
 10045 ;;      Totals:        17       0       0       0       0       0       0
 10046 ;;Total ram usage:       17 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; This function calls:
 10049 ;;		Nothing
 10050 ;; This function is called by:
 10051 ;;		Interrupt level 2
 10052 ;; This function uses a non-reentrant model
 10053 ;;
 10054                           
 10055                           	psect	intcode
 10056  000008                     __pintcode:
 10057                           	opt stack 0
 10058  000008                     _time_adc:
 10059                           	opt stack 22
 10060                           
 10061                           ;incstack = 0
 10062  000008  826B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10063  00000A  EDA5  F006         	call	int_func,f	;refresh shadow registers
 10064                           tblptru	equ	0xFF8
 10065                           tblptrh	equ	0xFF7
 10066                           tblptrl	equ	0xFF6
 10067                           tablat	equ	0xFF5
 10068                           prodh	equ	0xFF4
 10069                           prodl	equ	0xFF3
 10070                           intcon	equ	0xFF2
 10071                           indf0	equ	0xFEF
 10072                           postinc0	equ	0xFEE
 10073                           fsr0h	equ	0xFEA
 10074                           fsr0l	equ	0xFE9
 10075                           wreg	equ	0xFE8
 10076                           postdec1	equ	0xFE5
 10077                           plusw1	equ	0xFE3
 10078                           fsr1l	equ	0xFE1
 10079                           indf2	equ	0xFDF
 10080                           postinc2	equ	0xFDE
 10081                           postdec2	equ	0xFDD
 10082                           plusw2	equ	0xFDB
 10083                           fsr2h	equ	0xFDA
 10084                           fsr2l	equ	0xFD9
 10085                           status	equ	0xFD8
 10086                           
 10087                           	psect	intcode_body
 10088  000D4A                     __pintcode_body:
 10089                           	opt stack 22
 10090  000D4A                     int_func:
 10091                           	opt stack 22
 10092  000D4A  0006               	pop		; remove dummy address from shadow register refresh
 10093  000D4C  CFFA F003          	movff	pclath,??_time_adc+2
 10094  000D50  CFFB F004          	movff	pclatu,??_time_adc+3
 10095  000D54  CFE9 F005          	movff	fsr0l,??_time_adc+4
 10096  000D58  CFEA F006          	movff	fsr0h,??_time_adc+5
 10097  000D5C  CFE1 F007          	movff	fsr1l,??_time_adc+6
 10098  000D60  CFE2 F008          	movff	fsr1h,??_time_adc+7
 10099  000D64  CFD9 F009          	movff	fsr2l,??_time_adc+8
 10100  000D68  CFDA F00A          	movff	fsr2h,??_time_adc+9
 10101  000D6C  CFF3 F00B          	movff	prodl,??_time_adc+10
 10102  000D70  CFF4 F00C          	movff	prodh,??_time_adc+11
 10103  000D74  CFF6 F00D          	movff	tblptrl,??_time_adc+12
 10104  000D78  CFF7 F00E          	movff	tblptrh,??_time_adc+13
 10105  000D7C  CFF8 F00F          	movff	tblptru,??_time_adc+14
 10106  000D80  CFF5 F010          	movff	tablat,??_time_adc+15
 10107                           
 10108                           ;main.c: 130: if(PIR1bits.RCIF ){
 10109  000D84  AA9E               	btfss	3998,5,c	;volatile
 10110  000D86  D038               	goto	i2l537
 10111                           
 10112                           ;main.c: 131: char ch;
 10113                           ;main.c: 132: ch = RCREG;
 10114  000D88  CFAE F011          	movff	4014,time_adc@ch	;volatile
 10115                           
 10116                           ;main.c: 133: if( strEsp8266_Fram_Record .InfBit .FramLength < ( 50 - 1 ) ) {
 10117  000D8C  0102               	movlb	2	; () banked
 10118  000D8E  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10119  000D90  0B7F               	andlw	127
 10120  000D92  6E01               	movwf	??_time_adc& (0+255),c
 10121  000D94  0E31               	movlw	49
 10122  000D96  6001               	cpfslt	??_time_adc,c
 10123  000D98  D02E               	goto	i2l538
 10124                           
 10125                           ; BSR set to: 2
 10126                           ;main.c: 134: strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .Fram
      +                          Length ++ ] = ch;
 10127  000D9A  0102               	movlb	2	; () banked
 10128  000D9C  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10129  000D9E  0B7F               	andlw	127
 10130  000DA0  6E01               	movwf	??_time_adc& (0+255),c
 10131  000DA2  5001               	movf	??_time_adc,w,c
 10132  000DA4  0D01               	mullw	1
 10133  000DA6  0E9A               	movlw	low _strEsp8266_Fram_Record
 10134  000DA8  24F3               	addwf	prodl,w,c
 10135  000DAA  6ED9               	movwf	fsr2l,c
 10136  000DAC  0E02               	movlw	high _strEsp8266_Fram_Record
 10137  000DAE  20F4               	addwfc	prodh,w,c
 10138  000DB0  6EDA               	movwf	fsr2h,c
 10139  000DB2  C011  FFDF         	movff	time_adc@ch,indf2
 10140                           
 10141                           ; BSR set to: 2
 10142  000DB6  0E01               	movlw	1
 10143  000DB8  6E01               	movwf	??_time_adc& (0+255),c
 10144  000DBA  0102               	movlb	2	; () banked
 10145  000DBC  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10146  000DBE  0B7F               	andlw	127
 10147  000DC0  6E02               	movwf	(??_time_adc+1)& (0+255),c
 10148  000DC2  5001               	movf	??_time_adc,w,c
 10149  000DC4  2602               	addwf	??_time_adc+1,f,c
 10150  000DC6  0102               	movlb	2	; () banked
 10151  000DC8  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10152  000DCA  1802               	xorwf	(??_time_adc+1)& (0+255),w,c
 10153  000DCC  0B80               	andlw	-128
 10154  000DCE  1802               	xorwf	(??_time_adc+1)& (0+255),w,c
 10155  000DD0  0102               	movlb	2	; () banked
 10156  000DD2  6FCC               	movwf	(_strEsp8266_Fram_Record+50)& (0+255),b
 10157                           
 10158                           ; BSR set to: 2
 10159                           ;main.c: 137: if(strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .F
      +                          ramLength] == '\0')
 10160  000DD4  0102               	movlb	2	; () banked
 10161  000DD6  51CC               	movf	(_strEsp8266_Fram_Record+50)& (0+255),w,b
 10162  000DD8  0B7F               	andlw	127
 10163  000DDA  6E01               	movwf	??_time_adc& (0+255),c
 10164  000DDC  5001               	movf	??_time_adc,w,c
 10165  000DDE  0D01               	mullw	1
 10166  000DE0  0E9A               	movlw	low _strEsp8266_Fram_Record
 10167  000DE2  24F3               	addwf	prodl,w,c
 10168  000DE4  6ED9               	movwf	fsr2l,c
 10169  000DE6  0E02               	movlw	high _strEsp8266_Fram_Record
 10170  000DE8  20F4               	addwfc	prodh,w,c
 10171  000DEA  6EDA               	movwf	fsr2h,c
 10172  000DEC  50DF               	movf	indf2,w,c
 10173  000DEE  A4D8               	btfss	status,2,c
 10174  000DF0  D002               	goto	i2l538
 10175                           
 10176                           ; BSR set to: 2
 10177                           ;main.c: 138: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 1;
 10178  000DF2  0102               	movlb	2	; () banked
 10179  000DF4  8FCC               	bsf	(_strEsp8266_Fram_Record+50)& (0+255),7,b
 10180  000DF6                     i2l538:
 10181                           
 10182                           ; BSR set to: 2
 10183                           ;main.c: 140: }
 10184                           ;main.c: 141: PIR1bits.RCIF=0;
 10185  000DF6  9A9E               	bcf	3998,5,c	;volatile
 10186  000DF8                     i2l537:
 10187                           
 10188                           ;main.c: 142: }
 10189                           ;main.c: 144: if(PIR1bits.TMR2IF){
 10190  000DF8  A29E               	btfss	3998,1,c	;volatile
 10191  000DFA  D005               	goto	i2l541
 10192                           
 10193                           ;main.c: 145: s++;
 10194  000DFC  4A5A               	infsnz	_s,f,c
 10195  000DFE  2A5B               	incf	_s+1,f,c
 10196                           
 10197                           ;main.c: 146: IP++;
 10198  000E00  4A5C               	infsnz	_IP,f,c
 10199  000E02  2A5D               	incf	_IP+1,f,c
 10200                           
 10201                           ;main.c: 147: PIR1bits.TMR2IF=0;
 10202  000E04  929E               	bcf	3998,1,c	;volatile
 10203  000E06                     i2l541:
 10204  000E06  C010  FFF5         	movff	??_time_adc+15,tablat
 10205  000E0A  C00F  FFF8         	movff	??_time_adc+14,tblptru
 10206  000E0E  C00E  FFF7         	movff	??_time_adc+13,tblptrh
 10207  000E12  C00D  FFF6         	movff	??_time_adc+12,tblptrl
 10208  000E16  C00C  FFF4         	movff	??_time_adc+11,prodh
 10209  000E1A  C00B  FFF3         	movff	??_time_adc+10,prodl
 10210  000E1E  C00A  FFDA         	movff	??_time_adc+9,fsr2h
 10211  000E22  C009  FFD9         	movff	??_time_adc+8,fsr2l
 10212  000E26  C008  FFE2         	movff	??_time_adc+7,fsr1h
 10213  000E2A  C007  FFE1         	movff	??_time_adc+6,fsr1l
 10214  000E2E  C006  FFEA         	movff	??_time_adc+5,fsr0h
 10215  000E32  C005  FFE9         	movff	??_time_adc+4,fsr0l
 10216  000E36  C004  FFFB         	movff	??_time_adc+3,pclatu
 10217  000E3A  C003  FFFA         	movff	??_time_adc+2,pclath
 10218  000E3E  926B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10219  000E40  0011               	retfie		f
 10220  000E42                     __end_of_time_adc:
 10221                           	opt stack 0
 10222                           pclatu	equ	0xFFB
 10223                           pclath	equ	0xFFA
 10224                           tblptru	equ	0xFF8
 10225                           tblptrh	equ	0xFF7
 10226                           tblptrl	equ	0xFF6
 10227                           tablat	equ	0xFF5
 10228                           prodh	equ	0xFF4
 10229                           prodl	equ	0xFF3
 10230                           intcon	equ	0xFF2
 10231                           indf0	equ	0xFEF
 10232                           postinc0	equ	0xFEE
 10233                           fsr0h	equ	0xFEA
 10234                           fsr0l	equ	0xFE9
 10235                           wreg	equ	0xFE8
 10236                           postdec1	equ	0xFE5
 10237                           plusw1	equ	0xFE3
 10238                           fsr1h	equ	0xFE2
 10239                           fsr1l	equ	0xFE1
 10240                           indf2	equ	0xFDF
 10241                           postinc2	equ	0xFDE
 10242                           postdec2	equ	0xFDD
 10243                           plusw2	equ	0xFDB
 10244                           fsr2h	equ	0xFDA
 10245                           fsr2l	equ	0xFD9
 10246                           status	equ	0xFD8
 10247                           pclatu	equ	0xFFB
 10248                           pclath	equ	0xFFA
 10249                           tblptru	equ	0xFF8
 10250                           tblptrh	equ	0xFF7
 10251                           tblptrl	equ	0xFF6
 10252                           tablat	equ	0xFF5
 10253                           prodh	equ	0xFF4
 10254                           prodl	equ	0xFF3
 10255                           intcon	equ	0xFF2
 10256                           indf0	equ	0xFEF
 10257                           postinc0	equ	0xFEE
 10258                           fsr0h	equ	0xFEA
 10259                           fsr0l	equ	0xFE9
 10260                           wreg	equ	0xFE8
 10261                           postdec1	equ	0xFE5
 10262                           plusw1	equ	0xFE3
 10263                           fsr1h	equ	0xFE2
 10264                           fsr1l	equ	0xFE1
 10265                           indf2	equ	0xFDF
 10266                           postinc2	equ	0xFDE
 10267                           postdec2	equ	0xFDD
 10268                           plusw2	equ	0xFDB
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273                           	psect	rparam
 10274  0000                     pclatu	equ	0xFFB
 10275                           pclath	equ	0xFFA
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           intcon	equ	0xFF2
 10283                           indf0	equ	0xFEF
 10284                           postinc0	equ	0xFEE
 10285                           fsr0h	equ	0xFEA
 10286                           fsr0l	equ	0xFE9
 10287                           wreg	equ	0xFE8
 10288                           postdec1	equ	0xFE5
 10289                           plusw1	equ	0xFE3
 10290                           fsr1h	equ	0xFE2
 10291                           fsr1l	equ	0xFE1
 10292                           indf2	equ	0xFDF
 10293                           postinc2	equ	0xFDE
 10294                           postdec2	equ	0xFDD
 10295                           plusw2	equ	0xFDB
 10296                           fsr2h	equ	0xFDA
 10297                           fsr2l	equ	0xFD9
 10298                           status	equ	0xFD8
 10299                           
 10300                           	psect	temp
 10301  00006B                     btemp:
 10302                           	opt stack 0
 10303  00006B                     	ds	1
 10304  0000                     int$flags	set	btemp
 10305                           pclatu	equ	0xFFB
 10306                           pclath	equ	0xFFA
 10307                           tblptru	equ	0xFF8
 10308                           tblptrh	equ	0xFF7
 10309                           tblptrl	equ	0xFF6
 10310                           tablat	equ	0xFF5
 10311                           prodh	equ	0xFF4
 10312                           prodl	equ	0xFF3
 10313                           intcon	equ	0xFF2
 10314                           indf0	equ	0xFEF
 10315                           postinc0	equ	0xFEE
 10316                           fsr0h	equ	0xFEA
 10317                           fsr0l	equ	0xFE9
 10318                           wreg	equ	0xFE8
 10319                           postdec1	equ	0xFE5
 10320                           plusw1	equ	0xFE3
 10321                           fsr1h	equ	0xFE2
 10322                           fsr1l	equ	0xFE1
 10323                           indf2	equ	0xFDF
 10324                           postinc2	equ	0xFDE
 10325                           postdec2	equ	0xFDD
 10326                           plusw2	equ	0xFDB
 10327                           fsr2h	equ	0xFDA
 10328                           fsr2l	equ	0xFD9
 10329                           status	equ	0xFD8


Data Sizes:
    Strings     478
    Constant    2460
    Data        8
    BSS         345
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59     106
    BANK0           128     21      21
    BANK1           256    221     221
    BANK2           256      0     206
    BANK3           256      0     100
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    memset@p1	PTR void  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    memset@p	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    sprintf$1446	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_65(CODE[17]), STR_64(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 100
		 -> STR_63(CODE[7]), sprintf@c(BANK0[1]), STR_58(CODE[5]), STR_57(CODE[12]), 
		 -> STR_52(CODE[10]), STR_51(CODE[4]), STR_40(CODE[2]), STR_39(CODE[10]), 
		 -> STR_38(CODE[4]), STR_23(CODE[4]), STR_21(CODE[4]), ESP8266_Link_Server@cStr(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_25(CODE[17]), STR_24(CODE[20]), STR_22(CODE[13]), STR_20(CODE[13]), 
		 -> STR_18(CODE[26]), STR_15(CODE[21]), STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 120
		 -> ESP8266_Link_Server@cCmd(BANK1[120]), ESP8266_Link_Server@cStr(BANK1[100]), ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK1[120]), 
		 -> ESP8266_SendString@cStr(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    main@temp	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    sp__memset	PTR void  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record(BANK2[52]), 

    sp__ESP8266_ReceiveString	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_ReceiveString@pRecStr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_Link_Server@ComNum	PTR unsigned char  size(2) Largest target is 5
		 -> STR_58(CODE[5]), 

    ESP8266_Link_Server@ip	PTR unsigned char  size(2) Largest target is 12
		 -> STR_57(CODE[12]), 

    ESP8266_JoinAP@pPassWord	PTR unsigned char  size(2) Largest target is 10
		 -> STR_52(CODE[10]), 

    ESP8266_JoinAP@pSSID	PTR unsigned char  size(2) Largest target is 4
		 -> STR_51(CODE[4]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 

    ESP8266_Cmd@reply2	PTR unsigned char  size(2) Largest target is 10
		 -> STR_37(CODE[3]), STR_34(CODE[3]), STR_27(CODE[7]), STR_17(CODE[10]), 
		 -> STR_8(CODE[6]), NULL(NULL[0]), 

    ESP8266_Cmd@reply1	PTR unsigned char  size(2) Largest target is 10
		 -> STR_56(CODE[3]), STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_36(CODE[10]), 
		 -> STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), STR_26(CODE[8]), 
		 -> STR_19(CODE[3]), STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), 
		 -> STR_10(CODE[3]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), 

    ESP8266_Cmd@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_55(CODE[14]), STR_53(CODE[15]), STR_49(CODE[11]), STR_47(CODE[22]), 
		 -> STR_45(CODE[14]), STR_43(CODE[15]), STR_41(CODE[14]), STR_35(CODE[13]), 
		 -> STR_32(CODE[13]), STR_30(CODE[25]), STR_28(CODE[23]), ESP8266_Link_Server@cCmd(BANK1[120]), 
		 -> ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK1[120]), STR_13(CODE[14]), STR_11(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@cStr(COMRAM[20]), 

    ESP8266_Uart@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_55(CODE[14]), STR_53(CODE[15]), STR_49(CODE[11]), STR_47(CODE[22]), 
		 -> STR_45(CODE[14]), STR_43(CODE[15]), STR_41(CODE[14]), STR_35(CODE[13]), 
		 -> STR_32(CODE[13]), STR_30(CODE[25]), STR_28(CODE[23]), ESP8266_Link_Server@cCmd(BANK1[120]), 
		 -> ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK1[120]), STR_13(CODE[14]), STR_11(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@cStr(COMRAM[20]), 

    LCD_WritetStr@str	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_62(CODE[6]), 

    ADtoPWM@AD	PTR unsigned char  size(2) Largest target is 52
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[50]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[52]), 


Critical Paths under _main in COMRAM

    _main->_ADtoPWM
    _PCA9685_init->_PCA9685_writeOneByte
    _IIC_Init->_delay_us
    _LCD_WritetStr->_LCD_WriteData
    _LCD_WriteData->_delay_ms
    _LCD_Initialize->_LCD_WriteCmd
    _delayFor18Tcy->_Delay1TCYx
    _LCD_GotoXY->_LCD_WriteCmd
    _LCD_WriteCmd->_delay_ms
    _ESP8266_client->_ESP8266_Link_Server
    _STA_MODE->_ESP8266_Net_Mode_Choose
    _ESP8266_Net_Mode_Choose->_ESP8266_Cmd
    _ESP8266_Rst->_ESP8266_Cmd
    _ESP8266_Link_Server->_ESP8266_Cmd
    _ESP8266_JoinAP->_ESP8266_Cmd
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ESP8266_AT_Test->_ESP8266_Cmd
    _ESP8266_Cmd->_strstr
    _ESP8266_ReceiveString->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _ADtoPWM->_PWMt0PCA
    _PWMt0PCA->_transmit_finger
    _transmit_finger->_PCA9685_writeOneByte
    _PCA9685_writeOneByte->_IIC_Send_Byte
    _delay_ms->_Delay10KTCYx
    _IIC_Wait_Ack->_delay_us
    _IIC_Stop->_delay_us
    _IIC_Start->_delay_us
    _IIC_Send_Byte->_delay_us
    _delay_us->_Delay10TCYx

Critical Paths under _time_adc in COMRAM

    None.

Critical Paths under _main in BANK0

    _ESP8266_Link_Server->_sprintf
    _ESP8266_JoinAP->_sprintf

Critical Paths under _time_adc in BANK0

    None.

Critical Paths under _main in BANK1

    _ESP8266_client->_ESP8266_Link_Server

Critical Paths under _time_adc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _time_adc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _time_adc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _time_adc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _time_adc in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0  116809
                                             57 COMRAM     2     2      0
                            _ADtoPWM
              _ESP8266_ReceiveString
                     _ESP8266_client
                       _GPIO_initial
                         _LCD_GotoXY
                     _LCD_Initialize
                       _LCD_WriteCmd
                      _LCD_WritetStr
                       _PCA9685_init
                           _delay_ms
                       _finger_reset
                       _initial_UART
                             _memset
                 _oclillator_initial
                    _timer_2_initial
            _timer_intrrupt_initinal
 ---------------------------------------------------------------------------------
 (1) _timer_intrrupt_initinal                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_2_initial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _oclillator_initial                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     288
                                             17 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _initial_UART                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _finger_reset                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PCA9685_init                                         0     0      0    8404
                           _IIC_Init
               _PCA9685_writeOneByte
 ---------------------------------------------------------------------------------
 (2) _IIC_Init                                             0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _LCD_WritetStr                                        5     3      2    1484
                                             22 COMRAM     5     3      2
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        1     1      0    1277
                                             21 COMRAM     1     1      0
                     _LCDWriteNibble
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       0     0      0    2134
                       _LCD_WaitBusy
                       _LCD_WriteCmd
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _LCD_WaitBusy                                         0     0      0      22
                      _delayFor18Tcy
 ---------------------------------------------------------------------------------
 (3) _delayFor18Tcy                                        0     0      0      22
                         _Delay1TCYx
 ---------------------------------------------------------------------------------
 (4) _Delay1TCYx                                           1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_GotoXY                                           6     5      1    2458
                                             22 COMRAM     6     5      1
                       _LCD_WriteCmd
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteCmd                                         1     1      0    1277
                                             21 COMRAM     1     1      0
                     _LCDWriteNibble
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     346
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _GPIO_initial                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP8266_client                                       0     0      0   86526
                    _ESP8266_AT_Test
                        _ESP8266_Cmd
                     _ESP8266_JoinAP
                _ESP8266_Link_Server
                        _ESP8266_Rst
                           _STA_MODE
 ---------------------------------------------------------------------------------
 (2) _STA_MODE                                             0     0      0   20281
                        _ESP8266_Cmd
            _ESP8266_Net_Mode_Choose
 ---------------------------------------------------------------------------------
 (3) _ESP8266_Net_Mode_Choose                              1     1      0   10156
                                             45 COMRAM     1     1      0
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Rst                                          0     0      0   10125
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Link_Server                                227   221      6   18187
                                             45 COMRAM     6     0      6
                                              0 BANK1    221   221      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ESP8266_JoinAP                                     124   120      4   17683
                                             45 COMRAM     4     0      4
                                              0 BANK1    120   120      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             39    29     10    7166
                                             29 COMRAM    14     4     10
                                              0 BANK0     21    21      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     694
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             24 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     703
                                             17 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ESP8266_AT_Test                                      0     0      0   10125
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (4) _ESP8266_Cmd                                          9     1      8   10125
                                             36 COMRAM     9     1      8
                       _ESP8266_Uart
                           _delay_ms
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _ESP8266_Uart                                         6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ESP8266_ReceiveString                                4     2      2    2274
                                             36 COMRAM     4     2      2
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _strstr                                               4     0      4    2237
                                             32 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     3      6     423
                                             23 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (6) _strlen                                               6     4      2     207
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _strchr                                               5     1      4     278
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _ADtoPWM                                             26    24      2   11095
                                             35 COMRAM    22    20      2
                           _PWMt0PCA
 ---------------------------------------------------------------------------------
 (2) _PWMt0PCA                                             5     0      5   10640
                                             30 COMRAM     5     0      5
                    _transmit_finger
 ---------------------------------------------------------------------------------
 (3) _transmit_finger                                      5     2      3    9065
                                             25 COMRAM     5     2      3
               _PCA9685_writeOneByte
 ---------------------------------------------------------------------------------
 (2) _PCA9685_writeOneByte                                 2     1      1    7271
                                             23 COMRAM     2     1      1
                      _IIC_Send_Byte
                          _IIC_Start
                           _IIC_Stop
                       _IIC_Wait_Ack
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             2     0      2     835
                                             19 COMRAM     2     0      2
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (2) _Delay10KTCYx                                         2     2      0      31
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _IIC_Wait_Ack                                         1     1      0    2290
                                             20 COMRAM     1     1      0
                           _IIC_Stop
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _IIC_Stop                                             0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _IIC_Start                                            0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _IIC_Send_Byte                                        3     3      0    1202
                                             20 COMRAM     3     3      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     0      2    1133
                                             18 COMRAM     2     0      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (5) _Delay10TCYx                                          1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _time_adc                                            17    17      0      23
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADtoPWM
     _PWMt0PCA
       _transmit_finger
         _PCA9685_writeOneByte
           _IIC_Send_Byte
             _delay_us
               _Delay10TCYx
           _IIC_Start
             _delay_us
               _Delay10TCYx
           _IIC_Stop
             _delay_us
               _Delay10TCYx
           _IIC_Wait_Ack
             _IIC_Stop
               _delay_us
                 _Delay10TCYx
             _delay_us
               _Delay10TCYx
           _delay_ms
             _Delay10KTCYx
   _ESP8266_ReceiveString
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)
   _ESP8266_client
     _ESP8266_AT_Test
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _ESP8266_Cmd
       _ESP8266_Uart
       _delay_ms
         _Delay10KTCYx
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _ESP8266_JoinAP
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Link_Server
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Rst
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _STA_MODE
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _ESP8266_Net_Mode_Choose
         _ESP8266_Cmd
           _ESP8266_Uart
           _delay_ms
             _Delay10KTCYx
           _strstr
             _strchr
             _strlen
             _strncmp
               _strlen (ARG)
   _GPIO_initial
   _LCD_GotoXY
     _LCD_WriteCmd
       _LCDWriteNibble
       _delay_ms
         _Delay10KTCYx
     _delay_ms
       _Delay10KTCYx
   _LCD_Initialize
     _LCD_WaitBusy
       _delayFor18Tcy
         _Delay1TCYx
     _LCD_WriteCmd
       _LCDWriteNibble
       _delay_ms
         _Delay10KTCYx
     _delay_ms
       _Delay10KTCYx
   _LCD_WriteCmd
     _LCDWriteNibble
     _delay_ms
       _Delay10KTCYx
   _LCD_WritetStr
     _LCD_WriteData
       _LCDWriteNibble
       _delay_ms
         _Delay10KTCYx
   _PCA9685_init
     _IIC_Init
       _delay_us
         _Delay10TCYx
     _PCA9685_writeOneByte
       _IIC_Send_Byte
         _delay_us
           _Delay10TCYx
       _IIC_Start
         _delay_us
           _Delay10TCYx
       _IIC_Stop
         _delay_us
           _Delay10TCYx
       _IIC_Wait_Ack
         _IIC_Stop
           _delay_us
             _Delay10TCYx
         _delay_us
           _Delay10TCYx
       _delay_ms
         _Delay10KTCYx
   _delay_ms
     _Delay10KTCYx
   _finger_reset
   _initial_UART
   _memset
   _oclillator_initial
   _timer_2_initial
   _timer_intrrupt_initinal

 _time_adc (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      64      11       39.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      CE       9       80.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     DD      DD       7       86.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80     15      15       5       16.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      6A       1       84.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     28E      15        0.0%
DATA                 0      0     28E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Jan 28 22:26:33 2019

             _ESP8266_Link_Server 0C4E                     ?_finger_reset 0001  
                               _s 005A                    _LCD_Initialize 0FCE  
                     ?_LCD_GotoXY 0017                                _IP 005C  
             ___wmul@multiplicand 0014                       __CFG_BORV$3 000000  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                             l172 1742                               l342 137E  
                             l352 0ECE                               l338 131A  
                             l268 160E                               l463 10EA  
                             l674 07F0                               l658 06F8  
                             l917 19A4                               l598 01EA  
                             l599 01EE                      __CFG_CPB$OFF 000000  
                             _PR2 000FCB                      __CFG_CPD$OFF 000000  
               ??_timer_2_initial 0012                               prod 000FF3  
                             wreg 000FE8              ?_ESP8266_Link_Server 002E  
                   ?_IIC_Wait_Ack 0001         ??_ESP8266_Net_Mode_Choose 002E  
                    __CFG_LVP$OFF 000000                        _Delay1TCYx 19A2  
                    __CFG_WDT$OFF 000000                   __end_of_ADtoPWM 0C4E  
                            l1130 14CA                              l1140 1556  
                            l4003 04C6                              l4005 04CC  
                            l4105 076A                              l4113 0790  
                            l4017 0502                              l4033 053E  
                            l2515 1986                              l4123 07C6  
                            l4043 058C                              l4019 0508  
                            l4035 055C                              l4203 11D0  
                            l4213 0A26                              l4301 0B9A  
                            l4133 0804                              l4117 07A2  
                            l2519 195E                              l4231 0ABE  
                            l4223 0A74                              l4127 07EA  
                            l4071 068A                              l4063 0638  
                            l4055 05F2                              l4039 0576  
                            l4241 0B10                              l4225 0A8A  
                            l4217 0A40                              l4305 0BEC  
                            l4057 05FC                              l4049 05B8  
                            l4209 11F6                              l2627 1600  
                            l4235 0ADC                              l4219 0A56  
                            l4163 091A                              l4155 0896  
                            l4171 0982                              l4139 0838  
                            l4083 06F2                              l4075 06BE  
                            l4237 0AF2                              l4229 0AA8  
                            l4245 0B26                              l3701 120E  
                            l4181 09D6                              l4157 08D8  
                            l4173 09A0                              l4149 087E  
                            l4077 06C8                              l4069 0680  
                            l4341 103C                              l4333 101C  
                            l4263 17A8                              l4175 09AC  
                            l4167 094C                              l3455 175A  
                            l3713 1286                              l4177 09B0  
                            l4089 070C                              l4281 0CC2  
                            l4353 1570                              l4345 1052  
                            l4337 102C                              l4329 100C  
                            l4521 1166                              l2595 138E  
                            l3643 194A                              l3651 15AC  
                            l3707 1248                              l3811 1538  
                            l4099 0752                              l4187 09FA  
                            l4283 0CD2                              l4275 0C66  
                            l4195 1184                              l3459 176A  
                            l3709 1270                              l3733 0E7A  
                            l3901 01F4                              l4189 0A16  
                            l4285 0CE2                              l4277 0C94  
                            l4357 157A                              l4365 13E2  
                            l2599 1396                              l3663 12BE  
                            l3751 0ED2                              l3815 154C  
                            l3807 152C                              l3911 0232  
                            l4287 0D08                              l4199 11AA  
                            l4295 16F4                              l4383 0F3A  
                            l3681 1666                              l3649 15A8  
                            l3809 1534                              l3921 02A4  
                            l3913 0238                              l3841 0056  
                            l3833 0022                              l4289 0D24  
                            l4385 0F54                              l4369 1408  
                            l3675 164C                              l3667 12F0  
                            l3659 1292                              l3771 1912  
                            l3931 02DC                              l3915 0272  
                            l3843 005C                              l3851 0070  
                            l4387 0F7E                              l3669 12F8  
                            l4397 107C                              l3925 02CA  
                            l3909 0226                              l3845 0062  
                            l4389 0FA8                              l3687 1932  
                            l4399 10AA                              l3695 1316  
                            l3759 0EF2                              l3791 14A4  
                            l3951 0366                              l3935 02EC  
                            l3943 0338                              l3927 02D4  
                            l3855 009E                              l3847 0068  
                            l3839 0040                              l3961 03AE  
                            l3953 037E                              l3937 0304  
                            l3787 1498                              l3947 0356  
                            l3875 014E                              l3859 00BC  
                            l3867 011E                              l3789 14A0  
                            l3957 0396                              l3893 01C2  
                            l3965 03B6                              l3799 14C0  
                            l3991 0490                              l3983 046E  
                            l3967 040A                              l3887 0198  
                            l3895 01D8                              l3897 01E0  
                            l3889 01A0                              l3979 0454  
                            l3899 01E6                              l3989 048A  
                            STR_1 7EAA                              STR_2 7FF6  
                            STR_3 7FB6                              STR_4 7FE0  
                            STR_5 7FBB                              STR_6 7FAD  
                            STR_7 7FBB                              STR_8 7FDA  
                            STR_9 7F1C                              _LATD 000F8C  
                            u4001 085C                              u3210 134A  
                            u3220 1378                              u3217 1340  
                            u3227 136E                              u4141 0C5C  
                            u3520 026C                              u1665 139E  
                            u3527 0262                              u1935 179E  
                            u1936 17A0                              u4517 1950  
                            u3590 032C                              u4527 1988  
                   ?_LCD_WaitBusy 0001                              u3850 0674  
                            u3597 0322                              _TRMT 007D61  
                            _TXIF 007CF4                              _main 10F4  
            _strPc1_1_Fram_Record 0267                              _test 003C  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 006B         ??_timer_intrrupt_initinal 0012  
              __size_of_IIC_Start 0024                              prodh 000FF4  
                            prodl 000FF3                              start 000E  
                   __CFG_IESO$OFF 000000                    ?_IIC_Send_Byte 0001  
                    _sprintf$1440 0083                      _sprintf$1446 0085  
                    _sprintf$1439 0081                     ?_LCD_WriteCmd 0001  
          __end_of_LCD_Initialize 1064                     _LCD_WriteData 17D4  
                   __CFG_MCLRE$ON 000000                    ??_finger_reset 0012  
                    ___param_bank 000000                     _LCD_WritetStr 13DC  
                     _Delay10TCYx 1984                  __end_of_IIC_Init 18FC  
                __end_of_IIC_Stop 18B6              __end_of_PCA9685_init 1892  
                           ?_main 0001                             STR_10 7FBB  
                           STR_11 7F38                             STR_12 7FBB  
                           STR_20 7F61                             STR_21 7FEE  
                           STR_13 7F46                             STR_14 7FBB  
                           STR_22 7F61                             STR_30 7E3B  
                           STR_23 7FF2                             STR_15 7E81  
                           STR_16 7FBB                             STR_40 7FFD  
                           STR_32 7F54                             STR_24 7E96  
                           STR_17 7FA3                             STR_33 7F99  
                           STR_41 7F0E                             STR_25 7EDF  
                           STR_50 7FBB                             STR_26 7FBE  
                           STR_18 7E21                             STR_35 7F54  
                           STR_51 7FEA                             STR_27 7FCD  
                           STR_43 7EF0                             STR_52 7F85  
                           STR_60 7FF9                             STR_36 7F8F  
                           STR_28 7E54                             STR_61 7FF9  
                           STR_37 7FBB                             STR_45 7F2A  
                           STR_53 7EFF                             STR_54 7FBB  
                           STR_38 7FEA                             STR_62 7FD4  
                           STR_55 7F0E                             STR_63 7FC6  
                           STR_39 7F85                             STR_47 7E6B  
                           STR_56 7FBB                             STR_64 7EBD  
                           STR_49 7F7A                             STR_57 7F6E  
                           STR_65 7ECE                             STR_58 7FE5  
                           STR_59 7FFB                   __end_of___lwdiv 14D4  
                 __end_of___lwmod 1560                             i2l541 0E06  
                           i2l537 0DF8                             i2l538 0DF6  
                           _RCREG 000FAE                             _SPBRG 000FAF  
                           _PORTD 000F83                             _TRISD 000F95  
            __end_of_ESP8266_Uart 1384                             _TXREG 000FAD  
           __size_of_Delay10KTCYx 0016                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000             ??_ESP8266_Link_Server 0034  
                  __CFG_EBTR2$OFF 000000                    ??_IIC_Wait_Ack 0015  
                  __CFG_EBTR3$OFF 000000                     ?_GPIO_initial 0001  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
           __end_of_delayFor18Tcy 19C4                   __end_of_dpowers 7E19  
                           _count 0062                  __end_of_STA_MODE 1720  
                 __end_of_isdigit 191A                    ??_LCD_WaitBusy 0013  
                           _write 0061                  __end_of_PWMt0PCA 0B48  
             __size_of_LCD_GotoXY 003E                             pclath 000FFA  
                           tablat 000FF5           __size_of_ESP8266_JoinAP 004A  
                           plusw1 000FE3                             plusw2 000FDB  
                           status 000FD8                   __end_of_sprintf 0A24  
      __end_of_oclillator_initial 19BC                   __end_of_strncmp 1312  
                  ??_LCD_WriteCmd 0016           __size_of_ESP8266_client 00C4  
                  ?_LCD_WriteData 0001                      LCD_GotoXY@ln 0017  
                 ?_LCD_Initialize 0001                 ??_transmit_finger 001D  
                 __initialization 1430                    ?_LCD_WritetStr 0017  
                    __end_of_main 1180              __size_of_ESP8266_Cmd 00C8  
            __size_of_ESP8266_Rst 0026                      _Delay10KTCYx 1948  
                  __CFG_OSC$HSPLL 000000             _ESP8266_ReceiveString 1064  
                  ESP8266_Cmd@cmd 0025                            ??_main 003A  
 __end_of_timer_intrrupt_initinal 1984                     __activetblptr 000002  
               __end_of_IIC_Start 18DA                         ??_ADtoPWM 0026  
                  ??_GPIO_initial 0012             ESP8266_Link_Server@id 0032  
           ESP8266_Link_Server@ip 002E                  IIC_Send_Byte@txd 0016  
                     ?_Delay1TCYx 0001                            _SPBRGH 000FB0  
                   ?_initial_UART 0001                   ??_IIC_Send_Byte 0015  
                  _LCDWriteNibble 177C                  __end_of_delay_ms 1948  
                __end_of_delay_us 1974                    __CFG_XINST$OFF 000000  
                _ESP8266_Cmd$1210 002D               ESP8266_JoinAP@pSSID 002E  
        __size_of_ESP8266_AT_Test 002C                            ___wmul 1824  
                  __CFG_STVREN$ON 000000                         ??___lwdiv 0016  
                       ??___lwmod 001D                 ESP8266_Cmd@reply1 0027  
               ESP8266_Cmd@reply2 0029                            _memset 1750  
                          clear_0 1456                            clear_1 1462  
                          clear_2 146E                            _strchr 164C  
                          _strlen 159E                            _strstr 120C  
           IIC_Wait_Ack@ucErrTime 0015                      __pdataCOMRAM 0063  
                       ??_isdigit 0012                  __end_of_time_adc 0E42  
                    __mediumconst 7484                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
            __end_of_finger_reset 19C6                         ??_sprintf 0028  
       ESP8266_Link_Server@ComNum 0030                         ??_strncmp 001E  
          __end_of_LCDWriteNibble 17A8                        __accesstop 0080  
         __end_of__initialization 1474                         ?_IIC_Init 0001  
                  ??_initial_UART 0012                   __CFG_PBADEN$OFF 000000  
                       ?_IIC_Stop 0001                   ??_LCD_WriteData 0016  
                   ___rparam_used 000001                   ??_LCD_WritetStr 0019  
         transmit_finger@HL_Value 001A                     LCD_GotoXY@pos 001C  
                  __pcstackCOMRAM 0001                   _timer_2_initial 191A  
            __end_of_IIC_Wait_Ack 1616             __size_of_PCA9685_init 0024  
                    ??_LCD_GotoXY 0018           ESP8266_JoinAP@pPassWord 0030  
          ?_ESP8266_ReceiveString 0025              __end_of_LCD_WaitBusy 1750  
             __size_of_Delay1TCYx 000A                         ?_STA_MODE 0001  
           __size_of_ESP8266_Uart 0072                         ?_PWMt0PCA 001F  
                       ADtoPWM@AD 0024                         ADtoPWM@u1 0036  
                       ADtoPWM@u2 002A                         ADtoPWM@u3 002C  
                       ADtoPWM@u4 002E                         ADtoPWM@w1 0038  
                       ADtoPWM@w2 0030                         ADtoPWM@w3 0032  
                       ADtoPWM@w4 0034                  LCD_WritetStr@str 0017  
            __end_of_LCD_WriteCmd 164C     __size_of_PCA9685_writeOneByte 0036  
                    sprintf@width 0090                    _ESP8266_JoinAP 14D4  
                      __pbssBANK2 0200                        __pbssBANK3 0300  
        ESP8266_Link_Server@F4048 0300                __end_of_LCD_GotoXY 159E  
                 ?_LCDWriteNibble 0012                        ??_IIC_Init 0015  
                      ??_IIC_Stop 0015                      _PCA9685_init 186E  
                  _ESP8266_client 0F0A                      _ESP8266_Uart 1312  
              __CFG_CCP2MX$PORTBE 000000              __end_of_GPIO_initial 19A2  
        ESP8266_Link_Server@enumE 01DC                      ?_Delay10TCYx 0001  
                         ?___wmul 0012             transmit_finger@finger 001C  
                 ESP8266_Uart@cmd 0012                        ??_STA_MODE 002F  
                         ?_memset 0012                        ??_PWMt0PCA 0024  
               ??_ESP8266_AT_Test 002E                           ?_strchr 0012  
                         ?_strlen 0012                           ?_strstr 0021  
                         _ADtoPWM 0B48                         ?_delay_ms 0014  
                       ?_delay_us 0013            __end_of_ESP8266_JoinAP 151E  
               ESP8266_Uart@index 0016                   _transmit_finger 1682  
    ESP8266_ReceiveString@pRecStr 0027            __end_of_ESP8266_client 0FCE  
                ??_LCD_Initialize 0017           __end_of_timer_2_initial 1932  
                         __Hparam 0000                           __Lparam 0000  
                       ?_time_adc 0001                   __size_of___wmul 0026  
                         ___lwdiv 1482                           ___lwmod 151E  
              _oclillator_initial 19B4                           __pcinit 1430  
                 __size_of_memset 002C                   Delay10TCYx@unit 0012  
                         __ramtop 0600       __end_of_ESP8266_Link_Server 0D4A  
                         __ptext0 10F4                           __ptext1 1974  
                         __ptext2 191A                           __ptext3 19B4  
                         __ptext4 1750                           __ptext5 184A  
                         __ptext6 19C4                           __ptext7 186E  
                         __ptext8 18DA                           __ptext9 13DC  
                       _T0CONbits 000FD5              __end_of_initial_UART 186E  
                 __size_of_strchr 0036             __size_of_finger_reset 0002  
                 __size_of_strlen 003E                 __end_of_hexpowers 7E21  
                 __size_of_strstr 0084                           _dpowers 7E0F  
        ?_ESP8266_Net_Mode_Choose 0001                         _T2CONbits 000FCA  
                         _isdigit 18FC               ?_oclillator_initial 0001  
                      ??_delay_ms 0016                        ??_delay_us 0015  
                 ?_ESP8266_JoinAP 002E                         _IIC_Start 18B6  
                    ??_Delay1TCYx 0012                           _sprintf 0012  
                         _strncmp 1290                    __pintcode_body 0D4A  
                      delay_ms@ms 0014              end_of_initialization 1474  
               __end_of_octpowers 7E0F          ?_timer_intrrupt_initinal 0001  
                      delay_us@us 0013                   ?_ESP8266_client 0001  
                         memset@c 0014                           memset@n 0016  
                         memset@p 0018                     __Lmediumconst 7484  
                         int_func 0D4A             __size_of_IIC_Wait_Ack 003A  
                   ??_ESP8266_Cmd 002D              ??_oclillator_initial 0012  
                   ??_ESP8266_Rst 002E             __size_of_LCD_WaitBusy 0030  
                      ??_time_adc 0001                         _RCSTAbits 000FAB  
                         postdec1 000FE5                           postdec2 000FDD  
                    _finger_reset 19C4                           postinc0 000FEE  
                         postinc2 000FDE            __size_of_delayFor18Tcy 0008  
                         strlen@s 0012                __end_of_Delay1TCYx 19AC  
           __size_of_LCD_WriteCmd 0036                         _PORTBbits 000F81  
                       _PORTDbits 000F83                        _test_index 005E  
         __end_of_transmit_finger 16B8                         _TRISAbits 000F92  
                       _TRISBbits 000F93                      _IIC_Wait_Ack 15DC  
                      ?_IIC_Start 0001                      _LCD_WaitBusy 1720  
           __size_of_GPIO_initial 000E                  ?_timer_2_initial 0001  
                       _TXSTAbits 000FAC                 __size_of_IIC_Init 0022  
               __size_of_IIC_Stop 0024             __end_of_IIC_Send_Byte 13DC  
         ??_ESP8266_ReceiveString 0027                      _LCD_WriteCmd 1616  
                  IIC_Send_Byte@t 0017               __end_of_ESP8266_Cmd 0F0A  
 __end_of_ESP8266_Net_Mode_Choose 120C                    __end_of___wmul 184A  
             __end_of_ESP8266_Rst 1824                       _BAUDCONbits 000FB8  
            __size_of_Delay10TCYx 0010                     __pidataCOMRAM 19AC  
                  __end_of_memset 177C                 __size_of_STA_MODE 0032  
                  __end_of_strchr 1682                 __size_of_PWMt0PCA 0124  
                  __end_of_strlen 15DC                    __end_of_strstr 1290  
             start_initialization 1430                  ??_LCDWriteNibble 0013  
                    _GPIO_initial 1994                     _delayFor18Tcy 19BC  
                     PWMt0PCA@low 0021             __end_of_LCD_WriteData 17FE  
                 _ESP8266_AT_Test 17A8                ESP8266_JoinAP@cCmd 0100  
    __end_of_PCA9685_writeOneByte 16EE             __end_of_LCD_WritetStr 1430  
                 LCD_WriteData@ch 0016                          ??___wmul 0016  
           __size_of_initial_UART 0024                  __CFG_LPT1OSC$OFF 000000  
                        ??_memset 0018               __end_of_finger_up_0 75BB  
             __end_of_finger_up_1 7AEB               __end_of_finger_up_2 790F  
             __end_of_finger_up_3 780D               __end_of_finger_up_4 76E9  
                        ??_strchr 0016                          ??_strlen 0014  
                        ??_strstr 0025       ESP8266_Net_Mode_Choose@MODE 002E  
                        ?_ADtoPWM 0024                  ?_transmit_finger 001A  
                     __pbssCOMRAM 003C                     __pcstackBANK0 0080  
                   __pcstackBANK1 0100                    ?_delayFor18Tcy 0001  
                     ??_IIC_Start 0015                      _isdigit$1676 0013  
                   _str1_1esp8266 0234                 __size_of_delay_ms 0016  
               __size_of_delay_us 0016                       sprintf@flag 0093  
                     sprintf@prec 008F                      _initial_UART 184A  
            transmit_finger@Hbyte 001D                       _ESP8266_Cmd 0E42  
            transmit_finger@Lbyte 001E           ESP8266_Link_Server@cCmd 0100  
                ___lwdiv@dividend 0012                       _ESP8266_Rst 17FE  
         ESP8266_Link_Server@cStr 0178                         __pintcode 0008  
                   __pmediumconst 7484                     ?_Delay10KTCYx 0001  
                        ?___lwdiv 0012                          ?___lwmod 0019  
               __size_of_time_adc 0E3A                    PWMt0PCA@finger 0023  
                LCDWriteNibble@ch 0013                  LCDWriteNibble@rs 0012  
                ??_ESP8266_JoinAP 0032                          ?_isdigit 0001  
                       _hexpowers 7E19                  ??_ESP8266_client 0034  
                ___lwdiv@quotient 0017                          ?_sprintf 001E  
                        ?_strncmp 0018           __end_of_ESP8266_AT_Test 17D4  
                        _IIC_Init 18DA                    ___wmul@product 0016  
                        _IIC_Stop 1892  __size_of_ESP8266_Net_Mode_Choose 008C  
                        _LATAbits 000F89                         _octpowers 7E03  
                        _PIE1bits 000F9D                        time_adc@ch 0011  
                        _PIR1bits 000F9E                       _finger_up_0 7485  
                     _finger_up_1 79FF                       _finger_up_2 780D  
                     _finger_up_3 76E9                       _finger_up_4 75BB  
                        _RCONbits 000FD0                  __CFG_WDTPS$32768 000000  
                  ??_Delay10KTCYx 0012  __size_of_timer_intrrupt_initinal 0010  
                        _STA_MODE 16EE                          _PWMt0PCA 0A24  
               ___wmul@multiplier 0012                   ??_delayFor18Tcy 0013  
                Delay10KTCYx@unit 0013                  __size_of_ADtoPWM 0106  
    __size_of_ESP8266_Link_Server 00FC              _PCA9685_writeOneByte 16B8  
                       _work_flag 0060                         copy_data0 1444  
                      PWMt0PCA@up 001F                          __Hrparam 0000  
     __size_of_oclillator_initial 0008                    LCD_WriteCmd@ch 0016  
                        __Lrparam 0000          PCA9685_writeOneByte@addr 0019  
              __CFG_BOREN$SBORDIS 000000          PCA9685_writeOneByte@data 0018  
  __size_of_ESP8266_ReceiveString 0090     __end_of_ESP8266_ReceiveString 10F4  
         __size_of_LCD_Initialize 0096                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042               LCD_CreateFont@F3803 0063  
                  LCD_WritetStr@i 001B                        sprintf@idx 0080  
                      sprintf@len 0089                        sprintf@val 008D  
                __size_of_isdigit 001E                          _delay_ms 1932  
                        _delay_us 195E                   ___lwdiv@divisor 0014  
           ?_PCA9685_writeOneByte 0018                   ___lwdiv@counter 0016  
                        __ptext10 17D4                          __ptext11 0FCE  
                        __ptext20 16EE                          __ptext12 1720  
                        __ptext21 1180                          __ptext13 19BC  
                        __ptext30 17A8                          __ptext22 17FE  
                        __ptext14 19A2                          __ptext31 0E42  
                        __ptext23 0C4E                          __ptext15 1560  
                        __ptext40 1682                          __ptext32 1312  
                        __ptext24 14D4                          __ptext16 1616  
                        __ptext41 16B8                          __ptext33 1064  
                        __ptext25 0012                          __ptext17 177C  
                        __ptext42 1932                          __ptext34 120C  
                        __ptext26 18FC                          __ptext18 1994  
                        __ptext43 1948                          __ptext35 1290  
                        __ptext27 1824                          __ptext19 0F0A  
                        __ptext44 15DC                          __ptext36 159E  
                        __ptext28 151E                          __ptext45 1892  
                        __ptext37 164C                          __ptext29 1482  
                        __ptext46 18B6                          __ptext38 0B48  
                        __ptext47 1384                          __ptext39 0A24  
                        __ptext48 195E                          __ptext49 1984  
                __size_of_sprintf 0A12                  __size_of_strncmp 0082  
                ?_ESP8266_AT_Test 0001                     ?_PCA9685_init 0001  
                   __size_of_main 008C                    Delay1TCYx@unit 0012  
             ESP8266_Cmd@waittime 002B                        strncmp@len 001C  
                   ?_ESP8266_Uart 0012                          _time_adc 0008  
                   ??_Delay10TCYx 0012                          int$flags 006B  
        __size_of_timer_2_initial 0018                        _LCD_GotoXY 1560  
               _strPc_Fram_Record 0200                          main@temp 003A  
                  _finger_under_0 7BCD                    _finger_under_1 7CA5  
                  _finger_under_2 7AEB                    _finger_under_3 7D65  
                  _finger_under_4 790F                        _INTCONbits 000FF2  
          __size_of_IIC_Send_Byte 0058                          isdigit@c 0014  
                        memset@p1 0012              __end_of_Delay10KTCYx 195E  
                        intlevel2 0000                         sprintf@ap 008B  
                       sprintf@cp 0087                         sprintf@sp 001E  
         _ESP8266_Net_Mode_Choose 1180                    ??_PCA9685_init 001A  
                       strchr@chr 0014                  ___lwmod@dividend 0019  
                       strchr@ptr 0012                    ??_ESP8266_Uart 0014  
                       strncmp@s1 0018                         strncmp@s2 001A  
                    ?_ESP8266_Cmd 0025                        _OSCCONbits 000FD3  
                    ?_ESP8266_Rst 0001           _timer_intrrupt_initinal 1974  
          __end_of_finger_under_0 7CA5            __end_of_finger_under_1 7D65  
          __end_of_finger_under_2 7BCD            __end_of_finger_under_3 7E03  
          __end_of_finger_under_4 79FF               __end_of_Delay10TCYx 1994  
                        sprintf@c 0092                          sprintf@f 0020  
                 ___lwmod@divisor 001B                          strlen@cp 0016  
                 ___lwmod@counter 001D            ??_PCA9685_writeOneByte 0019  
          __size_of_LCD_WriteData 002A            _strEsp8266_Fram_Record 029A  
                        strstr@s1 0021                          strstr@s2 0023  
          __size_of_LCD_WritetStr 0054          __size_of_transmit_finger 0036  
                  _LCD_GotoXY$640 001A           __size_of_LCDWriteNibble 002C  
                   _IIC_Send_Byte 1384  
