

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Mar 12 00:12:45 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.41
    61                           ; Generated 25/01/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4520 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	idataCOMRAM
    96  0018A4                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for LCD_CreateFont@F3805
   100  0018A4  1F                 	db	31
   101  0018A5  11                 	db	17
   102  0018A6  11                 	db	17
   103  0018A7  1F                 	db	31
   104  0018A8  11                 	db	17
   105  0018A9  11                 	db	17
   106  0018AA  1F                 	db	31
   107  0018AB  00                 	db	0
   108                           
   109                           	psect	mediumconst
   110  00758A                     __pmediumconst:
   111                           	opt stack 0
   112  00758A  00                 	db	0
   113  00758B                     _finger_up_4:
   114                           	opt stack 0
   115  00758B  02E1               	dw	737
   116  00758D  02E7               	dw	743
   117  00758F  02ED               	dw	749
   118  007591  02F3               	dw	755
   119  007593  02F9               	dw	761
   120  007595  02FF               	dw	767
   121  007597  0305               	dw	773
   122  007599  030B               	dw	779
   123  00759B  0311               	dw	785
   124  00759D  0317               	dw	791
   125  00759F  031D               	dw	797
   126  0075A1  0323               	dw	803
   127  0075A3  0329               	dw	809
   128  0075A5  032F               	dw	815
   129  0075A7  0335               	dw	821
   130  0075A9  033B               	dw	827
   131  0075AB  0341               	dw	833
   132  0075AD  0347               	dw	839
   133  0075AF  034D               	dw	845
   134  0075B1  0353               	dw	851
   135  0075B3  0359               	dw	857
   136  0075B5  035F               	dw	863
   137  0075B7  0365               	dw	869
   138  0075B9  036B               	dw	875
   139  0075BB  0371               	dw	881
   140  0075BD  0377               	dw	887
   141  0075BF  037D               	dw	893
   142  0075C1  0383               	dw	899
   143  0075C3  0389               	dw	905
   144  0075C5  038F               	dw	911
   145  0075C7  0395               	dw	917
   146  0075C9  039B               	dw	923
   147  0075CB  03A1               	dw	929
   148  0075CD  03A7               	dw	935
   149  0075CF  03AD               	dw	941
   150  0075D1  03B3               	dw	947
   151  0075D3  03B9               	dw	953
   152  0075D5  03BF               	dw	959
   153  0075D7  03C6               	dw	966
   154  0075D9  03CC               	dw	972
   155  0075DB  03D2               	dw	978
   156  0075DD  03D8               	dw	984
   157  0075DF  03DE               	dw	990
   158  0075E1  03E4               	dw	996
   159  0075E3  03EA               	dw	1002
   160  0075E5  03F0               	dw	1008
   161  0075E7  03F6               	dw	1014
   162  0075E9  03FC               	dw	1020
   163  0075EB  0402               	dw	1026
   164  0075ED  0408               	dw	1032
   165  0075EF  040E               	dw	1038
   166  0075F1  0414               	dw	1044
   167  0075F3  041A               	dw	1050
   168  0075F5  0420               	dw	1056
   169  0075F7  0426               	dw	1062
   170  0075F9  042C               	dw	1068
   171  0075FB  0432               	dw	1074
   172  0075FD  0438               	dw	1080
   173  0075FF  043E               	dw	1086
   174  007601  0444               	dw	1092
   175  007603  044A               	dw	1098
   176  007605  0450               	dw	1104
   177  007607  0456               	dw	1110
   178  007609  045C               	dw	1116
   179  00760B  0462               	dw	1122
   180  00760D  0468               	dw	1128
   181  00760F  046E               	dw	1134
   182  007611  0474               	dw	1140
   183  007613  047A               	dw	1146
   184  007615  0480               	dw	1152
   185  007617  0486               	dw	1158
   186  007619  048C               	dw	1164
   187  00761B  0492               	dw	1170
   188  00761D  0498               	dw	1176
   189  00761F  049E               	dw	1182
   190  007621  04A5               	dw	1189
   191  007623  04AB               	dw	1195
   192  007625  04B1               	dw	1201
   193  007627  04B7               	dw	1207
   194  007629  04BD               	dw	1213
   195  00762B  04C3               	dw	1219
   196  00762D  04C9               	dw	1225
   197  00762F  04CF               	dw	1231
   198  007631  04D5               	dw	1237
   199  007633  04DB               	dw	1243
   200  007635  04E1               	dw	1249
   201  007637  04E7               	dw	1255
   202  007639  04ED               	dw	1261
   203  00763B  04F3               	dw	1267
   204  00763D  04F9               	dw	1273
   205  00763F  04FF               	dw	1279
   206  007641  0505               	dw	1285
   207  007643  050B               	dw	1291
   208  007645  0511               	dw	1297
   209  007647  0517               	dw	1303
   210  007649  051D               	dw	1309
   211  00764B  0523               	dw	1315
   212  00764D  0529               	dw	1321
   213  00764F  052F               	dw	1327
   214  007651  0535               	dw	1333
   215  007653  053B               	dw	1339
   216  007655  0541               	dw	1345
   217  007657  0547               	dw	1351
   218  007659  054D               	dw	1357
   219  00765B  0553               	dw	1363
   220  00765D  0559               	dw	1369
   221  00765F  055F               	dw	1375
   222  007661  0565               	dw	1381
   223  007663  056B               	dw	1387
   224  007665  0571               	dw	1393
   225  007667  0577               	dw	1399
   226  007669  057D               	dw	1405
   227  00766B  0583               	dw	1411
   228  00766D  058A               	dw	1418
   229  00766F  0590               	dw	1424
   230  007671  0596               	dw	1430
   231  007673  059C               	dw	1436
   232  007675  05A2               	dw	1442
   233  007677  05A8               	dw	1448
   234  007679  05AE               	dw	1454
   235  00767B  05B4               	dw	1460
   236  00767D  05BA               	dw	1466
   237  00767F  05C0               	dw	1472
   238  007681  05C6               	dw	1478
   239  007683  05CC               	dw	1484
   240  007685  05D2               	dw	1490
   241  007687  05D8               	dw	1496
   242  007689  05DE               	dw	1502
   243  00768B  05E4               	dw	1508
   244  00768D  05EA               	dw	1514
   245  00768F  05F0               	dw	1520
   246  007691  05F6               	dw	1526
   247  007693  05FC               	dw	1532
   248  007695  0602               	dw	1538
   249  007697  0608               	dw	1544
   250  007699  060E               	dw	1550
   251  00769B  0614               	dw	1556
   252  00769D  061A               	dw	1562
   253  00769F  0620               	dw	1568
   254  0076A1  0626               	dw	1574
   255  0076A3  062C               	dw	1580
   256  0076A5  0632               	dw	1586
   257  0076A7  0638               	dw	1592
   258  0076A9  063E               	dw	1598
   259  0076AB  0644               	dw	1604
   260  0076AD  064A               	dw	1610
   261  0076AF  0650               	dw	1616
   262  0076B1  0656               	dw	1622
   263  0076B3  065C               	dw	1628
   264  0076B5  0662               	dw	1634
   265  0076B7  0669               	dw	1641
   266  0076B9                     __end_of_finger_up_4:
   267                           	opt stack 0
   268  0076B9                     _finger_up_3:
   269                           	opt stack 0
   270  0076B9  02E1               	dw	737
   271  0076BB  02E8               	dw	744
   272  0076BD  02EF               	dw	751
   273  0076BF  02F7               	dw	759
   274  0076C1  02FE               	dw	766
   275  0076C3  0305               	dw	773
   276  0076C5  030D               	dw	781
   277  0076C7  0314               	dw	788
   278  0076C9  031C               	dw	796
   279  0076CB  0323               	dw	803
   280  0076CD  032A               	dw	810
   281  0076CF  0332               	dw	818
   282  0076D1  0339               	dw	825
   283  0076D3  0340               	dw	832
   284  0076D5  0348               	dw	840
   285  0076D7  034F               	dw	847
   286  0076D9  0357               	dw	855
   287  0076DB  035E               	dw	862
   288  0076DD  0365               	dw	869
   289  0076DF  036D               	dw	877
   290  0076E1  0374               	dw	884
   291  0076E3  037B               	dw	891
   292  0076E5  0383               	dw	899
   293  0076E7  038A               	dw	906
   294  0076E9  0392               	dw	914
   295  0076EB  0399               	dw	921
   296  0076ED  03A0               	dw	928
   297  0076EF  03A8               	dw	936
   298  0076F1  03AF               	dw	943
   299  0076F3  03B7               	dw	951
   300  0076F5  03BE               	dw	958
   301  0076F7  03C5               	dw	965
   302  0076F9  03CD               	dw	973
   303  0076FB  03D4               	dw	980
   304  0076FD  03DB               	dw	987
   305  0076FF  03E3               	dw	995
   306  007701  03EA               	dw	1002
   307  007703  03F2               	dw	1010
   308  007705  03F9               	dw	1017
   309  007707  0400               	dw	1024
   310  007709  0408               	dw	1032
   311  00770B  040F               	dw	1039
   312  00770D  0416               	dw	1046
   313  00770F  041E               	dw	1054
   314  007711  0425               	dw	1061
   315  007713  042D               	dw	1069
   316  007715  0434               	dw	1076
   317  007717  043B               	dw	1083
   318  007719  0443               	dw	1091
   319  00771B  044A               	dw	1098
   320  00771D  0451               	dw	1105
   321  00771F  0459               	dw	1113
   322  007721  0460               	dw	1120
   323  007723  0468               	dw	1128
   324  007725  046F               	dw	1135
   325  007727  0476               	dw	1142
   326  007729  047E               	dw	1150
   327  00772B  0485               	dw	1157
   328  00772D  048D               	dw	1165
   329  00772F  0494               	dw	1172
   330  007731  049B               	dw	1179
   331  007733  04A3               	dw	1187
   332  007735  04AA               	dw	1194
   333  007737  04B1               	dw	1201
   334  007739  04B9               	dw	1209
   335  00773B  04C0               	dw	1216
   336  00773D  04C8               	dw	1224
   337  00773F  04CF               	dw	1231
   338  007741  04D6               	dw	1238
   339  007743  04DE               	dw	1246
   340  007745  04E5               	dw	1253
   341  007747  04EC               	dw	1260
   342  007749  04F4               	dw	1268
   343  00774B  04FB               	dw	1275
   344  00774D  0503               	dw	1283
   345  00774F  050A               	dw	1290
   346  007751  0511               	dw	1297
   347  007753  0519               	dw	1305
   348  007755  0520               	dw	1312
   349  007757  0527               	dw	1319
   350  007759  052F               	dw	1327
   351  00775B  0536               	dw	1334
   352  00775D  053E               	dw	1342
   353  00775F  0545               	dw	1349
   354  007761  054C               	dw	1356
   355  007763  0554               	dw	1364
   356  007765  055B               	dw	1371
   357  007767  0563               	dw	1379
   358  007769  056A               	dw	1386
   359  00776B  0571               	dw	1393
   360  00776D  0579               	dw	1401
   361  00776F  0580               	dw	1408
   362  007771  0587               	dw	1415
   363  007773  058F               	dw	1423
   364  007775  0596               	dw	1430
   365  007777  059E               	dw	1438
   366  007779  05A5               	dw	1445
   367  00777B  05AC               	dw	1452
   368  00777D  05B4               	dw	1460
   369  00777F  05BB               	dw	1467
   370  007781  05C2               	dw	1474
   371  007783  05CA               	dw	1482
   372  007785  05D1               	dw	1489
   373  007787  05D9               	dw	1497
   374  007789  05E0               	dw	1504
   375  00778B  05E7               	dw	1511
   376  00778D  05EF               	dw	1519
   377  00778F  05F6               	dw	1526
   378  007791  05FD               	dw	1533
   379  007793  0605               	dw	1541
   380  007795  060C               	dw	1548
   381  007797  0614               	dw	1556
   382  007799  061B               	dw	1563
   383  00779B  0622               	dw	1570
   384  00779D  062A               	dw	1578
   385  00779F  0631               	dw	1585
   386  0077A1  0639               	dw	1593
   387  0077A3  0640               	dw	1600
   388  0077A5  0647               	dw	1607
   389  0077A7  064F               	dw	1615
   390  0077A9  0656               	dw	1622
   391  0077AB  065D               	dw	1629
   392  0077AD  0665               	dw	1637
   393  0077AF  066C               	dw	1644
   394  0077B1  0674               	dw	1652
   395  0077B3  067B               	dw	1659
   396  0077B5  0682               	dw	1666
   397  0077B7  068A               	dw	1674
   398  0077B9  0691               	dw	1681
   399  0077BB  0698               	dw	1688
   400  0077BD  06A0               	dw	1696
   401  0077BF  06A7               	dw	1703
   402  0077C1  06AF               	dw	1711
   403  0077C3  06B6               	dw	1718
   404  0077C5  06BD               	dw	1725
   405  0077C7  06C5               	dw	1733
   406  0077C9  06CC               	dw	1740
   407  0077CB  06D3               	dw	1747
   408  0077CD  06DB               	dw	1755
   409  0077CF  06E2               	dw	1762
   410  0077D1  06EA               	dw	1770
   411  0077D3  06F1               	dw	1777
   412  0077D5  06F8               	dw	1784
   413  0077D7  0700               	dw	1792
   414  0077D9  0707               	dw	1799
   415  0077DB  070F               	dw	1807
   416  0077DD                     __end_of_finger_up_3:
   417                           	opt stack 0
   418  0077DD                     _finger_up_2:
   419                           	opt stack 0
   420  0077DD  02E1               	dw	737
   421  0077DF  02EB               	dw	747
   422  0077E1  02F6               	dw	758
   423  0077E3  0301               	dw	769
   424  0077E5  030B               	dw	779
   425  0077E7  0316               	dw	790
   426  0077E9  0321               	dw	801
   427  0077EB  032B               	dw	811
   428  0077ED  0336               	dw	822
   429  0077EF  0341               	dw	833
   430  0077F1  034C               	dw	844
   431  0077F3  0356               	dw	854
   432  0077F5  0361               	dw	865
   433  0077F7  036C               	dw	876
   434  0077F9  0376               	dw	886
   435  0077FB  0381               	dw	897
   436  0077FD  038C               	dw	908
   437  0077FF  0397               	dw	919
   438  007801  03A1               	dw	929
   439  007803  03AC               	dw	940
   440  007805  03B7               	dw	951
   441  007807  03C1               	dw	961
   442  007809  03CC               	dw	972
   443  00780B  03D7               	dw	983
   444  00780D  03E2               	dw	994
   445  00780F  03EC               	dw	1004
   446  007811  03F7               	dw	1015
   447  007813  0402               	dw	1026
   448  007815  040C               	dw	1036
   449  007817  0417               	dw	1047
   450  007819  0422               	dw	1058
   451  00781B  042D               	dw	1069
   452  00781D  0437               	dw	1079
   453  00781F  0442               	dw	1090
   454  007821  044D               	dw	1101
   455  007823  0457               	dw	1111
   456  007825  0462               	dw	1122
   457  007827  046D               	dw	1133
   458  007829  0478               	dw	1144
   459  00782B  0482               	dw	1154
   460  00782D  048D               	dw	1165
   461  00782F  0498               	dw	1176
   462  007831  04A2               	dw	1186
   463  007833  04AD               	dw	1197
   464  007835  04B8               	dw	1208
   465  007837  04C2               	dw	1218
   466  007839  04CD               	dw	1229
   467  00783B  04D8               	dw	1240
   468  00783D  04E3               	dw	1251
   469  00783F  04ED               	dw	1261
   470  007841  04F8               	dw	1272
   471  007843  0503               	dw	1283
   472  007845  050D               	dw	1293
   473  007847  0518               	dw	1304
   474  007849  0523               	dw	1315
   475  00784B  052E               	dw	1326
   476  00784D  0538               	dw	1336
   477  00784F  0543               	dw	1347
   478  007851  054E               	dw	1358
   479  007853  0558               	dw	1368
   480  007855  0563               	dw	1379
   481  007857  056E               	dw	1390
   482  007859  0579               	dw	1401
   483  00785B  0583               	dw	1411
   484  00785D  058E               	dw	1422
   485  00785F  0599               	dw	1433
   486  007861  05A3               	dw	1443
   487  007863  05AE               	dw	1454
   488  007865  05B9               	dw	1465
   489  007867  05C4               	dw	1476
   490  007869  05CE               	dw	1486
   491  00786B  05D9               	dw	1497
   492  00786D  05E4               	dw	1508
   493  00786F  05EE               	dw	1518
   494  007871  05F9               	dw	1529
   495  007873  0604               	dw	1540
   496  007875  060F               	dw	1551
   497  007877  0619               	dw	1561
   498  007879  0624               	dw	1572
   499  00787B  062F               	dw	1583
   500  00787D  0639               	dw	1593
   501  00787F  0644               	dw	1604
   502  007881  064F               	dw	1615
   503  007883  065A               	dw	1626
   504  007885  0664               	dw	1636
   505  007887  066F               	dw	1647
   506  007889  067A               	dw	1658
   507  00788B  0684               	dw	1668
   508  00788D  068F               	dw	1679
   509  00788F  069A               	dw	1690
   510  007891  06A4               	dw	1700
   511  007893  06AF               	dw	1711
   512  007895  06BA               	dw	1722
   513  007897  06C5               	dw	1733
   514  007899  06CF               	dw	1743
   515  00789B  06DA               	dw	1754
   516  00789D  06E5               	dw	1765
   517  00789F  06EF               	dw	1775
   518  0078A1  06FA               	dw	1786
   519  0078A3  0705               	dw	1797
   520  0078A5  0710               	dw	1808
   521  0078A7  071A               	dw	1818
   522  0078A9  0725               	dw	1829
   523  0078AB  0730               	dw	1840
   524  0078AD  073A               	dw	1850
   525  0078AF  0745               	dw	1861
   526  0078B1  0750               	dw	1872
   527  0078B3  075B               	dw	1883
   528  0078B5  0765               	dw	1893
   529  0078B7  0770               	dw	1904
   530  0078B9  077B               	dw	1915
   531  0078BB  0785               	dw	1925
   532  0078BD  0790               	dw	1936
   533  0078BF  079B               	dw	1947
   534  0078C1  07A6               	dw	1958
   535  0078C3  07B0               	dw	1968
   536  0078C5  07BB               	dw	1979
   537  0078C7  07C6               	dw	1990
   538  0078C9  07D0               	dw	2000
   539  0078CB  07DB               	dw	2011
   540  0078CD  07E6               	dw	2022
   541  0078CF  07F1               	dw	2033
   542  0078D1  07FB               	dw	2043
   543  0078D3  0806               	dw	2054
   544  0078D5  0811               	dw	2065
   545  0078D7  081B               	dw	2075
   546  0078D9  0826               	dw	2086
   547  0078DB  0831               	dw	2097
   548  0078DD  083C               	dw	2108
   549  0078DF                     __end_of_finger_up_2:
   550                           	opt stack 0
   551  0078DF                     _finger_under_4:
   552                           	opt stack 0
   553  0078DF  0000               	dw	0
   554  0078E1  0007               	dw	7
   555  0078E3  000F               	dw	15
   556  0078E5  0017               	dw	23
   557  0078E7  001F               	dw	31
   558  0078E9  0027               	dw	39
   559  0078EB  002F               	dw	47
   560  0078ED  0036               	dw	54
   561  0078EF  003E               	dw	62
   562  0078F1  0046               	dw	70
   563  0078F3  004E               	dw	78
   564  0078F5  0056               	dw	86
   565  0078F7  005E               	dw	94
   566  0078F9  0066               	dw	102
   567  0078FB  006D               	dw	109
   568  0078FD  0075               	dw	117
   569  0078FF  007D               	dw	125
   570  007901  0085               	dw	133
   571  007903  008D               	dw	141
   572  007905  0095               	dw	149
   573  007907  009C               	dw	156
   574  007909  00A4               	dw	164
   575  00790B  00AC               	dw	172
   576  00790D  00B4               	dw	180
   577  00790F  00BC               	dw	188
   578  007911  00C4               	dw	196
   579  007913  00CC               	dw	204
   580  007915  00D3               	dw	211
   581  007917  00DB               	dw	219
   582  007919  00E3               	dw	227
   583  00791B  00EB               	dw	235
   584  00791D  00F3               	dw	243
   585  00791F  00FB               	dw	251
   586  007921  0103               	dw	259
   587  007923  010A               	dw	266
   588  007925  0112               	dw	274
   589  007927  011A               	dw	282
   590  007929  0122               	dw	290
   591  00792B  012A               	dw	298
   592  00792D  0132               	dw	306
   593  00792F  0139               	dw	313
   594  007931  0141               	dw	321
   595  007933  0149               	dw	329
   596  007935  0151               	dw	337
   597  007937  0159               	dw	345
   598  007939  0161               	dw	353
   599  00793B  0169               	dw	361
   600  00793D  0170               	dw	368
   601  00793F  0178               	dw	376
   602  007941  0180               	dw	384
   603  007943  0188               	dw	392
   604  007945  0190               	dw	400
   605  007947  0198               	dw	408
   606  007949  019F               	dw	415
   607  00794B  01A7               	dw	423
   608  00794D  01AF               	dw	431
   609  00794F  01B7               	dw	439
   610  007951  01BF               	dw	447
   611  007953  01C7               	dw	455
   612  007955  01CF               	dw	463
   613  007957  01D6               	dw	470
   614  007959  01DE               	dw	478
   615  00795B  01E6               	dw	486
   616  00795D  01EE               	dw	494
   617  00795F  01F6               	dw	502
   618  007961  01FE               	dw	510
   619  007963  0206               	dw	518
   620  007965  020D               	dw	525
   621  007967  0215               	dw	533
   622  007969  021D               	dw	541
   623  00796B  0225               	dw	549
   624  00796D  022D               	dw	557
   625  00796F  0235               	dw	565
   626  007971  023C               	dw	572
   627  007973  0244               	dw	580
   628  007975  024C               	dw	588
   629  007977  0254               	dw	596
   630  007979  025C               	dw	604
   631  00797B  0264               	dw	612
   632  00797D  026C               	dw	620
   633  00797F  0273               	dw	627
   634  007981  027B               	dw	635
   635  007983  0283               	dw	643
   636  007985  028B               	dw	651
   637  007987  0293               	dw	659
   638  007989  029B               	dw	667
   639  00798B  02A2               	dw	674
   640  00798D  02AA               	dw	682
   641  00798F  02B2               	dw	690
   642  007991  02BA               	dw	698
   643  007993  02C2               	dw	706
   644  007995  02CA               	dw	714
   645  007997  02D2               	dw	722
   646  007999  02D9               	dw	729
   647  00799B  02E1               	dw	737
   648  00799D  02E9               	dw	745
   649  00799F  02F1               	dw	753
   650  0079A1  02F9               	dw	761
   651  0079A3  0301               	dw	769
   652  0079A5  0309               	dw	777
   653  0079A7  0310               	dw	784
   654  0079A9  0318               	dw	792
   655  0079AB  0320               	dw	800
   656  0079AD  0328               	dw	808
   657  0079AF  0330               	dw	816
   658  0079B1  0338               	dw	824
   659  0079B3  033F               	dw	831
   660  0079B5  0347               	dw	839
   661  0079B7  034F               	dw	847
   662  0079B9  0357               	dw	855
   663  0079BB  035F               	dw	863
   664  0079BD  0367               	dw	871
   665  0079BF  036F               	dw	879
   666  0079C1  0376               	dw	886
   667  0079C3  037E               	dw	894
   668  0079C5  0386               	dw	902
   669  0079C7  038E               	dw	910
   670  0079C9  0396               	dw	918
   671  0079CB  039E               	dw	926
   672  0079CD  03A6               	dw	934
   673  0079CF                     __end_of_finger_under_4:
   674                           	opt stack 0
   675  0079CF                     _finger_up_1:
   676                           	opt stack 0
   677  0079CF  02E1               	dw	737
   678  0079D1  02E9               	dw	745
   679  0079D3  02F2               	dw	754
   680  0079D5  02FA               	dw	762
   681  0079D7  0303               	dw	771
   682  0079D9  030C               	dw	780
   683  0079DB  0314               	dw	788
   684  0079DD  031D               	dw	797
   685  0079DF  0325               	dw	805
   686  0079E1  032E               	dw	814
   687  0079E3  0337               	dw	823
   688  0079E5  033F               	dw	831
   689  0079E7  0348               	dw	840
   690  0079E9  0351               	dw	849
   691  0079EB  0359               	dw	857
   692  0079ED  0362               	dw	866
   693  0079EF  036A               	dw	874
   694  0079F1  0373               	dw	883
   695  0079F3  037C               	dw	892
   696  0079F5  0384               	dw	900
   697  0079F7  038D               	dw	909
   698  0079F9  0396               	dw	918
   699  0079FB  039E               	dw	926
   700  0079FD  03A7               	dw	935
   701  0079FF  03AF               	dw	943
   702  007A01  03B8               	dw	952
   703  007A03  03C1               	dw	961
   704  007A05  03C9               	dw	969
   705  007A07  03D2               	dw	978
   706  007A09  03DB               	dw	987
   707  007A0B  03E3               	dw	995
   708  007A0D  03EC               	dw	1004
   709  007A0F  03F4               	dw	1012
   710  007A11  03FD               	dw	1021
   711  007A13  0406               	dw	1030
   712  007A15  040E               	dw	1038
   713  007A17  0417               	dw	1047
   714  007A19  0420               	dw	1056
   715  007A1B  0428               	dw	1064
   716  007A1D  0431               	dw	1073
   717  007A1F  0439               	dw	1081
   718  007A21  0442               	dw	1090
   719  007A23  044B               	dw	1099
   720  007A25  0453               	dw	1107
   721  007A27  045C               	dw	1116
   722  007A29  0465               	dw	1125
   723  007A2B  046D               	dw	1133
   724  007A2D  0476               	dw	1142
   725  007A2F  047E               	dw	1150
   726  007A31  0487               	dw	1159
   727  007A33  0490               	dw	1168
   728  007A35  0498               	dw	1176
   729  007A37  04A1               	dw	1185
   730  007A39  04AA               	dw	1194
   731  007A3B  04B2               	dw	1202
   732  007A3D  04BB               	dw	1211
   733  007A3F  04C3               	dw	1219
   734  007A41  04CC               	dw	1228
   735  007A43  04D5               	dw	1237
   736  007A45  04DD               	dw	1245
   737  007A47  04E6               	dw	1254
   738  007A49  04EF               	dw	1263
   739  007A4B  04F7               	dw	1271
   740  007A4D  0500               	dw	1280
   741  007A4F  0508               	dw	1288
   742  007A51  0511               	dw	1297
   743  007A53  051A               	dw	1306
   744  007A55  0522               	dw	1314
   745  007A57  052B               	dw	1323
   746  007A59  0534               	dw	1332
   747  007A5B  053C               	dw	1340
   748  007A5D  0545               	dw	1349
   749  007A5F  054D               	dw	1357
   750  007A61  0556               	dw	1366
   751  007A63  055F               	dw	1375
   752  007A65  0567               	dw	1383
   753  007A67  0570               	dw	1392
   754  007A69  0579               	dw	1401
   755  007A6B  0581               	dw	1409
   756  007A6D  058A               	dw	1418
   757  007A6F  0592               	dw	1426
   758  007A71  059B               	dw	1435
   759  007A73  05A4               	dw	1444
   760  007A75  05AC               	dw	1452
   761  007A77  05B5               	dw	1461
   762  007A79  05BE               	dw	1470
   763  007A7B  05C6               	dw	1478
   764  007A7D  05CF               	dw	1487
   765  007A7F  05D7               	dw	1495
   766  007A81  05E0               	dw	1504
   767  007A83  05E9               	dw	1513
   768  007A85  05F1               	dw	1521
   769  007A87  05FA               	dw	1530
   770  007A89  0603               	dw	1539
   771  007A8B  060B               	dw	1547
   772  007A8D  0614               	dw	1556
   773  007A8F  061C               	dw	1564
   774  007A91  0625               	dw	1573
   775  007A93  062E               	dw	1582
   776  007A95  0636               	dw	1590
   777  007A97  063F               	dw	1599
   778  007A99  0648               	dw	1608
   779  007A9B  0650               	dw	1616
   780  007A9D  0659               	dw	1625
   781  007A9F  0661               	dw	1633
   782  007AA1  066A               	dw	1642
   783  007AA3  0673               	dw	1651
   784  007AA5  067B               	dw	1659
   785  007AA7  0684               	dw	1668
   786  007AA9  068D               	dw	1677
   787  007AAB  0695               	dw	1685
   788  007AAD  069E               	dw	1694
   789  007AAF  06A6               	dw	1702
   790  007AB1  06AF               	dw	1711
   791  007AB3  06B8               	dw	1720
   792  007AB5  06C0               	dw	1728
   793  007AB7  06C9               	dw	1737
   794  007AB9  06D2               	dw	1746
   795  007ABB                     __end_of_finger_up_1:
   796                           	opt stack 0
   797  007ABB                     _finger_under_2:
   798                           	opt stack 0
   799  007ABB  0000               	dw	0
   800  007ABD  0002               	dw	2
   801  007ABF  0005               	dw	5
   802  007AC1  0007               	dw	7
   803  007AC3  000A               	dw	10
   804  007AC5  000C               	dw	12
   805  007AC7  000F               	dw	15
   806  007AC9  0011               	dw	17
   807  007ACB  0014               	dw	20
   808  007ACD  0016               	dw	22
   809  007ACF  0019               	dw	25
   810  007AD1  001C               	dw	28
   811  007AD3  001E               	dw	30
   812  007AD5  0021               	dw	33
   813  007AD7  0023               	dw	35
   814  007AD9  0026               	dw	38
   815  007ADB  0028               	dw	40
   816  007ADD  002B               	dw	43
   817  007ADF  002D               	dw	45
   818  007AE1  0030               	dw	48
   819  007AE3  0033               	dw	51
   820  007AE5  0035               	dw	53
   821  007AE7  0038               	dw	56
   822  007AE9  003A               	dw	58
   823  007AEB  003D               	dw	61
   824  007AED  003F               	dw	63
   825  007AEF  0042               	dw	66
   826  007AF1  0044               	dw	68
   827  007AF3  0047               	dw	71
   828  007AF5  004A               	dw	74
   829  007AF7  004C               	dw	76
   830  007AF9  004F               	dw	79
   831  007AFB  0051               	dw	81
   832  007AFD  0054               	dw	84
   833  007AFF  0056               	dw	86
   834  007B01  0059               	dw	89
   835  007B03  005B               	dw	91
   836  007B05  005E               	dw	94
   837  007B07  0061               	dw	97
   838  007B09  0063               	dw	99
   839  007B0B  0066               	dw	102
   840  007B0D  0068               	dw	104
   841  007B0F  006B               	dw	107
   842  007B11  006D               	dw	109
   843  007B13  0070               	dw	112
   844  007B15  0072               	dw	114
   845  007B17  0075               	dw	117
   846  007B19  0078               	dw	120
   847  007B1B  007A               	dw	122
   848  007B1D  007D               	dw	125
   849  007B1F  007F               	dw	127
   850  007B21  0082               	dw	130
   851  007B23  0084               	dw	132
   852  007B25  0087               	dw	135
   853  007B27  0089               	dw	137
   854  007B29  008C               	dw	140
   855  007B2B  008F               	dw	143
   856  007B2D  0091               	dw	145
   857  007B2F  0094               	dw	148
   858  007B31  0096               	dw	150
   859  007B33  0099               	dw	153
   860  007B35  009B               	dw	155
   861  007B37  009E               	dw	158
   862  007B39  00A0               	dw	160
   863  007B3B  00A3               	dw	163
   864  007B3D  00A5               	dw	165
   865  007B3F  00A8               	dw	168
   866  007B41  00AB               	dw	171
   867  007B43  00AD               	dw	173
   868  007B45  00B0               	dw	176
   869  007B47  00B2               	dw	178
   870  007B49  00B5               	dw	181
   871  007B4B  00B7               	dw	183
   872  007B4D  00BA               	dw	186
   873  007B4F  00BC               	dw	188
   874  007B51  00BF               	dw	191
   875  007B53  00C2               	dw	194
   876  007B55  00C4               	dw	196
   877  007B57  00C7               	dw	199
   878  007B59  00C9               	dw	201
   879  007B5B  00CC               	dw	204
   880  007B5D  00CE               	dw	206
   881  007B5F  00D1               	dw	209
   882  007B61  00D3               	dw	211
   883  007B63  00D6               	dw	214
   884  007B65  00D9               	dw	217
   885  007B67  00DB               	dw	219
   886  007B69  00DE               	dw	222
   887  007B6B  00E0               	dw	224
   888  007B6D  00E3               	dw	227
   889  007B6F  00E5               	dw	229
   890  007B71  00E8               	dw	232
   891  007B73  00EA               	dw	234
   892  007B75  00ED               	dw	237
   893  007B77  00F0               	dw	240
   894  007B79  00F2               	dw	242
   895  007B7B  00F5               	dw	245
   896  007B7D  00F7               	dw	247
   897  007B7F  00FA               	dw	250
   898  007B81  00FC               	dw	252
   899  007B83  00FF               	dw	255
   900  007B85  0101               	dw	257
   901  007B87  0104               	dw	260
   902  007B89  0107               	dw	263
   903  007B8B  0109               	dw	265
   904  007B8D  010C               	dw	268
   905  007B8F  010E               	dw	270
   906  007B91  0111               	dw	273
   907  007B93  0113               	dw	275
   908  007B95  0116               	dw	278
   909  007B97  0118               	dw	280
   910  007B99  011B               	dw	283
   911  007B9B  011E               	dw	286
   912  007B9D                     __end_of_finger_under_2:
   913                           	opt stack 0
   914  007B9D                     _finger_under_1:
   915                           	opt stack 0
   916  007B9D  0000               	dw	0
   917  007B9F  0006               	dw	6
   918  007BA1  000D               	dw	13
   919  007BA3  0013               	dw	19
   920  007BA5  001A               	dw	26
   921  007BA7  0021               	dw	33
   922  007BA9  0027               	dw	39
   923  007BAB  002E               	dw	46
   924  007BAD  0035               	dw	53
   925  007BAF  003B               	dw	59
   926  007BB1  0042               	dw	66
   927  007BB3  0049               	dw	73
   928  007BB5  004F               	dw	79
   929  007BB7  0056               	dw	86
   930  007BB9  005D               	dw	93
   931  007BBB  0063               	dw	99
   932  007BBD  006A               	dw	106
   933  007BBF  0071               	dw	113
   934  007BC1  0077               	dw	119
   935  007BC3  007E               	dw	126
   936  007BC5  0085               	dw	133
   937  007BC7  008B               	dw	139
   938  007BC9  0092               	dw	146
   939  007BCB  0099               	dw	153
   940  007BCD  009F               	dw	159
   941  007BCF  00A6               	dw	166
   942  007BD1  00AD               	dw	173
   943  007BD3  00B3               	dw	179
   944  007BD5  00BA               	dw	186
   945  007BD7  00C1               	dw	193
   946  007BD9  00C7               	dw	199
   947  007BDB  00CE               	dw	206
   948  007BDD  00D5               	dw	213
   949  007BDF  00DB               	dw	219
   950  007BE1  00E2               	dw	226
   951  007BE3  00E9               	dw	233
   952  007BE5  00EF               	dw	239
   953  007BE7  00F6               	dw	246
   954  007BE9  00FD               	dw	253
   955  007BEB  0103               	dw	259
   956  007BED  010A               	dw	266
   957  007BEF  0111               	dw	273
   958  007BF1  0117               	dw	279
   959  007BF3  011E               	dw	286
   960  007BF5  0125               	dw	293
   961  007BF7  012B               	dw	299
   962  007BF9  0132               	dw	306
   963  007BFB  0139               	dw	313
   964  007BFD  013F               	dw	319
   965  007BFF  0146               	dw	326
   966  007C01  014D               	dw	333
   967  007C03  0153               	dw	339
   968  007C05  015A               	dw	346
   969  007C07  0161               	dw	353
   970  007C09  0167               	dw	359
   971  007C0B  016E               	dw	366
   972  007C0D  0175               	dw	373
   973  007C0F  017B               	dw	379
   974  007C11  0182               	dw	386
   975  007C13  0189               	dw	393
   976  007C15  018F               	dw	399
   977  007C17  0196               	dw	406
   978  007C19  019D               	dw	413
   979  007C1B  01A3               	dw	419
   980  007C1D  01AA               	dw	426
   981  007C1F  01B1               	dw	433
   982  007C21  01B7               	dw	439
   983  007C23  01BE               	dw	446
   984  007C25  01C5               	dw	453
   985  007C27  01CB               	dw	459
   986  007C29  01D2               	dw	466
   987  007C2B  01D9               	dw	473
   988  007C2D  01DF               	dw	479
   989  007C2F  01E6               	dw	486
   990  007C31  01ED               	dw	493
   991  007C33  01F3               	dw	499
   992  007C35  01FA               	dw	506
   993  007C37  0201               	dw	513
   994  007C39  0207               	dw	519
   995  007C3B  020E               	dw	526
   996  007C3D  0215               	dw	533
   997  007C3F  021B               	dw	539
   998  007C41  0222               	dw	546
   999  007C43  0229               	dw	553
  1000  007C45  022F               	dw	559
  1001  007C47  0236               	dw	566
  1002  007C49  023D               	dw	573
  1003  007C4B  0243               	dw	579
  1004  007C4D  024A               	dw	586
  1005  007C4F  0251               	dw	593
  1006  007C51  0257               	dw	599
  1007  007C53  025E               	dw	606
  1008  007C55  0265               	dw	613
  1009  007C57  026B               	dw	619
  1010  007C59  0272               	dw	626
  1011  007C5B  0279               	dw	633
  1012  007C5D                     __end_of_finger_under_1:
  1013                           	opt stack 0
  1014  007C5D                     _finger_under_3:
  1015                           	opt stack 0
  1016  007C5D  0000               	dw	0
  1017  007C5F  000B               	dw	11
  1018  007C61  0017               	dw	23
  1019  007C63  0022               	dw	34
  1020  007C65  002E               	dw	46
  1021  007C67  0039               	dw	57
  1022  007C69  0045               	dw	69
  1023  007C6B  0051               	dw	81
  1024  007C6D  005C               	dw	92
  1025  007C6F  0068               	dw	104
  1026  007C71  0073               	dw	115
  1027  007C73  007F               	dw	127
  1028  007C75  008A               	dw	138
  1029  007C77  0096               	dw	150
  1030  007C79  00A2               	dw	162
  1031  007C7B  00AD               	dw	173
  1032  007C7D  00B9               	dw	185
  1033  007C7F  00C4               	dw	196
  1034  007C81  00D0               	dw	208
  1035  007C83  00DB               	dw	219
  1036  007C85  00E7               	dw	231
  1037  007C87  00F3               	dw	243
  1038  007C89  00FE               	dw	254
  1039  007C8B  010A               	dw	266
  1040  007C8D  0115               	dw	277
  1041  007C8F  0121               	dw	289
  1042  007C91  012D               	dw	301
  1043  007C93  0138               	dw	312
  1044  007C95  0144               	dw	324
  1045  007C97  014F               	dw	335
  1046  007C99  015B               	dw	347
  1047  007C9B  0166               	dw	358
  1048  007C9D  0172               	dw	370
  1049  007C9F  017E               	dw	382
  1050  007CA1  0189               	dw	393
  1051  007CA3  0195               	dw	405
  1052  007CA5  01A0               	dw	416
  1053  007CA7  01AC               	dw	428
  1054  007CA9  01B7               	dw	439
  1055  007CAB  01C3               	dw	451
  1056  007CAD  01CF               	dw	463
  1057  007CAF  01DA               	dw	474
  1058  007CB1  01E6               	dw	486
  1059  007CB3  01F1               	dw	497
  1060  007CB5  01FD               	dw	509
  1061  007CB7  0208               	dw	520
  1062  007CB9  0214               	dw	532
  1063  007CBB  0220               	dw	544
  1064  007CBD  022B               	dw	555
  1065  007CBF  0237               	dw	567
  1066  007CC1  0242               	dw	578
  1067  007CC3  024E               	dw	590
  1068  007CC5  025A               	dw	602
  1069  007CC7  0265               	dw	613
  1070  007CC9  0271               	dw	625
  1071  007CCB  027C               	dw	636
  1072  007CCD  0288               	dw	648
  1073  007CCF  0293               	dw	659
  1074  007CD1  029F               	dw	671
  1075  007CD3  02AB               	dw	683
  1076  007CD5  02B6               	dw	694
  1077  007CD7  02C2               	dw	706
  1078  007CD9  02CD               	dw	717
  1079  007CDB  02D9               	dw	729
  1080  007CDD  02E4               	dw	740
  1081  007CDF  02F0               	dw	752
  1082  007CE1  02FC               	dw	764
  1083  007CE3  0307               	dw	775
  1084  007CE5  0313               	dw	787
  1085  007CE7  031E               	dw	798
  1086  007CE9  032A               	dw	810
  1087  007CEB  0335               	dw	821
  1088  007CED  0341               	dw	833
  1089  007CEF  034D               	dw	845
  1090  007CF1  0358               	dw	856
  1091  007CF3  0364               	dw	868
  1092  007CF5  036F               	dw	879
  1093  007CF7  037B               	dw	891
  1094  007CF9  0387               	dw	903
  1095  007CFB                     __end_of_finger_under_3:
  1096                           	opt stack 0
  1097  007CFB                     _finger_up_0:
  1098                           	opt stack 0
  1099  007CFB  02E1               	dw	737
  1100  007CFD  02EB               	dw	747
  1101  007CFF  02F5               	dw	757
  1102  007D01  0300               	dw	768
  1103  007D03  030A               	dw	778
  1104  007D05  0315               	dw	789
  1105  007D07  031F               	dw	799
  1106  007D09  032A               	dw	810
  1107  007D0B  0334               	dw	820
  1108  007D0D  033E               	dw	830
  1109  007D0F  0349               	dw	841
  1110  007D11  0353               	dw	851
  1111  007D13  035E               	dw	862
  1112  007D15  0368               	dw	872
  1113  007D17  0373               	dw	883
  1114  007D19  037D               	dw	893
  1115  007D1B  0387               	dw	903
  1116  007D1D  0392               	dw	914
  1117  007D1F  039C               	dw	924
  1118  007D21  03A7               	dw	935
  1119  007D23  03B1               	dw	945
  1120  007D25  03BC               	dw	956
  1121  007D27  03C6               	dw	966
  1122  007D29  03D1               	dw	977
  1123  007D2B  03DB               	dw	987
  1124  007D2D  03E5               	dw	997
  1125  007D2F  03F0               	dw	1008
  1126  007D31  03FA               	dw	1018
  1127  007D33  0405               	dw	1029
  1128  007D35  040F               	dw	1039
  1129  007D37  041A               	dw	1050
  1130  007D39  0424               	dw	1060
  1131  007D3B  042E               	dw	1070
  1132  007D3D  0439               	dw	1081
  1133  007D3F  0443               	dw	1091
  1134  007D41  044E               	dw	1102
  1135  007D43  0458               	dw	1112
  1136  007D45  0463               	dw	1123
  1137  007D47  046D               	dw	1133
  1138  007D49  0478               	dw	1144
  1139  007D4B  0482               	dw	1154
  1140  007D4D  048C               	dw	1164
  1141  007D4F  0497               	dw	1175
  1142  007D51  04A1               	dw	1185
  1143  007D53  04AC               	dw	1196
  1144  007D55  04B6               	dw	1206
  1145  007D57  04C1               	dw	1217
  1146  007D59  04CB               	dw	1227
  1147  007D5B  04D5               	dw	1237
  1148  007D5D  04E0               	dw	1248
  1149  007D5F  04EA               	dw	1258
  1150  007D61  04F5               	dw	1269
  1151  007D63  04FF               	dw	1279
  1152  007D65  050A               	dw	1290
  1153  007D67  0514               	dw	1300
  1154  007D69  051E               	dw	1310
  1155  007D6B  0529               	dw	1321
  1156  007D6D  0533               	dw	1331
  1157  007D6F  053E               	dw	1342
  1158  007D71  0548               	dw	1352
  1159  007D73  0553               	dw	1363
  1160  007D75  055D               	dw	1373
  1161  007D77  0568               	dw	1384
  1162  007D79  0572               	dw	1394
  1163  007D7B  057C               	dw	1404
  1164  007D7D  0587               	dw	1415
  1165  007D7F  0591               	dw	1425
  1166  007D81  059C               	dw	1436
  1167  007D83  05A6               	dw	1446
  1168  007D85  05B1               	dw	1457
  1169  007D87  05BB               	dw	1467
  1170  007D89  05C5               	dw	1477
  1171  007D8B  05D0               	dw	1488
  1172  007D8D  05DA               	dw	1498
  1173  007D8F  05E5               	dw	1509
  1174  007D91  05EF               	dw	1519
  1175  007D93  05FA               	dw	1530
  1176  007D95  0604               	dw	1540
  1177  007D97  060F               	dw	1551
  1178  007D99                     __end_of_finger_up_0:
  1179                           	opt stack 0
  1180  007D99                     _finger_under_0:
  1181                           	opt stack 0
  1182  007D99  0000               	dw	0
  1183  007D9B  000D               	dw	13
  1184  007D9D  001A               	dw	26
  1185  007D9F  0027               	dw	39
  1186  007DA1  0034               	dw	52
  1187  007DA3  0041               	dw	65
  1188  007DA5  004E               	dw	78
  1189  007DA7  005B               	dw	91
  1190  007DA9  0069               	dw	105
  1191  007DAB  0076               	dw	118
  1192  007DAD  0083               	dw	131
  1193  007DAF  0090               	dw	144
  1194  007DB1  009D               	dw	157
  1195  007DB3  00AA               	dw	170
  1196  007DB5  00B7               	dw	183
  1197  007DB7  00C4               	dw	196
  1198  007DB9  00D2               	dw	210
  1199  007DBB  00DF               	dw	223
  1200  007DBD  00EC               	dw	236
  1201  007DBF  00F9               	dw	249
  1202  007DC1  0106               	dw	262
  1203  007DC3  0113               	dw	275
  1204  007DC5  0120               	dw	288
  1205  007DC7  012D               	dw	301
  1206  007DC9  013B               	dw	315
  1207  007DCB  0148               	dw	328
  1208  007DCD  0155               	dw	341
  1209  007DCF  0162               	dw	354
  1210  007DD1  016F               	dw	367
  1211  007DD3  017C               	dw	380
  1212  007DD5  0189               	dw	393
  1213  007DD7  0196               	dw	406
  1214  007DD9  01A4               	dw	420
  1215  007DDB  01B1               	dw	433
  1216  007DDD  01BE               	dw	446
  1217  007DDF  01CB               	dw	459
  1218  007DE1  01D8               	dw	472
  1219  007DE3  01E5               	dw	485
  1220  007DE5  01F2               	dw	498
  1221  007DE7  01FF               	dw	511
  1222  007DE9  020D               	dw	525
  1223  007DEB  021A               	dw	538
  1224  007DED  0227               	dw	551
  1225  007DEF  0234               	dw	564
  1226  007DF1  0241               	dw	577
  1227  007DF3  024E               	dw	590
  1228  007DF5  025B               	dw	603
  1229  007DF7  0268               	dw	616
  1230  007DF9  0276               	dw	630
  1231  007DFB  0283               	dw	643
  1232  007DFD  0290               	dw	656
  1233  007DFF  029D               	dw	669
  1234  007E01  02AA               	dw	682
  1235  007E03  02B7               	dw	695
  1236  007E05  02C4               	dw	708
  1237  007E07  02D2               	dw	722
  1238  007E09                     __end_of_finger_under_0:
  1239                           	opt stack 0
  1240  007E09                     _octpowers:
  1241                           	opt stack 0
  1242  007E09  0001               	dw	1
  1243  007E0B  0008               	dw	8
  1244  007E0D  0040               	dw	64
  1245  007E0F  0200               	dw	512
  1246  007E11  1000               	dw	4096
  1247  007E13  8000               	dw	32768
  1248  007E15                     __end_of_octpowers:
  1249                           	opt stack 0
  1250  007E15                     _dpowers:
  1251                           	opt stack 0
  1252  007E15  0001               	dw	1
  1253  007E17  000A               	dw	10
  1254  007E19  0064               	dw	100
  1255  007E1B  03E8               	dw	1000
  1256  007E1D  2710               	dw	10000
  1257  007E1F                     __end_of_dpowers:
  1258                           	opt stack 0
  1259  007E1F                     _hexpowers:
  1260                           	opt stack 0
  1261  007E1F  0001               	dw	1
  1262  007E21  0010               	dw	16
  1263  007E23  0100               	dw	256
  1264  007E25  1000               	dw	4096
  1265  007E27                     __end_of_hexpowers:
  1266                           	opt stack 0
  1267  0000                     _RCREG	set	4014
  1268  0000                     _TXREG	set	4013
  1269  0000                     _SPBRG	set	4015
  1270  0000                     _SPBRGH	set	4016
  1271  0000                     _BAUDCONbits	set	4024
  1272  0000                     _RCSTAbits	set	4011
  1273  0000                     _TXSTAbits	set	4012
  1274  0000                     _PORTBbits	set	3969
  1275  0000                     _TRISBbits	set	3987
  1276  0000                     _PORTDbits	set	3971
  1277  0000                     _PORTD	set	3971
  1278  0000                     _T2CONbits	set	4042
  1279  0000                     _PR2	set	4043
  1280  0000                     _PIR1bits	set	3998
  1281  0000                     _PIE1bits	set	3997
  1282  0000                     _INTCONbits	set	4082
  1283  0000                     _RCONbits	set	4048
  1284  0000                     _T0CONbits	set	4053
  1285  0000                     _OSCCONbits	set	4051
  1286  0000                     _LATAbits	set	3977
  1287  0000                     _TRISAbits	set	3986
  1288  0000                     _LATD	set	3980
  1289  0000                     _TRISD	set	3989
  1290  0000                     _TRMT	set	32097
  1291  0000                     _TXIF	set	31988
  1292  007E27  41                 	db	65	;'A'
  1293  007E28  54                 	db	84	;'T'
  1294  007E29  2B                 	db	43
  1295  007E2A  43                 	db	67	;'C'
  1296  007E2B  57                 	db	87	;'W'
  1297  007E2C  53                 	db	83	;'S'
  1298  007E2D  41                 	db	65	;'A'
  1299  007E2E  50                 	db	80	;'P'
  1300  007E2F  3D                 	db	61	;'='
  1301  007E30  22                 	db	34
  1302  007E31  25                 	db	37
  1303  007E32  73                 	db	115	;'s'
  1304  007E33  22                 	db	34
  1305  007E34  2C                 	db	44
  1306  007E35  22                 	db	34
  1307  007E36  25                 	db	37
  1308  007E37  73                 	db	115	;'s'
  1309  007E38  22                 	db	34
  1310  007E39  2C                 	db	44
  1311  007E3A  31                 	db	49	;'1'
  1312  007E3B  2C                 	db	44
  1313  007E3C  25                 	db	37
  1314  007E3D  73                 	db	115	;'s'
  1315  007E3E  0D                 	db	13
  1316  007E3F  0A                 	db	10
  1317  007E40  00                 	db	0
  1318  007E41  41                 	db	65	;'A'
  1319  007E42  54                 	db	84	;'T'
  1320  007E43  2B                 	db	43
  1321  007E44  55                 	db	85	;'U'
  1322  007E45  41                 	db	65	;'A'
  1323  007E46  52                 	db	82	;'R'
  1324  007E47  54                 	db	84	;'T'
  1325  007E48  3D                 	db	61	;'='
  1326  007E49  31                 	db	49	;'1'
  1327  007E4A  31                 	db	49	;'1'
  1328  007E4B  35                 	db	53	;'5'
  1329  007E4C  32                 	db	50	;'2'
  1330  007E4D  30                 	db	48	;'0'
  1331  007E4E  30                 	db	48	;'0'
  1332  007E4F  2C                 	db	44
  1333  007E50  38                 	db	56	;'8'
  1334  007E51  2C                 	db	44
  1335  007E52  31                 	db	49	;'1'
  1336  007E53  2C                 	db	44
  1337  007E54  30                 	db	48	;'0'
  1338  007E55  2C                 	db	44
  1339  007E56  30                 	db	48	;'0'
  1340  007E57  0D                 	db	13
  1341  007E58  0A                 	db	10
  1342  007E59  00                 	db	0
  1343  007E5A  41                 	db	65	;'A'
  1344  007E5B  54                 	db	84	;'T'
  1345  007E5C  2B                 	db	43
  1346  007E5D  55                 	db	85	;'U'
  1347  007E5E  41                 	db	65	;'A'
  1348  007E5F  52                 	db	82	;'R'
  1349  007E60  54                 	db	84	;'T'
  1350  007E61  3D                 	db	61	;'='
  1351  007E62  39                 	db	57	;'9'
  1352  007E63  36                 	db	54	;'6'
  1353  007E64  30                 	db	48	;'0'
  1354  007E65  30                 	db	48	;'0'
  1355  007E66  2C                 	db	44
  1356  007E67  38                 	db	56	;'8'
  1357  007E68  2C                 	db	44
  1358  007E69  31                 	db	49	;'1'
  1359  007E6A  2C                 	db	44
  1360  007E6B  30                 	db	48	;'0'
  1361  007E6C  2C                 	db	44
  1362  007E6D  30                 	db	48	;'0'
  1363  007E6E  0D                 	db	13
  1364  007E6F  0A                 	db	10
  1365  007E70  00                 	db	0
  1366  007E71  41                 	db	65	;'A'
  1367  007E72  54                 	db	84	;'T'
  1368  007E73  2B                 	db	43
  1369  007E74  43                 	db	67	;'C'
  1370  007E75  49                 	db	73	;'I'
  1371  007E76  50                 	db	80	;'P'
  1372  007E77  53                 	db	83	;'S'
  1373  007E78  45                 	db	69	;'E'
  1374  007E79  52                 	db	82	;'R'
  1375  007E7A  56                 	db	86	;'V'
  1376  007E7B  45                 	db	69	;'E'
  1377  007E7C  52                 	db	82	;'R'
  1378  007E7D  3D                 	db	61	;'='
  1379  007E7E  31                 	db	49	;'1'
  1380  007E7F  2C                 	db	44
  1381  007E80  35                 	db	53	;'5'
  1382  007E81  30                 	db	48	;'0'
  1383  007E82  30                 	db	48	;'0'
  1384  007E83  30                 	db	48	;'0'
  1385  007E84  0D                 	db	13
  1386  007E85  0A                 	db	10
  1387  007E86  00                 	db	0
  1388  007E87                     STR_15:
  1389  007E87  41                 	db	65	;'A'
  1390  007E88  54                 	db	84	;'T'
  1391  007E89  2B                 	db	43
  1392  007E8A  43                 	db	67	;'C'
  1393  007E8B  57                 	db	87	;'W'
  1394  007E8C  4A                 	db	74	;'J'
  1395  007E8D  41                 	db	65	;'A'
  1396  007E8E  50                 	db	80	;'P'
  1397  007E8F  3D                 	db	61	;'='
  1398  007E90  22                 	db	34
  1399  007E91  25                 	db	37
  1400  007E92  73                 	db	115	;'s'
  1401  007E93  22                 	db	34
  1402  007E94  2C                 	db	44
  1403  007E95  22                 	db	34
  1404  007E96  25                 	db	37
  1405  007E97  73                 	db	115	;'s'
  1406  007E98  22                 	db	34
  1407  007E99  0D                 	db	13
  1408  007E9A  0A                 	db	10
  1409  007E9B  00                 	db	0
  1410  007E9C                     STR_24:
  1411  007E9C  41                 	db	65	;'A'
  1412  007E9D  54                 	db	84	;'T'
  1413  007E9E  2B                 	db	43
  1414  007E9F  43                 	db	67	;'C'
  1415  007EA0  49                 	db	73	;'I'
  1416  007EA1  50                 	db	80	;'P'
  1417  007EA2  53                 	db	83	;'S'
  1418  007EA3  54                 	db	84	;'T'
  1419  007EA4  41                 	db	65	;'A'
  1420  007EA5  52                 	db	82	;'R'
  1421  007EA6  54                 	db	84	;'T'
  1422  007EA7  3D                 	db	61	;'='
  1423  007EA8  25                 	db	37
  1424  007EA9  64                 	db	100	;'d'
  1425  007EAA  2C                 	db	44
  1426  007EAB  25                 	db	37
  1427  007EAC  73                 	db	115	;'s'
  1428  007EAD  0D                 	db	13
  1429  007EAE  0A                 	db	10
  1430  007EAF  00                 	db	0
  1431  007EB0  41                 	db	65	;'A'
  1432  007EB1  54                 	db	84	;'T'
  1433  007EB2  2B                 	db	43
  1434  007EB3  43                 	db	67	;'C'
  1435  007EB4  49                 	db	73	;'I'
  1436  007EB5  50                 	db	80	;'P'
  1437  007EB6  53                 	db	83	;'S'
  1438  007EB7  45                 	db	69	;'E'
  1439  007EB8  4E                 	db	78	;'N'
  1440  007EB9  44                 	db	68	;'D'
  1441  007EBA  3D                 	db	61	;'='
  1442  007EBB  25                 	db	37
  1443  007EBC  64                 	db	100	;'d'
  1444  007EBD  2C                 	db	44
  1445  007EBE  25                 	db	37
  1446  007EBF  64                 	db	100	;'d'
  1447  007EC0  0D                 	db	13
  1448  007EC1  0A                 	db	10
  1449  007EC2  00                 	db	0
  1450  007EC3                     STR_63:
  1451  007EC3  30                 	db	48	;'0'
  1452  007EC4  31                 	db	49	;'1'
  1453  007EC5  32                 	db	50	;'2'
  1454  007EC6  33                 	db	51	;'3'
  1455  007EC7  34                 	db	52	;'4'
  1456  007EC8  35                 	db	53	;'5'
  1457  007EC9  36                 	db	54	;'6'
  1458  007ECA  37                 	db	55	;'7'
  1459  007ECB  38                 	db	56	;'8'
  1460  007ECC  39                 	db	57	;'9'
  1461  007ECD  41                 	db	65	;'A'
  1462  007ECE  42                 	db	66	;'B'
  1463  007ECF  43                 	db	67	;'C'
  1464  007ED0  44                 	db	68	;'D'
  1465  007ED1  45                 	db	69	;'E'
  1466  007ED2  46                 	db	70	;'F'
  1467  007ED3  00                 	db	0
  1468  007ED4                     STR_64:
  1469  007ED4  30                 	db	48	;'0'
  1470  007ED5  31                 	db	49	;'1'
  1471  007ED6  32                 	db	50	;'2'
  1472  007ED7  33                 	db	51	;'3'
  1473  007ED8  34                 	db	52	;'4'
  1474  007ED9  35                 	db	53	;'5'
  1475  007EDA  36                 	db	54	;'6'
  1476  007EDB  37                 	db	55	;'7'
  1477  007EDC  38                 	db	56	;'8'
  1478  007EDD  39                 	db	57	;'9'
  1479  007EDE  61                 	db	97	;'a'
  1480  007EDF  62                 	db	98	;'b'
  1481  007EE0  63                 	db	99	;'c'
  1482  007EE1  64                 	db	100	;'d'
  1483  007EE2  65                 	db	101	;'e'
  1484  007EE3  66                 	db	102	;'f'
  1485  007EE4  00                 	db	0
  1486  007EE5                     STR_25:
  1487  007EE5  41                 	db	65	;'A'
  1488  007EE6  54                 	db	84	;'T'
  1489  007EE7  2B                 	db	43
  1490  007EE8  43                 	db	67	;'C'
  1491  007EE9  49                 	db	73	;'I'
  1492  007EEA  50                 	db	80	;'P'
  1493  007EEB  53                 	db	83	;'S'
  1494  007EEC  54                 	db	84	;'T'
  1495  007EED  41                 	db	65	;'A'
  1496  007EEE  52                 	db	82	;'R'
  1497  007EEF  54                 	db	84	;'T'
  1498  007EF0  3D                 	db	61	;'='
  1499  007EF1  25                 	db	37
  1500  007EF2  73                 	db	115	;'s'
  1501  007EF3  0D                 	db	13
  1502  007EF4  0A                 	db	10
  1503  007EF5  00                 	db	0
  1504  007EF6  41                 	db	65	;'A'
  1505  007EF7  54                 	db	84	;'T'
  1506  007EF8  2B                 	db	43
  1507  007EF9  43                 	db	67	;'C'
  1508  007EFA  49                 	db	73	;'I'
  1509  007EFB  50                 	db	80	;'P'
  1510  007EFC  4D                 	db	77	;'M'
  1511  007EFD  4F                 	db	79	;'O'
  1512  007EFE  44                 	db	68	;'D'
  1513  007EFF  45                 	db	69	;'E'
  1514  007F00  3D                 	db	61	;'='
  1515  007F01  30                 	db	48	;'0'
  1516  007F02  0D                 	db	13
  1517  007F03  0A                 	db	10
  1518  007F04  00                 	db	0
  1519  007F05                     STR_53:
  1520  007F05  41                 	db	65	;'A'
  1521  007F06  54                 	db	84	;'T'
  1522  007F07  2B                 	db	43
  1523  007F08  43                 	db	67	;'C'
  1524  007F09  49                 	db	73	;'I'
  1525  007F0A  50                 	db	80	;'P'
  1526  007F0B  4D                 	db	77	;'M'
  1527  007F0C  4F                 	db	79	;'O'
  1528  007F0D  44                 	db	68	;'D'
  1529  007F0E  45                 	db	69	;'E'
  1530  007F0F  3D                 	db	61	;'='
  1531  007F10  31                 	db	49	;'1'
  1532  007F11  0D                 	db	13
  1533  007F12  0A                 	db	10
  1534  007F13  00                 	db	0
  1535  007F14                     STR_41:
  1536  007F14  41                 	db	65	;'A'
  1537  007F15  54                 	db	84	;'T'
  1538  007F16  2B                 	db	43
  1539  007F17  43                 	db	67	;'C'
  1540  007F18  49                 	db	73	;'I'
  1541  007F19  50                 	db	80	;'P'
  1542  007F1A  4D                 	db	77	;'M'
  1543  007F1B  55                 	db	85	;'U'
  1544  007F1C  58                 	db	88	;'X'
  1545  007F1D  3D                 	db	61	;'='
  1546  007F1E  30                 	db	48	;'0'
  1547  007F1F  0D                 	db	13
  1548  007F20  0A                 	db	10
  1549  007F21  00                 	db	0
  1550  007F22                     STR_9:
  1551  007F22  41                 	db	65	;'A'
  1552  007F23  54                 	db	84	;'T'
  1553  007F24  2B                 	db	43
  1554  007F25  43                 	db	67	;'C'
  1555  007F26  57                 	db	87	;'W'
  1556  007F27  4D                 	db	77	;'M'
  1557  007F28  4F                 	db	79	;'O'
  1558  007F29  44                 	db	68	;'D'
  1559  007F2A  45                 	db	69	;'E'
  1560  007F2B  3D                 	db	61	;'='
  1561  007F2C  31                 	db	49	;'1'
  1562  007F2D  0D                 	db	13
  1563  007F2E  0A                 	db	10
  1564  007F2F  00                 	db	0
  1565  007F30  41                 	db	65	;'A'
  1566  007F31  54                 	db	84	;'T'
  1567  007F32  2B                 	db	43
  1568  007F33  43                 	db	67	;'C'
  1569  007F34  49                 	db	73	;'I'
  1570  007F35  50                 	db	80	;'P'
  1571  007F36  4D                 	db	77	;'M'
  1572  007F37  55                 	db	85	;'U'
  1573  007F38  58                 	db	88	;'X'
  1574  007F39  3D                 	db	61	;'='
  1575  007F3A  31                 	db	49	;'1'
  1576  007F3B  0D                 	db	13
  1577  007F3C  0A                 	db	10
  1578  007F3D  00                 	db	0
  1579  007F3E                     STR_11:
  1580  007F3E  41                 	db	65	;'A'
  1581  007F3F  54                 	db	84	;'T'
  1582  007F40  2B                 	db	43
  1583  007F41  43                 	db	67	;'C'
  1584  007F42  57                 	db	87	;'W'
  1585  007F43  4D                 	db	77	;'M'
  1586  007F44  4F                 	db	79	;'O'
  1587  007F45  44                 	db	68	;'D'
  1588  007F46  45                 	db	69	;'E'
  1589  007F47  3D                 	db	61	;'='
  1590  007F48  32                 	db	50	;'2'
  1591  007F49  0D                 	db	13
  1592  007F4A  0A                 	db	10
  1593  007F4B  00                 	db	0
  1594  007F4C                     STR_13:
  1595  007F4C  41                 	db	65	;'A'
  1596  007F4D  54                 	db	84	;'T'
  1597  007F4E  2B                 	db	43
  1598  007F4F  43                 	db	67	;'C'
  1599  007F50  57                 	db	87	;'W'
  1600  007F51  4D                 	db	77	;'M'
  1601  007F52  4F                 	db	79	;'O'
  1602  007F53  44                 	db	68	;'D'
  1603  007F54  45                 	db	69	;'E'
  1604  007F55  3D                 	db	61	;'='
  1605  007F56  33                 	db	51	;'3'
  1606  007F57  0D                 	db	13
  1607  007F58  0A                 	db	10
  1608  007F59  00                 	db	0
  1609  007F5A                     STR_32:
  1610  007F5A  41                 	db	65	;'A'
  1611  007F5B  54                 	db	84	;'T'
  1612  007F5C  2B                 	db	43
  1613  007F5D  43                 	db	67	;'C'
  1614  007F5E  57                 	db	87	;'W'
  1615  007F5F  4D                 	db	77	;'M'
  1616  007F60  4F                 	db	79	;'O'
  1617  007F61  44                 	db	68	;'D'
  1618  007F62  45                 	db	69	;'E'
  1619  007F63  3F                 	db	63	;'?'
  1620  007F64  0D                 	db	13
  1621  007F65  0A                 	db	10
  1622  007F66  00                 	db	0
  1623  007F67                     STR_20:
  1624  007F67  22                 	db	34
  1625  007F68  25                 	db	37
  1626  007F69  73                 	db	115	;'s'
  1627  007F6A  22                 	db	34
  1628  007F6B  2C                 	db	44
  1629  007F6C  22                 	db	34
  1630  007F6D  25                 	db	37
  1631  007F6E  73                 	db	115	;'s'
  1632  007F6F  22                 	db	34
  1633  007F70  2C                 	db	44
  1634  007F71  25                 	db	37
  1635  007F72  73                 	db	115	;'s'
  1636  007F73  00                 	db	0
  1637  007F74                     STR_57:
  1638  007F74  31                 	db	49	;'1'
  1639  007F75  39                 	db	57	;'9'
  1640  007F76  32                 	db	50	;'2'
  1641  007F77  2E                 	db	46
  1642  007F78  31                 	db	49	;'1'
  1643  007F79  36                 	db	54	;'6'
  1644  007F7A  38                 	db	56	;'8'
  1645  007F7B  2E                 	db	46
  1646  007F7C  34                 	db	52	;'4'
  1647  007F7D  2E                 	db	46
  1648  007F7E  31                 	db	49	;'1'
  1649  007F7F  00                 	db	0
  1650  007F80                     STR_49:
  1651  007F80  41                 	db	65	;'A'
  1652  007F81  54                 	db	84	;'T'
  1653  007F82  2B                 	db	43
  1654  007F83  43                 	db	67	;'C'
  1655  007F84  57                 	db	87	;'W'
  1656  007F85  51                 	db	81	;'Q'
  1657  007F86  41                 	db	65	;'A'
  1658  007F87  50                 	db	80	;'P'
  1659  007F88  0D                 	db	13
  1660  007F89  0A                 	db	10
  1661  007F8A  00                 	db	0
  1662  007F8B                     STR_39:
  1663  007F8B  7A                 	db	122	;'z'
  1664  007F8C  78                 	db	120	;'x'
  1665  007F8D  34                 	db	52	;'4'
  1666  007F8E  35                 	db	53	;'5'
  1667  007F8F  32                 	db	50	;'2'
  1668  007F90  32                 	db	50	;'2'
  1669  007F91  33                 	db	51	;'3'
  1670  007F92  33                 	db	51	;'3'
  1671  007F93  31                 	db	49	;'1'
  1672  007F94  00                 	db	0
  1673  007F95                     STR_36:
  1674  007F95  2B                 	db	43
  1675  007F96  43                 	db	67	;'C'
  1676  007F97  57                 	db	87	;'W'
  1677  007F98  4D                 	db	77	;'M'
  1678  007F99  4F                 	db	79	;'O'
  1679  007F9A  44                 	db	68	;'D'
  1680  007F9B  45                 	db	69	;'E'
  1681  007F9C  3A                 	db	58	;':'
  1682  007F9D  31                 	db	49	;'1'
  1683  007F9E  00                 	db	0
  1684  007F9F  2B                 	db	43
  1685  007FA0  43                 	db	67	;'C'
  1686  007FA1  57                 	db	87	;'W'
  1687  007FA2  4D                 	db	77	;'M'
  1688  007FA3  4F                 	db	79	;'O'
  1689  007FA4  44                 	db	68	;'D'
  1690  007FA5  45                 	db	69	;'E'
  1691  007FA6  3A                 	db	58	;':'
  1692  007FA7  32                 	db	50	;'2'
  1693  007FA8  00                 	db	0
  1694  007FA9                     STR_17:
  1695  007FA9  43                 	db	67	;'C'
  1696  007FAA  4F                 	db	79	;'O'
  1697  007FAB  4E                 	db	78	;'N'
  1698  007FAC  4E                 	db	78	;'N'
  1699  007FAD  45                 	db	69	;'E'
  1700  007FAE  43                 	db	67	;'C'
  1701  007FAF  54                 	db	84	;'T'
  1702  007FB0  45                 	db	69	;'E'
  1703  007FB1  44                 	db	68	;'D'
  1704  007FB2  00                 	db	0
  1705  007FB3                     STR_6:
  1706  007FB3  41                 	db	65	;'A'
  1707  007FB4  54                 	db	84	;'T'
  1708  007FB5  2B                 	db	43
  1709  007FB6  52                 	db	82	;'R'
  1710  007FB7  53                 	db	83	;'S'
  1711  007FB8  54                 	db	84	;'T'
  1712  007FB9  0D                 	db	13
  1713  007FBA  0A                 	db	10
  1714  007FBB  00                 	db	0
  1715  007FBC                     STR_3:
  1716  007FBC  53                 	db	83	;'S'
  1717  007FBD  45                 	db	69	;'E'
  1718  007FBE  4E                 	db	78	;'N'
  1719  007FBF  44                 	db	68	;'D'
  1720  007FC0  20                 	db	32
  1721  007FC1  4F                 	db	79	;'O'
  1722  007FC2  4B                 	db	75	;'K'
  1723  007FC3  00                 	db	0
  1724  007FC4                     STR_26:
  1725  007FC4  43                 	db	67	;'C'
  1726  007FC5  4F                 	db	79	;'O'
  1727  007FC6  4E                 	db	78	;'N'
  1728  007FC7  4E                 	db	78	;'N'
  1729  007FC8  45                 	db	69	;'E'
  1730  007FC9  43                 	db	67	;'C'
  1731  007FCA  54                 	db	84	;'T'
  1732  007FCB  00                 	db	0
  1733  007FCC                     STR_62:
  1734  007FCC  28                 	db	40
  1735  007FCD  6E                 	db	110	;'n'
  1736  007FCE  75                 	db	117	;'u'
  1737  007FCF  6C                 	db	108	;'l'
  1738  007FD0  6C                 	db	108	;'l'
  1739  007FD1  29                 	db	41
  1740  007FD2  00                 	db	0
  1741  007FD3                     STR_27:
  1742  007FD3  41                 	db	65	;'A'
  1743  007FD4  4C                 	db	76	;'L'
  1744  007FD5  52                 	db	82	;'R'
  1745  007FD6  45                 	db	69	;'E'
  1746  007FD7  41                 	db	65	;'A'
  1747  007FD8  59                 	db	89	;'Y'
  1748  007FD9  00                 	db	0
  1749  007FDA                     STR_8:
  1750  007FDA  72                 	db	114	;'r'
  1751  007FDB  65                 	db	101	;'e'
  1752  007FDC  61                 	db	97	;'a'
  1753  007FDD  64                 	db	100	;'d'
  1754  007FDE  79                 	db	121	;'y'
  1755  007FDF  00                 	db	0
  1756  007FE0                     STR_4:
  1757  007FE0  41                 	db	65	;'A'
  1758  007FE1  54                 	db	84	;'T'
  1759  007FE2  0D                 	db	13
  1760  007FE3  0A                 	db	10
  1761  007FE4  00                 	db	0
  1762  007FE5                     STR_58:
  1763  007FE5  35                 	db	53	;'5'
  1764  007FE6  30                 	db	48	;'0'
  1765  007FE7  30                 	db	48	;'0'
  1766  007FE8  30                 	db	48	;'0'
  1767  007FE9  00                 	db	0
  1768  007FEA                     STR_38:
  1769  007FEA  4B                 	db	75	;'K'
  1770  007FEB  45                 	db	69	;'E'
  1771  007FEC  4E                 	db	78	;'N'
  1772  007FED  00                 	db	0
  1773  007FEE                     STR_21:
  1774  007FEE  54                 	db	84	;'T'
  1775  007FEF  43                 	db	67	;'C'
  1776  007FF0  50                 	db	80	;'P'
  1777  007FF1  00                 	db	0
  1778  007FF2                     STR_23:
  1779  007FF2  55                 	db	85	;'U'
  1780  007FF3  44                 	db	68	;'D'
  1781  007FF4  50                 	db	80	;'P'
  1782  007FF5  00                 	db	0
  1783  007FF6  3E                 	db	62	;'>'
  1784  007FF7  20                 	db	32
  1785  007FF8  00                 	db	0
  1786  007FF9                     STR_60:
  1787  007FF9  00                 	db	0
  1788  007FFA  00                 	db	0
  1789  007FFB                     STR_59:
  1790  007FFB  21                 	db	33
  1791  007FFC  00                 	db	0
  1792  007FFD  34                 	db	52	;'4'
  1793  007FFE  00                 	db	0
  1794  0000                     
  1795                           ; #config settings
  1796  007FFF  00                 	db	0	; dummy byte at the end
  1797  0000                     
  1798                           	psect	cinit
  1799  0014EA                     __pcinit:
  1800                           	opt stack 0
  1801  0014EA                     start_initialization:
  1802                           	opt stack 0
  1803  0014EA                     __initialization:
  1804                           	opt stack 0
  1805                           
  1806                           ; Initialize objects allocated to COMRAM (8 bytes)
  1807                           ; load TBLPTR registers with __pidataCOMRAM
  1808  0014EA  0EA4               	movlw	low __pidataCOMRAM
  1809  0014EC  6EF6               	movwf	tblptrl,c
  1810  0014EE  0E18               	movlw	high __pidataCOMRAM
  1811  0014F0  6EF7               	movwf	tblptrh,c
  1812  0014F2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1813  0014F4  6EF8               	movwf	tblptru,c
  1814  0014F6  EE00  F049         	lfsr	0,__pdataCOMRAM
  1815  0014FA  EE10 F008          	lfsr	1,8
  1816  0014FE                     copy_data0:
  1817  0014FE  0009               	tblrd		*+
  1818  001500  CFF5 FFEE          	movff	tablat,postinc0
  1819  001504  50E5               	movf	postdec1,w,c
  1820  001506  50E1               	movf	fsr1l,w,c
  1821  001508  E1FA               	bnz	copy_data0
  1822                           
  1823                           ; Clear objects allocated to BANK3 (101 bytes)
  1824  00150A  EE03  F000         	lfsr	0,__pbssBANK3
  1825  00150E  0E65               	movlw	101
  1826  001510                     clear_0:
  1827  001510  6AEE               	clrf	postinc0,c
  1828  001512  06E8               	decf	wreg,f,c
  1829  001514  E1FD               	bnz	clear_0
  1830                           
  1831                           ; Clear objects allocated to BANK2 (201 bytes)
  1832  001516  EE02  F000         	lfsr	0,__pbssBANK2
  1833  00151A  0EC9               	movlw	201
  1834  00151C                     clear_1:
  1835  00151C  6AEE               	clrf	postinc0,c
  1836  00151E  06E8               	decf	wreg,f,c
  1837  001520  E1FD               	bnz	clear_1
  1838                           
  1839                           ; Clear objects allocated to COMRAM (1 bytes)
  1840  001522  6A51               	clrf	__pbssCOMRAM& (0+255),c
  1841  001524                     end_of_initialization:
  1842                           	opt stack 0
  1843  001524                     __end_of__initialization:
  1844                           	opt stack 0
  1845  001524  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1846  001526  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1847  001528  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1848  00152A  6EF8               	movwf	tblptru,c
  1849  00152C  0100               	movlb	0
  1850  00152E  EFCA  F009         	goto	_main	;jump to C main() function
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           postinc0	equ	0xFEE
  1856                           wreg	equ	0xFE8
  1857                           postdec1	equ	0xFE5
  1858                           fsr1l	equ	0xFE1
  1859                           
  1860                           	psect	bssCOMRAM
  1861  000051                     __pbssCOMRAM:
  1862                           	opt stack 0
  1863  000051                     _determine_servo_done:
  1864                           	opt stack 0
  1865  000051                     	ds	1
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           postinc0	equ	0xFEE
  1871                           wreg	equ	0xFE8
  1872                           postdec1	equ	0xFE5
  1873                           fsr1l	equ	0xFE1
  1874                           
  1875                           	psect	dataCOMRAM
  1876  000049                     __pdataCOMRAM:
  1877                           	opt stack 0
  1878  000049                     LCD_CreateFont@F3805:
  1879                           	opt stack 0
  1880  000049                     	ds	8
  1881                           tblptru	equ	0xFF8
  1882                           tblptrh	equ	0xFF7
  1883                           tblptrl	equ	0xFF6
  1884                           tablat	equ	0xFF5
  1885                           postinc0	equ	0xFEE
  1886                           wreg	equ	0xFE8
  1887                           postdec1	equ	0xFE5
  1888                           fsr1l	equ	0xFE1
  1889                           
  1890                           	psect	bssBANK2
  1891  000200                     __pbssBANK2:
  1892                           	opt stack 0
  1893  000200                     ESP8266_Link_Server@F4038:
  1894                           	opt stack 0
  1895  000200                     	ds	100
  1896  000264                     _strEsp8266_Fram_Record:
  1897                           	opt stack 0
  1898  000264                     	ds	101
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           postdec1	equ	0xFE5
  1906                           fsr1l	equ	0xFE1
  1907                           
  1908                           	psect	bssBANK3
  1909  000300                     __pbssBANK3:
  1910                           	opt stack 0
  1911  000300                     _strPc_Fram_Record:
  1912                           	opt stack 0
  1913  000300                     	ds	101
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           postinc0	equ	0xFEE
  1919                           wreg	equ	0xFE8
  1920                           postdec1	equ	0xFE5
  1921                           fsr1l	equ	0xFE1
  1922                           
  1923                           	psect	cstackBANK1
  1924  000100                     __pcstackBANK1:
  1925                           	opt stack 0
  1926  000100                     ESP8266_Link_Server@cCmd:
  1927                           	opt stack 0
  1928                           
  1929                           ; 120 bytes @ 0x0
  1930  000100                     	ds	120
  1931  000178                     ESP8266_Link_Server@cStr:
  1932                           	opt stack 0
  1933                           
  1934                           ; 100 bytes @ 0x78
  1935  000178                     	ds	100
  1936  0001DC                     ESP8266_Link_Server@enumE:
  1937                           	opt stack 0
  1938                           
  1939                           ; 1 bytes @ 0xDC
  1940  0001DC                     	ds	1
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           postdec1	equ	0xFE5
  1948                           fsr1l	equ	0xFE1
  1949                           
  1950                           	psect	cstackBANK0
  1951  000080                     __pcstackBANK0:
  1952                           	opt stack 0
  1953  000080                     ESP8266_JoinAP@cCmd:
  1954                           	opt stack 0
  1955                           
  1956                           ; 120 bytes @ 0x0
  1957  000080                     	ds	120
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           postdec1	equ	0xFE5
  1965                           fsr1l	equ	0xFE1
  1966                           
  1967                           	psect	cstackCOMRAM
  1968  000001                     __pcstackCOMRAM:
  1969                           	opt stack 0
  1970  000001                     ??_uart:
  1971  000001                     
  1972                           ; 1 bytes @ 0x0
  1973  000001                     	ds	16
  1974  000011                     uart@ch:
  1975                           	opt stack 0
  1976                           
  1977                           ; 1 bytes @ 0x10
  1978  000011                     	ds	1
  1979  000012                     ??_Delay10KTCYx:
  1980  000012                     ??_isdigit:
  1981  000012                     ?_strlen:
  1982                           	opt stack 0
  1983  000012                     ?_strchr:
  1984                           	opt stack 0
  1985  000012                     ?___wmul:
  1986                           	opt stack 0
  1987  000012                     ?___lwdiv:
  1988                           	opt stack 0
  1989  000012                     Delay10TCYx@unit:
  1990                           	opt stack 0
  1991  000012                     ESP8266_Uart@cmd:
  1992                           	opt stack 0
  1993  000012                     ___wmul@multiplier:
  1994                           	opt stack 0
  1995  000012                     ___lwdiv@dividend:
  1996                           	opt stack 0
  1997  000012                     memset@p1:
  1998                           	opt stack 0
  1999  000012                     strchr@ptr:
  2000                           	opt stack 0
  2001  000012                     strlen@s:
  2002                           	opt stack 0
  2003                           
  2004                           ; 2 bytes @ 0x11
  2005  000012                     	ds	1
  2006  000013                     Delay10KTCYx@unit:
  2007                           	opt stack 0
  2008  000013                     _isdigit$1608:
  2009                           	opt stack 0
  2010  000013                     delay_us@us:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x12
  2014  000013                     	ds	1
  2015  000014                     ??_strlen:
  2016  000014                     ??_ESP8266_Uart:
  2017  000014                     isdigit@c:
  2018                           	opt stack 0
  2019  000014                     delay_ms@ms:
  2020                           	opt stack 0
  2021  000014                     ___wmul@multiplicand:
  2022                           	opt stack 0
  2023  000014                     ___lwdiv@divisor:
  2024                           	opt stack 0
  2025  000014                     memset@c:
  2026                           	opt stack 0
  2027  000014                     strchr@chr:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0x13
  2031  000014                     	ds	1
  2032  000015                     ??_IIC_Send_Byte:
  2033  000015                     IIC_Wait_Ack@ucErrTime:
  2034                           	opt stack 0
  2035                           
  2036                           ; 1 bytes @ 0x14
  2037  000015                     	ds	1
  2038  000016                     IIC_Send_Byte@txd:
  2039                           	opt stack 0
  2040  000016                     ESP8266_Uart@index:
  2041                           	opt stack 0
  2042  000016                     ___wmul@product:
  2043                           	opt stack 0
  2044  000016                     ___lwdiv@quotient:
  2045                           	opt stack 0
  2046  000016                     memset@n:
  2047                           	opt stack 0
  2048  000016                     strlen@cp:
  2049                           	opt stack 0
  2050                           
  2051                           ; 2 bytes @ 0x15
  2052  000016                     	ds	1
  2053  000017                     IIC_Send_Byte@t:
  2054                           	opt stack 0
  2055                           
  2056                           ; 1 bytes @ 0x16
  2057  000017                     	ds	1
  2058  000018                     ?_strncmp:
  2059                           	opt stack 0
  2060  000018                     PCA9685_writeOneByte@data:
  2061                           	opt stack 0
  2062  000018                     ___lwdiv@counter:
  2063                           	opt stack 0
  2064  000018                     memset@p:
  2065                           	opt stack 0
  2066  000018                     strncmp@s1:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0x17
  2070  000018                     	ds	1
  2071  000019                     ?___lwmod:
  2072                           	opt stack 0
  2073  000019                     PCA9685_writeOneByte@addr:
  2074                           	opt stack 0
  2075  000019                     ___lwmod@dividend:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0x18
  2079  000019                     	ds	1
  2080  00001A                     transmit_finger@HL_Value:
  2081                           	opt stack 0
  2082  00001A                     strncmp@s2:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x19
  2086  00001A                     	ds	1
  2087  00001B                     ___lwmod@divisor:
  2088                           	opt stack 0
  2089                           
  2090                           ; 2 bytes @ 0x1A
  2091  00001B                     	ds	1
  2092  00001C                     transmit_finger@finger:
  2093                           	opt stack 0
  2094  00001C                     strncmp@len:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0x1B
  2098  00001C                     	ds	1
  2099  00001D                     transmit_finger@Hbyte:
  2100                           	opt stack 0
  2101  00001D                     ___lwmod@counter:
  2102                           	opt stack 0
  2103                           
  2104                           ; 1 bytes @ 0x1C
  2105  00001D                     	ds	1
  2106  00001E                     ??_strncmp:
  2107  00001E                     ?_sprintf:
  2108                           	opt stack 0
  2109  00001E                     transmit_finger@Lbyte:
  2110                           	opt stack 0
  2111  00001E                     sprintf@sp:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x1D
  2115  00001E                     	ds	1
  2116  00001F                     PWMt0PCA@up:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0x1E
  2120  00001F                     	ds	1
  2121  000020                     sprintf@f:
  2122                           	opt stack 0
  2123                           
  2124                           ; 2 bytes @ 0x1F
  2125  000020                     	ds	1
  2126  000021                     ?_strstr:
  2127                           	opt stack 0
  2128  000021                     PWMt0PCA@low:
  2129                           	opt stack 0
  2130  000021                     strstr@s1:
  2131                           	opt stack 0
  2132                           
  2133                           ; 2 bytes @ 0x20
  2134  000021                     	ds	2
  2135  000023                     PWMt0PCA@finger:
  2136                           	opt stack 0
  2137  000023                     strstr@s2:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x22
  2141  000023                     	ds	1
  2142  000024                     ADtoPWM@AD:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x23
  2146  000024                     	ds	1
  2147  000025                     ?_ESP8266_ReceiveString:
  2148                           	opt stack 0
  2149  000025                     ESP8266_Cmd@cmd:
  2150                           	opt stack 0
  2151                           
  2152                           ; 2 bytes @ 0x24
  2153  000025                     	ds	1
  2154  000026                     ??_ADtoPWM:
  2155                           
  2156                           ; 1 bytes @ 0x25
  2157  000026                     	ds	1
  2158  000027                     ??_ESP8266_ReceiveString:
  2159  000027                     ESP8266_Cmd@reply1:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x26
  2163  000027                     	ds	1
  2164  000028                     ??_sprintf:
  2165  000028                     ESP8266_ReceiveString@pRecStr:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x27
  2169  000028                     	ds	1
  2170  000029                     ESP8266_Cmd@reply2:
  2171                           	opt stack 0
  2172                           
  2173                           ; 2 bytes @ 0x28
  2174  000029                     	ds	1
  2175  00002A                     ADtoPWM@u0:
  2176                           	opt stack 0
  2177                           
  2178                           ; 2 bytes @ 0x29
  2179  00002A                     	ds	1
  2180  00002B                     ESP8266_Cmd@waittime:
  2181                           	opt stack 0
  2182                           
  2183                           ; 2 bytes @ 0x2A
  2184  00002B                     	ds	1
  2185  00002C                     ADtoPWM@u1:
  2186                           	opt stack 0
  2187  00002C                     _sprintf$1371:
  2188                           	opt stack 0
  2189                           
  2190                           ; 2 bytes @ 0x2B
  2191  00002C                     	ds	1
  2192  00002D                     _ESP8266_Cmd$1162:
  2193                           	opt stack 0
  2194                           
  2195                           ; 1 bytes @ 0x2C
  2196  00002D                     	ds	1
  2197  00002E                     ESP8266_Net_Mode_Choose@MODE:
  2198                           	opt stack 0
  2199  00002E                     ADtoPWM@u2:
  2200                           	opt stack 0
  2201  00002E                     _sprintf$1372:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x2D
  2205  00002E                     	ds	1
  2206  00002F                     
  2207                           ; 1 bytes @ 0x2E
  2208  00002F                     	ds	1
  2209  000030                     ADtoPWM@u3:
  2210                           	opt stack 0
  2211  000030                     _sprintf$1378:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0x2F
  2215  000030                     	ds	2
  2216  000032                     sprintf@idx:
  2217                           	opt stack 0
  2218  000032                     ADtoPWM@u4:
  2219                           	opt stack 0
  2220                           
  2221                           ; 2 bytes @ 0x31
  2222  000032                     	ds	1
  2223  000033                     sprintf@cp:
  2224                           	opt stack 0
  2225                           
  2226                           ; 2 bytes @ 0x32
  2227  000033                     	ds	1
  2228  000034                     ADtoPWM@w0:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x33
  2232  000034                     	ds	1
  2233  000035                     sprintf@len:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x34
  2237  000035                     	ds	1
  2238  000036                     ADtoPWM@w1:
  2239                           	opt stack 0
  2240                           
  2241                           ; 2 bytes @ 0x35
  2242  000036                     	ds	1
  2243  000037                     sprintf@ap:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x36
  2247  000037                     	ds	1
  2248  000038                     ADtoPWM@w2:
  2249                           	opt stack 0
  2250                           
  2251                           ; 2 bytes @ 0x37
  2252  000038                     	ds	1
  2253  000039                     sprintf@val:
  2254                           	opt stack 0
  2255                           
  2256                           ; 2 bytes @ 0x38
  2257  000039                     	ds	1
  2258  00003A                     ADtoPWM@w3:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x39
  2262  00003A                     	ds	1
  2263  00003B                     sprintf@prec:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x3A
  2267  00003B                     	ds	1
  2268  00003C                     ADtoPWM@w4:
  2269                           	opt stack 0
  2270  00003C                     sprintf@width:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x3B
  2274  00003C                     	ds	2
  2275  00003E                     sprintf@c:
  2276                           	opt stack 0
  2277                           
  2278                           ; 1 bytes @ 0x3D
  2279  00003E                     	ds	1
  2280  00003F                     sprintf@flag:
  2281                           	opt stack 0
  2282                           
  2283                           ; 2 bytes @ 0x3E
  2284  00003F                     	ds	2
  2285  000041                     ESP8266_JoinAP@pSSID:
  2286                           	opt stack 0
  2287  000041                     ESP8266_Link_Server@ip:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x40
  2291  000041                     	ds	2
  2292  000043                     ESP8266_JoinAP@pPassWord:
  2293                           	opt stack 0
  2294  000043                     ESP8266_Link_Server@ComNum:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x42
  2298  000043                     	ds	2
  2299  000045                     ESP8266_Link_Server@id:
  2300                           	opt stack 0
  2301                           
  2302                           ; 2 bytes @ 0x44
  2303  000045                     	ds	2
  2304  000047                     main@temp:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x46
  2308  000047                     	ds	2
  2309                           tblptru	equ	0xFF8
  2310                           tblptrh	equ	0xFF7
  2311                           tblptrl	equ	0xFF6
  2312                           tablat	equ	0xFF5
  2313                           postinc0	equ	0xFEE
  2314                           wreg	equ	0xFE8
  2315                           postdec1	equ	0xFE5
  2316                           fsr1l	equ	0xFE1
  2317                           
  2318 ;;
  2319 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2320 ;;
  2321 ;; *************** function _main *****************
  2322 ;; Defined at:
  2323 ;;		line 131 in file "main.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;		None
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  temp            2   70[COMRAM] PTR unsigned char 
  2328 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(100), NULL(0), strEsp8266_Fram_Record(101), 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2338 ;;      Params:         0       0       0       0       0       0       0
  2339 ;;      Locals:         2       0       0       0       0       0       0
  2340 ;;      Temps:          0       0       0       0       0       0       0
  2341 ;;      Totals:         2       0       0       0       0       0       0
  2342 ;;Total ram usage:        2 bytes
  2343 ;; Hardware stack levels required when called:    9
  2344 ;; This function calls:
  2345 ;;		_ADtoPWM
  2346 ;;		_ESP8266_ReceiveString
  2347 ;;		_ESP8266_client
  2348 ;;		_GPIO_initial
  2349 ;;		_PCA9685_init
  2350 ;;		_initial_UART
  2351 ;;		_memset
  2352 ;;		_oclillator_initial
  2353 ;;		_timer_intrrupt_initinal
  2354 ;; This function is called by:
  2355 ;;		Startup code after reset
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text0
  2360  001394                     __ptext0:
  2361                           	opt stack 0
  2362  001394                     _main:
  2363                           	opt stack 22
  2364                           
  2365                           ;main.c: 133: oclillator_initial();
  2366                           
  2367                           ;incstack = 0
  2368  001394  EC56  F00C         	call	_oclillator_initial	;wreg free
  2369                           
  2370                           ;main.c: 134: GPIO_initial();
  2371  001398  EC4B  F00C         	call	_GPIO_initial	;wreg free
  2372                           
  2373                           ;main.c: 135: PCA9685_init();
  2374  00139C  ECC4  F00B         	call	_PCA9685_init	;wreg free
  2375                           
  2376                           ;main.c: 136: determine_servo_done=1;
  2377  0013A0  0E01               	movlw	1
  2378  0013A2  6E51               	movwf	_determine_servo_done,c
  2379                           
  2380                           ;main.c: 137: timer_intrrupt_initinal();
  2381  0013A4  EC3B  F00C         	call	_timer_intrrupt_initinal	;wreg free
  2382                           
  2383                           ;main.c: 138: initial_UART();
  2384  0013A8  ECB2  F00B         	call	_initial_UART	;wreg free
  2385                           
  2386                           ;main.c: 139: ESP8266_client();
  2387  0013AC  ECB6  F007         	call	_ESP8266_client	;wreg free
  2388                           
  2389                           ;main.c: 150: char* temp;
  2390                           ;main.c: 152: memset(&(strEsp8266_Fram_Record.Data_RX_BUF[0]), '\0', 100);
  2391  0013B0  0E64               	movlw	low _strEsp8266_Fram_Record
  2392  0013B2  6E12               	movwf	memset@p1,c
  2393  0013B4  0E02               	movlw	high _strEsp8266_Fram_Record
  2394  0013B6  6E13               	movwf	memset@p1+1,c
  2395  0013B8  0E00               	movlw	0
  2396  0013BA  6E15               	movwf	memset@c+1,c
  2397  0013BC  0E00               	movlw	0
  2398  0013BE  6E14               	movwf	memset@c,c
  2399  0013C0  0E00               	movlw	0
  2400  0013C2  6E17               	movwf	memset@n+1,c
  2401  0013C4  0E64               	movlw	100
  2402  0013C6  6E16               	movwf	memset@n,c
  2403  0013C8  EC60  F00B         	call	_memset	;wreg free
  2404  0013CC                     l3431:
  2405                           
  2406                           ;main.c: 154: {
  2407                           ;main.c: 155: temp=ESP8266_ReceiveString();
  2408  0013CC  EC78  F008         	call	_ESP8266_ReceiveString	;wreg free
  2409  0013D0  C025  F047         	movff	?_ESP8266_ReceiveString,main@temp
  2410  0013D4  C026  F048         	movff	?_ESP8266_ReceiveString+1,main@temp+1
  2411                           
  2412                           ;main.c: 177: ADtoPWM(temp);
  2413  0013D8  C047  F024         	movff	main@temp,ADtoPWM@AD
  2414  0013DC  C048  F025         	movff	main@temp+1,ADtoPWM@AD+1
  2415  0013E0  EC5A  F004         	call	_ADtoPWM	;wreg free
  2416                           
  2417                           ;main.c: 178: strEsp8266_Fram_Record .InfBit .FramLength=0;
  2418  0013E4  0102               	movlb	2	; () banked
  2419  0013E6  91C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),0,b
  2420  0013E8  93C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),1,b
  2421  0013EA  95C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),2,b
  2422  0013EC  97C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),3,b
  2423  0013EE  99C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),4,b
  2424  0013F0  9BC8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),5,b
  2425  0013F2  9DC8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),6,b
  2426                           
  2427                           ; BSR set to: 2
  2428  0013F4  D7EB               	goto	l3431
  2429  0013F6                     __end_of_main:
  2430                           	opt stack 0
  2431                           tblptru	equ	0xFF8
  2432                           tblptrh	equ	0xFF7
  2433                           tblptrl	equ	0xFF6
  2434                           tablat	equ	0xFF5
  2435                           postinc0	equ	0xFEE
  2436                           wreg	equ	0xFE8
  2437                           postdec1	equ	0xFE5
  2438                           fsr1l	equ	0xFE1
  2439                           
  2440 ;; *************** function _timer_intrrupt_initinal *****************
  2441 ;; Defined at:
  2442 ;;		line 36 in file "harwave/initial.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;		None
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		None
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2456 ;;      Params:         0       0       0       0       0       0       0
  2457 ;;      Locals:         0       0       0       0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0
  2459 ;;      Totals:         0       0       0       0       0       0       0
  2460 ;;Total ram usage:        0 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    1
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		_main
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text1
  2471  001876                     __ptext1:
  2472                           	opt stack 0
  2473  001876                     _timer_intrrupt_initinal:
  2474                           	opt stack 29
  2475                           
  2476                           ;initial.c: 38: RCONbits.IPEN=1;
  2477                           
  2478                           ; BSR set to: 2
  2479                           ;incstack = 0
  2480  001876  8ED0               	bsf	4048,7,c	;volatile
  2481                           
  2482                           ;initial.c: 39: INTCONbits.GIE=1;
  2483  001878  8EF2               	bsf	intcon,7,c	;volatile
  2484                           
  2485                           ;initial.c: 40: INTCONbits.PEIE=1;
  2486  00187A  8CF2               	bsf	intcon,6,c	;volatile
  2487                           
  2488                           ;initial.c: 41: INTCONbits.TMR0IE=0;
  2489  00187C  9AF2               	bcf	intcon,5,c	;volatile
  2490                           
  2491                           ;initial.c: 42: INTCONbits.TMR0IF=0;
  2492  00187E  94F2               	bcf	intcon,2,c	;volatile
  2493                           
  2494                           ;initial.c: 43: PIE1bits.TMR2IE=0;
  2495  001880  929D               	bcf	3997,1,c	;volatile
  2496                           
  2497                           ;initial.c: 44: PIR1bits.TMR2IF=0;
  2498  001882  929E               	bcf	3998,1,c	;volatile
  2499  001884  0012               	return		;funcret
  2500  001886                     __end_of_timer_intrrupt_initinal:
  2501                           	opt stack 0
  2502                           tblptru	equ	0xFF8
  2503                           tblptrh	equ	0xFF7
  2504                           tblptrl	equ	0xFF6
  2505                           tablat	equ	0xFF5
  2506                           intcon	equ	0xFF2
  2507                           postinc0	equ	0xFEE
  2508                           wreg	equ	0xFE8
  2509                           postdec1	equ	0xFE5
  2510                           fsr1l	equ	0xFE1
  2511                           
  2512 ;; *************** function _oclillator_initial *****************
  2513 ;; Defined at:
  2514 ;;		line 13 in file "harwave/initial.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;		None
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;		None
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      void 
  2521 ;; Registers used:
  2522 ;;		None
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2528 ;;      Params:         0       0       0       0       0       0       0
  2529 ;;      Locals:         0       0       0       0       0       0       0
  2530 ;;      Temps:          0       0       0       0       0       0       0
  2531 ;;      Totals:         0       0       0       0       0       0       0
  2532 ;;Total ram usage:        0 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    1
  2535 ;; This function calls:
  2536 ;;		Nothing
  2537 ;; This function is called by:
  2538 ;;		_main
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           	psect	text2
  2543  0018AC                     __ptext2:
  2544                           	opt stack 0
  2545  0018AC                     _oclillator_initial:
  2546                           	opt stack 29
  2547                           
  2548                           ;initial.c: 15: OSCCONbits.IOFS=0;
  2549                           
  2550                           ;incstack = 0
  2551  0018AC  94D3               	bcf	4051,2,c	;volatile
  2552                           
  2553                           ;initial.c: 16: OSCCONbits.SCS0=0;
  2554  0018AE  90D3               	bcf	4051,0,c	;volatile
  2555                           
  2556                           ;initial.c: 17: OSCCONbits.SCS1=0;
  2557  0018B0  92D3               	bcf	4051,1,c	;volatile
  2558  0018B2  0012               	return		;funcret
  2559  0018B4                     __end_of_oclillator_initial:
  2560                           	opt stack 0
  2561                           tblptru	equ	0xFF8
  2562                           tblptrh	equ	0xFF7
  2563                           tblptrl	equ	0xFF6
  2564                           tablat	equ	0xFF5
  2565                           intcon	equ	0xFF2
  2566                           postinc0	equ	0xFEE
  2567                           wreg	equ	0xFE8
  2568                           postdec1	equ	0xFE5
  2569                           fsr1l	equ	0xFE1
  2570                           
  2571 ;; *************** function _memset *****************
  2572 ;; Defined at:
  2573 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memset.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  p1              2   17[COMRAM] PTR void 
  2576 ;;		 -> strEsp8266_Fram_Record(101), 
  2577 ;;  c               2   19[COMRAM] int 
  2578 ;;  n               2   21[COMRAM] unsigned int 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;  p               2   23[COMRAM] PTR unsigned char 
  2581 ;;		 -> strEsp8266_Fram_Record(101), 
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  2   17[COMRAM] PTR void 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2591 ;;      Params:         6       0       0       0       0       0       0
  2592 ;;      Locals:         2       0       0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0       0       0
  2594 ;;      Totals:         8       0       0       0       0       0       0
  2595 ;;Total ram usage:        8 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    1
  2598 ;; This function calls:
  2599 ;;		Nothing
  2600 ;; This function is called by:
  2601 ;;		_main
  2602 ;; This function uses a non-reentrant model
  2603 ;;
  2604                           
  2605                           	psect	text3
  2606  0016C0                     __ptext3:
  2607                           	opt stack 0
  2608  0016C0                     _memset:
  2609                           	opt stack 29
  2610                           
  2611                           ;incstack = 0
  2612  0016C0  C012  F018         	movff	memset@p1,memset@p
  2613  0016C4  C013  F019         	movff	memset@p1+1,memset@p+1
  2614  0016C8  D008               	goto	l3271
  2615  0016CA                     l3267:
  2616  0016CA  C018  FFD9         	movff	memset@p,fsr2l
  2617  0016CE  C019  FFDA         	movff	memset@p+1,fsr2h
  2618  0016D2  C014  FFDF         	movff	memset@c,indf2
  2619  0016D6  4A18               	infsnz	memset@p,f,c
  2620  0016D8  2A19               	incf	memset@p+1,f,c
  2621  0016DA                     l3271:
  2622  0016DA  0616               	decf	memset@n,f,c
  2623  0016DC  A0D8               	btfss	status,0,c
  2624  0016DE  0617               	decf	memset@n+1,f,c
  2625  0016E0  2816               	incf	memset@n,w,c
  2626  0016E2  E1F3               	bnz	l3267
  2627  0016E4  2817               	incf	memset@n+1,w,c
  2628  0016E6  B4D8               	btfsc	status,2,c
  2629  0016E8  0012               	return	
  2630  0016EA  D7EF               	goto	l3267
  2631  0016EC                     __end_of_memset:
  2632                           	opt stack 0
  2633                           tblptru	equ	0xFF8
  2634                           tblptrh	equ	0xFF7
  2635                           tblptrl	equ	0xFF6
  2636                           tablat	equ	0xFF5
  2637                           intcon	equ	0xFF2
  2638                           postinc0	equ	0xFEE
  2639                           wreg	equ	0xFE8
  2640                           postdec1	equ	0xFE5
  2641                           fsr1l	equ	0xFE1
  2642                           indf2	equ	0xFDF
  2643                           fsr2h	equ	0xFDA
  2644                           fsr2l	equ	0xFD9
  2645                           status	equ	0xFD8
  2646                           
  2647 ;; *************** function _initial_UART *****************
  2648 ;; Defined at:
  2649 ;;		line 22 in file "harwave/UART.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;		None
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;		None
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      void 
  2656 ;; Registers used:
  2657 ;;		wreg, status,2
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2663 ;;      Params:         0       0       0       0       0       0       0
  2664 ;;      Locals:         0       0       0       0       0       0       0
  2665 ;;      Temps:          0       0       0       0       0       0       0
  2666 ;;      Totals:         0       0       0       0       0       0       0
  2667 ;;Total ram usage:        0 bytes
  2668 ;; Hardware stack levels used:    1
  2669 ;; Hardware stack levels required when called:    1
  2670 ;; This function calls:
  2671 ;;		Nothing
  2672 ;; This function is called by:
  2673 ;;		_main
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text4
  2678  001764                     __ptext4:
  2679                           	opt stack 0
  2680  001764                     _initial_UART:
  2681                           	opt stack 29
  2682                           
  2683                           ;UART.c: 23: TXSTAbits.SYNC=0;
  2684                           
  2685                           ;incstack = 0
  2686  001764  98AC               	bcf	4012,4,c	;volatile
  2687                           
  2688                           ;UART.c: 24: TXSTAbits.TX9=0;
  2689  001766  9CAC               	bcf	4012,6,c	;volatile
  2690                           
  2691                           ;UART.c: 25: RCSTAbits.SPEN=1;
  2692  001768  8EAB               	bsf	4011,7,c	;volatile
  2693                           
  2694                           ;UART.c: 26: PIE1bits.TX1IE=0;
  2695  00176A  989D               	bcf	3997,4,c	;volatile
  2696                           
  2697                           ;UART.c: 27: TXSTAbits.TXEN=1;
  2698  00176C  8AAC               	bsf	4012,5,c	;volatile
  2699                           
  2700                           ;UART.c: 29: RCONbits.IPEN=1;
  2701  00176E  8ED0               	bsf	4048,7,c	;volatile
  2702                           
  2703                           ;UART.c: 30: INTCONbits.GIE=1;
  2704  001770  8EF2               	bsf	intcon,7,c	;volatile
  2705                           
  2706                           ;UART.c: 31: INTCONbits.PEIE=1;
  2707  001772  8CF2               	bsf	intcon,6,c	;volatile
  2708                           
  2709                           ;UART.c: 33: RCSTAbits.CREN=1;
  2710  001774  88AB               	bsf	4011,4,c	;volatile
  2711                           
  2712                           ;UART.c: 34: PIE1bits.RCIE=1;
  2713  001776  8A9D               	bsf	3997,5,c	;volatile
  2714                           
  2715                           ;UART.c: 35: RCSTAbits.RC9 = 0;
  2716  001778  9CAB               	bcf	4011,6,c	;volatile
  2717                           
  2718                           ;UART.c: 36: TXSTAbits.BRGH=1;
  2719  00177A  84AC               	bsf	4012,2,c	;volatile
  2720                           
  2721                           ;UART.c: 37: BAUDCONbits.BRG16=1;
  2722  00177C  86B8               	bsf	4024,3,c	;volatile
  2723                           
  2724                           ;UART.c: 38: SPBRGH=0;
  2725  00177E  0E00               	movlw	0
  2726  001780  6EB0               	movwf	4016,c	;volatile
  2727                           
  2728                           ;UART.c: 39: SPBRG=86;
  2729  001782  0E56               	movlw	86
  2730  001784  6EAF               	movwf	4015,c	;volatile
  2731  001786  0012               	return		;funcret
  2732  001788                     __end_of_initial_UART:
  2733                           	opt stack 0
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           intcon	equ	0xFF2
  2739                           postinc0	equ	0xFEE
  2740                           wreg	equ	0xFE8
  2741                           postdec1	equ	0xFE5
  2742                           fsr1l	equ	0xFE1
  2743                           indf2	equ	0xFDF
  2744                           fsr2h	equ	0xFDA
  2745                           fsr2l	equ	0xFD9
  2746                           status	equ	0xFD8
  2747                           
  2748 ;; *************** function _PCA9685_init *****************
  2749 ;; Defined at:
  2750 ;;		line 19 in file "harwave/initial.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;		None
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;		None
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      void 
  2757 ;; Registers used:
  2758 ;;		wreg, status,2, status,0, cstack
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2764 ;;      Params:         0       0       0       0       0       0       0
  2765 ;;      Locals:         0       0       0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0
  2767 ;;      Totals:         0       0       0       0       0       0       0
  2768 ;;Total ram usage:        0 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    6
  2771 ;; This function calls:
  2772 ;;		_IIC_Init
  2773 ;;		_PCA9685_writeOneByte
  2774 ;; This function is called by:
  2775 ;;		_main
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           	psect	text5
  2780  001788                     __ptext5:
  2781                           	opt stack 0
  2782  001788                     _PCA9685_init:
  2783                           	opt stack 24
  2784                           
  2785                           ;initial.c: 20: IIC_Init();
  2786                           
  2787                           ;incstack = 0
  2788  001788  ECFA  F00B         	call	_IIC_Init	;wreg free
  2789                           
  2790                           ;initial.c: 21: PCA9685_writeOneByte(0x00,0x11);
  2791  00178C  0E11               	movlw	17
  2792  00178E  6E18               	movwf	PCA9685_writeOneByte@data,c
  2793  001790  0E00               	movlw	0
  2794  001792  EC2C  F00B         	call	_PCA9685_writeOneByte
  2795                           
  2796                           ;initial.c: 22: PCA9685_writeOneByte(0xFE,(25000000/4096/267)-1);
  2797  001796  0E15               	movlw	21
  2798  001798  6E18               	movwf	PCA9685_writeOneByte@data,c
  2799  00179A  0EFE               	movlw	254
  2800  00179C  EC2C  F00B         	call	_PCA9685_writeOneByte
  2801                           
  2802                           ;initial.c: 23: PCA9685_writeOneByte(0x00,0x01);
  2803  0017A0  0E01               	movlw	1
  2804  0017A2  6E18               	movwf	PCA9685_writeOneByte@data,c
  2805  0017A4  0E00               	movlw	0
  2806  0017A6  EC2C  F00B         	call	_PCA9685_writeOneByte
  2807  0017AA  0012               	return		;funcret
  2808  0017AC                     __end_of_PCA9685_init:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           intcon	equ	0xFF2
  2815                           postinc0	equ	0xFEE
  2816                           wreg	equ	0xFE8
  2817                           postdec1	equ	0xFE5
  2818                           fsr1l	equ	0xFE1
  2819                           indf2	equ	0xFDF
  2820                           fsr2h	equ	0xFDA
  2821                           fsr2l	equ	0xFD9
  2822                           status	equ	0xFD8
  2823                           
  2824 ;; *************** function _IIC_Init *****************
  2825 ;; Defined at:
  2826 ;;		line 5 in file "harwave/softIIC.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2840 ;;      Params:         0       0       0       0       0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0
  2843 ;;      Totals:         0       0       0       0       0       0       0
  2844 ;;Total ram usage:        0 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    3
  2847 ;; This function calls:
  2848 ;;		_delay_us
  2849 ;; This function is called by:
  2850 ;;		_PCA9685_init
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text6
  2855  0017F4                     __ptext6:
  2856                           	opt stack 0
  2857  0017F4                     _IIC_Init:
  2858                           	opt stack 26
  2859                           
  2860                           ;softIIC.c: 8: TRISBbits.TRISB1 = 0;
  2861                           
  2862                           ;incstack = 0
  2863  0017F4  9293               	bcf	3987,1,c	;volatile
  2864                           
  2865                           ;softIIC.c: 9: TRISBbits.TRISB0 = 0;
  2866  0017F6  9093               	bcf	3987,0,c	;volatile
  2867                           
  2868                           ;softIIC.c: 12: PORTBbits.RB1 = 1;
  2869  0017F8  8281               	bsf	3969,1,c	;volatile
  2870                           
  2871                           ;softIIC.c: 13: delay_us(2);
  2872  0017FA  0E00               	movlw	0
  2873  0017FC  6E14               	movwf	delay_us@us+1,c
  2874  0017FE  0E02               	movlw	2
  2875  001800  6E13               	movwf	delay_us@us,c
  2876  001802  EC30  F00C         	call	_delay_us	;wreg free
  2877                           
  2878                           ;softIIC.c: 14: PORTBbits.RB0 = 1;
  2879  001806  8081               	bsf	3969,0,c	;volatile
  2880                           
  2881                           ;softIIC.c: 15: delay_us(2);
  2882  001808  0E00               	movlw	0
  2883  00180A  6E14               	movwf	delay_us@us+1,c
  2884  00180C  0E02               	movlw	2
  2885  00180E  6E13               	movwf	delay_us@us,c
  2886  001810  EC30  F00C         	call	_delay_us	;wreg free
  2887  001814  0012               	return		;funcret
  2888  001816                     __end_of_IIC_Init:
  2889                           	opt stack 0
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           intcon	equ	0xFF2
  2895                           postinc0	equ	0xFEE
  2896                           wreg	equ	0xFE8
  2897                           postdec1	equ	0xFE5
  2898                           fsr1l	equ	0xFE1
  2899                           indf2	equ	0xFDF
  2900                           fsr2h	equ	0xFDA
  2901                           fsr2l	equ	0xFD9
  2902                           status	equ	0xFD8
  2903                           
  2904 ;; *************** function _GPIO_initial *****************
  2905 ;; Defined at:
  2906 ;;		line 5 in file "harwave/initial.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;		None
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, status,2
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2920 ;;      Params:         0       0       0       0       0       0       0
  2921 ;;      Locals:         0       0       0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0
  2923 ;;      Totals:         0       0       0       0       0       0       0
  2924 ;;Total ram usage:        0 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    1
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_main
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text7
  2935  001896                     __ptext7:
  2936                           	opt stack 0
  2937  001896                     _GPIO_initial:
  2938                           	opt stack 29
  2939                           
  2940                           ;initial.c: 7: TRISD = 0x00;
  2941                           
  2942                           ;incstack = 0
  2943  001896  0E00               	movlw	0
  2944  001898  6E95               	movwf	3989,c	;volatile
  2945                           
  2946                           ;initial.c: 8: LATD = 0x00;
  2947  00189A  0E00               	movlw	0
  2948  00189C  6E8C               	movwf	3980,c	;volatile
  2949                           
  2950                           ;initial.c: 9: TRISAbits.RA0=0;
  2951  00189E  9092               	bcf	3986,0,c	;volatile
  2952                           
  2953                           ;initial.c: 10: LATAbits.LA0=0;
  2954  0018A0  9089               	bcf	3977,0,c	;volatile
  2955  0018A2  0012               	return		;funcret
  2956  0018A4                     __end_of_GPIO_initial:
  2957                           	opt stack 0
  2958                           tblptru	equ	0xFF8
  2959                           tblptrh	equ	0xFF7
  2960                           tblptrl	equ	0xFF6
  2961                           tablat	equ	0xFF5
  2962                           intcon	equ	0xFF2
  2963                           postinc0	equ	0xFEE
  2964                           wreg	equ	0xFE8
  2965                           postdec1	equ	0xFE5
  2966                           fsr1l	equ	0xFE1
  2967                           indf2	equ	0xFDF
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8
  2971                           
  2972 ;; *************** function _ESP8266_client *****************
  2973 ;; Defined at:
  2974 ;;		line 231 in file "harwave/UART.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2988 ;;      Params:         0       0       0       0       0       0       0
  2989 ;;      Locals:         0       0       0       0       0       0       0
  2990 ;;      Temps:          0       0       0       0       0       0       0
  2991 ;;      Totals:         0       0       0       0       0       0       0
  2992 ;;Total ram usage:        0 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    6
  2995 ;; This function calls:
  2996 ;;		_ESP8266_AT_Test
  2997 ;;		_ESP8266_Cmd
  2998 ;;		_ESP8266_JoinAP
  2999 ;;		_ESP8266_Link_Server
  3000 ;;		_ESP8266_Rst
  3001 ;;		_STA_MODE
  3002 ;; This function is called by:
  3003 ;;		_main
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text8
  3008  000F6C                     __ptext8:
  3009                           	opt stack 0
  3010  000F6C                     _ESP8266_client:
  3011                           	opt stack 24
  3012                           
  3013                           ;UART.c: 232: ESP8266_Rst ();
  3014                           
  3015                           ;incstack = 0
  3016  000F6C  EC8C  F00B         	call	_ESP8266_Rst	;wreg free
  3017                           
  3018                           ;UART.c: 233: ESP8266_AT_Test () ;
  3019  000F70  EC76  F00B         	call	_ESP8266_AT_Test	;wreg free
  3020                           
  3021                           ;UART.c: 234: ESP8266_Cmd ( (void *)"AT+CWQAP\r\n",(void *)"OK", 0 , 500 );
  3022  000F74  0E80               	movlw	low STR_49
  3023  000F76  6E25               	movwf	ESP8266_Cmd@cmd,c
  3024  000F78  0E7F               	movlw	high STR_49
  3025  000F7A  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3026  000F7C  0EC1               	movlw	low (STR_3+5)
  3027  000F7E  6E27               	movwf	ESP8266_Cmd@reply1,c
  3028  000F80  0E7F               	movlw	high (STR_3+5)
  3029  000F82  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3030  000F84  0E00               	movlw	0
  3031  000F86  6E29               	movwf	ESP8266_Cmd@reply2,c
  3032  000F88  0E00               	movlw	0
  3033  000F8A  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3034  000F8C  0E01               	movlw	1
  3035  000F8E  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3036  000F90  0EF4               	movlw	244
  3037  000F92  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3038  000F94  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  3039                           
  3040                           ;UART.c: 235: STA_MODE();
  3041  000F98  EC47  F00B         	call	_STA_MODE	;wreg free
  3042  000F9C                     l3239:
  3043  000F9C  0EEA               	movlw	low STR_38
  3044  000F9E  6E41               	movwf	ESP8266_JoinAP@pSSID,c
  3045  000FA0  0E7F               	movlw	high STR_38
  3046  000FA2  6E42               	movwf	ESP8266_JoinAP@pSSID+1,c
  3047  000FA4  0E8B               	movlw	low STR_39
  3048  000FA6  6E43               	movwf	ESP8266_JoinAP@pPassWord,c
  3049  000FA8  0E7F               	movlw	high STR_39
  3050  000FAA  6E44               	movwf	ESP8266_JoinAP@pPassWord+1,c
  3051  000FAC  EC50  F00A         	call	_ESP8266_JoinAP	;wreg free
  3052  000FB0  0900               	iorlw	0
  3053  000FB2  B4D8               	btfsc	status,2,c
  3054  000FB4  D7F3               	goto	l3239
  3055  000FB6                     l3241:
  3056  000FB6  0E05               	movlw	low STR_53
  3057  000FB8  6E25               	movwf	ESP8266_Cmd@cmd,c
  3058  000FBA  0E7F               	movlw	high STR_53
  3059  000FBC  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3060  000FBE  0EC1               	movlw	low (STR_3+5)
  3061  000FC0  6E27               	movwf	ESP8266_Cmd@reply1,c
  3062  000FC2  0E7F               	movlw	high (STR_3+5)
  3063  000FC4  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3064  000FC6  0E00               	movlw	0
  3065  000FC8  6E29               	movwf	ESP8266_Cmd@reply2,c
  3066  000FCA  0E00               	movlw	0
  3067  000FCC  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3068  000FCE  0E01               	movlw	1
  3069  000FD0  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3070  000FD2  0EF4               	movlw	244
  3071  000FD4  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3072  000FD6  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  3073  000FDA  0900               	iorlw	0
  3074  000FDC  B4D8               	btfsc	status,2,c
  3075  000FDE  D7EB               	goto	l3241
  3076  000FE0                     l3243:
  3077  000FE0  0E14               	movlw	low STR_41
  3078  000FE2  6E25               	movwf	ESP8266_Cmd@cmd,c
  3079  000FE4  0E7F               	movlw	high STR_41
  3080  000FE6  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3081  000FE8  0EC1               	movlw	low (STR_3+5)
  3082  000FEA  6E27               	movwf	ESP8266_Cmd@reply1,c
  3083  000FEC  0E7F               	movlw	high (STR_3+5)
  3084  000FEE  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3085  000FF0  0E00               	movlw	0
  3086  000FF2  6E29               	movwf	ESP8266_Cmd@reply2,c
  3087  000FF4  0E00               	movlw	0
  3088  000FF6  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3089  000FF8  0E01               	movlw	1
  3090  000FFA  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3091  000FFC  0EF4               	movlw	244
  3092  000FFE  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3093  001000  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  3094  001004  0900               	iorlw	0
  3095  001006  B4D8               	btfsc	status,2,c
  3096  001008  D7EB               	goto	l3243
  3097  00100A                     l3245:
  3098  00100A  0E74               	movlw	low STR_57
  3099  00100C  6E41               	movwf	ESP8266_Link_Server@ip,c
  3100  00100E  0E7F               	movlw	high STR_57
  3101  001010  6E42               	movwf	ESP8266_Link_Server@ip+1,c
  3102  001012  0EE5               	movlw	low STR_58
  3103  001014  6E43               	movwf	ESP8266_Link_Server@ComNum,c
  3104  001016  0E7F               	movlw	high STR_58
  3105  001018  6E44               	movwf	ESP8266_Link_Server@ComNum+1,c
  3106  00101A  0E00               	movlw	0
  3107  00101C  6E46               	movwf	ESP8266_Link_Server@id+1,c
  3108  00101E  0E07               	movlw	7
  3109  001020  6E45               	movwf	ESP8266_Link_Server@id,c
  3110  001022  0E00               	movlw	0
  3111  001024  ECC1  F006         	call	_ESP8266_Link_Server
  3112  001028  0900               	iorlw	0
  3113  00102A  A4D8               	btfss	status,2,c
  3114  00102C  0012               	return	
  3115  00102E  D7ED               	goto	l3245
  3116  001030                     __end_of_ESP8266_client:
  3117                           	opt stack 0
  3118                           tblptru	equ	0xFF8
  3119                           tblptrh	equ	0xFF7
  3120                           tblptrl	equ	0xFF6
  3121                           tablat	equ	0xFF5
  3122                           intcon	equ	0xFF2
  3123                           postinc0	equ	0xFEE
  3124                           wreg	equ	0xFE8
  3125                           postdec1	equ	0xFE5
  3126                           fsr1l	equ	0xFE1
  3127                           indf2	equ	0xFDF
  3128                           fsr2h	equ	0xFDA
  3129                           fsr2l	equ	0xFD9
  3130                           status	equ	0xFD8
  3131                           
  3132 ;; *************** function _STA_MODE *****************
  3133 ;; Defined at:
  3134 ;;		line 215 in file "harwave/UART.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3148 ;;      Params:         0       0       0       0       0       0       0
  3149 ;;      Locals:         0       0       0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0
  3151 ;;      Totals:         0       0       0       0       0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    5
  3155 ;; This function calls:
  3156 ;;		_ESP8266_Cmd
  3157 ;;		_ESP8266_Net_Mode_Choose
  3158 ;; This function is called by:
  3159 ;;		_ESP8266_client
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text9
  3164  00168E                     __ptext9:
  3165                           	opt stack 0
  3166  00168E                     _STA_MODE:
  3167                           	opt stack 24
  3168                           
  3169                           ;UART.c: 216: ESP8266_Net_Mode_Choose ( STA ) ;
  3170                           
  3171                           ;incstack = 0
  3172  00168E  0E00               	movlw	0
  3173  001690  ECC8  F008         	call	_ESP8266_Net_Mode_Choose
  3174  001694                     l3123:
  3175  001694  0E5A               	movlw	low STR_32
  3176  001696  6E25               	movwf	ESP8266_Cmd@cmd,c
  3177  001698  0E7F               	movlw	high STR_32
  3178  00169A  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3179  00169C  0E95               	movlw	low STR_36
  3180  00169E  6E27               	movwf	ESP8266_Cmd@reply1,c
  3181  0016A0  0E7F               	movlw	high STR_36
  3182  0016A2  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3183  0016A4  0EC1               	movlw	low (STR_3+5)
  3184  0016A6  6E29               	movwf	ESP8266_Cmd@reply2,c
  3185  0016A8  0E7F               	movlw	high (STR_3+5)
  3186  0016AA  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3187  0016AC  0E00               	movlw	0
  3188  0016AE  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3189  0016B0  0E64               	movlw	100
  3190  0016B2  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3191  0016B4  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  3192  0016B8  0900               	iorlw	0
  3193  0016BA  A4D8               	btfss	status,2,c
  3194  0016BC  0012               	return	
  3195  0016BE  D7EA               	goto	l3123
  3196  0016C0                     __end_of_STA_MODE:
  3197                           	opt stack 0
  3198                           tblptru	equ	0xFF8
  3199                           tblptrh	equ	0xFF7
  3200                           tblptrl	equ	0xFF6
  3201                           tablat	equ	0xFF5
  3202                           intcon	equ	0xFF2
  3203                           postinc0	equ	0xFEE
  3204                           wreg	equ	0xFE8
  3205                           postdec1	equ	0xFE5
  3206                           fsr1l	equ	0xFE1
  3207                           indf2	equ	0xFDF
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _ESP8266_Net_Mode_Choose *****************
  3213 ;; Defined at:
  3214 ;;		line 133 in file "harwave/UART.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  MODE            1    wreg     enum E3772
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  MODE            1   45[COMRAM] enum E3772
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  1    wreg      unsigned char 
  3221 ;; Registers used:
  3222 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3228 ;;      Params:         0       0       0       0       0       0       0
  3229 ;;      Locals:         1       0       0       0       0       0       0
  3230 ;;      Temps:          0       0       0       0       0       0       0
  3231 ;;      Totals:         1       0       0       0       0       0       0
  3232 ;;Total ram usage:        1 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; Hardware stack levels required when called:    4
  3235 ;; This function calls:
  3236 ;;		_ESP8266_Cmd
  3237 ;; This function is called by:
  3238 ;;		_STA_MODE
  3239 ;;		_AP_MODE
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           	psect	text10
  3244  001190                     __ptext10:
  3245                           	opt stack 0
  3246  001190                     _ESP8266_Net_Mode_Choose:
  3247                           	opt stack 24
  3248                           
  3249                           ;incstack = 0
  3250                           ;ESP8266_Net_Mode_Choose@MODE stored from wreg
  3251  001190  6E2E               	movwf	ESP8266_Net_Mode_Choose@MODE,c
  3252                           
  3253                           ;UART.c: 136: switch ( MODE )
  3254  001192  D039               	goto	l3037
  3255  001194                     l3023:
  3256                           
  3257                           ;UART.c: 139: return ESP8266_Cmd ( (void*)"AT+CWMODE=1\r\n", (void*)"OK", 0, 2500 );
  3258                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  3259  001194  0E22               	movlw	low STR_9
  3260  001196  6E25               	movwf	ESP8266_Cmd@cmd,c
  3261  001198  0E7F               	movlw	high STR_9
  3262  00119A  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3263  00119C  0EC1               	movlw	low (STR_3+5)
  3264  00119E  6E27               	movwf	ESP8266_Cmd@reply1,c
  3265  0011A0  0E7F               	movlw	high (STR_3+5)
  3266  0011A2  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3267  0011A4  0E00               	movlw	0
  3268  0011A6  6E29               	movwf	ESP8266_Cmd@reply2,c
  3269  0011A8  0E00               	movlw	0
  3270  0011AA  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3271  0011AC  0E09               	movlw	9
  3272  0011AE  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3273  0011B0  0EC4               	movlw	196
  3274  0011B2  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3275  0011B4  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  3276  0011B8  0012               	return	
  3277  0011BA                     l3027:
  3278                           
  3279                           ;UART.c: 142: return ESP8266_Cmd ( (void*)"AT+CWMODE=2\r\n", (void*)"OK", 0, 2500 );
  3280                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  3281  0011BA  0E3E               	movlw	low STR_11
  3282  0011BC  6E25               	movwf	ESP8266_Cmd@cmd,c
  3283  0011BE  0E7F               	movlw	high STR_11
  3284  0011C0  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3285  0011C2  0EC1               	movlw	low (STR_3+5)
  3286  0011C4  6E27               	movwf	ESP8266_Cmd@reply1,c
  3287  0011C6  0E7F               	movlw	high (STR_3+5)
  3288  0011C8  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3289  0011CA  0E00               	movlw	0
  3290  0011CC  6E29               	movwf	ESP8266_Cmd@reply2,c
  3291  0011CE  0E00               	movlw	0
  3292  0011D0  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3293  0011D2  0E09               	movlw	9
  3294  0011D4  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3295  0011D6  0EC4               	movlw	196
  3296  0011D8  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3297  0011DA  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  3298  0011DE  0012               	return	
  3299  0011E0                     l3031:
  3300                           
  3301                           ;UART.c: 145: return ESP8266_Cmd ( (void*)"AT+CWMODE=3\r\n", (void*)"OK", 0, 2500 );
  3302                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  3303  0011E0  0E4C               	movlw	low STR_13
  3304  0011E2  6E25               	movwf	ESP8266_Cmd@cmd,c
  3305  0011E4  0E7F               	movlw	high STR_13
  3306  0011E6  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3307  0011E8  0EC1               	movlw	low (STR_3+5)
  3308  0011EA  6E27               	movwf	ESP8266_Cmd@reply1,c
  3309  0011EC  0E7F               	movlw	high (STR_3+5)
  3310  0011EE  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3311  0011F0  0E00               	movlw	0
  3312  0011F2  6E29               	movwf	ESP8266_Cmd@reply2,c
  3313  0011F4  0E00               	movlw	0
  3314  0011F6  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3315  0011F8  0E09               	movlw	9
  3316  0011FA  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3317  0011FC  0EC4               	movlw	196
  3318  0011FE  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3319  001200  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  3320                           
  3321                           ;UART.c: 149: }
  3322                           
  3323                           ;UART.c: 148: return (bool)0;
  3324                           ;	Return value of _ESP8266_Net_Mode_Choose is never used
  3325                           
  3326                           ;UART.c: 147: default:
  3327  001204  0012               	return	
  3328  001206                     l3037:
  3329  001206  502E               	movf	ESP8266_Net_Mode_Choose@MODE,w,c
  3330                           
  3331                           ; Switch size 1, requested type "space"
  3332                           ; Number of cases is 3, Range of values is 0 to 2
  3333                           ; switch strategies available:
  3334                           ; Name         Instructions Cycles
  3335                           ; simple_byte           10     6 (average)
  3336                           ;	Chosen strategy is simple_byte
  3337  001208  0A00               	xorlw	0	; case 0
  3338  00120A  B4D8               	btfsc	status,2,c
  3339  00120C  D7C3               	goto	l3023
  3340  00120E  0A01               	xorlw	1	; case 1
  3341  001210  B4D8               	btfsc	status,2,c
  3342  001212  D7D3               	goto	l3027
  3343  001214  0A03               	xorlw	3	; case 2
  3344  001216  A4D8               	btfss	status,2,c
  3345  001218  0012               	return	
  3346  00121A  D7E2               	goto	l3031
  3347  00121C                     __end_of_ESP8266_Net_Mode_Choose:
  3348                           	opt stack 0
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           intcon	equ	0xFF2
  3354                           postinc0	equ	0xFEE
  3355                           wreg	equ	0xFE8
  3356                           postdec1	equ	0xFE5
  3357                           fsr1l	equ	0xFE1
  3358                           indf2	equ	0xFDF
  3359                           fsr2h	equ	0xFDA
  3360                           fsr2l	equ	0xFD9
  3361                           status	equ	0xFD8
  3362                           
  3363 ;; *************** function _ESP8266_Rst *****************
  3364 ;; Defined at:
  3365 ;;		line 120 in file "harwave/UART.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;		None
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;		None
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  1    wreg      void 
  3372 ;; Registers used:
  3373 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3379 ;;      Params:         0       0       0       0       0       0       0
  3380 ;;      Locals:         0       0       0       0       0       0       0
  3381 ;;      Temps:          0       0       0       0       0       0       0
  3382 ;;      Totals:         0       0       0       0       0       0       0
  3383 ;;Total ram usage:        0 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    4
  3386 ;; This function calls:
  3387 ;;		_ESP8266_Cmd
  3388 ;; This function is called by:
  3389 ;;		_ESP8266_client
  3390 ;;		_ESP8266_Server
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text11
  3395  001718                     __ptext11:
  3396                           	opt stack 0
  3397  001718                     _ESP8266_Rst:
  3398                           	opt stack 25
  3399                           
  3400                           ;UART.c: 123: ESP8266_Cmd ( (void*)"AT+RST\r\n", (void*)"OK", (void*)"ready", 2500 );
  3401                           
  3402                           ;incstack = 0
  3403  001718  0EB3               	movlw	low STR_6
  3404  00171A  6E25               	movwf	ESP8266_Cmd@cmd,c
  3405  00171C  0E7F               	movlw	high STR_6
  3406  00171E  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3407  001720  0EC1               	movlw	low (STR_3+5)
  3408  001722  6E27               	movwf	ESP8266_Cmd@reply1,c
  3409  001724  0E7F               	movlw	high (STR_3+5)
  3410  001726  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3411  001728  0EDA               	movlw	low STR_8
  3412  00172A  6E29               	movwf	ESP8266_Cmd@reply2,c
  3413  00172C  0E7F               	movlw	high STR_8
  3414  00172E  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3415  001730  0E09               	movlw	9
  3416  001732  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3417  001734  0EC4               	movlw	196
  3418  001736  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3419  001738  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  3420  00173C  0012               	return		;funcret
  3421  00173E                     __end_of_ESP8266_Rst:
  3422                           	opt stack 0
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           intcon	equ	0xFF2
  3428                           postinc0	equ	0xFEE
  3429                           wreg	equ	0xFE8
  3430                           postdec1	equ	0xFE5
  3431                           fsr1l	equ	0xFE1
  3432                           indf2	equ	0xFDF
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function _ESP8266_Link_Server *****************
  3438 ;; Defined at:
  3439 ;;		line 170 in file "harwave/UART.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  enumE           1    wreg     enum E3769
  3442 ;;  ip              2   64[COMRAM] PTR unsigned char 
  3443 ;;		 -> STR_57(12), 
  3444 ;;  ComNum          2   66[COMRAM] PTR unsigned char 
  3445 ;;		 -> STR_58(5), 
  3446 ;;  id              2   68[COMRAM] int 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  enumE           1  220[BANK1 ] enum E3769
  3449 ;;  cCmd          120    0[BANK1 ] unsigned char [120]
  3450 ;;  cStr          100  120[BANK1 ] unsigned char [100]
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      unsigned char 
  3453 ;; Registers used:
  3454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3460 ;;      Params:         6       0       0       0       0       0       0
  3461 ;;      Locals:         0       0     221       0       0       0       0
  3462 ;;      Temps:          0       0       0       0       0       0       0
  3463 ;;      Totals:         6       0     221       0       0       0       0
  3464 ;;Total ram usage:      227 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    4
  3467 ;; This function calls:
  3468 ;;		_ESP8266_Cmd
  3469 ;;		_sprintf
  3470 ;; This function is called by:
  3471 ;;		_ESP8266_client
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           	psect	text12
  3476  000D82                     __ptext12:
  3477                           	opt stack 0
  3478  000D82                     _ESP8266_Link_Server:
  3479                           	opt stack 25
  3480                           
  3481                           ;incstack = 0
  3482                           ;ESP8266_Link_Server@enumE stored from wreg
  3483  000D82  0101               	movlb	1	; () banked
  3484  000D84  6FDC               	movwf	ESP8266_Link_Server@enumE& (0+255),b
  3485                           
  3486                           ;UART.c: 172: char cStr [100] = { 0 }, cCmd [120];
  3487  000D86  EE22  F000         	lfsr	2,ESP8266_Link_Server@F4038
  3488  000D8A  EE11  F078         	lfsr	1,ESP8266_Link_Server@cStr
  3489  000D8E  0E63               	movlw	99
  3490  000D90                     u2671:
  3491  000D90  CFDB FFE3          	movff	plusw2,plusw1
  3492  000D94  06E8               	decf	wreg,f,c
  3493  000D96  E2FC               	bc	u2671
  3494                           
  3495                           ;UART.c: 174: switch ( enumE )
  3496  000D98  D02E               	goto	l3109
  3497  000D9A                     l3103:
  3498                           
  3499                           ;UART.c: 177: sprintf ( cStr, (void*)"\"%s\",\"%s\",%s", "TCP", ip, ComNum );
  3500  000D9A  0E78               	movlw	low ESP8266_Link_Server@cStr
  3501  000D9C  6E1E               	movwf	sprintf@sp,c
  3502  000D9E  0E01               	movlw	high ESP8266_Link_Server@cStr
  3503  000DA0  6E1F               	movwf	sprintf@sp+1,c
  3504  000DA2  0E67               	movlw	low STR_20
  3505  000DA4  6E20               	movwf	sprintf@f,c
  3506  000DA6  0E7F               	movlw	high STR_20
  3507  000DA8  6E21               	movwf	sprintf@f+1,c
  3508  000DAA  0EEE               	movlw	low STR_21
  3509  000DAC  6E22               	movwf	?_sprintf+4,c
  3510  000DAE  0E7F               	movlw	high STR_21
  3511  000DB0  6E23               	movwf	?_sprintf+5,c
  3512  000DB2  C041  F024         	movff	ESP8266_Link_Server@ip,?_sprintf+6
  3513  000DB6  C042  F025         	movff	ESP8266_Link_Server@ip+1,?_sprintf+7
  3514  000DBA  C043  F026         	movff	ESP8266_Link_Server@ComNum,?_sprintf+8
  3515  000DBE  C044  F027         	movff	ESP8266_Link_Server@ComNum+1,?_sprintf+9
  3516  000DC2  EC09  F000         	call	_sprintf	;wreg free
  3517                           
  3518                           ;UART.c: 178: break;
  3519  000DC6  D01F               	goto	l3111
  3520  000DC8                     l3105:
  3521                           
  3522                           ;UART.c: 181: sprintf ( cStr, (void*)"\"%s\",\"%s\",%s", "UDP", ip, ComNum );
  3523  000DC8  0E78               	movlw	low ESP8266_Link_Server@cStr
  3524  000DCA  6E1E               	movwf	sprintf@sp,c
  3525  000DCC  0E01               	movlw	high ESP8266_Link_Server@cStr
  3526  000DCE  6E1F               	movwf	sprintf@sp+1,c
  3527  000DD0  0E67               	movlw	low STR_20
  3528  000DD2  6E20               	movwf	sprintf@f,c
  3529  000DD4  0E7F               	movlw	high STR_20
  3530  000DD6  6E21               	movwf	sprintf@f+1,c
  3531  000DD8  0EF2               	movlw	low STR_23
  3532  000DDA  6E22               	movwf	?_sprintf+4,c
  3533  000DDC  0E7F               	movlw	high STR_23
  3534  000DDE  6E23               	movwf	?_sprintf+5,c
  3535  000DE0  C041  F024         	movff	ESP8266_Link_Server@ip,?_sprintf+6
  3536  000DE4  C042  F025         	movff	ESP8266_Link_Server@ip+1,?_sprintf+7
  3537  000DE8  C043  F026         	movff	ESP8266_Link_Server@ComNum,?_sprintf+8
  3538  000DEC  C044  F027         	movff	ESP8266_Link_Server@ComNum+1,?_sprintf+9
  3539  000DF0  EC09  F000         	call	_sprintf	;wreg free
  3540                           
  3541                           ;UART.c: 186: }
  3542                           
  3543                           ;UART.c: 185: break;
  3544                           
  3545                           ;UART.c: 184: default:
  3546                           
  3547                           ;UART.c: 182: break;
  3548  000DF4  D008               	goto	l3111
  3549  000DF6                     l3109:
  3550  000DF6  0101               	movlb	1	; () banked
  3551  000DF8  51DC               	movf	ESP8266_Link_Server@enumE& (0+255),w,b
  3552                           
  3553                           ; Switch size 1, requested type "space"
  3554                           ; Number of cases is 2, Range of values is 0 to 1
  3555                           ; switch strategies available:
  3556                           ; Name         Instructions Cycles
  3557                           ; simple_byte            7     4 (average)
  3558                           ;	Chosen strategy is simple_byte
  3559  000DFA  0A00               	xorlw	0	; case 0
  3560  000DFC  B4D8               	btfsc	status,2,c
  3561  000DFE  D7CD               	goto	l3103
  3562  000E00  0A01               	xorlw	1	; case 1
  3563  000E02  B4D8               	btfsc	status,2,c
  3564  000E04  D7E1               	goto	l3105
  3565  000E06                     l3111:
  3566                           
  3567                           ;UART.c: 188: if ( id < 5 )
  3568  000E06  BE46               	btfsc	ESP8266_Link_Server@id+1,7,c
  3569  000E08  D006               	goto	l3113
  3570  000E0A  5046               	movf	ESP8266_Link_Server@id+1,w,c
  3571  000E0C  E117               	bnz	l3115
  3572  000E0E  0E05               	movlw	5
  3573  000E10  5C45               	subwf	ESP8266_Link_Server@id,w,c
  3574  000E12  B0D8               	btfsc	status,0,c
  3575  000E14  D013               	goto	l3115
  3576  000E16                     l3113:
  3577                           
  3578                           ;UART.c: 189: sprintf ( cCmd, (void*)"AT+CIPSTART=%d,%s\r\n", id, cStr);
  3579  000E16  0E00               	movlw	low ESP8266_Link_Server@cCmd
  3580  000E18  6E1E               	movwf	sprintf@sp,c
  3581  000E1A  0E01               	movlw	high ESP8266_Link_Server@cCmd
  3582  000E1C  6E1F               	movwf	sprintf@sp+1,c
  3583  000E1E  0E9C               	movlw	low STR_24
  3584  000E20  6E20               	movwf	sprintf@f,c
  3585  000E22  0E7E               	movlw	high STR_24
  3586  000E24  6E21               	movwf	sprintf@f+1,c
  3587  000E26  C045  F022         	movff	ESP8266_Link_Server@id,?_sprintf+4
  3588  000E2A  C046  F023         	movff	ESP8266_Link_Server@id+1,?_sprintf+5
  3589  000E2E  0E78               	movlw	low ESP8266_Link_Server@cStr
  3590  000E30  6E24               	movwf	?_sprintf+6,c
  3591  000E32  0E01               	movlw	high ESP8266_Link_Server@cStr
  3592  000E34  6E25               	movwf	?_sprintf+7,c
  3593  000E36  EC09  F000         	call	_sprintf	;wreg free
  3594  000E3A  D00E               	goto	l3117
  3595  000E3C                     l3115:
  3596                           
  3597                           ;UART.c: 191: else
  3598                           ;UART.c: 192: sprintf ( cCmd, (void*)"AT+CIPSTART=%s\r\n", cStr );
  3599  000E3C  0E00               	movlw	low ESP8266_Link_Server@cCmd
  3600  000E3E  6E1E               	movwf	sprintf@sp,c
  3601  000E40  0E01               	movlw	high ESP8266_Link_Server@cCmd
  3602  000E42  6E1F               	movwf	sprintf@sp+1,c
  3603  000E44  0EE5               	movlw	low STR_25
  3604  000E46  6E20               	movwf	sprintf@f,c
  3605  000E48  0E7E               	movlw	high STR_25
  3606  000E4A  6E21               	movwf	sprintf@f+1,c
  3607  000E4C  0E78               	movlw	low ESP8266_Link_Server@cStr
  3608  000E4E  6E22               	movwf	?_sprintf+4,c
  3609  000E50  0E01               	movlw	high ESP8266_Link_Server@cStr
  3610  000E52  6E23               	movwf	?_sprintf+5,c
  3611  000E54  EC09  F000         	call	_sprintf	;wreg free
  3612  000E58                     l3117:
  3613                           
  3614                           ;UART.c: 194: return ESP8266_Cmd ( cCmd, (void*)"CONNECT",(void*)"ALREAY", 90 );
  3615  000E58  0E00               	movlw	low ESP8266_Link_Server@cCmd
  3616  000E5A  6E25               	movwf	ESP8266_Cmd@cmd,c
  3617  000E5C  0E01               	movlw	high ESP8266_Link_Server@cCmd
  3618  000E5E  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3619  000E60  0EC4               	movlw	low STR_26
  3620  000E62  6E27               	movwf	ESP8266_Cmd@reply1,c
  3621  000E64  0E7F               	movlw	high STR_26
  3622  000E66  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3623  000E68  0ED3               	movlw	low STR_27
  3624  000E6A  6E29               	movwf	ESP8266_Cmd@reply2,c
  3625  000E6C  0E7F               	movlw	high STR_27
  3626  000E6E  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3627  000E70  0E00               	movlw	0
  3628  000E72  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3629  000E74  0E5A               	movlw	90
  3630  000E76  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3631  000E78  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  3632  000E7C  0012               	return	
  3633  000E7E                     __end_of_ESP8266_Link_Server:
  3634                           	opt stack 0
  3635                           tblptru	equ	0xFF8
  3636                           tblptrh	equ	0xFF7
  3637                           tblptrl	equ	0xFF6
  3638                           tablat	equ	0xFF5
  3639                           intcon	equ	0xFF2
  3640                           postinc0	equ	0xFEE
  3641                           wreg	equ	0xFE8
  3642                           postdec1	equ	0xFE5
  3643                           plusw1	equ	0xFE3
  3644                           fsr1l	equ	0xFE1
  3645                           indf2	equ	0xFDF
  3646                           plusw2	equ	0xFDB
  3647                           fsr2h	equ	0xFDA
  3648                           fsr2l	equ	0xFD9
  3649                           status	equ	0xFD8
  3650                           
  3651 ;; *************** function _ESP8266_JoinAP *****************
  3652 ;; Defined at:
  3653 ;;		line 152 in file "harwave/UART.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;  pSSID           2   64[COMRAM] PTR unsigned char 
  3656 ;;		 -> STR_51(4), 
  3657 ;;  pPassWord       2   66[COMRAM] PTR unsigned char 
  3658 ;;		 -> STR_52(10), 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  cCmd          120    0[BANK0 ] unsigned char [120]
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      unsigned char 
  3663 ;; Registers used:
  3664 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3670 ;;      Params:         4       0       0       0       0       0       0
  3671 ;;      Locals:         0     120       0       0       0       0       0
  3672 ;;      Temps:          0       0       0       0       0       0       0
  3673 ;;      Totals:         4     120       0       0       0       0       0
  3674 ;;Total ram usage:      124 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:    4
  3677 ;; This function calls:
  3678 ;;		_ESP8266_Cmd
  3679 ;;		_sprintf
  3680 ;; This function is called by:
  3681 ;;		_ESP8266_client
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text13
  3686  0014A0                     __ptext13:
  3687                           	opt stack 0
  3688  0014A0                     _ESP8266_JoinAP:
  3689                           	opt stack 25
  3690                           
  3691                           ;UART.c: 154: char cCmd [120];
  3692                           ;UART.c: 156: sprintf ( cCmd, (void*)"AT+CWJAP=\"%s\",\"%s\"\r\n", pSSID, pPassWord );
  3693                           
  3694                           ;incstack = 0
  3695  0014A0  0E80               	movlw	low ESP8266_JoinAP@cCmd
  3696  0014A2  6E1E               	movwf	sprintf@sp,c
  3697  0014A4  0E00               	movlw	high ESP8266_JoinAP@cCmd
  3698  0014A6  6E1F               	movwf	sprintf@sp+1,c
  3699  0014A8  0E87               	movlw	low STR_15
  3700  0014AA  6E20               	movwf	sprintf@f,c
  3701  0014AC  0E7E               	movlw	high STR_15
  3702  0014AE  6E21               	movwf	sprintf@f+1,c
  3703  0014B0  C041  F022         	movff	ESP8266_JoinAP@pSSID,?_sprintf+4
  3704  0014B4  C042  F023         	movff	ESP8266_JoinAP@pSSID+1,?_sprintf+5
  3705  0014B8  C043  F024         	movff	ESP8266_JoinAP@pPassWord,?_sprintf+6
  3706  0014BC  C044  F025         	movff	ESP8266_JoinAP@pPassWord+1,?_sprintf+7
  3707  0014C0  EC09  F000         	call	_sprintf	;wreg free
  3708                           
  3709                           ;UART.c: 158: return ESP8266_Cmd ( cCmd, (void*)"OK", (void*)"CONNECTED", 15000 );
  3710  0014C4  0E80               	movlw	low ESP8266_JoinAP@cCmd
  3711  0014C6  6E25               	movwf	ESP8266_Cmd@cmd,c
  3712  0014C8  0E00               	movlw	high ESP8266_JoinAP@cCmd
  3713  0014CA  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  3714  0014CC  0EC1               	movlw	low (STR_3+5)
  3715  0014CE  6E27               	movwf	ESP8266_Cmd@reply1,c
  3716  0014D0  0E7F               	movlw	high (STR_3+5)
  3717  0014D2  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  3718  0014D4  0EA9               	movlw	low STR_17
  3719  0014D6  6E29               	movwf	ESP8266_Cmd@reply2,c
  3720  0014D8  0E7F               	movlw	high STR_17
  3721  0014DA  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  3722  0014DC  0E3A               	movlw	58
  3723  0014DE  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  3724  0014E0  0E98               	movlw	152
  3725  0014E2  6E2B               	movwf	ESP8266_Cmd@waittime,c
  3726  0014E4  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  3727  0014E8  0012               	return	
  3728  0014EA                     __end_of_ESP8266_JoinAP:
  3729                           	opt stack 0
  3730                           tblptru	equ	0xFF8
  3731                           tblptrh	equ	0xFF7
  3732                           tblptrl	equ	0xFF6
  3733                           tablat	equ	0xFF5
  3734                           intcon	equ	0xFF2
  3735                           postinc0	equ	0xFEE
  3736                           wreg	equ	0xFE8
  3737                           postdec1	equ	0xFE5
  3738                           plusw1	equ	0xFE3
  3739                           fsr1l	equ	0xFE1
  3740                           indf2	equ	0xFDF
  3741                           plusw2	equ	0xFDB
  3742                           fsr2h	equ	0xFDA
  3743                           fsr2l	equ	0xFD9
  3744                           status	equ	0xFD8
  3745                           
  3746 ;; *************** function _sprintf *****************
  3747 ;; Defined at:
  3748 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;  sp              2   29[COMRAM] PTR unsigned char 
  3751 ;;		 -> ESP8266_Link_Server@cCmd(120), ESP8266_Link_Server@cStr(100), ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120
      +), 
  3752 ;;		 -> ESP8266_SendString@cStr(20), 
  3753 ;;  f               2   31[COMRAM] PTR const unsigned char 
  3754 ;;		 -> STR_25(17), STR_24(20), STR_22(13), STR_20(13), 
  3755 ;;		 -> STR_18(26), STR_15(21), STR_1(19), 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  idx             1   49[COMRAM] unsigned char 
  3758 ;;  tmpval          4    0        struct .
  3759 ;;  flag            2   62[COMRAM] unsigned short 
  3760 ;;  width           2   59[COMRAM] int 
  3761 ;;  val             2   56[COMRAM] unsigned int 
  3762 ;;  ap              2   54[COMRAM] PTR void [1]
  3763 ;;		 -> ?_sprintf(2), 
  3764 ;;  len             2   52[COMRAM] unsigned int 
  3765 ;;  cp              2   50[COMRAM] PTR const unsigned char 
  3766 ;;		 -> STR_62(7), sprintf@c(1), STR_58(5), STR_57(12), 
  3767 ;;		 -> STR_52(10), STR_51(4), STR_40(2), STR_39(10), 
  3768 ;;		 -> STR_38(4), STR_23(4), STR_21(4), ESP8266_Link_Server@cStr(100), 
  3769 ;;  c               1   61[COMRAM] char 
  3770 ;;  prec            1   58[COMRAM] char 
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  2   29[COMRAM] int 
  3773 ;; Registers used:
  3774 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3780 ;;      Params:        10       0       0       0       0       0       0
  3781 ;;      Locals:        21       0       0       0       0       0       0
  3782 ;;      Temps:          4       0       0       0       0       0       0
  3783 ;;      Totals:        35       0       0       0       0       0       0
  3784 ;;Total ram usage:       35 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    2
  3787 ;; This function calls:
  3788 ;;		___lwdiv
  3789 ;;		___lwmod
  3790 ;;		___wmul
  3791 ;;		_isdigit
  3792 ;; This function is called by:
  3793 ;;		_ESP8266_JoinAP
  3794 ;;		_ESP8266_Link_Server
  3795 ;;		_ESP8266_SendString
  3796 ;;		_ESP8266_BuildAP
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text14
  3801  000012                     __ptext14:
  3802                           	opt stack 0
  3803  000012                     _sprintf:
  3804                           	opt stack 26
  3805                           
  3806                           ;doprnt.c: 494: va_list ap;
  3807                           ;doprnt.c: 499: signed char c;
  3808                           ;doprnt.c: 501: int width;
  3809                           ;doprnt.c: 506: signed char prec;
  3810                           ;doprnt.c: 508: unsigned short flag;
  3811                           ;doprnt.c: 523: union {
  3812                           ;doprnt.c: 524: unsigned long vd;
  3813                           ;doprnt.c: 525: double integ;
  3814                           ;doprnt.c: 526: } tmpval;
  3815                           ;doprnt.c: 528: unsigned int val;
  3816                           ;doprnt.c: 529: unsigned len;
  3817                           ;doprnt.c: 530: const char * cp;
  3818                           ;doprnt.c: 533: *ap = __va_start();
  3819                           
  3820                           ;incstack = 0
  3821  000012  0E22               	movlw	low (?_sprintf+4)
  3822  000014  6E37               	movwf	sprintf@ap,c
  3823  000016  0E00               	movlw	high (?_sprintf+4)
  3824  000018  6E38               	movwf	sprintf@ap+1,c
  3825                           
  3826                           ;doprnt.c: 536: while(c = *f++) {
  3827  00001A  EF46  F004         	goto	l3015
  3828  00001E                     l2661:
  3829                           
  3830                           ;doprnt.c: 538: if(c != '%')
  3831  00001E  0E25               	movlw	37
  3832  000020  183E               	xorwf	sprintf@c,w,c
  3833  000022  B4D8               	btfsc	status,2,c
  3834  000024  D00A               	goto	l2667
  3835                           
  3836                           ;doprnt.c: 540: {
  3837                           ;doprnt.c: 541: ((*sp++ = (c)));
  3838  000026  C01E  FFD9         	movff	sprintf@sp,fsr2l
  3839  00002A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  3840  00002E  C03E  FFDF         	movff	sprintf@c,indf2
  3841  000032  4A1E               	infsnz	sprintf@sp,f,c
  3842  000034  2A1F               	incf	sprintf@sp+1,f,c
  3843                           
  3844                           ;doprnt.c: 542: continue;
  3845  000036  EF46  F004         	goto	l3015
  3846  00003A                     l2667:
  3847                           
  3848                           ;doprnt.c: 543: }
  3849                           ;doprnt.c: 546: width = 0;
  3850  00003A  0E00               	movlw	0
  3851  00003C  6E3D               	movwf	sprintf@width+1,c
  3852  00003E  0E00               	movlw	0
  3853  000040  6E3C               	movwf	sprintf@width,c
  3854                           
  3855                           ;doprnt.c: 548: flag = 0;
  3856  000042  0E00               	movlw	0
  3857  000044  6E40               	movwf	sprintf@flag+1,c
  3858  000046  0E00               	movlw	0
  3859  000048  6E3F               	movwf	sprintf@flag,c
  3860                           
  3861                           ;doprnt.c: 551: switch(*f) {
  3862                           
  3863                           ;doprnt.c: 550: for(;;) {
  3864  00004A  D009               	goto	l2679
  3865  00004C                     l2669:
  3866                           
  3867                           ;doprnt.c: 554: flag |= 0x08;
  3868  00004C  863F               	bsf	sprintf@flag,3,c
  3869  00004E  D005               	goto	L3
  3870  000050                     l2671:
  3871                           
  3872                           ;doprnt.c: 561: flag |= 0x01;
  3873  000050  803F               	bsf	sprintf@flag,0,c
  3874  000052  D003               	goto	L3
  3875  000054                     l2673:
  3876                           
  3877                           ;doprnt.c: 574: flag |= 0x800;
  3878  000054  8640               	bsf	sprintf@flag+1,3,c
  3879  000056  D001               	goto	L3
  3880  000058                     l2675:
  3881                           
  3882                           ;doprnt.c: 580: flag |= 0x04;
  3883  000058  843F               	bsf	sprintf@flag,2,c
  3884  00005A                     L3:
  3885                           
  3886                           ;doprnt.c: 581: f++;
  3887  00005A  4A20               	infsnz	sprintf@f,f,c
  3888  00005C  2A21               	incf	sprintf@f+1,f,c
  3889  00005E                     l2679:
  3890  00005E  C020  FFF6         	movff	sprintf@f,tblptrl
  3891  000062  C021  FFF7         	movff	sprintf@f+1,tblptrh
  3892  000066                     	if	0	;tblptru may be non-zero
  3893  000066                     	endif
  3894  000066                     	if	0	;tblptru may be non-zero
  3895  000066                     	endif
  3896  000066  0008               	tblrd		*
  3897  000068  50F5               	movf	tablat,w,c
  3898                           
  3899                           ; Switch size 1, requested type "space"
  3900                           ; Number of cases is 4, Range of values is 32 to 48
  3901                           ; switch strategies available:
  3902                           ; Name         Instructions Cycles
  3903                           ; simple_byte           13     7 (average)
  3904                           ;	Chosen strategy is simple_byte
  3905  00006A  0A20               	xorlw	32	; case 32
  3906  00006C  B4D8               	btfsc	status,2,c
  3907  00006E  D7F0               	goto	l2671
  3908  000070  0A03               	xorlw	3	; case 35
  3909  000072  B4D8               	btfsc	status,2,c
  3910  000074  D7EF               	goto	l2673
  3911  000076  0A0E               	xorlw	14	; case 45
  3912  000078  B4D8               	btfsc	status,2,c
  3913  00007A  D7E8               	goto	l2669
  3914  00007C  0A1D               	xorlw	29	; case 48
  3915  00007E  B4D8               	btfsc	status,2,c
  3916  000080  D7EB               	goto	l2675
  3917                           
  3918                           ;doprnt.c: 593: if(flag & 0x08)
  3919                           
  3920                           ;doprnt.c: 586: }
  3921                           
  3922                           ;doprnt.c: 585: break;
  3923  000082  B63F               	btfsc	sprintf@flag,3,c
  3924                           
  3925                           ;doprnt.c: 594: flag &= ~0x04;
  3926  000084  943F               	bcf	sprintf@flag,2,c
  3927                           
  3928                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3929  000086  C020  FFF6         	movff	sprintf@f,tblptrl
  3930  00008A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  3931  00008E                     	if	0	;tblptru may be non-zero
  3932  00008E                     	endif
  3933  00008E                     	if	0	;tblptru may be non-zero
  3934  00008E                     	endif
  3935  00008E  0008               	tblrd		*
  3936  000090  50F5               	movf	tablat,w,c
  3937  000092  EC0B  F00C         	call	_isdigit
  3938  000096  A0D8               	btfss	status,0,c
  3939  000098  D033               	goto	l2695
  3940                           
  3941                           ;doprnt.c: 598: width = 0;
  3942  00009A  0E00               	movlw	0
  3943  00009C  6E3D               	movwf	sprintf@width+1,c
  3944  00009E  0E00               	movlw	0
  3945  0000A0  6E3C               	movwf	sprintf@width,c
  3946  0000A2                     l2687:
  3947                           
  3948                           ;doprnt.c: 600: width *= 10;
  3949  0000A2  C03C  F012         	movff	sprintf@width,___wmul@multiplier
  3950  0000A6  C03D  F013         	movff	sprintf@width+1,___wmul@multiplier+1
  3951  0000AA  0E00               	movlw	0
  3952  0000AC  6E15               	movwf	___wmul@multiplicand+1,c
  3953  0000AE  0E0A               	movlw	10
  3954  0000B0  6E14               	movwf	___wmul@multiplicand,c
  3955  0000B2  EC9F  F00B         	call	___wmul	;wreg free
  3956  0000B6  C012  F03C         	movff	?___wmul,sprintf@width
  3957  0000BA  C013  F03D         	movff	?___wmul+1,sprintf@width+1
  3958                           
  3959                           ;doprnt.c: 601: width += *f++ - '0';
  3960  0000BE  0ED0               	movlw	208
  3961  0000C0  6E28               	movwf	??_sprintf& (0+255),c
  3962  0000C2  0EFF               	movlw	255
  3963  0000C4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  3964  0000C6  C020  FFF6         	movff	sprintf@f,tblptrl
  3965  0000CA  C021  FFF7         	movff	sprintf@f+1,tblptrh
  3966  0000CE                     	if	0	;tblptru may be non-zero
  3967  0000CE                     	endif
  3968  0000CE                     	if	0	;tblptru may be non-zero
  3969  0000CE                     	endif
  3970  0000CE  0008               	tblrd		*
  3971  0000D0  50F5               	movf	tablat,w,c
  3972  0000D2  6E2A               	movwf	(??_sprintf+2)& (0+255),c
  3973  0000D4  6A2B               	clrf	(??_sprintf+3)& (0+255),c
  3974  0000D6  5028               	movf	??_sprintf,w,c
  3975  0000D8  262A               	addwf	??_sprintf+2,f,c
  3976  0000DA  5029               	movf	??_sprintf+1,w,c
  3977  0000DC  222B               	addwfc	??_sprintf+3,f,c
  3978  0000DE  502A               	movf	??_sprintf+2,w,c
  3979  0000E0  263C               	addwf	sprintf@width,f,c
  3980  0000E2  502B               	movf	??_sprintf+3,w,c
  3981  0000E4  223D               	addwfc	sprintf@width+1,f,c
  3982  0000E6  4A20               	infsnz	sprintf@f,f,c
  3983  0000E8  2A21               	incf	sprintf@f+1,f,c
  3984                           
  3985                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3986  0000EA  C020  FFF6         	movff	sprintf@f,tblptrl
  3987  0000EE  C021  FFF7         	movff	sprintf@f+1,tblptrh
  3988  0000F2                     	if	0	;tblptru may be non-zero
  3989  0000F2                     	endif
  3990  0000F2                     	if	0	;tblptru may be non-zero
  3991  0000F2                     	endif
  3992  0000F2  0008               	tblrd		*
  3993  0000F4  50F5               	movf	tablat,w,c
  3994  0000F6  EC0B  F00C         	call	_isdigit
  3995  0000FA  A0D8               	btfss	status,0,c
  3996  0000FC  D018               	goto	l2703
  3997  0000FE  D7D1               	goto	l2687
  3998  000100                     l2695:
  3999  000100  C020  FFF6         	movff	sprintf@f,tblptrl
  4000  000104  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4001  000108                     	if	0	;tblptru may be non-zero
  4002  000108                     	endif
  4003  000108                     	if	0	;tblptru may be non-zero
  4004  000108                     	endif
  4005  000108  0008               	tblrd		*
  4006  00010A  50F5               	movf	tablat,w,c
  4007  00010C  0A2A               	xorlw	42
  4008  00010E  A4D8               	btfss	status,2,c
  4009  000110  D00E               	goto	l2703
  4010                           
  4011                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  4012  000112  C037  FFD9         	movff	sprintf@ap,fsr2l
  4013  000116  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  4014  00011A  CFDE F03C          	movff	postinc2,sprintf@width
  4015  00011E  CFDD F03D          	movff	postdec2,sprintf@width+1
  4016  000122  0E02               	movlw	2
  4017  000124  2637               	addwf	sprintf@ap,f,c
  4018  000126  0E00               	movlw	0
  4019  000128  2238               	addwfc	sprintf@ap+1,f,c
  4020                           
  4021                           ;doprnt.c: 606: f++;
  4022  00012A  4A20               	infsnz	sprintf@f,f,c
  4023  00012C  2A21               	incf	sprintf@f+1,f,c
  4024  00012E                     l2703:
  4025                           
  4026                           ;doprnt.c: 608: }
  4027                           ;doprnt.c: 611: if(*f == '.') {
  4028  00012E  C020  FFF6         	movff	sprintf@f,tblptrl
  4029  000132  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4030  000136                     	if	0	;tblptru may be non-zero
  4031  000136                     	endif
  4032  000136                     	if	0	;tblptru may be non-zero
  4033  000136                     	endif
  4034  000136  0008               	tblrd		*
  4035  000138  50F5               	movf	tablat,w,c
  4036  00013A  0A2E               	xorlw	46
  4037  00013C  A4D8               	btfss	status,2,c
  4038  00013E  D036               	goto	l2723
  4039                           
  4040                           ;doprnt.c: 612: flag |= 0x4000;
  4041  000140  8C40               	bsf	sprintf@flag+1,6,c
  4042                           
  4043                           ;doprnt.c: 613: f++;
  4044  000142  4A20               	infsnz	sprintf@f,f,c
  4045  000144  2A21               	incf	sprintf@f+1,f,c
  4046                           
  4047                           ;doprnt.c: 615: if(*f == '*') {
  4048  000146  C020  FFF6         	movff	sprintf@f,tblptrl
  4049  00014A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4050  00014E                     	if	0	;tblptru may be non-zero
  4051  00014E                     	endif
  4052  00014E                     	if	0	;tblptru may be non-zero
  4053  00014E                     	endif
  4054  00014E  0008               	tblrd		*
  4055  000150  50F5               	movf	tablat,w,c
  4056  000152  0A2A               	xorlw	42
  4057  000154  A4D8               	btfss	status,2,c
  4058  000156  D00D               	goto	l2715
  4059                           
  4060                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  4061  000158  C037  FFD9         	movff	sprintf@ap,fsr2l
  4062  00015C  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  4063  000160  50DF               	movf	indf2,w,c
  4064  000162  6E3B               	movwf	sprintf@prec,c
  4065  000164  0E02               	movlw	2
  4066  000166  2637               	addwf	sprintf@ap,f,c
  4067  000168  0E00               	movlw	0
  4068  00016A  2238               	addwfc	sprintf@ap+1,f,c
  4069                           
  4070                           ;doprnt.c: 617: f++;
  4071  00016C  4A20               	infsnz	sprintf@f,f,c
  4072  00016E  2A21               	incf	sprintf@f+1,f,c
  4073                           
  4074                           ;doprnt.c: 618: } else
  4075  000170  D0DB               	goto	l2793
  4076  000172                     l2715:
  4077                           
  4078                           ;doprnt.c: 620: {
  4079                           ;doprnt.c: 621: prec = 0;
  4080  000172  0E00               	movlw	0
  4081  000174  6E3B               	movwf	sprintf@prec,c
  4082                           
  4083                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4084  000176  D00F               	goto	l2721
  4085  000178                     l2717:
  4086                           
  4087                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4088  000178  C020  FFF6         	movff	sprintf@f,tblptrl
  4089  00017C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4090  000180                     	if	0	;tblptru may be non-zero
  4091  000180                     	endif
  4092  000180                     	if	0	;tblptru may be non-zero
  4093  000180                     	endif
  4094  000180  0008               	tblrd		*
  4095  000182  CFF5 F028          	movff	tablat,??_sprintf
  4096  000186  503B               	movf	sprintf@prec,w,c
  4097  000188  0D0A               	mullw	10
  4098  00018A  50F3               	movf	prodl,w,c
  4099  00018C  2428               	addwf	??_sprintf,w,c
  4100  00018E  0FD0               	addlw	208
  4101  000190  6E3B               	movwf	sprintf@prec,c
  4102  000192  4A20               	infsnz	sprintf@f,f,c
  4103  000194  2A21               	incf	sprintf@f+1,f,c
  4104  000196                     l2721:
  4105  000196  C020  FFF6         	movff	sprintf@f,tblptrl
  4106  00019A  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4107  00019E                     	if	0	;tblptru may be non-zero
  4108  00019E                     	endif
  4109  00019E                     	if	0	;tblptru may be non-zero
  4110  00019E                     	endif
  4111  00019E  0008               	tblrd		*
  4112  0001A0  50F5               	movf	tablat,w,c
  4113  0001A2  EC0B  F00C         	call	_isdigit
  4114  0001A6  A0D8               	btfss	status,0,c
  4115  0001A8  D0BF               	goto	l2793
  4116  0001AA  D7E6               	goto	l2717
  4117  0001AC                     l2723:
  4118                           
  4119                           ;doprnt.c: 626: prec = 0;
  4120  0001AC  0E00               	movlw	0
  4121  0001AE  6E3B               	movwf	sprintf@prec,c
  4122                           
  4123                           ;doprnt.c: 630: }
  4124                           ;doprnt.c: 635: switch(c = *f++) {
  4125  0001B0  D0BB               	goto	l2793
  4126  0001B2                     l2725:
  4127                           
  4128                           ;doprnt.c: 691: flag |= 0x40;
  4129  0001B2  8C3F               	bsf	sprintf@flag,6,c
  4130                           
  4131                           ;doprnt.c: 698: case 'i':
  4132                           ;doprnt.c: 699: break;
  4133                           
  4134                           ;doprnt.c: 697: case 'd':
  4135                           
  4136                           ;doprnt.c: 693: break;
  4137  0001B4  D0E2               	goto	l2795
  4138  0001B6                     l2727:
  4139                           
  4140                           ;doprnt.c: 707: flag |= 0x2000;
  4141  0001B6  8A40               	bsf	sprintf@flag+1,5,c
  4142  0001B8                     l540:
  4143                           
  4144                           ;doprnt.c: 714: flag |= 0x20;
  4145  0001B8  8A3F               	bsf	sprintf@flag,5,c
  4146  0001BA                     l541:
  4147                           
  4148                           ;doprnt.c: 721: flag |= 0x80;
  4149  0001BA  8E3F               	bsf	sprintf@flag,7,c
  4150                           
  4151                           ;doprnt.c: 723: break;
  4152  0001BC  D0DE               	goto	l2795
  4153  0001BE                     l2729:
  4154                           
  4155                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4156  0001BE  C037  FFD9         	movff	sprintf@ap,fsr2l
  4157  0001C2  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  4158  0001C6  CFDE F033          	movff	postinc2,sprintf@cp
  4159  0001CA  CFDD F034          	movff	postdec2,sprintf@cp+1
  4160  0001CE  0E02               	movlw	2
  4161  0001D0  2637               	addwf	sprintf@ap,f,c
  4162  0001D2  0E00               	movlw	0
  4163  0001D4  2238               	addwfc	sprintf@ap+1,f,c
  4164                           
  4165                           ;doprnt.c: 740: if(!cp)
  4166  0001D6  5033               	movf	sprintf@cp,w,c
  4167  0001D8  1034               	iorwf	sprintf@cp+1,w,c
  4168  0001DA  A4D8               	btfss	status,2,c
  4169  0001DC  D004               	goto	l2737
  4170                           
  4171                           ;doprnt.c: 741: cp = "(null)";
  4172  0001DE  0ECC               	movlw	low STR_62
  4173  0001E0  6E33               	movwf	sprintf@cp,c
  4174  0001E2  0E7F               	movlw	high STR_62
  4175  0001E4  6E34               	movwf	sprintf@cp+1,c
  4176  0001E6                     l2737:
  4177                           
  4178                           ;doprnt.c: 745: len = 0;
  4179  0001E6  0E00               	movlw	0
  4180  0001E8  6E36               	movwf	sprintf@len+1,c
  4181  0001EA  0E00               	movlw	0
  4182  0001EC  6E35               	movwf	sprintf@len,c
  4183                           
  4184                           ;doprnt.c: 746: while(cp[len])
  4185  0001EE  D002               	goto	l2741
  4186  0001F0                     l2739:
  4187                           
  4188                           ;doprnt.c: 747: len++;
  4189  0001F0  4A35               	infsnz	sprintf@len,f,c
  4190  0001F2  2A36               	incf	sprintf@len+1,f,c
  4191  0001F4                     l2741:
  4192  0001F4  5035               	movf	sprintf@len,w,c
  4193  0001F6  2433               	addwf	sprintf@cp,w,c
  4194  0001F8  6E28               	movwf	??_sprintf& (0+255),c
  4195  0001FA  5036               	movf	sprintf@len+1,w,c
  4196  0001FC  2034               	addwfc	sprintf@cp+1,w,c
  4197  0001FE  6E29               	movwf	(??_sprintf+1)& (0+255),c
  4198  000200  C028  FFF6         	movff	??_sprintf,tblptrl
  4199  000204  C029  FFF7         	movff	??_sprintf+1,tblptrh
  4200  000208  6AF8               	clrf	tblptru,c
  4201  00020A  0E05               	movlw	(high __ramtop+-1)
  4202  00020C  64F7               	cpfsgt	tblptrh,c
  4203  00020E  D003               	bra	u2057
  4204  000210  0008               	tblrd		*
  4205  000212  50F5               	movf	tablat,w,c
  4206  000214  D005               	bra	u2050
  4207  000216                     u2057:
  4208  000216  CFF6 FFE9          	movff	tblptrl,fsr0l
  4209  00021A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4210  00021E  50EF               	movf	indf0,w,c
  4211  000220                     u2050:
  4212  000220  0900               	iorlw	0
  4213  000222  A4D8               	btfss	status,2,c
  4214  000224  D7E5               	goto	l2739
  4215  000226                     l2743:
  4216                           
  4217                           ;doprnt.c: 753: if(prec && prec < len)
  4218  000226  503B               	movf	sprintf@prec,w,c
  4219  000228  B4D8               	btfsc	status,2,c
  4220  00022A  D010               	goto	l2749
  4221  00022C  C03B  F028         	movff	sprintf@prec,??_sprintf
  4222  000230  6A29               	clrf	(??_sprintf+1)& (0+255),c
  4223  000232  BE28               	btfsc	??_sprintf& (0+255),7,c
  4224  000234  0629               	decf	(??_sprintf+1)& (0+255),f,c
  4225  000236  5035               	movf	sprintf@len,w,c
  4226  000238  5C28               	subwf	??_sprintf,w,c
  4227  00023A  5036               	movf	sprintf@len+1,w,c
  4228  00023C  5829               	subwfb	??_sprintf+1,w,c
  4229  00023E  B0D8               	btfsc	status,0,c
  4230  000240  D005               	goto	l2749
  4231                           
  4232                           ;doprnt.c: 754: len = prec;
  4233  000242  503B               	movf	sprintf@prec,w,c
  4234  000244  6E35               	movwf	sprintf@len,c
  4235  000246  6A36               	clrf	sprintf@len+1,c
  4236  000248  BE35               	btfsc	sprintf@len,7,c
  4237  00024A  0636               	decf	sprintf@len+1,f,c
  4238  00024C                     l2749:
  4239                           
  4240                           ;doprnt.c: 757: if(width > len)
  4241  00024C  503C               	movf	sprintf@width,w,c
  4242  00024E  5C35               	subwf	sprintf@len,w,c
  4243  000250  503D               	movf	sprintf@width+1,w,c
  4244  000252  5836               	subwfb	sprintf@len+1,w,c
  4245  000254  B0D8               	btfsc	status,0,c
  4246  000256  D005               	goto	l2753
  4247                           
  4248                           ;doprnt.c: 758: width -= len;
  4249  000258  5035               	movf	sprintf@len,w,c
  4250  00025A  5E3C               	subwf	sprintf@width,f,c
  4251  00025C  5036               	movf	sprintf@len+1,w,c
  4252  00025E  5A3D               	subwfb	sprintf@width+1,f,c
  4253  000260  D004               	goto	l2755
  4254  000262                     l2753:
  4255                           
  4256                           ;doprnt.c: 759: else
  4257                           ;doprnt.c: 760: width = 0;
  4258  000262  0E00               	movlw	0
  4259  000264  6E3D               	movwf	sprintf@width+1,c
  4260  000266  0E00               	movlw	0
  4261  000268  6E3C               	movwf	sprintf@width,c
  4262  00026A                     l2755:
  4263                           
  4264                           ;doprnt.c: 762: if(!(flag & 0x08))
  4265  00026A  A63F               	btfss	sprintf@flag,3,c
  4266  00026C  D009               	goto	l2763
  4267  00026E  D02A               	goto	l2771
  4268  000270                     l2759:
  4269                           
  4270                           ;doprnt.c: 765: ((*sp++ = (' ')));
  4271  000270  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4272  000274  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4273  000278  0E20               	movlw	32
  4274  00027A  6EDF               	movwf	indf2,c
  4275  00027C  4A1E               	infsnz	sprintf@sp,f,c
  4276  00027E  2A1F               	incf	sprintf@sp+1,f,c
  4277  000280                     l2763:
  4278  000280  063C               	decf	sprintf@width,f,c
  4279  000282  A0D8               	btfss	status,0,c
  4280  000284  063D               	decf	sprintf@width+1,f,c
  4281  000286  283C               	incf	sprintf@width,w,c
  4282  000288  E1F3               	bnz	l2759
  4283  00028A  283D               	incf	sprintf@width+1,w,c
  4284  00028C  B4D8               	btfsc	status,2,c
  4285  00028E  D01A               	goto	l2771
  4286  000290  D7EF               	goto	l2759
  4287  000292                     l2765:
  4288                           
  4289                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4290  000292  C033  FFF6         	movff	sprintf@cp,tblptrl
  4291  000296  C034  FFF7         	movff	sprintf@cp+1,tblptrh
  4292  00029A  6AF8               	clrf	tblptru,c
  4293  00029C  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4294  0002A0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4295  0002A4  0E05               	movlw	(high __ramtop+-1)
  4296  0002A6  64F7               	cpfsgt	tblptrh,c
  4297  0002A8  D003               	bra	u2127
  4298  0002AA  0008               	tblrd		*
  4299  0002AC  50F5               	movf	tablat,w,c
  4300  0002AE  D005               	bra	u2120
  4301  0002B0                     u2127:
  4302  0002B0  CFF6 FFE9          	movff	tblptrl,fsr0l
  4303  0002B4  CFF7 FFEA          	movff	tblptrh,fsr0h
  4304  0002B8  50EF               	movf	indf0,w,c
  4305  0002BA                     u2120:
  4306  0002BA  6EDF               	movwf	indf2,c
  4307  0002BC  4A33               	infsnz	sprintf@cp,f,c
  4308  0002BE  2A34               	incf	sprintf@cp+1,f,c
  4309  0002C0  4A1E               	infsnz	sprintf@sp,f,c
  4310  0002C2  2A1F               	incf	sprintf@sp+1,f,c
  4311  0002C4                     l2771:
  4312  0002C4  0635               	decf	sprintf@len,f,c
  4313  0002C6  A0D8               	btfss	status,0,c
  4314  0002C8  0636               	decf	sprintf@len+1,f,c
  4315  0002CA  2835               	incf	sprintf@len,w,c
  4316  0002CC  E1E2               	bnz	l2765
  4317  0002CE  2836               	incf	sprintf@len+1,w,c
  4318  0002D0  A4D8               	btfss	status,2,c
  4319  0002D2  D7DF               	goto	l2765
  4320                           
  4321                           ;doprnt.c: 770: if(flag & 0x08)
  4322  0002D4  B63F               	btfsc	sprintf@flag,3,c
  4323  0002D6  D009               	goto	l2779
  4324  0002D8  D2D9               	goto	l3015
  4325  0002DA                     l2775:
  4326                           
  4327                           ;doprnt.c: 772: ((*sp++ = (' ')));
  4328  0002DA  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4329  0002DE  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4330  0002E2  0E20               	movlw	32
  4331  0002E4  6EDF               	movwf	indf2,c
  4332  0002E6  4A1E               	infsnz	sprintf@sp,f,c
  4333  0002E8  2A1F               	incf	sprintf@sp+1,f,c
  4334  0002EA                     l2779:
  4335  0002EA  063C               	decf	sprintf@width,f,c
  4336  0002EC  A0D8               	btfss	status,0,c
  4337  0002EE  063D               	decf	sprintf@width+1,f,c
  4338  0002F0  283C               	incf	sprintf@width,w,c
  4339  0002F2  E1F3               	bnz	l2775
  4340  0002F4  283D               	incf	sprintf@width+1,w,c
  4341  0002F6  B4D8               	btfsc	status,2,c
  4342  0002F8  D2C9               	goto	l3015
  4343  0002FA  D7EF               	goto	l2775
  4344  0002FC                     l2781:
  4345                           
  4346                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4347  0002FC  C037  FFD9         	movff	sprintf@ap,fsr2l
  4348  000300  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  4349  000304  50DF               	movf	indf2,w,c
  4350  000306  6E3E               	movwf	sprintf@c,c
  4351  000308  0E02               	movlw	2
  4352  00030A  2637               	addwf	sprintf@ap,f,c
  4353  00030C  0E00               	movlw	0
  4354  00030E  2238               	addwfc	sprintf@ap+1,f,c
  4355  000310                     l2785:
  4356                           
  4357                           ;doprnt.c: 805: cp = (char *)&c;
  4358  000310  0E3E               	movlw	low sprintf@c
  4359  000312  6E33               	movwf	sprintf@cp,c
  4360  000314  0E00               	movlw	high sprintf@c
  4361  000316  6E34               	movwf	sprintf@cp+1,c
  4362                           
  4363                           ;doprnt.c: 806: len = 1;
  4364  000318  0E00               	movlw	0
  4365  00031A  6E36               	movwf	sprintf@len+1,c
  4366  00031C  0E01               	movlw	1
  4367  00031E  6E35               	movwf	sprintf@len,c
  4368                           
  4369                           ;doprnt.c: 807: goto dostring;
  4370  000320  D782               	goto	l2743
  4371  000322                     l2789:
  4372                           
  4373                           ;doprnt.c: 818: flag |= 0xC0;
  4374  000322  0EC0               	movlw	192
  4375  000324  123F               	iorwf	sprintf@flag,f,c
  4376                           
  4377                           ;doprnt.c: 822: }
  4378                           
  4379                           ;doprnt.c: 819: break;
  4380  000326  D029               	goto	l2795
  4381  000328                     l2793:
  4382  000328  C020  FFF6         	movff	sprintf@f,tblptrl
  4383  00032C  C021  FFF7         	movff	sprintf@f+1,tblptrh
  4384  000330  4A20               	infsnz	sprintf@f,f,c
  4385  000332  2A21               	incf	sprintf@f+1,f,c
  4386  000334                     	if	0	;tblptru may be non-zero
  4387  000334                     	endif
  4388  000334                     	if	0	;tblptru may be non-zero
  4389  000334                     	endif
  4390  000334  0008               	tblrd		*
  4391  000336  CFF5 F03E          	movff	tablat,sprintf@c
  4392  00033A  503E               	movf	sprintf@c,w,c
  4393                           
  4394                           ; Switch size 1, requested type "space"
  4395                           ; Number of cases is 10, Range of values is 0 to 120
  4396                           ; switch strategies available:
  4397                           ; Name         Instructions Cycles
  4398                           ; simple_byte           31    16 (average)
  4399                           ;	Chosen strategy is simple_byte
  4400  00033C  0A00               	xorlw	0	; case 0
  4401  00033E  B4D8               	btfsc	status,2,c
  4402  000340  D2B2               	goto	l3017
  4403  000342  0A58               	xorlw	88	; case 88
  4404  000344  B4D8               	btfsc	status,2,c
  4405  000346  D738               	goto	l540
  4406  000348  0A3B               	xorlw	59	; case 99
  4407  00034A  B4D8               	btfsc	status,2,c
  4408  00034C  D7D7               	goto	l2781
  4409  00034E  0A07               	xorlw	7	; case 100
  4410  000350  B4D8               	btfsc	status,2,c
  4411  000352  D013               	goto	l2795
  4412  000354  0A0D               	xorlw	13	; case 105
  4413  000356  B4D8               	btfsc	status,2,c
  4414  000358  D010               	goto	l2795
  4415  00035A  0A06               	xorlw	6	; case 111
  4416  00035C  B4D8               	btfsc	status,2,c
  4417  00035E  D729               	goto	l2725
  4418  000360  0A1F               	xorlw	31	; case 112
  4419  000362  B4D8               	btfsc	status,2,c
  4420  000364  D728               	goto	l2727
  4421  000366  0A03               	xorlw	3	; case 115
  4422  000368  B4D8               	btfsc	status,2,c
  4423  00036A  D729               	goto	l2729
  4424  00036C  0A06               	xorlw	6	; case 117
  4425  00036E  B4D8               	btfsc	status,2,c
  4426  000370  D7D8               	goto	l2789
  4427  000372  0A0D               	xorlw	13	; case 120
  4428  000374  B4D8               	btfsc	status,2,c
  4429  000376  D721               	goto	l541
  4430  000378  D7CB               	goto	l2785
  4431  00037A                     l2795:
  4432                           
  4433                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  4434  00037A  0EC0               	movlw	192
  4435  00037C  143F               	andwf	sprintf@flag,w,c
  4436  00037E  6E28               	movwf	??_sprintf& (0+255),c
  4437  000380  0E00               	movlw	0
  4438  000382  1440               	andwf	sprintf@flag+1,w,c
  4439  000384  6E29               	movwf	(??_sprintf+1)& (0+255),c
  4440  000386  5028               	movf	??_sprintf,w,c
  4441  000388  1029               	iorwf	??_sprintf+1,w,c
  4442  00038A  A4D8               	btfss	status,2,c
  4443  00038C  D015               	goto	l2807
  4444                           
  4445                           ;doprnt.c: 1253: {
  4446                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4447  00038E  C037  FFD9         	movff	sprintf@ap,fsr2l
  4448  000392  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  4449  000396  CFDE F039          	movff	postinc2,sprintf@val
  4450  00039A  CFDD F03A          	movff	postdec2,sprintf@val+1
  4451  00039E  0E02               	movlw	2
  4452  0003A0  2637               	addwf	sprintf@ap,f,c
  4453  0003A2  0E00               	movlw	0
  4454  0003A4  2238               	addwfc	sprintf@ap+1,f,c
  4455                           
  4456                           ;doprnt.c: 1261: if((int)val < 0) {
  4457  0003A6  AE3A               	btfss	sprintf@val+1,7,c
  4458  0003A8  D013               	goto	l2811
  4459                           
  4460                           ;doprnt.c: 1262: flag |= 0x03;
  4461  0003AA  0E03               	movlw	3
  4462  0003AC  123F               	iorwf	sprintf@flag,f,c
  4463                           
  4464                           ;doprnt.c: 1263: val = -val;
  4465  0003AE  6C39               	negf	sprintf@val,c
  4466  0003B0  1E3A               	comf	sprintf@val+1,f,c
  4467  0003B2  B0D8               	btfsc	status,0,c
  4468  0003B4  2A3A               	incf	sprintf@val+1,f,c
  4469                           
  4470                           ;doprnt.c: 1264: }
  4471                           ;doprnt.c: 1266: }
  4472  0003B6  D00C               	goto	l2811
  4473  0003B8                     l2807:
  4474                           
  4475                           ;doprnt.c: 1268: else
  4476                           ;doprnt.c: 1273: {
  4477                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4478  0003B8  C037  FFD9         	movff	sprintf@ap,fsr2l
  4479  0003BC  C038  FFDA         	movff	sprintf@ap+1,fsr2h
  4480  0003C0  CFDE F039          	movff	postinc2,sprintf@val
  4481  0003C4  CFDD F03A          	movff	postdec2,sprintf@val+1
  4482  0003C8  0E02               	movlw	2
  4483  0003CA  2637               	addwf	sprintf@ap,f,c
  4484  0003CC  0E00               	movlw	0
  4485  0003CE  2238               	addwfc	sprintf@ap+1,f,c
  4486  0003D0                     l2811:
  4487                           
  4488                           ;doprnt.c: 1287: }
  4489                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4490  0003D0  503B               	movf	sprintf@prec,w,c
  4491  0003D2  A4D8               	btfss	status,2,c
  4492  0003D4  D04E               	goto	l2861
  4493  0003D6  5039               	movf	sprintf@val,w,c
  4494  0003D8  103A               	iorwf	sprintf@val+1,w,c
  4495  0003DA  A4D8               	btfss	status,2,c
  4496  0003DC  D04A               	goto	l2861
  4497                           
  4498                           ;doprnt.c: 1291: prec++;
  4499  0003DE  2A3B               	incf	sprintf@prec,f,c
  4500                           
  4501                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4502  0003E0  D048               	goto	l2861
  4503  0003E2                     l2817:
  4504                           
  4505                           ;doprnt.c: 1302: case 0xC0:
  4506                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4507  0003E2  0E01               	movlw	1
  4508  0003E4  6E3E               	movwf	sprintf@c,c
  4509  0003E6                     l2819:
  4510  0003E6  0E05               	movlw	5
  4511  0003E8  183E               	xorwf	sprintf@c,w,c
  4512  0003EA  B4D8               	btfsc	status,2,c
  4513  0003EC  D050               	goto	l2863
  4514                           
  4515                           ;doprnt.c: 1306: if(val < dpowers[c])
  4516  0003EE  503E               	movf	sprintf@c,w,c
  4517  0003F0  0D02               	mullw	2
  4518  0003F2  0E15               	movlw	low _dpowers
  4519  0003F4  24F3               	addwf	prodl,w,c
  4520  0003F6  6EF6               	movwf	tblptrl,c
  4521  0003F8  0E7E               	movlw	high _dpowers
  4522  0003FA  20F4               	addwfc	prodh,w,c
  4523  0003FC  6EF7               	movwf	tblptrh,c
  4524  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  4525  0003FE                     	endif
  4526  0003FE  0009               	tblrd		*+
  4527  000400  50F5               	movf	tablat,w,c
  4528  000402  5C39               	subwf	sprintf@val,w,c
  4529  000404  0009               	tblrd		*+
  4530  000406  50F5               	movf	tablat,w,c
  4531  000408  583A               	subwfb	sprintf@val+1,w,c
  4532  00040A  A0D8               	btfss	status,0,c
  4533  00040C  D040               	goto	l2863
  4534                           
  4535                           ;doprnt.c: 1307: break;
  4536  00040E  2A3E               	incf	sprintf@c,f,c
  4537  000410  D7EA               	goto	l2819
  4538  000412                     l2831:
  4539                           
  4540                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4541  000412  0E01               	movlw	1
  4542  000414  6E3E               	movwf	sprintf@c,c
  4543  000416                     l2833:
  4544  000416  0E04               	movlw	4
  4545  000418  183E               	xorwf	sprintf@c,w,c
  4546  00041A  B4D8               	btfsc	status,2,c
  4547  00041C  D038               	goto	l2863
  4548                           
  4549                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4550  00041E  503E               	movf	sprintf@c,w,c
  4551  000420  0D02               	mullw	2
  4552  000422  0E1F               	movlw	low _hexpowers
  4553  000424  24F3               	addwf	prodl,w,c
  4554  000426  6EF6               	movwf	tblptrl,c
  4555  000428  0E7E               	movlw	high _hexpowers
  4556  00042A  20F4               	addwfc	prodh,w,c
  4557  00042C  6EF7               	movwf	tblptrh,c
  4558  00042E                     	if	0	;There are less than 3 active tblptr bytes
  4559  00042E                     	endif
  4560  00042E  0009               	tblrd		*+
  4561  000430  50F5               	movf	tablat,w,c
  4562  000432  5C39               	subwf	sprintf@val,w,c
  4563  000434  0009               	tblrd		*+
  4564  000436  50F5               	movf	tablat,w,c
  4565  000438  583A               	subwfb	sprintf@val+1,w,c
  4566  00043A  A0D8               	btfss	status,0,c
  4567  00043C  D028               	goto	l2863
  4568                           
  4569                           ;doprnt.c: 1318: break;
  4570  00043E  2A3E               	incf	sprintf@c,f,c
  4571  000440  D7EA               	goto	l2833
  4572  000442                     l2845:
  4573                           
  4574                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  4575  000442  0E01               	movlw	1
  4576  000444  6E3E               	movwf	sprintf@c,c
  4577  000446                     l2847:
  4578  000446  0E06               	movlw	6
  4579  000448  183E               	xorwf	sprintf@c,w,c
  4580  00044A  B4D8               	btfsc	status,2,c
  4581  00044C  D020               	goto	l2863
  4582                           
  4583                           ;doprnt.c: 1329: if(val < octpowers[c])
  4584  00044E  503E               	movf	sprintf@c,w,c
  4585  000450  0D02               	mullw	2
  4586  000452  0E09               	movlw	low _octpowers
  4587  000454  24F3               	addwf	prodl,w,c
  4588  000456  6EF6               	movwf	tblptrl,c
  4589  000458  0E7E               	movlw	high _octpowers
  4590  00045A  20F4               	addwfc	prodh,w,c
  4591  00045C  6EF7               	movwf	tblptrh,c
  4592  00045E                     	if	0	;There are less than 3 active tblptr bytes
  4593  00045E                     	endif
  4594  00045E  0009               	tblrd		*+
  4595  000460  50F5               	movf	tablat,w,c
  4596  000462  5C39               	subwf	sprintf@val,w,c
  4597  000464  0009               	tblrd		*+
  4598  000466  50F5               	movf	tablat,w,c
  4599  000468  583A               	subwfb	sprintf@val+1,w,c
  4600  00046A  A0D8               	btfss	status,0,c
  4601  00046C  D010               	goto	l2863
  4602                           
  4603                           ;doprnt.c: 1330: break;
  4604  00046E  2A3E               	incf	sprintf@c,f,c
  4605  000470  D7EA               	goto	l2847
  4606  000472                     l2861:
  4607  000472  503F               	movf	sprintf@flag,w,c
  4608  000474  0BC0               	andlw	192
  4609                           
  4610                           ; Switch size 1, requested type "space"
  4611                           ; Number of cases is 4, Range of values is 0 to 192
  4612                           ; switch strategies available:
  4613                           ; Name         Instructions Cycles
  4614                           ; simple_byte           13     7 (average)
  4615                           ;	Chosen strategy is simple_byte
  4616  000476  0A00               	xorlw	0	; case 0
  4617  000478  B4D8               	btfsc	status,2,c
  4618  00047A  D7B3               	goto	l2817
  4619  00047C  0A40               	xorlw	64	; case 64
  4620  00047E  B4D8               	btfsc	status,2,c
  4621  000480  D7E0               	goto	l2845
  4622  000482  0AC0               	xorlw	192	; case 128
  4623  000484  B4D8               	btfsc	status,2,c
  4624  000486  D7C5               	goto	l2831
  4625  000488  0A40               	xorlw	64	; case 192
  4626  00048A  B4D8               	btfsc	status,2,c
  4627  00048C  D7AA               	goto	l2817
  4628  00048E                     l2863:
  4629                           
  4630                           ;doprnt.c: 1339: if(c < prec)
  4631  00048E  503E               	movf	sprintf@c,w,c
  4632  000490  0A80               	xorlw	128
  4633  000492  6E28               	movwf	??_sprintf& (0+255),c
  4634  000494  503B               	movf	sprintf@prec,w,c
  4635  000496  0A80               	xorlw	128
  4636  000498  5C28               	subwf	??_sprintf& (0+255),w,c
  4637  00049A  B0D8               	btfsc	status,0,c
  4638  00049C  D003               	goto	l2867
  4639                           
  4640                           ;doprnt.c: 1340: c = prec;
  4641  00049E  C03B  F03E         	movff	sprintf@prec,sprintf@c
  4642  0004A2  D009               	goto	l2871
  4643  0004A4                     l2867:
  4644                           
  4645                           ;doprnt.c: 1341: else if(prec < c)
  4646  0004A4  503B               	movf	sprintf@prec,w,c
  4647  0004A6  0A80               	xorlw	128
  4648  0004A8  6E28               	movwf	??_sprintf& (0+255),c
  4649  0004AA  503E               	movf	sprintf@c,w,c
  4650  0004AC  0A80               	xorlw	128
  4651  0004AE  5C28               	subwf	??_sprintf& (0+255),w,c
  4652  0004B0  A0D8               	btfss	status,0,c
  4653                           
  4654                           ;doprnt.c: 1342: prec = c;
  4655  0004B2  C03E  F03B         	movff	sprintf@c,sprintf@prec
  4656  0004B6                     l2871:
  4657                           
  4658                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4659  0004B6  503C               	movf	sprintf@width,w,c
  4660  0004B8  103D               	iorwf	sprintf@width+1,w,c
  4661  0004BA  B4D8               	btfsc	status,2,c
  4662  0004BC  D00D               	goto	l2877
  4663  0004BE  0E03               	movlw	3
  4664  0004C0  143F               	andwf	sprintf@flag,w,c
  4665  0004C2  6E28               	movwf	??_sprintf& (0+255),c
  4666  0004C4  0E00               	movlw	0
  4667  0004C6  1440               	andwf	sprintf@flag+1,w,c
  4668  0004C8  6E29               	movwf	(??_sprintf+1)& (0+255),c
  4669  0004CA  5028               	movf	??_sprintf,w,c
  4670  0004CC  1029               	iorwf	??_sprintf+1,w,c
  4671  0004CE  B4D8               	btfsc	status,2,c
  4672  0004D0  D003               	goto	l2877
  4673                           
  4674                           ;doprnt.c: 1346: width--;
  4675  0004D2  063C               	decf	sprintf@width,f,c
  4676  0004D4  A0D8               	btfss	status,0,c
  4677  0004D6  063D               	decf	sprintf@width+1,f,c
  4678  0004D8                     l2877:
  4679                           
  4680                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4681  0004D8  AC40               	btfss	sprintf@flag+1,6,c
  4682  0004DA  D016               	goto	l2885
  4683                           
  4684                           ;doprnt.c: 1349: if(width > prec)
  4685  0004DC  0E80               	movlw	128
  4686  0004DE  BE3B               	btfsc	sprintf@prec,7,c
  4687  0004E0  0E7F               	movlw	127
  4688  0004E2  6E28               	movwf	??_sprintf& (0+255),c
  4689  0004E4  503C               	movf	sprintf@width,w,c
  4690  0004E6  5C3B               	subwf	sprintf@prec,w,c
  4691  0004E8  503D               	movf	sprintf@width+1,w,c
  4692  0004EA  0A80               	xorlw	128
  4693  0004EC  5828               	subwfb	??_sprintf& (0+255),w,c
  4694  0004EE  B0D8               	btfsc	status,0,c
  4695  0004F0  D007               	goto	l2883
  4696                           
  4697                           ;doprnt.c: 1350: width -= prec;
  4698  0004F2  503B               	movf	sprintf@prec,w,c
  4699  0004F4  5E3C               	subwf	sprintf@width,f,c
  4700  0004F6  0E00               	movlw	0
  4701  0004F8  BE3B               	btfsc	sprintf@prec,7,c
  4702  0004FA  0EFF               	movlw	255
  4703  0004FC  5A3D               	subwfb	sprintf@width+1,f,c
  4704  0004FE  D004               	goto	l2885
  4705  000500                     l2883:
  4706                           
  4707                           ;doprnt.c: 1351: else
  4708                           ;doprnt.c: 1352: width = 0;
  4709  000500  0E00               	movlw	0
  4710  000502  6E3D               	movwf	sprintf@width+1,c
  4711  000504  0E00               	movlw	0
  4712  000506  6E3C               	movwf	sprintf@width,c
  4713  000508                     l2885:
  4714                           
  4715                           ;doprnt.c: 1353: }
  4716                           ;doprnt.c: 1357: if((flag & (
  4717                           ;doprnt.c: 1359: 0x04|
  4718                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  4719  000508  0EC4               	movlw	196
  4720  00050A  6E28               	movwf	??_sprintf& (0+255),c
  4721  00050C  0E08               	movlw	8
  4722  00050E  6E29               	movwf	(??_sprintf+1)& (0+255),c
  4723  000510  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  4724  000514  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  4725  000518  5028               	movf	??_sprintf,w,c
  4726  00051A  162A               	andwf	??_sprintf+2,f,c
  4727  00051C  5029               	movf	??_sprintf+1,w,c
  4728  00051E  162B               	andwf	??_sprintf+3,f,c
  4729  000520  0E40               	movlw	64
  4730  000522  182A               	xorwf	??_sprintf+2,w,c
  4731  000524  E10C               	bnz	l2891
  4732  000526  0E08               	movlw	8
  4733  000528  182B               	xorwf	??_sprintf+3,w,c
  4734  00052A  A4D8               	btfss	status,2,c
  4735  00052C  D008               	goto	l2891
  4736                           
  4737                           ;doprnt.c: 1362: if(width)
  4738  00052E  503C               	movf	sprintf@width,w,c
  4739  000530  103D               	iorwf	sprintf@width+1,w,c
  4740  000532  B4D8               	btfsc	status,2,c
  4741  000534  D028               	goto	l2899
  4742                           
  4743                           ;doprnt.c: 1363: width--;
  4744  000536  063C               	decf	sprintf@width,f,c
  4745  000538  A0D8               	btfss	status,0,c
  4746  00053A  063D               	decf	sprintf@width+1,f,c
  4747                           
  4748                           ;doprnt.c: 1364: } else
  4749  00053C  D024               	goto	l2899
  4750  00053E                     l2891:
  4751                           
  4752                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  4753  00053E  0EC0               	movlw	192
  4754  000540  6E28               	movwf	??_sprintf& (0+255),c
  4755  000542  0E08               	movlw	8
  4756  000544  6E29               	movwf	(??_sprintf+1)& (0+255),c
  4757  000546  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  4758  00054A  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  4759  00054E  5028               	movf	??_sprintf,w,c
  4760  000550  162A               	andwf	??_sprintf+2,f,c
  4761  000552  5029               	movf	??_sprintf+1,w,c
  4762  000554  162B               	andwf	??_sprintf+3,f,c
  4763  000556  0E80               	movlw	128
  4764  000558  182A               	xorwf	??_sprintf+2,w,c
  4765  00055A  E115               	bnz	l2899
  4766  00055C  0E08               	movlw	8
  4767  00055E  182B               	xorwf	??_sprintf+3,w,c
  4768  000560  A4D8               	btfss	status,2,c
  4769  000562  D011               	goto	l2899
  4770                           
  4771                           ;doprnt.c: 1372: if(width > 2)
  4772  000564  BE3D               	btfsc	sprintf@width+1,7,c
  4773  000566  D00B               	goto	l2897
  4774  000568  503D               	movf	sprintf@width+1,w,c
  4775  00056A  E104               	bnz	u2380
  4776  00056C  0E03               	movlw	3
  4777  00056E  5C3C               	subwf	sprintf@width,w,c
  4778  000570  A0D8               	btfss	status,0,c
  4779  000572  D005               	goto	l2897
  4780  000574                     u2380:
  4781                           
  4782                           ;doprnt.c: 1373: width -= 2;
  4783  000574  0EFE               	movlw	254
  4784  000576  263C               	addwf	sprintf@width,f,c
  4785  000578  0EFF               	movlw	255
  4786  00057A  223D               	addwfc	sprintf@width+1,f,c
  4787  00057C  D004               	goto	l2899
  4788  00057E                     l2897:
  4789                           
  4790                           ;doprnt.c: 1374: else
  4791                           ;doprnt.c: 1375: width = 0;
  4792  00057E  0E00               	movlw	0
  4793  000580  6E3D               	movwf	sprintf@width+1,c
  4794  000582  0E00               	movlw	0
  4795  000584  6E3C               	movwf	sprintf@width,c
  4796  000586                     l2899:
  4797                           
  4798                           ;doprnt.c: 1376: }
  4799                           ;doprnt.c: 1381: if(width > c)
  4800  000586  0E80               	movlw	128
  4801  000588  BE3E               	btfsc	sprintf@c,7,c
  4802  00058A  0E7F               	movlw	127
  4803  00058C  6E28               	movwf	??_sprintf& (0+255),c
  4804  00058E  503C               	movf	sprintf@width,w,c
  4805  000590  5C3E               	subwf	sprintf@c,w,c
  4806  000592  503D               	movf	sprintf@width+1,w,c
  4807  000594  0A80               	xorlw	128
  4808  000596  5828               	subwfb	??_sprintf& (0+255),w,c
  4809  000598  B0D8               	btfsc	status,0,c
  4810  00059A  D007               	goto	l2903
  4811                           
  4812                           ;doprnt.c: 1382: width -= c;
  4813  00059C  503E               	movf	sprintf@c,w,c
  4814  00059E  5E3C               	subwf	sprintf@width,f,c
  4815  0005A0  0E00               	movlw	0
  4816  0005A2  BE3E               	btfsc	sprintf@c,7,c
  4817  0005A4  0EFF               	movlw	255
  4818  0005A6  5A3D               	subwfb	sprintf@width+1,f,c
  4819  0005A8  D004               	goto	l2905
  4820  0005AA                     l2903:
  4821                           
  4822                           ;doprnt.c: 1383: else
  4823                           ;doprnt.c: 1384: width = 0;
  4824  0005AA  0E00               	movlw	0
  4825  0005AC  6E3D               	movwf	sprintf@width+1,c
  4826  0005AE  0E00               	movlw	0
  4827  0005B0  6E3C               	movwf	sprintf@width,c
  4828  0005B2                     l2905:
  4829                           
  4830                           ;doprnt.c: 1387: if(flag & 0x04) {
  4831  0005B2  A43F               	btfss	sprintf@flag,2,c
  4832  0005B4  D058               	goto	l2941
  4833                           
  4834                           ;doprnt.c: 1392: if(flag & 0x03)
  4835  0005B6  0E03               	movlw	3
  4836  0005B8  143F               	andwf	sprintf@flag,w,c
  4837  0005BA  6E28               	movwf	??_sprintf& (0+255),c
  4838  0005BC  0E00               	movlw	0
  4839  0005BE  1440               	andwf	sprintf@flag+1,w,c
  4840  0005C0  6E29               	movwf	(??_sprintf+1)& (0+255),c
  4841  0005C2  5028               	movf	??_sprintf,w,c
  4842  0005C4  1029               	iorwf	??_sprintf+1,w,c
  4843  0005C6  B4D8               	btfsc	status,2,c
  4844  0005C8  D009               	goto	l600
  4845                           
  4846                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4847  0005CA  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4848  0005CE  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4849  0005D2  0E2D               	movlw	45
  4850  0005D4  D00A               	goto	L4
  4851  0005D6                     l2911:
  4852  0005D6  4A1E               	infsnz	sprintf@sp,f,c
  4853  0005D8  2A1F               	incf	sprintf@sp+1,f,c
  4854  0005DA  D035               	goto	l2933
  4855  0005DC                     l600:
  4856                           
  4857                           ;doprnt.c: 1396: else
  4858                           ;doprnt.c: 1399: if(flag & 0x01)
  4859  0005DC  A03F               	btfss	sprintf@flag,0,c
  4860  0005DE  D007               	goto	l2917
  4861                           
  4862                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  4863  0005E0  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4864  0005E4  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4865  0005E8  0E20               	movlw	32
  4866  0005EA                     L4:
  4867  0005EA  6EDF               	movwf	indf2,c
  4868  0005EC  D7F4               	goto	l2911
  4869  0005EE                     l2917:
  4870                           
  4871                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  4872  0005EE  0EC0               	movlw	192
  4873  0005F0  6E28               	movwf	??_sprintf& (0+255),c
  4874  0005F2  0E08               	movlw	8
  4875  0005F4  6E29               	movwf	(??_sprintf+1)& (0+255),c
  4876  0005F6  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  4877  0005FA  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  4878  0005FE  5028               	movf	??_sprintf,w,c
  4879  000600  162A               	andwf	??_sprintf+2,f,c
  4880  000602  5029               	movf	??_sprintf+1,w,c
  4881  000604  162B               	andwf	??_sprintf+3,f,c
  4882  000606  0E80               	movlw	128
  4883  000608  182A               	xorwf	??_sprintf+2,w,c
  4884  00060A  E11D               	bnz	l2933
  4885  00060C  0E08               	movlw	8
  4886  00060E  182B               	xorwf	??_sprintf+3,w,c
  4887  000610  A4D8               	btfss	status,2,c
  4888  000612  D019               	goto	l2933
  4889                           
  4890                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  4891  000614  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4892  000618  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4893  00061C  0E30               	movlw	48
  4894  00061E  6EDF               	movwf	indf2,c
  4895  000620  4A1E               	infsnz	sprintf@sp,f,c
  4896  000622  2A1F               	incf	sprintf@sp+1,f,c
  4897                           
  4898                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  4899  000624  BA3F               	btfsc	sprintf@flag,5,c
  4900  000626  D004               	goto	l2927
  4901  000628  0E00               	movlw	0
  4902  00062A  6E2D               	movwf	_sprintf$1371+1,c
  4903  00062C  0E78               	movlw	120
  4904  00062E  D003               	goto	L5
  4905  000630                     l2927:
  4906  000630  0E00               	movlw	0
  4907  000632  6E2D               	movwf	_sprintf$1371+1,c
  4908  000634  0E58               	movlw	88
  4909  000636                     L5:
  4910  000636  6E2C               	movwf	_sprintf$1371,c
  4911  000638  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4912  00063C  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4913  000640  C02C  FFDF         	movff	_sprintf$1371,indf2
  4914  000644  D7C8               	goto	l2911
  4915  000646                     l2933:
  4916                           
  4917                           ;doprnt.c: 1412: }
  4918                           ;doprnt.c: 1415: if(width)
  4919  000646  503C               	movf	sprintf@width,w,c
  4920  000648  103D               	iorwf	sprintf@width+1,w,c
  4921  00064A  B4D8               	btfsc	status,2,c
  4922  00064C  D104               	goto	l3005
  4923                           
  4924                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4925                           
  4926                           ;doprnt.c: 1416: do
  4927  00064E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4928  000652  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4929  000656  0E30               	movlw	48
  4930  000658  6EDF               	movwf	indf2,c
  4931  00065A  4A1E               	infsnz	sprintf@sp,f,c
  4932  00065C  2A1F               	incf	sprintf@sp+1,f,c
  4933                           
  4934                           ;doprnt.c: 1418: while(--width);
  4935  00065E  063C               	decf	sprintf@width,f,c
  4936  000660  A0D8               	btfss	status,0,c
  4937  000662  063D               	decf	sprintf@width+1,f,c
  4938  000664  D7F0               	goto	l2933
  4939  000666                     l2941:
  4940                           
  4941                           ;doprnt.c: 1422: {
  4942                           ;doprnt.c: 1424: if(width
  4943                           ;doprnt.c: 1426: && !(flag & 0x08)
  4944                           ;doprnt.c: 1428: )
  4945  000666  503C               	movf	sprintf@width,w,c
  4946  000668  103D               	iorwf	sprintf@width+1,w,c
  4947  00066A  A4D8               	btfss	status,2,c
  4948  00066C  B63F               	btfsc	sprintf@flag,3,c
  4949  00066E  D00F               	goto	l2951
  4950  000670                     l2945:
  4951                           
  4952                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4953  000670  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4954  000674  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4955  000678  0E20               	movlw	32
  4956  00067A  6EDF               	movwf	indf2,c
  4957  00067C  4A1E               	infsnz	sprintf@sp,f,c
  4958  00067E  2A1F               	incf	sprintf@sp+1,f,c
  4959                           
  4960                           ;doprnt.c: 1431: while(--width);
  4961  000680  063C               	decf	sprintf@width,f,c
  4962  000682  A0D8               	btfss	status,0,c
  4963  000684  063D               	decf	sprintf@width+1,f,c
  4964  000686  503C               	movf	sprintf@width,w,c
  4965  000688  103D               	iorwf	sprintf@width+1,w,c
  4966  00068A  A4D8               	btfss	status,2,c
  4967  00068C  D7F1               	goto	l2945
  4968  00068E                     l2951:
  4969                           
  4970                           ;doprnt.c: 1438: if(flag & 0x03)
  4971  00068E  0E03               	movlw	3
  4972  000690  143F               	andwf	sprintf@flag,w,c
  4973  000692  6E28               	movwf	??_sprintf& (0+255),c
  4974  000694  0E00               	movlw	0
  4975  000696  1440               	andwf	sprintf@flag+1,w,c
  4976  000698  6E29               	movwf	(??_sprintf+1)& (0+255),c
  4977  00069A  5028               	movf	??_sprintf,w,c
  4978  00069C  1029               	iorwf	??_sprintf+1,w,c
  4979  00069E  B4D8               	btfsc	status,2,c
  4980  0006A0  D009               	goto	l616
  4981                           
  4982                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4983  0006A2  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4984  0006A6  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  4985  0006AA  0E2D               	movlw	45
  4986  0006AC  D00A               	goto	L6
  4987  0006AE                     l2955:
  4988  0006AE  4A1E               	infsnz	sprintf@sp,f,c
  4989  0006B0  2A1F               	incf	sprintf@sp+1,f,c
  4990  0006B2  D009               	goto	l2961
  4991  0006B4                     l616:
  4992                           
  4993                           ;doprnt.c: 1443: else if(flag & 0x01)
  4994  0006B4  A03F               	btfss	sprintf@flag,0,c
  4995  0006B6  D007               	goto	l2961
  4996                           
  4997                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  4998  0006B8  C01E  FFD9         	movff	sprintf@sp,fsr2l
  4999  0006BC  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5000  0006C0  0E20               	movlw	32
  5001  0006C2                     L6:
  5002  0006C2  6EDF               	movwf	indf2,c
  5003  0006C4  D7F4               	goto	l2955
  5004  0006C6                     l2961:
  5005                           
  5006                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  5007  0006C6  0EC0               	movlw	192
  5008  0006C8  6E28               	movwf	??_sprintf& (0+255),c
  5009  0006CA  0E08               	movlw	8
  5010  0006CC  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5011  0006CE  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  5012  0006D2  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  5013  0006D6  5028               	movf	??_sprintf,w,c
  5014  0006D8  162A               	andwf	??_sprintf+2,f,c
  5015  0006DA  5029               	movf	??_sprintf+1,w,c
  5016  0006DC  162B               	andwf	??_sprintf+3,f,c
  5017  0006DE  0E40               	movlw	64
  5018  0006E0  182A               	xorwf	??_sprintf+2,w,c
  5019  0006E2  E10B               	bnz	l2967
  5020  0006E4  0E08               	movlw	8
  5021  0006E6  182B               	xorwf	??_sprintf+3,w,c
  5022  0006E8  A4D8               	btfss	status,2,c
  5023  0006EA  D007               	goto	l2967
  5024                           
  5025                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  5026  0006EC  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5027  0006F0  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5028  0006F4  0E30               	movlw	48
  5029  0006F6  6EDF               	movwf	indf2,c
  5030  0006F8  D0AC               	goto	l3003
  5031  0006FA                     l2967:
  5032                           
  5033                           ;doprnt.c: 1450: else
  5034                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  5035  0006FA  0EC0               	movlw	192
  5036  0006FC  6E28               	movwf	??_sprintf& (0+255),c
  5037  0006FE  0E08               	movlw	8
  5038  000700  6E29               	movwf	(??_sprintf+1)& (0+255),c
  5039  000702  C03F  F02A         	movff	sprintf@flag,??_sprintf+2
  5040  000706  C040  F02B         	movff	sprintf@flag+1,??_sprintf+3
  5041  00070A  5028               	movf	??_sprintf,w,c
  5042  00070C  162A               	andwf	??_sprintf+2,f,c
  5043  00070E  5029               	movf	??_sprintf+1,w,c
  5044  000710  162B               	andwf	??_sprintf+3,f,c
  5045  000712  0E80               	movlw	128
  5046  000714  182A               	xorwf	??_sprintf+2,w,c
  5047  000716  E103               	bnz	u2531
  5048  000718  0E08               	movlw	8
  5049  00071A  182B               	xorwf	??_sprintf+3,w,c
  5050  00071C  A4D8               	btfss	status,2,c
  5051  00071E                     u2531:
  5052  00071E  D09B               	goto	l3005
  5053                           
  5054                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  5055  000720  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5056  000724  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5057  000728  0E30               	movlw	48
  5058  00072A  6EDF               	movwf	indf2,c
  5059  00072C  4A1E               	infsnz	sprintf@sp,f,c
  5060  00072E  2A1F               	incf	sprintf@sp+1,f,c
  5061                           
  5062                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  5063  000730  BA3F               	btfsc	sprintf@flag,5,c
  5064  000732  D004               	goto	l2977
  5065  000734  0E00               	movlw	0
  5066  000736  6E2F               	movwf	_sprintf$1372+1,c
  5067  000738  0E78               	movlw	120
  5068  00073A  D003               	goto	L7
  5069  00073C                     l2977:
  5070  00073C  0E00               	movlw	0
  5071  00073E  6E2F               	movwf	_sprintf$1372+1,c
  5072  000740  0E58               	movlw	88
  5073  000742                     L7:
  5074  000742  6E2E               	movwf	_sprintf$1372,c
  5075  000744  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5076  000748  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5077  00074C  C02E  FFDF         	movff	_sprintf$1372,indf2
  5078  000750  D080               	goto	l3003
  5079  000752                     l2983:
  5080                           
  5081                           ;doprnt.c: 1486: case 0xC0:
  5082                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5083  000752  503B               	movf	sprintf@prec,w,c
  5084  000754  0D02               	mullw	2
  5085  000756  0E15               	movlw	low _dpowers
  5086  000758  24F3               	addwf	prodl,w,c
  5087  00075A  6EF6               	movwf	tblptrl,c
  5088  00075C  0E7E               	movlw	high _dpowers
  5089  00075E  20F4               	addwfc	prodh,w,c
  5090  000760  6EF7               	movwf	tblptrh,c
  5091  000762                     	if	0	;There are less than 3 active tblptr bytes
  5092  000762                     	endif
  5093  000762  0009               	tblrd		*+
  5094  000764  CFF5 F014          	movff	tablat,___lwdiv@divisor
  5095  000768  000A               	tblrd		*-
  5096  00076A  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  5097  00076E  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  5098  000772  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  5099  000776  EC27  F00A         	call	___lwdiv	;wreg free
  5100  00077A  C012  F019         	movff	?___lwdiv,___lwmod@dividend
  5101  00077E  C013  F01A         	movff	?___lwdiv+1,___lwmod@dividend+1
  5102  000782  0E00               	movlw	0
  5103  000784  6E1C               	movwf	___lwmod@divisor+1,c
  5104  000786  0E0A               	movlw	10
  5105  000788  6E1B               	movwf	___lwmod@divisor,c
  5106  00078A  EC99  F00A         	call	___lwmod	;wreg free
  5107  00078E  5019               	movf	?___lwmod,w,c
  5108  000790  D049               	goto	L8
  5109  000792                     l2985:
  5110                           
  5111                           ;doprnt.c: 1499: {
  5112                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5113  000792  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  5114  000796  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  5115  00079A  503B               	movf	sprintf@prec,w,c
  5116  00079C  0D02               	mullw	2
  5117  00079E  0E1F               	movlw	low _hexpowers
  5118  0007A0  24F3               	addwf	prodl,w,c
  5119  0007A2  6EF6               	movwf	tblptrl,c
  5120  0007A4  0E7E               	movlw	high _hexpowers
  5121  0007A6  20F4               	addwfc	prodh,w,c
  5122  0007A8  6EF7               	movwf	tblptrh,c
  5123  0007AA                     	if	0	;There are less than 3 active tblptr bytes
  5124  0007AA                     	endif
  5125  0007AA  0009               	tblrd		*+
  5126  0007AC  CFF5 F014          	movff	tablat,___lwdiv@divisor
  5127  0007B0  000A               	tblrd		*-
  5128  0007B2  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  5129  0007B6  EC27  F00A         	call	___lwdiv	;wreg free
  5130  0007BA  5012               	movf	?___lwdiv,w,c
  5131  0007BC  0B0F               	andlw	15
  5132  0007BE  6E32               	movwf	sprintf@idx,c
  5133                           
  5134                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  5135  0007C0  BA3F               	btfsc	sprintf@flag,5,c
  5136  0007C2  D004               	goto	l2991
  5137  0007C4  0ED4               	movlw	low STR_64
  5138  0007C6  6E30               	movwf	_sprintf$1378,c
  5139  0007C8  0E7E               	movlw	high STR_64
  5140  0007CA  D003               	goto	L9
  5141  0007CC                     l2991:
  5142  0007CC  0EC3               	movlw	low STR_63
  5143  0007CE  6E30               	movwf	_sprintf$1378,c
  5144  0007D0  0E7E               	movlw	high STR_63
  5145  0007D2                     L9:
  5146  0007D2  6E31               	movwf	_sprintf$1378+1,c
  5147  0007D4  5032               	movf	sprintf@idx,w,c
  5148  0007D6  0D01               	mullw	1
  5149  0007D8  C030  F028         	movff	_sprintf$1378,??_sprintf
  5150  0007DC  C031  F029         	movff	_sprintf$1378+1,??_sprintf+1
  5151  0007E0  50F3               	movf	prodl,w,c
  5152  0007E2  2628               	addwf	??_sprintf,f,c
  5153  0007E4  50F4               	movf	prodh,w,c
  5154  0007E6  2229               	addwfc	??_sprintf+1,f,c
  5155  0007E8  C028  FFF6         	movff	??_sprintf,tblptrl
  5156  0007EC  C029  FFF7         	movff	??_sprintf+1,tblptrh
  5157  0007F0                     	if	0	;tblptru may be non-zero
  5158  0007F0                     	endif
  5159  0007F0                     	if	0	;tblptru may be non-zero
  5160  0007F0                     	endif
  5161  0007F0  0008               	tblrd		*
  5162  0007F2  CFF5 F03E          	movff	tablat,sprintf@c
  5163                           
  5164                           ;doprnt.c: 1508: }
  5165                           ;doprnt.c: 1510: break;
  5166  0007F6  D027               	goto	l3001
  5167  0007F8                     l2995:
  5168                           
  5169                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  5170  0007F8  C039  F012         	movff	sprintf@val,___lwdiv@dividend
  5171  0007FC  C03A  F013         	movff	sprintf@val+1,___lwdiv@dividend+1
  5172  000800  503B               	movf	sprintf@prec,w,c
  5173  000802  0D02               	mullw	2
  5174  000804  0E09               	movlw	low _octpowers
  5175  000806  24F3               	addwf	prodl,w,c
  5176  000808  6EF6               	movwf	tblptrl,c
  5177  00080A  0E7E               	movlw	high _octpowers
  5178  00080C  20F4               	addwfc	prodh,w,c
  5179  00080E  6EF7               	movwf	tblptrh,c
  5180  000810                     	if	0	;There are less than 3 active tblptr bytes
  5181  000810                     	endif
  5182  000810  0009               	tblrd		*+
  5183  000812  CFF5 F014          	movff	tablat,___lwdiv@divisor
  5184  000816  000A               	tblrd		*-
  5185  000818  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  5186  00081C  EC27  F00A         	call	___lwdiv	;wreg free
  5187  000820  5012               	movf	?___lwdiv,w,c
  5188  000822  0B07               	andlw	7
  5189  000824                     L8:
  5190  000824  0F30               	addlw	48
  5191  000826  6E3E               	movwf	sprintf@c,c
  5192                           
  5193                           ;doprnt.c: 1523: }
  5194                           
  5195                           ;doprnt.c: 1520: break;
  5196  000828  D00E               	goto	l3001
  5197  00082A                     l2999:
  5198  00082A  503F               	movf	sprintf@flag,w,c
  5199  00082C  0BC0               	andlw	192
  5200                           
  5201                           ; Switch size 1, requested type "space"
  5202                           ; Number of cases is 4, Range of values is 0 to 192
  5203                           ; switch strategies available:
  5204                           ; Name         Instructions Cycles
  5205                           ; simple_byte           13     7 (average)
  5206                           ;	Chosen strategy is simple_byte
  5207  00082E  0A00               	xorlw	0	; case 0
  5208  000830  B4D8               	btfsc	status,2,c
  5209  000832  D78F               	goto	l2983
  5210  000834  0A40               	xorlw	64	; case 64
  5211  000836  B4D8               	btfsc	status,2,c
  5212  000838  D7DF               	goto	l2995
  5213  00083A  0AC0               	xorlw	192	; case 128
  5214  00083C  B4D8               	btfsc	status,2,c
  5215  00083E  D7A9               	goto	l2985
  5216  000840  0A40               	xorlw	64	; case 192
  5217  000842  B4D8               	btfsc	status,2,c
  5218  000844  D786               	goto	l2983
  5219  000846                     l3001:
  5220                           
  5221                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5222  000846  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5223  00084A  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5224  00084E  C03E  FFDF         	movff	sprintf@c,indf2
  5225  000852                     l3003:
  5226  000852  4A1E               	infsnz	sprintf@sp,f,c
  5227  000854  2A1F               	incf	sprintf@sp+1,f,c
  5228  000856                     l3005:
  5229  000856  063B               	decf	sprintf@prec,f,c
  5230  000858  283B               	incf	sprintf@prec,w,c
  5231  00085A  A4D8               	btfss	status,2,c
  5232  00085C  D7E6               	goto	l2999
  5233                           
  5234                           ;doprnt.c: 1525: }
  5235                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  5236  00085E  B63F               	btfsc	sprintf@flag,3,c
  5237  000860  BE3D               	btfsc	sprintf@width+1,7,c
  5238  000862  D014               	goto	l3015
  5239  000864  503D               	movf	sprintf@width+1,w,c
  5240  000866  E103               	bnz	l3009
  5241  000868  043C               	decf	sprintf@width,w,c
  5242  00086A  A0D8               	btfss	status,0,c
  5243  00086C  D00F               	goto	l3015
  5244  00086E                     l3009:
  5245                           
  5246                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  5247  00086E  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5248  000872  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5249  000876  0E20               	movlw	32
  5250  000878  6EDF               	movwf	indf2,c
  5251  00087A  4A1E               	infsnz	sprintf@sp,f,c
  5252  00087C  2A1F               	incf	sprintf@sp+1,f,c
  5253                           
  5254                           ;doprnt.c: 1531: while(--width);
  5255  00087E  063C               	decf	sprintf@width,f,c
  5256  000880  A0D8               	btfss	status,0,c
  5257  000882  063D               	decf	sprintf@width+1,f,c
  5258  000884  503C               	movf	sprintf@width,w,c
  5259  000886  103D               	iorwf	sprintf@width+1,w,c
  5260  000888  A4D8               	btfss	status,2,c
  5261  00088A  D7F1               	goto	l3009
  5262  00088C                     l3015:
  5263  00088C  C020  FFF6         	movff	sprintf@f,tblptrl
  5264  000890  C021  FFF7         	movff	sprintf@f+1,tblptrh
  5265  000894  4A20               	infsnz	sprintf@f,f,c
  5266  000896  2A21               	incf	sprintf@f+1,f,c
  5267  000898                     	if	0	;tblptru may be non-zero
  5268  000898                     	endif
  5269  000898                     	if	0	;tblptru may be non-zero
  5270  000898                     	endif
  5271  000898  0008               	tblrd		*
  5272  00089A  CFF5 F03E          	movff	tablat,sprintf@c
  5273  00089E  503E               	movf	sprintf@c,w,c
  5274  0008A0  A4D8               	btfss	status,2,c
  5275  0008A2  EF0F  F000         	goto	l2661
  5276  0008A6                     l3017:
  5277                           
  5278                           ;doprnt.c: 1538: *sp = 0;
  5279  0008A6  C01E  FFD9         	movff	sprintf@sp,fsr2l
  5280  0008AA  C01F  FFDA         	movff	sprintf@sp+1,fsr2h
  5281  0008AE  0E00               	movlw	0
  5282  0008B0  6EDF               	movwf	indf2,c
  5283  0008B2  0012               	return	
  5284  0008B4                     __end_of_sprintf:
  5285                           	opt stack 0
  5286                           tblptru	equ	0xFF8
  5287                           tblptrh	equ	0xFF7
  5288                           tblptrl	equ	0xFF6
  5289                           tablat	equ	0xFF5
  5290                           prodh	equ	0xFF4
  5291                           prodl	equ	0xFF3
  5292                           intcon	equ	0xFF2
  5293                           indf0	equ	0xFEF
  5294                           postinc0	equ	0xFEE
  5295                           fsr0h	equ	0xFEA
  5296                           fsr0l	equ	0xFE9
  5297                           wreg	equ	0xFE8
  5298                           postdec1	equ	0xFE5
  5299                           plusw1	equ	0xFE3
  5300                           fsr1l	equ	0xFE1
  5301                           indf2	equ	0xFDF
  5302                           postinc2	equ	0xFDE
  5303                           postdec2	equ	0xFDD
  5304                           plusw2	equ	0xFDB
  5305                           fsr2h	equ	0xFDA
  5306                           fsr2l	equ	0xFD9
  5307                           status	equ	0xFD8
  5308                           
  5309 ;; *************** function _isdigit *****************
  5310 ;; Defined at:
  5311 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;  c               1    wreg     unsigned char 
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;  c               1   19[COMRAM] unsigned char 
  5316 ;; Return value:  Size  Location     Type
  5317 ;;		None               void
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5325 ;;      Params:         0       0       0       0       0       0       0
  5326 ;;      Locals:         2       0       0       0       0       0       0
  5327 ;;      Temps:          1       0       0       0       0       0       0
  5328 ;;      Totals:         3       0       0       0       0       0       0
  5329 ;;Total ram usage:        3 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    1
  5332 ;; This function calls:
  5333 ;;		Nothing
  5334 ;; This function is called by:
  5335 ;;		_sprintf
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text15
  5340  001816                     __ptext15:
  5341                           	opt stack 0
  5342  001816                     _isdigit:
  5343                           	opt stack 26
  5344                           
  5345                           ;incstack = 0
  5346                           ;isdigit@c stored from wreg
  5347  001816  6E14               	movwf	isdigit@c,c
  5348  001818  0E00               	movlw	0
  5349  00181A  6E13               	movwf	_isdigit$1608,c
  5350  00181C  0E3A               	movlw	58
  5351  00181E  6014               	cpfslt	isdigit@c,c
  5352  001820  D005               	goto	l2599
  5353  001822  0E2F               	movlw	47
  5354  001824  6414               	cpfsgt	isdigit@c,c
  5355  001826  D002               	goto	l2599
  5356  001828  0E01               	movlw	1
  5357  00182A  6E13               	movwf	_isdigit$1608,c
  5358  00182C                     l2599:
  5359  00182C  C013  F012         	movff	_isdigit$1608,??_isdigit
  5360  001830  3012               	rrcf	??_isdigit,w,c
  5361  001832  0012               	return	
  5362  001834                     __end_of_isdigit:
  5363                           	opt stack 0
  5364                           tblptru	equ	0xFF8
  5365                           tblptrh	equ	0xFF7
  5366                           tblptrl	equ	0xFF6
  5367                           tablat	equ	0xFF5
  5368                           prodh	equ	0xFF4
  5369                           prodl	equ	0xFF3
  5370                           intcon	equ	0xFF2
  5371                           indf0	equ	0xFEF
  5372                           postinc0	equ	0xFEE
  5373                           fsr0h	equ	0xFEA
  5374                           fsr0l	equ	0xFE9
  5375                           wreg	equ	0xFE8
  5376                           postdec1	equ	0xFE5
  5377                           plusw1	equ	0xFE3
  5378                           fsr1l	equ	0xFE1
  5379                           indf2	equ	0xFDF
  5380                           postinc2	equ	0xFDE
  5381                           postdec2	equ	0xFDD
  5382                           plusw2	equ	0xFDB
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function ___wmul *****************
  5388 ;; Defined at:
  5389 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  multiplier      2   17[COMRAM] unsigned int 
  5392 ;;  multiplicand    2   19[COMRAM] unsigned int 
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;  product         2   21[COMRAM] unsigned int 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  2   17[COMRAM] unsigned int 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0, prodl, prodh
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5404 ;;      Params:         4       0       0       0       0       0       0
  5405 ;;      Locals:         2       0       0       0       0       0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0
  5407 ;;      Totals:         6       0       0       0       0       0       0
  5408 ;;Total ram usage:        6 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    1
  5411 ;; This function calls:
  5412 ;;		Nothing
  5413 ;; This function is called by:
  5414 ;;		_sprintf
  5415 ;; This function uses a non-reentrant model
  5416 ;;
  5417                           
  5418                           	psect	text16
  5419  00173E                     __ptext16:
  5420                           	opt stack 0
  5421  00173E                     ___wmul:
  5422                           	opt stack 26
  5423                           
  5424                           ;incstack = 0
  5425  00173E  5012               	movf	___wmul@multiplier,w,c
  5426  001740  0214               	mulwf	___wmul@multiplicand,c
  5427  001742  CFF3 F016          	movff	prodl,___wmul@product
  5428  001746  CFF4 F017          	movff	prodh,___wmul@product+1
  5429  00174A  5012               	movf	___wmul@multiplier,w,c
  5430  00174C  0215               	mulwf	___wmul@multiplicand+1,c
  5431  00174E  50F3               	movf	prodl,w,c
  5432  001750  2617               	addwf	___wmul@product+1,f,c
  5433  001752  5013               	movf	___wmul@multiplier+1,w,c
  5434  001754  0214               	mulwf	___wmul@multiplicand,c
  5435  001756  50F3               	movf	prodl,w,c
  5436  001758  2617               	addwf	___wmul@product+1,f,c
  5437  00175A  C016  F012         	movff	___wmul@product,?___wmul
  5438  00175E  C017  F013         	movff	___wmul@product+1,?___wmul+1
  5439  001762  0012               	return	
  5440  001764                     __end_of___wmul:
  5441                           	opt stack 0
  5442                           tblptru	equ	0xFF8
  5443                           tblptrh	equ	0xFF7
  5444                           tblptrl	equ	0xFF6
  5445                           tablat	equ	0xFF5
  5446                           prodh	equ	0xFF4
  5447                           prodl	equ	0xFF3
  5448                           intcon	equ	0xFF2
  5449                           indf0	equ	0xFEF
  5450                           postinc0	equ	0xFEE
  5451                           fsr0h	equ	0xFEA
  5452                           fsr0l	equ	0xFE9
  5453                           wreg	equ	0xFE8
  5454                           postdec1	equ	0xFE5
  5455                           plusw1	equ	0xFE3
  5456                           fsr1l	equ	0xFE1
  5457                           indf2	equ	0xFDF
  5458                           postinc2	equ	0xFDE
  5459                           postdec2	equ	0xFDD
  5460                           plusw2	equ	0xFDB
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function ___lwmod *****************
  5466 ;; Defined at:
  5467 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  dividend        2   24[COMRAM] unsigned int 
  5470 ;;  divisor         2   26[COMRAM] unsigned int 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  counter         1   28[COMRAM] unsigned char 
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  2   24[COMRAM] unsigned int 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5482 ;;      Params:         4       0       0       0       0       0       0
  5483 ;;      Locals:         1       0       0       0       0       0       0
  5484 ;;      Temps:          0       0       0       0       0       0       0
  5485 ;;      Totals:         5       0       0       0       0       0       0
  5486 ;;Total ram usage:        5 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    1
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_sprintf
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text17
  5497  001532                     __ptext17:
  5498                           	opt stack 0
  5499  001532                     ___lwmod:
  5500                           	opt stack 26
  5501                           
  5502                           ;incstack = 0
  5503  001532  501B               	movf	___lwmod@divisor,w,c
  5504  001534  101C               	iorwf	___lwmod@divisor+1,w,c
  5505  001536  B4D8               	btfsc	status,2,c
  5506  001538  D018               	goto	l1082
  5507  00153A  0E01               	movlw	1
  5508  00153C  6E1D               	movwf	___lwmod@counter,c
  5509  00153E  D004               	goto	l2637
  5510  001540                     l2635:
  5511  001540  90D8               	bcf	status,0,c
  5512  001542  361B               	rlcf	___lwmod@divisor,f,c
  5513  001544  361C               	rlcf	___lwmod@divisor+1,f,c
  5514  001546  2A1D               	incf	___lwmod@counter,f,c
  5515  001548                     l2637:
  5516  001548  AE1C               	btfss	___lwmod@divisor+1,7,c
  5517  00154A  D7FA               	goto	l2635
  5518  00154C                     l2639:
  5519  00154C  501B               	movf	___lwmod@divisor,w,c
  5520  00154E  5C19               	subwf	___lwmod@dividend,w,c
  5521  001550  501C               	movf	___lwmod@divisor+1,w,c
  5522  001552  581A               	subwfb	___lwmod@dividend+1,w,c
  5523  001554  A0D8               	btfss	status,0,c
  5524  001556  D004               	goto	l2643
  5525  001558  501B               	movf	___lwmod@divisor,w,c
  5526  00155A  5E19               	subwf	___lwmod@dividend,f,c
  5527  00155C  501C               	movf	___lwmod@divisor+1,w,c
  5528  00155E  5A1A               	subwfb	___lwmod@dividend+1,f,c
  5529  001560                     l2643:
  5530  001560  90D8               	bcf	status,0,c
  5531  001562  321C               	rrcf	___lwmod@divisor+1,f,c
  5532  001564  321B               	rrcf	___lwmod@divisor,f,c
  5533  001566  2E1D               	decfsz	___lwmod@counter,f,c
  5534  001568  D7F1               	goto	l2639
  5535  00156A                     l1082:
  5536  00156A  C019  F019         	movff	___lwmod@dividend,?___lwmod
  5537  00156E  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  5538  001572  0012               	return		;funcret
  5539  001574                     __end_of___lwmod:
  5540                           	opt stack 0
  5541                           tblptru	equ	0xFF8
  5542                           tblptrh	equ	0xFF7
  5543                           tblptrl	equ	0xFF6
  5544                           tablat	equ	0xFF5
  5545                           prodh	equ	0xFF4
  5546                           prodl	equ	0xFF3
  5547                           intcon	equ	0xFF2
  5548                           indf0	equ	0xFEF
  5549                           postinc0	equ	0xFEE
  5550                           fsr0h	equ	0xFEA
  5551                           fsr0l	equ	0xFE9
  5552                           wreg	equ	0xFE8
  5553                           postdec1	equ	0xFE5
  5554                           plusw1	equ	0xFE3
  5555                           fsr1l	equ	0xFE1
  5556                           indf2	equ	0xFDF
  5557                           postinc2	equ	0xFDE
  5558                           postdec2	equ	0xFDD
  5559                           plusw2	equ	0xFDB
  5560                           fsr2h	equ	0xFDA
  5561                           fsr2l	equ	0xFD9
  5562                           status	equ	0xFD8
  5563                           
  5564 ;; *************** function ___lwdiv *****************
  5565 ;; Defined at:
  5566 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;  dividend        2   17[COMRAM] unsigned int 
  5569 ;;  divisor         2   19[COMRAM] unsigned int 
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;  quotient        2   21[COMRAM] unsigned int 
  5572 ;;  counter         1   23[COMRAM] unsigned char 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  2   17[COMRAM] unsigned int 
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5582 ;;      Params:         4       0       0       0       0       0       0
  5583 ;;      Locals:         3       0       0       0       0       0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0
  5585 ;;      Totals:         7       0       0       0       0       0       0
  5586 ;;Total ram usage:        7 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    1
  5589 ;; This function calls:
  5590 ;;		Nothing
  5591 ;; This function is called by:
  5592 ;;		_sprintf
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           	psect	text18
  5597  00144E                     __ptext18:
  5598                           	opt stack 0
  5599  00144E                     ___lwdiv:
  5600                           	opt stack 26
  5601                           
  5602                           ;incstack = 0
  5603  00144E  0E00               	movlw	0
  5604  001450  6E17               	movwf	___lwdiv@quotient+1,c
  5605  001452  0E00               	movlw	0
  5606  001454  6E16               	movwf	___lwdiv@quotient,c
  5607  001456  5014               	movf	___lwdiv@divisor,w,c
  5608  001458  1015               	iorwf	___lwdiv@divisor+1,w,c
  5609  00145A  B4D8               	btfsc	status,2,c
  5610  00145C  D01C               	goto	l1072
  5611  00145E  0E01               	movlw	1
  5612  001460  6E18               	movwf	___lwdiv@counter,c
  5613  001462  D004               	goto	l2617
  5614  001464                     l2615:
  5615  001464  90D8               	bcf	status,0,c
  5616  001466  3614               	rlcf	___lwdiv@divisor,f,c
  5617  001468  3615               	rlcf	___lwdiv@divisor+1,f,c
  5618  00146A  2A18               	incf	___lwdiv@counter,f,c
  5619  00146C                     l2617:
  5620  00146C  AE15               	btfss	___lwdiv@divisor+1,7,c
  5621  00146E  D7FA               	goto	l2615
  5622  001470                     l2619:
  5623  001470  90D8               	bcf	status,0,c
  5624  001472  3616               	rlcf	___lwdiv@quotient,f,c
  5625  001474  3617               	rlcf	___lwdiv@quotient+1,f,c
  5626  001476  5014               	movf	___lwdiv@divisor,w,c
  5627  001478  5C12               	subwf	___lwdiv@dividend,w,c
  5628  00147A  5015               	movf	___lwdiv@divisor+1,w,c
  5629  00147C  5813               	subwfb	___lwdiv@dividend+1,w,c
  5630  00147E  A0D8               	btfss	status,0,c
  5631  001480  D005               	goto	l2627
  5632  001482  5014               	movf	___lwdiv@divisor,w,c
  5633  001484  5E12               	subwf	___lwdiv@dividend,f,c
  5634  001486  5015               	movf	___lwdiv@divisor+1,w,c
  5635  001488  5A13               	subwfb	___lwdiv@dividend+1,f,c
  5636  00148A  8016               	bsf	___lwdiv@quotient,0,c
  5637  00148C                     l2627:
  5638  00148C  90D8               	bcf	status,0,c
  5639  00148E  3215               	rrcf	___lwdiv@divisor+1,f,c
  5640  001490  3214               	rrcf	___lwdiv@divisor,f,c
  5641  001492  2E18               	decfsz	___lwdiv@counter,f,c
  5642  001494  D7ED               	goto	l2619
  5643  001496                     l1072:
  5644  001496  C016  F012         	movff	___lwdiv@quotient,?___lwdiv
  5645  00149A  C017  F013         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5646  00149E  0012               	return		;funcret
  5647  0014A0                     __end_of___lwdiv:
  5648                           	opt stack 0
  5649                           tblptru	equ	0xFF8
  5650                           tblptrh	equ	0xFF7
  5651                           tblptrl	equ	0xFF6
  5652                           tablat	equ	0xFF5
  5653                           prodh	equ	0xFF4
  5654                           prodl	equ	0xFF3
  5655                           intcon	equ	0xFF2
  5656                           indf0	equ	0xFEF
  5657                           postinc0	equ	0xFEE
  5658                           fsr0h	equ	0xFEA
  5659                           fsr0l	equ	0xFE9
  5660                           wreg	equ	0xFE8
  5661                           postdec1	equ	0xFE5
  5662                           plusw1	equ	0xFE3
  5663                           fsr1l	equ	0xFE1
  5664                           indf2	equ	0xFDF
  5665                           postinc2	equ	0xFDE
  5666                           postdec2	equ	0xFDD
  5667                           plusw2	equ	0xFDB
  5668                           fsr2h	equ	0xFDA
  5669                           fsr2l	equ	0xFD9
  5670                           status	equ	0xFD8
  5671                           
  5672 ;; *************** function _ESP8266_AT_Test *****************
  5673 ;; Defined at:
  5674 ;;		line 115 in file "harwave/UART.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;		None
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;		None
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  1    wreg      void 
  5681 ;; Registers used:
  5682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5688 ;;      Params:         0       0       0       0       0       0       0
  5689 ;;      Locals:         0       0       0       0       0       0       0
  5690 ;;      Temps:          0       0       0       0       0       0       0
  5691 ;;      Totals:         0       0       0       0       0       0       0
  5692 ;;Total ram usage:        0 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    4
  5695 ;; This function calls:
  5696 ;;		_ESP8266_Cmd
  5697 ;; This function is called by:
  5698 ;;		_ESP8266_client
  5699 ;;		_ESP8266_Server
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text19
  5704  0016EC                     __ptext19:
  5705                           	opt stack 0
  5706  0016EC                     _ESP8266_AT_Test:
  5707                           	opt stack 25
  5708  0016EC                     l3091:
  5709  0016EC  0EE0               	movlw	low STR_4
  5710  0016EE  6E25               	movwf	ESP8266_Cmd@cmd,c
  5711  0016F0  0E7F               	movlw	high STR_4
  5712  0016F2  6E26               	movwf	ESP8266_Cmd@cmd+1,c
  5713  0016F4  0EC1               	movlw	low (STR_3+5)
  5714  0016F6  6E27               	movwf	ESP8266_Cmd@reply1,c
  5715  0016F8  0E7F               	movlw	high (STR_3+5)
  5716  0016FA  6E28               	movwf	ESP8266_Cmd@reply1+1,c
  5717  0016FC  0E00               	movlw	0
  5718  0016FE  6E29               	movwf	ESP8266_Cmd@reply2,c
  5719  001700  0E00               	movlw	0
  5720  001702  6E2A               	movwf	ESP8266_Cmd@reply2+1,c
  5721  001704  0E00               	movlw	0
  5722  001706  6E2C               	movwf	ESP8266_Cmd@waittime+1,c
  5723  001708  0EC8               	movlw	200
  5724  00170A  6E2B               	movwf	ESP8266_Cmd@waittime,c
  5725  00170C  EC18  F008         	call	_ESP8266_Cmd	;wreg free
  5726  001710  0900               	iorlw	0
  5727  001712  A4D8               	btfss	status,2,c
  5728  001714  0012               	return	
  5729  001716  D7EA               	goto	l3091
  5730  001718                     __end_of_ESP8266_AT_Test:
  5731                           	opt stack 0
  5732                           tblptru	equ	0xFF8
  5733                           tblptrh	equ	0xFF7
  5734                           tblptrl	equ	0xFF6
  5735                           tablat	equ	0xFF5
  5736                           prodh	equ	0xFF4
  5737                           prodl	equ	0xFF3
  5738                           intcon	equ	0xFF2
  5739                           indf0	equ	0xFEF
  5740                           postinc0	equ	0xFEE
  5741                           fsr0h	equ	0xFEA
  5742                           fsr0l	equ	0xFE9
  5743                           wreg	equ	0xFE8
  5744                           postdec1	equ	0xFE5
  5745                           plusw1	equ	0xFE3
  5746                           fsr1l	equ	0xFE1
  5747                           indf2	equ	0xFDF
  5748                           postinc2	equ	0xFDE
  5749                           postdec2	equ	0xFDD
  5750                           plusw2	equ	0xFDB
  5751                           fsr2h	equ	0xFDA
  5752                           fsr2l	equ	0xFD9
  5753                           status	equ	0xFD8
  5754                           
  5755 ;; *************** function _ESP8266_Cmd *****************
  5756 ;; Defined at:
  5757 ;;		line 72 in file "harwave/UART.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  cmd             2   36[COMRAM] PTR unsigned char 
  5760 ;;		 -> STR_55(14), STR_53(15), STR_49(11), STR_47(22), 
  5761 ;;		 -> STR_45(14), STR_43(15), STR_41(14), STR_35(13), 
  5762 ;;		 -> STR_32(13), STR_30(25), STR_28(23), ESP8266_Link_Server@cCmd(120), 
  5763 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_13(14), STR_11(14), 
  5764 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@cStr(20), 
  5765 ;;  reply1          2   38[COMRAM] PTR unsigned char 
  5766 ;;		 -> STR_56(3), STR_54(3), STR_50(3), STR_48(3), 
  5767 ;;		 -> STR_46(3), STR_44(3), STR_42(3), STR_36(10), 
  5768 ;;		 -> STR_33(10), STR_31(3), STR_29(3), STR_26(8), 
  5769 ;;		 -> STR_19(3), STR_16(3), STR_14(3), STR_12(3), 
  5770 ;;		 -> STR_10(3), STR_7(3), STR_5(3), STR_3(8), 
  5771 ;;		 -> STR_2(3), 
  5772 ;;  reply2          2   40[COMRAM] PTR unsigned char 
  5773 ;;		 -> STR_37(3), STR_34(3), STR_27(7), STR_17(10), 
  5774 ;;		 -> STR_8(6), NULL(0), 
  5775 ;;  waittime        2   42[COMRAM] unsigned int 
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      unsigned char 
  5780 ;; Registers used:
  5781 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5787 ;;      Params:         8       0       0       0       0       0       0
  5788 ;;      Locals:         1       0       0       0       0       0       0
  5789 ;;      Temps:          0       0       0       0       0       0       0
  5790 ;;      Totals:         9       0       0       0       0       0       0
  5791 ;;Total ram usage:        9 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    3
  5794 ;; This function calls:
  5795 ;;		_ESP8266_Uart
  5796 ;;		_delay_ms
  5797 ;;		_strstr
  5798 ;; This function is called by:
  5799 ;;		_ESP8266_AT_Test
  5800 ;;		_ESP8266_Rst
  5801 ;;		_ESP8266_Net_Mode_Choose
  5802 ;;		_ESP8266_JoinAP
  5803 ;;		_ESP8266_Link_Server
  5804 ;;		_STA_MODE
  5805 ;;		_ESP8266_client
  5806 ;;		_ESP8266_SendString
  5807 ;;		_ESP8266_BuildAP
  5808 ;;		_set_baudrate
  5809 ;;		_AP_MODE
  5810 ;;		_ESP8266_Server
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text20
  5815  001030                     __ptext20:
  5816                           	opt stack 0
  5817  001030                     _ESP8266_Cmd:
  5818                           	opt stack 24
  5819                           
  5820                           ;UART.c: 74: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  5821                           
  5822                           ;incstack = 0
  5823  001030  0102               	movlb	2	; () banked
  5824  001032  91C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),0,b
  5825  001034  93C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),1,b
  5826  001036  95C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),2,b
  5827  001038  97C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),3,b
  5828  00103A  99C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),4,b
  5829  00103C  9BC8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),5,b
  5830  00103E  9DC8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),6,b
  5831                           
  5832                           ; BSR set to: 2
  5833                           ;UART.c: 78: ESP8266_Uart( cmd);
  5834  001040  C025  F012         	movff	ESP8266_Cmd@cmd,ESP8266_Uart@cmd
  5835  001044  C026  F013         	movff	ESP8266_Cmd@cmd+1,ESP8266_Uart@cmd+1
  5836  001048  EC91  F009         	call	_ESP8266_Uart	;wreg free
  5837                           
  5838                           ;UART.c: 81: if ( ( reply1 == 0 ) && ( reply2 == 0 ) )
  5839  00104C  5027               	movf	ESP8266_Cmd@reply1,w,c
  5840  00104E  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  5841  001050  A4D8               	btfss	status,2,c
  5842  001052  D006               	goto	l2561
  5843  001054  5029               	movf	ESP8266_Cmd@reply2,w,c
  5844  001056  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  5845  001058  A4D8               	btfss	status,2,c
  5846  00105A  D002               	goto	l2561
  5847                           
  5848                           ;UART.c: 82: return (bool)1;
  5849  00105C  0E01               	movlw	1
  5850  00105E  0012               	return	
  5851  001060                     l2561:
  5852                           
  5853                           ;UART.c: 84: delay_ms ( waittime );
  5854  001060  C02B  F014         	movff	ESP8266_Cmd@waittime,delay_ms@ms
  5855  001064  C02C  F015         	movff	ESP8266_Cmd@waittime+1,delay_ms@ms+1
  5856  001068  EC1A  F00C         	call	_delay_ms	;wreg free
  5857                           
  5858                           ;UART.c: 91: if ( ( reply1 != 0 ) && ( reply2 != 0 ) )
  5859  00106C  5027               	movf	ESP8266_Cmd@reply1,w,c
  5860  00106E  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  5861  001070  B4D8               	btfsc	status,2,c
  5862  001072  D022               	goto	l2579
  5863  001074  5029               	movf	ESP8266_Cmd@reply2,w,c
  5864  001076  102A               	iorwf	ESP8266_Cmd@reply2+1,w,c
  5865  001078  B4D8               	btfsc	status,2,c
  5866  00107A  D01E               	goto	l2579
  5867                           
  5868                           ;UART.c: 92: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) || (u8
      +                          ) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  5869  00107C  0E01               	movlw	1
  5870  00107E  6E2D               	movwf	_ESP8266_Cmd$1162,c
  5871  001080  0E64               	movlw	low _strEsp8266_Fram_Record
  5872  001082  6E21               	movwf	strstr@s1,c
  5873  001084  0E02               	movlw	high _strEsp8266_Fram_Record
  5874  001086  6E22               	movwf	strstr@s1+1,c
  5875  001088  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  5876  00108C  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  5877  001090  EC0E  F009         	call	_strstr	;wreg free
  5878  001094  6621               	tstfsz	?_strstr,c
  5879  001096  D00E               	goto	l321
  5880  001098  0E64               	movlw	low _strEsp8266_Fram_Record
  5881  00109A  6E21               	movwf	strstr@s1,c
  5882  00109C  0E02               	movlw	high _strEsp8266_Fram_Record
  5883  00109E  6E22               	movwf	strstr@s1+1,c
  5884  0010A0  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  5885  0010A4  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  5886  0010A8  EC0E  F009         	call	_strstr	;wreg free
  5887  0010AC  6621               	tstfsz	?_strstr,c
  5888  0010AE  D002               	goto	l321
  5889  0010B0  0E00               	movlw	0
  5890  0010B2  6E2D               	movwf	_ESP8266_Cmd$1162,c
  5891  0010B4                     l321:
  5892  0010B4  502D               	movf	_ESP8266_Cmd$1162,w,c
  5893  0010B6  0012               	return	
  5894  0010B8                     l2579:
  5895                           
  5896                           ;UART.c: 93: else if ( reply1 != 0 )
  5897  0010B8  5027               	movf	ESP8266_Cmd@reply1,w,c
  5898  0010BA  1028               	iorwf	ESP8266_Cmd@reply1+1,w,c
  5899  0010BC  B4D8               	btfsc	status,2,c
  5900  0010BE  D00C               	goto	l2587
  5901                           
  5902                           ;UART.c: 94: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) );
  5903  0010C0  0E64               	movlw	low _strEsp8266_Fram_Record
  5904  0010C2  6E21               	movwf	strstr@s1,c
  5905  0010C4  0E02               	movlw	high _strEsp8266_Fram_Record
  5906  0010C6  6E22               	movwf	strstr@s1+1,c
  5907  0010C8  C027  F023         	movff	ESP8266_Cmd@reply1,strstr@s2
  5908  0010CC  C028  F024         	movff	ESP8266_Cmd@reply1+1,strstr@s2+1
  5909  0010D0  EC0E  F009         	call	_strstr	;wreg free
  5910  0010D4  5021               	movf	?_strstr,w,c
  5911  0010D6  0012               	return	
  5912  0010D8                     l2587:
  5913                           
  5914                           ;UART.c: 95: else
  5915                           ;UART.c: 96: return ( (u8) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  5916  0010D8  0E64               	movlw	low _strEsp8266_Fram_Record
  5917  0010DA  6E21               	movwf	strstr@s1,c
  5918  0010DC  0E02               	movlw	high _strEsp8266_Fram_Record
  5919  0010DE  6E22               	movwf	strstr@s1+1,c
  5920  0010E0  C029  F023         	movff	ESP8266_Cmd@reply2,strstr@s2
  5921  0010E4  C02A  F024         	movff	ESP8266_Cmd@reply2+1,strstr@s2+1
  5922  0010E8  EC0E  F009         	call	_strstr	;wreg free
  5923  0010EC  5021               	movf	?_strstr,w,c
  5924  0010EE  0012               	return	
  5925  0010F0                     __end_of_ESP8266_Cmd:
  5926                           	opt stack 0
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           intcon	equ	0xFF2
  5934                           indf0	equ	0xFEF
  5935                           postinc0	equ	0xFEE
  5936                           fsr0h	equ	0xFEA
  5937                           fsr0l	equ	0xFE9
  5938                           wreg	equ	0xFE8
  5939                           postdec1	equ	0xFE5
  5940                           plusw1	equ	0xFE3
  5941                           fsr1l	equ	0xFE1
  5942                           indf2	equ	0xFDF
  5943                           postinc2	equ	0xFDE
  5944                           postdec2	equ	0xFDD
  5945                           plusw2	equ	0xFDB
  5946                           fsr2h	equ	0xFDA
  5947                           fsr2l	equ	0xFD9
  5948                           status	equ	0xFD8
  5949                           
  5950 ;; *************** function _ESP8266_Uart *****************
  5951 ;; Defined at:
  5952 ;;		line 59 in file "harwave/UART.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  cmd             2   17[COMRAM] PTR unsigned char 
  5955 ;;		 -> STR_55(14), STR_53(15), STR_49(11), STR_47(22), 
  5956 ;;		 -> STR_45(14), STR_43(15), STR_41(14), STR_35(13), 
  5957 ;;		 -> STR_32(13), STR_30(25), STR_28(23), ESP8266_Link_Server@cCmd(120), 
  5958 ;;		 -> ESP8266_BuildAP@cCmd(120), ESP8266_JoinAP@cCmd(120), STR_13(14), STR_11(14), 
  5959 ;;		 -> STR_9(14), STR_6(9), STR_4(5), ESP8266_SendString@cStr(20), 
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;  index           2   21[COMRAM] int 
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  1    wreg      void 
  5964 ;; Registers used:
  5965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5971 ;;      Params:         2       0       0       0       0       0       0
  5972 ;;      Locals:         2       0       0       0       0       0       0
  5973 ;;      Temps:          2       0       0       0       0       0       0
  5974 ;;      Totals:         6       0       0       0       0       0       0
  5975 ;;Total ram usage:        6 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; Hardware stack levels required when called:    1
  5978 ;; This function calls:
  5979 ;;		Nothing
  5980 ;; This function is called by:
  5981 ;;		_ESP8266_Cmd
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text21
  5986  001322                     __ptext21:
  5987                           	opt stack 0
  5988  001322                     _ESP8266_Uart:
  5989                           	opt stack 25
  5990                           
  5991                           ;UART.c: 60: int index=-1;
  5992                           
  5993                           ;incstack = 0
  5994  001322  6816               	setf	ESP8266_Uart@index,c
  5995  001324  6817               	setf	ESP8266_Uart@index+1,c
  5996  001326                     l2525:
  5997                           
  5998                           ;UART.c: 63: {
  5999                           ;UART.c: 64: index++;
  6000  001326  4A16               	infsnz	ESP8266_Uart@index,f,c
  6001  001328  2A17               	incf	ESP8266_Uart@index+1,f,c
  6002  00132A                     l307:
  6003  00132A  A89E               	btfss	3998,4,c	;volatile
  6004  00132C  D7FE               	goto	l307
  6005                           
  6006                           ;UART.c: 66: TXREG=cmd[index];
  6007  00132E  5016               	movf	ESP8266_Uart@index,w,c
  6008  001330  2412               	addwf	ESP8266_Uart@cmd,w,c
  6009  001332  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  6010  001334  5017               	movf	ESP8266_Uart@index+1,w,c
  6011  001336  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  6012  001338  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  6013  00133A  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  6014  00133E  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  6015  001342  6AF8               	clrf	tblptru,c
  6016  001344  0E05               	movlw	(high __ramtop+-1)
  6017  001346  64F7               	cpfsgt	tblptrh,c
  6018  001348  D003               	bra	u1747
  6019  00134A  0008               	tblrd		*
  6020  00134C  50F5               	movf	tablat,w,c
  6021  00134E  D005               	bra	u1740
  6022  001350                     u1747:
  6023  001350  CFF6 FFE9          	movff	tblptrl,fsr0l
  6024  001354  CFF7 FFEA          	movff	tblptrh,fsr0h
  6025  001358  50EF               	movf	indf0,w,c
  6026  00135A                     u1740:
  6027  00135A  6EAD               	movwf	4013,c	;volatile
  6028                           
  6029                           ;UART.c: 67: }while(cmd[index]!='\0');
  6030  00135C  5016               	movf	ESP8266_Uart@index,w,c
  6031  00135E  2412               	addwf	ESP8266_Uart@cmd,w,c
  6032  001360  6E14               	movwf	??_ESP8266_Uart& (0+255),c
  6033  001362  5017               	movf	ESP8266_Uart@index+1,w,c
  6034  001364  2013               	addwfc	ESP8266_Uart@cmd+1,w,c
  6035  001366  6E15               	movwf	(??_ESP8266_Uart+1)& (0+255),c
  6036  001368  C014  FFF6         	movff	??_ESP8266_Uart,tblptrl
  6037  00136C  C015  FFF7         	movff	??_ESP8266_Uart+1,tblptrh
  6038  001370  6AF8               	clrf	tblptru,c
  6039  001372  0E05               	movlw	(high __ramtop+-1)
  6040  001374  64F7               	cpfsgt	tblptrh,c
  6041  001376  D003               	bra	u1757
  6042  001378  0008               	tblrd		*
  6043  00137A  50F5               	movf	tablat,w,c
  6044  00137C  D005               	bra	u1750
  6045  00137E                     u1757:
  6046  00137E  CFF6 FFE9          	movff	tblptrl,fsr0l
  6047  001382  CFF7 FFEA          	movff	tblptrh,fsr0h
  6048  001386  50EF               	movf	indf0,w,c
  6049  001388                     u1750:
  6050  001388  0900               	iorlw	0
  6051  00138A  A4D8               	btfss	status,2,c
  6052  00138C  D7CC               	goto	l2525
  6053  00138E                     l311:
  6054  00138E  B2AC               	btfsc	4012,1,c	;volatile
  6055  001390  0012               	return	
  6056  001392  D7FD               	goto	l311
  6057  001394                     __end_of_ESP8266_Uart:
  6058                           	opt stack 0
  6059                           tblptru	equ	0xFF8
  6060                           tblptrh	equ	0xFF7
  6061                           tblptrl	equ	0xFF6
  6062                           tablat	equ	0xFF5
  6063                           prodh	equ	0xFF4
  6064                           prodl	equ	0xFF3
  6065                           intcon	equ	0xFF2
  6066                           indf0	equ	0xFEF
  6067                           postinc0	equ	0xFEE
  6068                           fsr0h	equ	0xFEA
  6069                           fsr0l	equ	0xFE9
  6070                           wreg	equ	0xFE8
  6071                           postdec1	equ	0xFE5
  6072                           plusw1	equ	0xFE3
  6073                           fsr1l	equ	0xFE1
  6074                           indf2	equ	0xFDF
  6075                           postinc2	equ	0xFDE
  6076                           postdec2	equ	0xFDD
  6077                           plusw2	equ	0xFDB
  6078                           fsr2h	equ	0xFDA
  6079                           fsr2l	equ	0xFD9
  6080                           status	equ	0xFD8
  6081                           
  6082 ;; *************** function _ESP8266_ReceiveString *****************
  6083 ;; Defined at:
  6084 ;;		line 241 in file "harwave/UART.c"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;		None
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  pRecStr         2   39[COMRAM] PTR unsigned char 
  6089 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(100), NULL(0), strEsp8266_Fram_Record(101), 
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  2   36[COMRAM] PTR unsigned char 
  6092 ;; Registers used:
  6093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6099 ;;      Params:         2       0       0       0       0       0       0
  6100 ;;      Locals:         2       0       0       0       0       0       0
  6101 ;;      Temps:          1       0       0       0       0       0       0
  6102 ;;      Totals:         5       0       0       0       0       0       0
  6103 ;;Total ram usage:        5 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    3
  6106 ;; This function calls:
  6107 ;;		_strstr
  6108 ;; This function is called by:
  6109 ;;		_main
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           	psect	text22
  6114  0010F0                     __ptext22:
  6115                           	opt stack 0
  6116  0010F0                     _ESP8266_ReceiveString:
  6117                           	opt stack 27
  6118                           
  6119                           ;UART.c: 243: char * pRecStr = 0;
  6120                           
  6121                           ;incstack = 0
  6122  0010F0  0E00               	movlw	0
  6123  0010F2  6E28               	movwf	ESP8266_ReceiveString@pRecStr,c
  6124  0010F4  0E00               	movlw	0
  6125  0010F6  6E29               	movwf	ESP8266_ReceiveString@pRecStr+1,c
  6126  0010F8  D007               	goto	l3253
  6127  0010FA                     l3251:
  6128                           
  6129                           ;UART.c: 246: if(strEsp8266_Fram_Record .InfBit .FramLength >= 100){
  6130  0010FA  0102               	movlb	2	; () banked
  6131  0010FC  51C8               	movf	(_strEsp8266_Fram_Record+100)& (0+255),w,b
  6132  0010FE  0B7F               	andlw	127
  6133  001100  6E27               	movwf	??_ESP8266_ReceiveString& (0+255),c
  6134  001102  0E63               	movlw	99
  6135  001104  6427               	cpfsgt	??_ESP8266_ReceiveString,c
  6136  001106  D008               	goto	l3255
  6137  001108                     l3253:
  6138                           
  6139                           ; BSR set to: 2
  6140                           ;UART.c: 247: strEsp8266_Fram_Record .InfBit .FramLength=0;
  6141  001108  0102               	movlb	2	; () banked
  6142  00110A  91C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),0,b
  6143  00110C  93C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),1,b
  6144  00110E  95C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),2,b
  6145  001110  97C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),3,b
  6146  001112  99C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),4,b
  6147  001114  9BC8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),5,b
  6148  001116  9DC8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),6,b
  6149  001118                     l3255:
  6150                           
  6151                           ; BSR set to: 2
  6152  001118  0E64               	movlw	low _strEsp8266_Fram_Record
  6153  00111A  6E21               	movwf	strstr@s1,c
  6154  00111C  0E02               	movlw	high _strEsp8266_Fram_Record
  6155  00111E  6E22               	movwf	strstr@s1+1,c
  6156  001120  0EFB               	movlw	low STR_59
  6157  001122  6E23               	movwf	strstr@s2,c
  6158  001124  0E7F               	movlw	high STR_59
  6159  001126  6E24               	movwf	strstr@s2+1,c
  6160  001128  EC0E  F009         	call	_strstr	;wreg free
  6161  00112C  5021               	movf	?_strstr,w,c
  6162  00112E  B4D8               	btfsc	status,2,c
  6163  001130  D7E4               	goto	l3251
  6164                           
  6165                           ;UART.c: 248: }
  6166                           ;UART.c: 249: }
  6167                           ;UART.c: 250: strEsp8266_Fram_Record .InfBit .FramLength = 0;
  6168  001132  0102               	movlb	2	; () banked
  6169  001134  91C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),0,b
  6170  001136  93C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),1,b
  6171  001138  95C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),2,b
  6172  00113A  97C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),3,b
  6173  00113C  99C8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),4,b
  6174  00113E  9BC8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),5,b
  6175  001140  9DC8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),6,b
  6176                           
  6177                           ;UART.c: 251: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 0;
  6178  001142  0102               	movlb	2	; () banked
  6179  001144  9FC8               	bcf	(_strEsp8266_Fram_Record+100)& (0+255),7,b
  6180  001146                     l3257:
  6181  001146  0E64               	movlw	low _strEsp8266_Fram_Record
  6182  001148  6E21               	movwf	strstr@s1,c
  6183  00114A  0E02               	movlw	high _strEsp8266_Fram_Record
  6184  00114C  6E22               	movwf	strstr@s1+1,c
  6185  00114E  0EF9               	movlw	low STR_60
  6186  001150  6E23               	movwf	strstr@s2,c
  6187  001152  0E7F               	movlw	high STR_60
  6188  001154  6E24               	movwf	strstr@s2+1,c
  6189  001156  EC0E  F009         	call	_strstr	;wreg free
  6190  00115A  5021               	movf	?_strstr,w,c
  6191  00115C  1022               	iorwf	?_strstr+1,w,c
  6192  00115E  B4D8               	btfsc	status,2,c
  6193  001160  D7F2               	goto	l3257
  6194                           
  6195                           ;UART.c: 253: if ( strstr ( strEsp8266_Fram_Record .Data_RX_BUF, "\0" ) )
  6196  001162  0E64               	movlw	low _strEsp8266_Fram_Record
  6197  001164  6E21               	movwf	strstr@s1,c
  6198  001166  0E02               	movlw	high _strEsp8266_Fram_Record
  6199  001168  6E22               	movwf	strstr@s1+1,c
  6200  00116A  0EF9               	movlw	low STR_60
  6201  00116C  6E23               	movwf	strstr@s2,c
  6202  00116E  0E7F               	movlw	high STR_60
  6203  001170  6E24               	movwf	strstr@s2+1,c
  6204  001172  EC0E  F009         	call	_strstr	;wreg free
  6205  001176  5021               	movf	?_strstr,w,c
  6206  001178  1022               	iorwf	?_strstr+1,w,c
  6207  00117A  B4D8               	btfsc	status,2,c
  6208  00117C  D004               	goto	l432
  6209                           
  6210                           ;UART.c: 254: pRecStr = strEsp8266_Fram_Record .Data_RX_BUF;
  6211  00117E  0E64               	movlw	low _strEsp8266_Fram_Record
  6212  001180  6E28               	movwf	ESP8266_ReceiveString@pRecStr,c
  6213  001182  0E02               	movlw	high _strEsp8266_Fram_Record
  6214  001184  6E29               	movwf	ESP8266_ReceiveString@pRecStr+1,c
  6215  001186                     l432:
  6216                           
  6217                           ;UART.c: 255: return pRecStr;
  6218  001186  C028  F025         	movff	ESP8266_ReceiveString@pRecStr,?_ESP8266_ReceiveString
  6219  00118A  C029  F026         	movff	ESP8266_ReceiveString@pRecStr+1,?_ESP8266_ReceiveString+1
  6220  00118E  0012               	return	
  6221  001190                     __end_of_ESP8266_ReceiveString:
  6222                           	opt stack 0
  6223                           tblptru	equ	0xFF8
  6224                           tblptrh	equ	0xFF7
  6225                           tblptrl	equ	0xFF6
  6226                           tablat	equ	0xFF5
  6227                           prodh	equ	0xFF4
  6228                           prodl	equ	0xFF3
  6229                           intcon	equ	0xFF2
  6230                           indf0	equ	0xFEF
  6231                           postinc0	equ	0xFEE
  6232                           fsr0h	equ	0xFEA
  6233                           fsr0l	equ	0xFE9
  6234                           wreg	equ	0xFE8
  6235                           postdec1	equ	0xFE5
  6236                           plusw1	equ	0xFE3
  6237                           fsr1l	equ	0xFE1
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           postdec2	equ	0xFDD
  6241                           plusw2	equ	0xFDB
  6242                           fsr2h	equ	0xFDA
  6243                           fsr2l	equ	0xFD9
  6244                           status	equ	0xFD8
  6245                           
  6246 ;; *************** function _strstr *****************
  6247 ;; Defined at:
  6248 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strstr.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  s1              2   32[COMRAM] PTR const unsigned char 
  6251 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(100), NULL(0), strEsp8266_Fram_Record(101), 
  6252 ;;  s2              2   34[COMRAM] PTR const unsigned char 
  6253 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  6254 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  6255 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  6256 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  6257 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  6258 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  6259 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  6260 ;;		 -> STR_2(3), NULL(0), 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;		None
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  2   32[COMRAM] PTR unsigned char 
  6265 ;; Registers used:
  6266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6272 ;;      Params:         4       0       0       0       0       0       0
  6273 ;;      Locals:         0       0       0       0       0       0       0
  6274 ;;      Temps:          0       0       0       0       0       0       0
  6275 ;;      Totals:         4       0       0       0       0       0       0
  6276 ;;Total ram usage:        4 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    2
  6279 ;; This function calls:
  6280 ;;		_strchr
  6281 ;;		_strlen
  6282 ;;		_strncmp
  6283 ;; This function is called by:
  6284 ;;		_ESP8266_Cmd
  6285 ;;		_ESP8266_ReceiveString
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text23
  6290  00121C                     __ptext23:
  6291                           	opt stack 0
  6292  00121C                     _strstr:
  6293                           	opt stack 24
  6294                           
  6295                           ;incstack = 0
  6296  00121C  D031               	goto	l2539
  6297  00121E                     l2531:
  6298  00121E  C021  F018         	movff	strstr@s1,strncmp@s1
  6299  001222  C022  F019         	movff	strstr@s1+1,strncmp@s1+1
  6300  001226  C023  F01A         	movff	strstr@s2,strncmp@s2
  6301  00122A  C024  F01B         	movff	strstr@s2+1,strncmp@s2+1
  6302  00122E  C023  F012         	movff	strstr@s2,strlen@s
  6303  001232  C024  F013         	movff	strstr@s2+1,strlen@s+1
  6304  001236  ECBA  F00A         	call	_strlen	;wreg free
  6305  00123A  C012  F01C         	movff	?_strlen,strncmp@len
  6306  00123E  C013  F01D         	movff	?_strlen+1,strncmp@len+1
  6307  001242  EC50  F009         	call	_strncmp	;wreg free
  6308  001246  5018               	movf	?_strncmp,w,c
  6309  001248  1019               	iorwf	?_strncmp+1,w,c
  6310  00124A  A4D8               	btfss	status,2,c
  6311  00124C  D005               	goto	l2537
  6312  00124E  C021  F021         	movff	strstr@s1,?_strstr
  6313  001252  C022  F022         	movff	strstr@s1+1,?_strstr+1
  6314  001256  0012               	return	
  6315  001258                     l2537:
  6316  001258  0E01               	movlw	1
  6317  00125A  2421               	addwf	strstr@s1,w,c
  6318  00125C  6E12               	movwf	strchr@ptr,c
  6319  00125E  0E00               	movlw	0
  6320  001260  2022               	addwfc	strstr@s1+1,w,c
  6321  001262  6E13               	movwf	strchr@ptr+1,c
  6322  001264  C023  FFF6         	movff	strstr@s2,tblptrl
  6323  001268  C024  FFF7         	movff	strstr@s2+1,tblptrh
  6324  00126C                     	if	0	;tblptru may be non-zero
  6325  00126C                     	endif
  6326  00126C                     	if	0	;tblptru may be non-zero
  6327  00126C                     	endif
  6328  00126C  0008               	tblrd		*
  6329  00126E  50F5               	movf	tablat,w,c
  6330  001270  6E14               	movwf	strchr@chr,c
  6331  001272  6A15               	clrf	strchr@chr+1,c
  6332  001274  ECF6  F00A         	call	_strchr	;wreg free
  6333  001278  C012  F021         	movff	?_strchr,strstr@s1
  6334  00127C  C013  F022         	movff	?_strchr+1,strstr@s1+1
  6335  001280                     l2539:
  6336  001280  5021               	movf	strstr@s1,w,c
  6337  001282  1022               	iorwf	strstr@s1+1,w,c
  6338  001284  B4D8               	btfsc	status,2,c
  6339  001286  D007               	goto	l2543
  6340  001288  C021  FFD9         	movff	strstr@s1,fsr2l
  6341  00128C  C022  FFDA         	movff	strstr@s1+1,fsr2h
  6342  001290  50DF               	movf	indf2,w,c
  6343  001292  A4D8               	btfss	status,2,c
  6344  001294  D7C4               	goto	l2531
  6345  001296                     l2543:
  6346  001296  0E00               	movlw	0
  6347  001298  6E21               	movwf	?_strstr,c
  6348  00129A  0E00               	movlw	0
  6349  00129C  6E22               	movwf	?_strstr+1,c
  6350  00129E  0012               	return	
  6351  0012A0                     __end_of_strstr:
  6352                           	opt stack 0
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           indf0	equ	0xFEF
  6361                           postinc0	equ	0xFEE
  6362                           fsr0h	equ	0xFEA
  6363                           fsr0l	equ	0xFE9
  6364                           wreg	equ	0xFE8
  6365                           postdec1	equ	0xFE5
  6366                           plusw1	equ	0xFE3
  6367                           fsr1l	equ	0xFE1
  6368                           indf2	equ	0xFDF
  6369                           postinc2	equ	0xFDE
  6370                           postdec2	equ	0xFDD
  6371                           plusw2	equ	0xFDB
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _strncmp *****************
  6377 ;; Defined at:
  6378 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;  s1              2   23[COMRAM] PTR const unsigned char 
  6381 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(100), NULL(0), strEsp8266_Fram_Record(101), 
  6382 ;;  s2              2   25[COMRAM] PTR const unsigned char 
  6383 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  6384 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  6385 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  6386 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  6387 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  6388 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  6389 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  6390 ;;		 -> STR_2(3), NULL(0), 
  6391 ;;  len             2   27[COMRAM] unsigned int 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;		None
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  2   23[COMRAM] int 
  6396 ;; Registers used:
  6397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6403 ;;      Params:         6       0       0       0       0       0       0
  6404 ;;      Locals:         0       0       0       0       0       0       0
  6405 ;;      Temps:          3       0       0       0       0       0       0
  6406 ;;      Totals:         9       0       0       0       0       0       0
  6407 ;;Total ram usage:        9 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    1
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_strstr
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           	psect	text24
  6418  0012A0                     __ptext24:
  6419                           	opt stack 0
  6420  0012A0                     _strncmp:
  6421                           	opt stack 24
  6422                           
  6423                           ;incstack = 0
  6424  0012A0  D033               	goto	l2447
  6425  0012A2                     l2437:
  6426  0012A2  C018  FFD9         	movff	strncmp@s1,fsr2l
  6427  0012A6  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  6428  0012AA  50DF               	movf	indf2,w,c
  6429  0012AC  B4D8               	btfsc	status,2,c
  6430  0012AE  D00F               	goto	l2441
  6431  0012B0  C018  FFD9         	movff	strncmp@s1,fsr2l
  6432  0012B4  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  6433  0012B8  50DF               	movf	indf2,w,c
  6434  0012BA  6E1E               	movwf	??_strncmp& (0+255),c
  6435  0012BC  C01A  FFF6         	movff	strncmp@s2,tblptrl
  6436  0012C0  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  6437  0012C4                     	if	0	;tblptru may be non-zero
  6438  0012C4                     	endif
  6439  0012C4                     	if	0	;tblptru may be non-zero
  6440  0012C4                     	endif
  6441  0012C4  0008               	tblrd		*
  6442  0012C6  50F5               	movf	tablat,w,c
  6443  0012C8  181E               	xorwf	??_strncmp,w,c
  6444  0012CA  B4D8               	btfsc	status,2,c
  6445  0012CC  D019               	goto	l2445
  6446  0012CE                     l2441:
  6447  0012CE  C01A  FFF6         	movff	strncmp@s2,tblptrl
  6448  0012D2  C01B  FFF7         	movff	strncmp@s2+1,tblptrh
  6449  0012D6                     	if	0	;tblptru may be non-zero
  6450  0012D6                     	endif
  6451  0012D6                     	if	0	;tblptru may be non-zero
  6452  0012D6                     	endif
  6453  0012D6  0008               	tblrd		*
  6454  0012D8  50F5               	movf	tablat,w,c
  6455  0012DA  6E1E               	movwf	??_strncmp& (0+255),c
  6456  0012DC  6A1F               	clrf	(??_strncmp+1)& (0+255),c
  6457  0012DE  1E1E               	comf	??_strncmp,f,c
  6458  0012E0  1E1F               	comf	??_strncmp+1,f,c
  6459  0012E2  4A1E               	infsnz	??_strncmp,f,c
  6460  0012E4  2A1F               	incf	??_strncmp+1,f,c
  6461  0012E6  C018  FFD9         	movff	strncmp@s1,fsr2l
  6462  0012EA  C019  FFDA         	movff	strncmp@s1+1,fsr2h
  6463  0012EE  50DF               	movf	indf2,w,c
  6464  0012F0  6E20               	movwf	(??_strncmp+2)& (0+255),c
  6465  0012F2  5020               	movf	??_strncmp+2,w,c
  6466  0012F4  241E               	addwf	??_strncmp,w,c
  6467  0012F6  6E18               	movwf	?_strncmp,c
  6468  0012F8  0E00               	movlw	0
  6469  0012FA  201F               	addwfc	??_strncmp+1,w,c
  6470  0012FC  6E19               	movwf	?_strncmp+1,c
  6471  0012FE  0012               	return	
  6472  001300                     l2445:
  6473  001300  4A18               	infsnz	strncmp@s1,f,c
  6474  001302  2A19               	incf	strncmp@s1+1,f,c
  6475  001304  4A1A               	infsnz	strncmp@s2,f,c
  6476  001306  2A1B               	incf	strncmp@s2+1,f,c
  6477  001308                     l2447:
  6478  001308  061C               	decf	strncmp@len,f,c
  6479  00130A  A0D8               	btfss	status,0,c
  6480  00130C  061D               	decf	strncmp@len+1,f,c
  6481  00130E  281C               	incf	strncmp@len,w,c
  6482  001310  E1C8               	bnz	l2437
  6483  001312  281D               	incf	strncmp@len+1,w,c
  6484  001314  A4D8               	btfss	status,2,c
  6485  001316  D7C5               	goto	l2437
  6486  001318  0E00               	movlw	0
  6487  00131A  6E19               	movwf	?_strncmp+1,c
  6488  00131C  0E00               	movlw	0
  6489  00131E  6E18               	movwf	?_strncmp,c
  6490  001320  0012               	return	
  6491  001322                     __end_of_strncmp:
  6492                           	opt stack 0
  6493                           tblptru	equ	0xFF8
  6494                           tblptrh	equ	0xFF7
  6495                           tblptrl	equ	0xFF6
  6496                           tablat	equ	0xFF5
  6497                           prodh	equ	0xFF4
  6498                           prodl	equ	0xFF3
  6499                           intcon	equ	0xFF2
  6500                           indf0	equ	0xFEF
  6501                           postinc0	equ	0xFEE
  6502                           fsr0h	equ	0xFEA
  6503                           fsr0l	equ	0xFE9
  6504                           wreg	equ	0xFE8
  6505                           postdec1	equ	0xFE5
  6506                           plusw1	equ	0xFE3
  6507                           fsr1l	equ	0xFE1
  6508                           indf2	equ	0xFDF
  6509                           postinc2	equ	0xFDE
  6510                           postdec2	equ	0xFDD
  6511                           plusw2	equ	0xFDB
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _strlen *****************
  6517 ;; Defined at:
  6518 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  s               2   17[COMRAM] PTR const unsigned char 
  6521 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  6522 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  6523 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  6524 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  6525 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  6526 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  6527 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  6528 ;;		 -> STR_2(3), NULL(0), 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;  cp              2   21[COMRAM] PTR const unsigned char 
  6531 ;;		 -> STR_61(2), STR_60(2), STR_59(2), STR_56(3), 
  6532 ;;		 -> STR_54(3), STR_50(3), STR_48(3), STR_46(3), 
  6533 ;;		 -> STR_44(3), STR_42(3), STR_37(3), STR_36(10), 
  6534 ;;		 -> STR_34(3), STR_33(10), STR_31(3), STR_29(3), 
  6535 ;;		 -> STR_27(7), STR_26(8), STR_19(3), STR_17(10), 
  6536 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  6537 ;;		 -> STR_8(6), STR_7(3), STR_5(3), STR_3(8), 
  6538 ;;		 -> STR_2(3), NULL(0), 
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  2   17[COMRAM] unsigned int 
  6541 ;; Registers used:
  6542 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6548 ;;      Params:         2       0       0       0       0       0       0
  6549 ;;      Locals:         2       0       0       0       0       0       0
  6550 ;;      Temps:          2       0       0       0       0       0       0
  6551 ;;      Totals:         6       0       0       0       0       0       0
  6552 ;;Total ram usage:        6 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    1
  6555 ;; This function calls:
  6556 ;;		Nothing
  6557 ;; This function is called by:
  6558 ;;		_strstr
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text25
  6563  001574                     __ptext25:
  6564                           	opt stack 0
  6565  001574                     _strlen:
  6566                           	opt stack 24
  6567                           
  6568                           ;incstack = 0
  6569  001574  C012  F016         	movff	strlen@s,strlen@cp
  6570  001578  C013  F017         	movff	strlen@s+1,strlen@cp+1
  6571  00157C  D002               	goto	l2429
  6572  00157E                     l2427:
  6573  00157E  4A16               	infsnz	strlen@cp,f,c
  6574  001580  2A17               	incf	strlen@cp+1,f,c
  6575  001582                     l2429:
  6576  001582  C016  FFF6         	movff	strlen@cp,tblptrl
  6577  001586  C017  FFF7         	movff	strlen@cp+1,tblptrh
  6578  00158A                     	if	0	;tblptru may be non-zero
  6579  00158A                     	endif
  6580  00158A                     	if	0	;tblptru may be non-zero
  6581  00158A                     	endif
  6582  00158A  0008               	tblrd		*
  6583  00158C  50F5               	movf	tablat,w,c
  6584  00158E  0900               	iorlw	0
  6585  001590  A4D8               	btfss	status,2,c
  6586  001592  D7F5               	goto	l2427
  6587  001594  C012  F014         	movff	strlen@s,??_strlen
  6588  001598  C013  F015         	movff	strlen@s+1,??_strlen+1
  6589  00159C  1E14               	comf	??_strlen,f,c
  6590  00159E  1E15               	comf	??_strlen+1,f,c
  6591  0015A0  4A14               	infsnz	??_strlen,f,c
  6592  0015A2  2A15               	incf	??_strlen+1,f,c
  6593  0015A4  5016               	movf	strlen@cp,w,c
  6594  0015A6  2414               	addwf	??_strlen,w,c
  6595  0015A8  6E12               	movwf	?_strlen,c
  6596  0015AA  5017               	movf	strlen@cp+1,w,c
  6597  0015AC  2015               	addwfc	??_strlen+1,w,c
  6598  0015AE  6E13               	movwf	?_strlen+1,c
  6599  0015B0  0012               	return	
  6600  0015B2                     __end_of_strlen:
  6601                           	opt stack 0
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           indf0	equ	0xFEF
  6610                           postinc0	equ	0xFEE
  6611                           fsr0h	equ	0xFEA
  6612                           fsr0l	equ	0xFE9
  6613                           wreg	equ	0xFE8
  6614                           postdec1	equ	0xFE5
  6615                           plusw1	equ	0xFE3
  6616                           fsr1l	equ	0xFE1
  6617                           indf2	equ	0xFDF
  6618                           postinc2	equ	0xFDE
  6619                           postdec2	equ	0xFDD
  6620                           plusw2	equ	0xFDB
  6621                           fsr2h	equ	0xFDA
  6622                           fsr2l	equ	0xFD9
  6623                           status	equ	0xFD8
  6624                           
  6625 ;; *************** function _strchr *****************
  6626 ;; Defined at:
  6627 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strchr.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;  ptr             2   17[COMRAM] PTR const unsigned char 
  6630 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(100), NULL(0), strEsp8266_Fram_Record(101), 
  6631 ;;  chr             2   19[COMRAM] int 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;		None
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  2   17[COMRAM] PTR unsigned char 
  6636 ;; Registers used:
  6637 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6643 ;;      Params:         4       0       0       0       0       0       0
  6644 ;;      Locals:         0       0       0       0       0       0       0
  6645 ;;      Temps:          1       0       0       0       0       0       0
  6646 ;;      Totals:         5       0       0       0       0       0       0
  6647 ;;Total ram usage:        5 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    1
  6650 ;; This function calls:
  6651 ;;		Nothing
  6652 ;; This function is called by:
  6653 ;;		_strstr
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           	psect	text26
  6658  0015EC                     __ptext26:
  6659                           	opt stack 0
  6660  0015EC                     _strchr:
  6661                           	opt stack 24
  6662  0015EC  C012  FFD9         	movff	strchr@ptr,fsr2l
  6663  0015F0  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  6664  0015F4  5014               	movf	strchr@chr,w,c
  6665  0015F6  18DE               	xorwf	postinc2,w,c
  6666  0015F8  A4D8               	btfss	status,2,c
  6667  0015FA  D005               	goto	l2459
  6668  0015FC  C012  F012         	movff	strchr@ptr,?_strchr
  6669  001600  C013  F013         	movff	strchr@ptr+1,?_strchr+1
  6670  001604  0012               	return	
  6671  001606                     l2459:
  6672  001606  C012  FFD9         	movff	strchr@ptr,fsr2l
  6673  00160A  C013  FFDA         	movff	strchr@ptr+1,fsr2h
  6674  00160E  4A12               	infsnz	strchr@ptr,f,c
  6675  001610  2A13               	incf	strchr@ptr+1,f,c
  6676  001612  50DF               	movf	indf2,w,c
  6677  001614  A4D8               	btfss	status,2,c
  6678  001616  D7EA               	goto	l2453
  6679  001618  0E00               	movlw	0
  6680  00161A  6E12               	movwf	?_strchr,c
  6681  00161C  0E00               	movlw	0
  6682  00161E  6E13               	movwf	?_strchr+1,c
  6683  001620  0012               	return	
  6684  001622                     __end_of_strchr:
  6685                           	opt stack 0
  6686                           tblptru	equ	0xFF8
  6687                           tblptrh	equ	0xFF7
  6688                           tblptrl	equ	0xFF6
  6689                           tablat	equ	0xFF5
  6690                           prodh	equ	0xFF4
  6691                           prodl	equ	0xFF3
  6692                           intcon	equ	0xFF2
  6693                           indf0	equ	0xFEF
  6694                           postinc0	equ	0xFEE
  6695                           fsr0h	equ	0xFEA
  6696                           fsr0l	equ	0xFE9
  6697                           wreg	equ	0xFE8
  6698                           postdec1	equ	0xFE5
  6699                           plusw1	equ	0xFE3
  6700                           fsr1l	equ	0xFE1
  6701                           indf2	equ	0xFDF
  6702                           postinc2	equ	0xFDE
  6703                           postdec2	equ	0xFDD
  6704                           plusw2	equ	0xFDB
  6705                           fsr2h	equ	0xFDA
  6706                           fsr2l	equ	0xFD9
  6707                           status	equ	0xFD8
  6708                           
  6709 ;; *************** function _ADtoPWM *****************
  6710 ;; Defined at:
  6711 ;;		line 16 in file "harwave/flex.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;  AD              2   35[COMRAM] PTR unsigned char 
  6714 ;;		 -> strEsp8266_Fram_Record.Data_RX_BUF(100), NULL(0), strEsp8266_Fram_Record(101), 
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  w4              2   59[COMRAM] unsigned int 
  6717 ;;  w3              2   57[COMRAM] unsigned int 
  6718 ;;  w2              2   55[COMRAM] unsigned int 
  6719 ;;  w1              2   53[COMRAM] unsigned int 
  6720 ;;  w0              2   51[COMRAM] unsigned int 
  6721 ;;  u4              2   49[COMRAM] unsigned int 
  6722 ;;  u3              2   47[COMRAM] unsigned int 
  6723 ;;  u2              2   45[COMRAM] unsigned int 
  6724 ;;  u1              2   43[COMRAM] unsigned int 
  6725 ;;  u0              2   41[COMRAM] unsigned int 
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      void 
  6728 ;; Registers used:
  6729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6735 ;;      Params:         2       0       0       0       0       0       0
  6736 ;;      Locals:        20       0       0       0       0       0       0
  6737 ;;      Temps:          4       0       0       0       0       0       0
  6738 ;;      Totals:        26       0       0       0       0       0       0
  6739 ;;Total ram usage:       26 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    8
  6742 ;; This function calls:
  6743 ;;		_PWMt0PCA
  6744 ;; This function is called by:
  6745 ;;		_main
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           	psect	text27
  6750  0008B4                     __ptext27:
  6751                           	opt stack 0
  6752  0008B4                     _ADtoPWM:
  6753                           	opt stack 22
  6754                           
  6755                           ;flex.c: 17: u16 u0,u1,u2,u3,u4,w0,w1,w2,w3,w4;
  6756                           ;flex.c: 18: if(*(AD+1)>=200)
  6757                           
  6758                           ;incstack = 0
  6759  0008B4  EE20 F001          	lfsr	2,1
  6760  0008B8  5024               	movf	ADtoPWM@AD,w,c
  6761  0008BA  26D9               	addwf	fsr2l,f,c
  6762  0008BC  5025               	movf	ADtoPWM@AD+1,w,c
  6763  0008BE  22DA               	addwfc	fsr2h,f,c
  6764  0008C0  0EC7               	movlw	199
  6765  0008C2  64DF               	cpfsgt	indf2,c
  6766  0008C4  D020               	goto	l3129
  6767                           
  6768                           ;flex.c: 19: w0=finger_under_0[*(AD+1)-200];
  6769  0008C6  0E70               	movlw	112
  6770  0008C8  6E26               	movwf	??_ADtoPWM& (0+255),c
  6771  0008CA  0EFE               	movlw	254
  6772  0008CC  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  6773  0008CE  EE20 F001          	lfsr	2,1
  6774  0008D2  5024               	movf	ADtoPWM@AD,w,c
  6775  0008D4  26D9               	addwf	fsr2l,f,c
  6776  0008D6  5025               	movf	ADtoPWM@AD+1,w,c
  6777  0008D8  22DA               	addwfc	fsr2h,f,c
  6778  0008DA  50DF               	movf	indf2,w,c
  6779  0008DC  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  6780  0008DE  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  6781  0008E0  90D8               	bcf	status,0,c
  6782  0008E2  3628               	rlcf	??_ADtoPWM+2,f,c
  6783  0008E4  3629               	rlcf	??_ADtoPWM+3,f,c
  6784  0008E6  5026               	movf	??_ADtoPWM,w,c
  6785  0008E8  2628               	addwf	??_ADtoPWM+2,f,c
  6786  0008EA  5027               	movf	??_ADtoPWM+1,w,c
  6787  0008EC  2229               	addwfc	??_ADtoPWM+3,f,c
  6788  0008EE  0E99               	movlw	low _finger_under_0
  6789  0008F0  2428               	addwf	??_ADtoPWM+2,w,c
  6790  0008F2  6EF6               	movwf	tblptrl,c
  6791  0008F4  0E7D               	movlw	high _finger_under_0
  6792  0008F6  2029               	addwfc	??_ADtoPWM+3,w,c
  6793  0008F8  6EF7               	movwf	tblptrh,c
  6794  0008FA                     	if	0	;There are less than 3 active tblptr bytes
  6795  0008FA                     	endif
  6796  0008FA  0009               	tblrd		*+
  6797  0008FC  CFF5 F034          	movff	tablat,ADtoPWM@w0
  6798  000900  000A               	tblrd		*-
  6799  000902  CFF5 F035          	movff	tablat,ADtoPWM@w0+1
  6800  000906                     l3129:
  6801                           
  6802                           ;flex.c: 20: if(*(AD+3)>=160)
  6803  000906  EE20 F003          	lfsr	2,3
  6804  00090A  5024               	movf	ADtoPWM@AD,w,c
  6805  00090C  26D9               	addwf	fsr2l,f,c
  6806  00090E  5025               	movf	ADtoPWM@AD+1,w,c
  6807  000910  22DA               	addwfc	fsr2h,f,c
  6808  000912  0E9F               	movlw	159
  6809  000914  64DF               	cpfsgt	indf2,c
  6810  000916  D020               	goto	l3133
  6811                           
  6812                           ;flex.c: 21: w1=finger_under_1[*(AD+3)-160];
  6813  000918  0EC0               	movlw	192
  6814  00091A  6E26               	movwf	??_ADtoPWM& (0+255),c
  6815  00091C  0EFE               	movlw	254
  6816  00091E  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  6817  000920  EE20 F003          	lfsr	2,3
  6818  000924  5024               	movf	ADtoPWM@AD,w,c
  6819  000926  26D9               	addwf	fsr2l,f,c
  6820  000928  5025               	movf	ADtoPWM@AD+1,w,c
  6821  00092A  22DA               	addwfc	fsr2h,f,c
  6822  00092C  50DF               	movf	indf2,w,c
  6823  00092E  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  6824  000930  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  6825  000932  90D8               	bcf	status,0,c
  6826  000934  3628               	rlcf	??_ADtoPWM+2,f,c
  6827  000936  3629               	rlcf	??_ADtoPWM+3,f,c
  6828  000938  5026               	movf	??_ADtoPWM,w,c
  6829  00093A  2628               	addwf	??_ADtoPWM+2,f,c
  6830  00093C  5027               	movf	??_ADtoPWM+1,w,c
  6831  00093E  2229               	addwfc	??_ADtoPWM+3,f,c
  6832  000940  0E9D               	movlw	low _finger_under_1
  6833  000942  2428               	addwf	??_ADtoPWM+2,w,c
  6834  000944  6EF6               	movwf	tblptrl,c
  6835  000946  0E7B               	movlw	high _finger_under_1
  6836  000948  2029               	addwfc	??_ADtoPWM+3,w,c
  6837  00094A  6EF7               	movwf	tblptrh,c
  6838  00094C                     	if	0	;There are less than 3 active tblptr bytes
  6839  00094C                     	endif
  6840  00094C  0009               	tblrd		*+
  6841  00094E  CFF5 F036          	movff	tablat,ADtoPWM@w1
  6842  000952  000A               	tblrd		*-
  6843  000954  CFF5 F037          	movff	tablat,ADtoPWM@w1+1
  6844  000958                     l3133:
  6845                           
  6846                           ;flex.c: 22: if(*(AD+5)>=143)
  6847  000958  EE20 F005          	lfsr	2,5
  6848  00095C  5024               	movf	ADtoPWM@AD,w,c
  6849  00095E  26D9               	addwf	fsr2l,f,c
  6850  000960  5025               	movf	ADtoPWM@AD+1,w,c
  6851  000962  22DA               	addwfc	fsr2h,f,c
  6852  000964  0E8E               	movlw	142
  6853  000966  64DF               	cpfsgt	indf2,c
  6854  000968  D020               	goto	l3137
  6855                           
  6856                           ;flex.c: 23: w2=finger_under_2[*(AD+5)-143];
  6857  00096A  0EE2               	movlw	226
  6858  00096C  6E26               	movwf	??_ADtoPWM& (0+255),c
  6859  00096E  0EFE               	movlw	254
  6860  000970  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  6861  000972  EE20 F005          	lfsr	2,5
  6862  000976  5024               	movf	ADtoPWM@AD,w,c
  6863  000978  26D9               	addwf	fsr2l,f,c
  6864  00097A  5025               	movf	ADtoPWM@AD+1,w,c
  6865  00097C  22DA               	addwfc	fsr2h,f,c
  6866  00097E  50DF               	movf	indf2,w,c
  6867  000980  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  6868  000982  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  6869  000984  90D8               	bcf	status,0,c
  6870  000986  3628               	rlcf	??_ADtoPWM+2,f,c
  6871  000988  3629               	rlcf	??_ADtoPWM+3,f,c
  6872  00098A  5026               	movf	??_ADtoPWM,w,c
  6873  00098C  2628               	addwf	??_ADtoPWM+2,f,c
  6874  00098E  5027               	movf	??_ADtoPWM+1,w,c
  6875  000990  2229               	addwfc	??_ADtoPWM+3,f,c
  6876  000992  0EBB               	movlw	low _finger_under_2
  6877  000994  2428               	addwf	??_ADtoPWM+2,w,c
  6878  000996  6EF6               	movwf	tblptrl,c
  6879  000998  0E7A               	movlw	high _finger_under_2
  6880  00099A  2029               	addwfc	??_ADtoPWM+3,w,c
  6881  00099C  6EF7               	movwf	tblptrh,c
  6882  00099E                     	if	0	;There are less than 3 active tblptr bytes
  6883  00099E                     	endif
  6884  00099E  0009               	tblrd		*+
  6885  0009A0  CFF5 F038          	movff	tablat,ADtoPWM@w2
  6886  0009A4  000A               	tblrd		*-
  6887  0009A6  CFF5 F039          	movff	tablat,ADtoPWM@w2+1
  6888  0009AA                     l3137:
  6889                           
  6890                           ;flex.c: 24: if(*(AD+7)>=177)
  6891  0009AA  EE20 F007          	lfsr	2,7
  6892  0009AE  5024               	movf	ADtoPWM@AD,w,c
  6893  0009B0  26D9               	addwf	fsr2l,f,c
  6894  0009B2  5025               	movf	ADtoPWM@AD+1,w,c
  6895  0009B4  22DA               	addwfc	fsr2h,f,c
  6896  0009B6  0EB0               	movlw	176
  6897  0009B8  64DF               	cpfsgt	indf2,c
  6898  0009BA  D020               	goto	l3141
  6899                           
  6900                           ;flex.c: 25: w3=finger_under_3[*(AD+7)-177];
  6901  0009BC  0E9E               	movlw	158
  6902  0009BE  6E26               	movwf	??_ADtoPWM& (0+255),c
  6903  0009C0  0EFE               	movlw	254
  6904  0009C2  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  6905  0009C4  EE20 F007          	lfsr	2,7
  6906  0009C8  5024               	movf	ADtoPWM@AD,w,c
  6907  0009CA  26D9               	addwf	fsr2l,f,c
  6908  0009CC  5025               	movf	ADtoPWM@AD+1,w,c
  6909  0009CE  22DA               	addwfc	fsr2h,f,c
  6910  0009D0  50DF               	movf	indf2,w,c
  6911  0009D2  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  6912  0009D4  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  6913  0009D6  90D8               	bcf	status,0,c
  6914  0009D8  3628               	rlcf	??_ADtoPWM+2,f,c
  6915  0009DA  3629               	rlcf	??_ADtoPWM+3,f,c
  6916  0009DC  5026               	movf	??_ADtoPWM,w,c
  6917  0009DE  2628               	addwf	??_ADtoPWM+2,f,c
  6918  0009E0  5027               	movf	??_ADtoPWM+1,w,c
  6919  0009E2  2229               	addwfc	??_ADtoPWM+3,f,c
  6920  0009E4  0E5D               	movlw	low _finger_under_3
  6921  0009E6  2428               	addwf	??_ADtoPWM+2,w,c
  6922  0009E8  6EF6               	movwf	tblptrl,c
  6923  0009EA  0E7C               	movlw	high _finger_under_3
  6924  0009EC  2029               	addwfc	??_ADtoPWM+3,w,c
  6925  0009EE  6EF7               	movwf	tblptrh,c
  6926  0009F0                     	if	0	;There are less than 3 active tblptr bytes
  6927  0009F0                     	endif
  6928  0009F0  0009               	tblrd		*+
  6929  0009F2  CFF5 F03A          	movff	tablat,ADtoPWM@w3
  6930  0009F6  000A               	tblrd		*-
  6931  0009F8  CFF5 F03B          	movff	tablat,ADtoPWM@w3+1
  6932  0009FC                     l3141:
  6933                           
  6934                           ;flex.c: 26: if(*(AD+9)>=136)
  6935  0009FC  EE20 F009          	lfsr	2,9
  6936  000A00  5024               	movf	ADtoPWM@AD,w,c
  6937  000A02  26D9               	addwf	fsr2l,f,c
  6938  000A04  5025               	movf	ADtoPWM@AD+1,w,c
  6939  000A06  22DA               	addwfc	fsr2h,f,c
  6940  000A08  0E87               	movlw	135
  6941  000A0A  64DF               	cpfsgt	indf2,c
  6942  000A0C  D020               	goto	l3145
  6943                           
  6944                           ;flex.c: 27: w4=finger_under_4[*(AD+9)-136];
  6945  000A0E  0EF0               	movlw	240
  6946  000A10  6E26               	movwf	??_ADtoPWM& (0+255),c
  6947  000A12  0EFE               	movlw	254
  6948  000A14  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  6949  000A16  EE20 F009          	lfsr	2,9
  6950  000A1A  5024               	movf	ADtoPWM@AD,w,c
  6951  000A1C  26D9               	addwf	fsr2l,f,c
  6952  000A1E  5025               	movf	ADtoPWM@AD+1,w,c
  6953  000A20  22DA               	addwfc	fsr2h,f,c
  6954  000A22  50DF               	movf	indf2,w,c
  6955  000A24  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  6956  000A26  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  6957  000A28  90D8               	bcf	status,0,c
  6958  000A2A  3628               	rlcf	??_ADtoPWM+2,f,c
  6959  000A2C  3629               	rlcf	??_ADtoPWM+3,f,c
  6960  000A2E  5026               	movf	??_ADtoPWM,w,c
  6961  000A30  2628               	addwf	??_ADtoPWM+2,f,c
  6962  000A32  5027               	movf	??_ADtoPWM+1,w,c
  6963  000A34  2229               	addwfc	??_ADtoPWM+3,f,c
  6964  000A36  0EDF               	movlw	low _finger_under_4
  6965  000A38  2428               	addwf	??_ADtoPWM+2,w,c
  6966  000A3A  6EF6               	movwf	tblptrl,c
  6967  000A3C  0E78               	movlw	high _finger_under_4
  6968  000A3E  2029               	addwfc	??_ADtoPWM+3,w,c
  6969  000A40  6EF7               	movwf	tblptrh,c
  6970  000A42                     	if	0	;There are less than 3 active tblptr bytes
  6971  000A42                     	endif
  6972  000A42  0009               	tblrd		*+
  6973  000A44  CFF5 F03C          	movff	tablat,ADtoPWM@w4
  6974  000A48  000A               	tblrd		*-
  6975  000A4A  CFF5 F03D          	movff	tablat,ADtoPWM@w4+1
  6976  000A4E                     l3145:
  6977                           
  6978                           ;flex.c: 28: if(*AD>=177)
  6979  000A4E  C024  FFD9         	movff	ADtoPWM@AD,fsr2l
  6980  000A52  C025  FFDA         	movff	ADtoPWM@AD+1,fsr2h
  6981  000A56  0EB0               	movlw	176
  6982  000A58  64DF               	cpfsgt	indf2,c
  6983  000A5A  D01E               	goto	l3149
  6984                           
  6985                           ;flex.c: 29: u0=finger_up_0[*AD-177];
  6986  000A5C  0E9E               	movlw	158
  6987  000A5E  6E26               	movwf	??_ADtoPWM& (0+255),c
  6988  000A60  0EFE               	movlw	254
  6989  000A62  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  6990  000A64  C024  FFD9         	movff	ADtoPWM@AD,fsr2l
  6991  000A68  C025  FFDA         	movff	ADtoPWM@AD+1,fsr2h
  6992  000A6C  50DF               	movf	indf2,w,c
  6993  000A6E  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  6994  000A70  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  6995  000A72  90D8               	bcf	status,0,c
  6996  000A74  3628               	rlcf	??_ADtoPWM+2,f,c
  6997  000A76  3629               	rlcf	??_ADtoPWM+3,f,c
  6998  000A78  5026               	movf	??_ADtoPWM,w,c
  6999  000A7A  2628               	addwf	??_ADtoPWM+2,f,c
  7000  000A7C  5027               	movf	??_ADtoPWM+1,w,c
  7001  000A7E  2229               	addwfc	??_ADtoPWM+3,f,c
  7002  000A80  0EFB               	movlw	low _finger_up_0
  7003  000A82  2428               	addwf	??_ADtoPWM+2,w,c
  7004  000A84  6EF6               	movwf	tblptrl,c
  7005  000A86  0E7C               	movlw	high _finger_up_0
  7006  000A88  2029               	addwfc	??_ADtoPWM+3,w,c
  7007  000A8A  6EF7               	movwf	tblptrh,c
  7008  000A8C                     	if	0	;There are less than 3 active tblptr bytes
  7009  000A8C                     	endif
  7010  000A8C  0009               	tblrd		*+
  7011  000A8E  CFF5 F02A          	movff	tablat,ADtoPWM@u0
  7012  000A92  000A               	tblrd		*-
  7013  000A94  CFF5 F02B          	movff	tablat,ADtoPWM@u0+1
  7014  000A98                     l3149:
  7015                           
  7016                           ;flex.c: 30: if(*(AD+2)>=138)
  7017  000A98  EE20 F002          	lfsr	2,2
  7018  000A9C  5024               	movf	ADtoPWM@AD,w,c
  7019  000A9E  26D9               	addwf	fsr2l,f,c
  7020  000AA0  5025               	movf	ADtoPWM@AD+1,w,c
  7021  000AA2  22DA               	addwfc	fsr2h,f,c
  7022  000AA4  0E89               	movlw	137
  7023  000AA6  64DF               	cpfsgt	indf2,c
  7024  000AA8  D020               	goto	l3153
  7025                           
  7026                           ;flex.c: 31: u1=finger_up_1[*(AD+2)-138];
  7027  000AAA  0EEC               	movlw	236
  7028  000AAC  6E26               	movwf	??_ADtoPWM& (0+255),c
  7029  000AAE  0EFE               	movlw	254
  7030  000AB0  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7031  000AB2  EE20 F002          	lfsr	2,2
  7032  000AB6  5024               	movf	ADtoPWM@AD,w,c
  7033  000AB8  26D9               	addwf	fsr2l,f,c
  7034  000ABA  5025               	movf	ADtoPWM@AD+1,w,c
  7035  000ABC  22DA               	addwfc	fsr2h,f,c
  7036  000ABE  50DF               	movf	indf2,w,c
  7037  000AC0  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7038  000AC2  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7039  000AC4  90D8               	bcf	status,0,c
  7040  000AC6  3628               	rlcf	??_ADtoPWM+2,f,c
  7041  000AC8  3629               	rlcf	??_ADtoPWM+3,f,c
  7042  000ACA  5026               	movf	??_ADtoPWM,w,c
  7043  000ACC  2628               	addwf	??_ADtoPWM+2,f,c
  7044  000ACE  5027               	movf	??_ADtoPWM+1,w,c
  7045  000AD0  2229               	addwfc	??_ADtoPWM+3,f,c
  7046  000AD2  0ECF               	movlw	low _finger_up_1
  7047  000AD4  2428               	addwf	??_ADtoPWM+2,w,c
  7048  000AD6  6EF6               	movwf	tblptrl,c
  7049  000AD8  0E79               	movlw	high _finger_up_1
  7050  000ADA  2029               	addwfc	??_ADtoPWM+3,w,c
  7051  000ADC  6EF7               	movwf	tblptrh,c
  7052  000ADE                     	if	0	;There are less than 3 active tblptr bytes
  7053  000ADE                     	endif
  7054  000ADE  0009               	tblrd		*+
  7055  000AE0  CFF5 F02C          	movff	tablat,ADtoPWM@u1
  7056  000AE4  000A               	tblrd		*-
  7057  000AE6  CFF5 F02D          	movff	tablat,ADtoPWM@u1+1
  7058  000AEA                     l3153:
  7059                           
  7060                           ;flex.c: 32: if(*(AD+4)>=127)
  7061  000AEA  EE20 F004          	lfsr	2,4
  7062  000AEE  5024               	movf	ADtoPWM@AD,w,c
  7063  000AF0  26D9               	addwf	fsr2l,f,c
  7064  000AF2  5025               	movf	ADtoPWM@AD+1,w,c
  7065  000AF4  22DA               	addwfc	fsr2h,f,c
  7066  000AF6  0E7E               	movlw	126
  7067  000AF8  64DF               	cpfsgt	indf2,c
  7068  000AFA  D020               	goto	l3157
  7069                           
  7070                           ;flex.c: 33: u2=finger_up_2[*(AD+4)-127];
  7071  000AFC  0E02               	movlw	2
  7072  000AFE  6E26               	movwf	??_ADtoPWM& (0+255),c
  7073  000B00  0EFF               	movlw	255
  7074  000B02  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7075  000B04  EE20 F004          	lfsr	2,4
  7076  000B08  5024               	movf	ADtoPWM@AD,w,c
  7077  000B0A  26D9               	addwf	fsr2l,f,c
  7078  000B0C  5025               	movf	ADtoPWM@AD+1,w,c
  7079  000B0E  22DA               	addwfc	fsr2h,f,c
  7080  000B10  50DF               	movf	indf2,w,c
  7081  000B12  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7082  000B14  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7083  000B16  90D8               	bcf	status,0,c
  7084  000B18  3628               	rlcf	??_ADtoPWM+2,f,c
  7085  000B1A  3629               	rlcf	??_ADtoPWM+3,f,c
  7086  000B1C  5026               	movf	??_ADtoPWM,w,c
  7087  000B1E  2628               	addwf	??_ADtoPWM+2,f,c
  7088  000B20  5027               	movf	??_ADtoPWM+1,w,c
  7089  000B22  2229               	addwfc	??_ADtoPWM+3,f,c
  7090  000B24  0EDD               	movlw	low _finger_up_2
  7091  000B26  2428               	addwf	??_ADtoPWM+2,w,c
  7092  000B28  6EF6               	movwf	tblptrl,c
  7093  000B2A  0E77               	movlw	high _finger_up_2
  7094  000B2C  2029               	addwfc	??_ADtoPWM+3,w,c
  7095  000B2E  6EF7               	movwf	tblptrh,c
  7096  000B30                     	if	0	;There are less than 3 active tblptr bytes
  7097  000B30                     	endif
  7098  000B30  0009               	tblrd		*+
  7099  000B32  CFF5 F02E          	movff	tablat,ADtoPWM@u2
  7100  000B36  000A               	tblrd		*-
  7101  000B38  CFF5 F02F          	movff	tablat,ADtoPWM@u2+1
  7102  000B3C                     l3157:
  7103                           
  7104                           ;flex.c: 34: if(*(AD+6)>=110)
  7105  000B3C  EE20 F006          	lfsr	2,6
  7106  000B40  5024               	movf	ADtoPWM@AD,w,c
  7107  000B42  26D9               	addwf	fsr2l,f,c
  7108  000B44  5025               	movf	ADtoPWM@AD+1,w,c
  7109  000B46  22DA               	addwfc	fsr2h,f,c
  7110  000B48  0E6D               	movlw	109
  7111  000B4A  64DF               	cpfsgt	indf2,c
  7112  000B4C  D020               	goto	l3161
  7113                           
  7114                           ;flex.c: 35: u3=finger_up_3[*(AD+6)-110];
  7115  000B4E  0E24               	movlw	36
  7116  000B50  6E26               	movwf	??_ADtoPWM& (0+255),c
  7117  000B52  0EFF               	movlw	255
  7118  000B54  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7119  000B56  EE20 F006          	lfsr	2,6
  7120  000B5A  5024               	movf	ADtoPWM@AD,w,c
  7121  000B5C  26D9               	addwf	fsr2l,f,c
  7122  000B5E  5025               	movf	ADtoPWM@AD+1,w,c
  7123  000B60  22DA               	addwfc	fsr2h,f,c
  7124  000B62  50DF               	movf	indf2,w,c
  7125  000B64  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7126  000B66  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7127  000B68  90D8               	bcf	status,0,c
  7128  000B6A  3628               	rlcf	??_ADtoPWM+2,f,c
  7129  000B6C  3629               	rlcf	??_ADtoPWM+3,f,c
  7130  000B6E  5026               	movf	??_ADtoPWM,w,c
  7131  000B70  2628               	addwf	??_ADtoPWM+2,f,c
  7132  000B72  5027               	movf	??_ADtoPWM+1,w,c
  7133  000B74  2229               	addwfc	??_ADtoPWM+3,f,c
  7134  000B76  0EB9               	movlw	low _finger_up_3
  7135  000B78  2428               	addwf	??_ADtoPWM+2,w,c
  7136  000B7A  6EF6               	movwf	tblptrl,c
  7137  000B7C  0E76               	movlw	high _finger_up_3
  7138  000B7E  2029               	addwfc	??_ADtoPWM+3,w,c
  7139  000B80  6EF7               	movwf	tblptrh,c
  7140  000B82                     	if	0	;There are less than 3 active tblptr bytes
  7141  000B82                     	endif
  7142  000B82  0009               	tblrd		*+
  7143  000B84  CFF5 F030          	movff	tablat,ADtoPWM@u3
  7144  000B88  000A               	tblrd		*-
  7145  000B8A  CFF5 F031          	movff	tablat,ADtoPWM@u3+1
  7146  000B8E                     l3161:
  7147                           
  7148                           ;flex.c: 36: if(*(AD+8)>=105)
  7149  000B8E  EE20 F008          	lfsr	2,8
  7150  000B92  5024               	movf	ADtoPWM@AD,w,c
  7151  000B94  26D9               	addwf	fsr2l,f,c
  7152  000B96  5025               	movf	ADtoPWM@AD+1,w,c
  7153  000B98  22DA               	addwfc	fsr2h,f,c
  7154  000B9A  0E68               	movlw	104
  7155  000B9C  64DF               	cpfsgt	indf2,c
  7156  000B9E  D020               	goto	l3165
  7157                           
  7158                           ;flex.c: 37: u4=finger_up_4[*(AD+8)-105];
  7159  000BA0  0E2E               	movlw	46
  7160  000BA2  6E26               	movwf	??_ADtoPWM& (0+255),c
  7161  000BA4  0EFF               	movlw	255
  7162  000BA6  6E27               	movwf	(??_ADtoPWM+1)& (0+255),c
  7163  000BA8  EE20 F008          	lfsr	2,8
  7164  000BAC  5024               	movf	ADtoPWM@AD,w,c
  7165  000BAE  26D9               	addwf	fsr2l,f,c
  7166  000BB0  5025               	movf	ADtoPWM@AD+1,w,c
  7167  000BB2  22DA               	addwfc	fsr2h,f,c
  7168  000BB4  50DF               	movf	indf2,w,c
  7169  000BB6  6E28               	movwf	(??_ADtoPWM+2)& (0+255),c
  7170  000BB8  6A29               	clrf	(??_ADtoPWM+3)& (0+255),c
  7171  000BBA  90D8               	bcf	status,0,c
  7172  000BBC  3628               	rlcf	??_ADtoPWM+2,f,c
  7173  000BBE  3629               	rlcf	??_ADtoPWM+3,f,c
  7174  000BC0  5026               	movf	??_ADtoPWM,w,c
  7175  000BC2  2628               	addwf	??_ADtoPWM+2,f,c
  7176  000BC4  5027               	movf	??_ADtoPWM+1,w,c
  7177  000BC6  2229               	addwfc	??_ADtoPWM+3,f,c
  7178  000BC8  0E8B               	movlw	low _finger_up_4
  7179  000BCA  2428               	addwf	??_ADtoPWM+2,w,c
  7180  000BCC  6EF6               	movwf	tblptrl,c
  7181  000BCE  0E75               	movlw	high _finger_up_4
  7182  000BD0  2029               	addwfc	??_ADtoPWM+3,w,c
  7183  000BD2  6EF7               	movwf	tblptrh,c
  7184  000BD4                     	if	0	;There are less than 3 active tblptr bytes
  7185  000BD4                     	endif
  7186  000BD4  0009               	tblrd		*+
  7187  000BD6  CFF5 F032          	movff	tablat,ADtoPWM@u4
  7188  000BDA  000A               	tblrd		*-
  7189  000BDC  CFF5 F033          	movff	tablat,ADtoPWM@u4+1
  7190  000BE0                     l3165:
  7191                           
  7192                           ;flex.c: 38: PWMt0PCA(u0,w0,thumb);
  7193  000BE0  C02A  F01F         	movff	ADtoPWM@u0,PWMt0PCA@up
  7194  000BE4  C02B  F020         	movff	ADtoPWM@u0+1,PWMt0PCA@up+1
  7195  000BE8  C034  F021         	movff	ADtoPWM@w0,PWMt0PCA@low
  7196  000BEC  C035  F022         	movff	ADtoPWM@w0+1,PWMt0PCA@low+1
  7197  000BF0  0E00               	movlw	0
  7198  000BF2  6E23               	movwf	PWMt0PCA@finger,c
  7199  000BF4  EC2D  F006         	call	_PWMt0PCA	;wreg free
  7200                           
  7201                           ;flex.c: 39: PWMt0PCA(u1,w1,index);
  7202  000BF8  C02C  F01F         	movff	ADtoPWM@u1,PWMt0PCA@up
  7203  000BFC  C02D  F020         	movff	ADtoPWM@u1+1,PWMt0PCA@up+1
  7204  000C00  C036  F021         	movff	ADtoPWM@w1,PWMt0PCA@low
  7205  000C04  C037  F022         	movff	ADtoPWM@w1+1,PWMt0PCA@low+1
  7206  000C08  0E01               	movlw	1
  7207  000C0A  6E23               	movwf	PWMt0PCA@finger,c
  7208  000C0C  EC2D  F006         	call	_PWMt0PCA	;wreg free
  7209                           
  7210                           ;flex.c: 40: PWMt0PCA(u2,w2,middle);
  7211  000C10  C02E  F01F         	movff	ADtoPWM@u2,PWMt0PCA@up
  7212  000C14  C02F  F020         	movff	ADtoPWM@u2+1,PWMt0PCA@up+1
  7213  000C18  C038  F021         	movff	ADtoPWM@w2,PWMt0PCA@low
  7214  000C1C  C039  F022         	movff	ADtoPWM@w2+1,PWMt0PCA@low+1
  7215  000C20  0E02               	movlw	2
  7216  000C22  6E23               	movwf	PWMt0PCA@finger,c
  7217  000C24  EC2D  F006         	call	_PWMt0PCA	;wreg free
  7218                           
  7219                           ;flex.c: 41: PWMt0PCA(u3,w3,ring);
  7220  000C28  C030  F01F         	movff	ADtoPWM@u3,PWMt0PCA@up
  7221  000C2C  C031  F020         	movff	ADtoPWM@u3+1,PWMt0PCA@up+1
  7222  000C30  C03A  F021         	movff	ADtoPWM@w3,PWMt0PCA@low
  7223  000C34  C03B  F022         	movff	ADtoPWM@w3+1,PWMt0PCA@low+1
  7224  000C38  0E03               	movlw	3
  7225  000C3A  6E23               	movwf	PWMt0PCA@finger,c
  7226  000C3C  EC2D  F006         	call	_PWMt0PCA	;wreg free
  7227                           
  7228                           ;flex.c: 42: PWMt0PCA(u4,w4,pink);
  7229  000C40  C032  F01F         	movff	ADtoPWM@u4,PWMt0PCA@up
  7230  000C44  C033  F020         	movff	ADtoPWM@u4+1,PWMt0PCA@up+1
  7231  000C48  C03C  F021         	movff	ADtoPWM@w4,PWMt0PCA@low
  7232  000C4C  C03D  F022         	movff	ADtoPWM@w4+1,PWMt0PCA@low+1
  7233  000C50  0E04               	movlw	4
  7234  000C52  6E23               	movwf	PWMt0PCA@finger,c
  7235  000C54  EC2D  F006         	call	_PWMt0PCA	;wreg free
  7236  000C58  0012               	return		;funcret
  7237  000C5A                     __end_of_ADtoPWM:
  7238                           	opt stack 0
  7239                           tblptru	equ	0xFF8
  7240                           tblptrh	equ	0xFF7
  7241                           tblptrl	equ	0xFF6
  7242                           tablat	equ	0xFF5
  7243                           prodh	equ	0xFF4
  7244                           prodl	equ	0xFF3
  7245                           intcon	equ	0xFF2
  7246                           indf0	equ	0xFEF
  7247                           postinc0	equ	0xFEE
  7248                           fsr0h	equ	0xFEA
  7249                           fsr0l	equ	0xFE9
  7250                           wreg	equ	0xFE8
  7251                           postdec1	equ	0xFE5
  7252                           plusw1	equ	0xFE3
  7253                           fsr1l	equ	0xFE1
  7254                           indf2	equ	0xFDF
  7255                           postinc2	equ	0xFDE
  7256                           postdec2	equ	0xFDD
  7257                           plusw2	equ	0xFDB
  7258                           fsr2h	equ	0xFDA
  7259                           fsr2l	equ	0xFD9
  7260                           status	equ	0xFD8
  7261                           
  7262 ;; *************** function _PWMt0PCA *****************
  7263 ;; Defined at:
  7264 ;;		line 45 in file "harwave/flex.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  up              2   30[COMRAM] unsigned int 
  7267 ;;  low             2   32[COMRAM] unsigned int 
  7268 ;;  finger          1   34[COMRAM] enum E3769
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;		None
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1    wreg      void 
  7273 ;; Registers used:
  7274 ;;		wreg, status,2, status,0, cstack
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7280 ;;      Params:         5       0       0       0       0       0       0
  7281 ;;      Locals:         0       0       0       0       0       0       0
  7282 ;;      Temps:          0       0       0       0       0       0       0
  7283 ;;      Totals:         5       0       0       0       0       0       0
  7284 ;;Total ram usage:        5 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; Hardware stack levels required when called:    7
  7287 ;; This function calls:
  7288 ;;		_transmit_finger
  7289 ;; This function is called by:
  7290 ;;		_ADtoPWM
  7291 ;; This function uses a non-reentrant model
  7292 ;;
  7293                           
  7294                           	psect	text28
  7295  000C5A                     __ptext28:
  7296                           	opt stack 0
  7297  000C5A                     _PWMt0PCA:
  7298                           	opt stack 22
  7299                           
  7300                           ;flex.c: 46: switch (finger){
  7301                           
  7302                           ;incstack = 0
  7303  000C5A  D082               	goto	l3073
  7304  000C5C                     l3041:
  7305                           
  7306                           ;flex.c: 48: if( up <=1436 )
  7307  000C5C  0E9D               	movlw	157
  7308  000C5E  5C1F               	subwf	PWMt0PCA@up,w,c
  7309  000C60  0E05               	movlw	5
  7310  000C62  5820               	subwfb	PWMt0PCA@up+1,w,c
  7311  000C64  B0D8               	btfsc	status,0,c
  7312  000C66  D009               	goto	l3045
  7313                           
  7314                           ;flex.c: 49: transmit_finger(up ,0x06 );
  7315  000C68  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  7316  000C6C  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  7317  000C70  0E06               	movlw	6
  7318  000C72  6E1C               	movwf	transmit_finger@finger,c
  7319  000C74  EC11  F00B         	call	_transmit_finger	;wreg free
  7320  000C78  0012               	return	
  7321  000C7A                     l3045:
  7322                           
  7323                           ;flex.c: 50: else
  7324                           ;flex.c: 51: transmit_finger( up+low , 0x06 );
  7325  000C7A  5021               	movf	PWMt0PCA@low,w,c
  7326  000C7C  241F               	addwf	PWMt0PCA@up,w,c
  7327  000C7E  6E1A               	movwf	transmit_finger@HL_Value,c
  7328  000C80  5022               	movf	PWMt0PCA@low+1,w,c
  7329  000C82  2020               	addwfc	PWMt0PCA@up+1,w,c
  7330  000C84  6E1B               	movwf	transmit_finger@HL_Value+1,c
  7331  000C86  0E06               	movlw	6
  7332  000C88  6E1C               	movwf	transmit_finger@finger,c
  7333  000C8A  EC11  F00B         	call	_transmit_finger	;wreg free
  7334                           
  7335                           ;flex.c: 52: break;
  7336  000C8E  0012               	return	
  7337  000C90                     l3047:
  7338                           
  7339                           ;flex.c: 54: if( up <= 1651 )
  7340  000C90  0E74               	movlw	116
  7341  000C92  5C1F               	subwf	PWMt0PCA@up,w,c
  7342  000C94  0E06               	movlw	6
  7343  000C96  5820               	subwfb	PWMt0PCA@up+1,w,c
  7344  000C98  B0D8               	btfsc	status,0,c
  7345  000C9A  D009               	goto	l3051
  7346                           
  7347                           ;flex.c: 55: transmit_finger(up ,0x0A );
  7348  000C9C  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  7349  000CA0  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  7350  000CA4  0E0A               	movlw	10
  7351  000CA6  6E1C               	movwf	transmit_finger@finger,c
  7352  000CA8  EC11  F00B         	call	_transmit_finger	;wreg free
  7353  000CAC  0012               	return	
  7354  000CAE                     l3051:
  7355                           
  7356                           ;flex.c: 56: else
  7357                           ;flex.c: 57: transmit_finger( up+low , 0x0A );
  7358  000CAE  5021               	movf	PWMt0PCA@low,w,c
  7359  000CB0  241F               	addwf	PWMt0PCA@up,w,c
  7360  000CB2  6E1A               	movwf	transmit_finger@HL_Value,c
  7361  000CB4  5022               	movf	PWMt0PCA@low+1,w,c
  7362  000CB6  2020               	addwfc	PWMt0PCA@up+1,w,c
  7363  000CB8  6E1B               	movwf	transmit_finger@HL_Value+1,c
  7364  000CBA  0E0A               	movlw	10
  7365  000CBC  6E1C               	movwf	transmit_finger@finger,c
  7366  000CBE  EC11  F00B         	call	_transmit_finger	;wreg free
  7367                           
  7368                           ;flex.c: 58: break;
  7369  000CC2  0012               	return	
  7370  000CC4                     l3053:
  7371                           
  7372                           ;flex.c: 60: if( up <= 2000 )
  7373  000CC4  0ED1               	movlw	209
  7374  000CC6  5C1F               	subwf	PWMt0PCA@up,w,c
  7375  000CC8  0E07               	movlw	7
  7376  000CCA  5820               	subwfb	PWMt0PCA@up+1,w,c
  7377  000CCC  B0D8               	btfsc	status,0,c
  7378  000CCE  D009               	goto	l3057
  7379                           
  7380                           ;flex.c: 61: transmit_finger(up ,0x0E );
  7381  000CD0  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  7382  000CD4  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  7383  000CD8  0E0E               	movlw	14
  7384  000CDA  6E1C               	movwf	transmit_finger@finger,c
  7385  000CDC  EC11  F00B         	call	_transmit_finger	;wreg free
  7386  000CE0  0012               	return	
  7387  000CE2                     l3057:
  7388                           
  7389                           ;flex.c: 62: else
  7390                           ;flex.c: 63: transmit_finger( up+low , 0x0E );
  7391  000CE2  5021               	movf	PWMt0PCA@low,w,c
  7392  000CE4  241F               	addwf	PWMt0PCA@up,w,c
  7393  000CE6  6E1A               	movwf	transmit_finger@HL_Value,c
  7394  000CE8  5022               	movf	PWMt0PCA@low+1,w,c
  7395  000CEA  2020               	addwfc	PWMt0PCA@up+1,w,c
  7396  000CEC  6E1B               	movwf	transmit_finger@HL_Value+1,c
  7397  000CEE  0E0E               	movlw	14
  7398  000CF0  6E1C               	movwf	transmit_finger@finger,c
  7399  000CF2  EC11  F00B         	call	_transmit_finger	;wreg free
  7400                           
  7401                           ;flex.c: 64: break;
  7402  000CF6  0012               	return	
  7403  000CF8                     l3059:
  7404                           
  7405                           ;flex.c: 66: if( up <= 1722 )
  7406  000CF8  0EBB               	movlw	187
  7407  000CFA  5C1F               	subwf	PWMt0PCA@up,w,c
  7408  000CFC  0E06               	movlw	6
  7409  000CFE  5820               	subwfb	PWMt0PCA@up+1,w,c
  7410  000D00  B0D8               	btfsc	status,0,c
  7411  000D02  D009               	goto	l3063
  7412                           
  7413                           ;flex.c: 67: transmit_finger(up ,0x12 );
  7414  000D04  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  7415  000D08  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  7416  000D0C  0E12               	movlw	18
  7417  000D0E  6E1C               	movwf	transmit_finger@finger,c
  7418  000D10  EC11  F00B         	call	_transmit_finger	;wreg free
  7419  000D14  0012               	return	
  7420  000D16                     l3063:
  7421                           
  7422                           ;flex.c: 68: else
  7423                           ;flex.c: 69: transmit_finger( up+low , 0x12 );
  7424  000D16  5021               	movf	PWMt0PCA@low,w,c
  7425  000D18  241F               	addwf	PWMt0PCA@up,w,c
  7426  000D1A  6E1A               	movwf	transmit_finger@HL_Value,c
  7427  000D1C  5022               	movf	PWMt0PCA@low+1,w,c
  7428  000D1E  2020               	addwfc	PWMt0PCA@up+1,w,c
  7429  000D20  6E1B               	movwf	transmit_finger@HL_Value+1,c
  7430  000D22  0E12               	movlw	18
  7431  000D24  6E1C               	movwf	transmit_finger@finger,c
  7432  000D26  EC11  F00B         	call	_transmit_finger	;wreg free
  7433                           
  7434                           ;flex.c: 70: break;
  7435  000D2A  0012               	return	
  7436  000D2C                     l3065:
  7437                           
  7438                           ;flex.c: 72: if( up <= 1580 )
  7439  000D2C  0E2D               	movlw	45
  7440  000D2E  5C1F               	subwf	PWMt0PCA@up,w,c
  7441  000D30  0E06               	movlw	6
  7442  000D32  5820               	subwfb	PWMt0PCA@up+1,w,c
  7443  000D34  B0D8               	btfsc	status,0,c
  7444  000D36  D009               	goto	l3069
  7445                           
  7446                           ;flex.c: 73: transmit_finger(up ,0x16 );
  7447  000D38  C01F  F01A         	movff	PWMt0PCA@up,transmit_finger@HL_Value
  7448  000D3C  C020  F01B         	movff	PWMt0PCA@up+1,transmit_finger@HL_Value+1
  7449  000D40  0E16               	movlw	22
  7450  000D42  6E1C               	movwf	transmit_finger@finger,c
  7451  000D44  EC11  F00B         	call	_transmit_finger	;wreg free
  7452  000D48  0012               	return	
  7453  000D4A                     l3069:
  7454                           
  7455                           ;flex.c: 74: else
  7456                           ;flex.c: 75: transmit_finger( up+low , 0x16 );
  7457  000D4A  5021               	movf	PWMt0PCA@low,w,c
  7458  000D4C  241F               	addwf	PWMt0PCA@up,w,c
  7459  000D4E  6E1A               	movwf	transmit_finger@HL_Value,c
  7460  000D50  5022               	movf	PWMt0PCA@low+1,w,c
  7461  000D52  2020               	addwfc	PWMt0PCA@up+1,w,c
  7462  000D54  6E1B               	movwf	transmit_finger@HL_Value+1,c
  7463  000D56  0E16               	movlw	22
  7464  000D58  6E1C               	movwf	transmit_finger@finger,c
  7465  000D5A  EC11  F00B         	call	_transmit_finger	;wreg free
  7466                           
  7467                           ;flex.c: 77: }
  7468                           
  7469                           ;flex.c: 76: break;
  7470  000D5E  0012               	return	
  7471  000D60                     l3073:
  7472  000D60  5023               	movf	PWMt0PCA@finger,w,c
  7473                           
  7474                           ; Switch size 1, requested type "space"
  7475                           ; Number of cases is 5, Range of values is 0 to 4
  7476                           ; switch strategies available:
  7477                           ; Name         Instructions Cycles
  7478                           ; simple_byte           16     9 (average)
  7479                           ;	Chosen strategy is simple_byte
  7480  000D62  0A00               	xorlw	0	; case 0
  7481  000D64  B4D8               	btfsc	status,2,c
  7482  000D66  D77A               	goto	l3041
  7483  000D68  0A01               	xorlw	1	; case 1
  7484  000D6A  B4D8               	btfsc	status,2,c
  7485  000D6C  D791               	goto	l3047
  7486  000D6E  0A03               	xorlw	3	; case 2
  7487  000D70  B4D8               	btfsc	status,2,c
  7488  000D72  D7A8               	goto	l3053
  7489  000D74  0A01               	xorlw	1	; case 3
  7490  000D76  B4D8               	btfsc	status,2,c
  7491  000D78  D7BF               	goto	l3059
  7492  000D7A  0A07               	xorlw	7	; case 4
  7493  000D7C  A4D8               	btfss	status,2,c
  7494  000D7E  0012               	return	
  7495  000D80  D7D5               	goto	l3065
  7496  000D82                     __end_of_PWMt0PCA:
  7497                           	opt stack 0
  7498                           tblptru	equ	0xFF8
  7499                           tblptrh	equ	0xFF7
  7500                           tblptrl	equ	0xFF6
  7501                           tablat	equ	0xFF5
  7502                           prodh	equ	0xFF4
  7503                           prodl	equ	0xFF3
  7504                           intcon	equ	0xFF2
  7505                           indf0	equ	0xFEF
  7506                           postinc0	equ	0xFEE
  7507                           fsr0h	equ	0xFEA
  7508                           fsr0l	equ	0xFE9
  7509                           wreg	equ	0xFE8
  7510                           postdec1	equ	0xFE5
  7511                           plusw1	equ	0xFE3
  7512                           fsr1l	equ	0xFE1
  7513                           indf2	equ	0xFDF
  7514                           postinc2	equ	0xFDE
  7515                           postdec2	equ	0xFDD
  7516                           plusw2	equ	0xFDB
  7517                           fsr2h	equ	0xFDA
  7518                           fsr2l	equ	0xFD9
  7519                           status	equ	0xFD8
  7520                           
  7521 ;; *************** function _transmit_finger *****************
  7522 ;; Defined at:
  7523 ;;		line 7 in file "harwave/flex.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;  HL_Value        2   25[COMRAM] unsigned int 
  7526 ;;  finger          1   27[COMRAM] unsigned char 
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;  Lbyte           1   29[COMRAM] unsigned char 
  7529 ;;  Hbyte           1   28[COMRAM] unsigned char 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      void 
  7532 ;; Registers used:
  7533 ;;		wreg, status,2, status,0, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7539 ;;      Params:         3       0       0       0       0       0       0
  7540 ;;      Locals:         2       0       0       0       0       0       0
  7541 ;;      Temps:          0       0       0       0       0       0       0
  7542 ;;      Totals:         5       0       0       0       0       0       0
  7543 ;;Total ram usage:        5 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    6
  7546 ;; This function calls:
  7547 ;;		_PCA9685_writeOneByte
  7548 ;; This function is called by:
  7549 ;;		_PWMt0PCA
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           	psect	text29
  7554  001622                     __ptext29:
  7555                           	opt stack 0
  7556  001622                     _transmit_finger:
  7557                           	opt stack 22
  7558                           
  7559                           ;flex.c: 8: u8 Hbyte , Lbyte ;
  7560                           ;flex.c: 9: Lbyte = HL_Value ;
  7561                           
  7562                           ;incstack = 0
  7563  001622  C01A  F01E         	movff	transmit_finger@HL_Value,transmit_finger@Lbyte
  7564                           
  7565                           ;flex.c: 10: Hbyte = HL_Value >> 8 ;
  7566  001626  501B               	movf	transmit_finger@HL_Value+1,w,c
  7567  001628  6E1D               	movwf	transmit_finger@Hbyte,c
  7568                           
  7569                           ;flex.c: 11: PCA9685_writeOneByte(finger,0x00);
  7570  00162A  0E00               	movlw	0
  7571  00162C  6E18               	movwf	PCA9685_writeOneByte@data,c
  7572  00162E  501C               	movf	transmit_finger@finger,w,c
  7573  001630  EC2C  F00B         	call	_PCA9685_writeOneByte
  7574                           
  7575                           ;flex.c: 12: PCA9685_writeOneByte(finger+1,0x00);
  7576  001634  0E00               	movlw	0
  7577  001636  6E18               	movwf	PCA9685_writeOneByte@data,c
  7578  001638  281C               	incf	transmit_finger@finger,w,c
  7579  00163A  EC2C  F00B         	call	_PCA9685_writeOneByte
  7580                           
  7581                           ;flex.c: 13: PCA9685_writeOneByte(finger+2,Lbyte);
  7582  00163E  C01E  F018         	movff	transmit_finger@Lbyte,PCA9685_writeOneByte@data
  7583  001642  501C               	movf	transmit_finger@finger,w,c
  7584  001644  0F02               	addlw	2
  7585  001646  EC2C  F00B         	call	_PCA9685_writeOneByte
  7586                           
  7587                           ;flex.c: 14: PCA9685_writeOneByte(finger+3,Hbyte);
  7588  00164A  C01D  F018         	movff	transmit_finger@Hbyte,PCA9685_writeOneByte@data
  7589  00164E  501C               	movf	transmit_finger@finger,w,c
  7590  001650  0F03               	addlw	3
  7591  001652  EC2C  F00B         	call	_PCA9685_writeOneByte
  7592  001656  0012               	return		;funcret
  7593  001658                     __end_of_transmit_finger:
  7594                           	opt stack 0
  7595                           tblptru	equ	0xFF8
  7596                           tblptrh	equ	0xFF7
  7597                           tblptrl	equ	0xFF6
  7598                           tablat	equ	0xFF5
  7599                           prodh	equ	0xFF4
  7600                           prodl	equ	0xFF3
  7601                           intcon	equ	0xFF2
  7602                           indf0	equ	0xFEF
  7603                           postinc0	equ	0xFEE
  7604                           fsr0h	equ	0xFEA
  7605                           fsr0l	equ	0xFE9
  7606                           wreg	equ	0xFE8
  7607                           postdec1	equ	0xFE5
  7608                           plusw1	equ	0xFE3
  7609                           fsr1l	equ	0xFE1
  7610                           indf2	equ	0xFDF
  7611                           postinc2	equ	0xFDE
  7612                           postdec2	equ	0xFDD
  7613                           plusw2	equ	0xFDB
  7614                           fsr2h	equ	0xFDA
  7615                           fsr2l	equ	0xFD9
  7616                           status	equ	0xFD8
  7617                           
  7618 ;; *************** function _PCA9685_writeOneByte *****************
  7619 ;; Defined at:
  7620 ;;		line 6 in file "harwave/PCA9685.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  addr            1    wreg     unsigned char 
  7623 ;;  data            1   23[COMRAM] unsigned char 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  addr            1   24[COMRAM] unsigned char 
  7626 ;; Return value:  Size  Location     Type
  7627 ;;                  1    wreg      void 
  7628 ;; Registers used:
  7629 ;;		wreg, status,2, status,0, cstack
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7635 ;;      Params:         1       0       0       0       0       0       0
  7636 ;;      Locals:         1       0       0       0       0       0       0
  7637 ;;      Temps:          0       0       0       0       0       0       0
  7638 ;;      Totals:         2       0       0       0       0       0       0
  7639 ;;Total ram usage:        2 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:    5
  7642 ;; This function calls:
  7643 ;;		_IIC_Send_Byte
  7644 ;;		_IIC_Start
  7645 ;;		_IIC_Stop
  7646 ;;		_IIC_Wait_Ack
  7647 ;;		_delay_ms
  7648 ;; This function is called by:
  7649 ;;		_transmit_finger
  7650 ;;		_PCA9685_init
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           	psect	text30
  7655  001658                     __ptext30:
  7656                           	opt stack 0
  7657  001658                     _PCA9685_writeOneByte:
  7658                           	opt stack 24
  7659                           
  7660                           ;incstack = 0
  7661                           ;PCA9685_writeOneByte@addr stored from wreg
  7662  001658  6E19               	movwf	PCA9685_writeOneByte@addr,c
  7663                           
  7664                           ;PCA9685.c: 8: IIC_Start();
  7665  00165A  ECE8  F00B         	call	_IIC_Start	;wreg free
  7666                           
  7667                           ;PCA9685.c: 9: IIC_Send_Byte(0x80);
  7668  00165E  0E80               	movlw	128
  7669  001660  ECFB  F009         	call	_IIC_Send_Byte
  7670                           
  7671                           ;PCA9685.c: 10: IIC_Wait_Ack();
  7672  001664  ECD9  F00A         	call	_IIC_Wait_Ack	;wreg free
  7673                           
  7674                           ;PCA9685.c: 11: IIC_Send_Byte(addr&0xff);
  7675  001668  5019               	movf	PCA9685_writeOneByte@addr,w,c
  7676  00166A  ECFB  F009         	call	_IIC_Send_Byte
  7677                           
  7678                           ;PCA9685.c: 12: IIC_Wait_Ack();
  7679  00166E  ECD9  F00A         	call	_IIC_Wait_Ack	;wreg free
  7680                           
  7681                           ;PCA9685.c: 13: IIC_Send_Byte(data);
  7682  001672  5018               	movf	PCA9685_writeOneByte@data,w,c
  7683  001674  ECFB  F009         	call	_IIC_Send_Byte
  7684                           
  7685                           ;PCA9685.c: 14: IIC_Wait_Ack();
  7686  001678  ECD9  F00A         	call	_IIC_Wait_Ack	;wreg free
  7687                           
  7688                           ;PCA9685.c: 15: IIC_Stop();
  7689  00167C  ECD6  F00B         	call	_IIC_Stop	;wreg free
  7690                           
  7691                           ;PCA9685.c: 16: delay_ms(10);
  7692  001680  0E00               	movlw	0
  7693  001682  6E15               	movwf	delay_ms@ms+1,c
  7694  001684  0E0A               	movlw	10
  7695  001686  6E14               	movwf	delay_ms@ms,c
  7696  001688  EC1A  F00C         	call	_delay_ms	;wreg free
  7697  00168C  0012               	return		;funcret
  7698  00168E                     __end_of_PCA9685_writeOneByte:
  7699                           	opt stack 0
  7700                           tblptru	equ	0xFF8
  7701                           tblptrh	equ	0xFF7
  7702                           tblptrl	equ	0xFF6
  7703                           tablat	equ	0xFF5
  7704                           prodh	equ	0xFF4
  7705                           prodl	equ	0xFF3
  7706                           intcon	equ	0xFF2
  7707                           indf0	equ	0xFEF
  7708                           postinc0	equ	0xFEE
  7709                           fsr0h	equ	0xFEA
  7710                           fsr0l	equ	0xFE9
  7711                           wreg	equ	0xFE8
  7712                           postdec1	equ	0xFE5
  7713                           plusw1	equ	0xFE3
  7714                           fsr1l	equ	0xFE1
  7715                           indf2	equ	0xFDF
  7716                           postinc2	equ	0xFDE
  7717                           postdec2	equ	0xFDD
  7718                           plusw2	equ	0xFDB
  7719                           fsr2h	equ	0xFDA
  7720                           fsr2l	equ	0xFD9
  7721                           status	equ	0xFD8
  7722                           
  7723 ;; *************** function _delay_ms *****************
  7724 ;; Defined at:
  7725 ;;		line 3 in file "harwave/mydelay.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  ms              2   19[COMRAM] int 
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, status,2, status,0, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7739 ;;      Params:         2       0       0       0       0       0       0
  7740 ;;      Locals:         0       0       0       0       0       0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0
  7742 ;;      Totals:         2       0       0       0       0       0       0
  7743 ;;Total ram usage:        2 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    2
  7746 ;; This function calls:
  7747 ;;		_Delay10KTCYx
  7748 ;; This function is called by:
  7749 ;;		_PCA9685_writeOneByte
  7750 ;;		_ESP8266_Cmd
  7751 ;;		_LCD_Initialize
  7752 ;;		_LCD_WriteCmd
  7753 ;;		_LCD_GotoXY
  7754 ;;		_LCD_WriteData
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text31
  7759  001834                     __ptext31:
  7760                           	opt stack 0
  7761  001834                     _delay_ms:
  7762                           	opt stack 26
  7763  001834                     
  7764                           ;mydelay.c: 6: Delay10KTCYx(1);
  7765  001834  0E01               	movlw	1
  7766  001836  EC25  F00C         	call	_Delay10KTCYx
  7767                           
  7768                           ;mydelay.c: 7: ms--;
  7769  00183A  0614               	decf	delay_ms@ms,f,c
  7770  00183C  A0D8               	btfss	status,0,c
  7771  00183E  0615               	decf	delay_ms@ms+1,f,c
  7772                           
  7773                           ;mydelay.c: 8: }while(ms);
  7774  001840  5014               	movf	delay_ms@ms,w,c
  7775  001842  1015               	iorwf	delay_ms@ms+1,w,c
  7776  001844  B4D8               	btfsc	status,2,c
  7777  001846  0012               	return	
  7778  001848  D7F5               	goto	l2465
  7779  00184A                     __end_of_delay_ms:
  7780                           	opt stack 0
  7781                           tblptru	equ	0xFF8
  7782                           tblptrh	equ	0xFF7
  7783                           tblptrl	equ	0xFF6
  7784                           tablat	equ	0xFF5
  7785                           prodh	equ	0xFF4
  7786                           prodl	equ	0xFF3
  7787                           intcon	equ	0xFF2
  7788                           indf0	equ	0xFEF
  7789                           postinc0	equ	0xFEE
  7790                           fsr0h	equ	0xFEA
  7791                           fsr0l	equ	0xFE9
  7792                           wreg	equ	0xFE8
  7793                           postdec1	equ	0xFE5
  7794                           plusw1	equ	0xFE3
  7795                           fsr1l	equ	0xFE1
  7796                           indf2	equ	0xFDF
  7797                           postinc2	equ	0xFDE
  7798                           postdec2	equ	0xFDD
  7799                           plusw2	equ	0xFDB
  7800                           fsr2h	equ	0xFDA
  7801                           fsr2l	equ	0xFD9
  7802                           status	equ	0xFD8
  7803                           
  7804 ;; *************** function _Delay10KTCYx *****************
  7805 ;; Defined at:
  7806 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10ktcyx.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;  unit            1    wreg     unsigned char 
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;  unit            1   18[COMRAM] unsigned char 
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  1    wreg      void 
  7813 ;; Registers used:
  7814 ;;		wreg
  7815 ;; Tracked objects:
  7816 ;;		On entry : 0/0
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7820 ;;      Params:         0       0       0       0       0       0       0
  7821 ;;      Locals:         1       0       0       0       0       0       0
  7822 ;;      Temps:          1       0       0       0       0       0       0
  7823 ;;      Totals:         2       0       0       0       0       0       0
  7824 ;;Total ram usage:        2 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    1
  7827 ;; This function calls:
  7828 ;;		Nothing
  7829 ;; This function is called by:
  7830 ;;		_delay_ms
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           	psect	text32
  7835  00184A                     __ptext32:
  7836                           	opt stack 0
  7837  00184A                     _Delay10KTCYx:
  7838                           	opt stack 26
  7839                           
  7840                           ;incstack = 0
  7841                           ;Delay10KTCYx@unit stored from wreg
  7842  00184A  6E13               	movwf	Delay10KTCYx@unit,c
  7843  00184C  0E0D               	movlw	13
  7844  00184E  6E12               	movwf	??_Delay10KTCYx& (0+255),c
  7845  001850  0EFC               	movlw	252
  7846  001852                     u3177:
  7847  001852  2EE8               	decfsz	wreg,f,c
  7848  001854  D7FE               	bra	u3177
  7849  001856  2E12               	decfsz	??_Delay10KTCYx& (0+255),f,c
  7850  001858  D7FC               	bra	u3177
  7851  00185A  2E13               	decfsz	Delay10KTCYx@unit,f,c
  7852  00185C  D7F7               	goto	l2413
  7853  00185E  0012               	return	
  7854  001860                     __end_of_Delay10KTCYx:
  7855                           	opt stack 0
  7856                           tblptru	equ	0xFF8
  7857                           tblptrh	equ	0xFF7
  7858                           tblptrl	equ	0xFF6
  7859                           tablat	equ	0xFF5
  7860                           prodh	equ	0xFF4
  7861                           prodl	equ	0xFF3
  7862                           intcon	equ	0xFF2
  7863                           indf0	equ	0xFEF
  7864                           postinc0	equ	0xFEE
  7865                           fsr0h	equ	0xFEA
  7866                           fsr0l	equ	0xFE9
  7867                           wreg	equ	0xFE8
  7868                           postdec1	equ	0xFE5
  7869                           plusw1	equ	0xFE3
  7870                           fsr1l	equ	0xFE1
  7871                           indf2	equ	0xFDF
  7872                           postinc2	equ	0xFDE
  7873                           postdec2	equ	0xFDD
  7874                           plusw2	equ	0xFDB
  7875                           fsr2h	equ	0xFDA
  7876                           fsr2l	equ	0xFD9
  7877                           status	equ	0xFD8
  7878                           
  7879 ;; *************** function _IIC_Wait_Ack *****************
  7880 ;; Defined at:
  7881 ;;		line 43 in file "harwave/softIIC.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;		None
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;  ucErrTime       1   20[COMRAM] unsigned char 
  7886 ;; Return value:  Size  Location     Type
  7887 ;;                  1    wreg      unsigned char 
  7888 ;; Registers used:
  7889 ;;		wreg, status,2, status,0, cstack
  7890 ;; Tracked objects:
  7891 ;;		On entry : 0/0
  7892 ;;		On exit  : 0/0
  7893 ;;		Unchanged: 0/0
  7894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7895 ;;      Params:         0       0       0       0       0       0       0
  7896 ;;      Locals:         1       0       0       0       0       0       0
  7897 ;;      Temps:          0       0       0       0       0       0       0
  7898 ;;      Totals:         1       0       0       0       0       0       0
  7899 ;;Total ram usage:        1 bytes
  7900 ;; Hardware stack levels used:    1
  7901 ;; Hardware stack levels required when called:    4
  7902 ;; This function calls:
  7903 ;;		_IIC_Stop
  7904 ;;		_delay_us
  7905 ;; This function is called by:
  7906 ;;		_PCA9685_writeOneByte
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           	psect	text33
  7911  0015B2                     __ptext33:
  7912                           	opt stack 0
  7913  0015B2                     _IIC_Wait_Ack:
  7914                           	opt stack 24
  7915                           
  7916                           ;softIIC.c: 45: u8 ucErrTime=0;
  7917                           
  7918                           ;incstack = 0
  7919  0015B2  0E00               	movlw	0
  7920  0015B4  6E15               	movwf	IIC_Wait_Ack@ucErrTime,c
  7921                           
  7922                           ;softIIC.c: 46: {TRISBbits.TRISB0=1;};
  7923  0015B6  8093               	bsf	3987,0,c	;volatile
  7924                           
  7925                           ;softIIC.c: 47: PORTBbits.RB0=1;
  7926  0015B8  8081               	bsf	3969,0,c	;volatile
  7927                           
  7928                           ;softIIC.c: 49: delay_us(1);
  7929  0015BA  0E00               	movlw	0
  7930  0015BC  6E14               	movwf	delay_us@us+1,c
  7931  0015BE  0E01               	movlw	1
  7932  0015C0  6E13               	movwf	delay_us@us,c
  7933  0015C2  EC30  F00C         	call	_delay_us	;wreg free
  7934                           
  7935                           ;softIIC.c: 50: PORTBbits.RB1=1;
  7936  0015C6  8281               	bsf	3969,1,c	;volatile
  7937                           
  7938                           ;softIIC.c: 52: delay_us(1);
  7939  0015C8  0E00               	movlw	0
  7940  0015CA  6E14               	movwf	delay_us@us+1,c
  7941  0015CC  0E01               	movlw	1
  7942  0015CE  6E13               	movwf	delay_us@us,c
  7943  0015D0  EC30  F00C         	call	_delay_us	;wreg free
  7944                           
  7945                           ;softIIC.c: 53: while(PORTBbits.RB0)
  7946  0015D4  D007               	goto	l245
  7947  0015D6                     l2515:
  7948                           
  7949                           ;softIIC.c: 54: {
  7950                           ;softIIC.c: 55: ucErrTime++;
  7951  0015D6  2A15               	incf	IIC_Wait_Ack@ucErrTime,f,c
  7952                           
  7953                           ;softIIC.c: 56: if(ucErrTime>250)
  7954  0015D8  0EFA               	movlw	250
  7955  0015DA  6415               	cpfsgt	IIC_Wait_Ack@ucErrTime,c
  7956  0015DC  D003               	goto	l245
  7957                           
  7958                           ;softIIC.c: 57: {
  7959                           ;softIIC.c: 58: IIC_Stop();
  7960  0015DE  ECD6  F00B         	call	_IIC_Stop	;wreg free
  7961                           
  7962                           ;softIIC.c: 59: return 1;
  7963                           ;	Return value of _IIC_Wait_Ack is never used
  7964  0015E2  0012               	return	
  7965  0015E4                     l245:
  7966  0015E4  B081               	btfsc	3969,0,c	;volatile
  7967  0015E6  D7F7               	goto	l2515
  7968                           
  7969                           ;softIIC.c: 60: }
  7970                           ;softIIC.c: 61: }
  7971                           ;softIIC.c: 62: PORTBbits.RB1=0;
  7972  0015E8  9281               	bcf	3969,1,c	;volatile
  7973                           
  7974                           ;softIIC.c: 63: return 0;
  7975                           ;	Return value of _IIC_Wait_Ack is never used
  7976  0015EA  0012               	return		;funcret
  7977  0015EC                     __end_of_IIC_Wait_Ack:
  7978                           	opt stack 0
  7979                           tblptru	equ	0xFF8
  7980                           tblptrh	equ	0xFF7
  7981                           tblptrl	equ	0xFF6
  7982                           tablat	equ	0xFF5
  7983                           prodh	equ	0xFF4
  7984                           prodl	equ	0xFF3
  7985                           intcon	equ	0xFF2
  7986                           indf0	equ	0xFEF
  7987                           postinc0	equ	0xFEE
  7988                           fsr0h	equ	0xFEA
  7989                           fsr0l	equ	0xFE9
  7990                           wreg	equ	0xFE8
  7991                           postdec1	equ	0xFE5
  7992                           plusw1	equ	0xFE3
  7993                           fsr1l	equ	0xFE1
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           postdec2	equ	0xFDD
  7997                           plusw2	equ	0xFDB
  7998                           fsr2h	equ	0xFDA
  7999                           fsr2l	equ	0xFD9
  8000                           status	equ	0xFD8
  8001                           
  8002 ;; *************** function _IIC_Stop *****************
  8003 ;; Defined at:
  8004 ;;		line 29 in file "harwave/softIIC.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;		None
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  1    wreg      void 
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, status,0, cstack
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8018 ;;      Params:         0       0       0       0       0       0       0
  8019 ;;      Locals:         0       0       0       0       0       0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0
  8021 ;;      Totals:         0       0       0       0       0       0       0
  8022 ;;Total ram usage:        0 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    3
  8025 ;; This function calls:
  8026 ;;		_delay_us
  8027 ;; This function is called by:
  8028 ;;		_PCA9685_writeOneByte
  8029 ;;		_IIC_Wait_Ack
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           	psect	text34
  8034  0017AC                     __ptext34:
  8035                           	opt stack 0
  8036  0017AC                     _IIC_Stop:
  8037                           	opt stack 24
  8038                           
  8039                           ;softIIC.c: 31: {TRISBbits.TRISB0=0;};
  8040                           
  8041                           ;incstack = 0
  8042  0017AC  9093               	bcf	3987,0,c	;volatile
  8043                           
  8044                           ;softIIC.c: 32: PORTBbits.RB1=0;
  8045  0017AE  9281               	bcf	3969,1,c	;volatile
  8046                           
  8047                           ;softIIC.c: 33: PORTBbits.RB0=0;
  8048  0017B0  9081               	bcf	3969,0,c	;volatile
  8049                           
  8050                           ;softIIC.c: 34: delay_us(4);
  8051  0017B2  0E00               	movlw	0
  8052  0017B4  6E14               	movwf	delay_us@us+1,c
  8053  0017B6  0E04               	movlw	4
  8054  0017B8  6E13               	movwf	delay_us@us,c
  8055  0017BA  EC30  F00C         	call	_delay_us	;wreg free
  8056                           
  8057                           ;softIIC.c: 35: PORTBbits.RB1=1;
  8058  0017BE  8281               	bsf	3969,1,c	;volatile
  8059                           
  8060                           ;softIIC.c: 36: delay_us(4);
  8061  0017C0  0E00               	movlw	0
  8062  0017C2  6E14               	movwf	delay_us@us+1,c
  8063  0017C4  0E04               	movlw	4
  8064  0017C6  6E13               	movwf	delay_us@us,c
  8065  0017C8  EC30  F00C         	call	_delay_us	;wreg free
  8066                           
  8067                           ;softIIC.c: 37: PORTBbits.RB0=1;
  8068  0017CC  8081               	bsf	3969,0,c	;volatile
  8069  0017CE  0012               	return		;funcret
  8070  0017D0                     __end_of_IIC_Stop:
  8071                           	opt stack 0
  8072                           tblptru	equ	0xFF8
  8073                           tblptrh	equ	0xFF7
  8074                           tblptrl	equ	0xFF6
  8075                           tablat	equ	0xFF5
  8076                           prodh	equ	0xFF4
  8077                           prodl	equ	0xFF3
  8078                           intcon	equ	0xFF2
  8079                           indf0	equ	0xFEF
  8080                           postinc0	equ	0xFEE
  8081                           fsr0h	equ	0xFEA
  8082                           fsr0l	equ	0xFE9
  8083                           wreg	equ	0xFE8
  8084                           postdec1	equ	0xFE5
  8085                           plusw1	equ	0xFE3
  8086                           fsr1l	equ	0xFE1
  8087                           indf2	equ	0xFDF
  8088                           postinc2	equ	0xFDE
  8089                           postdec2	equ	0xFDD
  8090                           plusw2	equ	0xFDB
  8091                           fsr2h	equ	0xFDA
  8092                           fsr2l	equ	0xFD9
  8093                           status	equ	0xFD8
  8094                           
  8095 ;; *************** function _IIC_Start *****************
  8096 ;; Defined at:
  8097 ;;		line 18 in file "harwave/softIIC.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;		None
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;		None
  8102 ;; Return value:  Size  Location     Type
  8103 ;;                  1    wreg      void 
  8104 ;; Registers used:
  8105 ;;		wreg, status,2, status,0, cstack
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8111 ;;      Params:         0       0       0       0       0       0       0
  8112 ;;      Locals:         0       0       0       0       0       0       0
  8113 ;;      Temps:          0       0       0       0       0       0       0
  8114 ;;      Totals:         0       0       0       0       0       0       0
  8115 ;;Total ram usage:        0 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; Hardware stack levels required when called:    3
  8118 ;; This function calls:
  8119 ;;		_delay_us
  8120 ;; This function is called by:
  8121 ;;		_PCA9685_writeOneByte
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           	psect	text35
  8126  0017D0                     __ptext35:
  8127                           	opt stack 0
  8128  0017D0                     _IIC_Start:
  8129                           	opt stack 25
  8130                           
  8131                           ;softIIC.c: 20: {TRISBbits.TRISB0=0;};
  8132                           
  8133                           ;incstack = 0
  8134  0017D0  9093               	bcf	3987,0,c	;volatile
  8135                           
  8136                           ;softIIC.c: 21: PORTBbits.RB0=1;
  8137  0017D2  8081               	bsf	3969,0,c	;volatile
  8138                           
  8139                           ;softIIC.c: 22: PORTBbits.RB1=1;
  8140  0017D4  8281               	bsf	3969,1,c	;volatile
  8141                           
  8142                           ;softIIC.c: 23: delay_us(4);
  8143  0017D6  0E00               	movlw	0
  8144  0017D8  6E14               	movwf	delay_us@us+1,c
  8145  0017DA  0E04               	movlw	4
  8146  0017DC  6E13               	movwf	delay_us@us,c
  8147  0017DE  EC30  F00C         	call	_delay_us	;wreg free
  8148                           
  8149                           ;softIIC.c: 24: PORTBbits.RB0=0;
  8150  0017E2  9081               	bcf	3969,0,c	;volatile
  8151                           
  8152                           ;softIIC.c: 25: delay_us(4);
  8153  0017E4  0E00               	movlw	0
  8154  0017E6  6E14               	movwf	delay_us@us+1,c
  8155  0017E8  0E04               	movlw	4
  8156  0017EA  6E13               	movwf	delay_us@us,c
  8157  0017EC  EC30  F00C         	call	_delay_us	;wreg free
  8158                           
  8159                           ;softIIC.c: 26: PORTBbits.RB1=0;
  8160  0017F0  9281               	bcf	3969,1,c	;volatile
  8161  0017F2  0012               	return		;funcret
  8162  0017F4                     __end_of_IIC_Start:
  8163                           	opt stack 0
  8164                           tblptru	equ	0xFF8
  8165                           tblptrh	equ	0xFF7
  8166                           tblptrl	equ	0xFF6
  8167                           tablat	equ	0xFF5
  8168                           prodh	equ	0xFF4
  8169                           prodl	equ	0xFF3
  8170                           intcon	equ	0xFF2
  8171                           indf0	equ	0xFEF
  8172                           postinc0	equ	0xFEE
  8173                           fsr0h	equ	0xFEA
  8174                           fsr0l	equ	0xFE9
  8175                           wreg	equ	0xFE8
  8176                           postdec1	equ	0xFE5
  8177                           plusw1	equ	0xFE3
  8178                           fsr1l	equ	0xFE1
  8179                           indf2	equ	0xFDF
  8180                           postinc2	equ	0xFDE
  8181                           postdec2	equ	0xFDD
  8182                           plusw2	equ	0xFDB
  8183                           fsr2h	equ	0xFDA
  8184                           fsr2l	equ	0xFD9
  8185                           status	equ	0xFD8
  8186                           
  8187 ;; *************** function _IIC_Send_Byte *****************
  8188 ;; Defined at:
  8189 ;;		line 91 in file "harwave/softIIC.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;  txd             1    wreg     unsigned char 
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;  txd             1   21[COMRAM] unsigned char 
  8194 ;;  t               1   22[COMRAM] unsigned char 
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1    wreg      void 
  8197 ;; Registers used:
  8198 ;;		wreg, status,2, status,0, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8204 ;;      Params:         0       0       0       0       0       0       0
  8205 ;;      Locals:         2       0       0       0       0       0       0
  8206 ;;      Temps:          1       0       0       0       0       0       0
  8207 ;;      Totals:         3       0       0       0       0       0       0
  8208 ;;Total ram usage:        3 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    3
  8211 ;; This function calls:
  8212 ;;		_delay_us
  8213 ;; This function is called by:
  8214 ;;		_PCA9685_writeOneByte
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           	psect	text36
  8219  0013F6                     __ptext36:
  8220                           	opt stack 0
  8221  0013F6                     _IIC_Send_Byte:
  8222                           	opt stack 25
  8223                           
  8224                           ;incstack = 0
  8225                           ;IIC_Send_Byte@txd stored from wreg
  8226  0013F6  6E16               	movwf	IIC_Send_Byte@txd,c
  8227                           
  8228                           ;softIIC.c: 93: u8 t;
  8229                           ;softIIC.c: 94: {TRISBbits.TRISB0=0;};
  8230  0013F8  9093               	bcf	3987,0,c	;volatile
  8231                           
  8232                           ;softIIC.c: 95: PORTBbits.RB1=0;
  8233  0013FA  9281               	bcf	3969,1,c	;volatile
  8234                           
  8235                           ;softIIC.c: 96: for(t=0;t<8;t++)
  8236  0013FC  0E00               	movlw	0
  8237  0013FE  6E17               	movwf	IIC_Send_Byte@t,c
  8238  001400                     l2483:
  8239  001400  0E07               	movlw	7
  8240  001402  6417               	cpfsgt	IIC_Send_Byte@t,c
  8241  001404  D001               	goto	l2487
  8242  001406  0012               	return	
  8243  001408                     l2487:
  8244                           
  8245                           ;softIIC.c: 97: {
  8246                           ;softIIC.c: 98: PORTBbits.RB0=(txd&0x80)>>7;
  8247  001408  6A15               	clrf	??_IIC_Send_Byte& (0+255),c
  8248  00140A  AE16               	btfss	IIC_Send_Byte@txd,7,c
  8249  00140C  D001               	bra	u1695
  8250  00140E  2A15               	incf	??_IIC_Send_Byte& (0+255),f,c
  8251  001410                     u1695:
  8252  001410  0E01               	movlw	1
  8253  001412  1615               	andwf	??_IIC_Send_Byte,f,c
  8254  001414  5081               	movf	3969,w,c	;volatile
  8255  001416  1815               	xorwf	??_IIC_Send_Byte,w,c
  8256  001418  0BFE               	andlw	-2
  8257  00141A  1815               	xorwf	??_IIC_Send_Byte,w,c
  8258  00141C  6E81               	movwf	3969,c	;volatile
  8259                           
  8260                           ;softIIC.c: 99: txd<<=1;
  8261  00141E  90D8               	bcf	status,0,c
  8262  001420  3616               	rlcf	IIC_Send_Byte@txd,f,c
  8263                           
  8264                           ;softIIC.c: 100: delay_us(2);
  8265  001422  0E00               	movlw	0
  8266  001424  6E14               	movwf	delay_us@us+1,c
  8267  001426  0E02               	movlw	2
  8268  001428  6E13               	movwf	delay_us@us,c
  8269  00142A  EC30  F00C         	call	_delay_us	;wreg free
  8270                           
  8271                           ;softIIC.c: 101: PORTBbits.RB1=1;
  8272  00142E  8281               	bsf	3969,1,c	;volatile
  8273                           
  8274                           ;softIIC.c: 102: delay_us(2);
  8275  001430  0E00               	movlw	0
  8276  001432  6E14               	movwf	delay_us@us+1,c
  8277  001434  0E02               	movlw	2
  8278  001436  6E13               	movwf	delay_us@us,c
  8279  001438  EC30  F00C         	call	_delay_us	;wreg free
  8280                           
  8281                           ;softIIC.c: 103: PORTBbits.RB1=0;
  8282  00143C  9281               	bcf	3969,1,c	;volatile
  8283                           
  8284                           ;softIIC.c: 104: delay_us(2);
  8285  00143E  0E00               	movlw	0
  8286  001440  6E14               	movwf	delay_us@us+1,c
  8287  001442  0E02               	movlw	2
  8288  001444  6E13               	movwf	delay_us@us,c
  8289  001446  EC30  F00C         	call	_delay_us	;wreg free
  8290  00144A  2A17               	incf	IIC_Send_Byte@t,f,c
  8291  00144C  D7D9               	goto	l2483
  8292  00144E                     __end_of_IIC_Send_Byte:
  8293                           	opt stack 0
  8294                           tblptru	equ	0xFF8
  8295                           tblptrh	equ	0xFF7
  8296                           tblptrl	equ	0xFF6
  8297                           tablat	equ	0xFF5
  8298                           prodh	equ	0xFF4
  8299                           prodl	equ	0xFF3
  8300                           intcon	equ	0xFF2
  8301                           indf0	equ	0xFEF
  8302                           postinc0	equ	0xFEE
  8303                           fsr0h	equ	0xFEA
  8304                           fsr0l	equ	0xFE9
  8305                           wreg	equ	0xFE8
  8306                           postdec1	equ	0xFE5
  8307                           plusw1	equ	0xFE3
  8308                           fsr1l	equ	0xFE1
  8309                           indf2	equ	0xFDF
  8310                           postinc2	equ	0xFDE
  8311                           postdec2	equ	0xFDD
  8312                           plusw2	equ	0xFDB
  8313                           fsr2h	equ	0xFDA
  8314                           fsr2l	equ	0xFD9
  8315                           status	equ	0xFD8
  8316                           
  8317 ;; *************** function _delay_us *****************
  8318 ;; Defined at:
  8319 ;;		line 11 in file "harwave/mydelay.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;  us              2   18[COMRAM] int 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;		None
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      void 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2, status,0, cstack
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8333 ;;      Params:         2       0       0       0       0       0       0
  8334 ;;      Locals:         0       0       0       0       0       0       0
  8335 ;;      Temps:          0       0       0       0       0       0       0
  8336 ;;      Totals:         2       0       0       0       0       0       0
  8337 ;;Total ram usage:        2 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    2
  8340 ;; This function calls:
  8341 ;;		_Delay10TCYx
  8342 ;; This function is called by:
  8343 ;;		_IIC_Init
  8344 ;;		_IIC_Start
  8345 ;;		_IIC_Stop
  8346 ;;		_IIC_Wait_Ack
  8347 ;;		_IIC_Send_Byte
  8348 ;;		_IIC_Ack
  8349 ;;		_IIC_NAck
  8350 ;;		_IIC_Read_Byte
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text37
  8355  001860                     __ptext37:
  8356                           	opt stack 0
  8357  001860                     _delay_us:
  8358                           	opt stack 25
  8359  001860                     
  8360                           ;mydelay.c: 14: Delay10TCYx(1);
  8361  001860  0E01               	movlw	1
  8362  001862  EC43  F00C         	call	_Delay10TCYx
  8363                           
  8364                           ;mydelay.c: 15: us--;
  8365  001866  0613               	decf	delay_us@us,f,c
  8366  001868  A0D8               	btfss	status,0,c
  8367  00186A  0614               	decf	delay_us@us+1,f,c
  8368                           
  8369                           ;mydelay.c: 16: }while(us);
  8370  00186C  5013               	movf	delay_us@us,w,c
  8371  00186E  1014               	iorwf	delay_us@us+1,w,c
  8372  001870  B4D8               	btfsc	status,2,c
  8373  001872  0012               	return	
  8374  001874  D7F5               	goto	l2407
  8375  001876                     __end_of_delay_us:
  8376                           	opt stack 0
  8377                           tblptru	equ	0xFF8
  8378                           tblptrh	equ	0xFF7
  8379                           tblptrl	equ	0xFF6
  8380                           tablat	equ	0xFF5
  8381                           prodh	equ	0xFF4
  8382                           prodl	equ	0xFF3
  8383                           intcon	equ	0xFF2
  8384                           indf0	equ	0xFEF
  8385                           postinc0	equ	0xFEE
  8386                           fsr0h	equ	0xFEA
  8387                           fsr0l	equ	0xFE9
  8388                           wreg	equ	0xFE8
  8389                           postdec1	equ	0xFE5
  8390                           plusw1	equ	0xFE3
  8391                           fsr1l	equ	0xFE1
  8392                           indf2	equ	0xFDF
  8393                           postinc2	equ	0xFDE
  8394                           postdec2	equ	0xFDD
  8395                           plusw2	equ	0xFDB
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function _Delay10TCYx *****************
  8401 ;; Defined at:
  8402 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10tcyx.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;  unit            1    wreg     unsigned char 
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  unit            1   17[COMRAM] unsigned char 
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  1    wreg      void 
  8409 ;; Registers used:
  8410 ;;		wreg
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8416 ;;      Params:         0       0       0       0       0       0       0
  8417 ;;      Locals:         1       0       0       0       0       0       0
  8418 ;;      Temps:          0       0       0       0       0       0       0
  8419 ;;      Totals:         1       0       0       0       0       0       0
  8420 ;;Total ram usage:        1 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    1
  8423 ;; This function calls:
  8424 ;;		Nothing
  8425 ;; This function is called by:
  8426 ;;		_delay_us
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text38
  8431  001886                     __ptext38:
  8432                           	opt stack 0
  8433  001886                     _Delay10TCYx:
  8434                           	opt stack 25
  8435                           
  8436                           ;incstack = 0
  8437                           ;Delay10TCYx@unit stored from wreg
  8438  001886  6E12               	movwf	Delay10TCYx@unit,c
  8439  001888  0E03               	movlw	3
  8440  00188A                     u3187:
  8441  00188A  2EE8               	decfsz	wreg,f,c
  8442  00188C  D7FE               	bra	u3187
  8443  00188E  F000               	nop	
  8444  001890  2E12               	decfsz	Delay10TCYx@unit,f,c
  8445  001892  D7FA               	goto	l2403
  8446  001894  0012               	return	
  8447  001896                     __end_of_Delay10TCYx:
  8448                           	opt stack 0
  8449                           tblptru	equ	0xFF8
  8450                           tblptrh	equ	0xFF7
  8451                           tblptrl	equ	0xFF6
  8452                           tablat	equ	0xFF5
  8453                           prodh	equ	0xFF4
  8454                           prodl	equ	0xFF3
  8455                           intcon	equ	0xFF2
  8456                           indf0	equ	0xFEF
  8457                           postinc0	equ	0xFEE
  8458                           fsr0h	equ	0xFEA
  8459                           fsr0l	equ	0xFE9
  8460                           wreg	equ	0xFE8
  8461                           postdec1	equ	0xFE5
  8462                           plusw1	equ	0xFE3
  8463                           fsr1l	equ	0xFE1
  8464                           indf2	equ	0xFDF
  8465                           postinc2	equ	0xFDE
  8466                           postdec2	equ	0xFDD
  8467                           plusw2	equ	0xFDB
  8468                           fsr2h	equ	0xFDA
  8469                           fsr2l	equ	0xFD9
  8470                           status	equ	0xFD8
  8471                           
  8472 ;; *************** function _uart *****************
  8473 ;; Defined at:
  8474 ;;		line 113 in file "main.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  ch              1   16[COMRAM] unsigned char 
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  1    wreg      void 
  8481 ;; Registers used:
  8482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8488 ;;      Params:         0       0       0       0       0       0       0
  8489 ;;      Locals:         1       0       0       0       0       0       0
  8490 ;;      Temps:         16       0       0       0       0       0       0
  8491 ;;      Totals:        17       0       0       0       0       0       0
  8492 ;;Total ram usage:       17 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; This function calls:
  8495 ;;		Nothing
  8496 ;; This function is called by:
  8497 ;;		Interrupt level 2
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           	psect	intcode
  8502  000008                     __pintcode:
  8503                           	opt stack 0
  8504  000008                     _uart:
  8505                           	opt stack 22
  8506                           
  8507                           ;incstack = 0
  8508  000008  8252               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8509  00000A  ED3F  F007         	call	int_func,f	;refresh shadow registers
  8510                           tblptru	equ	0xFF8
  8511                           tblptrh	equ	0xFF7
  8512                           tblptrl	equ	0xFF6
  8513                           tablat	equ	0xFF5
  8514                           prodh	equ	0xFF4
  8515                           prodl	equ	0xFF3
  8516                           intcon	equ	0xFF2
  8517                           indf0	equ	0xFEF
  8518                           postinc0	equ	0xFEE
  8519                           fsr0h	equ	0xFEA
  8520                           fsr0l	equ	0xFE9
  8521                           wreg	equ	0xFE8
  8522                           postdec1	equ	0xFE5
  8523                           plusw1	equ	0xFE3
  8524                           fsr1l	equ	0xFE1
  8525                           indf2	equ	0xFDF
  8526                           postinc2	equ	0xFDE
  8527                           postdec2	equ	0xFDD
  8528                           plusw2	equ	0xFDB
  8529                           fsr2h	equ	0xFDA
  8530                           fsr2l	equ	0xFD9
  8531                           status	equ	0xFD8
  8532                           
  8533                           	psect	intcode_body
  8534  000E7E                     __pintcode_body:
  8535                           	opt stack 22
  8536  000E7E                     int_func:
  8537                           	opt stack 22
  8538  000E7E  0006               	pop		; remove dummy address from shadow register refresh
  8539  000E80  CFFA F003          	movff	pclath,??_uart+2
  8540  000E84  CFFB F004          	movff	pclatu,??_uart+3
  8541  000E88  CFE9 F005          	movff	fsr0l,??_uart+4
  8542  000E8C  CFEA F006          	movff	fsr0h,??_uart+5
  8543  000E90  CFE1 F007          	movff	fsr1l,??_uart+6
  8544  000E94  CFE2 F008          	movff	fsr1h,??_uart+7
  8545  000E98  CFD9 F009          	movff	fsr2l,??_uart+8
  8546  000E9C  CFDA F00A          	movff	fsr2h,??_uart+9
  8547  000EA0  CFF3 F00B          	movff	prodl,??_uart+10
  8548  000EA4  CFF4 F00C          	movff	prodh,??_uart+11
  8549  000EA8  CFF6 F00D          	movff	tblptrl,??_uart+12
  8550  000EAC  CFF7 F00E          	movff	tblptrh,??_uart+13
  8551  000EB0  CFF8 F00F          	movff	tblptru,??_uart+14
  8552  000EB4  CFF5 F010          	movff	tablat,??_uart+15
  8553                           
  8554                           ;main.c: 114: if(PIR1bits.RCIF){
  8555  000EB8  AA9E               	btfss	3998,5,c	;volatile
  8556  000EBA  D038               	goto	i2l482
  8557                           
  8558                           ;main.c: 115: char ch;
  8559                           ;main.c: 116: ch = RCREG;
  8560  000EBC  CFAE F011          	movff	4014,uart@ch	;volatile
  8561                           
  8562                           ;main.c: 117: if( strEsp8266_Fram_Record .InfBit .FramLength < ( 100 - 1 ) ) {
  8563  000EC0  0102               	movlb	2	; () banked
  8564  000EC2  51C8               	movf	(_strEsp8266_Fram_Record+100)& (0+255),w,b
  8565  000EC4  0B7F               	andlw	127
  8566  000EC6  6E01               	movwf	??_uart& (0+255),c
  8567  000EC8  0E63               	movlw	99
  8568  000ECA  6001               	cpfslt	??_uart,c
  8569  000ECC  D02E               	goto	i2l483
  8570                           
  8571                           ; BSR set to: 2
  8572                           ;main.c: 118: strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .Fram
      +                          Length ++ ] = ch;
  8573  000ECE  0102               	movlb	2	; () banked
  8574  000ED0  51C8               	movf	(_strEsp8266_Fram_Record+100)& (0+255),w,b
  8575  000ED2  0B7F               	andlw	127
  8576  000ED4  6E01               	movwf	??_uart& (0+255),c
  8577  000ED6  5001               	movf	??_uart,w,c
  8578  000ED8  0D01               	mullw	1
  8579  000EDA  0E64               	movlw	low _strEsp8266_Fram_Record
  8580  000EDC  24F3               	addwf	prodl,w,c
  8581  000EDE  6ED9               	movwf	fsr2l,c
  8582  000EE0  0E02               	movlw	high _strEsp8266_Fram_Record
  8583  000EE2  20F4               	addwfc	prodh,w,c
  8584  000EE4  6EDA               	movwf	fsr2h,c
  8585  000EE6  C011  FFDF         	movff	uart@ch,indf2
  8586                           
  8587                           ; BSR set to: 2
  8588  000EEA  0E01               	movlw	1
  8589  000EEC  6E01               	movwf	??_uart& (0+255),c
  8590  000EEE  0102               	movlb	2	; () banked
  8591  000EF0  51C8               	movf	(_strEsp8266_Fram_Record+100)& (0+255),w,b
  8592  000EF2  0B7F               	andlw	127
  8593  000EF4  6E02               	movwf	(??_uart+1)& (0+255),c
  8594  000EF6  5001               	movf	??_uart,w,c
  8595  000EF8  2602               	addwf	??_uart+1,f,c
  8596  000EFA  0102               	movlb	2	; () banked
  8597  000EFC  51C8               	movf	(_strEsp8266_Fram_Record+100)& (0+255),w,b
  8598  000EFE  1802               	xorwf	(??_uart+1)& (0+255),w,c
  8599  000F00  0B80               	andlw	-128
  8600  000F02  1802               	xorwf	(??_uart+1)& (0+255),w,c
  8601  000F04  0102               	movlb	2	; () banked
  8602  000F06  6FC8               	movwf	(_strEsp8266_Fram_Record+100)& (0+255),b
  8603                           
  8604                           ; BSR set to: 2
  8605                           ;main.c: 121: if(strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .F
      +                          ramLength] == '\0')
  8606  000F08  0102               	movlb	2	; () banked
  8607  000F0A  51C8               	movf	(_strEsp8266_Fram_Record+100)& (0+255),w,b
  8608  000F0C  0B7F               	andlw	127
  8609  000F0E  6E01               	movwf	??_uart& (0+255),c
  8610  000F10  5001               	movf	??_uart,w,c
  8611  000F12  0D01               	mullw	1
  8612  000F14  0E64               	movlw	low _strEsp8266_Fram_Record
  8613  000F16  24F3               	addwf	prodl,w,c
  8614  000F18  6ED9               	movwf	fsr2l,c
  8615  000F1A  0E02               	movlw	high _strEsp8266_Fram_Record
  8616  000F1C  20F4               	addwfc	prodh,w,c
  8617  000F1E  6EDA               	movwf	fsr2h,c
  8618  000F20  50DF               	movf	indf2,w,c
  8619  000F22  A4D8               	btfss	status,2,c
  8620  000F24  D002               	goto	i2l483
  8621                           
  8622                           ; BSR set to: 2
  8623                           ;main.c: 122: strEsp8266_Fram_Record .InfBit .FramFinishFlag = 1;
  8624  000F26  0102               	movlb	2	; () banked
  8625  000F28  8FC8               	bsf	(_strEsp8266_Fram_Record+100)& (0+255),7,b
  8626  000F2A                     i2l483:
  8627                           
  8628                           ; BSR set to: 2
  8629                           ;main.c: 124: }
  8630                           ;main.c: 125: PIR1bits.RCIF=0;
  8631  000F2A  9A9E               	bcf	3998,5,c	;volatile
  8632  000F2C                     i2l482:
  8633                           
  8634                           ;main.c: 126: }
  8635                           ;main.c: 127: if(PIR1bits.TMR2IF){
  8636  000F2C  B29E               	btfsc	3998,1,c	;volatile
  8637                           
  8638                           ;main.c: 128: PIR1bits.TMR2IF=0;
  8639  000F2E  929E               	bcf	3998,1,c	;volatile
  8640  000F30  C010  FFF5         	movff	??_uart+15,tablat
  8641  000F34  C00F  FFF8         	movff	??_uart+14,tblptru
  8642  000F38  C00E  FFF7         	movff	??_uart+13,tblptrh
  8643  000F3C  C00D  FFF6         	movff	??_uart+12,tblptrl
  8644  000F40  C00C  FFF4         	movff	??_uart+11,prodh
  8645  000F44  C00B  FFF3         	movff	??_uart+10,prodl
  8646  000F48  C00A  FFDA         	movff	??_uart+9,fsr2h
  8647  000F4C  C009  FFD9         	movff	??_uart+8,fsr2l
  8648  000F50  C008  FFE2         	movff	??_uart+7,fsr1h
  8649  000F54  C007  FFE1         	movff	??_uart+6,fsr1l
  8650  000F58  C006  FFEA         	movff	??_uart+5,fsr0h
  8651  000F5C  C005  FFE9         	movff	??_uart+4,fsr0l
  8652  000F60  C004  FFFB         	movff	??_uart+3,pclatu
  8653  000F64  C003  FFFA         	movff	??_uart+2,pclath
  8654  000F68  9252               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8655  000F6A  0011               	retfie		f
  8656  000F6C                     __end_of_uart:
  8657                           	opt stack 0
  8658                           pclatu	equ	0xFFB
  8659                           pclath	equ	0xFFA
  8660                           tblptru	equ	0xFF8
  8661                           tblptrh	equ	0xFF7
  8662                           tblptrl	equ	0xFF6
  8663                           tablat	equ	0xFF5
  8664                           prodh	equ	0xFF4
  8665                           prodl	equ	0xFF3
  8666                           intcon	equ	0xFF2
  8667                           indf0	equ	0xFEF
  8668                           postinc0	equ	0xFEE
  8669                           fsr0h	equ	0xFEA
  8670                           fsr0l	equ	0xFE9
  8671                           wreg	equ	0xFE8
  8672                           postdec1	equ	0xFE5
  8673                           plusw1	equ	0xFE3
  8674                           fsr1h	equ	0xFE2
  8675                           fsr1l	equ	0xFE1
  8676                           indf2	equ	0xFDF
  8677                           postinc2	equ	0xFDE
  8678                           postdec2	equ	0xFDD
  8679                           plusw2	equ	0xFDB
  8680                           fsr2h	equ	0xFDA
  8681                           fsr2l	equ	0xFD9
  8682                           status	equ	0xFD8
  8683                           pclatu	equ	0xFFB
  8684                           pclath	equ	0xFFA
  8685                           tblptru	equ	0xFF8
  8686                           tblptrh	equ	0xFF7
  8687                           tblptrl	equ	0xFF6
  8688                           tablat	equ	0xFF5
  8689                           prodh	equ	0xFF4
  8690                           prodl	equ	0xFF3
  8691                           intcon	equ	0xFF2
  8692                           indf0	equ	0xFEF
  8693                           postinc0	equ	0xFEE
  8694                           fsr0h	equ	0xFEA
  8695                           fsr0l	equ	0xFE9
  8696                           wreg	equ	0xFE8
  8697                           postdec1	equ	0xFE5
  8698                           plusw1	equ	0xFE3
  8699                           fsr1h	equ	0xFE2
  8700                           fsr1l	equ	0xFE1
  8701                           indf2	equ	0xFDF
  8702                           postinc2	equ	0xFDE
  8703                           postdec2	equ	0xFDD
  8704                           plusw2	equ	0xFDB
  8705                           fsr2h	equ	0xFDA
  8706                           fsr2l	equ	0xFD9
  8707                           status	equ	0xFD8
  8708                           
  8709                           	psect	rparam
  8710  0000                     pclatu	equ	0xFFB
  8711                           pclath	equ	0xFFA
  8712                           tblptru	equ	0xFF8
  8713                           tblptrh	equ	0xFF7
  8714                           tblptrl	equ	0xFF6
  8715                           tablat	equ	0xFF5
  8716                           prodh	equ	0xFF4
  8717                           prodl	equ	0xFF3
  8718                           intcon	equ	0xFF2
  8719                           indf0	equ	0xFEF
  8720                           postinc0	equ	0xFEE
  8721                           fsr0h	equ	0xFEA
  8722                           fsr0l	equ	0xFE9
  8723                           wreg	equ	0xFE8
  8724                           postdec1	equ	0xFE5
  8725                           plusw1	equ	0xFE3
  8726                           fsr1h	equ	0xFE2
  8727                           fsr1l	equ	0xFE1
  8728                           indf2	equ	0xFDF
  8729                           postinc2	equ	0xFDE
  8730                           postdec2	equ	0xFDD
  8731                           plusw2	equ	0xFDB
  8732                           fsr2h	equ	0xFDA
  8733                           fsr2l	equ	0xFD9
  8734                           status	equ	0xFD8
  8735                           
  8736                           	psect	temp
  8737  000052                     btemp:
  8738                           	opt stack 0
  8739  000052                     	ds	1
  8740  0000                     int$flags	set	btemp
  8741                           pclatu	equ	0xFFB
  8742                           pclath	equ	0xFFA
  8743                           tblptru	equ	0xFF8
  8744                           tblptrh	equ	0xFF7
  8745                           tblptrl	equ	0xFF6
  8746                           tablat	equ	0xFF5
  8747                           prodh	equ	0xFF4
  8748                           prodl	equ	0xFF3
  8749                           intcon	equ	0xFF2
  8750                           indf0	equ	0xFEF
  8751                           postinc0	equ	0xFEE
  8752                           fsr0h	equ	0xFEA
  8753                           fsr0l	equ	0xFE9
  8754                           wreg	equ	0xFE8
  8755                           postdec1	equ	0xFE5
  8756                           plusw1	equ	0xFE3
  8757                           fsr1h	equ	0xFE2
  8758                           fsr1l	equ	0xFE1
  8759                           indf2	equ	0xFDF
  8760                           postinc2	equ	0xFDE
  8761                           postdec2	equ	0xFDD
  8762                           plusw2	equ	0xFDB
  8763                           fsr2h	equ	0xFDA
  8764                           fsr2l	equ	0xFD9
  8765                           status	equ	0xFD8


Data Sizes:
    Strings     472
    Constant    2204
    Data        8
    BSS         303
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     72      81
    BANK0           128    120     120
    BANK1           256    221     221
    BANK2           256      0     201
    BANK3           256      0     101
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[100]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[101]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[100]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[101]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[100]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[101]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_61(CODE[2]), STR_60(CODE[2]), STR_59(CODE[2]), STR_56(CODE[3]), 
		 -> STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), 
		 -> STR_44(CODE[3]), STR_42(CODE[3]), STR_37(CODE[3]), STR_36(CODE[10]), 
		 -> STR_34(CODE[3]), STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), 
		 -> STR_27(CODE[7]), STR_26(CODE[8]), STR_19(CODE[3]), STR_17(CODE[10]), 
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[6]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), NULL(NULL[0]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[100]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[101]), 

    memset@p1	PTR void  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record(BANK2[101]), 

    memset@p	PTR unsigned char  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record(BANK2[101]), 

    sprintf$1378	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_64(CODE[17]), STR_63(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 100
		 -> STR_62(CODE[7]), sprintf@c(COMRAM[1]), STR_58(CODE[5]), STR_57(CODE[12]), 
		 -> STR_52(CODE[10]), STR_51(CODE[4]), STR_40(CODE[2]), STR_39(CODE[10]), 
		 -> STR_38(CODE[4]), STR_23(CODE[4]), STR_21(CODE[4]), ESP8266_Link_Server@cStr(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_25(CODE[17]), STR_24(CODE[20]), STR_22(CODE[13]), STR_20(CODE[13]), 
		 -> STR_18(CODE[26]), STR_15(CODE[21]), STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 120
		 -> ESP8266_Link_Server@cCmd(BANK1[120]), ESP8266_Link_Server@cStr(BANK1[100]), ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK0[120]), 
		 -> ESP8266_SendString@cStr(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    main@temp	PTR unsigned char  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[100]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[101]), 

    sp__memset	PTR void  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record(BANK2[101]), 

    sp__ESP8266_ReceiveString	PTR unsigned char  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[100]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[101]), 

    ESP8266_ReceiveString@pRecStr	PTR unsigned char  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[100]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[101]), 

    ESP8266_Link_Server@ComNum	PTR unsigned char  size(2) Largest target is 5
		 -> STR_58(CODE[5]), 

    ESP8266_Link_Server@ip	PTR unsigned char  size(2) Largest target is 12
		 -> STR_57(CODE[12]), 

    ESP8266_JoinAP@pPassWord	PTR unsigned char  size(2) Largest target is 10
		 -> STR_52(CODE[10]), 

    ESP8266_JoinAP@pSSID	PTR unsigned char  size(2) Largest target is 4
		 -> STR_51(CODE[4]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[100]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[101]), 

    ESP8266_Cmd@reply2	PTR unsigned char  size(2) Largest target is 10
		 -> STR_37(CODE[3]), STR_34(CODE[3]), STR_27(CODE[7]), STR_17(CODE[10]), 
		 -> STR_8(CODE[6]), NULL(NULL[0]), 

    ESP8266_Cmd@reply1	PTR unsigned char  size(2) Largest target is 10
		 -> STR_56(CODE[3]), STR_54(CODE[3]), STR_50(CODE[3]), STR_48(CODE[3]), 
		 -> STR_46(CODE[3]), STR_44(CODE[3]), STR_42(CODE[3]), STR_36(CODE[10]), 
		 -> STR_33(CODE[10]), STR_31(CODE[3]), STR_29(CODE[3]), STR_26(CODE[8]), 
		 -> STR_19(CODE[3]), STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), 
		 -> STR_10(CODE[3]), STR_7(CODE[3]), STR_5(CODE[3]), STR_3(CODE[8]), 
		 -> STR_2(CODE[3]), 

    ESP8266_Cmd@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_55(CODE[14]), STR_53(CODE[15]), STR_49(CODE[11]), STR_47(CODE[22]), 
		 -> STR_45(CODE[14]), STR_43(CODE[15]), STR_41(CODE[14]), STR_35(CODE[13]), 
		 -> STR_32(CODE[13]), STR_30(CODE[25]), STR_28(CODE[23]), ESP8266_Link_Server@cCmd(BANK1[120]), 
		 -> ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK0[120]), STR_13(CODE[14]), STR_11(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@cStr(COMRAM[20]), 

    ESP8266_Uart@cmd	PTR unsigned char  size(2) Largest target is 120
		 -> STR_55(CODE[14]), STR_53(CODE[15]), STR_49(CODE[11]), STR_47(CODE[22]), 
		 -> STR_45(CODE[14]), STR_43(CODE[15]), STR_41(CODE[14]), STR_35(CODE[13]), 
		 -> STR_32(CODE[13]), STR_30(CODE[25]), STR_28(CODE[23]), ESP8266_Link_Server@cCmd(BANK1[120]), 
		 -> ESP8266_BuildAP@cCmd(COMRAM[120]), ESP8266_JoinAP@cCmd(BANK0[120]), STR_13(CODE[14]), STR_11(CODE[14]), 
		 -> STR_9(CODE[14]), STR_6(CODE[9]), STR_4(CODE[5]), ESP8266_SendString@cStr(COMRAM[20]), 

    ADtoPWM@AD	PTR unsigned char  size(2) Largest target is 101
		 -> strEsp8266_Fram_Record.Data_RX_BUF(BANK2[100]), NULL(NULL[0]), strEsp8266_Fram_Record(BANK2[101]), 


Critical Paths under _main in COMRAM

    _PCA9685_init->_PCA9685_writeOneByte
    _IIC_Init->_delay_us
    _ESP8266_client->_ESP8266_Link_Server
    _STA_MODE->_ESP8266_Net_Mode_Choose
    _ESP8266_Net_Mode_Choose->_ESP8266_Cmd
    _ESP8266_Rst->_ESP8266_Cmd
    _ESP8266_Link_Server->_sprintf
    _ESP8266_JoinAP->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ESP8266_AT_Test->_ESP8266_Cmd
    _ESP8266_Cmd->_strstr
    _ESP8266_ReceiveString->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _ADtoPWM->_PWMt0PCA
    _PWMt0PCA->_transmit_finger
    _transmit_finger->_PCA9685_writeOneByte
    _PCA9685_writeOneByte->_IIC_Send_Byte
    _delay_ms->_Delay10KTCYx
    _IIC_Wait_Ack->_delay_us
    _IIC_Stop->_delay_us
    _IIC_Start->_delay_us
    _IIC_Send_Byte->_delay_us
    _delay_us->_Delay10TCYx

Critical Paths under _uart in COMRAM

    None.

Critical Paths under _main in BANK0

    _ESP8266_client->_ESP8266_JoinAP

Critical Paths under _uart in BANK0

    None.

Critical Paths under _main in BANK1

    _ESP8266_client->_ESP8266_Link_Server

Critical Paths under _uart in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _uart in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _uart in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _uart in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _uart in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   88660
                                             70 COMRAM     2     2      0
                            _ADtoPWM
              _ESP8266_ReceiveString
                     _ESP8266_client
                       _GPIO_initial
                       _PCA9685_init
                       _initial_UART
                             _memset
                 _oclillator_initial
            _timer_intrrupt_initinal
 ---------------------------------------------------------------------------------
 (1) _timer_intrrupt_initinal                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _oclillator_initial                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     288
                                             17 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _initial_UART                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PCA9685_init                                         0     0      0    8004
                           _IIC_Init
               _PCA9685_writeOneByte
 ---------------------------------------------------------------------------------
 (2) _IIC_Init                                             0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _GPIO_initial                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ESP8266_client                                       0     0      0   68067
                    _ESP8266_AT_Test
                        _ESP8266_Cmd
                     _ESP8266_JoinAP
                _ESP8266_Link_Server
                        _ESP8266_Rst
                           _STA_MODE
 ---------------------------------------------------------------------------------
 (2) _STA_MODE                                             0     0      0   16394
                        _ESP8266_Cmd
            _ESP8266_Net_Mode_Choose
 ---------------------------------------------------------------------------------
 (3) _ESP8266_Net_Mode_Choose                              1     1      0    8208
                                             45 COMRAM     1     1      0
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Rst                                          0     0      0    8186
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (2) _ESP8266_Link_Server                                227   221      6   13719
                                             64 COMRAM     6     0      6
                                              0 BANK1    221   221      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ESP8266_JoinAP                                     124   120      4   13396
                                             64 COMRAM     4     0      4
                                              0 BANK0    120   120      0
                        _ESP8266_Cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             39    29     10    4956
                                             29 COMRAM    35    25     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     287
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                             24 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     546
                                             17 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _ESP8266_AT_Test                                      0     0      0    8186
                        _ESP8266_Cmd
 ---------------------------------------------------------------------------------
 (4) _ESP8266_Cmd                                          9     1      8    8186
                                             36 COMRAM     9     1      8
                       _ESP8266_Uart
                           _delay_ms
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _ESP8266_Uart                                         6     4      2     154
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ESP8266_ReceiveString                                5     3      2    1793
                                             36 COMRAM     5     3      2
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _strstr                                               4     0      4    1769
                                             32 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     3      6     326
                                             23 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (6) _strlen                                               6     4      2     154
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _strchr                                               5     1      4     216
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _ADtoPWM                                             26    24      2   10485
                                             35 COMRAM    26    24      2
                           _PWMt0PCA
 ---------------------------------------------------------------------------------
 (2) _PWMt0PCA                                             5     0      5    9751
                                             30 COMRAM     5     0      5
                    _transmit_finger
 ---------------------------------------------------------------------------------
 (3) _transmit_finger                                      5     2      3    8329
                                             25 COMRAM     5     2      3
               _PCA9685_writeOneByte
 ---------------------------------------------------------------------------------
 (2) _PCA9685_writeOneByte                                 2     1      1    6871
                                             23 COMRAM     2     1      1
                      _IIC_Send_Byte
                          _IIC_Start
                           _IIC_Stop
                       _IIC_Wait_Ack
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     621
                                             19 COMRAM     2     0      2
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (4) _Delay10KTCYx                                         2     2      0      22
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _IIC_Wait_Ack                                         1     1      0    2290
                                             20 COMRAM     1     1      0
                           _IIC_Stop
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _IIC_Stop                                             0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _IIC_Start                                            0     0      0    1133
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _IIC_Send_Byte                                        3     3      0    1202
                                             20 COMRAM     3     3      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     0      2    1133
                                             18 COMRAM     2     0      2
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (5) _Delay10TCYx                                          1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _uart                                                17    17      0      23
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADtoPWM
     _PWMt0PCA
       _transmit_finger
         _PCA9685_writeOneByte
           _IIC_Send_Byte
             _delay_us
               _Delay10TCYx
           _IIC_Start
             _delay_us
               _Delay10TCYx
           _IIC_Stop
             _delay_us
               _Delay10TCYx
           _IIC_Wait_Ack
             _IIC_Stop
               _delay_us
                 _Delay10TCYx
             _delay_us
               _Delay10TCYx
           _delay_ms
             _Delay10KTCYx
   _ESP8266_ReceiveString
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)
   _ESP8266_client
     _ESP8266_AT_Test
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _ESP8266_Cmd
       _ESP8266_Uart
       _delay_ms
         _Delay10KTCYx
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _ESP8266_JoinAP
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Link_Server
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _ESP8266_Rst
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
     _STA_MODE
       _ESP8266_Cmd
         _ESP8266_Uart
         _delay_ms
           _Delay10KTCYx
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
       _ESP8266_Net_Mode_Choose
         _ESP8266_Cmd
           _ESP8266_Uart
           _delay_ms
             _Delay10KTCYx
           _strstr
             _strchr
             _strlen
             _strncmp
               _strlen (ARG)
   _GPIO_initial
   _PCA9685_init
     _IIC_Init
       _delay_us
         _Delay10TCYx
     _PCA9685_writeOneByte
       _IIC_Send_Byte
         _delay_us
           _Delay10TCYx
       _IIC_Start
         _delay_us
           _Delay10TCYx
       _IIC_Stop
         _delay_us
           _Delay10TCYx
       _IIC_Wait_Ack
         _IIC_Stop
           _delay_us
             _Delay10TCYx
         _delay_us
           _Delay10TCYx
       _delay_ms
         _Delay10KTCYx
   _initial_UART
   _memset
   _oclillator_initial
   _timer_intrrupt_initinal

 _uart (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      65      11       39.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C9       9       78.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     DD      DD       7       86.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80     78      78       5       93.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     48      51       1       64.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2D4      15        0.0%
DATA                 0      0     2D4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Mar 12 00:12:45 2019

             _ESP8266_Link_Server 0D82               ___wmul@multiplicand 0014  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                               l311 138E  
                             l321 10B4                               l307 132A  
                             l245 15E4                               l432 1186  
                             l600 05DC                               l540 01B8  
                             l541 01BA                               l616 06B4  
                    __CFG_CPB$OFF 000000                               _PR2 000FCB  
                    __CFG_CPD$OFF 000000                               prod 000FF3  
                             wreg 000FE8              ?_ESP8266_Link_Server 0041  
                   ?_IIC_Wait_Ack 0001         ??_ESP8266_Net_Mode_Choose 002E  
                    __CFG_LVP$OFF 000000                      __CFG_WDT$OFF 000000  
                 __end_of_ADtoPWM 0C5A                              l1072 1496  
                            l3001 0846                              l1082 156A  
                            l3003 0852                              l3005 0856  
                            l3015 088C                              l3111 0E06  
                            l3103 0D9A                              l3031 11E0  
                            l3023 1194                              l3041 0C5C  
                            l3009 086E                              l3017 08A6  
                            l3113 0E16                              l3105 0DC8  
                            l2403 1888                              l3051 0CAE  
                            l3115 0E3C                              l3027 11BA  
                            l3123 1694                              l2413 184C  
                            l3053 0CC4                              l3045 0C7A  
                            l3141 09FC                              l3133 0958  
                            l3117 0E58                              l3109 0DF6  
                            l3037 1206                              l2407 1860  
                            l3063 0D16                              l3047 0C90  
                            l3065 0D2C                              l3057 0CE2  
                            l3073 0D60                              l3161 0B8E  
                            l3153 0AEA                              l3145 0A4E  
                            l3137 09AA                              l3129 0906  
                            l2441 12CE                              l3241 0FB6  
                            l2515 15D6                              l3059 0CF8  
                            l2427 157E                              l2531 121E  
                            l3251 10FA                              l3091 16EC  
                            l3243 0FE0                              l3069 0D4A  
                            l3165 0BE0                              l3157 0B3C  
                            l3149 0A98                              l2453 15EC  
                            l2429 1582                              l2445 1300  
                            l2437 12A2                              l3253 1108  
                            l2525 1326                              l3245 100A  
                            l2447 1308                              l2543 1296  
                            l3255 1118                              l2615 1464  
                            l2703 012E                              l3239 0F9C  
                            l3271 16DA                              l3431 13CC  
                            l2465 1834                              l2537 1258  
                            l3257 1146                              l2561 1060  
                            l2617 146C                              l2721 0196  
                            l2483 1400                              l2459 1606  
                            l2539 1280                              l2627 148C  
                            l2619 1470                              l2643 1560  
                            l2635 1540                              l2811 03D0  
                            l2715 0172                              l2723 01AC  
                            l3267 16CA                              l2637 1548  
                            l2741 01F4                              l2725 01B2  
                            l2717 0178                              l2661 001E  
                            l2487 1408                              l2639 154C  
                            l2911 05D6                              l2903 05AA  
                            l2831 0412                              l2807 03B8  
                            l2743 0226                              l2727 01B6  
                            l2671 0050                              l2905 05B2  
                            l2833 0416                              l2817 03E2  
                            l2753 0262                              l2737 01E6  
                            l2729 01BE                              l2673 0054  
                            l2587 10D8                              l2579 10B8  
                            l2819 03E6                              l2763 0280  
                            l2771 02C4                              l2755 026A  
                            l2739 01F0                              l2675 0058  
                            l2667 003A                              l2917 05EE  
                            l2933 0646                              l2941 0666  
                            l2845 0442                              l2861 0472  
                            l2781 02FC                              l2765 0292  
                            l2749 024C                              l2669 004C  
                            l2599 182C                              l2951 068E  
                            l2927 0630                              l2871 04B6  
                            l2847 0446                              l2863 048E  
                            l2775 02DA                              l2759 0270  
                            l2687 00A2                              l2695 0100  
                            l2679 005E                              l2961 06C6  
                            l2945 0670                              l2785 0310  
                            l2793 0328                              l2955 06AE  
                            l2891 053E                              l2883 0500  
                            l2867 04A4                              l2779 02EA  
                            l2795 037A                              l2885 0508  
                            l2877 04D8                              l2789 0322  
                            l2991 07CC                              l2983 0752  
                            l2967 06FA                              l2985 0792  
                            l2977 073C                              l2897 057E  
                            l2995 07F8                              l2899 0586  
                            l2999 082A                              STR_1 7EB0  
                            STR_2 7FF6                              STR_3 7FBC  
                            STR_4 7FE0                              STR_5 7FC1  
                            STR_6 7FB3                              STR_7 7FC1  
                            STR_8 7FDA                              STR_9 7F22  
                            u2120 02BA                              u2050 0220  
                            u2127 02B0                              _LATD 000F8C  
                            u2057 0216                              u2531 071E  
                            u1740 135A                              u2380 0574  
                            u1750 1388                              u3177 1852  
                            u3187 188A                              u1747 1350  
                            u1757 137E                              u1695 1410  
                            u2671 0D90                              _TRMT 007D61  
                            _TXIF 007CF4                              _main 1394  
                            _uart 0008                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0052  
       ??_timer_intrrupt_initinal 0012                __size_of_IIC_Start 0024  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                     __CFG_IESO$OFF 000000  
                  ?_IIC_Send_Byte 0001                      _sprintf$1371 002C  
                    _sprintf$1372 002E                      _sprintf$1378 0030  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
                     _Delay10TCYx 1886                  __end_of_IIC_Init 1816  
                __end_of_IIC_Stop 17D0              __end_of_PCA9685_init 17AC  
                           ?_main 0001                             STR_10 7FC1  
                           STR_11 7F3E                             STR_12 7FC1  
                           STR_20 7F67                             STR_21 7FEE  
                           STR_13 7F4C                             STR_14 7FC1  
                           STR_22 7F67                             STR_30 7E41  
                           STR_23 7FF2                             STR_15 7E87  
                           STR_16 7FC1                             STR_40 7FFD  
                           STR_32 7F5A                             STR_24 7E9C  
                           STR_17 7FA9                             STR_33 7F9F  
                           STR_41 7F14                             STR_25 7EE5  
                           STR_50 7FC1                             STR_26 7FC4  
                           STR_18 7E27                             STR_35 7F5A  
                           STR_51 7FEA                             STR_27 7FD3  
                           STR_43 7EF6                             STR_52 7F8B  
                           STR_60 7FF9                             STR_36 7F95  
                           STR_28 7E5A                             STR_61 7FF9  
                           STR_37 7FC1                             STR_45 7F30  
                           STR_53 7F05                             STR_54 7FC1  
                           STR_38 7FEA                             STR_62 7FCC  
                           STR_55 7F14                             STR_39 7F8B  
                           STR_63 7EC3                             STR_47 7E71  
                           STR_56 7FC1                             STR_64 7ED4  
                           STR_49 7F80                             STR_57 7F74  
                           STR_58 7FE5                             STR_59 7FFB  
                           ?_uart 0001                   __end_of___lwdiv 14A0  
                 __end_of___lwmod 1574                             i2l482 0F2C  
                           i2l483 0F2A                             _RCREG 000FAE  
                           _SPBRG 000FAF                             _PORTD 000F83  
                           _TRISD 000F95              __end_of_ESP8266_Uart 1394  
                           _TXREG 000FAD             __size_of_Delay10KTCYx 0016  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
           ??_ESP8266_Link_Server 0047                    __CFG_EBTR2$OFF 000000  
                  ??_IIC_Wait_Ack 0015                    __CFG_EBTR3$OFF 000000  
                   ?_GPIO_initial 0001                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                   __end_of_dpowers 7E1F  
                __end_of_STA_MODE 16C0                   __end_of_isdigit 1834  
                __end_of_PWMt0PCA 0D82                             pclath 000FFA  
                           tablat 000FF5           __size_of_ESP8266_JoinAP 004A  
                           plusw1 000FE3                             plusw2 000FDB  
                           status 000FD8                   __end_of_sprintf 08B4  
      __end_of_oclillator_initial 18B4                   __end_of_strncmp 1322  
         __size_of_ESP8266_client 00C4                 ??_transmit_finger 001D  
                 __initialization 14EA                      __end_of_main 13F6  
            __size_of_ESP8266_Cmd 00C0                      __end_of_uart 0F6C  
            __size_of_ESP8266_Rst 0026                      _Delay10KTCYx 184A  
                  __CFG_OSC$HSPLL 000000             _ESP8266_ReceiveString 10F0  
                  ESP8266_Cmd@cmd 0025                            ??_main 0047  
                          ??_uart 0001   __end_of_timer_intrrupt_initinal 1886  
                   __activetblptr 000002                 __end_of_IIC_Start 17F4  
                       ??_ADtoPWM 0026                    ??_GPIO_initial 0012  
           ESP8266_Link_Server@id 0045             ESP8266_Link_Server@ip 0041  
                IIC_Send_Byte@txd 0016                            _SPBRGH 000FB0  
                   ?_initial_UART 0001                   ??_IIC_Send_Byte 0015  
                __end_of_delay_ms 184A                  __end_of_delay_us 1876  
                  __CFG_XINST$OFF 000000                  _ESP8266_Cmd$1162 002D  
             ESP8266_JoinAP@pSSID 0041          __size_of_ESP8266_AT_Test 002C  
                          ___wmul 173E                    __CFG_STVREN$ON 000000  
                       ??___lwdiv 0016                         ??___lwmod 001D  
               ESP8266_Cmd@reply1 0027                 ESP8266_Cmd@reply2 0029  
                          _memset 16C0                            clear_0 1510  
                          clear_1 151C                            _strchr 15EC  
                          _strlen 1574                            _strstr 121C  
           IIC_Wait_Ack@ucErrTime 0015                      __pdataCOMRAM 0049  
                       ??_isdigit 0012                      __mediumconst 758A  
                          uart@ch 0011                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_sprintf 0028         ESP8266_Link_Server@ComNum 0043  
                       ??_strncmp 001E                        __accesstop 0080  
         __end_of__initialization 1524                         ?_IIC_Init 0001  
                  ??_initial_UART 0012                   __CFG_PBADEN$OFF 000000  
                       ?_IIC_Stop 0001                     ___rparam_used 000001  
         transmit_finger@HL_Value 001A                    __pcstackCOMRAM 0001  
            __end_of_IIC_Wait_Ack 15EC             __size_of_PCA9685_init 0024  
         ESP8266_JoinAP@pPassWord 0043            ?_ESP8266_ReceiveString 0025  
                       ?_STA_MODE 0001             __size_of_ESP8266_Uart 0072  
                       ?_PWMt0PCA 001F                         ADtoPWM@AD 0024  
                       ADtoPWM@u0 002A                         ADtoPWM@u1 002C  
                       ADtoPWM@u2 002E                         ADtoPWM@u3 0030  
                       ADtoPWM@w0 0034                         ADtoPWM@u4 0032  
                       ADtoPWM@w1 0036                         ADtoPWM@w2 0038  
                       ADtoPWM@w3 003A                         ADtoPWM@w4 003C  
   __size_of_PCA9685_writeOneByte 0036                      sprintf@width 003C  
                  _ESP8266_JoinAP 14A0                        __pbssBANK2 0200  
                      __pbssBANK3 0300          ESP8266_Link_Server@F4038 0200  
                      ??_IIC_Init 0015                        ??_IIC_Stop 0015  
                    _PCA9685_init 1788                    _ESP8266_client 0F6C  
                    _ESP8266_Uart 1322                __CFG_CCP2MX$PORTBE 000000  
            __end_of_GPIO_initial 18A4          ESP8266_Link_Server@enumE 01DC  
                    ?_Delay10TCYx 0001                           ?___wmul 0012  
           transmit_finger@finger 001C                   ESP8266_Uart@cmd 0012  
                      ??_STA_MODE 002F                           ?_memset 0012  
                      ??_PWMt0PCA 0024                 ??_ESP8266_AT_Test 002E  
                         ?_strchr 0012                           ?_strlen 0012  
                         ?_strstr 0021                           _ADtoPWM 08B4  
                       ?_delay_ms 0014                         ?_delay_us 0013  
          __end_of_ESP8266_JoinAP 14EA                 ESP8266_Uart@index 0016  
                 _transmit_finger 1622      ESP8266_ReceiveString@pRecStr 0028  
          __end_of_ESP8266_client 1030                           __Hparam 0000  
                         __Lparam 0000                   __size_of___wmul 0026  
                         ___lwdiv 144E                           ___lwmod 1532  
              _oclillator_initial 18AC                           __pcinit 14EA  
                 __size_of_memset 002C                   Delay10TCYx@unit 0012  
                         __ramtop 0600       __end_of_ESP8266_Link_Server 0E7E  
                         __ptext0 1394                           __ptext1 1876  
                         __ptext2 18AC                           __ptext3 16C0  
                         __ptext4 1764                           __ptext5 1788  
                         __ptext6 17F4                           __ptext7 1896  
                         __ptext8 0F6C                           __ptext9 168E  
                       _T0CONbits 000FD5              __end_of_initial_UART 1788  
                 __size_of_strchr 0036                   __size_of_strlen 003E  
               __end_of_hexpowers 7E27                   __size_of_strstr 0084  
                         _dpowers 7E15          ?_ESP8266_Net_Mode_Choose 0001  
                       _T2CONbits 000FCA                           _isdigit 1816  
             ?_oclillator_initial 0001                        ??_delay_ms 0016  
                      ??_delay_us 0015                   ?_ESP8266_JoinAP 0041  
                       _IIC_Start 17D0                           _sprintf 0012  
                         _strncmp 12A0                    __pintcode_body 0E7E  
                      delay_ms@ms 0014              end_of_initialization 1524  
               __end_of_octpowers 7E15          ?_timer_intrrupt_initinal 0001  
                      delay_us@us 0013                   ?_ESP8266_client 0001  
                         memset@c 0014                           memset@n 0016  
                         memset@p 0018                     __Lmediumconst 758A  
                         int_func 0E7E             __size_of_IIC_Wait_Ack 003A  
                   ??_ESP8266_Cmd 002D              ??_oclillator_initial 0012  
                   ??_ESP8266_Rst 002E                         _RCSTAbits 000FAB  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                         strlen@s 0012                         _PORTBbits 000F81  
                       _PORTDbits 000F83           __end_of_transmit_finger 1658  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
                    _IIC_Wait_Ack 15B2                        ?_IIC_Start 0001  
           __size_of_GPIO_initial 000E                         _TXSTAbits 000FAC  
               __size_of_IIC_Init 0022                 __size_of_IIC_Stop 0024  
           __end_of_IIC_Send_Byte 144E           ??_ESP8266_ReceiveString 0027  
                  IIC_Send_Byte@t 0017               __end_of_ESP8266_Cmd 10F0  
 __end_of_ESP8266_Net_Mode_Choose 121C                    __end_of___wmul 1764  
             __end_of_ESP8266_Rst 173E                       _BAUDCONbits 000FB8  
            __size_of_Delay10TCYx 0010                     __pidataCOMRAM 18A4  
                  __end_of_memset 16EC                 __size_of_STA_MODE 0032  
                  __end_of_strchr 1622                 __size_of_PWMt0PCA 0128  
                  __end_of_strlen 15B2                    __end_of_strstr 12A0  
             start_initialization 14EA                      _GPIO_initial 1896  
                     PWMt0PCA@low 0021                   _ESP8266_AT_Test 16EC  
              ESP8266_JoinAP@cCmd 0080      __end_of_PCA9685_writeOneByte 168E  
                        ??___wmul 0016             __size_of_initial_UART 0024  
                __CFG_LPT1OSC$OFF 000000                          ??_memset 0018  
             __end_of_finger_up_0 7D99               __end_of_finger_up_1 7ABB  
             __end_of_finger_up_2 78DF               __end_of_finger_up_3 77DD  
             __end_of_finger_up_4 76B9                          ??_strchr 0016  
                        ??_strlen 0014                          ??_strstr 0025  
     ESP8266_Net_Mode_Choose@MODE 002E                          ?_ADtoPWM 0024  
                ?_transmit_finger 001A                       __pbssCOMRAM 0051  
                   __pcstackBANK0 0080                     __pcstackBANK1 0100  
                    _isdigit$1608 0013                       ??_IIC_Start 0015  
               __size_of_delay_ms 0016                 __size_of_delay_us 0016  
                     sprintf@flag 003F                       sprintf@prec 003B  
                    _initial_UART 1764              transmit_finger@Hbyte 001D  
                     _ESP8266_Cmd 1030              transmit_finger@Lbyte 001E  
         ESP8266_Link_Server@cCmd 0100                  ___lwdiv@dividend 0012  
                     _ESP8266_Rst 1718           ESP8266_Link_Server@cStr 0178  
                       __pintcode 0008                     __pmediumconst 758A  
                   ?_Delay10KTCYx 0001                          ?___lwdiv 0012  
                        ?___lwmod 0019                    PWMt0PCA@finger 0023  
                ??_ESP8266_JoinAP 0045              _determine_servo_done 0051  
                        ?_isdigit 0001                         _hexpowers 7E1F  
                ??_ESP8266_client 0047                  ___lwdiv@quotient 0016  
                        ?_sprintf 001E                          ?_strncmp 0018  
         __end_of_ESP8266_AT_Test 1718                          _IIC_Init 17F4  
                  ___wmul@product 0016                          _IIC_Stop 17AC  
__size_of_ESP8266_Net_Mode_Choose 008C                          _LATAbits 000F89  
                       _octpowers 7E09                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                       _finger_up_0 7CFB  
                     _finger_up_1 79CF                       _finger_up_2 77DD  
                     _finger_up_3 76B9                       _finger_up_4 758B  
                        _RCONbits 000FD0                  __CFG_WDTPS$32768 000000  
                  ??_Delay10KTCYx 0012  __size_of_timer_intrrupt_initinal 0010  
                        _STA_MODE 168E                          _PWMt0PCA 0C5A  
               ___wmul@multiplier 0012                  Delay10KTCYx@unit 0013  
                __size_of_ADtoPWM 03A6      __size_of_ESP8266_Link_Server 00FC  
            _PCA9685_writeOneByte 1658                         copy_data0 14FE  
                      PWMt0PCA@up 001F                          __Hrparam 0000  
     __size_of_oclillator_initial 0008                          __Lrparam 0000  
        PCA9685_writeOneByte@addr 0019                __CFG_BOREN$SBORDIS 000000  
        PCA9685_writeOneByte@data 0018    __size_of_ESP8266_ReceiveString 00A0  
   __end_of_ESP8266_ReceiveString 1190                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042               LCD_CreateFont@F3805 0049  
                      sprintf@idx 0032                        sprintf@len 0035  
                      sprintf@val 0039                  __size_of_isdigit 001E  
                        _delay_ms 1834                          _delay_us 1860  
                 ___lwdiv@divisor 0014             ?_PCA9685_writeOneByte 0018  
                 ___lwdiv@counter 0018                          __ptext10 1190  
                        __ptext11 1718                          __ptext20 1030  
                        __ptext12 0D82                          __ptext21 1322  
                        __ptext13 14A0                          __ptext30 1658  
                        __ptext22 10F0                          __ptext14 0012  
                        __ptext31 1834                          __ptext23 121C  
                        __ptext15 1816                          __ptext32 184A  
                        __ptext24 12A0                          __ptext16 173E  
                        __ptext33 15B2                          __ptext25 1574  
                        __ptext17 1532                          __ptext34 17AC  
                        __ptext26 15EC                          __ptext18 144E  
                        __ptext35 17D0                          __ptext27 08B4  
                        __ptext19 16EC                          __ptext36 13F6  
                        __ptext28 0C5A                          __ptext37 1860  
                        __ptext29 1622                          __ptext38 1886  
                __size_of_sprintf 08A2                  __size_of_strncmp 0082  
                ?_ESP8266_AT_Test 0001                     ?_PCA9685_init 0001  
                   __size_of_main 0062                     __size_of_uart 0F64  
             ESP8266_Cmd@waittime 002B                        strncmp@len 001C  
                   ?_ESP8266_Uart 0012                     ??_Delay10TCYx 0012  
                        int$flags 0052                 _strPc_Fram_Record 0300  
                        main@temp 0047                    _finger_under_0 7D99  
                  _finger_under_1 7B9D                    _finger_under_2 7ABB  
                  _finger_under_3 7C5D                    _finger_under_4 78DF  
                      _INTCONbits 000FF2            __size_of_IIC_Send_Byte 0058  
                        isdigit@c 0014                          memset@p1 0012  
            __end_of_Delay10KTCYx 1860                          intlevel2 0000  
                       sprintf@ap 0037                         sprintf@cp 0033  
                       sprintf@sp 001E           _ESP8266_Net_Mode_Choose 1190  
                  ??_PCA9685_init 001A                         strchr@chr 0014  
                ___lwmod@dividend 0019                         strchr@ptr 0012  
                  ??_ESP8266_Uart 0014                         strncmp@s1 0018  
                       strncmp@s2 001A                      ?_ESP8266_Cmd 0025  
                      _OSCCONbits 000FD3                      ?_ESP8266_Rst 0001  
         _timer_intrrupt_initinal 1876            __end_of_finger_under_0 7E09  
          __end_of_finger_under_1 7C5D            __end_of_finger_under_2 7B9D  
          __end_of_finger_under_3 7CFB            __end_of_finger_under_4 79CF  
             __end_of_Delay10TCYx 1896                          sprintf@c 003E  
                        sprintf@f 0020                   ___lwmod@divisor 001B  
                        strlen@cp 0016                   ___lwmod@counter 001D  
          ??_PCA9685_writeOneByte 0019            _strEsp8266_Fram_Record 0264  
                        strstr@s1 0021                          strstr@s2 0023  
        __size_of_transmit_finger 0036                     _IIC_Send_Byte 13F6  
